
Gateway.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000001fc  00800100  00000efa  00000f8e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000efa  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000013b  008002fc  008002fc  0000118a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000118a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000011bc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000240  00000000  00000000  000011fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00004332  00000000  00000000  0000143c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000016d3  00000000  00000000  0000576e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001875  00000000  00000000  00006e41  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000007d4  00000000  00000000  000086b8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00001102  00000000  00000000  00008e8c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00002753  00000000  00000000  00009f8e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000280  00000000  00000000  0000c6e1  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	49 c0       	rjmp	.+146    	; 0x94 <__ctors_end>
   2:	00 00       	nop
   4:	64 c0       	rjmp	.+200    	; 0xce <__bad_interrupt>
   6:	00 00       	nop
   8:	62 c0       	rjmp	.+196    	; 0xce <__bad_interrupt>
   a:	00 00       	nop
   c:	60 c0       	rjmp	.+192    	; 0xce <__bad_interrupt>
   e:	00 00       	nop
  10:	5e c0       	rjmp	.+188    	; 0xce <__bad_interrupt>
  12:	00 00       	nop
  14:	5c c0       	rjmp	.+184    	; 0xce <__bad_interrupt>
  16:	00 00       	nop
  18:	5a c0       	rjmp	.+180    	; 0xce <__bad_interrupt>
  1a:	00 00       	nop
  1c:	58 c0       	rjmp	.+176    	; 0xce <__bad_interrupt>
  1e:	00 00       	nop
  20:	56 c0       	rjmp	.+172    	; 0xce <__bad_interrupt>
  22:	00 00       	nop
  24:	54 c0       	rjmp	.+168    	; 0xce <__bad_interrupt>
  26:	00 00       	nop
  28:	52 c0       	rjmp	.+164    	; 0xce <__bad_interrupt>
  2a:	00 00       	nop
  2c:	50 c0       	rjmp	.+160    	; 0xce <__bad_interrupt>
  2e:	00 00       	nop
  30:	4e c0       	rjmp	.+156    	; 0xce <__bad_interrupt>
  32:	00 00       	nop
  34:	4c c0       	rjmp	.+152    	; 0xce <__bad_interrupt>
  36:	00 00       	nop
  38:	4a c0       	rjmp	.+148    	; 0xce <__bad_interrupt>
  3a:	00 00       	nop
  3c:	48 c0       	rjmp	.+144    	; 0xce <__bad_interrupt>
  3e:	00 00       	nop
  40:	7b c1       	rjmp	.+758    	; 0x338 <__vector_16>
  42:	00 00       	nop
  44:	44 c0       	rjmp	.+136    	; 0xce <__bad_interrupt>
  46:	00 00       	nop
  48:	42 c0       	rjmp	.+132    	; 0xce <__bad_interrupt>
  4a:	00 00       	nop
  4c:	40 c0       	rjmp	.+128    	; 0xce <__bad_interrupt>
  4e:	00 00       	nop
  50:	3e c0       	rjmp	.+124    	; 0xce <__bad_interrupt>
  52:	00 00       	nop
  54:	3c c0       	rjmp	.+120    	; 0xce <__bad_interrupt>
  56:	00 00       	nop
  58:	3a c0       	rjmp	.+116    	; 0xce <__bad_interrupt>
  5a:	00 00       	nop
  5c:	38 c0       	rjmp	.+112    	; 0xce <__bad_interrupt>
  5e:	00 00       	nop
  60:	36 c0       	rjmp	.+108    	; 0xce <__bad_interrupt>
  62:	00 00       	nop
  64:	34 c0       	rjmp	.+104    	; 0xce <__bad_interrupt>
  66:	00 00       	nop
  68:	32 c0       	rjmp	.+100    	; 0xce <__bad_interrupt>
  6a:	00 00       	nop
  6c:	30 c0       	rjmp	.+96     	; 0xce <__bad_interrupt>
  6e:	00 00       	nop
  70:	2e c0       	rjmp	.+92     	; 0xce <__bad_interrupt>
  72:	00 00       	nop
  74:	2c c0       	rjmp	.+88     	; 0xce <__bad_interrupt>
  76:	00 00       	nop
  78:	2a c0       	rjmp	.+84     	; 0xce <__bad_interrupt>
  7a:	00 00       	nop
  7c:	28 c0       	rjmp	.+80     	; 0xce <__bad_interrupt>
  7e:	00 00       	nop
  80:	26 c0       	rjmp	.+76     	; 0xce <__bad_interrupt>
  82:	00 00       	nop
  84:	24 c0       	rjmp	.+72     	; 0xce <__bad_interrupt>
  86:	00 00       	nop
  88:	22 c0       	rjmp	.+68     	; 0xce <__bad_interrupt>
  8a:	00 00       	nop
  8c:	20 c0       	rjmp	.+64     	; 0xce <__bad_interrupt>
  8e:	00 00       	nop
  90:	1e c0       	rjmp	.+60     	; 0xce <__bad_interrupt>
	...

00000094 <__ctors_end>:
  94:	11 24       	eor	r1, r1
  96:	1f be       	out	0x3f, r1	; 63
  98:	cf ef       	ldi	r28, 0xFF	; 255
  9a:	d0 e1       	ldi	r29, 0x10	; 16
  9c:	de bf       	out	0x3e, r29	; 62
  9e:	cd bf       	out	0x3d, r28	; 61

000000a0 <__do_copy_data>:
  a0:	12 e0       	ldi	r17, 0x02	; 2
  a2:	a0 e0       	ldi	r26, 0x00	; 0
  a4:	b1 e0       	ldi	r27, 0x01	; 1
  a6:	ea ef       	ldi	r30, 0xFA	; 250
  a8:	fe e0       	ldi	r31, 0x0E	; 14
  aa:	00 e0       	ldi	r16, 0x00	; 0
  ac:	0b bf       	out	0x3b, r16	; 59
  ae:	02 c0       	rjmp	.+4      	; 0xb4 <__do_copy_data+0x14>
  b0:	07 90       	elpm	r0, Z+
  b2:	0d 92       	st	X+, r0
  b4:	ac 3f       	cpi	r26, 0xFC	; 252
  b6:	b1 07       	cpc	r27, r17
  b8:	d9 f7       	brne	.-10     	; 0xb0 <__do_copy_data+0x10>

000000ba <__do_clear_bss>:
  ba:	24 e0       	ldi	r18, 0x04	; 4
  bc:	ac ef       	ldi	r26, 0xFC	; 252
  be:	b2 e0       	ldi	r27, 0x02	; 2
  c0:	01 c0       	rjmp	.+2      	; 0xc4 <.do_clear_bss_start>

000000c2 <.do_clear_bss_loop>:
  c2:	1d 92       	st	X+, r1

000000c4 <.do_clear_bss_start>:
  c4:	a7 33       	cpi	r26, 0x37	; 55
  c6:	b2 07       	cpc	r27, r18
  c8:	e1 f7       	brne	.-8      	; 0xc2 <.do_clear_bss_loop>
  ca:	e1 d3       	rcall	.+1986   	; 0x88e <main>
  cc:	14 c7       	rjmp	.+3624   	; 0xef6 <_exit>

000000ce <__bad_interrupt>:
  ce:	98 cf       	rjmp	.-208    	; 0x0 <__vectors>

000000d0 <set_page>:

void can_get_id(uint8_t mobnr, can_id_t id){
	set_page(mobnr);
	id[0] = CANIDT2 >> 5 | CANIDT1 << 3;
	id[1] = CANIDT1 >> 5;
}
  d0:	20 e1       	ldi	r18, 0x10	; 16
  d2:	82 9f       	mul	r24, r18
  d4:	c0 01       	movw	r24, r0
  d6:	11 24       	eor	r1, r1
  d8:	88 60       	ori	r24, 0x08	; 8
  da:	80 93 ed 00 	sts	0x00ED, r24	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7e00ed>
  de:	08 95       	ret

000000e0 <can_init>:
  e0:	cf 93       	push	r28
  e2:	df 93       	push	r29
  e4:	f8 94       	cli
  e6:	81 e0       	ldi	r24, 0x01	; 1
  e8:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
  ec:	84 e3       	ldi	r24, 0x34	; 52
  ee:	80 93 db 00 	sts	0x00DB, r24	; 0x8000db <__TEXT_REGION_LENGTH__+0x7e00db>
  f2:	10 92 da 00 	sts	0x00DA, r1	; 0x8000da <__TEXT_REGION_LENGTH__+0x7e00da>
  f6:	20 e0       	ldi	r18, 0x00	; 0
  f8:	4d ee       	ldi	r20, 0xED	; 237
  fa:	50 e0       	ldi	r21, 0x00	; 0
  fc:	cf ee       	ldi	r28, 0xEF	; 239
  fe:	d0 e0       	ldi	r29, 0x00	; 0
 100:	6e ee       	ldi	r22, 0xEE	; 238
 102:	70 e0       	ldi	r23, 0x00	; 0
 104:	ea ef       	ldi	r30, 0xFA	; 250
 106:	f0 e0       	ldi	r31, 0x00	; 0
 108:	82 2f       	mov	r24, r18
 10a:	82 95       	swap	r24
 10c:	80 7f       	andi	r24, 0xF0	; 240
 10e:	da 01       	movw	r26, r20
 110:	8c 93       	st	X, r24
 112:	18 82       	st	Y, r1
 114:	db 01       	movw	r26, r22
 116:	1c 92       	st	X, r1
 118:	88 e0       	ldi	r24, 0x08	; 8
 11a:	90 e0       	ldi	r25, 0x00	; 0
 11c:	10 82       	st	Z, r1
 11e:	01 97       	sbiw	r24, 0x01	; 1
 120:	e9 f7       	brne	.-6      	; 0x11c <can_init+0x3c>
 122:	2f 5f       	subi	r18, 0xFF	; 255
 124:	2f 30       	cpi	r18, 0x0F	; 15
 126:	81 f7       	brne	.-32     	; 0x108 <can_init+0x28>
 128:	88 e0       	ldi	r24, 0x08	; 8
 12a:	80 93 ed 00 	sts	0x00ED, r24	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7e00ed>
 12e:	86 e0       	ldi	r24, 0x06	; 6
 130:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
 134:	8c e0       	ldi	r24, 0x0C	; 12
 136:	80 93 e3 00 	sts	0x00E3, r24	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7e00e3>
 13a:	87 e3       	ldi	r24, 0x37	; 55
 13c:	80 93 e4 00 	sts	0x00E4, r24	; 0x8000e4 <__TEXT_REGION_LENGTH__+0x7e00e4>
 140:	10 92 e5 00 	sts	0x00E5, r1	; 0x8000e5 <__TEXT_REGION_LENGTH__+0x7e00e5>
 144:	82 e0       	ldi	r24, 0x02	; 2
 146:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
 14a:	78 94       	sei
 14c:	df 91       	pop	r29
 14e:	cf 91       	pop	r28
 150:	08 95       	ret

00000152 <can_get_message>:
 152:	ff 92       	push	r15
 154:	0f 93       	push	r16
 156:	1f 93       	push	r17
 158:	cf 93       	push	r28
 15a:	df 93       	push	r29
 15c:	f8 2e       	mov	r15, r24
 15e:	eb 01       	movw	r28, r22
 160:	8a 01       	movw	r16, r20
 162:	b6 df       	rcall	.-148    	; 0xd0 <set_page>
 164:	20 e1       	ldi	r18, 0x10	; 16
 166:	f2 9e       	mul	r15, r18
 168:	c0 01       	movw	r24, r0
 16a:	11 24       	eor	r1, r1
 16c:	88 60       	ori	r24, 0x08	; 8
 16e:	90 e0       	ldi	r25, 0x00	; 0
 170:	ad ee       	ldi	r26, 0xED	; 237
 172:	b0 e0       	ldi	r27, 0x00	; 0
 174:	ea ef       	ldi	r30, 0xFA	; 250
 176:	f0 e0       	ldi	r31, 0x00	; 0
 178:	29 2f       	mov	r18, r25
 17a:	28 2b       	or	r18, r24
 17c:	2c 93       	st	X, r18
 17e:	20 81       	ld	r18, Z
 180:	29 93       	st	Y+, r18
 182:	9f 5f       	subi	r25, 0xFF	; 255
 184:	98 30       	cpi	r25, 0x08	; 8
 186:	c1 f7       	brne	.-16     	; 0x178 <can_get_message+0x26>
 188:	90 91 ef 00 	lds	r25, 0x00EF	; 0x8000ef <__TEXT_REGION_LENGTH__+0x7e00ef>
 18c:	9f 70       	andi	r25, 0x0F	; 15
 18e:	f8 01       	movw	r30, r16
 190:	90 83       	st	Z, r25
 192:	80 93 ed 00 	sts	0x00ED, r24	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7e00ed>
 196:	df 91       	pop	r29
 198:	cf 91       	pop	r28
 19a:	1f 91       	pop	r17
 19c:	0f 91       	pop	r16
 19e:	ff 90       	pop	r15
 1a0:	08 95       	ret

000001a2 <can_init_id>:

void can_init_id ( can_id_t id){
 1a2:	fc 01       	movw	r30, r24
	CANIDT2 = id[0] << 5;
 1a4:	80 81       	ld	r24, Z
 1a6:	82 95       	swap	r24
 1a8:	88 0f       	add	r24, r24
 1aa:	80 7e       	andi	r24, 0xE0	; 224
 1ac:	80 93 f2 00 	sts	0x00F2, r24	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7e00f2>
	CANIDT1 = id[0] >> 3 | id[1] << 5;
 1b0:	20 81       	ld	r18, Z
 1b2:	26 95       	lsr	r18
 1b4:	26 95       	lsr	r18
 1b6:	26 95       	lsr	r18
 1b8:	91 81       	ldd	r25, Z+1	; 0x01
 1ba:	30 e2       	ldi	r19, 0x20	; 32
 1bc:	93 9f       	mul	r25, r19
 1be:	c0 01       	movw	r24, r0
 1c0:	11 24       	eor	r1, r1
 1c2:	82 2b       	or	r24, r18
 1c4:	80 93 f3 00 	sts	0x00F3, r24	; 0x8000f3 <__TEXT_REGION_LENGTH__+0x7e00f3>
	//not a remote frame.
	CANIDT4 = 0 << RTRTAG;
 1c8:	10 92 f0 00 	sts	0x00F0, r1	; 0x8000f0 <__TEXT_REGION_LENGTH__+0x7e00f0>
 1cc:	08 95       	ret

000001ce <can_init_mask>:
	CANIDM2 = 255;
	CANIDM4 = (0 << RTRMSK) | (0 << IDEMSK);
}
*/

void can_init_mask (can_mask_t mask){
 1ce:	fc 01       	movw	r30, r24
	CANIDM2 = mask[0] << 5;
 1d0:	80 81       	ld	r24, Z
 1d2:	82 95       	swap	r24
 1d4:	88 0f       	add	r24, r24
 1d6:	80 7e       	andi	r24, 0xE0	; 224
 1d8:	80 93 f6 00 	sts	0x00F6, r24	; 0x8000f6 <__TEXT_REGION_LENGTH__+0x7e00f6>
	CANIDM1 = mask[0] >> 3 | mask[1] << 5;
 1dc:	20 81       	ld	r18, Z
 1de:	26 95       	lsr	r18
 1e0:	26 95       	lsr	r18
 1e2:	26 95       	lsr	r18
 1e4:	91 81       	ldd	r25, Z+1	; 0x01
 1e6:	30 e2       	ldi	r19, 0x20	; 32
 1e8:	93 9f       	mul	r25, r19
 1ea:	c0 01       	movw	r24, r0
 1ec:	11 24       	eor	r1, r1
 1ee:	82 2b       	or	r24, r18
 1f0:	80 93 f7 00 	sts	0x00F7, r24	; 0x8000f7 <__TEXT_REGION_LENGTH__+0x7e00f7>
	//RTRMSK = 0 : We don't use remote frames ever.
	//IDEMSK = 0 : we don't use the extended format.
	CANIDM4 = (0 << RTRMSK) | (0 << IDEMSK);
 1f4:	10 92 f4 00 	sts	0x00F4, r1	; 0x8000f4 <__TEXT_REGION_LENGTH__+0x7e00f4>
 1f8:	08 95       	ret

000001fa <can_init_message>:
}

void can_init_message( uint8_t *message , uint8_t mobnr, uint8_t size){
 1fa:	0f 93       	push	r16
 1fc:	1f 93       	push	r17
 1fe:	cf 93       	push	r28
 200:	df 93       	push	r29
 202:	ec 01       	movw	r28, r24
 204:	06 2f       	mov	r16, r22
 206:	14 2f       	mov	r17, r20
 208:	49 30       	cpi	r20, 0x09	; 9
 20a:	08 f0       	brcs	.+2      	; 0x20e <can_init_message+0x14>
 20c:	18 e0       	ldi	r17, 0x08	; 8
	if(size > 8) size = 8;
	set_page(mobnr);
 20e:	80 2f       	mov	r24, r16
 210:	5f df       	rcall	.-322    	; 0xd0 <set_page>
	uint8_t j;
	for(j=0; j<size; j++){
 212:	11 23       	and	r17, r17
 214:	99 f0       	breq	.+38     	; 0x23c <can_init_message+0x42>
 216:	20 e1       	ldi	r18, 0x10	; 16
 218:	02 9f       	mul	r16, r18
 21a:	c0 01       	movw	r24, r0
 21c:	11 24       	eor	r1, r1
 21e:	28 2f       	mov	r18, r24
 220:	28 60       	ori	r18, 0x08	; 8
static void set_page(uint8_t mobnr){
	CANPAGE = (mobnr << 4) | PAGE_MASK;
}

static void set_page_indx(uint8_t indx, uint8_t mobnr){
	CANPAGE = (mobnr << 4) | PAGE_MASK | indx;
 222:	80 e0       	ldi	r24, 0x00	; 0
 224:	ad ee       	ldi	r26, 0xED	; 237
 226:	b0 e0       	ldi	r27, 0x00	; 0
	if(size > 8) size = 8;
	set_page(mobnr);
	uint8_t j;
	for(j=0; j<size; j++){
		set_page_indx(j, mobnr);
		CANMSG = *message;
 228:	ea ef       	ldi	r30, 0xFA	; 250
 22a:	f0 e0       	ldi	r31, 0x00	; 0
static void set_page(uint8_t mobnr){
	CANPAGE = (mobnr << 4) | PAGE_MASK;
}

static void set_page_indx(uint8_t indx, uint8_t mobnr){
	CANPAGE = (mobnr << 4) | PAGE_MASK | indx;
 22c:	92 2f       	mov	r25, r18
 22e:	98 2b       	or	r25, r24
 230:	9c 93       	st	X, r25
	if(size > 8) size = 8;
	set_page(mobnr);
	uint8_t j;
	for(j=0; j<size; j++){
		set_page_indx(j, mobnr);
		CANMSG = *message;
 232:	99 91       	ld	r25, Y+
 234:	90 83       	st	Z, r25

void can_init_message( uint8_t *message , uint8_t mobnr, uint8_t size){
	if(size > 8) size = 8;
	set_page(mobnr);
	uint8_t j;
	for(j=0; j<size; j++){
 236:	8f 5f       	subi	r24, 0xFF	; 255
 238:	81 13       	cpse	r24, r17
 23a:	f8 cf       	rjmp	.-16     	; 0x22c <can_init_message+0x32>
static void set_page(uint8_t mobnr){
	CANPAGE = (mobnr << 4) | PAGE_MASK;
}

static void set_page_indx(uint8_t indx, uint8_t mobnr){
	CANPAGE = (mobnr << 4) | PAGE_MASK | indx;
 23c:	80 e1       	ldi	r24, 0x10	; 16
 23e:	08 9f       	mul	r16, r24
 240:	b0 01       	movw	r22, r0
 242:	11 24       	eor	r1, r1
 244:	68 60       	ori	r22, 0x08	; 8
 246:	60 93 ed 00 	sts	0x00ED, r22	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7e00ed>
		set_page_indx(j, mobnr);
		CANMSG = *message;
		message++;
	}
	set_page_indx(0, mobnr);
	CANCDMOB |= size; 
 24a:	ef ee       	ldi	r30, 0xEF	; 239
 24c:	f0 e0       	ldi	r31, 0x00	; 0
 24e:	80 81       	ld	r24, Z
 250:	18 2b       	or	r17, r24
 252:	10 83       	st	Z, r17
}
 254:	df 91       	pop	r29
 256:	cf 91       	pop	r28
 258:	1f 91       	pop	r17
 25a:	0f 91       	pop	r16
 25c:	08 95       	ret

0000025e <can_send_message>:

int can_send_message( uint8_t mobnr , can_id_t id, can_msg_t message, uint8_t size){
 25e:	ef 92       	push	r14
 260:	ff 92       	push	r15
 262:	0f 93       	push	r16
 264:	1f 93       	push	r17
 266:	cf 93       	push	r28
 268:	df 93       	push	r29
 26a:	c8 2f       	mov	r28, r24
 26c:	7b 01       	movw	r14, r22
 26e:	8a 01       	movw	r16, r20
 270:	d2 2f       	mov	r29, r18
	//select mob.
	set_page(mobnr);
 272:	2e df       	rcall	.-420    	; 0xd0 <set_page>
	//copy ID.
	can_init_id(id);
 274:	c7 01       	movw	r24, r14
 276:	95 df       	rcall	.-214    	; 0x1a2 <can_init_id>
	//copy message.
	can_init_message(message, mobnr, size);
 278:	4d 2f       	mov	r20, r29
 27a:	6c 2f       	mov	r22, r28
 27c:	c8 01       	movw	r24, r16
 27e:	bd df       	rcall	.-134    	; 0x1fa <can_init_message>
	//enable transmission.
	CANCDMOB |= (1 << CONMOB0);
 280:	ef ee       	ldi	r30, 0xEF	; 239
 282:	f0 e0       	ldi	r31, 0x00	; 0
 284:	80 81       	ld	r24, Z
 286:	80 64       	ori	r24, 0x40	; 64
 288:	80 83       	st	Z, r24
	//wait for transmission.
	while(CANSTMOB != (1 << TXOK));
 28a:	ee ee       	ldi	r30, 0xEE	; 238
 28c:	f0 e0       	ldi	r31, 0x00	; 0
 28e:	80 81       	ld	r24, Z
 290:	80 34       	cpi	r24, 0x40	; 64
 292:	e9 f7       	brne	.-6      	; 0x28e <can_send_message+0x30>
	//reset mob.
	CANSTMOB = 0x00;
 294:	10 92 ee 00 	sts	0x00EE, r1	; 0x8000ee <__TEXT_REGION_LENGTH__+0x7e00ee>
	CANCDMOB = 0x00;
 298:	10 92 ef 00 	sts	0x00EF, r1	; 0x8000ef <__TEXT_REGION_LENGTH__+0x7e00ef>
	return 0;
}
 29c:	80 e0       	ldi	r24, 0x00	; 0
 29e:	90 e0       	ldi	r25, 0x00	; 0
 2a0:	df 91       	pop	r29
 2a2:	cf 91       	pop	r28
 2a4:	1f 91       	pop	r17
 2a6:	0f 91       	pop	r16
 2a8:	ff 90       	pop	r15
 2aa:	ef 90       	pop	r14
 2ac:	08 95       	ret

000002ae <can_receive_message>:

int can_receive_message( uint8_t mobnr, can_id_t id, can_mask_t mask, can_msg_t message , uint8_t *len){
 2ae:	bf 92       	push	r11
 2b0:	cf 92       	push	r12
 2b2:	df 92       	push	r13
 2b4:	ef 92       	push	r14
 2b6:	ff 92       	push	r15
 2b8:	0f 93       	push	r16
 2ba:	1f 93       	push	r17
 2bc:	cf 93       	push	r28
 2be:	df 93       	push	r29
 2c0:	b8 2e       	mov	r11, r24
 2c2:	6b 01       	movw	r12, r22
 2c4:	ea 01       	movw	r28, r20
 2c6:	79 01       	movw	r14, r18
	set_page(mobnr);
 2c8:	03 df       	rcall	.-506    	; 0xd0 <set_page>
	CANIE2 = (1 << mobnr);
 2ca:	81 e0       	ldi	r24, 0x01	; 1
 2cc:	90 e0       	ldi	r25, 0x00	; 0
 2ce:	0b 2c       	mov	r0, r11
 2d0:	02 c0       	rjmp	.+4      	; 0x2d6 <can_receive_message+0x28>
 2d2:	88 0f       	add	r24, r24
 2d4:	99 1f       	adc	r25, r25
 2d6:	0a 94       	dec	r0
 2d8:	e2 f7       	brpl	.-8      	; 0x2d2 <can_receive_message+0x24>
 2da:	80 93 de 00 	sts	0x00DE, r24	; 0x8000de <__TEXT_REGION_LENGTH__+0x7e00de>
	can_init_id(id);
 2de:	c6 01       	movw	r24, r12
 2e0:	60 df       	rcall	.-320    	; 0x1a2 <can_init_id>
	can_init_mask(mask);
 2e2:	ce 01       	movw	r24, r28
 2e4:	74 df       	rcall	.-280    	; 0x1ce <can_init_mask>
 2e6:	88 e8       	ldi	r24, 0x88	; 136
	//CAN standard rev 2.0 A (identifiers length = 11 bits)
	CANCDMOB = (1 << CONMOB1) | (1 << DLC3); //enable reception and data length code = 8 bytes
 2e8:	80 93 ef 00 	sts	0x00EF, r24	; 0x8000ef <__TEXT_REGION_LENGTH__+0x7e00ef>
 2ec:	ea ed       	ldi	r30, 0xDA	; 218
	//wait for interrupt
	while((CANGIT & INTR_MASK) != (1 << CANIT));
 2ee:	f0 e0       	ldi	r31, 0x00	; 0
 2f0:	80 81       	ld	r24, Z
 2f2:	88 23       	and	r24, r24
 2f4:	ec f7       	brge	.-6      	; 0x2f0 <can_receive_message+0x42>
 2f6:	80 91 ee 00 	lds	r24, 0x00EE	; 0x8000ee <__TEXT_REGION_LENGTH__+0x7e00ee>
	//check if it is the right interrupt.
	if((CANSTMOB & RXOK_MASK) != (1 << RXOK)) return 1;
 2fa:	85 ff       	sbrs	r24, 5
 2fc:	11 c0       	rjmp	.+34     	; 0x320 <can_receive_message+0x72>
 2fe:	a8 01       	movw	r20, r16
	
	can_get_message(mobnr, message, len);
 300:	b7 01       	movw	r22, r14
 302:	8b 2d       	mov	r24, r11
 304:	26 df       	rcall	.-436    	; 0x152 <can_get_message>
 306:	10 92 ee 00 	sts	0x00EE, r1	; 0x8000ee <__TEXT_REGION_LENGTH__+0x7e00ee>
	
	//reset mob.
	CANSTMOB = 0x00;
 30a:	10 92 ef 00 	sts	0x00EF, r1	; 0x8000ef <__TEXT_REGION_LENGTH__+0x7e00ef>
	CANCDMOB = 0x00;
 30e:	10 92 de 00 	sts	0x00DE, r1	; 0x8000de <__TEXT_REGION_LENGTH__+0x7e00de>
	//reset interrupt enable
	CANIE2 = 0x00;
 312:	ea ed       	ldi	r30, 0xDA	; 218
	//reset interrupt register.
	CANGIT = CANGIT;
 314:	f0 e0       	ldi	r31, 0x00	; 0
 316:	80 81       	ld	r24, Z
 318:	80 83       	st	Z, r24
 31a:	80 e0       	ldi	r24, 0x00	; 0
	//retrieve message.
	return 0;
 31c:	90 e0       	ldi	r25, 0x00	; 0
 31e:	02 c0       	rjmp	.+4      	; 0x324 <can_receive_message+0x76>
 320:	81 e0       	ldi	r24, 0x01	; 1
	//CAN standard rev 2.0 A (identifiers length = 11 bits)
	CANCDMOB = (1 << CONMOB1) | (1 << DLC3); //enable reception and data length code = 8 bytes
	//wait for interrupt
	while((CANGIT & INTR_MASK) != (1 << CANIT));
	//check if it is the right interrupt.
	if((CANSTMOB & RXOK_MASK) != (1 << RXOK)) return 1;
 322:	90 e0       	ldi	r25, 0x00	; 0
 324:	df 91       	pop	r29
	CANIE2 = 0x00;
	//reset interrupt register.
	CANGIT = CANGIT;
	//retrieve message.
	return 0;
}
 326:	cf 91       	pop	r28
 328:	1f 91       	pop	r17
 32a:	0f 91       	pop	r16
 32c:	ff 90       	pop	r15
 32e:	ef 90       	pop	r14
 330:	df 90       	pop	r13
 332:	cf 90       	pop	r12
 334:	bf 90       	pop	r11
 336:	08 95       	ret

00000338 <__vector_16>:
#include <avr/interrupt.h>

volatile uint32_t ms = 0;

ISR(TIMER0_COMP_vect)
{
 338:	1f 92       	push	r1
 33a:	0f 92       	push	r0
 33c:	0f b6       	in	r0, 0x3f	; 63
 33e:	0f 92       	push	r0
 340:	11 24       	eor	r1, r1
 342:	8f 93       	push	r24
 344:	9f 93       	push	r25
 346:	af 93       	push	r26
 348:	bf 93       	push	r27
	ms = ms+1;
 34a:	80 91 fc 02 	lds	r24, 0x02FC	; 0x8002fc <__data_end>
 34e:	90 91 fd 02 	lds	r25, 0x02FD	; 0x8002fd <__data_end+0x1>
 352:	a0 91 fe 02 	lds	r26, 0x02FE	; 0x8002fe <__data_end+0x2>
 356:	b0 91 ff 02 	lds	r27, 0x02FF	; 0x8002ff <__data_end+0x3>
 35a:	01 96       	adiw	r24, 0x01	; 1
 35c:	a1 1d       	adc	r26, r1
 35e:	b1 1d       	adc	r27, r1
 360:	80 93 fc 02 	sts	0x02FC, r24	; 0x8002fc <__data_end>
 364:	90 93 fd 02 	sts	0x02FD, r25	; 0x8002fd <__data_end+0x1>
 368:	a0 93 fe 02 	sts	0x02FE, r26	; 0x8002fe <__data_end+0x2>
 36c:	b0 93 ff 02 	sts	0x02FF, r27	; 0x8002ff <__data_end+0x3>
}
 370:	bf 91       	pop	r27
 372:	af 91       	pop	r26
 374:	9f 91       	pop	r25
 376:	8f 91       	pop	r24
 378:	0f 90       	pop	r0
 37a:	0f be       	out	0x3f, r0	; 63
 37c:	0f 90       	pop	r0
 37e:	1f 90       	pop	r1
 380:	18 95       	reti

00000382 <millis>:

unsigned long int millis(void)
{
	return ms;
 382:	60 91 fc 02 	lds	r22, 0x02FC	; 0x8002fc <__data_end>
 386:	70 91 fd 02 	lds	r23, 0x02FD	; 0x8002fd <__data_end+0x1>
 38a:	80 91 fe 02 	lds	r24, 0x02FE	; 0x8002fe <__data_end+0x2>
 38e:	90 91 ff 02 	lds	r25, 0x02FF	; 0x8002ff <__data_end+0x3>
}
 392:	08 95       	ret

00000394 <clock_Init>:

void clock_Init(void)
{
	OCR0A = 61;
 394:	8d e3       	ldi	r24, 0x3D	; 61
 396:	87 bd       	out	0x27, r24	; 39
	TIMSK0 = 1 << OCIE0A;
 398:	82 e0       	ldi	r24, 0x02	; 2
 39a:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__TEXT_REGION_LENGTH__+0x7e006e>
	TCCR0A = 1 << WGM00 | 1 << WGM01 | 1 << CS01 | 1 << CS00;
 39e:	8b e4       	ldi	r24, 0x4B	; 75
 3a0:	84 bd       	out	0x24, r24	; 36
 3a2:	08 95       	ret

000003a4 <hex_to_bytes>:
		*dest++ = table[c >> 4];
		*dest++ = table[c & 0x0f];
	}
}

void hex_to_bytes(char *src, uint8_t strlen, uint8_t dest[strlen/2]) {
 3a4:	ff 92       	push	r15
 3a6:	0f 93       	push	r16
 3a8:	1f 93       	push	r17
 3aa:	cf 93       	push	r28
 3ac:	df 93       	push	r29
 3ae:	f8 2e       	mov	r15, r24
 3b0:	09 2f       	mov	r16, r25
 3b2:	16 2f       	mov	r17, r22
 3b4:	ea 01       	movw	r28, r20
	memset(dest, 0, strlen/2);
 3b6:	46 2f       	mov	r20, r22
 3b8:	46 95       	lsr	r20
 3ba:	50 e0       	ldi	r21, 0x00	; 0
 3bc:	60 e0       	ldi	r22, 0x00	; 0
 3be:	70 e0       	ldi	r23, 0x00	; 0
 3c0:	ce 01       	movw	r24, r28
 3c2:	92 d5       	rcall	.+2852   	; 0xee8 <memset>
	uint8_t index = 0;
	while (index < strlen) {
 3c4:	11 23       	and	r17, r17
 3c6:	09 f4       	brne	.+2      	; 0x3ca <hex_to_bytes+0x26>
 3c8:	3f c0       	rjmp	.+126    	; 0x448 <__LOCK_REGION_LENGTH__+0x48>
 3ca:	ef 2d       	mov	r30, r15
 3cc:	f0 2f       	mov	r31, r16
 3ce:	20 e0       	ldi	r18, 0x00	; 0
 3d0:	30 e0       	ldi	r19, 0x00	; 0
		char c = src[index];
		int value = 0;
 3d2:	70 e0       	ldi	r23, 0x00	; 0
 3d4:	60 e0       	ldi	r22, 0x00	; 0
 3d6:	42 2f       	mov	r20, r18

void hex_to_bytes(char *src, uint8_t strlen, uint8_t dest[strlen/2]) {
	memset(dest, 0, strlen/2);
	uint8_t index = 0;
	while (index < strlen) {
		char c = src[index];
 3d8:	81 91       	ld	r24, Z+
 3da:	2f 5f       	subi	r18, 0xFF	; 255
 3dc:	3f 4f       	sbci	r19, 0xFF	; 255
		int value = 0;
		if(c >= '0' && c <= '9')
 3de:	90 ed       	ldi	r25, 0xD0	; 208
 3e0:	98 0f       	add	r25, r24
 3e2:	9a 30       	cpi	r25, 0x0A	; 10
 3e4:	18 f4       	brcc	.+6      	; 0x3ec <hex_to_bytes+0x48>
		value = (c - '0');
 3e6:	90 e0       	ldi	r25, 0x00	; 0
 3e8:	c0 97       	sbiw	r24, 0x30	; 48
 3ea:	11 c0       	rjmp	.+34     	; 0x40e <__LOCK_REGION_LENGTH__+0xe>
		else if (c >= 'A' && c <= 'F')
 3ec:	9f eb       	ldi	r25, 0xBF	; 191
 3ee:	98 0f       	add	r25, r24
 3f0:	96 30       	cpi	r25, 0x06	; 6
 3f2:	18 f4       	brcc	.+6      	; 0x3fa <hex_to_bytes+0x56>
		value = (10 + (c - 'A'));
 3f4:	90 e0       	ldi	r25, 0x00	; 0
 3f6:	c7 97       	sbiw	r24, 0x37	; 55
 3f8:	0a c0       	rjmp	.+20     	; 0x40e <__LOCK_REGION_LENGTH__+0xe>
		else if (c >= 'a' && c <= 'f')
 3fa:	9f e9       	ldi	r25, 0x9F	; 159
 3fc:	98 0f       	add	r25, r24
 3fe:	96 30       	cpi	r25, 0x06	; 6
 400:	20 f4       	brcc	.+8      	; 0x40a <__LOCK_REGION_LENGTH__+0xa>
		value = (10 + (c - 'a'));
 402:	90 e0       	ldi	r25, 0x00	; 0
 404:	87 55       	subi	r24, 0x57	; 87
 406:	91 09       	sbc	r25, r1
 408:	02 c0       	rjmp	.+4      	; 0x40e <__LOCK_REGION_LENGTH__+0xe>
void hex_to_bytes(char *src, uint8_t strlen, uint8_t dest[strlen/2]) {
	memset(dest, 0, strlen/2);
	uint8_t index = 0;
	while (index < strlen) {
		char c = src[index];
		int value = 0;
 40a:	87 2f       	mov	r24, r23
 40c:	96 2f       	mov	r25, r22
		else if (c >= 'A' && c <= 'F')
		value = (10 + (c - 'A'));
		else if (c >= 'a' && c <= 'f')
		value = (10 + (c - 'a'));

		dest[(index/2)] += value << (((index + 1) % 2) * 4);
 40e:	46 95       	lsr	r20
 410:	de 01       	movw	r26, r28
 412:	a4 0f       	add	r26, r20
 414:	b1 1d       	adc	r27, r1
 416:	a9 01       	movw	r20, r18
 418:	41 70       	andi	r20, 0x01	; 1
 41a:	50 78       	andi	r21, 0x80	; 128
 41c:	55 23       	and	r21, r21
 41e:	34 f4       	brge	.+12     	; 0x42c <__LOCK_REGION_LENGTH__+0x2c>
 420:	41 50       	subi	r20, 0x01	; 1
 422:	51 09       	sbc	r21, r1
 424:	4e 6f       	ori	r20, 0xFE	; 254
 426:	5f 6f       	ori	r21, 0xFF	; 255
 428:	4f 5f       	subi	r20, 0xFF	; 255
 42a:	5f 4f       	sbci	r21, 0xFF	; 255
 42c:	44 0f       	add	r20, r20
 42e:	55 1f       	adc	r21, r21
 430:	44 0f       	add	r20, r20
 432:	55 1f       	adc	r21, r21
 434:	02 c0       	rjmp	.+4      	; 0x43a <__LOCK_REGION_LENGTH__+0x3a>
 436:	88 0f       	add	r24, r24
 438:	99 1f       	adc	r25, r25
 43a:	4a 95       	dec	r20
 43c:	e2 f7       	brpl	.-8      	; 0x436 <__LOCK_REGION_LENGTH__+0x36>
 43e:	9c 91       	ld	r25, X
 440:	89 0f       	add	r24, r25
 442:	8c 93       	st	X, r24
}

void hex_to_bytes(char *src, uint8_t strlen, uint8_t dest[strlen/2]) {
	memset(dest, 0, strlen/2);
	uint8_t index = 0;
	while (index < strlen) {
 444:	21 17       	cp	r18, r17
 446:	38 f2       	brcs	.-114    	; 0x3d6 <hex_to_bytes+0x32>

		dest[(index/2)] += value << (((index + 1) % 2) * 4);

		index++;
	}
}
 448:	df 91       	pop	r29
 44a:	cf 91       	pop	r28
 44c:	1f 91       	pop	r17
 44e:	0f 91       	pop	r16
 450:	ff 90       	pop	r15
 452:	08 95       	ret

00000454 <isotp_send_flow_control>:
}

int isotp_send(IsoTpLink *link, const uint8_t payload[], uint16_t size)
{
    return isotp_send_with_id(link, link->send_arbitration_id, payload, size);
}
 454:	cf 93       	push	r28
 456:	df 93       	push	r29
 458:	cd b7       	in	r28, 0x3d	; 61
 45a:	de b7       	in	r29, 0x3e	; 62
 45c:	28 97       	sbiw	r28, 0x08	; 8
 45e:	0f b6       	in	r0, 0x3f	; 63
 460:	f8 94       	cli
 462:	de bf       	out	0x3e, r29	; 62
 464:	0f be       	out	0x3f, r0	; 63
 466:	cd bf       	out	0x3d, r28	; 61
 468:	62 95       	swap	r22
 46a:	60 7f       	andi	r22, 0xF0	; 240
 46c:	63 60       	ori	r22, 0x03	; 3
 46e:	69 83       	std	Y+1, r22	; 0x01
 470:	4a 83       	std	Y+2, r20	; 0x02
 472:	22 23       	and	r18, r18
 474:	0c f4       	brge	.+2      	; 0x478 <isotp_send_flow_control+0x24>
 476:	2f e7       	ldi	r18, 0x7F	; 127
 478:	2b 83       	std	Y+3, r18	; 0x03
 47a:	fe 01       	movw	r30, r28
 47c:	34 96       	adiw	r30, 0x04	; 4
 47e:	25 e0       	ldi	r18, 0x05	; 5
 480:	df 01       	movw	r26, r30
 482:	1d 92       	st	X+, r1
 484:	2a 95       	dec	r18
 486:	e9 f7       	brne	.-6      	; 0x482 <isotp_send_flow_control+0x2e>
 488:	fc 01       	movw	r30, r24
 48a:	60 81       	ld	r22, Z
 48c:	71 81       	ldd	r23, Z+1	; 0x01
 48e:	82 81       	ldd	r24, Z+2	; 0x02
 490:	93 81       	ldd	r25, Z+3	; 0x03
 492:	28 e0       	ldi	r18, 0x08	; 8
 494:	ae 01       	movw	r20, r28
 496:	4f 5f       	subi	r20, 0xFF	; 255
 498:	5f 4f       	sbci	r21, 0xFF	; 255
 49a:	da d1       	rcall	.+948    	; 0x850 <isotp_user_send_can>
 49c:	28 96       	adiw	r28, 0x08	; 8
 49e:	0f b6       	in	r0, 0x3f	; 63
 4a0:	f8 94       	cli
 4a2:	de bf       	out	0x3e, r29	; 62
 4a4:	0f be       	out	0x3f, r0	; 63
 4a6:	cd bf       	out	0x3d, r28	; 61
 4a8:	df 91       	pop	r29
 4aa:	cf 91       	pop	r28
 4ac:	08 95       	ret

000004ae <isotp_on_can_message>:

    return ISOTP_RET_OK;
}

void isotp_on_can_message(IsoTpLink *link, uint8_t *data, uint8_t len)
{
 4ae:	cf 92       	push	r12
 4b0:	df 92       	push	r13
 4b2:	ef 92       	push	r14
 4b4:	ff 92       	push	r15
 4b6:	0f 93       	push	r16
 4b8:	1f 93       	push	r17
 4ba:	cf 93       	push	r28
 4bc:	df 93       	push	r29
 4be:	cd b7       	in	r28, 0x3d	; 61
 4c0:	de b7       	in	r29, 0x3e	; 62
 4c2:	2a 97       	sbiw	r28, 0x0a	; 10
 4c4:	0f b6       	in	r0, 0x3f	; 63
 4c6:	f8 94       	cli
 4c8:	de bf       	out	0x3e, r29	; 62
 4ca:	0f be       	out	0x3f, r0	; 63
 4cc:	cd bf       	out	0x3d, r28	; 61
 4ce:	7c 01       	movw	r14, r24
    IsoTpCanMessage message;
    int ret;
    
    if (len < 2 || len > 8){
 4d0:	9e ef       	ldi	r25, 0xFE	; 254
 4d2:	94 0f       	add	r25, r20
 4d4:	97 30       	cpi	r25, 0x07	; 7
 4d6:	08 f0       	brcs	.+2      	; 0x4da <isotp_on_can_message+0x2c>
 4d8:	62 c1       	rjmp	.+708    	; 0x79e <isotp_on_can_message+0x2f0>
 4da:	14 2f       	mov	r17, r20
        return;
    }

    (void)memcpy(message.as.data_array.ptr, data, len);
 4dc:	c4 2e       	mov	r12, r20
 4de:	d1 2c       	mov	r13, r1
 4e0:	a6 01       	movw	r20, r12
 4e2:	ce 01       	movw	r24, r28
 4e4:	01 96       	adiw	r24, 0x01	; 1
 4e6:	f7 d4       	rcall	.+2542   	; 0xed6 <memcpy>
    (void)memset(message.as.data_array.ptr + len, 0, sizeof(message.as.data_array.ptr) - len);
 4e8:	48 e0       	ldi	r20, 0x08	; 8
 4ea:	50 e0       	ldi	r21, 0x00	; 0
 4ec:	4c 19       	sub	r20, r12
 4ee:	5d 09       	sbc	r21, r13
 4f0:	60 e0       	ldi	r22, 0x00	; 0
 4f2:	70 e0       	ldi	r23, 0x00	; 0
 4f4:	81 e0       	ldi	r24, 0x01	; 1
 4f6:	90 e0       	ldi	r25, 0x00	; 0
 4f8:	8c 0f       	add	r24, r28
 4fa:	9d 1f       	adc	r25, r29
 4fc:	8c 0d       	add	r24, r12
 4fe:	9d 1d       	adc	r25, r13
 500:	f3 d4       	rcall	.+2534   	; 0xee8 <memset>

    switch(message.as.common.type) {
 502:	89 81       	ldd	r24, Y+1	; 0x01
 504:	8f 70       	andi	r24, 0x0F	; 15
 506:	81 30       	cpi	r24, 0x01	; 1
 508:	09 f4       	brne	.+2      	; 0x50c <isotp_on_can_message+0x5e>
 50a:	3f c0       	rjmp	.+126    	; 0x58a <isotp_on_can_message+0xdc>
 50c:	38 f0       	brcs	.+14     	; 0x51c <isotp_on_can_message+0x6e>
 50e:	82 30       	cpi	r24, 0x02	; 2
 510:	09 f4       	brne	.+2      	; 0x514 <isotp_on_can_message+0x66>
 512:	89 c0       	rjmp	.+274    	; 0x626 <isotp_on_can_message+0x178>
 514:	83 30       	cpi	r24, 0x03	; 3
 516:	09 f4       	brne	.+2      	; 0x51a <isotp_on_can_message+0x6c>
 518:	cc c0       	rjmp	.+408    	; 0x6b2 <isotp_on_can_message+0x204>
 51a:	41 c1       	rjmp	.+642    	; 0x79e <isotp_on_can_message+0x2f0>
        case ISOTP_PCI_TYPE_SINGLE: {
            /* update protocol resault */
            if (ISOTP_RECEIVE_STATUS_INPROGRESS == link->receive_status){
 51c:	f7 01       	movw	r30, r14
 51e:	80 a9       	ldd	r24, Z+48	; 0x30
 520:	81 30       	cpi	r24, 0x01	; 1
 522:	29 f4       	brne	.+10     	; 0x52e <isotp_on_can_message+0x80>
                link->receive_protocol_resault = ISOTP_PROTOCOL_RESAULT_UNEXP_PDU;
 524:	8a ef       	ldi	r24, 0xFA	; 250
 526:	9f ef       	ldi	r25, 0xFF	; 255
 528:	97 a7       	std	Z+47, r25	; 0x2f
 52a:	86 a7       	std	Z+46, r24	; 0x2e
 52c:	03 c0       	rjmp	.+6      	; 0x534 <isotp_on_can_message+0x86>
            } else {
                link->receive_protocol_resault = ISOTP_PROTOCOL_RESAULT_OK;
 52e:	f7 01       	movw	r30, r14
 530:	17 a6       	std	Z+47, r1	; 0x2f
 532:	16 a6       	std	Z+46, r1	; 0x2e
}

static int isotp_receive_single_frame(IsoTpLink *link, IsoTpCanMessage *message, uint8_t len)
{   
    /* check data length */
    if ((0 == message->as.single_frame.SF_DL) ||
 534:	89 81       	ldd	r24, Y+1	; 0x01
 536:	80 7f       	andi	r24, 0xF0	; 240
 538:	69 f0       	breq	.+26     	; 0x554 <isotp_on_can_message+0xa6>
        (message->as.single_frame.SF_DL > (len - 1))){
 53a:	49 81       	ldd	r20, Y+1	; 0x01
 53c:	84 2f       	mov	r24, r20
 53e:	82 95       	swap	r24
 540:	8f 70       	andi	r24, 0x0F	; 15
}

static int isotp_receive_single_frame(IsoTpLink *link, IsoTpCanMessage *message, uint8_t len)
{   
    /* check data length */
    if ((0 == message->as.single_frame.SF_DL) ||
 542:	28 2f       	mov	r18, r24
 544:	30 e0       	ldi	r19, 0x00	; 0
 546:	41 2f       	mov	r20, r17
 548:	50 e0       	ldi	r21, 0x00	; 0
 54a:	41 50       	subi	r20, 0x01	; 1
 54c:	51 09       	sbc	r21, r1
 54e:	42 17       	cp	r20, r18
 550:	53 07       	cpc	r21, r19
 552:	44 f4       	brge	.+16     	; 0x564 <isotp_on_can_message+0xb6>
        (message->as.single_frame.SF_DL > (len - 1))){
        isotp_user_debug("Single-frame length too small.");
 554:	85 e8       	ldi	r24, 0x85	; 133
 556:	91 e0       	ldi	r25, 0x01	; 1
 558:	9f 93       	push	r25
 55a:	8f 93       	push	r24
 55c:	77 d1       	rcall	.+750    	; 0x84c <isotp_user_debug>
 55e:	0f 90       	pop	r0
 560:	0f 90       	pop	r0
 562:	1d c1       	rjmp	.+570    	; 0x79e <isotp_on_can_message+0x2f0>
        return ISOTP_RET_LENGTH;
    }

    /* copying data */
    (void)memcpy(link->receive_buffer, 
 564:	48 2f       	mov	r20, r24
 566:	50 e0       	ldi	r21, 0x00	; 0
 568:	be 01       	movw	r22, r28
 56a:	6e 5f       	subi	r22, 0xFE	; 254
 56c:	7f 4f       	sbci	r23, 0xFF	; 255
 56e:	f7 01       	movw	r30, r14
 570:	80 a1       	ldd	r24, Z+32	; 0x20
 572:	91 a1       	ldd	r25, Z+33	; 0x21
 574:	b0 d4       	rcall	.+2400   	; 0xed6 <memcpy>
           message->as.single_frame.data, 
           message->as.single_frame.SF_DL);
    link->receive_size = message->as.single_frame.SF_DL;
 576:	89 81       	ldd	r24, Y+1	; 0x01
 578:	82 95       	swap	r24
 57a:	8f 70       	andi	r24, 0x0F	; 15
 57c:	90 e0       	ldi	r25, 0x00	; 0
 57e:	f7 01       	movw	r30, r14
 580:	95 a3       	std	Z+37, r25	; 0x25
 582:	84 a3       	std	Z+36, r24	; 0x24
            /* handle message */
            ret = isotp_receive_single_frame(link, &message, len);
            
            if (ISOTP_RET_OK == ret){
                /* change status */
                link->receive_status = ISOTP_RECEIVE_STATUS_FULL;
 584:	82 e0       	ldi	r24, 0x02	; 2
 586:	80 ab       	std	Z+48, r24	; 0x30
 588:	0a c1       	rjmp	.+532    	; 0x79e <isotp_on_can_message+0x2f0>
            }
            break;
        }
        case ISOTP_PCI_TYPE_FIRST_FRAME: {
            /* update protocol resault */
            if (ISOTP_RECEIVE_STATUS_INPROGRESS == link->receive_status){
 58a:	f7 01       	movw	r30, r14
 58c:	80 a9       	ldd	r24, Z+48	; 0x30
 58e:	81 30       	cpi	r24, 0x01	; 1
 590:	29 f4       	brne	.+10     	; 0x59c <isotp_on_can_message+0xee>
                link->receive_protocol_resault = ISOTP_PROTOCOL_RESAULT_UNEXP_PDU;
 592:	8a ef       	ldi	r24, 0xFA	; 250
 594:	9f ef       	ldi	r25, 0xFF	; 255
 596:	97 a7       	std	Z+47, r25	; 0x2f
 598:	86 a7       	std	Z+46, r24	; 0x2e
 59a:	03 c0       	rjmp	.+6      	; 0x5a2 <isotp_on_can_message+0xf4>
            } else {
                link->receive_protocol_resault = ISOTP_PROTOCOL_RESAULT_OK;
 59c:	f7 01       	movw	r30, r14
 59e:	17 a6       	std	Z+47, r1	; 0x2f
 5a0:	16 a6       	std	Z+46, r1	; 0x2e

static int isotp_receive_first_frame(IsoTpLink *link, IsoTpCanMessage *message, uint8_t len)
{
    volatile uint16_t payload_length;

    if (8 != len){
 5a2:	18 30       	cpi	r17, 0x08	; 8
 5a4:	41 f0       	breq	.+16     	; 0x5b6 <isotp_on_can_message+0x108>
        isotp_user_debug("First frame should be 8 byte lenght.");
 5a6:	84 ea       	ldi	r24, 0xA4	; 164
 5a8:	91 e0       	ldi	r25, 0x01	; 1
 5aa:	9f 93       	push	r25
 5ac:	8f 93       	push	r24
 5ae:	4e d1       	rcall	.+668    	; 0x84c <isotp_user_debug>
 5b0:	0f 90       	pop	r0
 5b2:	0f 90       	pop	r0
 5b4:	f4 c0       	rjmp	.+488    	; 0x79e <isotp_on_can_message+0x2f0>
        return ISOTP_RET_LENGTH;
    }

    /* check data length */
	payload_length = message->as.first_frame.FF_DL_high;
 5b6:	89 81       	ldd	r24, Y+1	; 0x01
 5b8:	82 95       	swap	r24
 5ba:	8f 70       	andi	r24, 0x0F	; 15
 5bc:	90 e0       	ldi	r25, 0x00	; 0
 5be:	9a 87       	std	Y+10, r25	; 0x0a
 5c0:	89 87       	std	Y+9, r24	; 0x09
    payload_length = (payload_length << 8) + message->as.first_frame.FF_DL_low;
 5c2:	89 85       	ldd	r24, Y+9	; 0x09
 5c4:	9a 85       	ldd	r25, Y+10	; 0x0a
 5c6:	98 2f       	mov	r25, r24
 5c8:	88 27       	eor	r24, r24
 5ca:	2a 81       	ldd	r18, Y+2	; 0x02
 5cc:	82 0f       	add	r24, r18
 5ce:	91 1d       	adc	r25, r1
 5d0:	9a 87       	std	Y+10, r25	; 0x0a
 5d2:	89 87       	std	Y+9, r24	; 0x09
        return ISOTP_RET_OVERFLOW;
    }
	*/
    
    /* copying data */
    (void)memcpy(link->receive_buffer, message->as.first_frame.data, sizeof(message->as.first_frame.data));
 5d4:	f7 01       	movw	r30, r14
 5d6:	a0 a1       	ldd	r26, Z+32	; 0x20
 5d8:	b1 a1       	ldd	r27, Z+33	; 0x21
 5da:	86 e0       	ldi	r24, 0x06	; 6
 5dc:	fe 01       	movw	r30, r28
 5de:	33 96       	adiw	r30, 0x03	; 3
 5e0:	01 90       	ld	r0, Z+
 5e2:	0d 92       	st	X+, r0
 5e4:	8a 95       	dec	r24
 5e6:	e1 f7       	brne	.-8      	; 0x5e0 <isotp_on_can_message+0x132>
    link->receive_size = payload_length;
 5e8:	89 85       	ldd	r24, Y+9	; 0x09
 5ea:	9a 85       	ldd	r25, Y+10	; 0x0a
 5ec:	f7 01       	movw	r30, r14
 5ee:	95 a3       	std	Z+37, r25	; 0x25
 5f0:	84 a3       	std	Z+36, r24	; 0x24
    link->receive_offset = sizeof(message->as.first_frame.data);
 5f2:	86 e0       	ldi	r24, 0x06	; 6
 5f4:	90 e0       	ldi	r25, 0x00	; 0
 5f6:	97 a3       	std	Z+39, r25	; 0x27
 5f8:	86 a3       	std	Z+38, r24	; 0x26
    link->receive_sn = 1;
 5fa:	81 e0       	ldi	r24, 0x01	; 1
 5fc:	80 a7       	std	Z+40, r24	; 0x28
            }

            /* if receive successful */
            if (ISOTP_RET_OK == ret){
                /* change status */
                link->receive_status = ISOTP_RECEIVE_STATUS_INPROGRESS;
 5fe:	80 ab       	std	Z+48, r24	; 0x30
                /* send fc frame */
                link->receive_bs_count = ISO_TP_DEFAULT_BLOCK_SIZE;					
                isotp_send_flow_control(link, PCI_FLOW_STATUS_CONTINUE, link->receive_bs_count, ISO_TP_DEFAULT_ST_MIN);
 600:	81 a7       	std	Z+41, r24	; 0x29
 602:	20 e0       	ldi	r18, 0x00	; 0
 604:	41 e0       	ldi	r20, 0x01	; 1
 606:	60 e0       	ldi	r22, 0x00	; 0
 608:	c7 01       	movw	r24, r14
                /* refresh timer cs */
                link->receive_timer_cr = isotp_user_get_ms() + ISO_TP_DEFAULT_RESPONSE_TIMEOUT;
 60a:	24 df       	rcall	.-440    	; 0x454 <isotp_send_flow_control>
 60c:	37 d1       	rcall	.+622    	; 0x87c <isotp_user_get_ms>
 60e:	dc 01       	movw	r26, r24
 610:	cb 01       	movw	r24, r22
 612:	8c 59       	subi	r24, 0x9C	; 156
 614:	9f 4f       	sbci	r25, 0xFF	; 255
 616:	af 4f       	sbci	r26, 0xFF	; 255
 618:	bf 4f       	sbci	r27, 0xFF	; 255
 61a:	f7 01       	movw	r30, r14
 61c:	82 a7       	std	Z+42, r24	; 0x2a
 61e:	93 a7       	std	Z+43, r25	; 0x2b
 620:	a4 a7       	std	Z+44, r26	; 0x2c
 622:	b5 a7       	std	Z+45, r27	; 0x2d
 624:	bc c0       	rjmp	.+376    	; 0x79e <isotp_on_can_message+0x2f0>
            
            break;
        }
        case TSOTP_PCI_TYPE_CONSECUTIVE_FRAME: {
            /* check if in receiving status */
            if (ISOTP_RECEIVE_STATUS_INPROGRESS != link->receive_status){
 626:	f7 01       	movw	r30, r14
 628:	80 a9       	ldd	r24, Z+48	; 0x30
 62a:	81 30       	cpi	r24, 0x01	; 1
 62c:	29 f0       	breq	.+10     	; 0x638 <isotp_on_can_message+0x18a>
                link->receive_protocol_resault = ISOTP_PROTOCOL_RESAULT_UNEXP_PDU;
 62e:	8a ef       	ldi	r24, 0xFA	; 250
 630:	9f ef       	ldi	r25, 0xFF	; 255
 632:	97 a7       	std	Z+47, r25	; 0x2f
 634:	86 a7       	std	Z+46, r24	; 0x2e
                break;
 636:	b3 c0       	rjmp	.+358    	; 0x79e <isotp_on_can_message+0x2f0>
static int isotp_receive_consecutive_frame(IsoTpLink *link, IsoTpCanMessage *message, uint8_t len)
{
    uint16_t remaining_bytes;
    
    /* check sn */
    if (link->receive_sn != message->as.consecutive_frame.SN){
 638:	89 81       	ldd	r24, Y+1	; 0x01
 63a:	82 95       	swap	r24
 63c:	8f 70       	andi	r24, 0x0F	; 15
 63e:	f7 01       	movw	r30, r14
 640:	90 a5       	ldd	r25, Z+40	; 0x28
 642:	98 13       	cpse	r25, r24
 644:	93 c0       	rjmp	.+294    	; 0x76c <isotp_on_can_message+0x2be>
        return ISOTP_RET_WRONG_SN;
    }

    /* check data length */
    remaining_bytes = link->receive_size - link->receive_offset;
 646:	86 a1       	ldd	r24, Z+38	; 0x26
 648:	97 a1       	ldd	r25, Z+39	; 0x27
 64a:	04 a1       	ldd	r16, Z+36	; 0x24
 64c:	15 a1       	ldd	r17, Z+37	; 0x25
 64e:	08 1b       	sub	r16, r24
 650:	19 0b       	sbc	r17, r25
 652:	08 30       	cpi	r16, 0x08	; 8
 654:	11 05       	cpc	r17, r1
 656:	10 f0       	brcs	.+4      	; 0x65c <isotp_on_can_message+0x1ae>
 658:	07 e0       	ldi	r16, 0x07	; 7
 65a:	10 e0       	ldi	r17, 0x00	; 0
		return ISOTP_RET_LENGTH;
    }
	*/
	
    /* copying data */
    (void)memcpy(link->receive_buffer + link->receive_offset, 
 65c:	f7 01       	movw	r30, r14
 65e:	20 a1       	ldd	r18, Z+32	; 0x20
 660:	31 a1       	ldd	r19, Z+33	; 0x21
 662:	a8 01       	movw	r20, r16
 664:	be 01       	movw	r22, r28
 666:	6e 5f       	subi	r22, 0xFE	; 254
 668:	7f 4f       	sbci	r23, 0xFF	; 255
 66a:	82 0f       	add	r24, r18
 66c:	93 1f       	adc	r25, r19
 66e:	33 d4       	rcall	.+2150   	; 0xed6 <memcpy>
           message->as.consecutive_frame.data,
           remaining_bytes);

    link->receive_offset += remaining_bytes;
 670:	f7 01       	movw	r30, r14
 672:	86 a1       	ldd	r24, Z+38	; 0x26
 674:	97 a1       	ldd	r25, Z+39	; 0x27
 676:	08 0f       	add	r16, r24
 678:	19 1f       	adc	r17, r25
 67a:	17 a3       	std	Z+39, r17	; 0x27
 67c:	06 a3       	std	Z+38, r16	; 0x26
    if (++(link->receive_sn) > 0x0F){
 67e:	80 a5       	ldd	r24, Z+40	; 0x28
 680:	8f 5f       	subi	r24, 0xFF	; 255
 682:	80 31       	cpi	r24, 0x10	; 16
 684:	08 f4       	brcc	.+2      	; 0x688 <isotp_on_can_message+0x1da>
 686:	5b c0       	rjmp	.+182    	; 0x73e <isotp_on_can_message+0x290>
        link->receive_sn = 0;
 688:	10 a6       	std	Z+40, r1	; 0x28
 68a:	5b c0       	rjmp	.+182    	; 0x742 <isotp_on_can_message+0x294>
                /* refresh timer cs */
                link->receive_timer_cr = isotp_user_get_ms() + ISO_TP_DEFAULT_RESPONSE_TIMEOUT;
                
                /* receive finished */
                if (link->receive_offset >= link->receive_size){
                    link->receive_status = ISOTP_RECEIVE_STATUS_FULL;
 68c:	82 e0       	ldi	r24, 0x02	; 2
 68e:	f7 01       	movw	r30, r14
 690:	80 ab       	std	Z+48, r24	; 0x30
 692:	85 c0       	rjmp	.+266    	; 0x79e <isotp_on_can_message+0x2f0>
                } else {
                    /* send fc when bs reaches limit */
                    if (0 == --link->receive_bs_count){
 694:	f7 01       	movw	r30, r14
 696:	81 a5       	ldd	r24, Z+41	; 0x29
 698:	81 50       	subi	r24, 0x01	; 1
 69a:	11 f0       	breq	.+4      	; 0x6a0 <isotp_on_can_message+0x1f2>
 69c:	81 a7       	std	Z+41, r24	; 0x29
                        link->receive_bs_count = ISO_TP_DEFAULT_BLOCK_SIZE;											
 69e:	7f c0       	rjmp	.+254    	; 0x79e <isotp_on_can_message+0x2f0>
 6a0:	81 e0       	ldi	r24, 0x01	; 1
 6a2:	f7 01       	movw	r30, r14
                        isotp_send_flow_control(link, PCI_FLOW_STATUS_CONTINUE, link->receive_bs_count, ISO_TP_DEFAULT_ST_MIN);
 6a4:	81 a7       	std	Z+41, r24	; 0x29
 6a6:	20 e0       	ldi	r18, 0x00	; 0
 6a8:	41 e0       	ldi	r20, 0x01	; 1
 6aa:	60 e0       	ldi	r22, 0x00	; 0
 6ac:	c7 01       	movw	r24, r14
 6ae:	d2 de       	rcall	.-604    	; 0x454 <isotp_send_flow_control>
 6b0:	76 c0       	rjmp	.+236    	; 0x79e <isotp_on_can_message+0x2f0>
            
            break;
        }
        case ISOTP_PCI_TYPE_FLOW_CONTROL_FRAME:
            /* handle fc frame only when sending in progress  */
            if (ISOTP_SEND_STATUS_INPROGRESS != link->send_status){
 6b2:	f7 01       	movw	r30, r14
 6b4:	83 8d       	ldd	r24, Z+27	; 0x1b
 6b6:	81 30       	cpi	r24, 0x01	; 1
 6b8:	09 f0       	breq	.+2      	; 0x6bc <isotp_on_can_message+0x20e>
}

static int isotp_receive_flow_conrtrol_frame(IsoTpLink *link, IsoTpCanMessage *message, uint8_t len)
{
    /* check message length */
    if (len < 3){
 6ba:	71 c0       	rjmp	.+226    	; 0x79e <isotp_on_can_message+0x2f0>
 6bc:	13 30       	cpi	r17, 0x03	; 3
 6be:	08 f0       	brcs	.+2      	; 0x6c2 <isotp_on_can_message+0x214>
        isotp_user_debug("Flow control frame too short.");
 6c0:	5c c0       	rjmp	.+184    	; 0x77a <isotp_on_can_message+0x2cc>
 6c2:	89 ec       	ldi	r24, 0xC9	; 201
 6c4:	91 e0       	ldi	r25, 0x01	; 1
 6c6:	9f 93       	push	r25
 6c8:	8f 93       	push	r24
 6ca:	c0 d0       	rcall	.+384    	; 0x84c <isotp_user_debug>
 6cc:	0f 90       	pop	r0
 6ce:	0f 90       	pop	r0
 6d0:	66 c0       	rjmp	.+204    	; 0x79e <isotp_on_can_message+0x2f0>
                /* refresh bs timer */
                link->send_timer_bs = isotp_user_get_ms() + ISO_TP_DEFAULT_RESPONSE_TIMEOUT;

                /* overflow */
                if (PCI_FLOW_STATUS_OVERFLOW == message.as.flow_control.FS) {
                    link->send_protocol_resault = ISOTP_PROTOCOL_RESAULT_BUFFER_OVFLW;
 6d2:	88 ef       	ldi	r24, 0xF8	; 248
 6d4:	9f ef       	ldi	r25, 0xFF	; 255
 6d6:	f7 01       	movw	r30, r14
 6d8:	92 8f       	std	Z+26, r25	; 0x1a
 6da:	81 8f       	std	Z+25, r24	; 0x19
                    link->send_status = ISOTP_SEND_STATUS_ERROR;
 6dc:	82 e0       	ldi	r24, 0x02	; 2
 6de:	83 8f       	std	Z+27, r24	; 0x1b
 6e0:	5e c0       	rjmp	.+188    	; 0x79e <isotp_on_can_message+0x2f0>
                } 
                /* wait */
                else if (PCI_FLOW_STATUS_WAIT == message.as.flow_control.FS) {
 6e2:	80 31       	cpi	r24, 0x10	; 16
 6e4:	71 f4       	brne	.+28     	; 0x702 <isotp_on_can_message+0x254>
                    link->send_wtf_count += 1;
 6e6:	f7 01       	movw	r30, r14
 6e8:	80 89       	ldd	r24, Z+16	; 0x10
 6ea:	8f 5f       	subi	r24, 0xFF	; 255
 6ec:	80 8b       	std	Z+16, r24	; 0x10
                    /* wati exceed allowed count */
                    if (link->send_wtf_count > ISO_TP_MAX_WFT_NUMBER){
 6ee:	82 30       	cpi	r24, 0x02	; 2
 6f0:	08 f4       	brcc	.+2      	; 0x6f4 <isotp_on_can_message+0x246>
 6f2:	55 c0       	rjmp	.+170    	; 0x79e <isotp_on_can_message+0x2f0>
                        link->send_protocol_resault = ISOTP_PROTOCOL_RESAULT_WFT_OVRN;
 6f4:	89 ef       	ldi	r24, 0xF9	; 249
 6f6:	9f ef       	ldi	r25, 0xFF	; 255
 6f8:	92 8f       	std	Z+26, r25	; 0x1a
 6fa:	81 8f       	std	Z+25, r24	; 0x19
                        link->send_status = ISOTP_SEND_STATUS_ERROR;
 6fc:	82 e0       	ldi	r24, 0x02	; 2
 6fe:	83 8f       	std	Z+27, r24	; 0x1b
 700:	4e c0       	rjmp	.+156    	; 0x79e <isotp_on_can_message+0x2f0>
                    }
                } 
                /* permit send */
                else if (PCI_FLOW_STATUS_CONTINUE == message.as.flow_control.FS){
 702:	81 11       	cpse	r24, r1
 704:	4c c0       	rjmp	.+152    	; 0x79e <isotp_on_can_message+0x2f0>
                    if (0 == message.as.flow_control.BS){
 706:	8a 81       	ldd	r24, Y+2	; 0x02
 708:	81 11       	cpse	r24, r1
 70a:	06 c0       	rjmp	.+12     	; 0x718 <isotp_on_can_message+0x26a>
                        link->send_bs_remain = ISOTP_INVALID_BS;
 70c:	8f ef       	ldi	r24, 0xFF	; 255
 70e:	9f ef       	ldi	r25, 0xFF	; 255
 710:	f7 01       	movw	r30, r14
 712:	96 87       	std	Z+14, r25	; 0x0e
 714:	85 87       	std	Z+13, r24	; 0x0d
 716:	04 c0       	rjmp	.+8      	; 0x720 <isotp_on_can_message+0x272>
                    } else {
                        link->send_bs_remain = message.as.flow_control.BS;
 718:	90 e0       	ldi	r25, 0x00	; 0
 71a:	f7 01       	movw	r30, r14
 71c:	96 87       	std	Z+14, r25	; 0x0e
 71e:	85 87       	std	Z+13, r24	; 0x0d
                    }
                    link->send_st_min = isotp_st_min_to_ms(message.as.flow_control.STmin);
 720:	8b 81       	ldd	r24, Y+3	; 0x03
/* st_min to msec  */
static uint8_t isotp_st_min_to_ms(uint8_t st_min) 
{
    uint8_t ms;
    
    if (st_min >= 0xF1 && st_min <= 0xF9){
 722:	9f e0       	ldi	r25, 0x0F	; 15
 724:	98 0f       	add	r25, r24
 726:	99 30       	cpi	r25, 0x09	; 9
 728:	18 f0       	brcs	.+6      	; 0x730 <isotp_on_can_message+0x282>
        ms = 1;
    } else if (st_min <= 0x7F) {
 72a:	88 23       	and	r24, r24
 72c:	24 f4       	brge	.+8      	; 0x736 <isotp_on_can_message+0x288>
static uint8_t isotp_st_min_to_ms(uint8_t st_min) 
{
    uint8_t ms;
    
    if (st_min >= 0xF1 && st_min <= 0xF9){
        ms = 1;
 72e:	02 c0       	rjmp	.+4      	; 0x734 <isotp_on_can_message+0x286>
 730:	81 e0       	ldi	r24, 0x01	; 1
    } else if (st_min <= 0x7F) {
        ms = st_min;
    } else {
        ms = 0;
 732:	01 c0       	rjmp	.+2      	; 0x736 <isotp_on_can_message+0x288>
                    if (0 == message.as.flow_control.BS){
                        link->send_bs_remain = ISOTP_INVALID_BS;
                    } else {
                        link->send_bs_remain = message.as.flow_control.BS;
                    }
                    link->send_st_min = isotp_st_min_to_ms(message.as.flow_control.STmin);
 734:	80 e0       	ldi	r24, 0x00	; 0
 736:	f7 01       	movw	r30, r14
                    link->send_wtf_count = 0;
 738:	87 87       	std	Z+15, r24	; 0x0f
 73a:	10 8a       	std	Z+16, r1	; 0x10
    (void)memcpy(link->receive_buffer + link->receive_offset, 
           message->as.consecutive_frame.data,
           remaining_bytes);

    link->receive_offset += remaining_bytes;
    if (++(link->receive_sn) > 0x0F){
 73c:	30 c0       	rjmp	.+96     	; 0x79e <isotp_on_can_message+0x2f0>
 73e:	f7 01       	movw	r30, r14
            }

            /* if success */
            if (ISOTP_RET_OK == ret){
                /* refresh timer cs */
                link->receive_timer_cr = isotp_user_get_ms() + ISO_TP_DEFAULT_RESPONSE_TIMEOUT;
 740:	80 a7       	std	Z+40, r24	; 0x28
 742:	9c d0       	rcall	.+312    	; 0x87c <isotp_user_get_ms>
 744:	dc 01       	movw	r26, r24
 746:	cb 01       	movw	r24, r22
 748:	8c 59       	subi	r24, 0x9C	; 156
 74a:	9f 4f       	sbci	r25, 0xFF	; 255
 74c:	af 4f       	sbci	r26, 0xFF	; 255
 74e:	bf 4f       	sbci	r27, 0xFF	; 255
 750:	f7 01       	movw	r30, r14
 752:	82 a7       	std	Z+42, r24	; 0x2a
 754:	93 a7       	std	Z+43, r25	; 0x2b
 756:	a4 a7       	std	Z+44, r26	; 0x2c
 758:	b5 a7       	std	Z+45, r27	; 0x2d
                
                /* receive finished */
                if (link->receive_offset >= link->receive_size){
 75a:	26 a1       	ldd	r18, Z+38	; 0x26
 75c:	37 a1       	ldd	r19, Z+39	; 0x27
 75e:	84 a1       	ldd	r24, Z+36	; 0x24
 760:	95 a1       	ldd	r25, Z+37	; 0x25
 762:	28 17       	cp	r18, r24
 764:	39 07       	cpc	r19, r25
 766:	08 f4       	brcc	.+2      	; 0x76a <isotp_on_can_message+0x2bc>
 768:	95 cf       	rjmp	.-214    	; 0x694 <isotp_on_can_message+0x1e6>
            /* handle message */
            ret = isotp_receive_consecutive_frame(link, &message, len);

            /* if wrong sn */
            if (ISOTP_RET_WRONG_SN == ret){
                link->receive_protocol_resault = ISOTP_PROTOCOL_RESAULT_WRONG_SN;
 76a:	90 cf       	rjmp	.-224    	; 0x68c <isotp_on_can_message+0x1de>
 76c:	8c ef       	ldi	r24, 0xFC	; 252
 76e:	9f ef       	ldi	r25, 0xFF	; 255
 770:	f7 01       	movw	r30, r14
 772:	97 a7       	std	Z+47, r25	; 0x2f
                link->receive_status = ISOTP_RECEIVE_STATUS_IDLE;
 774:	86 a7       	std	Z+46, r24	; 0x2e
                break;
 776:	10 aa       	std	Z+48, r1	; 0x30
            /* handle message */
            ret = isotp_receive_flow_conrtrol_frame(link, &message, len);
            
            if (ISOTP_RET_OK == ret){
                /* refresh bs timer */
                link->send_timer_bs = isotp_user_get_ms() + ISO_TP_DEFAULT_RESPONSE_TIMEOUT;
 778:	12 c0       	rjmp	.+36     	; 0x79e <isotp_on_can_message+0x2f0>
 77a:	80 d0       	rcall	.+256    	; 0x87c <isotp_user_get_ms>
 77c:	dc 01       	movw	r26, r24
 77e:	cb 01       	movw	r24, r22
 780:	8c 59       	subi	r24, 0x9C	; 156
 782:	9f 4f       	sbci	r25, 0xFF	; 255
 784:	af 4f       	sbci	r26, 0xFF	; 255
 786:	bf 4f       	sbci	r27, 0xFF	; 255
 788:	f7 01       	movw	r30, r14
 78a:	85 8b       	std	Z+21, r24	; 0x15
 78c:	96 8b       	std	Z+22, r25	; 0x16
 78e:	a7 8b       	std	Z+23, r26	; 0x17
 790:	b0 8f       	std	Z+24, r27	; 0x18

                /* overflow */
                if (PCI_FLOW_STATUS_OVERFLOW == message.as.flow_control.FS) {
 792:	89 81       	ldd	r24, Y+1	; 0x01
 794:	80 7f       	andi	r24, 0xF0	; 240
 796:	80 32       	cpi	r24, 0x20	; 32
 798:	09 f0       	breq	.+2      	; 0x79c <isotp_on_can_message+0x2ee>
 79a:	a3 cf       	rjmp	.-186    	; 0x6e2 <isotp_on_can_message+0x234>
 79c:	9a cf       	rjmp	.-204    	; 0x6d2 <isotp_on_can_message+0x224>
        default:
            break;
    };
    
    return;
}
 79e:	2a 96       	adiw	r28, 0x0a	; 10
 7a0:	0f b6       	in	r0, 0x3f	; 63
 7a2:	f8 94       	cli
 7a4:	de bf       	out	0x3e, r29	; 62
 7a6:	0f be       	out	0x3f, r0	; 63
 7a8:	cd bf       	out	0x3d, r28	; 61
 7aa:	df 91       	pop	r29
 7ac:	cf 91       	pop	r28
 7ae:	1f 91       	pop	r17
 7b0:	0f 91       	pop	r16
 7b2:	ff 90       	pop	r15
 7b4:	ef 90       	pop	r14
 7b6:	df 90       	pop	r13
 7b8:	cf 90       	pop	r12
 7ba:	08 95       	ret

000007bc <isotp_receive>:

int isotp_receive(IsoTpLink *link, uint8_t *payload, const uint16_t payload_size, uint16_t *out_size)
{
 7bc:	ef 92       	push	r14
 7be:	ff 92       	push	r15
 7c0:	0f 93       	push	r16
 7c2:	1f 93       	push	r17
 7c4:	cf 93       	push	r28
 7c6:	df 93       	push	r29
 7c8:	fc 01       	movw	r30, r24
    uint16_t copylen;
    
    if (ISOTP_RECEIVE_STATUS_FULL != link->receive_status){
 7ca:	80 a9       	ldd	r24, Z+48	; 0x30
 7cc:	82 30       	cpi	r24, 0x02	; 2
 7ce:	a1 f4       	brne	.+40     	; 0x7f8 <isotp_receive+0x3c>
        return ISOTP_RET_NO_DATA;
    }

    copylen = link->receive_size;
 7d0:	04 a1       	ldd	r16, Z+36	; 0x24
 7d2:	15 a1       	ldd	r17, Z+37	; 0x25
 7d4:	40 17       	cp	r20, r16
 7d6:	51 07       	cpc	r21, r17
 7d8:	08 f4       	brcc	.+2      	; 0x7dc <isotp_receive+0x20>
 7da:	8a 01       	movw	r16, r20
 7dc:	79 01       	movw	r14, r18
 7de:	cb 01       	movw	r24, r22
 7e0:	ef 01       	movw	r28, r30
    if (copylen > payload_size){
        copylen = payload_size;
    }

    memcpy(payload, link->receive_buffer, copylen);
 7e2:	60 a1       	ldd	r22, Z+32	; 0x20
 7e4:	71 a1       	ldd	r23, Z+33	; 0x21
 7e6:	a8 01       	movw	r20, r16
 7e8:	76 d3       	rcall	.+1772   	; 0xed6 <memcpy>
    *out_size = copylen;
 7ea:	f7 01       	movw	r30, r14
 7ec:	11 83       	std	Z+1, r17	; 0x01
 7ee:	00 83       	st	Z, r16

    link->receive_status = ISOTP_RECEIVE_STATUS_IDLE;
 7f0:	18 aa       	std	Y+48, r1	; 0x30

    return ISOTP_RET_OK;
 7f2:	80 e0       	ldi	r24, 0x00	; 0
 7f4:	90 e0       	ldi	r25, 0x00	; 0
 7f6:	02 c0       	rjmp	.+4      	; 0x7fc <isotp_receive+0x40>
int isotp_receive(IsoTpLink *link, uint8_t *payload, const uint16_t payload_size, uint16_t *out_size)
{
    uint16_t copylen;
    
    if (ISOTP_RECEIVE_STATUS_FULL != link->receive_status){
        return ISOTP_RET_NO_DATA;
 7f8:	8b ef       	ldi	r24, 0xFB	; 251
 7fa:	9f ef       	ldi	r25, 0xFF	; 255
    *out_size = copylen;

    link->receive_status = ISOTP_RECEIVE_STATUS_IDLE;

    return ISOTP_RET_OK;
}
 7fc:	df 91       	pop	r29
 7fe:	cf 91       	pop	r28
 800:	1f 91       	pop	r17
 802:	0f 91       	pop	r16
 804:	ff 90       	pop	r15
 806:	ef 90       	pop	r14
 808:	08 95       	ret

0000080a <isotp_init_link>:

void isotp_init_link(IsoTpLink *link, uint32_t sendid, 
                     uint8_t *sendbuf, uint16_t sendbufsize,
                     uint8_t *recvbuf, uint16_t recvbufsize)
{
 80a:	cf 92       	push	r12
 80c:	df 92       	push	r13
 80e:	ef 92       	push	r14
 810:	ff 92       	push	r15
 812:	0f 93       	push	r16
 814:	1f 93       	push	r17
 816:	fc 01       	movw	r30, r24
    memset(link, 0, sizeof(*link));
 818:	81 e3       	ldi	r24, 0x31	; 49
 81a:	df 01       	movw	r26, r30
 81c:	1d 92       	st	X+, r1
 81e:	8a 95       	dec	r24
 820:	e9 f7       	brne	.-6      	; 0x81c <isotp_init_link+0x12>
    link->receive_status = ISOTP_RECEIVE_STATUS_IDLE;
 822:	10 aa       	std	Z+48, r1	; 0x30
    link->send_status = ISOTP_SEND_STATUS_IDLE;
 824:	13 8e       	std	Z+27, r1	; 0x1b
    link->send_arbitration_id = sendid;
 826:	40 83       	st	Z, r20
 828:	51 83       	std	Z+1, r21	; 0x01
 82a:	62 83       	std	Z+2, r22	; 0x02
 82c:	73 83       	std	Z+3, r23	; 0x03
    link->send_buffer = sendbuf;
 82e:	35 83       	std	Z+5, r19	; 0x05
 830:	24 83       	std	Z+4, r18	; 0x04
    link->send_buf_size = sendbufsize;
 832:	17 83       	std	Z+7, r17	; 0x07
 834:	06 83       	std	Z+6, r16	; 0x06
    link->receive_buffer = recvbuf;
 836:	f1 a2       	std	Z+33, r15	; 0x21
 838:	e0 a2       	std	Z+32, r14	; 0x20
    link->recevie_buf_size = recvbufsize;
 83a:	d3 a2       	std	Z+35, r13	; 0x23
 83c:	c2 a2       	std	Z+34, r12	; 0x22
    
    return;
}
 83e:	1f 91       	pop	r17
 840:	0f 91       	pop	r16
 842:	ff 90       	pop	r15
 844:	ef 90       	pop	r14
 846:	df 90       	pop	r13
 848:	cf 90       	pop	r12
 84a:	08 95       	ret

0000084c <isotp_user_debug>:
#include "../uart_f.h"
#include "../can.h"

/* user implemented, print debug message */
void isotp_user_debug(const char* message){
	uart_puts(message);
 84c:	d4 c1       	rjmp	.+936    	; 0xbf6 <uart_puts>
 84e:	08 95       	ret

00000850 <isotp_user_send_can>:
}

/* user implemented, send can message */
int  isotp_user_send_can(const uint32_t arbitration_id, const uint8_t* data, const uint8_t size){
 850:	cf 93       	push	r28
 852:	df 93       	push	r29
 854:	00 d0       	rcall	.+0      	; 0x856 <isotp_user_send_can+0x6>
 856:	cd b7       	in	r28, 0x3d	; 61
 858:	de b7       	in	r29, 0x3e	; 62
	can_msg_t message;
	can_id_t id;
	memcpy(id,arbitration_id,2);
 85a:	fb 01       	movw	r30, r22
 85c:	80 81       	ld	r24, Z
 85e:	91 81       	ldd	r25, Z+1	; 0x01
 860:	9a 83       	std	Y+2, r25	; 0x02
 862:	89 83       	std	Y+1, r24	; 0x01
	can_send_message(0, id, data, size);
 864:	be 01       	movw	r22, r28
 866:	6f 5f       	subi	r22, 0xFF	; 255
 868:	7f 4f       	sbci	r23, 0xFF	; 255
 86a:	80 e0       	ldi	r24, 0x00	; 0
 86c:	f8 dc       	rcall	.-1552   	; 0x25e <can_send_message>
	return 0;
}
 86e:	80 e0       	ldi	r24, 0x00	; 0
 870:	90 e0       	ldi	r25, 0x00	; 0
 872:	0f 90       	pop	r0
 874:	0f 90       	pop	r0
 876:	df 91       	pop	r29
 878:	cf 91       	pop	r28
 87a:	08 95       	ret

0000087c <isotp_user_get_ms>:

/* user implemented, get millisecond */
uint32_t isotp_user_get_ms(void){
	return millis();
 87c:	82 cd       	rjmp	.-1276   	; 0x382 <millis>
}
 87e:	08 95       	ret

00000880 <buttons_init>:
			uart_puts("Authentication Ok");
			can_send_message(0, default_id, ack_pos, 8);
		}else{
			uart_puts("Authentication Failed");
			can_send_message(0, default_id, ack_neg, 8);
			continue;
 880:	1d b8       	out	0x0d, r1	; 13
 882:	80 ef       	ldi	r24, 0xF0	; 240
 884:	8e b9       	out	0x0e, r24	; 14
 886:	10 92 6a 00 	sts	0x006A, r1	; 0x80006a <__TEXT_REGION_LENGTH__+0x7e006a>
 88a:	8d bb       	out	0x1d, r24	; 29
 88c:	08 95       	ret

0000088e <main>:
static uint8_t g_isotpRecvBuf[128];
static uint8_t g_isotpSendBuf[128];


 int main()
 {
 88e:	cf 93       	push	r28
 890:	df 93       	push	r29
 892:	cd b7       	in	r28, 0x3d	; 61
 894:	de b7       	in	r29, 0x3e	; 62
 896:	a6 97       	sbiw	r28, 0x26	; 38
 898:	0f b6       	in	r0, 0x3f	; 63
 89a:	f8 94       	cli
 89c:	de bf       	out	0x3e, r29	; 62
 89e:	0f be       	out	0x3f, r0	; 63
 8a0:	cd bf       	out	0x3d, r28	; 61
	uart_init();
 8a2:	9d d1       	rcall	.+826    	; 0xbde <uart_init>
	buttons_init();
 8a4:	ed df       	rcall	.-38     	; 0x880 <buttons_init>
	can_init();
 8a6:	1c dc       	rcall	.-1992   	; 0xe0 <can_init>
 8a8:	5e d1       	rcall	.+700    	; 0xb66 <init_permissions_table>
	init_permissions_table();
 8aa:	8b ed       	ldi	r24, 0xDB	; 219
	uart_puts("idle");
 8ac:	92 e0       	ldi	r25, 0x02	; 2
 8ae:	a3 d1       	rcall	.+838    	; 0xbf6 <uart_puts>
 8b0:	71 dd       	rcall	.-1310   	; 0x394 <clock_Init>
 8b2:	68 94       	set
	clock_Init();
 8b4:	cc 24       	eor	r12, r12
 8b6:	c7 f8       	bld	r12, 7
	
    /* Initialize CAN and other peripheral */
    
    /* Initialize link, 0x7TT is the CAN ID you send */
    isotp_init_link(&g_link, 0x00,
 8b8:	d1 2c       	mov	r13, r1
 8ba:	0f 2e       	mov	r0, r31
 8bc:	f0 e8       	ldi	r31, 0x80	; 128
 8be:	ef 2e       	mov	r14, r31
 8c0:	f3 e0       	ldi	r31, 0x03	; 3
 8c2:	ff 2e       	mov	r15, r31
 8c4:	f0 2d       	mov	r31, r0
 8c6:	00 e8       	ldi	r16, 0x80	; 128
 8c8:	10 e0       	ldi	r17, 0x00	; 0
 8ca:	20 e0       	ldi	r18, 0x00	; 0
 8cc:	33 e0       	ldi	r19, 0x03	; 3
 8ce:	40 e0       	ldi	r20, 0x00	; 0
 8d0:	50 e0       	ldi	r21, 0x00	; 0
 8d2:	ba 01       	movw	r22, r20
 8d4:	80 e0       	ldi	r24, 0x00	; 0
 8d6:	94 e0       	ldi	r25, 0x04	; 4
 8d8:	98 df       	rcall	.-208    	; 0x80a <isotp_init_link>
 8da:	8e 01       	movw	r16, r28
 8dc:	0a 5d       	subi	r16, 0xDA	; 218
 8de:	1f 4f       	sbci	r17, 0xFF	; 255
		uint8_t ret;
		can_msg_t init;
		uint8_t len;
    
        /* If recevie any interested can message, call isotp_on_can_message to handle message */
        ret = can_receive_message(0, default_id, zero_mask, init, &len);
 8e0:	9e 01       	movw	r18, r28
 8e2:	23 5e       	subi	r18, 0xE3	; 227
 8e4:	3f 4f       	sbci	r19, 0xFF	; 255
 8e6:	49 ee       	ldi	r20, 0xE9	; 233
 8e8:	52 e0       	ldi	r21, 0x02	; 2
 8ea:	6b ee       	ldi	r22, 0xEB	; 235
 8ec:	72 e0       	ldi	r23, 0x02	; 2
 8ee:	80 e0       	ldi	r24, 0x00	; 0
 8f0:	de dc       	rcall	.-1604   	; 0x2ae <can_receive_message>
 8f2:	2f e7       	ldi	r18, 0x7F	; 127
 8f4:	88 e3       	ldi	r24, 0x38	; 56
 8f6:	91 e0       	ldi	r25, 0x01	; 1
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 8f8:	21 50       	subi	r18, 0x01	; 1
 8fa:	80 40       	sbci	r24, 0x00	; 0
 8fc:	90 40       	sbci	r25, 0x00	; 0
 8fe:	e1 f7       	brne	.-8      	; 0x8f8 <main+0x6a>
 900:	00 c0       	rjmp	.+0      	; 0x902 <main+0x74>
 902:	00 00       	nop
 904:	4e a1       	ldd	r20, Y+38	; 0x26
 906:	be 01       	movw	r22, r28
        
        /* 0x7RR is CAN ID you want to receive */
		_delay_ms(50);
        isotp_on_can_message(&g_link, init, len);
 908:	63 5e       	subi	r22, 0xE3	; 227
 90a:	7f 4f       	sbci	r23, 0xFF	; 255
 90c:	80 e0       	ldi	r24, 0x00	; 0
 90e:	94 e0       	ldi	r25, 0x04	; 4
 910:	ce dd       	rcall	.-1124   	; 0x4ae <isotp_on_can_message>
 912:	80 91 30 04 	lds	r24, 0x0430	; 0x800430 <g_link+0x30>
 916:	81 30       	cpi	r24, 0x01	; 1
        
        /* Poll link to handle multiple frame transmition */
		while(g_link.receive_status == ISOTP_RECEIVE_STATUS_INPROGRESS){
 918:	01 f5       	brne	.+64     	; 0x95a <main+0xcc>
 91a:	8e 01       	movw	r16, r28
 91c:	0a 5d       	subi	r16, 0xDA	; 218
 91e:	1f 4f       	sbci	r17, 0xFF	; 255
			ret = can_receive_message(0, default_id, zero_mask, init, &len);
 920:	9e 01       	movw	r18, r28
 922:	23 5e       	subi	r18, 0xE3	; 227
 924:	3f 4f       	sbci	r19, 0xFF	; 255
 926:	49 ee       	ldi	r20, 0xE9	; 233
 928:	52 e0       	ldi	r21, 0x02	; 2
 92a:	6b ee       	ldi	r22, 0xEB	; 235
 92c:	72 e0       	ldi	r23, 0x02	; 2
 92e:	80 e0       	ldi	r24, 0x00	; 0
 930:	be dc       	rcall	.-1668   	; 0x2ae <can_receive_message>
 932:	2f e7       	ldi	r18, 0x7F	; 127
 934:	88 e3       	ldi	r24, 0x38	; 56
 936:	91 e0       	ldi	r25, 0x01	; 1
 938:	21 50       	subi	r18, 0x01	; 1
 93a:	80 40       	sbci	r24, 0x00	; 0
 93c:	90 40       	sbci	r25, 0x00	; 0
 93e:	e1 f7       	brne	.-8      	; 0x938 <main+0xaa>
 940:	00 c0       	rjmp	.+0      	; 0x942 <main+0xb4>
 942:	00 00       	nop
 944:	4e a1       	ldd	r20, Y+38	; 0x26
 946:	be 01       	movw	r22, r28
			_delay_ms(50);
			isotp_on_can_message(&g_link, init, len);
 948:	63 5e       	subi	r22, 0xE3	; 227
 94a:	7f 4f       	sbci	r23, 0xFF	; 255
 94c:	80 e0       	ldi	r24, 0x00	; 0
 94e:	94 e0       	ldi	r25, 0x04	; 4
 950:	ae dd       	rcall	.-1188   	; 0x4ae <isotp_on_can_message>
 952:	80 91 30 04 	lds	r24, 0x0430	; 0x800430 <g_link+0x30>
 956:	81 30       	cpi	r24, 0x01	; 1
        /* 0x7RR is CAN ID you want to receive */
		_delay_ms(50);
        isotp_on_can_message(&g_link, init, len);
        
        /* Poll link to handle multiple frame transmition */
		while(g_link.receive_status == ISOTP_RECEIVE_STATUS_INPROGRESS){
 958:	01 f3       	breq	.-64     	; 0x91a <main+0x8c>
 95a:	9e 01       	movw	r18, r28
 95c:	2b 5d       	subi	r18, 0xDB	; 219
           payload is upper layer message buffer, usually UDS;
           payload_size is payload buffer size;
           out_size is the actuall read size;
           */
		uint8_t out_size;
        ret = isotp_receive(&g_link, payload, 28, &out_size);
 95e:	3f 4f       	sbci	r19, 0xFF	; 255
 960:	4c e1       	ldi	r20, 0x1C	; 28
 962:	50 e0       	ldi	r21, 0x00	; 0
 964:	be 01       	movw	r22, r28
 966:	6f 5f       	subi	r22, 0xFF	; 255
 968:	7f 4f       	sbci	r23, 0xFF	; 255
 96a:	80 e0       	ldi	r24, 0x00	; 0
 96c:	94 e0       	ldi	r25, 0x04	; 4
 96e:	26 df       	rcall	.-436    	; 0x7bc <isotp_receive>
 970:	80 ee       	ldi	r24, 0xE0	; 224
 972:	92 e0       	ldi	r25, 0x02	; 2
		uart_puts("complete");
 974:	40 d1       	rcall	.+640    	; 0xbf6 <uart_puts>
 976:	ff cf       	rjmp	.-2      	; 0x976 <main+0xe8>

00000978 <entrycmp>:
 978:	cf 93       	push	r28
 97a:	df 93       	push	r29
 97c:	1f 92       	push	r1
int check_permission(can_id_t id, role_t role){
	entry_t *entry;
	if(find_entry(id, &entry)) return 2;
	permission_t *p;
	return find_permission(entry, role, &p);
}
 97e:	cd b7       	in	r28, 0x3d	; 61
 980:	de b7       	in	r29, 0x3e	; 62
 982:	42 e0       	ldi	r20, 0x02	; 2
 984:	50 e0       	ldi	r21, 0x00	; 0
 986:	9a d2       	rcall	.+1332   	; 0xebc <memcmp>
 988:	89 83       	std	Y+1, r24	; 0x01
 98a:	89 81       	ldd	r24, Y+1	; 0x01
 98c:	90 e0       	ldi	r25, 0x00	; 0
 98e:	0f 90       	pop	r0
 990:	df 91       	pop	r29
 992:	cf 91       	pop	r28
 994:	08 95       	ret

00000996 <add_entry>:
 996:	ef 92       	push	r14
 998:	ff 92       	push	r15
 99a:	0f 93       	push	r16
 99c:	1f 93       	push	r17
 99e:	cf 93       	push	r28
 9a0:	df 93       	push	r29
 9a2:	8c 01       	movw	r16, r24
 9a4:	86 e0       	ldi	r24, 0x06	; 6
 9a6:	90 e0       	ldi	r25, 0x00	; 0
 9a8:	68 d1       	rcall	.+720    	; 0xc7a <malloc>
 9aa:	7c 01       	movw	r14, r24
 9ac:	fc 01       	movw	r30, r24
 9ae:	13 82       	std	Z+3, r1	; 0x03
 9b0:	12 82       	std	Z+2, r1	; 0x02
 9b2:	15 82       	std	Z+5, r1	; 0x05
 9b4:	14 82       	std	Z+4, r1	; 0x04
 9b6:	f8 01       	movw	r30, r16
 9b8:	80 81       	ld	r24, Z
 9ba:	91 81       	ldd	r25, Z+1	; 0x01
 9bc:	f7 01       	movw	r30, r14
 9be:	91 83       	std	Z+1, r25	; 0x01
 9c0:	80 83       	st	Z, r24
 9c2:	e0 91 31 04 	lds	r30, 0x0431	; 0x800431 <permission_table>
 9c6:	f0 91 32 04 	lds	r31, 0x0432	; 0x800432 <permission_table+0x1>
 9ca:	c0 81       	ld	r28, Z
 9cc:	d1 81       	ldd	r29, Z+1	; 0x01
 9ce:	20 97       	sbiw	r28, 0x00	; 0
 9d0:	d1 f0       	breq	.+52     	; 0xa06 <add_entry+0x70>
 9d2:	8c 81       	ldd	r24, Y+4	; 0x04
 9d4:	9d 81       	ldd	r25, Y+5	; 0x05
 9d6:	89 2b       	or	r24, r25
 9d8:	61 f0       	breq	.+24     	; 0x9f2 <add_entry+0x5c>
 9da:	b8 01       	movw	r22, r16
 9dc:	ce 01       	movw	r24, r28
 9de:	cc df       	rcall	.-104    	; 0x978 <entrycmp>
 9e0:	89 2b       	or	r24, r25
 9e2:	b1 f0       	breq	.+44     	; 0xa10 <add_entry+0x7a>
 9e4:	0c 80       	ldd	r0, Y+4	; 0x04
 9e6:	dd 81       	ldd	r29, Y+5	; 0x05
 9e8:	c0 2d       	mov	r28, r0
 9ea:	8c 81       	ldd	r24, Y+4	; 0x04
 9ec:	9d 81       	ldd	r25, Y+5	; 0x05
 9ee:	89 2b       	or	r24, r25
 9f0:	a1 f7       	brne	.-24     	; 0x9da <add_entry+0x44>
 9f2:	b8 01       	movw	r22, r16
 9f4:	ce 01       	movw	r24, r28
 9f6:	c0 df       	rcall	.-128    	; 0x978 <entrycmp>
 9f8:	89 2b       	or	r24, r25
 9fa:	69 f0       	breq	.+26     	; 0xa16 <add_entry+0x80>
 9fc:	fd 82       	std	Y+5, r15	; 0x05
 9fe:	ec 82       	std	Y+4, r14	; 0x04
 a00:	80 e0       	ldi	r24, 0x00	; 0
 a02:	90 e0       	ldi	r25, 0x00	; 0
 a04:	0a c0       	rjmp	.+20     	; 0xa1a <add_entry+0x84>
 a06:	f1 82       	std	Z+1, r15	; 0x01
 a08:	e0 82       	st	Z, r14
 a0a:	80 e0       	ldi	r24, 0x00	; 0
 a0c:	90 e0       	ldi	r25, 0x00	; 0
 a0e:	05 c0       	rjmp	.+10     	; 0xa1a <add_entry+0x84>
 a10:	81 e0       	ldi	r24, 0x01	; 1
 a12:	90 e0       	ldi	r25, 0x00	; 0
 a14:	02 c0       	rjmp	.+4      	; 0xa1a <add_entry+0x84>
 a16:	81 e0       	ldi	r24, 0x01	; 1
 a18:	90 e0       	ldi	r25, 0x00	; 0
 a1a:	df 91       	pop	r29
 a1c:	cf 91       	pop	r28
 a1e:	1f 91       	pop	r17
 a20:	0f 91       	pop	r16
 a22:	ff 90       	pop	r15
 a24:	ef 90       	pop	r14
 a26:	08 95       	ret

00000a28 <add_entry_hex>:
 a28:	cf 93       	push	r28
 a2a:	df 93       	push	r29
 a2c:	00 d0       	rcall	.+0      	; 0xa2e <add_entry_hex+0x6>
 a2e:	cd b7       	in	r28, 0x3d	; 61
 a30:	de b7       	in	r29, 0x3e	; 62
 a32:	ae 01       	movw	r20, r28
 a34:	4f 5f       	subi	r20, 0xFF	; 255
 a36:	5f 4f       	sbci	r21, 0xFF	; 255
 a38:	64 e0       	ldi	r22, 0x04	; 4
 a3a:	b4 dc       	rcall	.-1688   	; 0x3a4 <hex_to_bytes>
 a3c:	ce 01       	movw	r24, r28
 a3e:	01 96       	adiw	r24, 0x01	; 1
 a40:	aa df       	rcall	.-172    	; 0x996 <add_entry>
 a42:	80 e0       	ldi	r24, 0x00	; 0
 a44:	90 e0       	ldi	r25, 0x00	; 0
 a46:	0f 90       	pop	r0
 a48:	0f 90       	pop	r0
 a4a:	df 91       	pop	r29
 a4c:	cf 91       	pop	r28
 a4e:	08 95       	ret

00000a50 <find_entry>:
 a50:	ef 92       	push	r14
 a52:	ff 92       	push	r15
 a54:	0f 93       	push	r16
 a56:	1f 93       	push	r17
 a58:	cf 93       	push	r28
 a5a:	df 93       	push	r29
 a5c:	8c 01       	movw	r16, r24
 a5e:	7b 01       	movw	r14, r22
 a60:	e0 91 31 04 	lds	r30, 0x0431	; 0x800431 <permission_table>
 a64:	f0 91 32 04 	lds	r31, 0x0432	; 0x800432 <permission_table+0x1>
 a68:	c0 81       	ld	r28, Z
 a6a:	d1 81       	ldd	r29, Z+1	; 0x01
 a6c:	20 97       	sbiw	r28, 0x00	; 0
 a6e:	89 f0       	breq	.+34     	; 0xa92 <find_entry+0x42>
 a70:	b8 01       	movw	r22, r16
 a72:	ce 01       	movw	r24, r28
 a74:	81 df       	rcall	.-254    	; 0x978 <entrycmp>
 a76:	00 97       	sbiw	r24, 0x00	; 0
 a78:	21 f4       	brne	.+8      	; 0xa82 <find_entry+0x32>
 a7a:	f7 01       	movw	r30, r14
 a7c:	d1 83       	std	Z+1, r29	; 0x01
 a7e:	c0 83       	st	Z, r28
 a80:	0a c0       	rjmp	.+20     	; 0xa96 <find_entry+0x46>
 a82:	0c 80       	ldd	r0, Y+4	; 0x04
 a84:	dd 81       	ldd	r29, Y+5	; 0x05
 a86:	c0 2d       	mov	r28, r0
 a88:	20 97       	sbiw	r28, 0x00	; 0
 a8a:	91 f7       	brne	.-28     	; 0xa70 <find_entry+0x20>
 a8c:	81 e0       	ldi	r24, 0x01	; 1
 a8e:	90 e0       	ldi	r25, 0x00	; 0
 a90:	02 c0       	rjmp	.+4      	; 0xa96 <find_entry+0x46>
 a92:	81 e0       	ldi	r24, 0x01	; 1
 a94:	90 e0       	ldi	r25, 0x00	; 0
 a96:	df 91       	pop	r29
 a98:	cf 91       	pop	r28
 a9a:	1f 91       	pop	r17
 a9c:	0f 91       	pop	r16
 a9e:	ff 90       	pop	r15
 aa0:	ef 90       	pop	r14
 aa2:	08 95       	ret

00000aa4 <add_permission>:
 aa4:	cf 92       	push	r12
 aa6:	df 92       	push	r13
 aa8:	ef 92       	push	r14
 aaa:	ff 92       	push	r15
 aac:	1f 93       	push	r17
 aae:	cf 93       	push	r28
 ab0:	df 93       	push	r29
 ab2:	00 d0       	rcall	.+0      	; 0xab4 <add_permission+0x10>
 ab4:	cd b7       	in	r28, 0x3d	; 61
 ab6:	de b7       	in	r29, 0x3e	; 62
 ab8:	6c 01       	movw	r12, r24
 aba:	16 2f       	mov	r17, r22
 abc:	83 e0       	ldi	r24, 0x03	; 3
 abe:	90 e0       	ldi	r25, 0x00	; 0
 ac0:	dc d0       	rcall	.+440    	; 0xc7a <malloc>
 ac2:	7c 01       	movw	r14, r24
 ac4:	fc 01       	movw	r30, r24
 ac6:	12 82       	std	Z+2, r1	; 0x02
 ac8:	11 82       	std	Z+1, r1	; 0x01
 aca:	10 83       	st	Z, r17
 acc:	be 01       	movw	r22, r28
 ace:	6f 5f       	subi	r22, 0xFF	; 255
 ad0:	7f 4f       	sbci	r23, 0xFF	; 255
 ad2:	c6 01       	movw	r24, r12
 ad4:	bd df       	rcall	.-134    	; 0xa50 <find_entry>
 ad6:	ac 01       	movw	r20, r24
 ad8:	89 2b       	or	r24, r25
 ada:	e1 f4       	brne	.+56     	; 0xb14 <add_permission+0x70>
 adc:	a9 81       	ldd	r26, Y+1	; 0x01
 ade:	ba 81       	ldd	r27, Y+2	; 0x02
 ae0:	12 96       	adiw	r26, 0x02	; 2
 ae2:	ed 91       	ld	r30, X+
 ae4:	fc 91       	ld	r31, X
 ae6:	13 97       	sbiw	r26, 0x03	; 3
 ae8:	30 97       	sbiw	r30, 0x00	; 0
 aea:	49 f4       	brne	.+18     	; 0xafe <add_permission+0x5a>
 aec:	13 96       	adiw	r26, 0x03	; 3
 aee:	fc 92       	st	X, r15
 af0:	ee 92       	st	-X, r14
 af2:	12 97       	sbiw	r26, 0x02	; 2
 af4:	17 c0       	rjmp	.+46     	; 0xb24 <add_permission+0x80>
 af6:	90 81       	ld	r25, Z
 af8:	f9 01       	movw	r30, r18
 afa:	19 17       	cp	r17, r25
 afc:	71 f0       	breq	.+28     	; 0xb1a <add_permission+0x76>
 afe:	21 81       	ldd	r18, Z+1	; 0x01
 b00:	32 81       	ldd	r19, Z+2	; 0x02
 b02:	21 15       	cp	r18, r1
 b04:	31 05       	cpc	r19, r1
 b06:	b9 f7       	brne	.-18     	; 0xaf6 <add_permission+0x52>
 b08:	80 81       	ld	r24, Z
 b0a:	18 17       	cp	r17, r24
 b0c:	49 f0       	breq	.+18     	; 0xb20 <add_permission+0x7c>
 b0e:	f2 82       	std	Z+2, r15	; 0x02
 b10:	e1 82       	std	Z+1, r14	; 0x01
 b12:	08 c0       	rjmp	.+16     	; 0xb24 <add_permission+0x80>
 b14:	41 e0       	ldi	r20, 0x01	; 1
 b16:	50 e0       	ldi	r21, 0x00	; 0
 b18:	05 c0       	rjmp	.+10     	; 0xb24 <add_permission+0x80>
 b1a:	42 e0       	ldi	r20, 0x02	; 2
 b1c:	50 e0       	ldi	r21, 0x00	; 0
 b1e:	02 c0       	rjmp	.+4      	; 0xb24 <add_permission+0x80>
 b20:	42 e0       	ldi	r20, 0x02	; 2
 b22:	50 e0       	ldi	r21, 0x00	; 0
 b24:	ca 01       	movw	r24, r20
 b26:	0f 90       	pop	r0
 b28:	0f 90       	pop	r0
 b2a:	df 91       	pop	r29
 b2c:	cf 91       	pop	r28
 b2e:	1f 91       	pop	r17
 b30:	ff 90       	pop	r15
 b32:	ef 90       	pop	r14
 b34:	df 90       	pop	r13
 b36:	cf 90       	pop	r12
 b38:	08 95       	ret

00000b3a <add_permission_hex>:
 b3a:	1f 93       	push	r17
 b3c:	cf 93       	push	r28
 b3e:	df 93       	push	r29
 b40:	00 d0       	rcall	.+0      	; 0xb42 <add_permission_hex+0x8>
 b42:	cd b7       	in	r28, 0x3d	; 61
 b44:	de b7       	in	r29, 0x3e	; 62
 b46:	16 2f       	mov	r17, r22
 b48:	ae 01       	movw	r20, r28
 b4a:	4f 5f       	subi	r20, 0xFF	; 255
 b4c:	5f 4f       	sbci	r21, 0xFF	; 255
 b4e:	64 e0       	ldi	r22, 0x04	; 4
 b50:	29 dc       	rcall	.-1966   	; 0x3a4 <hex_to_bytes>
 b52:	61 2f       	mov	r22, r17
 b54:	ce 01       	movw	r24, r28
 b56:	01 96       	adiw	r24, 0x01	; 1
 b58:	a5 df       	rcall	.-182    	; 0xaa4 <add_permission>
 b5a:	0f 90       	pop	r0
 b5c:	0f 90       	pop	r0
 b5e:	df 91       	pop	r29
 b60:	cf 91       	pop	r28
 b62:	1f 91       	pop	r17
 b64:	08 95       	ret

00000b66 <init_permissions_table>:

void init_permissions_table(){
	permission_table = malloc(sizeof(permission_table_t));
 b66:	82 e0       	ldi	r24, 0x02	; 2
 b68:	90 e0       	ldi	r25, 0x00	; 0
 b6a:	87 d0       	rcall	.+270    	; 0xc7a <malloc>
 b6c:	90 93 32 04 	sts	0x0432, r25	; 0x800432 <permission_table+0x1>
 b70:	80 93 31 04 	sts	0x0431, r24	; 0x800431 <permission_table>
	permission_table->head = NULL;
 b74:	fc 01       	movw	r30, r24
 b76:	11 82       	std	Z+1, r1	; 0x01
 b78:	10 82       	st	Z, r1
	add_entry_hex("0201");
 b7a:	8d ee       	ldi	r24, 0xED	; 237
 b7c:	92 e0       	ldi	r25, 0x02	; 2
 b7e:	54 df       	rcall	.-344    	; 0xa28 <add_entry_hex>
	add_permission_hex("0201", ADMIN_ROLE);
 b80:	60 e0       	ldi	r22, 0x00	; 0
 b82:	8d ee       	ldi	r24, 0xED	; 237
 b84:	92 e0       	ldi	r25, 0x02	; 2
 b86:	d9 df       	rcall	.-78     	; 0xb3a <add_permission_hex>
	add_permission_hex("0201", OEM_ROLE);
 b88:	61 e0       	ldi	r22, 0x01	; 1
 b8a:	8d ee       	ldi	r24, 0xED	; 237
 b8c:	92 e0       	ldi	r25, 0x02	; 2
 b8e:	d5 df       	rcall	.-86     	; 0xb3a <add_permission_hex>
	add_permission_hex("0201", POLICEMAN_ROLE);
 b90:	62 e0       	ldi	r22, 0x02	; 2
 b92:	8d ee       	ldi	r24, 0xED	; 237
 b94:	92 e0       	ldi	r25, 0x02	; 2
 b96:	d1 df       	rcall	.-94     	; 0xb3a <add_permission_hex>
	add_permission_hex("0201", REPAIRMAN_ROLE);
 b98:	63 e0       	ldi	r22, 0x03	; 3
 b9a:	8d ee       	ldi	r24, 0xED	; 237
 b9c:	92 e0       	ldi	r25, 0x02	; 2
 b9e:	cd df       	rcall	.-102    	; 0xb3a <add_permission_hex>
	add_permission_hex("0201", OWNER_ROLE);
 ba0:	64 e0       	ldi	r22, 0x04	; 4
 ba2:	8d ee       	ldi	r24, 0xED	; 237
 ba4:	92 e0       	ldi	r25, 0x02	; 2
 ba6:	c9 df       	rcall	.-110    	; 0xb3a <add_permission_hex>
	add_entry_hex("0402");
 ba8:	82 ef       	ldi	r24, 0xF2	; 242
 baa:	92 e0       	ldi	r25, 0x02	; 2
 bac:	3d df       	rcall	.-390    	; 0xa28 <add_entry_hex>
	add_permission_hex("0402", ADMIN_ROLE);
 bae:	60 e0       	ldi	r22, 0x00	; 0
 bb0:	82 ef       	ldi	r24, 0xF2	; 242
 bb2:	92 e0       	ldi	r25, 0x02	; 2
 bb4:	c2 df       	rcall	.-124    	; 0xb3a <add_permission_hex>
	add_permission_hex("0402", OEM_ROLE);
 bb6:	61 e0       	ldi	r22, 0x01	; 1
 bb8:	82 ef       	ldi	r24, 0xF2	; 242
 bba:	92 e0       	ldi	r25, 0x02	; 2
 bbc:	be df       	rcall	.-132    	; 0xb3a <add_permission_hex>
	add_permission_hex("0402", REPAIRMAN_ROLE);
 bbe:	63 e0       	ldi	r22, 0x03	; 3
 bc0:	82 ef       	ldi	r24, 0xF2	; 242
 bc2:	92 e0       	ldi	r25, 0x02	; 2
 bc4:	ba df       	rcall	.-140    	; 0xb3a <add_permission_hex>
	add_entry_hex("0000");
 bc6:	87 ef       	ldi	r24, 0xF7	; 247
 bc8:	92 e0       	ldi	r25, 0x02	; 2
 bca:	2e df       	rcall	.-420    	; 0xa28 <add_entry_hex>
 bcc:	60 e0       	ldi	r22, 0x00	; 0
	add_permission_hex("0000", ADMIN_ROLE);
 bce:	87 ef       	ldi	r24, 0xF7	; 247
 bd0:	92 e0       	ldi	r25, 0x02	; 2
 bd2:	b3 df       	rcall	.-154    	; 0xb3a <add_permission_hex>
 bd4:	61 e0       	ldi	r22, 0x01	; 1
 bd6:	87 ef       	ldi	r24, 0xF7	; 247
	add_permission_hex("0000", OEM_ROLE);
 bd8:	92 e0       	ldi	r25, 0x02	; 2
 bda:	af cf       	rjmp	.-162    	; 0xb3a <add_permission_hex>
 bdc:	08 95       	ret

00000bde <uart_init>:
#include "uart_f.h"
#include "types.h"


void uart_init(){
	UBRR0H = (BAUD_PRESCALE >> 8); // Load upper 8-bits of the baud rate value into the high byte of the UBRR register
 bde:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
	UBRR0L = BAUD_PRESCALE; // Load lower 8-bits of the baud rate value into the low byte of the UBRR register
 be2:	83 e3       	ldi	r24, 0x33	; 51
 be4:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
	UCSR0C = (0<<UMSEL0) | (0<<UPM0) | (1<<USBS0) | (3<<UCSZ0);
 be8:	8e e0       	ldi	r24, 0x0E	; 14
 bea:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>
	UCSR0B = (1<<RXEN0) | (1<<TXEN0);
 bee:	88 e1       	ldi	r24, 0x18	; 24
 bf0:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
 bf4:	08 95       	ret

00000bf6 <uart_puts>:
}

void uart_puts(char* s){
 bf6:	0f 93       	push	r16
 bf8:	1f 93       	push	r17
 bfa:	cf 93       	push	r28
 bfc:	df 93       	push	r29
 bfe:	1f 92       	push	r1
 c00:	cd b7       	in	r28, 0x3d	; 61
 c02:	de b7       	in	r29, 0x3e	; 62
 c04:	bc 01       	movw	r22, r24
	volatile uint8_t i;
	int len = strlen(s);
 c06:	fc 01       	movw	r30, r24
 c08:	01 90       	ld	r0, Z+
 c0a:	00 20       	and	r0, r0
 c0c:	e9 f7       	brne	.-6      	; 0xc08 <uart_puts+0x12>
 c0e:	31 97       	sbiw	r30, 0x01	; 1
 c10:	af 01       	movw	r20, r30
 c12:	48 1b       	sub	r20, r24
 c14:	59 0b       	sbc	r21, r25
	for (i = 0; i < len; i++){
 c16:	19 82       	std	Y+1, r1	; 0x01
 c18:	89 81       	ldd	r24, Y+1	; 0x01
 c1a:	90 e0       	ldi	r25, 0x00	; 0
 c1c:	84 17       	cp	r24, r20
 c1e:	95 07       	cpc	r25, r21
 c20:	b4 f4       	brge	.+44     	; 0xc4e <uart_puts+0x58>
		while(!( UCSR0A & 0X20));
 c22:	e0 ec       	ldi	r30, 0xC0	; 192
 c24:	f0 e0       	ldi	r31, 0x00	; 0
		UDR0=s[i];
 c26:	06 ec       	ldi	r16, 0xC6	; 198
 c28:	10 e0       	ldi	r17, 0x00	; 0

void uart_puts(char* s){
	volatile uint8_t i;
	int len = strlen(s);
	for (i = 0; i < len; i++){
		while(!( UCSR0A & 0X20));
 c2a:	90 81       	ld	r25, Z
 c2c:	95 ff       	sbrs	r25, 5
 c2e:	fd cf       	rjmp	.-6      	; 0xc2a <uart_puts+0x34>
		UDR0=s[i];
 c30:	89 81       	ldd	r24, Y+1	; 0x01
 c32:	db 01       	movw	r26, r22
 c34:	a8 0f       	add	r26, r24
 c36:	b1 1d       	adc	r27, r1
 c38:	9c 91       	ld	r25, X
 c3a:	d8 01       	movw	r26, r16
 c3c:	9c 93       	st	X, r25
}

void uart_puts(char* s){
	volatile uint8_t i;
	int len = strlen(s);
	for (i = 0; i < len; i++){
 c3e:	99 81       	ldd	r25, Y+1	; 0x01
 c40:	9f 5f       	subi	r25, 0xFF	; 255
 c42:	99 83       	std	Y+1, r25	; 0x01
 c44:	29 81       	ldd	r18, Y+1	; 0x01
 c46:	30 e0       	ldi	r19, 0x00	; 0
 c48:	24 17       	cp	r18, r20
 c4a:	35 07       	cpc	r19, r21
 c4c:	74 f3       	brlt	.-36     	; 0xc2a <uart_puts+0x34>
		while(!( UCSR0A & 0X20));
		UDR0=s[i];
	}
	while(!( UCSR0A & 0X20));
 c4e:	e0 ec       	ldi	r30, 0xC0	; 192
 c50:	f0 e0       	ldi	r31, 0x00	; 0
 c52:	80 81       	ld	r24, Z
 c54:	85 ff       	sbrs	r24, 5
 c56:	fd cf       	rjmp	.-6      	; 0xc52 <uart_puts+0x5c>
	UDR0 = 13;
 c58:	8d e0       	ldi	r24, 0x0D	; 13
 c5a:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
	while(!( UCSR0A & 0X20));
 c5e:	e0 ec       	ldi	r30, 0xC0	; 192
 c60:	f0 e0       	ldi	r31, 0x00	; 0
 c62:	80 81       	ld	r24, Z
 c64:	85 ff       	sbrs	r24, 5
 c66:	fd cf       	rjmp	.-6      	; 0xc62 <uart_puts+0x6c>
	UDR0 = 10;
 c68:	8a e0       	ldi	r24, 0x0A	; 10
 c6a:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
}
 c6e:	0f 90       	pop	r0
 c70:	df 91       	pop	r29
 c72:	cf 91       	pop	r28
 c74:	1f 91       	pop	r17
 c76:	0f 91       	pop	r16
 c78:	08 95       	ret

00000c7a <malloc>:
 c7a:	0f 93       	push	r16
 c7c:	1f 93       	push	r17
 c7e:	cf 93       	push	r28
 c80:	df 93       	push	r29
 c82:	82 30       	cpi	r24, 0x02	; 2
 c84:	91 05       	cpc	r25, r1
 c86:	10 f4       	brcc	.+4      	; 0xc8c <malloc+0x12>
 c88:	82 e0       	ldi	r24, 0x02	; 2
 c8a:	90 e0       	ldi	r25, 0x00	; 0
 c8c:	e0 91 35 04 	lds	r30, 0x0435	; 0x800435 <__flp>
 c90:	f0 91 36 04 	lds	r31, 0x0436	; 0x800436 <__flp+0x1>
 c94:	20 e0       	ldi	r18, 0x00	; 0
 c96:	30 e0       	ldi	r19, 0x00	; 0
 c98:	a0 e0       	ldi	r26, 0x00	; 0
 c9a:	b0 e0       	ldi	r27, 0x00	; 0
 c9c:	30 97       	sbiw	r30, 0x00	; 0
 c9e:	19 f1       	breq	.+70     	; 0xce6 <malloc+0x6c>
 ca0:	40 81       	ld	r20, Z
 ca2:	51 81       	ldd	r21, Z+1	; 0x01
 ca4:	02 81       	ldd	r16, Z+2	; 0x02
 ca6:	13 81       	ldd	r17, Z+3	; 0x03
 ca8:	48 17       	cp	r20, r24
 caa:	59 07       	cpc	r21, r25
 cac:	c8 f0       	brcs	.+50     	; 0xce0 <malloc+0x66>
 cae:	84 17       	cp	r24, r20
 cb0:	95 07       	cpc	r25, r21
 cb2:	69 f4       	brne	.+26     	; 0xcce <malloc+0x54>
 cb4:	10 97       	sbiw	r26, 0x00	; 0
 cb6:	31 f0       	breq	.+12     	; 0xcc4 <malloc+0x4a>
 cb8:	12 96       	adiw	r26, 0x02	; 2
 cba:	0c 93       	st	X, r16
 cbc:	12 97       	sbiw	r26, 0x02	; 2
 cbe:	13 96       	adiw	r26, 0x03	; 3
 cc0:	1c 93       	st	X, r17
 cc2:	27 c0       	rjmp	.+78     	; 0xd12 <malloc+0x98>
 cc4:	00 93 35 04 	sts	0x0435, r16	; 0x800435 <__flp>
 cc8:	10 93 36 04 	sts	0x0436, r17	; 0x800436 <__flp+0x1>
 ccc:	22 c0       	rjmp	.+68     	; 0xd12 <malloc+0x98>
 cce:	21 15       	cp	r18, r1
 cd0:	31 05       	cpc	r19, r1
 cd2:	19 f0       	breq	.+6      	; 0xcda <malloc+0x60>
 cd4:	42 17       	cp	r20, r18
 cd6:	53 07       	cpc	r21, r19
 cd8:	18 f4       	brcc	.+6      	; 0xce0 <malloc+0x66>
 cda:	9a 01       	movw	r18, r20
 cdc:	bd 01       	movw	r22, r26
 cde:	ef 01       	movw	r28, r30
 ce0:	df 01       	movw	r26, r30
 ce2:	f8 01       	movw	r30, r16
 ce4:	db cf       	rjmp	.-74     	; 0xc9c <malloc+0x22>
 ce6:	21 15       	cp	r18, r1
 ce8:	31 05       	cpc	r19, r1
 cea:	f9 f0       	breq	.+62     	; 0xd2a <malloc+0xb0>
 cec:	28 1b       	sub	r18, r24
 cee:	39 0b       	sbc	r19, r25
 cf0:	24 30       	cpi	r18, 0x04	; 4
 cf2:	31 05       	cpc	r19, r1
 cf4:	80 f4       	brcc	.+32     	; 0xd16 <malloc+0x9c>
 cf6:	8a 81       	ldd	r24, Y+2	; 0x02
 cf8:	9b 81       	ldd	r25, Y+3	; 0x03
 cfa:	61 15       	cp	r22, r1
 cfc:	71 05       	cpc	r23, r1
 cfe:	21 f0       	breq	.+8      	; 0xd08 <malloc+0x8e>
 d00:	fb 01       	movw	r30, r22
 d02:	93 83       	std	Z+3, r25	; 0x03
 d04:	82 83       	std	Z+2, r24	; 0x02
 d06:	04 c0       	rjmp	.+8      	; 0xd10 <malloc+0x96>
 d08:	90 93 36 04 	sts	0x0436, r25	; 0x800436 <__flp+0x1>
 d0c:	80 93 35 04 	sts	0x0435, r24	; 0x800435 <__flp>
 d10:	fe 01       	movw	r30, r28
 d12:	32 96       	adiw	r30, 0x02	; 2
 d14:	44 c0       	rjmp	.+136    	; 0xd9e <malloc+0x124>
 d16:	fe 01       	movw	r30, r28
 d18:	e2 0f       	add	r30, r18
 d1a:	f3 1f       	adc	r31, r19
 d1c:	81 93       	st	Z+, r24
 d1e:	91 93       	st	Z+, r25
 d20:	22 50       	subi	r18, 0x02	; 2
 d22:	31 09       	sbc	r19, r1
 d24:	39 83       	std	Y+1, r19	; 0x01
 d26:	28 83       	st	Y, r18
 d28:	3a c0       	rjmp	.+116    	; 0xd9e <malloc+0x124>
 d2a:	20 91 33 04 	lds	r18, 0x0433	; 0x800433 <__brkval>
 d2e:	30 91 34 04 	lds	r19, 0x0434	; 0x800434 <__brkval+0x1>
 d32:	23 2b       	or	r18, r19
 d34:	41 f4       	brne	.+16     	; 0xd46 <malloc+0xcc>
 d36:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__malloc_heap_start>
 d3a:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <__malloc_heap_start+0x1>
 d3e:	30 93 34 04 	sts	0x0434, r19	; 0x800434 <__brkval+0x1>
 d42:	20 93 33 04 	sts	0x0433, r18	; 0x800433 <__brkval>
 d46:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__data_start>
 d4a:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__data_start+0x1>
 d4e:	21 15       	cp	r18, r1
 d50:	31 05       	cpc	r19, r1
 d52:	41 f4       	brne	.+16     	; 0xd64 <malloc+0xea>
 d54:	2d b7       	in	r18, 0x3d	; 61
 d56:	3e b7       	in	r19, 0x3e	; 62
 d58:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
 d5c:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
 d60:	24 1b       	sub	r18, r20
 d62:	35 0b       	sbc	r19, r21
 d64:	e0 91 33 04 	lds	r30, 0x0433	; 0x800433 <__brkval>
 d68:	f0 91 34 04 	lds	r31, 0x0434	; 0x800434 <__brkval+0x1>
 d6c:	e2 17       	cp	r30, r18
 d6e:	f3 07       	cpc	r31, r19
 d70:	a0 f4       	brcc	.+40     	; 0xd9a <malloc+0x120>
 d72:	2e 1b       	sub	r18, r30
 d74:	3f 0b       	sbc	r19, r31
 d76:	28 17       	cp	r18, r24
 d78:	39 07       	cpc	r19, r25
 d7a:	78 f0       	brcs	.+30     	; 0xd9a <malloc+0x120>
 d7c:	ac 01       	movw	r20, r24
 d7e:	4e 5f       	subi	r20, 0xFE	; 254
 d80:	5f 4f       	sbci	r21, 0xFF	; 255
 d82:	24 17       	cp	r18, r20
 d84:	35 07       	cpc	r19, r21
 d86:	48 f0       	brcs	.+18     	; 0xd9a <malloc+0x120>
 d88:	4e 0f       	add	r20, r30
 d8a:	5f 1f       	adc	r21, r31
 d8c:	50 93 34 04 	sts	0x0434, r21	; 0x800434 <__brkval+0x1>
 d90:	40 93 33 04 	sts	0x0433, r20	; 0x800433 <__brkval>
 d94:	81 93       	st	Z+, r24
 d96:	91 93       	st	Z+, r25
 d98:	02 c0       	rjmp	.+4      	; 0xd9e <malloc+0x124>
 d9a:	e0 e0       	ldi	r30, 0x00	; 0
 d9c:	f0 e0       	ldi	r31, 0x00	; 0
 d9e:	cf 01       	movw	r24, r30
 da0:	df 91       	pop	r29
 da2:	cf 91       	pop	r28
 da4:	1f 91       	pop	r17
 da6:	0f 91       	pop	r16
 da8:	08 95       	ret

00000daa <free>:
 daa:	cf 93       	push	r28
 dac:	df 93       	push	r29
 dae:	00 97       	sbiw	r24, 0x00	; 0
 db0:	09 f4       	brne	.+2      	; 0xdb4 <free+0xa>
 db2:	81 c0       	rjmp	.+258    	; 0xeb6 <free+0x10c>
 db4:	fc 01       	movw	r30, r24
 db6:	32 97       	sbiw	r30, 0x02	; 2
 db8:	13 82       	std	Z+3, r1	; 0x03
 dba:	12 82       	std	Z+2, r1	; 0x02
 dbc:	a0 91 35 04 	lds	r26, 0x0435	; 0x800435 <__flp>
 dc0:	b0 91 36 04 	lds	r27, 0x0436	; 0x800436 <__flp+0x1>
 dc4:	10 97       	sbiw	r26, 0x00	; 0
 dc6:	81 f4       	brne	.+32     	; 0xde8 <free+0x3e>
 dc8:	20 81       	ld	r18, Z
 dca:	31 81       	ldd	r19, Z+1	; 0x01
 dcc:	82 0f       	add	r24, r18
 dce:	93 1f       	adc	r25, r19
 dd0:	20 91 33 04 	lds	r18, 0x0433	; 0x800433 <__brkval>
 dd4:	30 91 34 04 	lds	r19, 0x0434	; 0x800434 <__brkval+0x1>
 dd8:	28 17       	cp	r18, r24
 dda:	39 07       	cpc	r19, r25
 ddc:	51 f5       	brne	.+84     	; 0xe32 <free+0x88>
 dde:	f0 93 34 04 	sts	0x0434, r31	; 0x800434 <__brkval+0x1>
 de2:	e0 93 33 04 	sts	0x0433, r30	; 0x800433 <__brkval>
 de6:	67 c0       	rjmp	.+206    	; 0xeb6 <free+0x10c>
 de8:	ed 01       	movw	r28, r26
 dea:	20 e0       	ldi	r18, 0x00	; 0
 dec:	30 e0       	ldi	r19, 0x00	; 0
 dee:	ce 17       	cp	r28, r30
 df0:	df 07       	cpc	r29, r31
 df2:	40 f4       	brcc	.+16     	; 0xe04 <free+0x5a>
 df4:	4a 81       	ldd	r20, Y+2	; 0x02
 df6:	5b 81       	ldd	r21, Y+3	; 0x03
 df8:	9e 01       	movw	r18, r28
 dfa:	41 15       	cp	r20, r1
 dfc:	51 05       	cpc	r21, r1
 dfe:	f1 f0       	breq	.+60     	; 0xe3c <free+0x92>
 e00:	ea 01       	movw	r28, r20
 e02:	f5 cf       	rjmp	.-22     	; 0xdee <free+0x44>
 e04:	d3 83       	std	Z+3, r29	; 0x03
 e06:	c2 83       	std	Z+2, r28	; 0x02
 e08:	40 81       	ld	r20, Z
 e0a:	51 81       	ldd	r21, Z+1	; 0x01
 e0c:	84 0f       	add	r24, r20
 e0e:	95 1f       	adc	r25, r21
 e10:	c8 17       	cp	r28, r24
 e12:	d9 07       	cpc	r29, r25
 e14:	59 f4       	brne	.+22     	; 0xe2c <free+0x82>
 e16:	88 81       	ld	r24, Y
 e18:	99 81       	ldd	r25, Y+1	; 0x01
 e1a:	84 0f       	add	r24, r20
 e1c:	95 1f       	adc	r25, r21
 e1e:	02 96       	adiw	r24, 0x02	; 2
 e20:	91 83       	std	Z+1, r25	; 0x01
 e22:	80 83       	st	Z, r24
 e24:	8a 81       	ldd	r24, Y+2	; 0x02
 e26:	9b 81       	ldd	r25, Y+3	; 0x03
 e28:	93 83       	std	Z+3, r25	; 0x03
 e2a:	82 83       	std	Z+2, r24	; 0x02
 e2c:	21 15       	cp	r18, r1
 e2e:	31 05       	cpc	r19, r1
 e30:	29 f4       	brne	.+10     	; 0xe3c <free+0x92>
 e32:	f0 93 36 04 	sts	0x0436, r31	; 0x800436 <__flp+0x1>
 e36:	e0 93 35 04 	sts	0x0435, r30	; 0x800435 <__flp>
 e3a:	3d c0       	rjmp	.+122    	; 0xeb6 <free+0x10c>
 e3c:	e9 01       	movw	r28, r18
 e3e:	fb 83       	std	Y+3, r31	; 0x03
 e40:	ea 83       	std	Y+2, r30	; 0x02
 e42:	49 91       	ld	r20, Y+
 e44:	59 91       	ld	r21, Y+
 e46:	c4 0f       	add	r28, r20
 e48:	d5 1f       	adc	r29, r21
 e4a:	ec 17       	cp	r30, r28
 e4c:	fd 07       	cpc	r31, r29
 e4e:	61 f4       	brne	.+24     	; 0xe68 <free+0xbe>
 e50:	80 81       	ld	r24, Z
 e52:	91 81       	ldd	r25, Z+1	; 0x01
 e54:	84 0f       	add	r24, r20
 e56:	95 1f       	adc	r25, r21
 e58:	02 96       	adiw	r24, 0x02	; 2
 e5a:	e9 01       	movw	r28, r18
 e5c:	99 83       	std	Y+1, r25	; 0x01
 e5e:	88 83       	st	Y, r24
 e60:	82 81       	ldd	r24, Z+2	; 0x02
 e62:	93 81       	ldd	r25, Z+3	; 0x03
 e64:	9b 83       	std	Y+3, r25	; 0x03
 e66:	8a 83       	std	Y+2, r24	; 0x02
 e68:	e0 e0       	ldi	r30, 0x00	; 0
 e6a:	f0 e0       	ldi	r31, 0x00	; 0
 e6c:	12 96       	adiw	r26, 0x02	; 2
 e6e:	8d 91       	ld	r24, X+
 e70:	9c 91       	ld	r25, X
 e72:	13 97       	sbiw	r26, 0x03	; 3
 e74:	00 97       	sbiw	r24, 0x00	; 0
 e76:	19 f0       	breq	.+6      	; 0xe7e <free+0xd4>
 e78:	fd 01       	movw	r30, r26
 e7a:	dc 01       	movw	r26, r24
 e7c:	f7 cf       	rjmp	.-18     	; 0xe6c <free+0xc2>
 e7e:	8d 91       	ld	r24, X+
 e80:	9c 91       	ld	r25, X
 e82:	11 97       	sbiw	r26, 0x01	; 1
 e84:	9d 01       	movw	r18, r26
 e86:	2e 5f       	subi	r18, 0xFE	; 254
 e88:	3f 4f       	sbci	r19, 0xFF	; 255
 e8a:	82 0f       	add	r24, r18
 e8c:	93 1f       	adc	r25, r19
 e8e:	20 91 33 04 	lds	r18, 0x0433	; 0x800433 <__brkval>
 e92:	30 91 34 04 	lds	r19, 0x0434	; 0x800434 <__brkval+0x1>
 e96:	28 17       	cp	r18, r24
 e98:	39 07       	cpc	r19, r25
 e9a:	69 f4       	brne	.+26     	; 0xeb6 <free+0x10c>
 e9c:	30 97       	sbiw	r30, 0x00	; 0
 e9e:	29 f4       	brne	.+10     	; 0xeaa <free+0x100>
 ea0:	10 92 36 04 	sts	0x0436, r1	; 0x800436 <__flp+0x1>
 ea4:	10 92 35 04 	sts	0x0435, r1	; 0x800435 <__flp>
 ea8:	02 c0       	rjmp	.+4      	; 0xeae <free+0x104>
 eaa:	13 82       	std	Z+3, r1	; 0x03
 eac:	12 82       	std	Z+2, r1	; 0x02
 eae:	b0 93 34 04 	sts	0x0434, r27	; 0x800434 <__brkval+0x1>
 eb2:	a0 93 33 04 	sts	0x0433, r26	; 0x800433 <__brkval>
 eb6:	df 91       	pop	r29
 eb8:	cf 91       	pop	r28
 eba:	08 95       	ret

00000ebc <memcmp>:
 ebc:	fb 01       	movw	r30, r22
 ebe:	dc 01       	movw	r26, r24
 ec0:	04 c0       	rjmp	.+8      	; 0xeca <memcmp+0xe>
 ec2:	8d 91       	ld	r24, X+
 ec4:	01 90       	ld	r0, Z+
 ec6:	80 19       	sub	r24, r0
 ec8:	21 f4       	brne	.+8      	; 0xed2 <memcmp+0x16>
 eca:	41 50       	subi	r20, 0x01	; 1
 ecc:	50 40       	sbci	r21, 0x00	; 0
 ece:	c8 f7       	brcc	.-14     	; 0xec2 <memcmp+0x6>
 ed0:	88 1b       	sub	r24, r24
 ed2:	99 0b       	sbc	r25, r25
 ed4:	08 95       	ret

00000ed6 <memcpy>:
 ed6:	fb 01       	movw	r30, r22
 ed8:	dc 01       	movw	r26, r24
 eda:	02 c0       	rjmp	.+4      	; 0xee0 <memcpy+0xa>
 edc:	01 90       	ld	r0, Z+
 ede:	0d 92       	st	X+, r0
 ee0:	41 50       	subi	r20, 0x01	; 1
 ee2:	50 40       	sbci	r21, 0x00	; 0
 ee4:	d8 f7       	brcc	.-10     	; 0xedc <memcpy+0x6>
 ee6:	08 95       	ret

00000ee8 <memset>:
 ee8:	dc 01       	movw	r26, r24
 eea:	01 c0       	rjmp	.+2      	; 0xeee <memset+0x6>
 eec:	6d 93       	st	X+, r22
 eee:	41 50       	subi	r20, 0x01	; 1
 ef0:	50 40       	sbci	r21, 0x00	; 0
 ef2:	e0 f7       	brcc	.-8      	; 0xeec <memset+0x4>
 ef4:	08 95       	ret

00000ef6 <_exit>:
 ef6:	f8 94       	cli

00000ef8 <__stop_program>:
 ef8:	ff cf       	rjmp	.-2      	; 0xef8 <__stop_program>
