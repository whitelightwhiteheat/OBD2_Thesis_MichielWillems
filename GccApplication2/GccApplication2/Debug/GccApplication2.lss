
GccApplication2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000003e  00800100  00000160  000001d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000160  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000212  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000244  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000028  00000000  00000000  00000284  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000b34  00000000  00000000  000002ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000a6c  00000000  00000000  00000de0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000292  00000000  00000000  0000184c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000050  00000000  00000000  00001ae0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000050a  00000000  00000000  00001b30  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000000d1  00000000  00000000  0000203a  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000018  00000000  00000000  0000210b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	49 c0       	rjmp	.+146    	; 0x94 <__ctors_end>
   2:	00 00       	nop
   4:	5c c0       	rjmp	.+184    	; 0xbe <__bad_interrupt>
   6:	00 00       	nop
   8:	5a c0       	rjmp	.+180    	; 0xbe <__bad_interrupt>
   a:	00 00       	nop
   c:	58 c0       	rjmp	.+176    	; 0xbe <__bad_interrupt>
   e:	00 00       	nop
  10:	56 c0       	rjmp	.+172    	; 0xbe <__bad_interrupt>
  12:	00 00       	nop
  14:	54 c0       	rjmp	.+168    	; 0xbe <__bad_interrupt>
  16:	00 00       	nop
  18:	52 c0       	rjmp	.+164    	; 0xbe <__bad_interrupt>
  1a:	00 00       	nop
  1c:	50 c0       	rjmp	.+160    	; 0xbe <__bad_interrupt>
  1e:	00 00       	nop
  20:	4e c0       	rjmp	.+156    	; 0xbe <__bad_interrupt>
  22:	00 00       	nop
  24:	4c c0       	rjmp	.+152    	; 0xbe <__bad_interrupt>
  26:	00 00       	nop
  28:	4a c0       	rjmp	.+148    	; 0xbe <__bad_interrupt>
  2a:	00 00       	nop
  2c:	48 c0       	rjmp	.+144    	; 0xbe <__bad_interrupt>
  2e:	00 00       	nop
  30:	46 c0       	rjmp	.+140    	; 0xbe <__bad_interrupt>
  32:	00 00       	nop
  34:	44 c0       	rjmp	.+136    	; 0xbe <__bad_interrupt>
  36:	00 00       	nop
  38:	42 c0       	rjmp	.+132    	; 0xbe <__bad_interrupt>
  3a:	00 00       	nop
  3c:	40 c0       	rjmp	.+128    	; 0xbe <__bad_interrupt>
  3e:	00 00       	nop
  40:	3e c0       	rjmp	.+124    	; 0xbe <__bad_interrupt>
  42:	00 00       	nop
  44:	3c c0       	rjmp	.+120    	; 0xbe <__bad_interrupt>
  46:	00 00       	nop
  48:	3a c0       	rjmp	.+116    	; 0xbe <__bad_interrupt>
  4a:	00 00       	nop
  4c:	38 c0       	rjmp	.+112    	; 0xbe <__bad_interrupt>
  4e:	00 00       	nop
  50:	36 c0       	rjmp	.+108    	; 0xbe <__bad_interrupt>
  52:	00 00       	nop
  54:	34 c0       	rjmp	.+104    	; 0xbe <__bad_interrupt>
  56:	00 00       	nop
  58:	32 c0       	rjmp	.+100    	; 0xbe <__bad_interrupt>
  5a:	00 00       	nop
  5c:	30 c0       	rjmp	.+96     	; 0xbe <__bad_interrupt>
  5e:	00 00       	nop
  60:	2e c0       	rjmp	.+92     	; 0xbe <__bad_interrupt>
  62:	00 00       	nop
  64:	2c c0       	rjmp	.+88     	; 0xbe <__bad_interrupt>
  66:	00 00       	nop
  68:	2a c0       	rjmp	.+84     	; 0xbe <__bad_interrupt>
  6a:	00 00       	nop
  6c:	28 c0       	rjmp	.+80     	; 0xbe <__bad_interrupt>
  6e:	00 00       	nop
  70:	26 c0       	rjmp	.+76     	; 0xbe <__bad_interrupt>
  72:	00 00       	nop
  74:	24 c0       	rjmp	.+72     	; 0xbe <__bad_interrupt>
  76:	00 00       	nop
  78:	22 c0       	rjmp	.+68     	; 0xbe <__bad_interrupt>
  7a:	00 00       	nop
  7c:	20 c0       	rjmp	.+64     	; 0xbe <__bad_interrupt>
  7e:	00 00       	nop
  80:	1e c0       	rjmp	.+60     	; 0xbe <__bad_interrupt>
  82:	00 00       	nop
  84:	1c c0       	rjmp	.+56     	; 0xbe <__bad_interrupt>
  86:	00 00       	nop
  88:	1a c0       	rjmp	.+52     	; 0xbe <__bad_interrupt>
  8a:	00 00       	nop
  8c:	18 c0       	rjmp	.+48     	; 0xbe <__bad_interrupt>
  8e:	00 00       	nop
  90:	16 c0       	rjmp	.+44     	; 0xbe <__bad_interrupt>
	...

00000094 <__ctors_end>:
  94:	11 24       	eor	r1, r1
  96:	1f be       	out	0x3f, r1	; 63
  98:	cf ef       	ldi	r28, 0xFF	; 255
  9a:	d0 e1       	ldi	r29, 0x10	; 16
  9c:	de bf       	out	0x3e, r29	; 62
  9e:	cd bf       	out	0x3d, r28	; 61

000000a0 <__do_copy_data>:
  a0:	11 e0       	ldi	r17, 0x01	; 1
  a2:	a0 e0       	ldi	r26, 0x00	; 0
  a4:	b1 e0       	ldi	r27, 0x01	; 1
  a6:	e0 e6       	ldi	r30, 0x60	; 96
  a8:	f1 e0       	ldi	r31, 0x01	; 1
  aa:	00 e0       	ldi	r16, 0x00	; 0
  ac:	0b bf       	out	0x3b, r16	; 59
  ae:	02 c0       	rjmp	.+4      	; 0xb4 <__do_copy_data+0x14>
  b0:	07 90       	elpm	r0, Z+
  b2:	0d 92       	st	X+, r0
  b4:	ae 33       	cpi	r26, 0x3E	; 62
  b6:	b1 07       	cpc	r27, r17
  b8:	d9 f7       	brne	.-10     	; 0xb0 <__do_copy_data+0x10>
  ba:	24 d0       	rcall	.+72     	; 0x104 <main>
  bc:	4f c0       	rjmp	.+158    	; 0x15c <_exit>

000000be <__bad_interrupt>:
  be:	a0 cf       	rjmp	.-192    	; 0x0 <__vectors>

000000c0 <uart_puts>:
#include <string.h>
#define USART_BAUDRATE 9600
#define F_CPU 8000000L
#define BAUD_PRESCALE (((F_CPU / (USART_BAUDRATE * 16UL))) - 1)

void uart_puts(char* s){
  c0:	cf 93       	push	r28
  c2:	df 93       	push	r29
  c4:	ec 01       	movw	r28, r24
  c6:	ac 01       	movw	r20, r24
	int i;
	for (i = 0; i < strlen(s); i++){
  c8:	20 e0       	ldi	r18, 0x00	; 0
  ca:	30 e0       	ldi	r19, 0x00	; 0
		while(!( UCSR0A & 0X20));
  cc:	e0 ec       	ldi	r30, 0xC0	; 192
  ce:	f0 e0       	ldi	r31, 0x00	; 0
		UDR0=s[i];
  d0:	66 ec       	ldi	r22, 0xC6	; 198
  d2:	70 e0       	ldi	r23, 0x00	; 0
#define F_CPU 8000000L
#define BAUD_PRESCALE (((F_CPU / (USART_BAUDRATE * 16UL))) - 1)

void uart_puts(char* s){
	int i;
	for (i = 0; i < strlen(s); i++){
  d4:	0a c0       	rjmp	.+20     	; 0xea <uart_puts+0x2a>
		while(!( UCSR0A & 0X20));
  d6:	90 81       	ld	r25, Z
  d8:	95 ff       	sbrs	r25, 5
  da:	fd cf       	rjmp	.-6      	; 0xd6 <uart_puts+0x16>
		UDR0=s[i];
  dc:	da 01       	movw	r26, r20
  de:	8d 91       	ld	r24, X+
  e0:	ad 01       	movw	r20, r26
  e2:	db 01       	movw	r26, r22
  e4:	8c 93       	st	X, r24
#define F_CPU 8000000L
#define BAUD_PRESCALE (((F_CPU / (USART_BAUDRATE * 16UL))) - 1)

void uart_puts(char* s){
	int i;
	for (i = 0; i < strlen(s); i++){
  e6:	2f 5f       	subi	r18, 0xFF	; 255
  e8:	3f 4f       	sbci	r19, 0xFF	; 255
  ea:	de 01       	movw	r26, r28
  ec:	0d 90       	ld	r0, X+
  ee:	00 20       	and	r0, r0
  f0:	e9 f7       	brne	.-6      	; 0xec <uart_puts+0x2c>
  f2:	11 97       	sbiw	r26, 0x01	; 1
  f4:	ac 1b       	sub	r26, r28
  f6:	bd 0b       	sbc	r27, r29
  f8:	2a 17       	cp	r18, r26
  fa:	3b 07       	cpc	r19, r27
  fc:	60 f3       	brcs	.-40     	; 0xd6 <uart_puts+0x16>
		while(!( UCSR0A & 0X20));
		UDR0=s[i];
	}	
}
  fe:	df 91       	pop	r29
 100:	cf 91       	pop	r28
 102:	08 95       	ret

00000104 <main>:

 int main()
 {
 104:	cf 93       	push	r28
 106:	df 93       	push	r29
 108:	cd b7       	in	r28, 0x3d	; 61
 10a:	de b7       	in	r29, 0x3e	; 62
 10c:	ed 97       	sbiw	r28, 0x3d	; 61
 10e:	0f b6       	in	r0, 0x3f	; 63
 110:	f8 94       	cli
 112:	de bf       	out	0x3e, r29	; 62
 114:	0f be       	out	0x3f, r0	; 63
 116:	cd bf       	out	0x3d, r28	; 61

	 UBRR0H = (BAUD_PRESCALE >> 8); // Load upper 8-bits of the baud rate value into the high byte of the UBRR register
 118:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
	 UBRR0L = BAUD_PRESCALE; // Load lower 8-bits of the baud rate value into the low byte of the UBRR register
 11c:	83 e3       	ldi	r24, 0x33	; 51
 11e:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
	 UCSR0C=(0<<UMSEL0) | (0<<UPM0) | (1<<USBS0) | (3<<UCSZ0);
 122:	8e e0       	ldi	r24, 0x0E	; 14
 124:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>
	 UCSR0B=(1<<RXEN0) | (1<<TXEN0);
 128:	88 e1       	ldi	r24, 0x18	; 24
 12a:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
	 
	 char target[] = "This is a long test designed to show the limits of my board.";
 12e:	8d e3       	ldi	r24, 0x3D	; 61
 130:	e0 e0       	ldi	r30, 0x00	; 0
 132:	f1 e0       	ldi	r31, 0x01	; 1
 134:	de 01       	movw	r26, r28
 136:	11 96       	adiw	r26, 0x01	; 1
 138:	01 90       	ld	r0, Z+
 13a:	0d 92       	st	X+, r0
 13c:	8a 95       	dec	r24
 13e:	e1 f7       	brne	.-8      	; 0x138 <main+0x34>
	 uart_puts(target);
 140:	ce 01       	movw	r24, r28
 142:	01 96       	adiw	r24, 0x01	; 1
 144:	bd df       	rcall	.-134    	; 0xc0 <uart_puts>
 }
 146:	80 e0       	ldi	r24, 0x00	; 0
 148:	90 e0       	ldi	r25, 0x00	; 0
 14a:	ed 96       	adiw	r28, 0x3d	; 61
 14c:	0f b6       	in	r0, 0x3f	; 63
 14e:	f8 94       	cli
 150:	de bf       	out	0x3e, r29	; 62
 152:	0f be       	out	0x3f, r0	; 63
 154:	cd bf       	out	0x3d, r28	; 61
 156:	df 91       	pop	r29
 158:	cf 91       	pop	r28
 15a:	08 95       	ret

0000015c <_exit>:
 15c:	f8 94       	cli

0000015e <__stop_program>:
 15e:	ff cf       	rjmp	.-2      	; 0x15e <__stop_program>
