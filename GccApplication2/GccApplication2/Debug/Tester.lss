
Tester.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000010  00800100  00000246  000002ba  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000246  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000002ca  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000002fc  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000040  00000000  00000000  0000033c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000bda  00000000  00000000  0000037c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000abe  00000000  00000000  00000f56  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000041c  00000000  00000000  00001a14  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  0000008c  00000000  00000000  00001e30  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000530  00000000  00000000  00001ebc  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000154  00000000  00000000  000023ec  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000030  00000000  00000000  00002540  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	49 c0       	rjmp	.+146    	; 0x94 <__ctors_end>
   2:	00 00       	nop
   4:	5c c0       	rjmp	.+184    	; 0xbe <__bad_interrupt>
   6:	00 00       	nop
   8:	5a c0       	rjmp	.+180    	; 0xbe <__bad_interrupt>
   a:	00 00       	nop
   c:	58 c0       	rjmp	.+176    	; 0xbe <__bad_interrupt>
   e:	00 00       	nop
  10:	56 c0       	rjmp	.+172    	; 0xbe <__bad_interrupt>
  12:	00 00       	nop
  14:	54 c0       	rjmp	.+168    	; 0xbe <__bad_interrupt>
  16:	00 00       	nop
  18:	52 c0       	rjmp	.+164    	; 0xbe <__bad_interrupt>
  1a:	00 00       	nop
  1c:	50 c0       	rjmp	.+160    	; 0xbe <__bad_interrupt>
  1e:	00 00       	nop
  20:	4e c0       	rjmp	.+156    	; 0xbe <__bad_interrupt>
  22:	00 00       	nop
  24:	4c c0       	rjmp	.+152    	; 0xbe <__bad_interrupt>
  26:	00 00       	nop
  28:	4a c0       	rjmp	.+148    	; 0xbe <__bad_interrupt>
  2a:	00 00       	nop
  2c:	48 c0       	rjmp	.+144    	; 0xbe <__bad_interrupt>
  2e:	00 00       	nop
  30:	46 c0       	rjmp	.+140    	; 0xbe <__bad_interrupt>
  32:	00 00       	nop
  34:	44 c0       	rjmp	.+136    	; 0xbe <__bad_interrupt>
  36:	00 00       	nop
  38:	42 c0       	rjmp	.+132    	; 0xbe <__bad_interrupt>
  3a:	00 00       	nop
  3c:	40 c0       	rjmp	.+128    	; 0xbe <__bad_interrupt>
  3e:	00 00       	nop
  40:	3e c0       	rjmp	.+124    	; 0xbe <__bad_interrupt>
  42:	00 00       	nop
  44:	3c c0       	rjmp	.+120    	; 0xbe <__bad_interrupt>
  46:	00 00       	nop
  48:	3a c0       	rjmp	.+116    	; 0xbe <__bad_interrupt>
  4a:	00 00       	nop
  4c:	38 c0       	rjmp	.+112    	; 0xbe <__bad_interrupt>
  4e:	00 00       	nop
  50:	36 c0       	rjmp	.+108    	; 0xbe <__bad_interrupt>
  52:	00 00       	nop
  54:	34 c0       	rjmp	.+104    	; 0xbe <__bad_interrupt>
  56:	00 00       	nop
  58:	32 c0       	rjmp	.+100    	; 0xbe <__bad_interrupt>
  5a:	00 00       	nop
  5c:	30 c0       	rjmp	.+96     	; 0xbe <__bad_interrupt>
  5e:	00 00       	nop
  60:	2e c0       	rjmp	.+92     	; 0xbe <__bad_interrupt>
  62:	00 00       	nop
  64:	2c c0       	rjmp	.+88     	; 0xbe <__bad_interrupt>
  66:	00 00       	nop
  68:	2a c0       	rjmp	.+84     	; 0xbe <__bad_interrupt>
  6a:	00 00       	nop
  6c:	28 c0       	rjmp	.+80     	; 0xbe <__bad_interrupt>
  6e:	00 00       	nop
  70:	26 c0       	rjmp	.+76     	; 0xbe <__bad_interrupt>
  72:	00 00       	nop
  74:	24 c0       	rjmp	.+72     	; 0xbe <__bad_interrupt>
  76:	00 00       	nop
  78:	22 c0       	rjmp	.+68     	; 0xbe <__bad_interrupt>
  7a:	00 00       	nop
  7c:	20 c0       	rjmp	.+64     	; 0xbe <__bad_interrupt>
  7e:	00 00       	nop
  80:	1e c0       	rjmp	.+60     	; 0xbe <__bad_interrupt>
  82:	00 00       	nop
  84:	1c c0       	rjmp	.+56     	; 0xbe <__bad_interrupt>
  86:	00 00       	nop
  88:	1a c0       	rjmp	.+52     	; 0xbe <__bad_interrupt>
  8a:	00 00       	nop
  8c:	18 c0       	rjmp	.+48     	; 0xbe <__bad_interrupt>
  8e:	00 00       	nop
  90:	16 c0       	rjmp	.+44     	; 0xbe <__bad_interrupt>
	...

00000094 <__ctors_end>:
  94:	11 24       	eor	r1, r1
  96:	1f be       	out	0x3f, r1	; 63
  98:	cf ef       	ldi	r28, 0xFF	; 255
  9a:	d0 e1       	ldi	r29, 0x10	; 16
  9c:	de bf       	out	0x3e, r29	; 62
  9e:	cd bf       	out	0x3d, r28	; 61

000000a0 <__do_copy_data>:
  a0:	11 e0       	ldi	r17, 0x01	; 1
  a2:	a0 e0       	ldi	r26, 0x00	; 0
  a4:	b1 e0       	ldi	r27, 0x01	; 1
  a6:	e6 e4       	ldi	r30, 0x46	; 70
  a8:	f2 e0       	ldi	r31, 0x02	; 2
  aa:	00 e0       	ldi	r16, 0x00	; 0
  ac:	0b bf       	out	0x3b, r16	; 59
  ae:	02 c0       	rjmp	.+4      	; 0xb4 <__do_copy_data+0x14>
  b0:	07 90       	elpm	r0, Z+
  b2:	0d 92       	st	X+, r0
  b4:	a0 31       	cpi	r26, 0x10	; 16
  b6:	b1 07       	cpc	r27, r17
  b8:	d9 f7       	brne	.-10     	; 0xb0 <__do_copy_data+0x10>
  ba:	9e d0       	rcall	.+316    	; 0x1f8 <main>
  bc:	c2 c0       	rjmp	.+388    	; 0x242 <_exit>

000000be <__bad_interrupt>:
  be:	a0 cf       	rjmp	.-192    	; 0x0 <__vectors>

000000c0 <uart_init>:
#define USART_BAUDRATE 9600
#define F_CPU 8000000L
#define BAUD_PRESCALE (((F_CPU / (USART_BAUDRATE * 16UL))) - 1)

void uart_init(){
	UBRR0H = (BAUD_PRESCALE >> 8); // Load upper 8-bits of the baud rate value into the high byte of the UBRR register
  c0:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
	UBRR0L = BAUD_PRESCALE; // Load lower 8-bits of the baud rate value into the low byte of the UBRR register
  c4:	83 e3       	ldi	r24, 0x33	; 51
  c6:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
	UCSR0C=(0<<UMSEL0) | (0<<UPM0) | (1<<USBS0) | (3<<UCSZ0);
  ca:	8e e0       	ldi	r24, 0x0E	; 14
  cc:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>
	UCSR0B=(1<<RXEN0) | (1<<TXEN0);
  d0:	88 e1       	ldi	r24, 0x18	; 24
  d2:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
  d6:	08 95       	ret

000000d8 <uart_puts>:
}

void uart_puts(char* s){
  d8:	cf 93       	push	r28
  da:	df 93       	push	r29
  dc:	ec 01       	movw	r28, r24
  de:	ac 01       	movw	r20, r24
	int i;
	for (i = 0; i < strlen(s); i++){
  e0:	20 e0       	ldi	r18, 0x00	; 0
  e2:	30 e0       	ldi	r19, 0x00	; 0
		while(!( UCSR0A & 0X20));
  e4:	e0 ec       	ldi	r30, 0xC0	; 192
  e6:	f0 e0       	ldi	r31, 0x00	; 0
		UDR0=s[i];
  e8:	66 ec       	ldi	r22, 0xC6	; 198
  ea:	70 e0       	ldi	r23, 0x00	; 0
	UCSR0B=(1<<RXEN0) | (1<<TXEN0);
}

void uart_puts(char* s){
	int i;
	for (i = 0; i < strlen(s); i++){
  ec:	0a c0       	rjmp	.+20     	; 0x102 <uart_puts+0x2a>
		while(!( UCSR0A & 0X20));
  ee:	90 81       	ld	r25, Z
  f0:	95 ff       	sbrs	r25, 5
  f2:	fd cf       	rjmp	.-6      	; 0xee <uart_puts+0x16>
		UDR0=s[i];
  f4:	da 01       	movw	r26, r20
  f6:	8d 91       	ld	r24, X+
  f8:	ad 01       	movw	r20, r26
  fa:	db 01       	movw	r26, r22
  fc:	8c 93       	st	X, r24
	UCSR0B=(1<<RXEN0) | (1<<TXEN0);
}

void uart_puts(char* s){
	int i;
	for (i = 0; i < strlen(s); i++){
  fe:	2f 5f       	subi	r18, 0xFF	; 255
 100:	3f 4f       	sbci	r19, 0xFF	; 255
 102:	de 01       	movw	r26, r28
 104:	0d 90       	ld	r0, X+
 106:	00 20       	and	r0, r0
 108:	e9 f7       	brne	.-6      	; 0x104 <uart_puts+0x2c>
 10a:	11 97       	sbiw	r26, 0x01	; 1
 10c:	ac 1b       	sub	r26, r28
 10e:	bd 0b       	sbc	r27, r29
 110:	2a 17       	cp	r18, r26
 112:	3b 07       	cpc	r19, r27
 114:	60 f3       	brcs	.-40     	; 0xee <uart_puts+0x16>
		while(!( UCSR0A & 0X20));
		UDR0=s[i];
	}	
}
 116:	df 91       	pop	r29
 118:	cf 91       	pop	r28
 11a:	08 95       	ret

0000011c <CAN_INIT>:

void CAN_INIT(void){
 11c:	cf 93       	push	r28
 11e:	df 93       	push	r29

	cli();
 120:	f8 94       	cli
	// no overload frame request
	// no listening mode
	// no test mode
	// standby mode
	// software reset request
	CANGCON = (1 << SWRES);
 122:	81 e0       	ldi	r24, 0x01	; 1
 124:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
	
	// enable receive interrupt
	// enable general interrupt
	CANGIE = (1 << ENIT) | (1 << ENRX);
 128:	80 ea       	ldi	r24, 0xA0	; 160
 12a:	80 93 db 00 	sts	0x00DB, r24	; 0x8000db <__TEXT_REGION_LENGTH__+0x7e00db>

	// MOb 1 interrupt enable
	// MOb======> Message object
	CANIE2 = (1 << IEMOB1);
 12e:	82 e0       	ldi	r24, 0x02	; 2
 130:	80 93 de 00 	sts	0x00DE, r24	; 0x8000de <__TEXT_REGION_LENGTH__+0x7e00de>

	// MOb 8 to 14 interrupt disable
	CANIE1 = 0x00 ; /*MOb 8~14*/
 134:	10 92 df 00 	sts	0x00DF, r1	; 0x8000df <__TEXT_REGION_LENGTH__+0x7e00df>

	// can general interrupt register
	CANGIT = 0x00;
 138:	10 92 da 00 	sts	0x00DA, r1	; 0x8000da <__TEXT_REGION_LENGTH__+0x7e00da>
 13c:	80 e0       	ldi	r24, 0x00	; 0
	// MOb initialization
	int c;
	for (c=0;c<15;c++)
	{
		
		CANPAGE = c << 4;
 13e:	cd ee       	ldi	r28, 0xED	; 237
 140:	d0 e0       	ldi	r29, 0x00	; 0
		CANCDMOB = 0x00;
 142:	af ee       	ldi	r26, 0xEF	; 239
 144:	b0 e0       	ldi	r27, 0x00	; 0
		CANSTMOB = 0x00;
 146:	ee ee       	ldi	r30, 0xEE	; 238
 148:	f0 e0       	ldi	r31, 0x00	; 0
	// MOb initialization
	int c;
	for (c=0;c<15;c++)
	{
		
		CANPAGE = c << 4;
 14a:	98 2f       	mov	r25, r24
 14c:	92 95       	swap	r25
 14e:	90 7f       	andi	r25, 0xF0	; 240
 150:	98 83       	st	Y, r25
		CANCDMOB = 0x00;
 152:	1c 92       	st	X, r1
		CANSTMOB = 0x00;
 154:	10 82       	st	Z, r1
 156:	8f 5f       	subi	r24, 0xFF	; 255
	// can general interrupt register
	CANGIT = 0x00;

	// MOb initialization
	int c;
	for (c=0;c<15;c++)
 158:	8f 30       	cpi	r24, 0x0F	; 15
 15a:	b9 f7       	brne	.-18     	; 0x14a <CAN_INIT+0x2e>
		
	}

	// CAN bit timing registers
	// set the timing (baud) ? 125 KBaud with 8 Mhz clock
	CANBT1 = 0x06 ;    // Baud Rate Prescaler
 15c:	86 e0       	ldi	r24, 0x06	; 6
 15e:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
	CANBT2 = 0x0c ;    // Re-Synchronization & Propagation
 162:	8c e0       	ldi	r24, 0x0C	; 12
 164:	80 93 e3 00 	sts	0x00E3, r24	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7e00e3>
	CANBT3 = 0x37 ;    // Phase Segments & Sample Point(s)
 168:	87 e3       	ldi	r24, 0x37	; 55
 16a:	80 93 e4 00 	sts	0x00E4, r24	; 0x8000e4 <__TEXT_REGION_LENGTH__+0x7e00e4>
	// CAN Timer Clock Period: 0.500 us
	CANTCON = 0x00 ;
 16e:	10 92 e5 00 	sts	0x00E5, r1	; 0x8000e5 <__TEXT_REGION_LENGTH__+0x7e00e5>

	// enter enable mode
	CANGCON = 0b00000010 ;    // (1 << ENA/STB)
 172:	82 e0       	ldi	r24, 0x02	; 2
 174:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>

	// MOb 1 initialization

	CANPAGE = 0x00;    // (1 << MOBNB0)
 178:	10 92 ed 00 	sts	0x00ED, r1	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7e00ed>
	CANIDT1 = 0x00; // ID = 1000
 17c:	10 92 f3 00 	sts	0x00F3, r1	; 0x8000f3 <__TEXT_REGION_LENGTH__+0x7e00f3>
	CANIDT2 = 0x00;
 180:	10 92 f2 00 	sts	0x00F2, r1	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7e00f2>
	CANIDT3 = 0x00;
 184:	10 92 f1 00 	sts	0x00F1, r1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
	CANIDT4 = 0x00;
 188:	10 92 f0 00 	sts	0x00F0, r1	; 0x8000f0 <__TEXT_REGION_LENGTH__+0x7e00f0>
	CANIDM1 = 0x00;  // no mask
 18c:	10 92 f7 00 	sts	0x00F7, r1	; 0x8000f7 <__TEXT_REGION_LENGTH__+0x7e00f7>
	CANIDM2 = 0x00;
 190:	10 92 f6 00 	sts	0x00F6, r1	; 0x8000f6 <__TEXT_REGION_LENGTH__+0x7e00f6>
	CANIDM3 = 0x00;
 194:	10 92 f5 00 	sts	0x00F5, r1	; 0x8000f5 <__TEXT_REGION_LENGTH__+0x7e00f5>
	CANIDM4 = 0x00;
 198:	10 92 f4 00 	sts	0x00F4, r1	; 0x8000f4 <__TEXT_REGION_LENGTH__+0x7e00f4>

	//CAN standard rev 2.0 A (identifiers length = 11 bits)
	// (1 << CONMOB1) | (1 << DLC3)
	CANCDMOB = 0b10001000; //enable reception and data length code = 8 bytes
 19c:	88 e8       	ldi	r24, 0x88	; 136
 19e:	80 93 ef 00 	sts	0x00EF, r24	; 0x8000ef <__TEXT_REGION_LENGTH__+0x7e00ef>

	sei();
 1a2:	78 94       	sei

}
 1a4:	df 91       	pop	r29
 1a6:	cf 91       	pop	r28
 1a8:	08 95       	ret

000001aa <SendByMOb2>:

	int j;
	
	// If the last MOb2 Tx failed to complete, just skip it since we should not
	// write to MOb2 CANCDMOB with a new command while MOb2 is still busy.
	if ((CANEN2 & (1 << ENMOB2)) != 0) {
 1aa:	80 91 dc 00 	lds	r24, 0x00DC	; 0x8000dc <__TEXT_REGION_LENGTH__+0x7e00dc>
 1ae:	82 fd       	sbrc	r24, 2
 1b0:	22 c0       	rjmp	.+68     	; 0x1f6 <SendByMOb2+0x4c>
		
		return;
	}
	
	CANPAGE = 0b00100000;  // (1 << MOBNB1)
 1b2:	80 e2       	ldi	r24, 0x20	; 32
 1b4:	80 93 ed 00 	sts	0x00ED, r24	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7e00ed>
	CANIDT1 = 0b00101001; // ID = 0x14a
 1b8:	89 e2       	ldi	r24, 0x29	; 41
 1ba:	80 93 f3 00 	sts	0x00F3, r24	; 0x8000f3 <__TEXT_REGION_LENGTH__+0x7e00f3>
	CANIDT2 = 0b01000000;
 1be:	80 e4       	ldi	r24, 0x40	; 64
 1c0:	80 93 f2 00 	sts	0x00F2, r24	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7e00f2>
	CANIDT3 = 0x00;
 1c4:	10 92 f1 00 	sts	0x00F1, r1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
	CANIDT4 = 0x00;
 1c8:	10 92 f0 00 	sts	0x00F0, r1	; 0x8000f0 <__TEXT_REGION_LENGTH__+0x7e00f0>
	CANIDM1 = 0x00;  // no mask
 1cc:	10 92 f7 00 	sts	0x00F7, r1	; 0x8000f7 <__TEXT_REGION_LENGTH__+0x7e00f7>
	CANIDM2 = 0x00;
 1d0:	10 92 f6 00 	sts	0x00F6, r1	; 0x8000f6 <__TEXT_REGION_LENGTH__+0x7e00f6>
	CANIDM3 = 0x00;
 1d4:	10 92 f5 00 	sts	0x00F5, r1	; 0x8000f5 <__TEXT_REGION_LENGTH__+0x7e00f5>
	CANIDM4 = 0x00;
 1d8:	10 92 f4 00 	sts	0x00F4, r1	; 0x8000f4 <__TEXT_REGION_LENGTH__+0x7e00f4>
 1dc:	88 e0       	ldi	r24, 0x08	; 8
 1de:	90 e0       	ldi	r25, 0x00	; 0
	
	for(j=0; j<8; j++){
		//CANMSG = data[j];
		CANMSG = 0b11111111;
 1e0:	ea ef       	ldi	r30, 0xFA	; 250
 1e2:	f0 e0       	ldi	r31, 0x00	; 0
 1e4:	2f ef       	ldi	r18, 0xFF	; 255
 1e6:	20 83       	st	Z, r18
 1e8:	01 97       	sbiw	r24, 0x01	; 1
	CANIDM1 = 0x00;  // no mask
	CANIDM2 = 0x00;
	CANIDM3 = 0x00;
	CANIDM4 = 0x00;
	
	for(j=0; j<8; j++){
 1ea:	e9 f7       	brne	.-6      	; 0x1e6 <SendByMOb2+0x3c>
		//CANMSG = data[j];
		CANMSG = 0b11111111;
	}

	//  (1 << CONMOB0) | (1 << DLC3)
	CANCDMOB = 0b01001000; //enable transmission!! , data length =8
 1ec:	88 e4       	ldi	r24, 0x48	; 72
 1ee:	80 93 ef 00 	sts	0x00EF, r24	; 0x8000ef <__TEXT_REGION_LENGTH__+0x7e00ef>

	CANSTMOB = 0x00;      // clear flag
 1f2:	10 92 ee 00 	sts	0x00EE, r1	; 0x8000ee <__TEXT_REGION_LENGTH__+0x7e00ee>
 1f6:	08 95       	ret

000001f8 <main>:




 int main()
 {	
 1f8:	cf 93       	push	r28
 1fa:	df 93       	push	r29
 1fc:	cd b7       	in	r28, 0x3d	; 61
 1fe:	de b7       	in	r29, 0x3e	; 62
 200:	60 97       	sbiw	r28, 0x10	; 16
 202:	0f b6       	in	r0, 0x3f	; 63
 204:	f8 94       	cli
 206:	de bf       	out	0x3e, r29	; 62
 208:	0f be       	out	0x3f, r0	; 63
 20a:	cd bf       	out	0x3d, r28	; 61
	 volatile uint8_t trigger = 0x01;
 20c:	81 e0       	ldi	r24, 0x01	; 1
 20e:	89 83       	std	Y+1, r24	; 0x01
	 uart_init();
 210:	57 df       	rcall	.-338    	; 0xc0 <uart_init>
	 CAN_INIT();
 212:	84 df       	rcall	.-248    	; 0x11c <CAN_INIT>
 214:	11 e0       	ldi	r17, 0x01	; 1
					 char target[] = "This is a test";
					 uart_puts(target);
					 SendByMOb2();
				 }
			}else{
				 trigger = 0x01;
 216:	62 99       	sbic	0x0c, 2	; 12
 {	
	 volatile uint8_t trigger = 0x01;
	 uart_init();
	 CAN_INIT();
	 while(1){
			 if(!(PINE & (1 << 2))){
 218:	12 c0       	rjmp	.+36     	; 0x23e <main+0x46>
 21a:	89 81       	ldd	r24, Y+1	; 0x01
				 if(trigger){
 21c:	88 23       	and	r24, r24
 21e:	d9 f3       	breq	.-10     	; 0x216 <main+0x1e>
 220:	19 82       	std	Y+1, r1	; 0x01
					 trigger = 0x00;
 222:	8f e0       	ldi	r24, 0x0F	; 15
					 char target[] = "This is a test";
 224:	e0 e0       	ldi	r30, 0x00	; 0
 226:	f1 e0       	ldi	r31, 0x01	; 1
 228:	de 01       	movw	r26, r28
 22a:	12 96       	adiw	r26, 0x02	; 2
 22c:	01 90       	ld	r0, Z+
 22e:	0d 92       	st	X+, r0
 230:	8a 95       	dec	r24
 232:	e1 f7       	brne	.-8      	; 0x22c <main+0x34>
 234:	ce 01       	movw	r24, r28
					 uart_puts(target);
 236:	02 96       	adiw	r24, 0x02	; 2
 238:	4f df       	rcall	.-354    	; 0xd8 <uart_puts>
					 SendByMOb2();
 23a:	b7 df       	rcall	.-146    	; 0x1aa <SendByMOb2>
 23c:	ec cf       	rjmp	.-40     	; 0x216 <main+0x1e>
 23e:	19 83       	std	Y+1, r17	; 0x01
				 }
			}else{
				 trigger = 0x01;
 240:	ea cf       	rjmp	.-44     	; 0x216 <main+0x1e>

00000242 <_exit>:
 242:	f8 94       	cli

00000244 <__stop_program>:
 244:	ff cf       	rjmp	.-2      	; 0x244 <__stop_program>
