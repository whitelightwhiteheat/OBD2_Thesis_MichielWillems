
Tester.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000040  00800100  00000410  000004a4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000410  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000001  00800140  00800140  000004e4  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000004e4  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000514  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000108  00000000  00000000  00000554  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001710  00000000  00000000  0000065c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000e09  00000000  00000000  00001d6c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000a41  00000000  00000000  00002b75  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000046c  00000000  00000000  000035b8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000836  00000000  00000000  00003a24  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000c99  00000000  00000000  0000425a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000d8  00000000  00000000  00004ef3  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	49 c0       	rjmp	.+146    	; 0x94 <__ctors_end>
   2:	00 00       	nop
   4:	64 c0       	rjmp	.+200    	; 0xce <__bad_interrupt>
   6:	00 00       	nop
   8:	62 c0       	rjmp	.+196    	; 0xce <__bad_interrupt>
   a:	00 00       	nop
   c:	60 c0       	rjmp	.+192    	; 0xce <__bad_interrupt>
   e:	00 00       	nop
  10:	5e c0       	rjmp	.+188    	; 0xce <__bad_interrupt>
  12:	00 00       	nop
  14:	d4 c0       	rjmp	.+424    	; 0x1be <__vector_5>
  16:	00 00       	nop
  18:	18 c1       	rjmp	.+560    	; 0x24a <__vector_6>
  1a:	00 00       	nop
  1c:	4c c1       	rjmp	.+664    	; 0x2b6 <__vector_7>
  1e:	00 00       	nop
  20:	80 c1       	rjmp	.+768    	; 0x322 <__vector_8>
  22:	00 00       	nop
  24:	54 c0       	rjmp	.+168    	; 0xce <__bad_interrupt>
  26:	00 00       	nop
  28:	52 c0       	rjmp	.+164    	; 0xce <__bad_interrupt>
  2a:	00 00       	nop
  2c:	50 c0       	rjmp	.+160    	; 0xce <__bad_interrupt>
  2e:	00 00       	nop
  30:	4e c0       	rjmp	.+156    	; 0xce <__bad_interrupt>
  32:	00 00       	nop
  34:	4c c0       	rjmp	.+152    	; 0xce <__bad_interrupt>
  36:	00 00       	nop
  38:	4a c0       	rjmp	.+148    	; 0xce <__bad_interrupt>
  3a:	00 00       	nop
  3c:	48 c0       	rjmp	.+144    	; 0xce <__bad_interrupt>
  3e:	00 00       	nop
  40:	46 c0       	rjmp	.+140    	; 0xce <__bad_interrupt>
  42:	00 00       	nop
  44:	44 c0       	rjmp	.+136    	; 0xce <__bad_interrupt>
  46:	00 00       	nop
  48:	42 c0       	rjmp	.+132    	; 0xce <__bad_interrupt>
  4a:	00 00       	nop
  4c:	40 c0       	rjmp	.+128    	; 0xce <__bad_interrupt>
  4e:	00 00       	nop
  50:	3e c0       	rjmp	.+124    	; 0xce <__bad_interrupt>
  52:	00 00       	nop
  54:	3c c0       	rjmp	.+120    	; 0xce <__bad_interrupt>
  56:	00 00       	nop
  58:	3a c0       	rjmp	.+116    	; 0xce <__bad_interrupt>
  5a:	00 00       	nop
  5c:	38 c0       	rjmp	.+112    	; 0xce <__bad_interrupt>
  5e:	00 00       	nop
  60:	36 c0       	rjmp	.+108    	; 0xce <__bad_interrupt>
  62:	00 00       	nop
  64:	34 c0       	rjmp	.+104    	; 0xce <__bad_interrupt>
  66:	00 00       	nop
  68:	32 c0       	rjmp	.+100    	; 0xce <__bad_interrupt>
  6a:	00 00       	nop
  6c:	30 c0       	rjmp	.+96     	; 0xce <__bad_interrupt>
  6e:	00 00       	nop
  70:	2e c0       	rjmp	.+92     	; 0xce <__bad_interrupt>
  72:	00 00       	nop
  74:	2c c0       	rjmp	.+88     	; 0xce <__bad_interrupt>
  76:	00 00       	nop
  78:	2a c0       	rjmp	.+84     	; 0xce <__bad_interrupt>
  7a:	00 00       	nop
  7c:	28 c0       	rjmp	.+80     	; 0xce <__bad_interrupt>
  7e:	00 00       	nop
  80:	26 c0       	rjmp	.+76     	; 0xce <__bad_interrupt>
  82:	00 00       	nop
  84:	24 c0       	rjmp	.+72     	; 0xce <__bad_interrupt>
  86:	00 00       	nop
  88:	22 c0       	rjmp	.+68     	; 0xce <__bad_interrupt>
  8a:	00 00       	nop
  8c:	20 c0       	rjmp	.+64     	; 0xce <__bad_interrupt>
  8e:	00 00       	nop
  90:	1e c0       	rjmp	.+60     	; 0xce <__bad_interrupt>
	...

00000094 <__ctors_end>:
  94:	11 24       	eor	r1, r1
  96:	1f be       	out	0x3f, r1	; 63
  98:	cf ef       	ldi	r28, 0xFF	; 255
  9a:	d0 e1       	ldi	r29, 0x10	; 16
  9c:	de bf       	out	0x3e, r29	; 62
  9e:	cd bf       	out	0x3d, r28	; 61

000000a0 <__do_copy_data>:
  a0:	11 e0       	ldi	r17, 0x01	; 1
  a2:	a0 e0       	ldi	r26, 0x00	; 0
  a4:	b1 e0       	ldi	r27, 0x01	; 1
  a6:	e0 e1       	ldi	r30, 0x10	; 16
  a8:	f4 e0       	ldi	r31, 0x04	; 4
  aa:	00 e0       	ldi	r16, 0x00	; 0
  ac:	0b bf       	out	0x3b, r16	; 59
  ae:	02 c0       	rjmp	.+4      	; 0xb4 <__do_copy_data+0x14>
  b0:	07 90       	elpm	r0, Z+
  b2:	0d 92       	st	X+, r0
  b4:	a0 34       	cpi	r26, 0x40	; 64
  b6:	b1 07       	cpc	r27, r17
  b8:	d9 f7       	brne	.-10     	; 0xb0 <__do_copy_data+0x10>

000000ba <__do_clear_bss>:
  ba:	21 e0       	ldi	r18, 0x01	; 1
  bc:	a0 e4       	ldi	r26, 0x40	; 64
  be:	b1 e0       	ldi	r27, 0x01	; 1
  c0:	01 c0       	rjmp	.+2      	; 0xc4 <.do_clear_bss_start>

000000c2 <.do_clear_bss_loop>:
  c2:	1d 92       	st	X+, r1

000000c4 <.do_clear_bss_start>:
  c4:	a1 34       	cpi	r26, 0x41	; 65
  c6:	b2 07       	cpc	r27, r18
  c8:	e1 f7       	brne	.-8      	; 0xc2 <.do_clear_bss_loop>
  ca:	61 d1       	rcall	.+706    	; 0x38e <main>
  cc:	9f c1       	rjmp	.+830    	; 0x40c <_exit>

000000ce <__bad_interrupt>:
  ce:	98 cf       	rjmp	.-208    	; 0x0 <__vectors>

000000d0 <can_init>:
	CANPAGE = (1 << mobnr);
	can_init_id(id);
	can_init_mask(mask);
	//CAN standard rev 2.0 A (identifiers length = 11 bits)
	CANCDMOB = (1 << CONMOB1) | (1 << DLC3); //enable reception and data length code = 8 bytes
}
  d0:	cf 93       	push	r28
  d2:	df 93       	push	r29
  d4:	f8 94       	cli
  d6:	81 e0       	ldi	r24, 0x01	; 1
  d8:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
  dc:	80 ea       	ldi	r24, 0xA0	; 160
  de:	80 93 db 00 	sts	0x00DB, r24	; 0x8000db <__TEXT_REGION_LENGTH__+0x7e00db>
  e2:	10 92 da 00 	sts	0x00DA, r1	; 0x8000da <__TEXT_REGION_LENGTH__+0x7e00da>
  e6:	80 e0       	ldi	r24, 0x00	; 0
  e8:	cd ee       	ldi	r28, 0xED	; 237
  ea:	d0 e0       	ldi	r29, 0x00	; 0
  ec:	af ee       	ldi	r26, 0xEF	; 239
  ee:	b0 e0       	ldi	r27, 0x00	; 0
  f0:	ee ee       	ldi	r30, 0xEE	; 238
  f2:	f0 e0       	ldi	r31, 0x00	; 0
  f4:	98 2f       	mov	r25, r24
  f6:	92 95       	swap	r25
  f8:	90 7f       	andi	r25, 0xF0	; 240
  fa:	98 83       	st	Y, r25
  fc:	1c 92       	st	X, r1
  fe:	10 82       	st	Z, r1
 100:	8f 5f       	subi	r24, 0xFF	; 255
 102:	8f 30       	cpi	r24, 0x0F	; 15
 104:	b9 f7       	brne	.-18     	; 0xf4 <can_init+0x24>
 106:	86 e0       	ldi	r24, 0x06	; 6
 108:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
 10c:	8c e0       	ldi	r24, 0x0C	; 12
 10e:	80 93 e3 00 	sts	0x00E3, r24	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7e00e3>
 112:	87 e3       	ldi	r24, 0x37	; 55
 114:	80 93 e4 00 	sts	0x00E4, r24	; 0x8000e4 <__TEXT_REGION_LENGTH__+0x7e00e4>
 118:	10 92 e5 00 	sts	0x00E5, r1	; 0x8000e5 <__TEXT_REGION_LENGTH__+0x7e00e5>
 11c:	82 e0       	ldi	r24, 0x02	; 2
 11e:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
 122:	78 94       	sei
 124:	df 91       	pop	r29
 126:	cf 91       	pop	r28
 128:	08 95       	ret

0000012a <can_init_id>:
 12a:	98 2f       	mov	r25, r24
 12c:	92 95       	swap	r25
 12e:	99 0f       	add	r25, r25
 130:	90 7e       	andi	r25, 0xE0	; 224
 132:	90 93 f3 00 	sts	0x00F3, r25	; 0x8000f3 <__TEXT_REGION_LENGTH__+0x7e00f3>
 136:	86 95       	lsr	r24
 138:	86 95       	lsr	r24
 13a:	86 95       	lsr	r24
 13c:	80 93 f2 00 	sts	0x00F2, r24	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7e00f2>
 140:	10 92 f0 00 	sts	0x00F0, r1	; 0x8000f0 <__TEXT_REGION_LENGTH__+0x7e00f0>
 144:	08 95       	ret

00000146 <can_init_message>:
 146:	fc 01       	movw	r30, r24
 148:	9c 01       	movw	r18, r24
 14a:	28 5f       	subi	r18, 0xF8	; 248
 14c:	3f 4f       	sbci	r19, 0xFF	; 255
 14e:	aa ef       	ldi	r26, 0xFA	; 250
 150:	b0 e0       	ldi	r27, 0x00	; 0
 152:	81 91       	ld	r24, Z+
 154:	8c 93       	st	X, r24
 156:	2e 17       	cp	r18, r30
 158:	3f 07       	cpc	r19, r31
 15a:	d9 f7       	brne	.-10     	; 0x152 <can_init_message+0xc>
 15c:	08 95       	ret

0000015e <can_send_message>:
 15e:	cf 93       	push	r28
 160:	df 93       	push	r29
 162:	ea 01       	movw	r28, r20
 164:	21 e0       	ldi	r18, 0x01	; 1
 166:	30 e0       	ldi	r19, 0x00	; 0
 168:	02 c0       	rjmp	.+4      	; 0x16e <can_send_message+0x10>
 16a:	22 0f       	add	r18, r18
 16c:	33 1f       	adc	r19, r19
 16e:	8a 95       	dec	r24
 170:	e2 f7       	brpl	.-8      	; 0x16a <can_send_message+0xc>
 172:	20 93 ed 00 	sts	0x00ED, r18	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7e00ed>
 176:	86 2f       	mov	r24, r22
 178:	d8 df       	rcall	.-80     	; 0x12a <can_init_id>
 17a:	ce 01       	movw	r24, r28
 17c:	e4 df       	rcall	.-56     	; 0x146 <can_init_message>
 17e:	88 e4       	ldi	r24, 0x48	; 72
 180:	80 93 ef 00 	sts	0x00EF, r24	; 0x8000ef <__TEXT_REGION_LENGTH__+0x7e00ef>
 184:	df 91       	pop	r29
 186:	cf 91       	pop	r28
 188:	08 95       	ret

0000018a <can_send_frame_buffer>:

void can_send_frame_buffer( uint8_t *message ){
 18a:	0f 93       	push	r16
 18c:	1f 93       	push	r17
 18e:	cf 93       	push	r28
 190:	8c 01       	movw	r16, r24
	uint8_t j;
	for(j=0; j<8; j++){
 192:	c0 e0       	ldi	r28, 0x00	; 0
		can_send_message(j,j,message);
 194:	a8 01       	movw	r20, r16
 196:	6c 2f       	mov	r22, r28
 198:	8c 2f       	mov	r24, r28
 19a:	e1 df       	rcall	.-62     	; 0x15e <can_send_message>
		message = message + 8;
 19c:	08 5f       	subi	r16, 0xF8	; 248
 19e:	1f 4f       	sbci	r17, 0xFF	; 255
	CANCDMOB = (1 << CONMOB1) | (1 << DLC3); //enable reception and data length code = 8 bytes
}

void can_send_frame_buffer( uint8_t *message ){
	uint8_t j;
	for(j=0; j<8; j++){
 1a0:	cf 5f       	subi	r28, 0xFF	; 255
 1a2:	c8 30       	cpi	r28, 0x08	; 8
 1a4:	b9 f7       	brne	.-18     	; 0x194 <can_send_frame_buffer+0xa>
		can_send_message(j,j,message);
		message = message + 8;
	}
}
 1a6:	cf 91       	pop	r28
 1a8:	1f 91       	pop	r17
 1aa:	0f 91       	pop	r16
 1ac:	08 95       	ret

000001ae <buttons_init>:
		uart_puts("verify failed");
		return;
	}
	printf("\n");
	uart_puts("Keys Match!");
}
 1ae:	1d b8       	out	0x0d, r1	; 13
 1b0:	80 ef       	ldi	r24, 0xF0	; 240
 1b2:	8e b9       	out	0x0e, r24	; 14
 1b4:	9f ef       	ldi	r25, 0xFF	; 255
 1b6:	90 93 6a 00 	sts	0x006A, r25	; 0x80006a <__TEXT_REGION_LENGTH__+0x7e006a>
 1ba:	8d bb       	out	0x1d, r24	; 29
 1bc:	08 95       	ret

000001be <__vector_5>:


	
ISR(INT4_vect){
 1be:	1f 92       	push	r1
 1c0:	0f 92       	push	r0
 1c2:	0f b6       	in	r0, 0x3f	; 63
 1c4:	0f 92       	push	r0
 1c6:	11 24       	eor	r1, r1
 1c8:	0b b6       	in	r0, 0x3b	; 59
 1ca:	0f 92       	push	r0
 1cc:	2f 93       	push	r18
 1ce:	3f 93       	push	r19
 1d0:	4f 93       	push	r20
 1d2:	5f 93       	push	r21
 1d4:	6f 93       	push	r22
 1d6:	7f 93       	push	r23
 1d8:	8f 93       	push	r24
 1da:	9f 93       	push	r25
 1dc:	af 93       	push	r26
 1de:	bf 93       	push	r27
 1e0:	ef 93       	push	r30
 1e2:	ff 93       	push	r31
 1e4:	cf 93       	push	r28
 1e6:	df 93       	push	r29
 1e8:	cd b7       	in	r28, 0x3d	; 61
 1ea:	de b7       	in	r29, 0x3e	; 62
 1ec:	c0 54       	subi	r28, 0x40	; 64
 1ee:	d1 09       	sbc	r29, r1
 1f0:	de bf       	out	0x3e, r29	; 62
 1f2:	cd bf       	out	0x3d, r28	; 61
	event = AUTH_E;
 1f4:	81 e0       	ldi	r24, 0x01	; 1
 1f6:	80 93 40 01 	sts	0x0140, r24	; 0x800140 <__data_end>
	//char target[] = "4";
	//uart_puts(target);
	uint8_t test[64] = { 0 , 1 , 2 , 3 , 4 , 5 , 6 , 7 , 1 , 1 , 2 , 3 , 4 , 5 , 6 , 7 , 2 , 1 , 2 , 3 , 4 , 5 , 6 , 7 , 3 , 1 , 2 , 3 , 4 , 5 , 6 , 7 , 
 1fa:	80 e4       	ldi	r24, 0x40	; 64
 1fc:	e0 e0       	ldi	r30, 0x00	; 0
 1fe:	f1 e0       	ldi	r31, 0x01	; 1
 200:	de 01       	movw	r26, r28
 202:	11 96       	adiw	r26, 0x01	; 1
 204:	01 90       	ld	r0, Z+
 206:	0d 92       	st	X+, r0
 208:	8a 95       	dec	r24
 20a:	e1 f7       	brne	.-8      	; 0x204 <__vector_5+0x46>
						4 , 1 , 2 , 3 , 4 , 5 , 6 , 7 , 5 , 1 , 2 , 3 , 4 , 5 , 6 , 7 , 6 , 1 , 2 , 3 , 4 , 5 , 6 , 7 , 7 , 1 , 2 , 3 , 4 , 5 , 6 , 7 };
	uint8_t id[4] = { 1 , 1 , 0 , 0 };
	can_send_frame_buffer(test);
 20c:	ce 01       	movw	r24, r28
 20e:	01 96       	adiw	r24, 0x01	; 1
 210:	bc df       	rcall	.-136    	; 0x18a <can_send_frame_buffer>
	//can_send_message(0 , id , test );
}
 212:	c0 5c       	subi	r28, 0xC0	; 192
 214:	df 4f       	sbci	r29, 0xFF	; 255
 216:	0f b6       	in	r0, 0x3f	; 63
 218:	f8 94       	cli
 21a:	de bf       	out	0x3e, r29	; 62
 21c:	0f be       	out	0x3f, r0	; 63
 21e:	cd bf       	out	0x3d, r28	; 61
 220:	df 91       	pop	r29
 222:	cf 91       	pop	r28
 224:	ff 91       	pop	r31
 226:	ef 91       	pop	r30
 228:	bf 91       	pop	r27
 22a:	af 91       	pop	r26
 22c:	9f 91       	pop	r25
 22e:	8f 91       	pop	r24
 230:	7f 91       	pop	r23
 232:	6f 91       	pop	r22
 234:	5f 91       	pop	r21
 236:	4f 91       	pop	r20
 238:	3f 91       	pop	r19
 23a:	2f 91       	pop	r18
 23c:	0f 90       	pop	r0
 23e:	0b be       	out	0x3b, r0	; 59
 240:	0f 90       	pop	r0
 242:	0f be       	out	0x3f, r0	; 63
 244:	0f 90       	pop	r0
 246:	1f 90       	pop	r1
 248:	18 95       	reti

0000024a <__vector_6>:

ISR(INT5_vect){
 24a:	1f 92       	push	r1
 24c:	0f 92       	push	r0
 24e:	0f b6       	in	r0, 0x3f	; 63
 250:	0f 92       	push	r0
 252:	11 24       	eor	r1, r1
 254:	0b b6       	in	r0, 0x3b	; 59
 256:	0f 92       	push	r0
 258:	2f 93       	push	r18
 25a:	3f 93       	push	r19
 25c:	4f 93       	push	r20
 25e:	5f 93       	push	r21
 260:	6f 93       	push	r22
 262:	7f 93       	push	r23
 264:	8f 93       	push	r24
 266:	9f 93       	push	r25
 268:	af 93       	push	r26
 26a:	bf 93       	push	r27
 26c:	ef 93       	push	r30
 26e:	ff 93       	push	r31
 270:	cf 93       	push	r28
 272:	df 93       	push	r29
 274:	00 d0       	rcall	.+0      	; 0x276 <__vector_6+0x2c>
 276:	cd b7       	in	r28, 0x3d	; 61
 278:	de b7       	in	r29, 0x3e	; 62
	char target[] = "5";
 27a:	85 e3       	ldi	r24, 0x35	; 53
 27c:	90 e0       	ldi	r25, 0x00	; 0
 27e:	9a 83       	std	Y+2, r25	; 0x02
 280:	89 83       	std	Y+1, r24	; 0x01
	uart_puts(target);
 282:	ce 01       	movw	r24, r28
 284:	01 96       	adiw	r24, 0x01	; 1
 286:	93 d0       	rcall	.+294    	; 0x3ae <uart_puts>
	//SendByMOb2();
}
 288:	0f 90       	pop	r0
 28a:	0f 90       	pop	r0
 28c:	df 91       	pop	r29
 28e:	cf 91       	pop	r28
 290:	ff 91       	pop	r31
 292:	ef 91       	pop	r30
 294:	bf 91       	pop	r27
 296:	af 91       	pop	r26
 298:	9f 91       	pop	r25
 29a:	8f 91       	pop	r24
 29c:	7f 91       	pop	r23
 29e:	6f 91       	pop	r22
 2a0:	5f 91       	pop	r21
 2a2:	4f 91       	pop	r20
 2a4:	3f 91       	pop	r19
 2a6:	2f 91       	pop	r18
 2a8:	0f 90       	pop	r0
 2aa:	0b be       	out	0x3b, r0	; 59
 2ac:	0f 90       	pop	r0
 2ae:	0f be       	out	0x3f, r0	; 63
 2b0:	0f 90       	pop	r0
 2b2:	1f 90       	pop	r1
 2b4:	18 95       	reti

000002b6 <__vector_7>:

ISR(INT6_vect){
 2b6:	1f 92       	push	r1
 2b8:	0f 92       	push	r0
 2ba:	0f b6       	in	r0, 0x3f	; 63
 2bc:	0f 92       	push	r0
 2be:	11 24       	eor	r1, r1
 2c0:	0b b6       	in	r0, 0x3b	; 59
 2c2:	0f 92       	push	r0
 2c4:	2f 93       	push	r18
 2c6:	3f 93       	push	r19
 2c8:	4f 93       	push	r20
 2ca:	5f 93       	push	r21
 2cc:	6f 93       	push	r22
 2ce:	7f 93       	push	r23
 2d0:	8f 93       	push	r24
 2d2:	9f 93       	push	r25
 2d4:	af 93       	push	r26
 2d6:	bf 93       	push	r27
 2d8:	ef 93       	push	r30
 2da:	ff 93       	push	r31
 2dc:	cf 93       	push	r28
 2de:	df 93       	push	r29
 2e0:	00 d0       	rcall	.+0      	; 0x2e2 <__vector_7+0x2c>
 2e2:	cd b7       	in	r28, 0x3d	; 61
 2e4:	de b7       	in	r29, 0x3e	; 62
	char target[] = "6";
 2e6:	86 e3       	ldi	r24, 0x36	; 54
 2e8:	90 e0       	ldi	r25, 0x00	; 0
 2ea:	9a 83       	std	Y+2, r25	; 0x02
 2ec:	89 83       	std	Y+1, r24	; 0x01
	uart_puts(target);
 2ee:	ce 01       	movw	r24, r28
 2f0:	01 96       	adiw	r24, 0x01	; 1
 2f2:	5d d0       	rcall	.+186    	; 0x3ae <uart_puts>
	//SendByMOb2();
}
 2f4:	0f 90       	pop	r0
 2f6:	0f 90       	pop	r0
 2f8:	df 91       	pop	r29
 2fa:	cf 91       	pop	r28
 2fc:	ff 91       	pop	r31
 2fe:	ef 91       	pop	r30
 300:	bf 91       	pop	r27
 302:	af 91       	pop	r26
 304:	9f 91       	pop	r25
 306:	8f 91       	pop	r24
 308:	7f 91       	pop	r23
 30a:	6f 91       	pop	r22
 30c:	5f 91       	pop	r21
 30e:	4f 91       	pop	r20
 310:	3f 91       	pop	r19
 312:	2f 91       	pop	r18
 314:	0f 90       	pop	r0
 316:	0b be       	out	0x3b, r0	; 59
 318:	0f 90       	pop	r0
 31a:	0f be       	out	0x3f, r0	; 63
 31c:	0f 90       	pop	r0
 31e:	1f 90       	pop	r1
 320:	18 95       	reti

00000322 <__vector_8>:

ISR(INT7_vect){
 322:	1f 92       	push	r1
 324:	0f 92       	push	r0
 326:	0f b6       	in	r0, 0x3f	; 63
 328:	0f 92       	push	r0
 32a:	11 24       	eor	r1, r1
 32c:	0b b6       	in	r0, 0x3b	; 59
 32e:	0f 92       	push	r0
 330:	2f 93       	push	r18
 332:	3f 93       	push	r19
 334:	4f 93       	push	r20
 336:	5f 93       	push	r21
 338:	6f 93       	push	r22
 33a:	7f 93       	push	r23
 33c:	8f 93       	push	r24
 33e:	9f 93       	push	r25
 340:	af 93       	push	r26
 342:	bf 93       	push	r27
 344:	ef 93       	push	r30
 346:	ff 93       	push	r31
 348:	cf 93       	push	r28
 34a:	df 93       	push	r29
 34c:	00 d0       	rcall	.+0      	; 0x34e <__vector_8+0x2c>
 34e:	cd b7       	in	r28, 0x3d	; 61
 350:	de b7       	in	r29, 0x3e	; 62
	char target[] = "7";
 352:	87 e3       	ldi	r24, 0x37	; 55
 354:	90 e0       	ldi	r25, 0x00	; 0
 356:	9a 83       	std	Y+2, r25	; 0x02
 358:	89 83       	std	Y+1, r24	; 0x01
	uart_puts(target);
 35a:	ce 01       	movw	r24, r28
 35c:	01 96       	adiw	r24, 0x01	; 1
 35e:	27 d0       	rcall	.+78     	; 0x3ae <uart_puts>
	//SendByMOb2();
}
 360:	0f 90       	pop	r0
 362:	0f 90       	pop	r0
 364:	df 91       	pop	r29
 366:	cf 91       	pop	r28
 368:	ff 91       	pop	r31
 36a:	ef 91       	pop	r30
 36c:	bf 91       	pop	r27
 36e:	af 91       	pop	r26
 370:	9f 91       	pop	r25
 372:	8f 91       	pop	r24
 374:	7f 91       	pop	r23
 376:	6f 91       	pop	r22
 378:	5f 91       	pop	r21
 37a:	4f 91       	pop	r20
 37c:	3f 91       	pop	r19
 37e:	2f 91       	pop	r18
 380:	0f 90       	pop	r0
 382:	0b be       	out	0x3b, r0	; 59
 384:	0f 90       	pop	r0
 386:	0f be       	out	0x3f, r0	; 63
 388:	0f 90       	pop	r0
 38a:	1f 90       	pop	r1
 38c:	18 95       	reti

0000038e <main>:

 int main()
 {	
	 uart_init();
 38e:	03 d0       	rcall	.+6      	; 0x396 <uart_init>
	 buttons_init();
 390:	0e df       	rcall	.-484    	; 0x1ae <buttons_init>
	 can_init();
 392:	9e de       	rcall	.-708    	; 0xd0 <can_init>
 394:	ff cf       	rjmp	.-2      	; 0x394 <main+0x6>

00000396 <uart_init>:
 396:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
#include <avr/io.h>
#include "uart_f.h"

void uart_init(){
	UBRR0H = (BAUD_PRESCALE >> 8); // Load upper 8-bits of the baud rate value into the high byte of the UBRR register
	UBRR0L = BAUD_PRESCALE; // Load lower 8-bits of the baud rate value into the low byte of the UBRR register
 39a:	83 e3       	ldi	r24, 0x33	; 51
 39c:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
	UCSR0C = (0<<UMSEL0) | (0<<UPM0) | (1<<USBS0) | (3<<UCSZ0);
 3a0:	8e e0       	ldi	r24, 0x0E	; 14
 3a2:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>
	UCSR0B = (1<<RXEN0) | (1<<TXEN0);
 3a6:	88 e1       	ldi	r24, 0x18	; 24
 3a8:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
 3ac:	08 95       	ret

000003ae <uart_puts>:
}

void uart_puts(char* s){
 3ae:	cf 93       	push	r28
 3b0:	df 93       	push	r29
	int i;
	int len = strlen(s);
 3b2:	fc 01       	movw	r30, r24
 3b4:	01 90       	ld	r0, Z+
 3b6:	00 20       	and	r0, r0
 3b8:	e9 f7       	brne	.-6      	; 0x3b4 <uart_puts+0x6>
 3ba:	31 97       	sbiw	r30, 0x01	; 1
 3bc:	e8 1b       	sub	r30, r24
 3be:	f9 0b       	sbc	r31, r25
	for (i = 0; i < len; i++){
 3c0:	1e 16       	cp	r1, r30
 3c2:	1f 06       	cpc	r1, r31
 3c4:	84 f4       	brge	.+32     	; 0x3e6 <uart_puts+0x38>
 3c6:	dc 01       	movw	r26, r24
 3c8:	9c 01       	movw	r18, r24
 3ca:	2e 0f       	add	r18, r30
 3cc:	3f 1f       	adc	r19, r31
		while(!( UCSR0A & 0X20));
 3ce:	e0 ec       	ldi	r30, 0xC0	; 192
 3d0:	f0 e0       	ldi	r31, 0x00	; 0
		UDR0=s[i];
 3d2:	c6 ec       	ldi	r28, 0xC6	; 198
 3d4:	d0 e0       	ldi	r29, 0x00	; 0

void uart_puts(char* s){
	int i;
	int len = strlen(s);
	for (i = 0; i < len; i++){
		while(!( UCSR0A & 0X20));
 3d6:	90 81       	ld	r25, Z
 3d8:	95 ff       	sbrs	r25, 5
 3da:	fd cf       	rjmp	.-6      	; 0x3d6 <uart_puts+0x28>
		UDR0=s[i];
 3dc:	9d 91       	ld	r25, X+
 3de:	98 83       	st	Y, r25
}

void uart_puts(char* s){
	int i;
	int len = strlen(s);
	for (i = 0; i < len; i++){
 3e0:	a2 17       	cp	r26, r18
 3e2:	b3 07       	cpc	r27, r19
 3e4:	c1 f7       	brne	.-16     	; 0x3d6 <uart_puts+0x28>
		while(!( UCSR0A & 0X20));
		UDR0=s[i];
	}
	while(!( UCSR0A & 0X20)); 
 3e6:	e0 ec       	ldi	r30, 0xC0	; 192
 3e8:	f0 e0       	ldi	r31, 0x00	; 0
 3ea:	80 81       	ld	r24, Z
 3ec:	85 ff       	sbrs	r24, 5
 3ee:	fd cf       	rjmp	.-6      	; 0x3ea <uart_puts+0x3c>
	UDR0 = 13;
 3f0:	8d e0       	ldi	r24, 0x0D	; 13
 3f2:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
	while(!( UCSR0A & 0X20));
 3f6:	e0 ec       	ldi	r30, 0xC0	; 192
 3f8:	f0 e0       	ldi	r31, 0x00	; 0
 3fa:	80 81       	ld	r24, Z
 3fc:	85 ff       	sbrs	r24, 5
 3fe:	fd cf       	rjmp	.-6      	; 0x3fa <uart_puts+0x4c>
	UDR0 = 10;
 400:	8a e0       	ldi	r24, 0x0A	; 10
 402:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
}
 406:	df 91       	pop	r29
 408:	cf 91       	pop	r28
 40a:	08 95       	ret

0000040c <_exit>:
 40c:	f8 94       	cli

0000040e <__stop_program>:
 40e:	ff cf       	rjmp	.-2      	; 0x40e <__stop_program>
