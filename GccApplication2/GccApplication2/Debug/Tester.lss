
Tester.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000040  00800100  0000041c  000004b0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000041c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000001  00800140  00800140  000004f0  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000004f0  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000520  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000108  00000000  00000000  00000560  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001710  00000000  00000000  00000668  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000e09  00000000  00000000  00001d78  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000a53  00000000  00000000  00002b81  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000468  00000000  00000000  000035d4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000836  00000000  00000000  00003a3c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000c74  00000000  00000000  00004272  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000d8  00000000  00000000  00004ee6  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	49 c0       	rjmp	.+146    	; 0x94 <__ctors_end>
   2:	00 00       	nop
   4:	64 c0       	rjmp	.+200    	; 0xce <__bad_interrupt>
   6:	00 00       	nop
   8:	62 c0       	rjmp	.+196    	; 0xce <__bad_interrupt>
   a:	00 00       	nop
   c:	60 c0       	rjmp	.+192    	; 0xce <__bad_interrupt>
   e:	00 00       	nop
  10:	5e c0       	rjmp	.+188    	; 0xce <__bad_interrupt>
  12:	00 00       	nop
  14:	da c0       	rjmp	.+436    	; 0x1ca <__vector_5>
  16:	00 00       	nop
  18:	1e c1       	rjmp	.+572    	; 0x256 <__vector_6>
  1a:	00 00       	nop
  1c:	52 c1       	rjmp	.+676    	; 0x2c2 <__vector_7>
  1e:	00 00       	nop
  20:	86 c1       	rjmp	.+780    	; 0x32e <__vector_8>
  22:	00 00       	nop
  24:	54 c0       	rjmp	.+168    	; 0xce <__bad_interrupt>
  26:	00 00       	nop
  28:	52 c0       	rjmp	.+164    	; 0xce <__bad_interrupt>
  2a:	00 00       	nop
  2c:	50 c0       	rjmp	.+160    	; 0xce <__bad_interrupt>
  2e:	00 00       	nop
  30:	4e c0       	rjmp	.+156    	; 0xce <__bad_interrupt>
  32:	00 00       	nop
  34:	4c c0       	rjmp	.+152    	; 0xce <__bad_interrupt>
  36:	00 00       	nop
  38:	4a c0       	rjmp	.+148    	; 0xce <__bad_interrupt>
  3a:	00 00       	nop
  3c:	48 c0       	rjmp	.+144    	; 0xce <__bad_interrupt>
  3e:	00 00       	nop
  40:	46 c0       	rjmp	.+140    	; 0xce <__bad_interrupt>
  42:	00 00       	nop
  44:	44 c0       	rjmp	.+136    	; 0xce <__bad_interrupt>
  46:	00 00       	nop
  48:	42 c0       	rjmp	.+132    	; 0xce <__bad_interrupt>
  4a:	00 00       	nop
  4c:	40 c0       	rjmp	.+128    	; 0xce <__bad_interrupt>
  4e:	00 00       	nop
  50:	3e c0       	rjmp	.+124    	; 0xce <__bad_interrupt>
  52:	00 00       	nop
  54:	3c c0       	rjmp	.+120    	; 0xce <__bad_interrupt>
  56:	00 00       	nop
  58:	3a c0       	rjmp	.+116    	; 0xce <__bad_interrupt>
  5a:	00 00       	nop
  5c:	38 c0       	rjmp	.+112    	; 0xce <__bad_interrupt>
  5e:	00 00       	nop
  60:	36 c0       	rjmp	.+108    	; 0xce <__bad_interrupt>
  62:	00 00       	nop
  64:	34 c0       	rjmp	.+104    	; 0xce <__bad_interrupt>
  66:	00 00       	nop
  68:	32 c0       	rjmp	.+100    	; 0xce <__bad_interrupt>
  6a:	00 00       	nop
  6c:	30 c0       	rjmp	.+96     	; 0xce <__bad_interrupt>
  6e:	00 00       	nop
  70:	2e c0       	rjmp	.+92     	; 0xce <__bad_interrupt>
  72:	00 00       	nop
  74:	2c c0       	rjmp	.+88     	; 0xce <__bad_interrupt>
  76:	00 00       	nop
  78:	2a c0       	rjmp	.+84     	; 0xce <__bad_interrupt>
  7a:	00 00       	nop
  7c:	28 c0       	rjmp	.+80     	; 0xce <__bad_interrupt>
  7e:	00 00       	nop
  80:	26 c0       	rjmp	.+76     	; 0xce <__bad_interrupt>
  82:	00 00       	nop
  84:	24 c0       	rjmp	.+72     	; 0xce <__bad_interrupt>
  86:	00 00       	nop
  88:	22 c0       	rjmp	.+68     	; 0xce <__bad_interrupt>
  8a:	00 00       	nop
  8c:	20 c0       	rjmp	.+64     	; 0xce <__bad_interrupt>
  8e:	00 00       	nop
  90:	1e c0       	rjmp	.+60     	; 0xce <__bad_interrupt>
	...

00000094 <__ctors_end>:
  94:	11 24       	eor	r1, r1
  96:	1f be       	out	0x3f, r1	; 63
  98:	cf ef       	ldi	r28, 0xFF	; 255
  9a:	d0 e1       	ldi	r29, 0x10	; 16
  9c:	de bf       	out	0x3e, r29	; 62
  9e:	cd bf       	out	0x3d, r28	; 61

000000a0 <__do_copy_data>:
  a0:	11 e0       	ldi	r17, 0x01	; 1
  a2:	a0 e0       	ldi	r26, 0x00	; 0
  a4:	b1 e0       	ldi	r27, 0x01	; 1
  a6:	ec e1       	ldi	r30, 0x1C	; 28
  a8:	f4 e0       	ldi	r31, 0x04	; 4
  aa:	00 e0       	ldi	r16, 0x00	; 0
  ac:	0b bf       	out	0x3b, r16	; 59
  ae:	02 c0       	rjmp	.+4      	; 0xb4 <__do_copy_data+0x14>
  b0:	07 90       	elpm	r0, Z+
  b2:	0d 92       	st	X+, r0
  b4:	a0 34       	cpi	r26, 0x40	; 64
  b6:	b1 07       	cpc	r27, r17
  b8:	d9 f7       	brne	.-10     	; 0xb0 <__do_copy_data+0x10>

000000ba <__do_clear_bss>:
  ba:	21 e0       	ldi	r18, 0x01	; 1
  bc:	a0 e4       	ldi	r26, 0x40	; 64
  be:	b1 e0       	ldi	r27, 0x01	; 1
  c0:	01 c0       	rjmp	.+2      	; 0xc4 <.do_clear_bss_start>

000000c2 <.do_clear_bss_loop>:
  c2:	1d 92       	st	X+, r1

000000c4 <.do_clear_bss_start>:
  c4:	a1 34       	cpi	r26, 0x41	; 65
  c6:	b2 07       	cpc	r27, r18
  c8:	e1 f7       	brne	.-8      	; 0xc2 <.do_clear_bss_loop>
  ca:	67 d1       	rcall	.+718    	; 0x39a <main>
  cc:	a5 c1       	rjmp	.+842    	; 0x418 <_exit>

000000ce <__bad_interrupt>:
  ce:	98 cf       	rjmp	.-208    	; 0x0 <__vectors>

000000d0 <can_init>:
	CANPAGE = (mobnr << 4);
	can_init_id(id);
	can_init_mask(mask);
	//CAN standard rev 2.0 A (identifiers length = 11 bits)
	CANCDMOB = (1 << CONMOB1) | (1 << DLC3); //enable reception and data length code = 8 bytes
}
  d0:	cf 93       	push	r28
  d2:	df 93       	push	r29
  d4:	f8 94       	cli
  d6:	81 e0       	ldi	r24, 0x01	; 1
  d8:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
  dc:	80 eb       	ldi	r24, 0xB0	; 176
  de:	80 93 db 00 	sts	0x00DB, r24	; 0x8000db <__TEXT_REGION_LENGTH__+0x7e00db>
  e2:	10 92 da 00 	sts	0x00DA, r1	; 0x8000da <__TEXT_REGION_LENGTH__+0x7e00da>
  e6:	80 e0       	ldi	r24, 0x00	; 0
  e8:	cd ee       	ldi	r28, 0xED	; 237
  ea:	d0 e0       	ldi	r29, 0x00	; 0
  ec:	af ee       	ldi	r26, 0xEF	; 239
  ee:	b0 e0       	ldi	r27, 0x00	; 0
  f0:	ee ee       	ldi	r30, 0xEE	; 238
  f2:	f0 e0       	ldi	r31, 0x00	; 0
  f4:	98 2f       	mov	r25, r24
  f6:	92 95       	swap	r25
  f8:	90 7f       	andi	r25, 0xF0	; 240
  fa:	98 83       	st	Y, r25
  fc:	1c 92       	st	X, r1
  fe:	10 82       	st	Z, r1
 100:	8f 5f       	subi	r24, 0xFF	; 255
 102:	8f 30       	cpi	r24, 0x0F	; 15
 104:	b9 f7       	brne	.-18     	; 0xf4 <can_init+0x24>
 106:	86 e0       	ldi	r24, 0x06	; 6
 108:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
 10c:	8c e0       	ldi	r24, 0x0C	; 12
 10e:	80 93 e3 00 	sts	0x00E3, r24	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7e00e3>
 112:	87 e3       	ldi	r24, 0x37	; 55
 114:	80 93 e4 00 	sts	0x00E4, r24	; 0x8000e4 <__TEXT_REGION_LENGTH__+0x7e00e4>
 118:	10 92 e5 00 	sts	0x00E5, r1	; 0x8000e5 <__TEXT_REGION_LENGTH__+0x7e00e5>
 11c:	82 e0       	ldi	r24, 0x02	; 2
 11e:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
 122:	78 94       	sei
 124:	df 91       	pop	r29
 126:	cf 91       	pop	r28
 128:	08 95       	ret

0000012a <can_init_id>:
 12a:	98 2f       	mov	r25, r24
 12c:	92 95       	swap	r25
 12e:	99 0f       	add	r25, r25
 130:	90 7e       	andi	r25, 0xE0	; 224
 132:	90 93 f3 00 	sts	0x00F3, r25	; 0x8000f3 <__TEXT_REGION_LENGTH__+0x7e00f3>
 136:	86 95       	lsr	r24
 138:	86 95       	lsr	r24
 13a:	86 95       	lsr	r24
 13c:	80 93 f2 00 	sts	0x00F2, r24	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7e00f2>
 140:	10 92 f0 00 	sts	0x00F0, r1	; 0x8000f0 <__TEXT_REGION_LENGTH__+0x7e00f0>
 144:	08 95       	ret

00000146 <can_init_message>:
 146:	fc 01       	movw	r30, r24
 148:	9c 01       	movw	r18, r24
 14a:	28 5f       	subi	r18, 0xF8	; 248
 14c:	3f 4f       	sbci	r19, 0xFF	; 255
 14e:	aa ef       	ldi	r26, 0xFA	; 250
 150:	b0 e0       	ldi	r27, 0x00	; 0
 152:	81 91       	ld	r24, Z+
 154:	8c 93       	st	X, r24
 156:	2e 17       	cp	r18, r30
 158:	3f 07       	cpc	r19, r31
 15a:	d9 f7       	brne	.-10     	; 0x152 <can_init_message+0xc>
 15c:	08 95       	ret

0000015e <can_send_message>:
 15e:	cf 93       	push	r28
 160:	df 93       	push	r29
 162:	ea 01       	movw	r28, r20
 164:	82 95       	swap	r24
 166:	80 7f       	andi	r24, 0xF0	; 240
 168:	80 93 ed 00 	sts	0x00ED, r24	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7e00ed>
 16c:	86 2f       	mov	r24, r22
 16e:	dd df       	rcall	.-70     	; 0x12a <can_init_id>
 170:	ce 01       	movw	r24, r28
 172:	e9 df       	rcall	.-46     	; 0x146 <can_init_message>
 174:	88 e4       	ldi	r24, 0x48	; 72
 176:	80 93 ef 00 	sts	0x00EF, r24	; 0x8000ef <__TEXT_REGION_LENGTH__+0x7e00ef>
 17a:	df 91       	pop	r29
 17c:	cf 91       	pop	r28
 17e:	08 95       	ret

00000180 <can_send_frame_buffer>:

void can_send_frame_buffer( uint8_t *message ){
 180:	ef 92       	push	r14
 182:	ff 92       	push	r15
 184:	0f 93       	push	r16
 186:	1f 93       	push	r17
 188:	cf 93       	push	r28
 18a:	8c 01       	movw	r16, r24
	uint8_t j;
	for(j=0; j<8; j++){
 18c:	c0 e0       	ldi	r28, 0x00	; 0
		CANSTMOB = 0x00;
 18e:	0f 2e       	mov	r0, r31
 190:	fe ee       	ldi	r31, 0xEE	; 238
 192:	ef 2e       	mov	r14, r31
 194:	f1 2c       	mov	r15, r1
 196:	f0 2d       	mov	r31, r0
 198:	f7 01       	movw	r30, r14
 19a:	10 82       	st	Z, r1
		can_send_message(j,j,message);
 19c:	a8 01       	movw	r20, r16
 19e:	6c 2f       	mov	r22, r28
 1a0:	8c 2f       	mov	r24, r28
 1a2:	dd df       	rcall	.-70     	; 0x15e <can_send_message>
		message = message + 8;
 1a4:	08 5f       	subi	r16, 0xF8	; 248
 1a6:	1f 4f       	sbci	r17, 0xFF	; 255
	CANCDMOB = (1 << CONMOB1) | (1 << DLC3); //enable reception and data length code = 8 bytes
}

void can_send_frame_buffer( uint8_t *message ){
	uint8_t j;
	for(j=0; j<8; j++){
 1a8:	cf 5f       	subi	r28, 0xFF	; 255
 1aa:	c8 30       	cpi	r28, 0x08	; 8
 1ac:	a9 f7       	brne	.-22     	; 0x198 <can_send_frame_buffer+0x18>
		CANSTMOB = 0x00;
		can_send_message(j,j,message);
		message = message + 8;
	}
}
 1ae:	cf 91       	pop	r28
 1b0:	1f 91       	pop	r17
 1b2:	0f 91       	pop	r16
 1b4:	ff 90       	pop	r15
 1b6:	ef 90       	pop	r14
 1b8:	08 95       	ret

000001ba <buttons_init>:
		uart_puts("verify failed");
		return;
	}
	printf("\n");
	uart_puts("Keys Match!");
}
 1ba:	1d b8       	out	0x0d, r1	; 13
 1bc:	80 ef       	ldi	r24, 0xF0	; 240
 1be:	8e b9       	out	0x0e, r24	; 14
 1c0:	9f ef       	ldi	r25, 0xFF	; 255
 1c2:	90 93 6a 00 	sts	0x006A, r25	; 0x80006a <__TEXT_REGION_LENGTH__+0x7e006a>
 1c6:	8d bb       	out	0x1d, r24	; 29
 1c8:	08 95       	ret

000001ca <__vector_5>:


	
ISR(INT4_vect){
 1ca:	1f 92       	push	r1
 1cc:	0f 92       	push	r0
 1ce:	0f b6       	in	r0, 0x3f	; 63
 1d0:	0f 92       	push	r0
 1d2:	11 24       	eor	r1, r1
 1d4:	0b b6       	in	r0, 0x3b	; 59
 1d6:	0f 92       	push	r0
 1d8:	2f 93       	push	r18
 1da:	3f 93       	push	r19
 1dc:	4f 93       	push	r20
 1de:	5f 93       	push	r21
 1e0:	6f 93       	push	r22
 1e2:	7f 93       	push	r23
 1e4:	8f 93       	push	r24
 1e6:	9f 93       	push	r25
 1e8:	af 93       	push	r26
 1ea:	bf 93       	push	r27
 1ec:	ef 93       	push	r30
 1ee:	ff 93       	push	r31
 1f0:	cf 93       	push	r28
 1f2:	df 93       	push	r29
 1f4:	cd b7       	in	r28, 0x3d	; 61
 1f6:	de b7       	in	r29, 0x3e	; 62
 1f8:	c0 54       	subi	r28, 0x40	; 64
 1fa:	d1 09       	sbc	r29, r1
 1fc:	de bf       	out	0x3e, r29	; 62
 1fe:	cd bf       	out	0x3d, r28	; 61
	event = AUTH_E;
 200:	81 e0       	ldi	r24, 0x01	; 1
 202:	80 93 40 01 	sts	0x0140, r24	; 0x800140 <__data_end>
	//char target[] = "4";
	//uart_puts(target);
	uint8_t test[64] = { 0 , 1 , 2 , 3 , 4 , 5 , 6 , 7 , 1 , 1 , 2 , 3 , 4 , 5 , 6 , 7 , 2 , 1 , 2 , 3 , 4 , 5 , 6 , 7 , 3 , 1 , 2 , 3 , 4 , 5 , 6 , 7 , 
 206:	80 e4       	ldi	r24, 0x40	; 64
 208:	e0 e0       	ldi	r30, 0x00	; 0
 20a:	f1 e0       	ldi	r31, 0x01	; 1
 20c:	de 01       	movw	r26, r28
 20e:	11 96       	adiw	r26, 0x01	; 1
 210:	01 90       	ld	r0, Z+
 212:	0d 92       	st	X+, r0
 214:	8a 95       	dec	r24
 216:	e1 f7       	brne	.-8      	; 0x210 <__vector_5+0x46>
						4 , 1 , 2 , 3 , 4 , 5 , 6 , 7 , 5 , 1 , 2 , 3 , 4 , 5 , 6 , 7 , 6 , 1 , 2 , 3 , 4 , 5 , 6 , 7 , 7 , 1 , 2 , 3 , 4 , 5 , 6 , 7 };
	uint8_t id[4] = { 1 , 1 , 0 , 0 };
	can_send_frame_buffer(test);
 218:	ce 01       	movw	r24, r28
 21a:	01 96       	adiw	r24, 0x01	; 1
 21c:	b1 df       	rcall	.-158    	; 0x180 <can_send_frame_buffer>
	//can_send_message(0 , id , test );
}
 21e:	c0 5c       	subi	r28, 0xC0	; 192
 220:	df 4f       	sbci	r29, 0xFF	; 255
 222:	0f b6       	in	r0, 0x3f	; 63
 224:	f8 94       	cli
 226:	de bf       	out	0x3e, r29	; 62
 228:	0f be       	out	0x3f, r0	; 63
 22a:	cd bf       	out	0x3d, r28	; 61
 22c:	df 91       	pop	r29
 22e:	cf 91       	pop	r28
 230:	ff 91       	pop	r31
 232:	ef 91       	pop	r30
 234:	bf 91       	pop	r27
 236:	af 91       	pop	r26
 238:	9f 91       	pop	r25
 23a:	8f 91       	pop	r24
 23c:	7f 91       	pop	r23
 23e:	6f 91       	pop	r22
 240:	5f 91       	pop	r21
 242:	4f 91       	pop	r20
 244:	3f 91       	pop	r19
 246:	2f 91       	pop	r18
 248:	0f 90       	pop	r0
 24a:	0b be       	out	0x3b, r0	; 59
 24c:	0f 90       	pop	r0
 24e:	0f be       	out	0x3f, r0	; 63
 250:	0f 90       	pop	r0
 252:	1f 90       	pop	r1
 254:	18 95       	reti

00000256 <__vector_6>:

ISR(INT5_vect){
 256:	1f 92       	push	r1
 258:	0f 92       	push	r0
 25a:	0f b6       	in	r0, 0x3f	; 63
 25c:	0f 92       	push	r0
 25e:	11 24       	eor	r1, r1
 260:	0b b6       	in	r0, 0x3b	; 59
 262:	0f 92       	push	r0
 264:	2f 93       	push	r18
 266:	3f 93       	push	r19
 268:	4f 93       	push	r20
 26a:	5f 93       	push	r21
 26c:	6f 93       	push	r22
 26e:	7f 93       	push	r23
 270:	8f 93       	push	r24
 272:	9f 93       	push	r25
 274:	af 93       	push	r26
 276:	bf 93       	push	r27
 278:	ef 93       	push	r30
 27a:	ff 93       	push	r31
 27c:	cf 93       	push	r28
 27e:	df 93       	push	r29
 280:	00 d0       	rcall	.+0      	; 0x282 <__vector_6+0x2c>
 282:	cd b7       	in	r28, 0x3d	; 61
 284:	de b7       	in	r29, 0x3e	; 62
	char target[] = "5";
 286:	85 e3       	ldi	r24, 0x35	; 53
 288:	90 e0       	ldi	r25, 0x00	; 0
 28a:	9a 83       	std	Y+2, r25	; 0x02
 28c:	89 83       	std	Y+1, r24	; 0x01
	uart_puts(target);
 28e:	ce 01       	movw	r24, r28
 290:	01 96       	adiw	r24, 0x01	; 1
 292:	93 d0       	rcall	.+294    	; 0x3ba <uart_puts>
	//SendByMOb2();
}
 294:	0f 90       	pop	r0
 296:	0f 90       	pop	r0
 298:	df 91       	pop	r29
 29a:	cf 91       	pop	r28
 29c:	ff 91       	pop	r31
 29e:	ef 91       	pop	r30
 2a0:	bf 91       	pop	r27
 2a2:	af 91       	pop	r26
 2a4:	9f 91       	pop	r25
 2a6:	8f 91       	pop	r24
 2a8:	7f 91       	pop	r23
 2aa:	6f 91       	pop	r22
 2ac:	5f 91       	pop	r21
 2ae:	4f 91       	pop	r20
 2b0:	3f 91       	pop	r19
 2b2:	2f 91       	pop	r18
 2b4:	0f 90       	pop	r0
 2b6:	0b be       	out	0x3b, r0	; 59
 2b8:	0f 90       	pop	r0
 2ba:	0f be       	out	0x3f, r0	; 63
 2bc:	0f 90       	pop	r0
 2be:	1f 90       	pop	r1
 2c0:	18 95       	reti

000002c2 <__vector_7>:

ISR(INT6_vect){
 2c2:	1f 92       	push	r1
 2c4:	0f 92       	push	r0
 2c6:	0f b6       	in	r0, 0x3f	; 63
 2c8:	0f 92       	push	r0
 2ca:	11 24       	eor	r1, r1
 2cc:	0b b6       	in	r0, 0x3b	; 59
 2ce:	0f 92       	push	r0
 2d0:	2f 93       	push	r18
 2d2:	3f 93       	push	r19
 2d4:	4f 93       	push	r20
 2d6:	5f 93       	push	r21
 2d8:	6f 93       	push	r22
 2da:	7f 93       	push	r23
 2dc:	8f 93       	push	r24
 2de:	9f 93       	push	r25
 2e0:	af 93       	push	r26
 2e2:	bf 93       	push	r27
 2e4:	ef 93       	push	r30
 2e6:	ff 93       	push	r31
 2e8:	cf 93       	push	r28
 2ea:	df 93       	push	r29
 2ec:	00 d0       	rcall	.+0      	; 0x2ee <__vector_7+0x2c>
 2ee:	cd b7       	in	r28, 0x3d	; 61
 2f0:	de b7       	in	r29, 0x3e	; 62
	char target[] = "6";
 2f2:	86 e3       	ldi	r24, 0x36	; 54
 2f4:	90 e0       	ldi	r25, 0x00	; 0
 2f6:	9a 83       	std	Y+2, r25	; 0x02
 2f8:	89 83       	std	Y+1, r24	; 0x01
	uart_puts(target);
 2fa:	ce 01       	movw	r24, r28
 2fc:	01 96       	adiw	r24, 0x01	; 1
 2fe:	5d d0       	rcall	.+186    	; 0x3ba <uart_puts>
	//SendByMOb2();
}
 300:	0f 90       	pop	r0
 302:	0f 90       	pop	r0
 304:	df 91       	pop	r29
 306:	cf 91       	pop	r28
 308:	ff 91       	pop	r31
 30a:	ef 91       	pop	r30
 30c:	bf 91       	pop	r27
 30e:	af 91       	pop	r26
 310:	9f 91       	pop	r25
 312:	8f 91       	pop	r24
 314:	7f 91       	pop	r23
 316:	6f 91       	pop	r22
 318:	5f 91       	pop	r21
 31a:	4f 91       	pop	r20
 31c:	3f 91       	pop	r19
 31e:	2f 91       	pop	r18
 320:	0f 90       	pop	r0
 322:	0b be       	out	0x3b, r0	; 59
 324:	0f 90       	pop	r0
 326:	0f be       	out	0x3f, r0	; 63
 328:	0f 90       	pop	r0
 32a:	1f 90       	pop	r1
 32c:	18 95       	reti

0000032e <__vector_8>:

ISR(INT7_vect){
 32e:	1f 92       	push	r1
 330:	0f 92       	push	r0
 332:	0f b6       	in	r0, 0x3f	; 63
 334:	0f 92       	push	r0
 336:	11 24       	eor	r1, r1
 338:	0b b6       	in	r0, 0x3b	; 59
 33a:	0f 92       	push	r0
 33c:	2f 93       	push	r18
 33e:	3f 93       	push	r19
 340:	4f 93       	push	r20
 342:	5f 93       	push	r21
 344:	6f 93       	push	r22
 346:	7f 93       	push	r23
 348:	8f 93       	push	r24
 34a:	9f 93       	push	r25
 34c:	af 93       	push	r26
 34e:	bf 93       	push	r27
 350:	ef 93       	push	r30
 352:	ff 93       	push	r31
 354:	cf 93       	push	r28
 356:	df 93       	push	r29
 358:	00 d0       	rcall	.+0      	; 0x35a <__vector_8+0x2c>
 35a:	cd b7       	in	r28, 0x3d	; 61
 35c:	de b7       	in	r29, 0x3e	; 62
	char target[] = "7";
 35e:	87 e3       	ldi	r24, 0x37	; 55
 360:	90 e0       	ldi	r25, 0x00	; 0
 362:	9a 83       	std	Y+2, r25	; 0x02
 364:	89 83       	std	Y+1, r24	; 0x01
	uart_puts(target);
 366:	ce 01       	movw	r24, r28
 368:	01 96       	adiw	r24, 0x01	; 1
 36a:	27 d0       	rcall	.+78     	; 0x3ba <uart_puts>
	//SendByMOb2();
}
 36c:	0f 90       	pop	r0
 36e:	0f 90       	pop	r0
 370:	df 91       	pop	r29
 372:	cf 91       	pop	r28
 374:	ff 91       	pop	r31
 376:	ef 91       	pop	r30
 378:	bf 91       	pop	r27
 37a:	af 91       	pop	r26
 37c:	9f 91       	pop	r25
 37e:	8f 91       	pop	r24
 380:	7f 91       	pop	r23
 382:	6f 91       	pop	r22
 384:	5f 91       	pop	r21
 386:	4f 91       	pop	r20
 388:	3f 91       	pop	r19
 38a:	2f 91       	pop	r18
 38c:	0f 90       	pop	r0
 38e:	0b be       	out	0x3b, r0	; 59
 390:	0f 90       	pop	r0
 392:	0f be       	out	0x3f, r0	; 63
 394:	0f 90       	pop	r0
 396:	1f 90       	pop	r1
 398:	18 95       	reti

0000039a <main>:

 int main()
 {	
	 uart_init();
 39a:	03 d0       	rcall	.+6      	; 0x3a2 <uart_init>
	 buttons_init();
 39c:	0e df       	rcall	.-484    	; 0x1ba <buttons_init>
	 can_init();
 39e:	98 de       	rcall	.-720    	; 0xd0 <can_init>
 3a0:	ff cf       	rjmp	.-2      	; 0x3a0 <main+0x6>

000003a2 <uart_init>:
 3a2:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
#include <avr/io.h>
#include "uart_f.h"

void uart_init(){
	UBRR0H = (BAUD_PRESCALE >> 8); // Load upper 8-bits of the baud rate value into the high byte of the UBRR register
	UBRR0L = BAUD_PRESCALE; // Load lower 8-bits of the baud rate value into the low byte of the UBRR register
 3a6:	83 e3       	ldi	r24, 0x33	; 51
 3a8:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
	UCSR0C = (0<<UMSEL0) | (0<<UPM0) | (1<<USBS0) | (3<<UCSZ0);
 3ac:	8e e0       	ldi	r24, 0x0E	; 14
 3ae:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>
	UCSR0B = (1<<RXEN0) | (1<<TXEN0);
 3b2:	88 e1       	ldi	r24, 0x18	; 24
 3b4:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
 3b8:	08 95       	ret

000003ba <uart_puts>:
}

void uart_puts(char* s){
 3ba:	cf 93       	push	r28
 3bc:	df 93       	push	r29
	int i;
	int len = strlen(s);
 3be:	fc 01       	movw	r30, r24
 3c0:	01 90       	ld	r0, Z+
 3c2:	00 20       	and	r0, r0
 3c4:	e9 f7       	brne	.-6      	; 0x3c0 <uart_puts+0x6>
 3c6:	31 97       	sbiw	r30, 0x01	; 1
 3c8:	e8 1b       	sub	r30, r24
 3ca:	f9 0b       	sbc	r31, r25
	for (i = 0; i < len; i++){
 3cc:	1e 16       	cp	r1, r30
 3ce:	1f 06       	cpc	r1, r31
 3d0:	84 f4       	brge	.+32     	; 0x3f2 <uart_puts+0x38>
 3d2:	dc 01       	movw	r26, r24
 3d4:	9c 01       	movw	r18, r24
 3d6:	2e 0f       	add	r18, r30
 3d8:	3f 1f       	adc	r19, r31
		while(!( UCSR0A & 0X20));
 3da:	e0 ec       	ldi	r30, 0xC0	; 192
 3dc:	f0 e0       	ldi	r31, 0x00	; 0
		UDR0=s[i];
 3de:	c6 ec       	ldi	r28, 0xC6	; 198
 3e0:	d0 e0       	ldi	r29, 0x00	; 0

void uart_puts(char* s){
	int i;
	int len = strlen(s);
	for (i = 0; i < len; i++){
		while(!( UCSR0A & 0X20));
 3e2:	90 81       	ld	r25, Z
 3e4:	95 ff       	sbrs	r25, 5
 3e6:	fd cf       	rjmp	.-6      	; 0x3e2 <uart_puts+0x28>
		UDR0=s[i];
 3e8:	9d 91       	ld	r25, X+
 3ea:	98 83       	st	Y, r25
}

void uart_puts(char* s){
	int i;
	int len = strlen(s);
	for (i = 0; i < len; i++){
 3ec:	a2 17       	cp	r26, r18
 3ee:	b3 07       	cpc	r27, r19
 3f0:	c1 f7       	brne	.-16     	; 0x3e2 <uart_puts+0x28>
		while(!( UCSR0A & 0X20));
		UDR0=s[i];
	}
	while(!( UCSR0A & 0X20)); 
 3f2:	e0 ec       	ldi	r30, 0xC0	; 192
 3f4:	f0 e0       	ldi	r31, 0x00	; 0
 3f6:	80 81       	ld	r24, Z
 3f8:	85 ff       	sbrs	r24, 5
 3fa:	fd cf       	rjmp	.-6      	; 0x3f6 <uart_puts+0x3c>
	UDR0 = 13;
 3fc:	8d e0       	ldi	r24, 0x0D	; 13
 3fe:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
	while(!( UCSR0A & 0X20));
 402:	e0 ec       	ldi	r30, 0xC0	; 192
 404:	f0 e0       	ldi	r31, 0x00	; 0
 406:	80 81       	ld	r24, Z
 408:	85 ff       	sbrs	r24, 5
 40a:	fd cf       	rjmp	.-6      	; 0x406 <__LOCK_REGION_LENGTH__+0x6>
	UDR0 = 10;
 40c:	8a e0       	ldi	r24, 0x0A	; 10
 40e:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
}
 412:	df 91       	pop	r29
 414:	cf 91       	pop	r28
 416:	08 95       	ret

00000418 <_exit>:
 418:	f8 94       	cli

0000041a <__stop_program>:
 41a:	ff cf       	rjmp	.-2      	; 0x41a <__stop_program>
