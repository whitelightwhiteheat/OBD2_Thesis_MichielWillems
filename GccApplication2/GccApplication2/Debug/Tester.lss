
Tester.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000048e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000041a  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000001  00800100  00800100  0000048e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000048e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000004c0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000d0  00000000  00000000  00000500  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000138c  00000000  00000000  000005d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000d61  00000000  00000000  0000195c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000009df  00000000  00000000  000026bd  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000374  00000000  00000000  0000309c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000076b  00000000  00000000  00003410  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000008f7  00000000  00000000  00003b7b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000a0  00000000  00000000  00004472  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	51 c0       	rjmp	.+162    	; 0xa4 <__ctors_end>
   2:	00 00       	nop
   4:	6c c0       	rjmp	.+216    	; 0xde <__bad_interrupt>
   6:	00 00       	nop
   8:	6a c0       	rjmp	.+212    	; 0xde <__bad_interrupt>
   a:	00 00       	nop
   c:	68 c0       	rjmp	.+208    	; 0xde <__bad_interrupt>
   e:	00 00       	nop
  10:	66 c0       	rjmp	.+204    	; 0xde <__bad_interrupt>
  12:	00 00       	nop
  14:	e8 c0       	rjmp	.+464    	; 0x1e6 <__vector_5>
  16:	00 00       	nop
  18:	1f c1       	rjmp	.+574    	; 0x258 <__vector_6>
  1a:	00 00       	nop
  1c:	53 c1       	rjmp	.+678    	; 0x2c4 <__vector_7>
  1e:	00 00       	nop
  20:	87 c1       	rjmp	.+782    	; 0x330 <__vector_8>
  22:	00 00       	nop
  24:	5c c0       	rjmp	.+184    	; 0xde <__bad_interrupt>
  26:	00 00       	nop
  28:	5a c0       	rjmp	.+180    	; 0xde <__bad_interrupt>
  2a:	00 00       	nop
  2c:	58 c0       	rjmp	.+176    	; 0xde <__bad_interrupt>
  2e:	00 00       	nop
  30:	56 c0       	rjmp	.+172    	; 0xde <__bad_interrupt>
  32:	00 00       	nop
  34:	54 c0       	rjmp	.+168    	; 0xde <__bad_interrupt>
  36:	00 00       	nop
  38:	52 c0       	rjmp	.+164    	; 0xde <__bad_interrupt>
  3a:	00 00       	nop
  3c:	50 c0       	rjmp	.+160    	; 0xde <__bad_interrupt>
  3e:	00 00       	nop
  40:	4e c0       	rjmp	.+156    	; 0xde <__bad_interrupt>
  42:	00 00       	nop
  44:	4c c0       	rjmp	.+152    	; 0xde <__bad_interrupt>
  46:	00 00       	nop
  48:	4a c0       	rjmp	.+148    	; 0xde <__bad_interrupt>
  4a:	00 00       	nop
  4c:	48 c0       	rjmp	.+144    	; 0xde <__bad_interrupt>
  4e:	00 00       	nop
  50:	46 c0       	rjmp	.+140    	; 0xde <__bad_interrupt>
  52:	00 00       	nop
  54:	44 c0       	rjmp	.+136    	; 0xde <__bad_interrupt>
  56:	00 00       	nop
  58:	42 c0       	rjmp	.+132    	; 0xde <__bad_interrupt>
  5a:	00 00       	nop
  5c:	40 c0       	rjmp	.+128    	; 0xde <__bad_interrupt>
  5e:	00 00       	nop
  60:	3e c0       	rjmp	.+124    	; 0xde <__bad_interrupt>
  62:	00 00       	nop
  64:	3c c0       	rjmp	.+120    	; 0xde <__bad_interrupt>
  66:	00 00       	nop
  68:	3a c0       	rjmp	.+116    	; 0xde <__bad_interrupt>
  6a:	00 00       	nop
  6c:	38 c0       	rjmp	.+112    	; 0xde <__bad_interrupt>
  6e:	00 00       	nop
  70:	36 c0       	rjmp	.+108    	; 0xde <__bad_interrupt>
  72:	00 00       	nop
  74:	34 c0       	rjmp	.+104    	; 0xde <__bad_interrupt>
  76:	00 00       	nop
  78:	32 c0       	rjmp	.+100    	; 0xde <__bad_interrupt>
  7a:	00 00       	nop
  7c:	30 c0       	rjmp	.+96     	; 0xde <__bad_interrupt>
  7e:	00 00       	nop
  80:	2e c0       	rjmp	.+92     	; 0xde <__bad_interrupt>
  82:	00 00       	nop
  84:	2c c0       	rjmp	.+88     	; 0xde <__bad_interrupt>
  86:	00 00       	nop
  88:	2a c0       	rjmp	.+84     	; 0xde <__bad_interrupt>
  8a:	00 00       	nop
  8c:	28 c0       	rjmp	.+80     	; 0xde <__bad_interrupt>
  8e:	00 00       	nop
  90:	26 c0       	rjmp	.+76     	; 0xde <__bad_interrupt>
  92:	00 00       	nop
  94:	78 00       	.word	0x0078	; ????
  96:	7b 00       	.word	0x007b	; ????
  98:	7e 00       	.word	0x007e	; ????
  9a:	81 00       	.word	0x0081	; ????
  9c:	84 00       	.word	0x0084	; ????
  9e:	87 00       	.word	0x0087	; ????
  a0:	8a 00       	.word	0x008a	; ????
  a2:	8d 00       	.word	0x008d	; ????

000000a4 <__ctors_end>:
  a4:	11 24       	eor	r1, r1
  a6:	1f be       	out	0x3f, r1	; 63
  a8:	cf ef       	ldi	r28, 0xFF	; 255
  aa:	d0 e1       	ldi	r29, 0x10	; 16
  ac:	de bf       	out	0x3e, r29	; 62
  ae:	cd bf       	out	0x3d, r28	; 61

000000b0 <__do_copy_data>:
  b0:	11 e0       	ldi	r17, 0x01	; 1
  b2:	a0 e0       	ldi	r26, 0x00	; 0
  b4:	b1 e0       	ldi	r27, 0x01	; 1
  b6:	ea e1       	ldi	r30, 0x1A	; 26
  b8:	f4 e0       	ldi	r31, 0x04	; 4
  ba:	00 e0       	ldi	r16, 0x00	; 0
  bc:	0b bf       	out	0x3b, r16	; 59
  be:	02 c0       	rjmp	.+4      	; 0xc4 <__do_copy_data+0x14>
  c0:	07 90       	elpm	r0, Z+
  c2:	0d 92       	st	X+, r0
  c4:	a0 30       	cpi	r26, 0x00	; 0
  c6:	b1 07       	cpc	r27, r17
  c8:	d9 f7       	brne	.-10     	; 0xc0 <__do_copy_data+0x10>

000000ca <__do_clear_bss>:
  ca:	21 e0       	ldi	r18, 0x01	; 1
  cc:	a0 e0       	ldi	r26, 0x00	; 0
  ce:	b1 e0       	ldi	r27, 0x01	; 1
  d0:	01 c0       	rjmp	.+2      	; 0xd4 <.do_clear_bss_start>

000000d2 <.do_clear_bss_loop>:
  d2:	1d 92       	st	X+, r1

000000d4 <.do_clear_bss_start>:
  d4:	a1 30       	cpi	r26, 0x01	; 1
  d6:	b2 07       	cpc	r27, r18
  d8:	e1 f7       	brne	.-8      	; 0xd2 <.do_clear_bss_loop>
  da:	60 d1       	rcall	.+704    	; 0x39c <main>
  dc:	9c c1       	rjmp	.+824    	; 0x416 <_exit>

000000de <__bad_interrupt>:
  de:	90 cf       	rjmp	.-224    	; 0x0 <__vectors>

000000e0 <light_led>:
 */ 

#include <avr/io.h>

void light_led( uint8_t nr){
	switch (nr){
  e0:	90 e0       	ldi	r25, 0x00	; 0
  e2:	88 30       	cpi	r24, 0x08	; 8
  e4:	91 05       	cpc	r25, r1
  e6:	d8 f4       	brcc	.+54     	; 0x11e <light_led+0x3e>
  e8:	fc 01       	movw	r30, r24
  ea:	e6 5b       	subi	r30, 0xB6	; 182
  ec:	ff 4f       	sbci	r31, 0xFF	; 255
  ee:	8a c1       	rjmp	.+788    	; 0x404 <__tablejump2__>
		case 0:
		PORTA |= 1 << PORTA0;
  f0:	10 9a       	sbi	0x02, 0	; 2
		DDRA |= 1 << DDA0;
  f2:	08 9a       	sbi	0x01, 0	; 1
		break;
  f4:	08 95       	ret
		case 1:
		PORTA |= 1 << PORTA1;
  f6:	11 9a       	sbi	0x02, 1	; 2
		DDRA |= 1 << DDA1;
  f8:	09 9a       	sbi	0x01, 1	; 1
		break;
  fa:	08 95       	ret
		case 2:
		PORTA |= 1 << PORTA2;
  fc:	12 9a       	sbi	0x02, 2	; 2
		DDRA |= 1 << DDA2;
  fe:	0a 9a       	sbi	0x01, 2	; 1
		break;
 100:	08 95       	ret
		case 3:
		PORTA |= 1 << PORTA3;
 102:	13 9a       	sbi	0x02, 3	; 2
		DDRA |= 1 << DDA3;
 104:	0b 9a       	sbi	0x01, 3	; 1
		break;
 106:	08 95       	ret
		case 4:
		PORTA |= 1 << PORTA4;
 108:	14 9a       	sbi	0x02, 4	; 2
		DDRA |= 1 << DDA4;
 10a:	0c 9a       	sbi	0x01, 4	; 1
		break;
 10c:	08 95       	ret
		case 5:
		PORTA |= 1 << PORTA5;
 10e:	15 9a       	sbi	0x02, 5	; 2
		DDRA |= 1 << DDA5;
 110:	0d 9a       	sbi	0x01, 5	; 1
		break;
 112:	08 95       	ret
		case 6:
		PORTA |= 1 << PORTA6;
 114:	16 9a       	sbi	0x02, 6	; 2
		DDRA |= 1 << DDA6;
 116:	0e 9a       	sbi	0x01, 6	; 1
		break;
 118:	08 95       	ret
		case 7:
		PORTA |= 1 << PORTA7;
 11a:	17 9a       	sbi	0x02, 7	; 2
		DDRA |= 1 << DDA7;
 11c:	0f 9a       	sbi	0x01, 7	; 1
 11e:	08 95       	ret

00000120 <buttons_init>:
		uart_puts("verify failed");
		return;
	}
	printf("\n");
	uart_puts("Keys Match!");
}
 120:	1d b8       	out	0x0d, r1	; 13
 122:	80 ef       	ldi	r24, 0xF0	; 240
 124:	8e b9       	out	0x0e, r24	; 14
 126:	9f ef       	ldi	r25, 0xFF	; 255
 128:	90 93 6a 00 	sts	0x006A, r25	; 0x80006a <__TEXT_REGION_LENGTH__+0x7e006a>
 12c:	8d bb       	out	0x1d, r24	; 29
 12e:	08 95       	ret

00000130 <CAN_INIT>:
 130:	cf 93       	push	r28
 132:	df 93       	push	r29
 134:	f8 94       	cli
 136:	81 e0       	ldi	r24, 0x01	; 1
 138:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
 13c:	80 ea       	ldi	r24, 0xA0	; 160
 13e:	80 93 db 00 	sts	0x00DB, r24	; 0x8000db <__TEXT_REGION_LENGTH__+0x7e00db>
 142:	82 e0       	ldi	r24, 0x02	; 2
 144:	80 93 de 00 	sts	0x00DE, r24	; 0x8000de <__TEXT_REGION_LENGTH__+0x7e00de>
 148:	10 92 df 00 	sts	0x00DF, r1	; 0x8000df <__TEXT_REGION_LENGTH__+0x7e00df>
 14c:	10 92 da 00 	sts	0x00DA, r1	; 0x8000da <__TEXT_REGION_LENGTH__+0x7e00da>
 150:	80 e0       	ldi	r24, 0x00	; 0
 152:	cd ee       	ldi	r28, 0xED	; 237
 154:	d0 e0       	ldi	r29, 0x00	; 0
 156:	af ee       	ldi	r26, 0xEF	; 239
 158:	b0 e0       	ldi	r27, 0x00	; 0
 15a:	ee ee       	ldi	r30, 0xEE	; 238
 15c:	f0 e0       	ldi	r31, 0x00	; 0
 15e:	98 2f       	mov	r25, r24
 160:	92 95       	swap	r25
 162:	90 7f       	andi	r25, 0xF0	; 240
 164:	98 83       	st	Y, r25
 166:	1c 92       	st	X, r1
 168:	10 82       	st	Z, r1
 16a:	8f 5f       	subi	r24, 0xFF	; 255
 16c:	8f 30       	cpi	r24, 0x0F	; 15
 16e:	b9 f7       	brne	.-18     	; 0x15e <CAN_INIT+0x2e>
 170:	86 e0       	ldi	r24, 0x06	; 6
 172:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
 176:	8c e0       	ldi	r24, 0x0C	; 12
 178:	80 93 e3 00 	sts	0x00E3, r24	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7e00e3>
 17c:	87 e3       	ldi	r24, 0x37	; 55
 17e:	80 93 e4 00 	sts	0x00E4, r24	; 0x8000e4 <__TEXT_REGION_LENGTH__+0x7e00e4>
 182:	10 92 e5 00 	sts	0x00E5, r1	; 0x8000e5 <__TEXT_REGION_LENGTH__+0x7e00e5>
 186:	82 e0       	ldi	r24, 0x02	; 2
 188:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
 18c:	10 92 ed 00 	sts	0x00ED, r1	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7e00ed>
 190:	10 92 f3 00 	sts	0x00F3, r1	; 0x8000f3 <__TEXT_REGION_LENGTH__+0x7e00f3>
 194:	10 92 f2 00 	sts	0x00F2, r1	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7e00f2>
 198:	10 92 f1 00 	sts	0x00F1, r1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
 19c:	10 92 f0 00 	sts	0x00F0, r1	; 0x8000f0 <__TEXT_REGION_LENGTH__+0x7e00f0>
 1a0:	10 92 f7 00 	sts	0x00F7, r1	; 0x8000f7 <__TEXT_REGION_LENGTH__+0x7e00f7>
 1a4:	10 92 f6 00 	sts	0x00F6, r1	; 0x8000f6 <__TEXT_REGION_LENGTH__+0x7e00f6>
 1a8:	10 92 f5 00 	sts	0x00F5, r1	; 0x8000f5 <__TEXT_REGION_LENGTH__+0x7e00f5>
 1ac:	10 92 f4 00 	sts	0x00F4, r1	; 0x8000f4 <__TEXT_REGION_LENGTH__+0x7e00f4>
 1b0:	88 e8       	ldi	r24, 0x88	; 136
 1b2:	80 93 ef 00 	sts	0x00EF, r24	; 0x8000ef <__TEXT_REGION_LENGTH__+0x7e00ef>
 1b6:	78 94       	sei
 1b8:	df 91       	pop	r29
 1ba:	cf 91       	pop	r28
 1bc:	08 95       	ret

000001be <init_authentication>:
 1be:	80 e2       	ldi	r24, 0x20	; 32
 1c0:	80 93 ed 00 	sts	0x00ED, r24	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7e00ed>
 1c4:	88 e0       	ldi	r24, 0x08	; 8
 1c6:	90 e0       	ldi	r25, 0x00	; 0
 1c8:	ea ef       	ldi	r30, 0xFA	; 250
 1ca:	f0 e0       	ldi	r31, 0x00	; 0
 1cc:	2f ef       	ldi	r18, 0xFF	; 255
 1ce:	20 83       	st	Z, r18
 1d0:	01 97       	sbiw	r24, 0x01	; 1
 1d2:	e9 f7       	brne	.-6      	; 0x1ce <init_authentication+0x10>
 1d4:	84 e0       	ldi	r24, 0x04	; 4
 1d6:	80 93 f0 00 	sts	0x00F0, r24	; 0x8000f0 <__TEXT_REGION_LENGTH__+0x7e00f0>
 1da:	80 e4       	ldi	r24, 0x40	; 64
 1dc:	80 93 ef 00 	sts	0x00EF, r24	; 0x8000ef <__TEXT_REGION_LENGTH__+0x7e00ef>
 1e0:	81 e0       	ldi	r24, 0x01	; 1
 1e2:	7e cf       	rjmp	.-260    	; 0xe0 <light_led>
 1e4:	08 95       	ret

000001e6 <__vector_5>:


	
ISR(INT4_vect){
 1e6:	1f 92       	push	r1
 1e8:	0f 92       	push	r0
 1ea:	0f b6       	in	r0, 0x3f	; 63
 1ec:	0f 92       	push	r0
 1ee:	11 24       	eor	r1, r1
 1f0:	0b b6       	in	r0, 0x3b	; 59
 1f2:	0f 92       	push	r0
 1f4:	2f 93       	push	r18
 1f6:	3f 93       	push	r19
 1f8:	4f 93       	push	r20
 1fa:	5f 93       	push	r21
 1fc:	6f 93       	push	r22
 1fe:	7f 93       	push	r23
 200:	8f 93       	push	r24
 202:	9f 93       	push	r25
 204:	af 93       	push	r26
 206:	bf 93       	push	r27
 208:	ef 93       	push	r30
 20a:	ff 93       	push	r31
 20c:	cf 93       	push	r28
 20e:	df 93       	push	r29
 210:	00 d0       	rcall	.+0      	; 0x212 <__vector_5+0x2c>
 212:	cd b7       	in	r28, 0x3d	; 61
 214:	de b7       	in	r29, 0x3e	; 62
	event = AUTH_E;
 216:	81 e0       	ldi	r24, 0x01	; 1
 218:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_end>
	char target[] = "4";
 21c:	84 e3       	ldi	r24, 0x34	; 52
 21e:	90 e0       	ldi	r25, 0x00	; 0
 220:	9a 83       	std	Y+2, r25	; 0x02
 222:	89 83       	std	Y+1, r24	; 0x01
	uart_puts(target);
 224:	ce 01       	movw	r24, r28
 226:	01 96       	adiw	r24, 0x01	; 1
 228:	ce d0       	rcall	.+412    	; 0x3c6 <uart_puts>
	//SendByMOb2();
}
 22a:	0f 90       	pop	r0
 22c:	0f 90       	pop	r0
 22e:	df 91       	pop	r29
 230:	cf 91       	pop	r28
 232:	ff 91       	pop	r31
 234:	ef 91       	pop	r30
 236:	bf 91       	pop	r27
 238:	af 91       	pop	r26
 23a:	9f 91       	pop	r25
 23c:	8f 91       	pop	r24
 23e:	7f 91       	pop	r23
 240:	6f 91       	pop	r22
 242:	5f 91       	pop	r21
 244:	4f 91       	pop	r20
 246:	3f 91       	pop	r19
 248:	2f 91       	pop	r18
 24a:	0f 90       	pop	r0
 24c:	0b be       	out	0x3b, r0	; 59
 24e:	0f 90       	pop	r0
 250:	0f be       	out	0x3f, r0	; 63
 252:	0f 90       	pop	r0
 254:	1f 90       	pop	r1
 256:	18 95       	reti

00000258 <__vector_6>:

ISR(INT5_vect){
 258:	1f 92       	push	r1
 25a:	0f 92       	push	r0
 25c:	0f b6       	in	r0, 0x3f	; 63
 25e:	0f 92       	push	r0
 260:	11 24       	eor	r1, r1
 262:	0b b6       	in	r0, 0x3b	; 59
 264:	0f 92       	push	r0
 266:	2f 93       	push	r18
 268:	3f 93       	push	r19
 26a:	4f 93       	push	r20
 26c:	5f 93       	push	r21
 26e:	6f 93       	push	r22
 270:	7f 93       	push	r23
 272:	8f 93       	push	r24
 274:	9f 93       	push	r25
 276:	af 93       	push	r26
 278:	bf 93       	push	r27
 27a:	ef 93       	push	r30
 27c:	ff 93       	push	r31
 27e:	cf 93       	push	r28
 280:	df 93       	push	r29
 282:	00 d0       	rcall	.+0      	; 0x284 <__vector_6+0x2c>
 284:	cd b7       	in	r28, 0x3d	; 61
 286:	de b7       	in	r29, 0x3e	; 62
	char target[] = "5";
 288:	85 e3       	ldi	r24, 0x35	; 53
 28a:	90 e0       	ldi	r25, 0x00	; 0
 28c:	9a 83       	std	Y+2, r25	; 0x02
 28e:	89 83       	std	Y+1, r24	; 0x01
	uart_puts(target);
 290:	ce 01       	movw	r24, r28
 292:	01 96       	adiw	r24, 0x01	; 1
 294:	98 d0       	rcall	.+304    	; 0x3c6 <uart_puts>
	//SendByMOb2();
}
 296:	0f 90       	pop	r0
 298:	0f 90       	pop	r0
 29a:	df 91       	pop	r29
 29c:	cf 91       	pop	r28
 29e:	ff 91       	pop	r31
 2a0:	ef 91       	pop	r30
 2a2:	bf 91       	pop	r27
 2a4:	af 91       	pop	r26
 2a6:	9f 91       	pop	r25
 2a8:	8f 91       	pop	r24
 2aa:	7f 91       	pop	r23
 2ac:	6f 91       	pop	r22
 2ae:	5f 91       	pop	r21
 2b0:	4f 91       	pop	r20
 2b2:	3f 91       	pop	r19
 2b4:	2f 91       	pop	r18
 2b6:	0f 90       	pop	r0
 2b8:	0b be       	out	0x3b, r0	; 59
 2ba:	0f 90       	pop	r0
 2bc:	0f be       	out	0x3f, r0	; 63
 2be:	0f 90       	pop	r0
 2c0:	1f 90       	pop	r1
 2c2:	18 95       	reti

000002c4 <__vector_7>:

ISR(INT6_vect){
 2c4:	1f 92       	push	r1
 2c6:	0f 92       	push	r0
 2c8:	0f b6       	in	r0, 0x3f	; 63
 2ca:	0f 92       	push	r0
 2cc:	11 24       	eor	r1, r1
 2ce:	0b b6       	in	r0, 0x3b	; 59
 2d0:	0f 92       	push	r0
 2d2:	2f 93       	push	r18
 2d4:	3f 93       	push	r19
 2d6:	4f 93       	push	r20
 2d8:	5f 93       	push	r21
 2da:	6f 93       	push	r22
 2dc:	7f 93       	push	r23
 2de:	8f 93       	push	r24
 2e0:	9f 93       	push	r25
 2e2:	af 93       	push	r26
 2e4:	bf 93       	push	r27
 2e6:	ef 93       	push	r30
 2e8:	ff 93       	push	r31
 2ea:	cf 93       	push	r28
 2ec:	df 93       	push	r29
 2ee:	00 d0       	rcall	.+0      	; 0x2f0 <__vector_7+0x2c>
 2f0:	cd b7       	in	r28, 0x3d	; 61
 2f2:	de b7       	in	r29, 0x3e	; 62
	char target[] = "6";
 2f4:	86 e3       	ldi	r24, 0x36	; 54
 2f6:	90 e0       	ldi	r25, 0x00	; 0
 2f8:	9a 83       	std	Y+2, r25	; 0x02
 2fa:	89 83       	std	Y+1, r24	; 0x01
	uart_puts(target);
 2fc:	ce 01       	movw	r24, r28
 2fe:	01 96       	adiw	r24, 0x01	; 1
 300:	62 d0       	rcall	.+196    	; 0x3c6 <uart_puts>
	//SendByMOb2();
}
 302:	0f 90       	pop	r0
 304:	0f 90       	pop	r0
 306:	df 91       	pop	r29
 308:	cf 91       	pop	r28
 30a:	ff 91       	pop	r31
 30c:	ef 91       	pop	r30
 30e:	bf 91       	pop	r27
 310:	af 91       	pop	r26
 312:	9f 91       	pop	r25
 314:	8f 91       	pop	r24
 316:	7f 91       	pop	r23
 318:	6f 91       	pop	r22
 31a:	5f 91       	pop	r21
 31c:	4f 91       	pop	r20
 31e:	3f 91       	pop	r19
 320:	2f 91       	pop	r18
 322:	0f 90       	pop	r0
 324:	0b be       	out	0x3b, r0	; 59
 326:	0f 90       	pop	r0
 328:	0f be       	out	0x3f, r0	; 63
 32a:	0f 90       	pop	r0
 32c:	1f 90       	pop	r1
 32e:	18 95       	reti

00000330 <__vector_8>:

ISR(INT7_vect){
 330:	1f 92       	push	r1
 332:	0f 92       	push	r0
 334:	0f b6       	in	r0, 0x3f	; 63
 336:	0f 92       	push	r0
 338:	11 24       	eor	r1, r1
 33a:	0b b6       	in	r0, 0x3b	; 59
 33c:	0f 92       	push	r0
 33e:	2f 93       	push	r18
 340:	3f 93       	push	r19
 342:	4f 93       	push	r20
 344:	5f 93       	push	r21
 346:	6f 93       	push	r22
 348:	7f 93       	push	r23
 34a:	8f 93       	push	r24
 34c:	9f 93       	push	r25
 34e:	af 93       	push	r26
 350:	bf 93       	push	r27
 352:	ef 93       	push	r30
 354:	ff 93       	push	r31
 356:	cf 93       	push	r28
 358:	df 93       	push	r29
 35a:	00 d0       	rcall	.+0      	; 0x35c <__vector_8+0x2c>
 35c:	cd b7       	in	r28, 0x3d	; 61
 35e:	de b7       	in	r29, 0x3e	; 62
	char target[] = "7";
 360:	87 e3       	ldi	r24, 0x37	; 55
 362:	90 e0       	ldi	r25, 0x00	; 0
 364:	9a 83       	std	Y+2, r25	; 0x02
 366:	89 83       	std	Y+1, r24	; 0x01
	uart_puts(target);
 368:	ce 01       	movw	r24, r28
 36a:	01 96       	adiw	r24, 0x01	; 1
 36c:	2c d0       	rcall	.+88     	; 0x3c6 <uart_puts>
	//SendByMOb2();
}
 36e:	0f 90       	pop	r0
 370:	0f 90       	pop	r0
 372:	df 91       	pop	r29
 374:	cf 91       	pop	r28
 376:	ff 91       	pop	r31
 378:	ef 91       	pop	r30
 37a:	bf 91       	pop	r27
 37c:	af 91       	pop	r26
 37e:	9f 91       	pop	r25
 380:	8f 91       	pop	r24
 382:	7f 91       	pop	r23
 384:	6f 91       	pop	r22
 386:	5f 91       	pop	r21
 388:	4f 91       	pop	r20
 38a:	3f 91       	pop	r19
 38c:	2f 91       	pop	r18
 38e:	0f 90       	pop	r0
 390:	0b be       	out	0x3b, r0	; 59
 392:	0f 90       	pop	r0
 394:	0f be       	out	0x3f, r0	; 63
 396:	0f 90       	pop	r0
 398:	1f 90       	pop	r1
 39a:	18 95       	reti

0000039c <main>:

 int main()
 {	
	 uart_init();
 39c:	08 d0       	rcall	.+16     	; 0x3ae <uart_init>
	 buttons_init();
 39e:	c0 de       	rcall	.-640    	; 0x120 <buttons_init>
	 CAN_INIT();
 3a0:	c7 de       	rcall	.-626    	; 0x130 <CAN_INIT>
 3a2:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_end>
	 
	 while(1){
		 switch (event)
 3a6:	81 30       	cpi	r24, 0x01	; 1
 3a8:	e1 f7       	brne	.-8      	; 0x3a2 <main+0x6>
		 {
		 case AUTH_E :
			init_authentication();
 3aa:	09 df       	rcall	.-494    	; 0x1be <init_authentication>
 3ac:	fa cf       	rjmp	.-12     	; 0x3a2 <main+0x6>

000003ae <uart_init>:
		 	break;
 3ae:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
#include <avr/io.h>
#include "uart_f.h"

void uart_init(){
	UBRR0H = (BAUD_PRESCALE >> 8); // Load upper 8-bits of the baud rate value into the high byte of the UBRR register
	UBRR0L = BAUD_PRESCALE; // Load lower 8-bits of the baud rate value into the low byte of the UBRR register
 3b2:	83 e3       	ldi	r24, 0x33	; 51
 3b4:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
	UCSR0C = (0<<UMSEL0) | (0<<UPM0) | (1<<USBS0) | (3<<UCSZ0);
 3b8:	8e e0       	ldi	r24, 0x0E	; 14
 3ba:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>
	UCSR0B = (1<<RXEN0) | (1<<TXEN0);
 3be:	88 e1       	ldi	r24, 0x18	; 24
 3c0:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
 3c4:	08 95       	ret

000003c6 <uart_puts>:
}

void uart_puts(char* s){
 3c6:	cf 93       	push	r28
 3c8:	df 93       	push	r29
	int i;
	int len = strlen(s);
 3ca:	fc 01       	movw	r30, r24
 3cc:	01 90       	ld	r0, Z+
 3ce:	00 20       	and	r0, r0
 3d0:	e9 f7       	brne	.-6      	; 0x3cc <uart_puts+0x6>
 3d2:	31 97       	sbiw	r30, 0x01	; 1
 3d4:	e8 1b       	sub	r30, r24
 3d6:	f9 0b       	sbc	r31, r25
	for (i = 0; i < len; i++){
 3d8:	1e 16       	cp	r1, r30
 3da:	1f 06       	cpc	r1, r31
 3dc:	84 f4       	brge	.+32     	; 0x3fe <uart_puts+0x38>
 3de:	dc 01       	movw	r26, r24
 3e0:	9c 01       	movw	r18, r24
 3e2:	2e 0f       	add	r18, r30
 3e4:	3f 1f       	adc	r19, r31
		while(!( UCSR0A & 0X20));
 3e6:	e0 ec       	ldi	r30, 0xC0	; 192
 3e8:	f0 e0       	ldi	r31, 0x00	; 0
		UDR0=s[i];
 3ea:	c6 ec       	ldi	r28, 0xC6	; 198
 3ec:	d0 e0       	ldi	r29, 0x00	; 0

void uart_puts(char* s){
	int i;
	int len = strlen(s);
	for (i = 0; i < len; i++){
		while(!( UCSR0A & 0X20));
 3ee:	90 81       	ld	r25, Z
 3f0:	95 ff       	sbrs	r25, 5
 3f2:	fd cf       	rjmp	.-6      	; 0x3ee <uart_puts+0x28>
		UDR0=s[i];
 3f4:	9d 91       	ld	r25, X+
 3f6:	98 83       	st	Y, r25
}

void uart_puts(char* s){
	int i;
	int len = strlen(s);
	for (i = 0; i < len; i++){
 3f8:	a2 17       	cp	r26, r18
 3fa:	b3 07       	cpc	r27, r19
 3fc:	c1 f7       	brne	.-16     	; 0x3ee <uart_puts+0x28>
		while(!( UCSR0A & 0X20));
		UDR0=s[i];
	}
}
 3fe:	df 91       	pop	r29
 400:	cf 91       	pop	r28
 402:	08 95       	ret

00000404 <__tablejump2__>:
 404:	ee 0f       	add	r30, r30
 406:	ff 1f       	adc	r31, r31
 408:	00 24       	eor	r0, r0
 40a:	00 1c       	adc	r0, r0
 40c:	0b be       	out	0x3b, r0	; 59
 40e:	07 90       	elpm	r0, Z+
 410:	f6 91       	elpm	r31, Z
 412:	e0 2d       	mov	r30, r0
 414:	09 94       	ijmp

00000416 <_exit>:
 416:	f8 94       	cli

00000418 <__stop_program>:
 418:	ff cf       	rjmp	.-2      	; 0x418 <__stop_program>
