
Tester.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000026  00800100  000004da  0000056e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000004da  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000001  00800126  00800126  00000594  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000594  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000005c4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000100  00000000  00000000  00000604  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000016e2  00000000  00000000  00000704  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000eaa  00000000  00000000  00001de6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000b53  00000000  00000000  00002c90  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000400  00000000  00000000  000037e4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000007d2  00000000  00000000  00003be4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000cb3  00000000  00000000  000043b6  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000c0  00000000  00000000  00005069  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	49 c0       	rjmp	.+146    	; 0x94 <__ctors_end>
   2:	00 00       	nop
   4:	64 c0       	rjmp	.+200    	; 0xce <__bad_interrupt>
   6:	00 00       	nop
   8:	62 c0       	rjmp	.+196    	; 0xce <__bad_interrupt>
   a:	00 00       	nop
   c:	60 c0       	rjmp	.+192    	; 0xce <__bad_interrupt>
   e:	00 00       	nop
  10:	5e c0       	rjmp	.+188    	; 0xce <__bad_interrupt>
  12:	00 00       	nop
  14:	31 c1       	rjmp	.+610    	; 0x278 <__vector_5>
  16:	00 00       	nop
  18:	7d c1       	rjmp	.+762    	; 0x314 <__vector_6>
  1a:	00 00       	nop
  1c:	b1 c1       	rjmp	.+866    	; 0x380 <__vector_7>
  1e:	00 00       	nop
  20:	e5 c1       	rjmp	.+970    	; 0x3ec <__vector_8>
  22:	00 00       	nop
  24:	54 c0       	rjmp	.+168    	; 0xce <__bad_interrupt>
  26:	00 00       	nop
  28:	52 c0       	rjmp	.+164    	; 0xce <__bad_interrupt>
  2a:	00 00       	nop
  2c:	50 c0       	rjmp	.+160    	; 0xce <__bad_interrupt>
  2e:	00 00       	nop
  30:	4e c0       	rjmp	.+156    	; 0xce <__bad_interrupt>
  32:	00 00       	nop
  34:	4c c0       	rjmp	.+152    	; 0xce <__bad_interrupt>
  36:	00 00       	nop
  38:	4a c0       	rjmp	.+148    	; 0xce <__bad_interrupt>
  3a:	00 00       	nop
  3c:	48 c0       	rjmp	.+144    	; 0xce <__bad_interrupt>
  3e:	00 00       	nop
  40:	46 c0       	rjmp	.+140    	; 0xce <__bad_interrupt>
  42:	00 00       	nop
  44:	44 c0       	rjmp	.+136    	; 0xce <__bad_interrupt>
  46:	00 00       	nop
  48:	42 c0       	rjmp	.+132    	; 0xce <__bad_interrupt>
  4a:	00 00       	nop
  4c:	40 c0       	rjmp	.+128    	; 0xce <__bad_interrupt>
  4e:	00 00       	nop
  50:	3e c0       	rjmp	.+124    	; 0xce <__bad_interrupt>
  52:	00 00       	nop
  54:	3c c0       	rjmp	.+120    	; 0xce <__bad_interrupt>
  56:	00 00       	nop
  58:	3a c0       	rjmp	.+116    	; 0xce <__bad_interrupt>
  5a:	00 00       	nop
  5c:	38 c0       	rjmp	.+112    	; 0xce <__bad_interrupt>
  5e:	00 00       	nop
  60:	36 c0       	rjmp	.+108    	; 0xce <__bad_interrupt>
  62:	00 00       	nop
  64:	34 c0       	rjmp	.+104    	; 0xce <__bad_interrupt>
  66:	00 00       	nop
  68:	32 c0       	rjmp	.+100    	; 0xce <__bad_interrupt>
  6a:	00 00       	nop
  6c:	30 c0       	rjmp	.+96     	; 0xce <__bad_interrupt>
  6e:	00 00       	nop
  70:	2e c0       	rjmp	.+92     	; 0xce <__bad_interrupt>
  72:	00 00       	nop
  74:	2c c0       	rjmp	.+88     	; 0xce <__bad_interrupt>
  76:	00 00       	nop
  78:	2a c0       	rjmp	.+84     	; 0xce <__bad_interrupt>
  7a:	00 00       	nop
  7c:	28 c0       	rjmp	.+80     	; 0xce <__bad_interrupt>
  7e:	00 00       	nop
  80:	26 c0       	rjmp	.+76     	; 0xce <__bad_interrupt>
  82:	00 00       	nop
  84:	24 c0       	rjmp	.+72     	; 0xce <__bad_interrupt>
  86:	00 00       	nop
  88:	22 c0       	rjmp	.+68     	; 0xce <__bad_interrupt>
  8a:	00 00       	nop
  8c:	20 c0       	rjmp	.+64     	; 0xce <__bad_interrupt>
  8e:	00 00       	nop
  90:	1e c0       	rjmp	.+60     	; 0xce <__bad_interrupt>
	...

00000094 <__ctors_end>:
  94:	11 24       	eor	r1, r1
  96:	1f be       	out	0x3f, r1	; 63
  98:	cf ef       	ldi	r28, 0xFF	; 255
  9a:	d0 e1       	ldi	r29, 0x10	; 16
  9c:	de bf       	out	0x3e, r29	; 62
  9e:	cd bf       	out	0x3d, r28	; 61

000000a0 <__do_copy_data>:
  a0:	11 e0       	ldi	r17, 0x01	; 1
  a2:	a0 e0       	ldi	r26, 0x00	; 0
  a4:	b1 e0       	ldi	r27, 0x01	; 1
  a6:	ea ed       	ldi	r30, 0xDA	; 218
  a8:	f4 e0       	ldi	r31, 0x04	; 4
  aa:	00 e0       	ldi	r16, 0x00	; 0
  ac:	0b bf       	out	0x3b, r16	; 59
  ae:	02 c0       	rjmp	.+4      	; 0xb4 <__do_copy_data+0x14>
  b0:	07 90       	elpm	r0, Z+
  b2:	0d 92       	st	X+, r0
  b4:	a6 32       	cpi	r26, 0x26	; 38
  b6:	b1 07       	cpc	r27, r17
  b8:	d9 f7       	brne	.-10     	; 0xb0 <__do_copy_data+0x10>

000000ba <__do_clear_bss>:
  ba:	21 e0       	ldi	r18, 0x01	; 1
  bc:	a6 e2       	ldi	r26, 0x26	; 38
  be:	b1 e0       	ldi	r27, 0x01	; 1
  c0:	01 c0       	rjmp	.+2      	; 0xc4 <.do_clear_bss_start>

000000c2 <.do_clear_bss_loop>:
  c2:	1d 92       	st	X+, r1

000000c4 <.do_clear_bss_start>:
  c4:	a7 32       	cpi	r26, 0x27	; 39
  c6:	b2 07       	cpc	r27, r18
  c8:	e1 f7       	brne	.-8      	; 0xc2 <.do_clear_bss_loop>
  ca:	c6 d1       	rcall	.+908    	; 0x458 <main>
  cc:	04 c2       	rjmp	.+1032   	; 0x4d6 <_exit>

000000ce <__bad_interrupt>:
  ce:	98 cf       	rjmp	.-208    	; 0x0 <__vectors>

000000d0 <can_init>:
	//CAN standard rev 2.0 A (identifiers length = 11 bits)
	CANCDMOB = (1 << CONMOB1) | (1 << DLC3); //enable reception and data length code = 8 bytes

	sei();

}
  d0:	cf 93       	push	r28
  d2:	df 93       	push	r29
  d4:	f8 94       	cli
  d6:	81 e0       	ldi	r24, 0x01	; 1
  d8:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
  dc:	80 ea       	ldi	r24, 0xA0	; 160
  de:	80 93 db 00 	sts	0x00DB, r24	; 0x8000db <__TEXT_REGION_LENGTH__+0x7e00db>
  e2:	10 92 da 00 	sts	0x00DA, r1	; 0x8000da <__TEXT_REGION_LENGTH__+0x7e00da>
  e6:	80 e0       	ldi	r24, 0x00	; 0
  e8:	cd ee       	ldi	r28, 0xED	; 237
  ea:	d0 e0       	ldi	r29, 0x00	; 0
  ec:	af ee       	ldi	r26, 0xEF	; 239
  ee:	b0 e0       	ldi	r27, 0x00	; 0
  f0:	ee ee       	ldi	r30, 0xEE	; 238
  f2:	f0 e0       	ldi	r31, 0x00	; 0
  f4:	98 2f       	mov	r25, r24
  f6:	92 95       	swap	r25
  f8:	90 7f       	andi	r25, 0xF0	; 240
  fa:	98 83       	st	Y, r25
  fc:	1c 92       	st	X, r1
  fe:	10 82       	st	Z, r1
 100:	8f 5f       	subi	r24, 0xFF	; 255
 102:	8f 30       	cpi	r24, 0x0F	; 15
 104:	b9 f7       	brne	.-18     	; 0xf4 <can_init+0x24>
 106:	86 e0       	ldi	r24, 0x06	; 6
 108:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
 10c:	8c e0       	ldi	r24, 0x0C	; 12
 10e:	80 93 e3 00 	sts	0x00E3, r24	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7e00e3>
 112:	87 e3       	ldi	r24, 0x37	; 55
 114:	80 93 e4 00 	sts	0x00E4, r24	; 0x8000e4 <__TEXT_REGION_LENGTH__+0x7e00e4>
 118:	10 92 e5 00 	sts	0x00E5, r1	; 0x8000e5 <__TEXT_REGION_LENGTH__+0x7e00e5>
 11c:	82 e0       	ldi	r24, 0x02	; 2
 11e:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
 122:	78 94       	sei
 124:	df 91       	pop	r29
 126:	cf 91       	pop	r28
 128:	08 95       	ret

0000012a <get_message>:

void get_message(uint8_t mobnr , uint8_t *message ){
 12a:	fb 01       	movw	r30, r22
	CANPAGE = 1 << mobnr;
 12c:	21 e0       	ldi	r18, 0x01	; 1
 12e:	30 e0       	ldi	r19, 0x00	; 0
 130:	02 c0       	rjmp	.+4      	; 0x136 <get_message+0xc>
 132:	22 0f       	add	r18, r18
 134:	33 1f       	adc	r19, r19
 136:	8a 95       	dec	r24
 138:	e2 f7       	brpl	.-8      	; 0x132 <get_message+0x8>
 13a:	20 93 ed 00 	sts	0x00ED, r18	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7e00ed>
 13e:	9b 01       	movw	r18, r22
 140:	28 5f       	subi	r18, 0xF8	; 248
 142:	3f 4f       	sbci	r19, 0xFF	; 255
	
	uint8_t j;
	for(j=0; j<8; j++){
		*message = CANMSG;
 144:	aa ef       	ldi	r26, 0xFA	; 250
 146:	b0 e0       	ldi	r27, 0x00	; 0
 148:	8c 91       	ld	r24, X
 14a:	81 93       	st	Z+, r24

void get_message(uint8_t mobnr , uint8_t *message ){
	CANPAGE = 1 << mobnr;
	
	uint8_t j;
	for(j=0; j<8; j++){
 14c:	2e 17       	cp	r18, r30
 14e:	3f 07       	cpc	r19, r31
 150:	d9 f7       	brne	.-10     	; 0x148 <get_message+0x1e>
		*message = CANMSG;
		message++;
	}
}
 152:	08 95       	ret

00000154 <print_message>:

void print_message(uint8_t mobnr){
 154:	ff 92       	push	r15
 156:	0f 93       	push	r16
 158:	1f 93       	push	r17
 15a:	cf 93       	push	r28
 15c:	df 93       	push	r29
 15e:	cd b7       	in	r28, 0x3d	; 61
 160:	de b7       	in	r29, 0x3e	; 62
 162:	69 97       	sbiw	r28, 0x19	; 25
 164:	0f b6       	in	r0, 0x3f	; 63
 166:	f8 94       	cli
 168:	de bf       	out	0x3e, r29	; 62
 16a:	0f be       	out	0x3f, r0	; 63
 16c:	cd bf       	out	0x3d, r28	; 61
 16e:	f8 2e       	mov	r15, r24
	uart_puts("message:");
 170:	88 e0       	ldi	r24, 0x08	; 8
 172:	91 e0       	ldi	r25, 0x01	; 1
 174:	81 d1       	rcall	.+770    	; 0x478 <uart_puts>
	uint8_t message[8] = {0};
 176:	8e 01       	movw	r16, r28
 178:	0f 5f       	subi	r16, 0xFF	; 255
 17a:	1f 4f       	sbci	r17, 0xFF	; 255
 17c:	88 e0       	ldi	r24, 0x08	; 8
 17e:	d8 01       	movw	r26, r16
 180:	1d 92       	st	X+, r1
 182:	8a 95       	dec	r24
 184:	e9 f7       	brne	.-6      	; 0x180 <print_message+0x2c>
	get_message(mobnr , message);
 186:	b8 01       	movw	r22, r16
 188:	8f 2d       	mov	r24, r15
 18a:	cf df       	rcall	.-98     	; 0x12a <get_message>
	char hex[17] = "";
 18c:	1a 86       	std	Y+10, r1	; 0x0a
 18e:	19 86       	std	Y+9, r1	; 0x09
 190:	fe 01       	movw	r30, r28
 192:	3b 96       	adiw	r30, 0x0b	; 11
 194:	8f e0       	ldi	r24, 0x0F	; 15
 196:	df 01       	movw	r26, r30
 198:	1d 92       	st	X+, r1
 19a:	8a 95       	dec	r24
 19c:	e9 f7       	brne	.-6      	; 0x198 <print_message+0x44>
	bytes_to_hex(message, 8, hex);
 19e:	ae 01       	movw	r20, r28
 1a0:	47 5f       	subi	r20, 0xF7	; 247
 1a2:	5f 4f       	sbci	r21, 0xFF	; 255
 1a4:	68 e0       	ldi	r22, 0x08	; 8
 1a6:	70 e0       	ldi	r23, 0x00	; 0
 1a8:	c8 01       	movw	r24, r16
 1aa:	3e d0       	rcall	.+124    	; 0x228 <bytes_to_hex>
	hex[17] = "/n";
 1ac:	81 e1       	ldi	r24, 0x11	; 17
 1ae:	91 e0       	ldi	r25, 0x01	; 1
	uart_puts(hex);
 1b0:	8a 8f       	std	Y+26, r24	; 0x1a
 1b2:	ce 01       	movw	r24, r28
 1b4:	09 96       	adiw	r24, 0x09	; 9
 1b6:	60 d1       	rcall	.+704    	; 0x478 <uart_puts>
}
 1b8:	69 96       	adiw	r28, 0x19	; 25
 1ba:	0f b6       	in	r0, 0x3f	; 63
 1bc:	f8 94       	cli
 1be:	de bf       	out	0x3e, r29	; 62
 1c0:	0f be       	out	0x3f, r0	; 63
 1c2:	cd bf       	out	0x3d, r28	; 61
 1c4:	df 91       	pop	r29
 1c6:	cf 91       	pop	r28
 1c8:	1f 91       	pop	r17
 1ca:	0f 91       	pop	r16
 1cc:	ff 90       	pop	r15
 1ce:	08 95       	ret

000001d0 <send_message>:

void send_message( uint8_t mobnr , uint8_t *id, uint8_t *message ){
 1d0:	db 01       	movw	r26, r22
 1d2:	fa 01       	movw	r30, r20
	
	//select mob.
	CANPAGE = 1 << mobnr;
 1d4:	21 e0       	ldi	r18, 0x01	; 1
 1d6:	30 e0       	ldi	r19, 0x00	; 0
 1d8:	08 2e       	mov	r0, r24
 1da:	02 c0       	rjmp	.+4      	; 0x1e0 <send_message+0x10>
 1dc:	22 0f       	add	r18, r18
 1de:	33 1f       	adc	r19, r19
 1e0:	0a 94       	dec	r0
 1e2:	e2 f7       	brpl	.-8      	; 0x1dc <send_message+0xc>
 1e4:	20 93 ed 00 	sts	0x00ED, r18	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7e00ed>
	
	//copy ID.
	CANIDT1 = *id;
 1e8:	9c 91       	ld	r25, X
 1ea:	90 93 f3 00 	sts	0x00F3, r25	; 0x8000f3 <__TEXT_REGION_LENGTH__+0x7e00f3>
	CANIDT2 = *(++id);
 1ee:	11 96       	adiw	r26, 0x01	; 1
 1f0:	9c 91       	ld	r25, X
 1f2:	11 97       	sbiw	r26, 0x01	; 1
 1f4:	90 93 f2 00 	sts	0x00F2, r25	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7e00f2>
	CANIDT3 = *(++id);
 1f8:	12 96       	adiw	r26, 0x02	; 2
 1fa:	9c 91       	ld	r25, X
 1fc:	12 97       	sbiw	r26, 0x02	; 2
 1fe:	90 93 f1 00 	sts	0x00F1, r25	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
	CANIDT4 = *(++id);
 202:	13 96       	adiw	r26, 0x03	; 3
 204:	9c 91       	ld	r25, X
 206:	90 93 f0 00 	sts	0x00F0, r25	; 0x8000f0 <__TEXT_REGION_LENGTH__+0x7e00f0>
 20a:	9a 01       	movw	r18, r20
 20c:	28 5f       	subi	r18, 0xF8	; 248
 20e:	3f 4f       	sbci	r19, 0xFF	; 255
	
	//copy message.
	uint8_t j;
	for(j=0; j<8; j++){
		CANMSG = *message;
 210:	aa ef       	ldi	r26, 0xFA	; 250
 212:	b0 e0       	ldi	r27, 0x00	; 0
 214:	91 91       	ld	r25, Z+
 216:	9c 93       	st	X, r25
	CANIDT3 = *(++id);
	CANIDT4 = *(++id);
	
	//copy message.
	uint8_t j;
	for(j=0; j<8; j++){
 218:	2e 17       	cp	r18, r30
 21a:	3f 07       	cpc	r19, r31
 21c:	d9 f7       	brne	.-10     	; 0x214 <send_message+0x44>
		CANMSG = *message;
		message++;
	}
	
	print_message(mobnr);
 21e:	9a df       	rcall	.-204    	; 0x154 <print_message>
	
	//enable transmission
	CANCDMOB = (1 << CONMOB0) | (1 << DLC3);
 220:	88 e4       	ldi	r24, 0x48	; 72
 222:	80 93 ef 00 	sts	0x00EF, r24	; 0x8000ef <__TEXT_REGION_LENGTH__+0x7e00ef>
 226:	08 95       	ret

00000228 <bytes_to_hex>:

#include <avr/io.h>
#include <stdlib.h>

void bytes_to_hex(const uint8_t *src, uint8_t len, unsigned char *dest)
{
 228:	cf 93       	push	r28
 22a:	df 93       	push	r29
	static const unsigned char table[] = "0123456789abcdef";

	for (; len > 0; --len)
 22c:	66 23       	and	r22, r22
 22e:	c9 f0       	breq	.+50     	; 0x262 <bytes_to_hex+0x3a>
 230:	c4 2f       	mov	r28, r20
 232:	d5 2f       	mov	r29, r21
 234:	28 2f       	mov	r18, r24
 236:	39 2f       	mov	r19, r25
	{
		unsigned char c = *src++;
 238:	d9 01       	movw	r26, r18
 23a:	ed 91       	ld	r30, X+
 23c:	9d 01       	movw	r18, r26
		*dest++ = table[c >> 4];
 23e:	ae 2f       	mov	r26, r30
 240:	a2 95       	swap	r26
 242:	af 70       	andi	r26, 0x0F	; 15
 244:	b0 e0       	ldi	r27, 0x00	; 0
 246:	ac 5e       	subi	r26, 0xEC	; 236
 248:	be 4f       	sbci	r27, 0xFE	; 254
 24a:	8c 91       	ld	r24, X
 24c:	88 83       	st	Y, r24
		*dest++ = table[c & 0x0f];
 24e:	ef 70       	andi	r30, 0x0F	; 15
 250:	f0 e0       	ldi	r31, 0x00	; 0
 252:	ec 5e       	subi	r30, 0xEC	; 236
 254:	fe 4f       	sbci	r31, 0xFE	; 254
 256:	80 81       	ld	r24, Z
 258:	89 83       	std	Y+1, r24	; 0x01

void bytes_to_hex(const uint8_t *src, uint8_t len, unsigned char *dest)
{
	static const unsigned char table[] = "0123456789abcdef";

	for (; len > 0; --len)
 25a:	61 50       	subi	r22, 0x01	; 1
 25c:	22 96       	adiw	r28, 0x02	; 2
 25e:	61 11       	cpse	r22, r1
 260:	eb cf       	rjmp	.-42     	; 0x238 <bytes_to_hex+0x10>
	{
		unsigned char c = *src++;
		*dest++ = table[c >> 4];
		*dest++ = table[c & 0x0f];
	}
}
 262:	df 91       	pop	r29
 264:	cf 91       	pop	r28
 266:	08 95       	ret

00000268 <buttons_init>:
		uart_puts("verify failed");
		return;
	}
	printf("\n");
	uart_puts("Keys Match!");
}
 268:	1d b8       	out	0x0d, r1	; 13
 26a:	80 ef       	ldi	r24, 0xF0	; 240
 26c:	8e b9       	out	0x0e, r24	; 14
 26e:	9f ef       	ldi	r25, 0xFF	; 255
 270:	90 93 6a 00 	sts	0x006A, r25	; 0x80006a <__TEXT_REGION_LENGTH__+0x7e006a>
 274:	8d bb       	out	0x1d, r24	; 29
 276:	08 95       	ret

00000278 <__vector_5>:


	
ISR(INT4_vect){
 278:	1f 92       	push	r1
 27a:	0f 92       	push	r0
 27c:	0f b6       	in	r0, 0x3f	; 63
 27e:	0f 92       	push	r0
 280:	11 24       	eor	r1, r1
 282:	0b b6       	in	r0, 0x3b	; 59
 284:	0f 92       	push	r0
 286:	2f 93       	push	r18
 288:	3f 93       	push	r19
 28a:	4f 93       	push	r20
 28c:	5f 93       	push	r21
 28e:	6f 93       	push	r22
 290:	7f 93       	push	r23
 292:	8f 93       	push	r24
 294:	9f 93       	push	r25
 296:	af 93       	push	r26
 298:	bf 93       	push	r27
 29a:	ef 93       	push	r30
 29c:	ff 93       	push	r31
 29e:	cf 93       	push	r28
 2a0:	df 93       	push	r29
 2a2:	cd b7       	in	r28, 0x3d	; 61
 2a4:	de b7       	in	r29, 0x3e	; 62
 2a6:	2c 97       	sbiw	r28, 0x0c	; 12
 2a8:	de bf       	out	0x3e, r29	; 62
 2aa:	cd bf       	out	0x3d, r28	; 61
	event = AUTH_E;
 2ac:	81 e0       	ldi	r24, 0x01	; 1
 2ae:	80 93 26 01 	sts	0x0126, r24	; 0x800126 <__data_end>
	//char target[] = "4";
	//uart_puts(target);
	uint8_t test[8] = { 0 , 1 , 2 , 3 , 4 , 5 , 6 , 7 };
 2b2:	88 e0       	ldi	r24, 0x08	; 8
 2b4:	e0 e0       	ldi	r30, 0x00	; 0
 2b6:	f1 e0       	ldi	r31, 0x01	; 1
 2b8:	de 01       	movw	r26, r28
 2ba:	11 96       	adiw	r26, 0x01	; 1
 2bc:	01 90       	ld	r0, Z+
 2be:	0d 92       	st	X+, r0
 2c0:	8a 95       	dec	r24
 2c2:	e1 f7       	brne	.-8      	; 0x2bc <__vector_5+0x44>
	uint8_t id[4] = { 0 , 5 , 0 , 5 };
 2c4:	19 86       	std	Y+9, r1	; 0x09
 2c6:	85 e0       	ldi	r24, 0x05	; 5
 2c8:	8a 87       	std	Y+10, r24	; 0x0a
 2ca:	1b 86       	std	Y+11, r1	; 0x0b
 2cc:	8c 87       	std	Y+12, r24	; 0x0c
	send_message(0 , id , test );
 2ce:	ae 01       	movw	r20, r28
 2d0:	4f 5f       	subi	r20, 0xFF	; 255
 2d2:	5f 4f       	sbci	r21, 0xFF	; 255
 2d4:	be 01       	movw	r22, r28
 2d6:	67 5f       	subi	r22, 0xF7	; 247
 2d8:	7f 4f       	sbci	r23, 0xFF	; 255
 2da:	80 e0       	ldi	r24, 0x00	; 0
 2dc:	79 df       	rcall	.-270    	; 0x1d0 <send_message>
}
 2de:	2c 96       	adiw	r28, 0x0c	; 12
 2e0:	0f b6       	in	r0, 0x3f	; 63
 2e2:	f8 94       	cli
 2e4:	de bf       	out	0x3e, r29	; 62
 2e6:	0f be       	out	0x3f, r0	; 63
 2e8:	cd bf       	out	0x3d, r28	; 61
 2ea:	df 91       	pop	r29
 2ec:	cf 91       	pop	r28
 2ee:	ff 91       	pop	r31
 2f0:	ef 91       	pop	r30
 2f2:	bf 91       	pop	r27
 2f4:	af 91       	pop	r26
 2f6:	9f 91       	pop	r25
 2f8:	8f 91       	pop	r24
 2fa:	7f 91       	pop	r23
 2fc:	6f 91       	pop	r22
 2fe:	5f 91       	pop	r21
 300:	4f 91       	pop	r20
 302:	3f 91       	pop	r19
 304:	2f 91       	pop	r18
 306:	0f 90       	pop	r0
 308:	0b be       	out	0x3b, r0	; 59
 30a:	0f 90       	pop	r0
 30c:	0f be       	out	0x3f, r0	; 63
 30e:	0f 90       	pop	r0
 310:	1f 90       	pop	r1
 312:	18 95       	reti

00000314 <__vector_6>:

ISR(INT5_vect){
 314:	1f 92       	push	r1
 316:	0f 92       	push	r0
 318:	0f b6       	in	r0, 0x3f	; 63
 31a:	0f 92       	push	r0
 31c:	11 24       	eor	r1, r1
 31e:	0b b6       	in	r0, 0x3b	; 59
 320:	0f 92       	push	r0
 322:	2f 93       	push	r18
 324:	3f 93       	push	r19
 326:	4f 93       	push	r20
 328:	5f 93       	push	r21
 32a:	6f 93       	push	r22
 32c:	7f 93       	push	r23
 32e:	8f 93       	push	r24
 330:	9f 93       	push	r25
 332:	af 93       	push	r26
 334:	bf 93       	push	r27
 336:	ef 93       	push	r30
 338:	ff 93       	push	r31
 33a:	cf 93       	push	r28
 33c:	df 93       	push	r29
 33e:	00 d0       	rcall	.+0      	; 0x340 <__vector_6+0x2c>
 340:	cd b7       	in	r28, 0x3d	; 61
 342:	de b7       	in	r29, 0x3e	; 62
	char target[] = "5";
 344:	85 e3       	ldi	r24, 0x35	; 53
 346:	90 e0       	ldi	r25, 0x00	; 0
 348:	9a 83       	std	Y+2, r25	; 0x02
 34a:	89 83       	std	Y+1, r24	; 0x01
	uart_puts(target);
 34c:	ce 01       	movw	r24, r28
 34e:	01 96       	adiw	r24, 0x01	; 1
 350:	93 d0       	rcall	.+294    	; 0x478 <uart_puts>
	//SendByMOb2();
}
 352:	0f 90       	pop	r0
 354:	0f 90       	pop	r0
 356:	df 91       	pop	r29
 358:	cf 91       	pop	r28
 35a:	ff 91       	pop	r31
 35c:	ef 91       	pop	r30
 35e:	bf 91       	pop	r27
 360:	af 91       	pop	r26
 362:	9f 91       	pop	r25
 364:	8f 91       	pop	r24
 366:	7f 91       	pop	r23
 368:	6f 91       	pop	r22
 36a:	5f 91       	pop	r21
 36c:	4f 91       	pop	r20
 36e:	3f 91       	pop	r19
 370:	2f 91       	pop	r18
 372:	0f 90       	pop	r0
 374:	0b be       	out	0x3b, r0	; 59
 376:	0f 90       	pop	r0
 378:	0f be       	out	0x3f, r0	; 63
 37a:	0f 90       	pop	r0
 37c:	1f 90       	pop	r1
 37e:	18 95       	reti

00000380 <__vector_7>:

ISR(INT6_vect){
 380:	1f 92       	push	r1
 382:	0f 92       	push	r0
 384:	0f b6       	in	r0, 0x3f	; 63
 386:	0f 92       	push	r0
 388:	11 24       	eor	r1, r1
 38a:	0b b6       	in	r0, 0x3b	; 59
 38c:	0f 92       	push	r0
 38e:	2f 93       	push	r18
 390:	3f 93       	push	r19
 392:	4f 93       	push	r20
 394:	5f 93       	push	r21
 396:	6f 93       	push	r22
 398:	7f 93       	push	r23
 39a:	8f 93       	push	r24
 39c:	9f 93       	push	r25
 39e:	af 93       	push	r26
 3a0:	bf 93       	push	r27
 3a2:	ef 93       	push	r30
 3a4:	ff 93       	push	r31
 3a6:	cf 93       	push	r28
 3a8:	df 93       	push	r29
 3aa:	00 d0       	rcall	.+0      	; 0x3ac <__vector_7+0x2c>
 3ac:	cd b7       	in	r28, 0x3d	; 61
 3ae:	de b7       	in	r29, 0x3e	; 62
	char target[] = "6";
 3b0:	86 e3       	ldi	r24, 0x36	; 54
 3b2:	90 e0       	ldi	r25, 0x00	; 0
 3b4:	9a 83       	std	Y+2, r25	; 0x02
 3b6:	89 83       	std	Y+1, r24	; 0x01
	uart_puts(target);
 3b8:	ce 01       	movw	r24, r28
 3ba:	01 96       	adiw	r24, 0x01	; 1
 3bc:	5d d0       	rcall	.+186    	; 0x478 <uart_puts>
	//SendByMOb2();
}
 3be:	0f 90       	pop	r0
 3c0:	0f 90       	pop	r0
 3c2:	df 91       	pop	r29
 3c4:	cf 91       	pop	r28
 3c6:	ff 91       	pop	r31
 3c8:	ef 91       	pop	r30
 3ca:	bf 91       	pop	r27
 3cc:	af 91       	pop	r26
 3ce:	9f 91       	pop	r25
 3d0:	8f 91       	pop	r24
 3d2:	7f 91       	pop	r23
 3d4:	6f 91       	pop	r22
 3d6:	5f 91       	pop	r21
 3d8:	4f 91       	pop	r20
 3da:	3f 91       	pop	r19
 3dc:	2f 91       	pop	r18
 3de:	0f 90       	pop	r0
 3e0:	0b be       	out	0x3b, r0	; 59
 3e2:	0f 90       	pop	r0
 3e4:	0f be       	out	0x3f, r0	; 63
 3e6:	0f 90       	pop	r0
 3e8:	1f 90       	pop	r1
 3ea:	18 95       	reti

000003ec <__vector_8>:

ISR(INT7_vect){
 3ec:	1f 92       	push	r1
 3ee:	0f 92       	push	r0
 3f0:	0f b6       	in	r0, 0x3f	; 63
 3f2:	0f 92       	push	r0
 3f4:	11 24       	eor	r1, r1
 3f6:	0b b6       	in	r0, 0x3b	; 59
 3f8:	0f 92       	push	r0
 3fa:	2f 93       	push	r18
 3fc:	3f 93       	push	r19
 3fe:	4f 93       	push	r20
 400:	5f 93       	push	r21
 402:	6f 93       	push	r22
 404:	7f 93       	push	r23
 406:	8f 93       	push	r24
 408:	9f 93       	push	r25
 40a:	af 93       	push	r26
 40c:	bf 93       	push	r27
 40e:	ef 93       	push	r30
 410:	ff 93       	push	r31
 412:	cf 93       	push	r28
 414:	df 93       	push	r29
 416:	00 d0       	rcall	.+0      	; 0x418 <__LOCK_REGION_LENGTH__+0x18>
 418:	cd b7       	in	r28, 0x3d	; 61
 41a:	de b7       	in	r29, 0x3e	; 62
	char target[] = "7";
 41c:	87 e3       	ldi	r24, 0x37	; 55
 41e:	90 e0       	ldi	r25, 0x00	; 0
 420:	9a 83       	std	Y+2, r25	; 0x02
 422:	89 83       	std	Y+1, r24	; 0x01
	uart_puts(target);
 424:	ce 01       	movw	r24, r28
 426:	01 96       	adiw	r24, 0x01	; 1
 428:	27 d0       	rcall	.+78     	; 0x478 <uart_puts>
	//SendByMOb2();
}
 42a:	0f 90       	pop	r0
 42c:	0f 90       	pop	r0
 42e:	df 91       	pop	r29
 430:	cf 91       	pop	r28
 432:	ff 91       	pop	r31
 434:	ef 91       	pop	r30
 436:	bf 91       	pop	r27
 438:	af 91       	pop	r26
 43a:	9f 91       	pop	r25
 43c:	8f 91       	pop	r24
 43e:	7f 91       	pop	r23
 440:	6f 91       	pop	r22
 442:	5f 91       	pop	r21
 444:	4f 91       	pop	r20
 446:	3f 91       	pop	r19
 448:	2f 91       	pop	r18
 44a:	0f 90       	pop	r0
 44c:	0b be       	out	0x3b, r0	; 59
 44e:	0f 90       	pop	r0
 450:	0f be       	out	0x3f, r0	; 63
 452:	0f 90       	pop	r0
 454:	1f 90       	pop	r1
 456:	18 95       	reti

00000458 <main>:

 int main()
 {	
	 uart_init();
 458:	03 d0       	rcall	.+6      	; 0x460 <uart_init>
	 buttons_init();
 45a:	06 df       	rcall	.-500    	; 0x268 <buttons_init>
	 can_init();
 45c:	39 de       	rcall	.-910    	; 0xd0 <can_init>
 45e:	ff cf       	rjmp	.-2      	; 0x45e <main+0x6>

00000460 <uart_init>:
 460:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
#include <avr/io.h>
#include "uart_f.h"

void uart_init(){
	UBRR0H = (BAUD_PRESCALE >> 8); // Load upper 8-bits of the baud rate value into the high byte of the UBRR register
	UBRR0L = BAUD_PRESCALE; // Load lower 8-bits of the baud rate value into the low byte of the UBRR register
 464:	83 e3       	ldi	r24, 0x33	; 51
 466:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
	UCSR0C = (0<<UMSEL0) | (0<<UPM0) | (1<<USBS0) | (3<<UCSZ0);
 46a:	8e e0       	ldi	r24, 0x0E	; 14
 46c:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>
	UCSR0B = (1<<RXEN0) | (1<<TXEN0);
 470:	88 e1       	ldi	r24, 0x18	; 24
 472:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
 476:	08 95       	ret

00000478 <uart_puts>:
}

void uart_puts(char* s){
 478:	cf 93       	push	r28
 47a:	df 93       	push	r29
	int i;
	int len = strlen(s);
 47c:	fc 01       	movw	r30, r24
 47e:	01 90       	ld	r0, Z+
 480:	00 20       	and	r0, r0
 482:	e9 f7       	brne	.-6      	; 0x47e <uart_puts+0x6>
 484:	31 97       	sbiw	r30, 0x01	; 1
 486:	e8 1b       	sub	r30, r24
 488:	f9 0b       	sbc	r31, r25
	for (i = 0; i < len; i++){
 48a:	1e 16       	cp	r1, r30
 48c:	1f 06       	cpc	r1, r31
 48e:	84 f4       	brge	.+32     	; 0x4b0 <uart_puts+0x38>
 490:	dc 01       	movw	r26, r24
 492:	9c 01       	movw	r18, r24
 494:	2e 0f       	add	r18, r30
 496:	3f 1f       	adc	r19, r31
		while(!( UCSR0A & 0X20));
 498:	e0 ec       	ldi	r30, 0xC0	; 192
 49a:	f0 e0       	ldi	r31, 0x00	; 0
		UDR0=s[i];
 49c:	c6 ec       	ldi	r28, 0xC6	; 198
 49e:	d0 e0       	ldi	r29, 0x00	; 0

void uart_puts(char* s){
	int i;
	int len = strlen(s);
	for (i = 0; i < len; i++){
		while(!( UCSR0A & 0X20));
 4a0:	90 81       	ld	r25, Z
 4a2:	95 ff       	sbrs	r25, 5
 4a4:	fd cf       	rjmp	.-6      	; 0x4a0 <uart_puts+0x28>
		UDR0=s[i];
 4a6:	9d 91       	ld	r25, X+
 4a8:	98 83       	st	Y, r25
}

void uart_puts(char* s){
	int i;
	int len = strlen(s);
	for (i = 0; i < len; i++){
 4aa:	a2 17       	cp	r26, r18
 4ac:	b3 07       	cpc	r27, r19
 4ae:	c1 f7       	brne	.-16     	; 0x4a0 <uart_puts+0x28>
		while(!( UCSR0A & 0X20));
		UDR0=s[i];
	}
	while(!( UCSR0A & 0X20)); 
 4b0:	e0 ec       	ldi	r30, 0xC0	; 192
 4b2:	f0 e0       	ldi	r31, 0x00	; 0
 4b4:	80 81       	ld	r24, Z
 4b6:	85 ff       	sbrs	r24, 5
 4b8:	fd cf       	rjmp	.-6      	; 0x4b4 <uart_puts+0x3c>
	UDR0 = 13;
 4ba:	8d e0       	ldi	r24, 0x0D	; 13
 4bc:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
	while(!( UCSR0A & 0X20));
 4c0:	e0 ec       	ldi	r30, 0xC0	; 192
 4c2:	f0 e0       	ldi	r31, 0x00	; 0
 4c4:	80 81       	ld	r24, Z
 4c6:	85 ff       	sbrs	r24, 5
 4c8:	fd cf       	rjmp	.-6      	; 0x4c4 <uart_puts+0x4c>
	UDR0 = 10;
 4ca:	8a e0       	ldi	r24, 0x0A	; 10
 4cc:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
}
 4d0:	df 91       	pop	r29
 4d2:	cf 91       	pop	r28
 4d4:	08 95       	ret

000004d6 <_exit>:
 4d6:	f8 94       	cli

000004d8 <__stop_program>:
 4d8:	ff cf       	rjmp	.-2      	; 0x4d8 <__stop_program>
