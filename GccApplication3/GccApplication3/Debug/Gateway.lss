
Gateway.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000168  00800100  00002ff4  00003088  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002ff4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  00800268  00800268  000031f0  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000031f0  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00003220  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000003a8  00000000  00000000  00003260  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00009940  00000000  00000000  00003608  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000016ad  00000000  00000000  0000cf48  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000292c  00000000  00000000  0000e5f5  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00001298  00000000  00000000  00010f24  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000010b6  00000000  00000000  000121bc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00006ba6  00000000  00000000  00013272  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000398  00000000  00000000  00019e18  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	d9 c0       	rjmp	.+434    	; 0x1b4 <__ctors_end>
       2:	00 00       	nop
       4:	f6 c0       	rjmp	.+492    	; 0x1f2 <__bad_interrupt>
       6:	00 00       	nop
       8:	f4 c0       	rjmp	.+488    	; 0x1f2 <__bad_interrupt>
       a:	00 00       	nop
       c:	f2 c0       	rjmp	.+484    	; 0x1f2 <__bad_interrupt>
       e:	00 00       	nop
      10:	f0 c0       	rjmp	.+480    	; 0x1f2 <__bad_interrupt>
      12:	00 00       	nop
      14:	ee c0       	rjmp	.+476    	; 0x1f2 <__bad_interrupt>
      16:	00 00       	nop
      18:	ec c0       	rjmp	.+472    	; 0x1f2 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	ea c0       	rjmp	.+468    	; 0x1f2 <__bad_interrupt>
      1e:	00 00       	nop
      20:	e8 c0       	rjmp	.+464    	; 0x1f2 <__bad_interrupt>
      22:	00 00       	nop
      24:	e6 c0       	rjmp	.+460    	; 0x1f2 <__bad_interrupt>
      26:	00 00       	nop
      28:	e4 c0       	rjmp	.+456    	; 0x1f2 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	e2 c0       	rjmp	.+452    	; 0x1f2 <__bad_interrupt>
      2e:	00 00       	nop
      30:	e0 c0       	rjmp	.+448    	; 0x1f2 <__bad_interrupt>
      32:	00 00       	nop
      34:	de c0       	rjmp	.+444    	; 0x1f2 <__bad_interrupt>
      36:	00 00       	nop
      38:	dc c0       	rjmp	.+440    	; 0x1f2 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	da c0       	rjmp	.+436    	; 0x1f2 <__bad_interrupt>
      3e:	00 00       	nop
      40:	d8 c0       	rjmp	.+432    	; 0x1f2 <__bad_interrupt>
      42:	00 00       	nop
      44:	d6 c0       	rjmp	.+428    	; 0x1f2 <__bad_interrupt>
      46:	00 00       	nop
      48:	d4 c0       	rjmp	.+424    	; 0x1f2 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	d2 c0       	rjmp	.+420    	; 0x1f2 <__bad_interrupt>
      4e:	00 00       	nop
      50:	d0 c0       	rjmp	.+416    	; 0x1f2 <__bad_interrupt>
      52:	00 00       	nop
      54:	ce c0       	rjmp	.+412    	; 0x1f2 <__bad_interrupt>
      56:	00 00       	nop
      58:	cc c0       	rjmp	.+408    	; 0x1f2 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	ca c0       	rjmp	.+404    	; 0x1f2 <__bad_interrupt>
      5e:	00 00       	nop
      60:	c8 c0       	rjmp	.+400    	; 0x1f2 <__bad_interrupt>
      62:	00 00       	nop
      64:	c6 c0       	rjmp	.+396    	; 0x1f2 <__bad_interrupt>
      66:	00 00       	nop
      68:	c4 c0       	rjmp	.+392    	; 0x1f2 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	c2 c0       	rjmp	.+388    	; 0x1f2 <__bad_interrupt>
      6e:	00 00       	nop
      70:	c0 c0       	rjmp	.+384    	; 0x1f2 <__bad_interrupt>
      72:	00 00       	nop
      74:	be c0       	rjmp	.+380    	; 0x1f2 <__bad_interrupt>
      76:	00 00       	nop
      78:	bc c0       	rjmp	.+376    	; 0x1f2 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	ba c0       	rjmp	.+372    	; 0x1f2 <__bad_interrupt>
      7e:	00 00       	nop
      80:	b8 c0       	rjmp	.+368    	; 0x1f2 <__bad_interrupt>
      82:	00 00       	nop
      84:	b6 c0       	rjmp	.+364    	; 0x1f2 <__bad_interrupt>
      86:	00 00       	nop
      88:	b4 c0       	rjmp	.+360    	; 0x1f2 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	b2 c0       	rjmp	.+356    	; 0x1f2 <__bad_interrupt>
      8e:	00 00       	nop
      90:	b0 c0       	rjmp	.+352    	; 0x1f2 <__bad_interrupt>
	...

00000094 <__trampolines_end>:
      94:	67 e6       	ldi	r22, 0x67	; 103
      96:	09 6a       	ori	r16, 0xA9	; 169
      98:	85 ae       	std	Z+61, r8	; 0x3d
      9a:	67 bb       	out	0x17, r22	; 23
      9c:	72 f3       	brmi	.-36     	; 0x7a <__SREG__+0x3b>
      9e:	6e 3c       	cpi	r22, 0xCE	; 206
      a0:	3a f5       	brpl	.+78     	; 0xf0 <k+0x3c>
      a2:	4f a5       	ldd	r20, Y+47	; 0x2f
      a4:	7f 52       	subi	r23, 0x2F	; 47
      a6:	0e 51       	subi	r16, 0x1E	; 30
      a8:	8c 68       	ori	r24, 0x8C	; 140
      aa:	05 9b       	sbis	0x00, 5	; 0
      ac:	ab d9       	rcall	.-3242   	; 0xfffff404 <__eeprom_end+0xff7ef404>
      ae:	83 1f       	adc	r24, r19
      b0:	19 cd       	rjmp	.-1486   	; 0xfffffae4 <__eeprom_end+0xff7efae4>
      b2:	e0 5b       	subi	r30, 0xB0	; 176

000000b4 <k>:
      b4:	98 2f 8a 42 91 44 37 71 cf fb c0 b5 a5 db b5 e9     ./.B.D7q........
      c4:	5b c2 56 39 f1 11 f1 59 a4 82 3f 92 d5 5e 1c ab     [.V9...Y..?..^..
      d4:	98 aa 07 d8 01 5b 83 12 be 85 31 24 c3 7d 0c 55     .....[....1$.}.U
      e4:	74 5d be 72 fe b1 de 80 a7 06 dc 9b 74 f1 9b c1     t].r........t...
      f4:	c1 69 9b e4 86 47 be ef c6 9d c1 0f cc a1 0c 24     .i...G.........$
     104:	6f 2c e9 2d aa 84 74 4a dc a9 b0 5c da 88 f9 76     o,.-..tJ...\...v
     114:	52 51 3e 98 6d c6 31 a8 c8 27 03 b0 c7 7f 59 bf     RQ>.m.1..'....Y.
     124:	f3 0b e0 c6 47 91 a7 d5 51 63 ca 06 67 29 29 14     ....G...Qc..g)).
     134:	85 0a b7 27 38 21 1b 2e fc 6d 2c 4d 13 0d 38 53     ...'8!...m,M..8S
     144:	54 73 0a 65 bb 0a 6a 76 2e c9 c2 81 85 2c 72 92     Ts.e..jv.....,r.
     154:	a1 e8 bf a2 4b 66 1a a8 70 8b 4b c2 a3 51 6c c7     ....Kf..p.K..Ql.
     164:	19 e8 92 d1 24 06 99 d6 85 35 0e f4 70 a0 6a 10     ....$....5..p.j.
     174:	16 c1 a4 19 08 6c 37 1e 4c 77 48 27 b5 bc b0 34     .....l7.LwH'...4
     184:	b3 0c 1c 39 4a aa d8 4e 4f ca 9c 5b f3 6f 2e 68     ...9J..NO..[.o.h
     194:	ee 82 8f 74 6f 63 a5 78 14 78 c8 84 08 02 c7 8c     ...toc.x.x......
     1a4:	fa ff be 90 eb 6c 50 a4 f7 a3 f9 be f2 78 71 c6     .....lP......xq.

000001b4 <__ctors_end>:
     1b4:	11 24       	eor	r1, r1
     1b6:	1f be       	out	0x3f, r1	; 63
     1b8:	cf ef       	ldi	r28, 0xFF	; 255
     1ba:	d0 e1       	ldi	r29, 0x10	; 16
     1bc:	de bf       	out	0x3e, r29	; 62
     1be:	cd bf       	out	0x3d, r28	; 61

000001c0 <__do_copy_data>:
     1c0:	12 e0       	ldi	r17, 0x02	; 2
     1c2:	a0 e0       	ldi	r26, 0x00	; 0
     1c4:	b1 e0       	ldi	r27, 0x01	; 1
     1c6:	e4 ef       	ldi	r30, 0xF4	; 244
     1c8:	ff e2       	ldi	r31, 0x2F	; 47
     1ca:	00 e0       	ldi	r16, 0x00	; 0
     1cc:	0b bf       	out	0x3b, r16	; 59
     1ce:	02 c0       	rjmp	.+4      	; 0x1d4 <__do_copy_data+0x14>
     1d0:	07 90       	elpm	r0, Z+
     1d2:	0d 92       	st	X+, r0
     1d4:	a8 36       	cpi	r26, 0x68	; 104
     1d6:	b1 07       	cpc	r27, r17
     1d8:	d9 f7       	brne	.-10     	; 0x1d0 <__do_copy_data+0x10>

000001da <__do_clear_bss>:
     1da:	22 e0       	ldi	r18, 0x02	; 2
     1dc:	a8 e6       	ldi	r26, 0x68	; 104
     1de:	b2 e0       	ldi	r27, 0x02	; 2
     1e0:	01 c0       	rjmp	.+2      	; 0x1e4 <.do_clear_bss_start>

000001e2 <.do_clear_bss_loop>:
     1e2:	1d 92       	st	X+, r1

000001e4 <.do_clear_bss_start>:
     1e4:	aa 36       	cpi	r26, 0x6A	; 106
     1e6:	b2 07       	cpc	r27, r18
     1e8:	e1 f7       	brne	.-8      	; 0x1e2 <.do_clear_bss_loop>
     1ea:	0e 94 64 11 	call	0x22c8	; 0x22c8 <main>
     1ee:	0c 94 f8 17 	jmp	0x2ff0	; 0x2ff0 <_exit>

000001f2 <__bad_interrupt>:
     1f2:	06 cf       	rjmp	.-500    	; 0x0 <__vectors>

000001f4 <can_init>:
void can_init_mask (uint8_t mask){
	CANIDM1 = mask << 5;
	CANIDM2 = mask >> 3;
	// RTRMSK = 0 : We don't use remote frames ever.
	// IDEMSK = 0 : we don't use the extended format.
	CANIDM4 = (0 << RTRMSK) | (0 << IDEMSK);
     1f4:	cf 93       	push	r28
     1f6:	df 93       	push	r29
     1f8:	f8 94       	cli
     1fa:	81 e0       	ldi	r24, 0x01	; 1
     1fc:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
     200:	84 e3       	ldi	r24, 0x34	; 52
     202:	80 93 db 00 	sts	0x00DB, r24	; 0x8000db <__TEXT_REGION_LENGTH__+0x7e00db>
     206:	10 92 da 00 	sts	0x00DA, r1	; 0x8000da <__TEXT_REGION_LENGTH__+0x7e00da>
     20a:	80 e0       	ldi	r24, 0x00	; 0
     20c:	cd ee       	ldi	r28, 0xED	; 237
     20e:	d0 e0       	ldi	r29, 0x00	; 0
     210:	af ee       	ldi	r26, 0xEF	; 239
     212:	b0 e0       	ldi	r27, 0x00	; 0
     214:	ee ee       	ldi	r30, 0xEE	; 238
     216:	f0 e0       	ldi	r31, 0x00	; 0
     218:	98 2f       	mov	r25, r24
     21a:	92 95       	swap	r25
     21c:	90 7f       	andi	r25, 0xF0	; 240
     21e:	98 83       	st	Y, r25
     220:	1c 92       	st	X, r1
     222:	10 82       	st	Z, r1
     224:	8f 5f       	subi	r24, 0xFF	; 255
     226:	8f 30       	cpi	r24, 0x0F	; 15
     228:	b9 f7       	brne	.-18     	; 0x218 <can_init+0x24>
     22a:	86 e0       	ldi	r24, 0x06	; 6
     22c:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
     230:	8c e0       	ldi	r24, 0x0C	; 12
     232:	80 93 e3 00 	sts	0x00E3, r24	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7e00e3>
     236:	87 e3       	ldi	r24, 0x37	; 55
     238:	80 93 e4 00 	sts	0x00E4, r24	; 0x8000e4 <__TEXT_REGION_LENGTH__+0x7e00e4>
     23c:	10 92 e5 00 	sts	0x00E5, r1	; 0x8000e5 <__TEXT_REGION_LENGTH__+0x7e00e5>
     240:	82 e0       	ldi	r24, 0x02	; 2
     242:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
     246:	78 94       	sei
     248:	df 91       	pop	r29
     24a:	cf 91       	pop	r28
     24c:	08 95       	ret

0000024e <can_get_message>:
     24e:	fb 01       	movw	r30, r22
     250:	82 95       	swap	r24
     252:	80 7f       	andi	r24, 0xF0	; 240
     254:	80 93 ed 00 	sts	0x00ED, r24	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7e00ed>
     258:	9b 01       	movw	r18, r22
     25a:	28 5f       	subi	r18, 0xF8	; 248
     25c:	3f 4f       	sbci	r19, 0xFF	; 255
     25e:	aa ef       	ldi	r26, 0xFA	; 250
     260:	b0 e0       	ldi	r27, 0x00	; 0
     262:	8c 91       	ld	r24, X
     264:	81 93       	st	Z+, r24
     266:	2e 17       	cp	r18, r30
     268:	3f 07       	cpc	r19, r31
     26a:	d9 f7       	brne	.-10     	; 0x262 <can_get_message+0x14>
     26c:	08 95       	ret

0000026e <can_get_frame_buffer>:
     26e:	0f 93       	push	r16
     270:	1f 93       	push	r17
     272:	cf 93       	push	r28
     274:	8c 01       	movw	r16, r24
     276:	c0 e0       	ldi	r28, 0x00	; 0
     278:	b8 01       	movw	r22, r16
     27a:	8c 2f       	mov	r24, r28
     27c:	e8 df       	rcall	.-48     	; 0x24e <can_get_message>
     27e:	08 5f       	subi	r16, 0xF8	; 248
     280:	1f 4f       	sbci	r17, 0xFF	; 255
     282:	cf 5f       	subi	r28, 0xFF	; 255
     284:	c8 30       	cpi	r28, 0x08	; 8
     286:	c1 f7       	brne	.-16     	; 0x278 <can_get_frame_buffer+0xa>
     288:	cf 91       	pop	r28
     28a:	1f 91       	pop	r17
     28c:	0f 91       	pop	r16
     28e:	08 95       	ret

00000290 <can_init_id>:
     290:	98 2f       	mov	r25, r24
     292:	92 95       	swap	r25
     294:	99 0f       	add	r25, r25
     296:	90 7e       	andi	r25, 0xE0	; 224
     298:	90 93 f2 00 	sts	0x00F2, r25	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7e00f2>
     29c:	86 95       	lsr	r24
     29e:	86 95       	lsr	r24
     2a0:	86 95       	lsr	r24
     2a2:	80 93 f3 00 	sts	0x00F3, r24	; 0x8000f3 <__TEXT_REGION_LENGTH__+0x7e00f3>
     2a6:	10 92 f0 00 	sts	0x00F0, r1	; 0x8000f0 <__TEXT_REGION_LENGTH__+0x7e00f0>
     2aa:	08 95       	ret

000002ac <can_init_mask_def>:
     2ac:	8f ef       	ldi	r24, 0xFF	; 255
     2ae:	80 93 f7 00 	sts	0x00F7, r24	; 0x8000f7 <__TEXT_REGION_LENGTH__+0x7e00f7>
     2b2:	80 93 f6 00 	sts	0x00F6, r24	; 0x8000f6 <__TEXT_REGION_LENGTH__+0x7e00f6>
     2b6:	10 92 f4 00 	sts	0x00F4, r1	; 0x8000f4 <__TEXT_REGION_LENGTH__+0x7e00f4>
     2ba:	08 95       	ret

000002bc <can_init_message>:
}

void can_init_message( uint8_t *message ){
     2bc:	fc 01       	movw	r30, r24
     2be:	9c 01       	movw	r18, r24
     2c0:	28 5f       	subi	r18, 0xF8	; 248
     2c2:	3f 4f       	sbci	r19, 0xFF	; 255
	uint8_t j;
	for(j=0; j<8; j++){
		CANMSG = *message;
     2c4:	aa ef       	ldi	r26, 0xFA	; 250
     2c6:	b0 e0       	ldi	r27, 0x00	; 0
     2c8:	81 91       	ld	r24, Z+
     2ca:	8c 93       	st	X, r24
	CANIDM4 = (0 << RTRMSK) | (0 << IDEMSK);
}

void can_init_message( uint8_t *message ){
	uint8_t j;
	for(j=0; j<8; j++){
     2cc:	2e 17       	cp	r18, r30
     2ce:	3f 07       	cpc	r19, r31
     2d0:	d9 f7       	brne	.-10     	; 0x2c8 <can_init_message+0xc>
		CANMSG = *message;
		message++;
	}
}
     2d2:	08 95       	ret

000002d4 <can_send_message>:

int can_send_message( uint8_t mobnr , uint8_t id, uint8_t *message ){
     2d4:	cf 93       	push	r28
     2d6:	df 93       	push	r29
     2d8:	ea 01       	movw	r28, r20
	//select mob.
	CANPAGE = (mobnr << 4);
     2da:	82 95       	swap	r24
     2dc:	80 7f       	andi	r24, 0xF0	; 240
     2de:	80 93 ed 00 	sts	0x00ED, r24	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7e00ed>
	//copy ID.
	can_init_id(id);
     2e2:	86 2f       	mov	r24, r22
     2e4:	d5 df       	rcall	.-86     	; 0x290 <can_init_id>
	//copy message.
	can_init_message(message);
     2e6:	ce 01       	movw	r24, r28
     2e8:	e9 df       	rcall	.-46     	; 0x2bc <can_init_message>
	//enable transmission
	CANCDMOB = (1 << CONMOB0) | (1 << DLC3);
     2ea:	88 e4       	ldi	r24, 0x48	; 72
     2ec:	80 93 ef 00 	sts	0x00EF, r24	; 0x8000ef <__TEXT_REGION_LENGTH__+0x7e00ef>
	
	return 0;
}
     2f0:	80 e0       	ldi	r24, 0x00	; 0
     2f2:	90 e0       	ldi	r25, 0x00	; 0
     2f4:	df 91       	pop	r29
     2f6:	cf 91       	pop	r28
     2f8:	08 95       	ret

000002fa <can_receive_message>:

int can_receive_message( uint8_t mobnr, uint8_t id, uint8_t mask, uint8_t *message){
     2fa:	0f 93       	push	r16
     2fc:	1f 93       	push	r17
     2fe:	cf 93       	push	r28
     300:	c8 2f       	mov	r28, r24
     302:	86 2f       	mov	r24, r22
     304:	89 01       	movw	r16, r18
	CANPAGE = (mobnr << 4);
     306:	9c 2f       	mov	r25, r28
     308:	92 95       	swap	r25
     30a:	90 7f       	andi	r25, 0xF0	; 240
     30c:	90 93 ed 00 	sts	0x00ED, r25	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7e00ed>
	CANIE2 = (1 << mobnr);
     310:	21 e0       	ldi	r18, 0x01	; 1
     312:	30 e0       	ldi	r19, 0x00	; 0
     314:	0c 2e       	mov	r0, r28
     316:	02 c0       	rjmp	.+4      	; 0x31c <can_receive_message+0x22>
     318:	22 0f       	add	r18, r18
     31a:	33 1f       	adc	r19, r19
     31c:	0a 94       	dec	r0
     31e:	e2 f7       	brpl	.-8      	; 0x318 <can_receive_message+0x1e>
     320:	20 93 de 00 	sts	0x00DE, r18	; 0x8000de <__TEXT_REGION_LENGTH__+0x7e00de>
	can_init_id(id);
     324:	b5 df       	rcall	.-150    	; 0x290 <can_init_id>
	can_init_mask_def();
     326:	c2 df       	rcall	.-124    	; 0x2ac <can_init_mask_def>
     328:	88 e8       	ldi	r24, 0x88	; 136
	//CAN standard rev 2.0 A (identifiers length = 11 bits)
	CANCDMOB = (1 << CONMOB1) | (1 << DLC3); //enable reception and data length code = 8 bytes
     32a:	80 93 ef 00 	sts	0x00EF, r24	; 0x8000ef <__TEXT_REGION_LENGTH__+0x7e00ef>
     32e:	ea ed       	ldi	r30, 0xDA	; 218
	
	//wait for interrupt
	while((CANGIT & INTR_MASK) != (1 << CANIT));
     330:	f0 e0       	ldi	r31, 0x00	; 0
     332:	80 81       	ld	r24, Z
     334:	88 23       	and	r24, r24
     336:	ec f7       	brge	.-6      	; 0x332 <can_receive_message+0x38>
     338:	80 91 ee 00 	lds	r24, 0x00EE	; 0x8000ee <__TEXT_REGION_LENGTH__+0x7e00ee>
	//check if it is the right interrupt.
	if((CANSTMOB & RXOK_MASK) != (1 << RXOK)) return 1;
     33c:	85 ff       	sbrs	r24, 5
     33e:	0e c0       	rjmp	.+28     	; 0x35c <can_receive_message+0x62>
     340:	10 92 ee 00 	sts	0x00EE, r1	; 0x8000ee <__TEXT_REGION_LENGTH__+0x7e00ee>
	//reset mob RXOK flag.
	CANSTMOB = 0x00;
     344:	10 92 de 00 	sts	0x00DE, r1	; 0x8000de <__TEXT_REGION_LENGTH__+0x7e00de>
	//reset interrupt enable
	CANIE2 = 0x00;
     348:	ea ed       	ldi	r30, 0xDA	; 218
	//reset interrupt register.
	CANGIT = CANGIT;
     34a:	f0 e0       	ldi	r31, 0x00	; 0
     34c:	80 81       	ld	r24, Z
     34e:	80 83       	st	Z, r24
     350:	b8 01       	movw	r22, r16
	//retrieve message.
	can_get_message(mobnr, message);
     352:	8c 2f       	mov	r24, r28
     354:	7c df       	rcall	.-264    	; 0x24e <can_get_message>
     356:	80 e0       	ldi	r24, 0x00	; 0
	return 0;
     358:	90 e0       	ldi	r25, 0x00	; 0
     35a:	02 c0       	rjmp	.+4      	; 0x360 <can_receive_message+0x66>
     35c:	81 e0       	ldi	r24, 0x01	; 1
	CANCDMOB = (1 << CONMOB1) | (1 << DLC3); //enable reception and data length code = 8 bytes
	
	//wait for interrupt
	while((CANGIT & INTR_MASK) != (1 << CANIT));
	//check if it is the right interrupt.
	if((CANSTMOB & RXOK_MASK) != (1 << RXOK)) return 1;
     35e:	90 e0       	ldi	r25, 0x00	; 0
     360:	cf 91       	pop	r28
	//reset interrupt register.
	CANGIT = CANGIT;
	//retrieve message.
	can_get_message(mobnr, message);
	return 0;
}
     362:	1f 91       	pop	r17
     364:	0f 91       	pop	r16
     366:	08 95       	ret

00000368 <can_send_frame_buffer>:
     368:	0f 93       	push	r16

int can_send_frame_buffer( uint8_t *message, uint8_t buff_len ){
     36a:	1f 93       	push	r17
     36c:	cf 93       	push	r28
     36e:	8c 01       	movw	r16, r24
	uint8_t j = buff_len;
	for(j=0; j<8; j++){
     370:	c0 e0       	ldi	r28, 0x00	; 0
		can_send_message(j,j,message);
     372:	a8 01       	movw	r20, r16
     374:	6c 2f       	mov	r22, r28
     376:	8c 2f       	mov	r24, r28
     378:	ad df       	rcall	.-166    	; 0x2d4 <can_send_message>
		message = message + 8;
     37a:	08 5f       	subi	r16, 0xF8	; 248
     37c:	1f 4f       	sbci	r17, 0xFF	; 255
	return 0;
}

int can_send_frame_buffer( uint8_t *message, uint8_t buff_len ){
	uint8_t j = buff_len;
	for(j=0; j<8; j++){
     37e:	cf 5f       	subi	r28, 0xFF	; 255
     380:	c8 30       	cpi	r28, 0x08	; 8
     382:	b9 f7       	brne	.-18     	; 0x372 <can_send_frame_buffer+0xa>
		can_send_message(j,j,message);
		message = message + 8;
	}
	return 0;
}
     384:	80 e0       	ldi	r24, 0x00	; 0
     386:	90 e0       	ldi	r25, 0x00	; 0
     388:	cf 91       	pop	r28
     38a:	1f 91       	pop	r17
     38c:	0f 91       	pop	r16
     38e:	08 95       	ret

00000390 <can_receive_frame_buffer>:

int can_receive_frame_buffer( uint8_t *message , uint8_t buff_len){
     390:	bf 92       	push	r11
     392:	cf 92       	push	r12
     394:	df 92       	push	r13
     396:	ef 92       	push	r14
     398:	ff 92       	push	r15
     39a:	0f 93       	push	r16
     39c:	1f 93       	push	r17
     39e:	cf 93       	push	r28
     3a0:	df 93       	push	r29
     3a2:	7c 01       	movw	r14, r24
     3a4:	b6 2e       	mov	r11, r22
	//Enable buffer receive interrupt.
	CANGIE |= (1 << ENBX);
     3a6:	eb ed       	ldi	r30, 0xDB	; 219
     3a8:	f0 e0       	ldi	r31, 0x00	; 0
     3aa:	80 81       	ld	r24, Z
     3ac:	84 60       	ori	r24, 0x04	; 4
     3ae:	80 83       	st	Z, r24
	uint8_t j = buff_len;
	for(j=0; j<8; j++){
     3b0:	c0 e0       	ldi	r28, 0x00	; 0
		CANPAGE = (j << 4);
     3b2:	0f 2e       	mov	r0, r31
     3b4:	fd ee       	ldi	r31, 0xED	; 237
     3b6:	cf 2e       	mov	r12, r31
     3b8:	d1 2c       	mov	r13, r1
     3ba:	f0 2d       	mov	r31, r0
		can_init_id(j);
		// Mask = 255
		can_init_mask_def();
		//set mob in buffer receive mode.
		CANCDMOB = (1 << CONMOB0) | (1 << CONMOB1) | (1 << DLC3);
     3bc:	0f ee       	ldi	r16, 0xEF	; 239
     3be:	10 e0       	ldi	r17, 0x00	; 0
     3c0:	d8 ec       	ldi	r29, 0xC8	; 200
int can_receive_frame_buffer( uint8_t *message , uint8_t buff_len){
	//Enable buffer receive interrupt.
	CANGIE |= (1 << ENBX);
	uint8_t j = buff_len;
	for(j=0; j<8; j++){
		CANPAGE = (j << 4);
     3c2:	8c 2f       	mov	r24, r28
     3c4:	82 95       	swap	r24
     3c6:	80 7f       	andi	r24, 0xF0	; 240
     3c8:	f6 01       	movw	r30, r12
     3ca:	80 83       	st	Z, r24
		can_init_id(j);
     3cc:	8c 2f       	mov	r24, r28
     3ce:	60 df       	rcall	.-320    	; 0x290 <can_init_id>
		// Mask = 255
		can_init_mask_def();
     3d0:	6d df       	rcall	.-294    	; 0x2ac <can_init_mask_def>
     3d2:	f8 01       	movw	r30, r16
		//set mob in buffer receive mode.
		CANCDMOB = (1 << CONMOB0) | (1 << CONMOB1) | (1 << DLC3);
     3d4:	d0 83       	st	Z, r29
     3d6:	cf 5f       	subi	r28, 0xFF	; 255

int can_receive_frame_buffer( uint8_t *message , uint8_t buff_len){
	//Enable buffer receive interrupt.
	CANGIE |= (1 << ENBX);
	uint8_t j = buff_len;
	for(j=0; j<8; j++){
     3d8:	c8 30       	cpi	r28, 0x08	; 8
     3da:	99 f7       	brne	.-26     	; 0x3c2 <can_receive_frame_buffer+0x32>
     3dc:	ea ed       	ldi	r30, 0xDA	; 218
		can_init_mask_def();
		//set mob in buffer receive mode.
		CANCDMOB = (1 << CONMOB0) | (1 << CONMOB1) | (1 << DLC3);
	}
	//wait for interrupt.
	while((CANGIT & INTR_MASK) != (1 << CANIT));
     3de:	f0 e0       	ldi	r31, 0x00	; 0
     3e0:	80 81       	ld	r24, Z
     3e2:	88 23       	and	r24, r24
     3e4:	ec f7       	brge	.-6      	; 0x3e0 <can_receive_frame_buffer+0x50>
     3e6:	80 91 da 00 	lds	r24, 0x00DA	; 0x8000da <__TEXT_REGION_LENGTH__+0x7e00da>
	//Check if interrupt is the right one (BXOK).
	if((CANGIT & BXOK_MASK) != (1 << BXOK)) return 1;
     3ea:	84 ff       	sbrs	r24, 4
     3ec:	1a c0       	rjmp	.+52     	; 0x422 <__LOCK_REGION_LENGTH__+0x22>
     3ee:	80 e0       	ldi	r24, 0x00	; 0
     3f0:	cd ee       	ldi	r28, 0xED	; 237
	//reset mob RXOK flags
	for(j=0; j<8; j++){
		CANPAGE = (j << 4);
     3f2:	d0 e0       	ldi	r29, 0x00	; 0
     3f4:	af ee       	ldi	r26, 0xEF	; 239
		CANCDMOB = 0x00;
     3f6:	b0 e0       	ldi	r27, 0x00	; 0
     3f8:	ee ee       	ldi	r30, 0xEE	; 238
		CANSTMOB = 0x00;
     3fa:	f0 e0       	ldi	r31, 0x00	; 0
     3fc:	98 2f       	mov	r25, r24
	while((CANGIT & INTR_MASK) != (1 << CANIT));
	//Check if interrupt is the right one (BXOK).
	if((CANGIT & BXOK_MASK) != (1 << BXOK)) return 1;
	//reset mob RXOK flags
	for(j=0; j<8; j++){
		CANPAGE = (j << 4);
     3fe:	92 95       	swap	r25
     400:	90 7f       	andi	r25, 0xF0	; 240
     402:	98 83       	st	Y, r25
     404:	1c 92       	st	X, r1
		CANCDMOB = 0x00;
     406:	10 82       	st	Z, r1
		CANSTMOB = 0x00;
     408:	8f 5f       	subi	r24, 0xFF	; 255
	//wait for interrupt.
	while((CANGIT & INTR_MASK) != (1 << CANIT));
	//Check if interrupt is the right one (BXOK).
	if((CANGIT & BXOK_MASK) != (1 << BXOK)) return 1;
	//reset mob RXOK flags
	for(j=0; j<8; j++){
     40a:	88 30       	cpi	r24, 0x08	; 8
     40c:	b9 f7       	brne	.-18     	; 0x3fc <can_receive_frame_buffer+0x6c>
     40e:	ea ed       	ldi	r30, 0xDA	; 218
		CANPAGE = (j << 4);
		CANCDMOB = 0x00;
		CANSTMOB = 0x00;
	}
	//Reset interrupt register.
	CANGIT = CANGIT;
     410:	f0 e0       	ldi	r31, 0x00	; 0
     412:	80 81       	ld	r24, Z
     414:	80 83       	st	Z, r24
     416:	6b 2d       	mov	r22, r11
	//retrieve message.
	can_get_frame_buffer(message, buff_len);
     418:	c7 01       	movw	r24, r14
     41a:	29 df       	rcall	.-430    	; 0x26e <can_get_frame_buffer>
     41c:	80 e0       	ldi	r24, 0x00	; 0
	return 0;
     41e:	90 e0       	ldi	r25, 0x00	; 0
     420:	02 c0       	rjmp	.+4      	; 0x426 <__LOCK_REGION_LENGTH__+0x26>
     422:	81 e0       	ldi	r24, 0x01	; 1
		CANCDMOB = (1 << CONMOB0) | (1 << CONMOB1) | (1 << DLC3);
	}
	//wait for interrupt.
	while((CANGIT & INTR_MASK) != (1 << CANIT));
	//Check if interrupt is the right one (BXOK).
	if((CANGIT & BXOK_MASK) != (1 << BXOK)) return 1;
     424:	90 e0       	ldi	r25, 0x00	; 0
     426:	df 91       	pop	r29
	//Reset interrupt register.
	CANGIT = CANGIT;
	//retrieve message.
	can_get_frame_buffer(message, buff_len);
	return 0;
}
     428:	cf 91       	pop	r28
     42a:	1f 91       	pop	r17
     42c:	0f 91       	pop	r16
     42e:	ff 90       	pop	r15
     430:	ef 90       	pop	r14
     432:	df 90       	pop	r13
     434:	cf 90       	pop	r12
     436:	bf 90       	pop	r11
     438:	08 95       	ret

0000043a <uECC_vli_clear>:
     43a:	dc 01       	movw	r26, r24
#if (uECC_OPTIMIZATION_LEVEL > 0)
    &vli_mmod_fast_secp256k1
#endif
};

uECC_Curve uECC_secp256k1(void) { return &curve_secp256k1; }
     43c:	e3 e4       	ldi	r30, 0x43	; 67
     43e:	f2 e0       	ldi	r31, 0x02	; 2
     440:	e6 1b       	sub	r30, r22
     442:	f1 09       	sbc	r31, r1
     444:	09 94       	ijmp
     446:	1d 92       	st	X+, r1
     448:	1d 92       	st	X+, r1
     44a:	1d 92       	st	X+, r1
     44c:	1d 92       	st	X+, r1
     44e:	1d 92       	st	X+, r1
     450:	1d 92       	st	X+, r1
     452:	1d 92       	st	X+, r1
     454:	1d 92       	st	X+, r1
     456:	1d 92       	st	X+, r1
     458:	1d 92       	st	X+, r1
     45a:	1d 92       	st	X+, r1
     45c:	1d 92       	st	X+, r1
     45e:	1d 92       	st	X+, r1
     460:	1d 92       	st	X+, r1
     462:	1d 92       	st	X+, r1
     464:	1d 92       	st	X+, r1
     466:	1d 92       	st	X+, r1
     468:	1d 92       	st	X+, r1
     46a:	1d 92       	st	X+, r1
     46c:	1d 92       	st	X+, r1
     46e:	1d 92       	st	X+, r1
     470:	1d 92       	st	X+, r1
     472:	1d 92       	st	X+, r1
     474:	1d 92       	st	X+, r1
     476:	1d 92       	st	X+, r1
     478:	1d 92       	st	X+, r1
     47a:	1d 92       	st	X+, r1
     47c:	1d 92       	st	X+, r1
     47e:	1d 92       	st	X+, r1
     480:	1d 92       	st	X+, r1
     482:	1d 92       	st	X+, r1
     484:	1d 92       	st	X+, r1
     486:	08 95       	ret

00000488 <uECC_vli_set>:
     488:	cf 93       	push	r28
     48a:	df 93       	push	r29
     48c:	44 0f       	add	r20, r20
     48e:	eb 01       	movw	r28, r22
     490:	dc 01       	movw	r26, r24
     492:	ee e8       	ldi	r30, 0x8E	; 142
     494:	f2 e0       	ldi	r31, 0x02	; 2
     496:	e4 1b       	sub	r30, r20
     498:	f1 09       	sbc	r31, r1
     49a:	09 94       	ijmp
     49c:	09 90       	ld	r0, Y+
     49e:	0d 92       	st	X+, r0
     4a0:	09 90       	ld	r0, Y+
     4a2:	0d 92       	st	X+, r0
     4a4:	09 90       	ld	r0, Y+
     4a6:	0d 92       	st	X+, r0
     4a8:	09 90       	ld	r0, Y+
     4aa:	0d 92       	st	X+, r0
     4ac:	09 90       	ld	r0, Y+
     4ae:	0d 92       	st	X+, r0
     4b0:	09 90       	ld	r0, Y+
     4b2:	0d 92       	st	X+, r0
     4b4:	09 90       	ld	r0, Y+
     4b6:	0d 92       	st	X+, r0
     4b8:	09 90       	ld	r0, Y+
     4ba:	0d 92       	st	X+, r0
     4bc:	09 90       	ld	r0, Y+
     4be:	0d 92       	st	X+, r0
     4c0:	09 90       	ld	r0, Y+
     4c2:	0d 92       	st	X+, r0
     4c4:	09 90       	ld	r0, Y+
     4c6:	0d 92       	st	X+, r0
     4c8:	09 90       	ld	r0, Y+
     4ca:	0d 92       	st	X+, r0
     4cc:	09 90       	ld	r0, Y+
     4ce:	0d 92       	st	X+, r0
     4d0:	09 90       	ld	r0, Y+
     4d2:	0d 92       	st	X+, r0
     4d4:	09 90       	ld	r0, Y+
     4d6:	0d 92       	st	X+, r0
     4d8:	09 90       	ld	r0, Y+
     4da:	0d 92       	st	X+, r0
     4dc:	09 90       	ld	r0, Y+
     4de:	0d 92       	st	X+, r0
     4e0:	09 90       	ld	r0, Y+
     4e2:	0d 92       	st	X+, r0
     4e4:	09 90       	ld	r0, Y+
     4e6:	0d 92       	st	X+, r0
     4e8:	09 90       	ld	r0, Y+
     4ea:	0d 92       	st	X+, r0
     4ec:	09 90       	ld	r0, Y+
     4ee:	0d 92       	st	X+, r0
     4f0:	09 90       	ld	r0, Y+
     4f2:	0d 92       	st	X+, r0
     4f4:	09 90       	ld	r0, Y+
     4f6:	0d 92       	st	X+, r0
     4f8:	09 90       	ld	r0, Y+
     4fa:	0d 92       	st	X+, r0
     4fc:	09 90       	ld	r0, Y+
     4fe:	0d 92       	st	X+, r0
     500:	09 90       	ld	r0, Y+
     502:	0d 92       	st	X+, r0
     504:	09 90       	ld	r0, Y+
     506:	0d 92       	st	X+, r0
     508:	09 90       	ld	r0, Y+
     50a:	0d 92       	st	X+, r0
     50c:	09 90       	ld	r0, Y+
     50e:	0d 92       	st	X+, r0
     510:	09 90       	ld	r0, Y+
     512:	0d 92       	st	X+, r0
     514:	09 90       	ld	r0, Y+
     516:	0d 92       	st	X+, r0
     518:	09 90       	ld	r0, Y+
     51a:	0d 92       	st	X+, r0
     51c:	df 91       	pop	r29
     51e:	cf 91       	pop	r28
     520:	08 95       	ret

00000522 <uECC_vli_rshift1>:
     522:	26 2f       	mov	r18, r22
     524:	06 2e       	mov	r0, r22
     526:	00 0c       	add	r0, r0
     528:	33 0b       	sbc	r19, r19
     52a:	21 50       	subi	r18, 0x01	; 1
     52c:	31 09       	sbc	r19, r1
     52e:	32 2f       	mov	r19, r18
     530:	33 0f       	add	r19, r19
     532:	23 0f       	add	r18, r19
     534:	dc 01       	movw	r26, r24
     536:	e2 e0       	ldi	r30, 0x02	; 2
     538:	f3 e0       	ldi	r31, 0x03	; 3
     53a:	e2 1b       	sub	r30, r18
     53c:	f1 09       	sbc	r31, r1
     53e:	a6 0f       	add	r26, r22
     540:	b1 1d       	adc	r27, r1
     542:	0e 90       	ld	r0, -X
     544:	06 94       	lsr	r0
     546:	0c 92       	st	X, r0
     548:	09 94       	ijmp
     54a:	0e 90       	ld	r0, -X
     54c:	07 94       	ror	r0
     54e:	0c 92       	st	X, r0
     550:	0e 90       	ld	r0, -X
     552:	07 94       	ror	r0
     554:	0c 92       	st	X, r0
     556:	0e 90       	ld	r0, -X
     558:	07 94       	ror	r0
     55a:	0c 92       	st	X, r0
     55c:	0e 90       	ld	r0, -X
     55e:	07 94       	ror	r0
     560:	0c 92       	st	X, r0
     562:	0e 90       	ld	r0, -X
     564:	07 94       	ror	r0
     566:	0c 92       	st	X, r0
     568:	0e 90       	ld	r0, -X
     56a:	07 94       	ror	r0
     56c:	0c 92       	st	X, r0
     56e:	0e 90       	ld	r0, -X
     570:	07 94       	ror	r0
     572:	0c 92       	st	X, r0
     574:	0e 90       	ld	r0, -X
     576:	07 94       	ror	r0
     578:	0c 92       	st	X, r0
     57a:	0e 90       	ld	r0, -X
     57c:	07 94       	ror	r0
     57e:	0c 92       	st	X, r0
     580:	0e 90       	ld	r0, -X
     582:	07 94       	ror	r0
     584:	0c 92       	st	X, r0
     586:	0e 90       	ld	r0, -X
     588:	07 94       	ror	r0
     58a:	0c 92       	st	X, r0
     58c:	0e 90       	ld	r0, -X
     58e:	07 94       	ror	r0
     590:	0c 92       	st	X, r0
     592:	0e 90       	ld	r0, -X
     594:	07 94       	ror	r0
     596:	0c 92       	st	X, r0
     598:	0e 90       	ld	r0, -X
     59a:	07 94       	ror	r0
     59c:	0c 92       	st	X, r0
     59e:	0e 90       	ld	r0, -X
     5a0:	07 94       	ror	r0
     5a2:	0c 92       	st	X, r0
     5a4:	0e 90       	ld	r0, -X
     5a6:	07 94       	ror	r0
     5a8:	0c 92       	st	X, r0
     5aa:	0e 90       	ld	r0, -X
     5ac:	07 94       	ror	r0
     5ae:	0c 92       	st	X, r0
     5b0:	0e 90       	ld	r0, -X
     5b2:	07 94       	ror	r0
     5b4:	0c 92       	st	X, r0
     5b6:	0e 90       	ld	r0, -X
     5b8:	07 94       	ror	r0
     5ba:	0c 92       	st	X, r0
     5bc:	0e 90       	ld	r0, -X
     5be:	07 94       	ror	r0
     5c0:	0c 92       	st	X, r0
     5c2:	0e 90       	ld	r0, -X
     5c4:	07 94       	ror	r0
     5c6:	0c 92       	st	X, r0
     5c8:	0e 90       	ld	r0, -X
     5ca:	07 94       	ror	r0
     5cc:	0c 92       	st	X, r0
     5ce:	0e 90       	ld	r0, -X
     5d0:	07 94       	ror	r0
     5d2:	0c 92       	st	X, r0
     5d4:	0e 90       	ld	r0, -X
     5d6:	07 94       	ror	r0
     5d8:	0c 92       	st	X, r0
     5da:	0e 90       	ld	r0, -X
     5dc:	07 94       	ror	r0
     5de:	0c 92       	st	X, r0
     5e0:	0e 90       	ld	r0, -X
     5e2:	07 94       	ror	r0
     5e4:	0c 92       	st	X, r0
     5e6:	0e 90       	ld	r0, -X
     5e8:	07 94       	ror	r0
     5ea:	0c 92       	st	X, r0
     5ec:	0e 90       	ld	r0, -X
     5ee:	07 94       	ror	r0
     5f0:	0c 92       	st	X, r0
     5f2:	0e 90       	ld	r0, -X
     5f4:	07 94       	ror	r0
     5f6:	0c 92       	st	X, r0
     5f8:	0e 90       	ld	r0, -X
     5fa:	07 94       	ror	r0
     5fc:	0c 92       	st	X, r0
     5fe:	0e 90       	ld	r0, -X
     600:	07 94       	ror	r0
     602:	0c 92       	st	X, r0
     604:	08 95       	ret

00000606 <uECC_vli_add>:
     606:	cf 93       	push	r28
     608:	df 93       	push	r29
     60a:	22 0f       	add	r18, r18
     60c:	db 01       	movw	r26, r22
     60e:	ea 01       	movw	r28, r20
     610:	ac 01       	movw	r20, r24
     612:	ef e4       	ldi	r30, 0x4F	; 79
     614:	f3 e0       	ldi	r31, 0x03	; 3
     616:	e2 1b       	sub	r30, r18
     618:	f1 09       	sbc	r31, r1
     61a:	88 94       	clc
     61c:	09 94       	ijmp
     61e:	fa 01       	movw	r30, r20
     620:	3e c0       	rjmp	.+124    	; 0x69e <add_89_32>
     622:	fa 01       	movw	r30, r20
     624:	40 c0       	rjmp	.+128    	; 0x6a6 <add_89_31>
     626:	fa 01       	movw	r30, r20
     628:	42 c0       	rjmp	.+132    	; 0x6ae <add_89_30>
     62a:	fa 01       	movw	r30, r20
     62c:	44 c0       	rjmp	.+136    	; 0x6b6 <add_89_29>
     62e:	fa 01       	movw	r30, r20
     630:	46 c0       	rjmp	.+140    	; 0x6be <add_89_28>
     632:	fa 01       	movw	r30, r20
     634:	48 c0       	rjmp	.+144    	; 0x6c6 <add_89_27>
     636:	fa 01       	movw	r30, r20
     638:	4a c0       	rjmp	.+148    	; 0x6ce <add_89_26>
     63a:	fa 01       	movw	r30, r20
     63c:	4c c0       	rjmp	.+152    	; 0x6d6 <add_89_25>
     63e:	fa 01       	movw	r30, r20
     640:	4e c0       	rjmp	.+156    	; 0x6de <add_89_24>
     642:	fa 01       	movw	r30, r20
     644:	50 c0       	rjmp	.+160    	; 0x6e6 <add_89_23>
     646:	fa 01       	movw	r30, r20
     648:	52 c0       	rjmp	.+164    	; 0x6ee <add_89_22>
     64a:	fa 01       	movw	r30, r20
     64c:	54 c0       	rjmp	.+168    	; 0x6f6 <add_89_21>
     64e:	fa 01       	movw	r30, r20
     650:	56 c0       	rjmp	.+172    	; 0x6fe <add_89_20>
     652:	fa 01       	movw	r30, r20
     654:	58 c0       	rjmp	.+176    	; 0x706 <add_89_19>
     656:	fa 01       	movw	r30, r20
     658:	5a c0       	rjmp	.+180    	; 0x70e <add_89_18>
     65a:	fa 01       	movw	r30, r20
     65c:	5c c0       	rjmp	.+184    	; 0x716 <add_89_17>
     65e:	fa 01       	movw	r30, r20
     660:	5e c0       	rjmp	.+188    	; 0x71e <add_89_16>
     662:	fa 01       	movw	r30, r20
     664:	60 c0       	rjmp	.+192    	; 0x726 <add_89_15>
     666:	fa 01       	movw	r30, r20
     668:	62 c0       	rjmp	.+196    	; 0x72e <add_89_14>
     66a:	fa 01       	movw	r30, r20
     66c:	64 c0       	rjmp	.+200    	; 0x736 <add_89_13>
     66e:	fa 01       	movw	r30, r20
     670:	66 c0       	rjmp	.+204    	; 0x73e <add_89_12>
     672:	fa 01       	movw	r30, r20
     674:	68 c0       	rjmp	.+208    	; 0x746 <add_89_11>
     676:	fa 01       	movw	r30, r20
     678:	6a c0       	rjmp	.+212    	; 0x74e <add_89_10>
     67a:	fa 01       	movw	r30, r20
     67c:	6c c0       	rjmp	.+216    	; 0x756 <add_89_9>
     67e:	fa 01       	movw	r30, r20
     680:	6e c0       	rjmp	.+220    	; 0x75e <add_89_8>
     682:	fa 01       	movw	r30, r20
     684:	70 c0       	rjmp	.+224    	; 0x766 <add_89_7>
     686:	fa 01       	movw	r30, r20
     688:	72 c0       	rjmp	.+228    	; 0x76e <add_89_6>
     68a:	fa 01       	movw	r30, r20
     68c:	74 c0       	rjmp	.+232    	; 0x776 <add_89_5>
     68e:	fa 01       	movw	r30, r20
     690:	76 c0       	rjmp	.+236    	; 0x77e <add_89_4>
     692:	fa 01       	movw	r30, r20
     694:	78 c0       	rjmp	.+240    	; 0x786 <add_89_3>
     696:	fa 01       	movw	r30, r20
     698:	7a c0       	rjmp	.+244    	; 0x78e <add_89_2>
     69a:	fa 01       	movw	r30, r20
     69c:	7c c0       	rjmp	.+248    	; 0x796 <add_89_1>

0000069e <add_89_32>:
     69e:	8d 91       	ld	r24, X+
     6a0:	99 91       	ld	r25, Y+
     6a2:	89 1f       	adc	r24, r25
     6a4:	81 93       	st	Z+, r24

000006a6 <add_89_31>:
     6a6:	8d 91       	ld	r24, X+
     6a8:	99 91       	ld	r25, Y+
     6aa:	89 1f       	adc	r24, r25
     6ac:	81 93       	st	Z+, r24

000006ae <add_89_30>:
     6ae:	8d 91       	ld	r24, X+
     6b0:	99 91       	ld	r25, Y+
     6b2:	89 1f       	adc	r24, r25
     6b4:	81 93       	st	Z+, r24

000006b6 <add_89_29>:
     6b6:	8d 91       	ld	r24, X+
     6b8:	99 91       	ld	r25, Y+
     6ba:	89 1f       	adc	r24, r25
     6bc:	81 93       	st	Z+, r24

000006be <add_89_28>:
     6be:	8d 91       	ld	r24, X+
     6c0:	99 91       	ld	r25, Y+
     6c2:	89 1f       	adc	r24, r25
     6c4:	81 93       	st	Z+, r24

000006c6 <add_89_27>:
     6c6:	8d 91       	ld	r24, X+
     6c8:	99 91       	ld	r25, Y+
     6ca:	89 1f       	adc	r24, r25
     6cc:	81 93       	st	Z+, r24

000006ce <add_89_26>:
     6ce:	8d 91       	ld	r24, X+
     6d0:	99 91       	ld	r25, Y+
     6d2:	89 1f       	adc	r24, r25
     6d4:	81 93       	st	Z+, r24

000006d6 <add_89_25>:
     6d6:	8d 91       	ld	r24, X+
     6d8:	99 91       	ld	r25, Y+
     6da:	89 1f       	adc	r24, r25
     6dc:	81 93       	st	Z+, r24

000006de <add_89_24>:
     6de:	8d 91       	ld	r24, X+
     6e0:	99 91       	ld	r25, Y+
     6e2:	89 1f       	adc	r24, r25
     6e4:	81 93       	st	Z+, r24

000006e6 <add_89_23>:
     6e6:	8d 91       	ld	r24, X+
     6e8:	99 91       	ld	r25, Y+
     6ea:	89 1f       	adc	r24, r25
     6ec:	81 93       	st	Z+, r24

000006ee <add_89_22>:
     6ee:	8d 91       	ld	r24, X+
     6f0:	99 91       	ld	r25, Y+
     6f2:	89 1f       	adc	r24, r25
     6f4:	81 93       	st	Z+, r24

000006f6 <add_89_21>:
     6f6:	8d 91       	ld	r24, X+
     6f8:	99 91       	ld	r25, Y+
     6fa:	89 1f       	adc	r24, r25
     6fc:	81 93       	st	Z+, r24

000006fe <add_89_20>:
     6fe:	8d 91       	ld	r24, X+
     700:	99 91       	ld	r25, Y+
     702:	89 1f       	adc	r24, r25
     704:	81 93       	st	Z+, r24

00000706 <add_89_19>:
     706:	8d 91       	ld	r24, X+
     708:	99 91       	ld	r25, Y+
     70a:	89 1f       	adc	r24, r25
     70c:	81 93       	st	Z+, r24

0000070e <add_89_18>:
     70e:	8d 91       	ld	r24, X+
     710:	99 91       	ld	r25, Y+
     712:	89 1f       	adc	r24, r25
     714:	81 93       	st	Z+, r24

00000716 <add_89_17>:
     716:	8d 91       	ld	r24, X+
     718:	99 91       	ld	r25, Y+
     71a:	89 1f       	adc	r24, r25
     71c:	81 93       	st	Z+, r24

0000071e <add_89_16>:
     71e:	8d 91       	ld	r24, X+
     720:	99 91       	ld	r25, Y+
     722:	89 1f       	adc	r24, r25
     724:	81 93       	st	Z+, r24

00000726 <add_89_15>:
     726:	8d 91       	ld	r24, X+
     728:	99 91       	ld	r25, Y+
     72a:	89 1f       	adc	r24, r25
     72c:	81 93       	st	Z+, r24

0000072e <add_89_14>:
     72e:	8d 91       	ld	r24, X+
     730:	99 91       	ld	r25, Y+
     732:	89 1f       	adc	r24, r25
     734:	81 93       	st	Z+, r24

00000736 <add_89_13>:
     736:	8d 91       	ld	r24, X+
     738:	99 91       	ld	r25, Y+
     73a:	89 1f       	adc	r24, r25
     73c:	81 93       	st	Z+, r24

0000073e <add_89_12>:
     73e:	8d 91       	ld	r24, X+
     740:	99 91       	ld	r25, Y+
     742:	89 1f       	adc	r24, r25
     744:	81 93       	st	Z+, r24

00000746 <add_89_11>:
     746:	8d 91       	ld	r24, X+
     748:	99 91       	ld	r25, Y+
     74a:	89 1f       	adc	r24, r25
     74c:	81 93       	st	Z+, r24

0000074e <add_89_10>:
     74e:	8d 91       	ld	r24, X+
     750:	99 91       	ld	r25, Y+
     752:	89 1f       	adc	r24, r25
     754:	81 93       	st	Z+, r24

00000756 <add_89_9>:
     756:	8d 91       	ld	r24, X+
     758:	99 91       	ld	r25, Y+
     75a:	89 1f       	adc	r24, r25
     75c:	81 93       	st	Z+, r24

0000075e <add_89_8>:
     75e:	8d 91       	ld	r24, X+
     760:	99 91       	ld	r25, Y+
     762:	89 1f       	adc	r24, r25
     764:	81 93       	st	Z+, r24

00000766 <add_89_7>:
     766:	8d 91       	ld	r24, X+
     768:	99 91       	ld	r25, Y+
     76a:	89 1f       	adc	r24, r25
     76c:	81 93       	st	Z+, r24

0000076e <add_89_6>:
     76e:	8d 91       	ld	r24, X+
     770:	99 91       	ld	r25, Y+
     772:	89 1f       	adc	r24, r25
     774:	81 93       	st	Z+, r24

00000776 <add_89_5>:
     776:	8d 91       	ld	r24, X+
     778:	99 91       	ld	r25, Y+
     77a:	89 1f       	adc	r24, r25
     77c:	81 93       	st	Z+, r24

0000077e <add_89_4>:
     77e:	8d 91       	ld	r24, X+
     780:	99 91       	ld	r25, Y+
     782:	89 1f       	adc	r24, r25
     784:	81 93       	st	Z+, r24

00000786 <add_89_3>:
     786:	8d 91       	ld	r24, X+
     788:	99 91       	ld	r25, Y+
     78a:	89 1f       	adc	r24, r25
     78c:	81 93       	st	Z+, r24

0000078e <add_89_2>:
     78e:	8d 91       	ld	r24, X+
     790:	99 91       	ld	r25, Y+
     792:	89 1f       	adc	r24, r25
     794:	81 93       	st	Z+, r24

00000796 <add_89_1>:
     796:	8d 91       	ld	r24, X+
     798:	99 91       	ld	r25, Y+
     79a:	89 1f       	adc	r24, r25
     79c:	81 93       	st	Z+, r24
     79e:	81 2d       	mov	r24, r1
     7a0:	88 1f       	adc	r24, r24
     7a2:	df 91       	pop	r29
     7a4:	cf 91       	pop	r28
     7a6:	08 95       	ret

000007a8 <uECC_vli_sub>:
     7a8:	cf 93       	push	r28
     7aa:	df 93       	push	r29
     7ac:	22 0f       	add	r18, r18
     7ae:	db 01       	movw	r26, r22
     7b0:	ea 01       	movw	r28, r20
     7b2:	ac 01       	movw	r20, r24
     7b4:	e0 e2       	ldi	r30, 0x20	; 32
     7b6:	f4 e0       	ldi	r31, 0x04	; 4
     7b8:	e2 1b       	sub	r30, r18
     7ba:	f1 09       	sbc	r31, r1
     7bc:	88 94       	clc
     7be:	09 94       	ijmp
     7c0:	fa 01       	movw	r30, r20
     7c2:	3e c0       	rjmp	.+124    	; 0x840 <sub_129_32>
     7c4:	fa 01       	movw	r30, r20
     7c6:	40 c0       	rjmp	.+128    	; 0x848 <sub_129_31>
     7c8:	fa 01       	movw	r30, r20
     7ca:	42 c0       	rjmp	.+132    	; 0x850 <sub_129_30>
     7cc:	fa 01       	movw	r30, r20
     7ce:	44 c0       	rjmp	.+136    	; 0x858 <sub_129_29>
     7d0:	fa 01       	movw	r30, r20
     7d2:	46 c0       	rjmp	.+140    	; 0x860 <sub_129_28>
     7d4:	fa 01       	movw	r30, r20
     7d6:	48 c0       	rjmp	.+144    	; 0x868 <sub_129_27>
     7d8:	fa 01       	movw	r30, r20
     7da:	4a c0       	rjmp	.+148    	; 0x870 <sub_129_26>
     7dc:	fa 01       	movw	r30, r20
     7de:	4c c0       	rjmp	.+152    	; 0x878 <sub_129_25>
     7e0:	fa 01       	movw	r30, r20
     7e2:	4e c0       	rjmp	.+156    	; 0x880 <sub_129_24>
     7e4:	fa 01       	movw	r30, r20
     7e6:	50 c0       	rjmp	.+160    	; 0x888 <sub_129_23>
     7e8:	fa 01       	movw	r30, r20
     7ea:	52 c0       	rjmp	.+164    	; 0x890 <sub_129_22>
     7ec:	fa 01       	movw	r30, r20
     7ee:	54 c0       	rjmp	.+168    	; 0x898 <sub_129_21>
     7f0:	fa 01       	movw	r30, r20
     7f2:	56 c0       	rjmp	.+172    	; 0x8a0 <sub_129_20>
     7f4:	fa 01       	movw	r30, r20
     7f6:	58 c0       	rjmp	.+176    	; 0x8a8 <sub_129_19>
     7f8:	fa 01       	movw	r30, r20
     7fa:	5a c0       	rjmp	.+180    	; 0x8b0 <sub_129_18>
     7fc:	fa 01       	movw	r30, r20
     7fe:	5c c0       	rjmp	.+184    	; 0x8b8 <sub_129_17>
     800:	fa 01       	movw	r30, r20
     802:	5e c0       	rjmp	.+188    	; 0x8c0 <sub_129_16>
     804:	fa 01       	movw	r30, r20
     806:	60 c0       	rjmp	.+192    	; 0x8c8 <sub_129_15>
     808:	fa 01       	movw	r30, r20
     80a:	62 c0       	rjmp	.+196    	; 0x8d0 <sub_129_14>
     80c:	fa 01       	movw	r30, r20
     80e:	64 c0       	rjmp	.+200    	; 0x8d8 <sub_129_13>
     810:	fa 01       	movw	r30, r20
     812:	66 c0       	rjmp	.+204    	; 0x8e0 <sub_129_12>
     814:	fa 01       	movw	r30, r20
     816:	68 c0       	rjmp	.+208    	; 0x8e8 <sub_129_11>
     818:	fa 01       	movw	r30, r20
     81a:	6a c0       	rjmp	.+212    	; 0x8f0 <sub_129_10>
     81c:	fa 01       	movw	r30, r20
     81e:	6c c0       	rjmp	.+216    	; 0x8f8 <sub_129_9>
     820:	fa 01       	movw	r30, r20
     822:	6e c0       	rjmp	.+220    	; 0x900 <sub_129_8>
     824:	fa 01       	movw	r30, r20
     826:	70 c0       	rjmp	.+224    	; 0x908 <sub_129_7>
     828:	fa 01       	movw	r30, r20
     82a:	72 c0       	rjmp	.+228    	; 0x910 <sub_129_6>
     82c:	fa 01       	movw	r30, r20
     82e:	74 c0       	rjmp	.+232    	; 0x918 <sub_129_5>
     830:	fa 01       	movw	r30, r20
     832:	76 c0       	rjmp	.+236    	; 0x920 <sub_129_4>
     834:	fa 01       	movw	r30, r20
     836:	78 c0       	rjmp	.+240    	; 0x928 <sub_129_3>
     838:	fa 01       	movw	r30, r20
     83a:	7a c0       	rjmp	.+244    	; 0x930 <sub_129_2>
     83c:	fa 01       	movw	r30, r20
     83e:	7c c0       	rjmp	.+248    	; 0x938 <sub_129_1>

00000840 <sub_129_32>:
     840:	8d 91       	ld	r24, X+
     842:	99 91       	ld	r25, Y+
     844:	89 0b       	sbc	r24, r25
     846:	81 93       	st	Z+, r24

00000848 <sub_129_31>:
     848:	8d 91       	ld	r24, X+
     84a:	99 91       	ld	r25, Y+
     84c:	89 0b       	sbc	r24, r25
     84e:	81 93       	st	Z+, r24

00000850 <sub_129_30>:
     850:	8d 91       	ld	r24, X+
     852:	99 91       	ld	r25, Y+
     854:	89 0b       	sbc	r24, r25
     856:	81 93       	st	Z+, r24

00000858 <sub_129_29>:
     858:	8d 91       	ld	r24, X+
     85a:	99 91       	ld	r25, Y+
     85c:	89 0b       	sbc	r24, r25
     85e:	81 93       	st	Z+, r24

00000860 <sub_129_28>:
     860:	8d 91       	ld	r24, X+
     862:	99 91       	ld	r25, Y+
     864:	89 0b       	sbc	r24, r25
     866:	81 93       	st	Z+, r24

00000868 <sub_129_27>:
     868:	8d 91       	ld	r24, X+
     86a:	99 91       	ld	r25, Y+
     86c:	89 0b       	sbc	r24, r25
     86e:	81 93       	st	Z+, r24

00000870 <sub_129_26>:
     870:	8d 91       	ld	r24, X+
     872:	99 91       	ld	r25, Y+
     874:	89 0b       	sbc	r24, r25
     876:	81 93       	st	Z+, r24

00000878 <sub_129_25>:
     878:	8d 91       	ld	r24, X+
     87a:	99 91       	ld	r25, Y+
     87c:	89 0b       	sbc	r24, r25
     87e:	81 93       	st	Z+, r24

00000880 <sub_129_24>:
     880:	8d 91       	ld	r24, X+
     882:	99 91       	ld	r25, Y+
     884:	89 0b       	sbc	r24, r25
     886:	81 93       	st	Z+, r24

00000888 <sub_129_23>:
     888:	8d 91       	ld	r24, X+
     88a:	99 91       	ld	r25, Y+
     88c:	89 0b       	sbc	r24, r25
     88e:	81 93       	st	Z+, r24

00000890 <sub_129_22>:
     890:	8d 91       	ld	r24, X+
     892:	99 91       	ld	r25, Y+
     894:	89 0b       	sbc	r24, r25
     896:	81 93       	st	Z+, r24

00000898 <sub_129_21>:
     898:	8d 91       	ld	r24, X+
     89a:	99 91       	ld	r25, Y+
     89c:	89 0b       	sbc	r24, r25
     89e:	81 93       	st	Z+, r24

000008a0 <sub_129_20>:
     8a0:	8d 91       	ld	r24, X+
     8a2:	99 91       	ld	r25, Y+
     8a4:	89 0b       	sbc	r24, r25
     8a6:	81 93       	st	Z+, r24

000008a8 <sub_129_19>:
     8a8:	8d 91       	ld	r24, X+
     8aa:	99 91       	ld	r25, Y+
     8ac:	89 0b       	sbc	r24, r25
     8ae:	81 93       	st	Z+, r24

000008b0 <sub_129_18>:
     8b0:	8d 91       	ld	r24, X+
     8b2:	99 91       	ld	r25, Y+
     8b4:	89 0b       	sbc	r24, r25
     8b6:	81 93       	st	Z+, r24

000008b8 <sub_129_17>:
     8b8:	8d 91       	ld	r24, X+
     8ba:	99 91       	ld	r25, Y+
     8bc:	89 0b       	sbc	r24, r25
     8be:	81 93       	st	Z+, r24

000008c0 <sub_129_16>:
     8c0:	8d 91       	ld	r24, X+
     8c2:	99 91       	ld	r25, Y+
     8c4:	89 0b       	sbc	r24, r25
     8c6:	81 93       	st	Z+, r24

000008c8 <sub_129_15>:
     8c8:	8d 91       	ld	r24, X+
     8ca:	99 91       	ld	r25, Y+
     8cc:	89 0b       	sbc	r24, r25
     8ce:	81 93       	st	Z+, r24

000008d0 <sub_129_14>:
     8d0:	8d 91       	ld	r24, X+
     8d2:	99 91       	ld	r25, Y+
     8d4:	89 0b       	sbc	r24, r25
     8d6:	81 93       	st	Z+, r24

000008d8 <sub_129_13>:
     8d8:	8d 91       	ld	r24, X+
     8da:	99 91       	ld	r25, Y+
     8dc:	89 0b       	sbc	r24, r25
     8de:	81 93       	st	Z+, r24

000008e0 <sub_129_12>:
     8e0:	8d 91       	ld	r24, X+
     8e2:	99 91       	ld	r25, Y+
     8e4:	89 0b       	sbc	r24, r25
     8e6:	81 93       	st	Z+, r24

000008e8 <sub_129_11>:
     8e8:	8d 91       	ld	r24, X+
     8ea:	99 91       	ld	r25, Y+
     8ec:	89 0b       	sbc	r24, r25
     8ee:	81 93       	st	Z+, r24

000008f0 <sub_129_10>:
     8f0:	8d 91       	ld	r24, X+
     8f2:	99 91       	ld	r25, Y+
     8f4:	89 0b       	sbc	r24, r25
     8f6:	81 93       	st	Z+, r24

000008f8 <sub_129_9>:
     8f8:	8d 91       	ld	r24, X+
     8fa:	99 91       	ld	r25, Y+
     8fc:	89 0b       	sbc	r24, r25
     8fe:	81 93       	st	Z+, r24

00000900 <sub_129_8>:
     900:	8d 91       	ld	r24, X+
     902:	99 91       	ld	r25, Y+
     904:	89 0b       	sbc	r24, r25
     906:	81 93       	st	Z+, r24

00000908 <sub_129_7>:
     908:	8d 91       	ld	r24, X+
     90a:	99 91       	ld	r25, Y+
     90c:	89 0b       	sbc	r24, r25
     90e:	81 93       	st	Z+, r24

00000910 <sub_129_6>:
     910:	8d 91       	ld	r24, X+
     912:	99 91       	ld	r25, Y+
     914:	89 0b       	sbc	r24, r25
     916:	81 93       	st	Z+, r24

00000918 <sub_129_5>:
     918:	8d 91       	ld	r24, X+
     91a:	99 91       	ld	r25, Y+
     91c:	89 0b       	sbc	r24, r25
     91e:	81 93       	st	Z+, r24

00000920 <sub_129_4>:
     920:	8d 91       	ld	r24, X+
     922:	99 91       	ld	r25, Y+
     924:	89 0b       	sbc	r24, r25
     926:	81 93       	st	Z+, r24

00000928 <sub_129_3>:
     928:	8d 91       	ld	r24, X+
     92a:	99 91       	ld	r25, Y+
     92c:	89 0b       	sbc	r24, r25
     92e:	81 93       	st	Z+, r24

00000930 <sub_129_2>:
     930:	8d 91       	ld	r24, X+
     932:	99 91       	ld	r25, Y+
     934:	89 0b       	sbc	r24, r25
     936:	81 93       	st	Z+, r24

00000938 <sub_129_1>:
     938:	8d 91       	ld	r24, X+
     93a:	99 91       	ld	r25, Y+
     93c:	89 0b       	sbc	r24, r25
     93e:	81 93       	st	Z+, r24
     940:	81 2d       	mov	r24, r1
     942:	88 1f       	adc	r24, r24
     944:	df 91       	pop	r29
     946:	cf 91       	pop	r28
     948:	08 95       	ret

0000094a <uECC_vli_mult>:
     94a:	cf 93       	push	r28
     94c:	df 93       	push	r29
     94e:	fc 01       	movw	r30, r24
     950:	db 01       	movw	r26, r22
     952:	ea 01       	movw	r28, r20
     954:	90 e0       	ldi	r25, 0x00	; 0
     956:	89 2f       	mov	r24, r25
     958:	39 2f       	mov	r19, r25
     95a:	49 2f       	mov	r20, r25
     95c:	51 e0       	ldi	r21, 0x01	; 1
     95e:	60 e0       	ldi	r22, 0x00	; 0
     960:	c5 0f       	add	r28, r21
     962:	d4 1f       	adc	r29, r20
     964:	0d 90       	ld	r0, X+
     966:	1a 90       	ld	r1, -Y
     968:	01 9c       	mul	r0, r1
     96a:	90 0d       	add	r25, r0
     96c:	81 1d       	adc	r24, r1
     96e:	34 1f       	adc	r19, r20
     970:	63 95       	inc	r22
     972:	65 17       	cp	r22, r21
     974:	b8 f3       	brcs	.-18     	; 0x964 <uECC_vli_mult+0x1a>
     976:	a5 1b       	sub	r26, r21
     978:	b4 0b       	sbc	r27, r20
     97a:	91 93       	st	Z+, r25
     97c:	98 2f       	mov	r25, r24
     97e:	83 2f       	mov	r24, r19
     980:	34 2f       	mov	r19, r20
     982:	53 95       	inc	r21
     984:	52 17       	cp	r21, r18
     986:	58 f3       	brcs	.-42     	; 0x95e <uECC_vli_mult+0x14>
     988:	52 2f       	mov	r21, r18
     98a:	c2 0f       	add	r28, r18
     98c:	d4 1f       	adc	r29, r20
     98e:	60 e0       	ldi	r22, 0x00	; 0
     990:	0d 90       	ld	r0, X+
     992:	1a 90       	ld	r1, -Y
     994:	01 9c       	mul	r0, r1
     996:	90 0d       	add	r25, r0
     998:	81 1d       	adc	r24, r1
     99a:	34 1f       	adc	r19, r20
     99c:	63 95       	inc	r22
     99e:	65 17       	cp	r22, r21
     9a0:	b8 f3       	brcs	.-18     	; 0x990 <uECC_vli_mult+0x46>
     9a2:	c5 0f       	add	r28, r21
     9a4:	d4 1f       	adc	r29, r20
     9a6:	91 93       	st	Z+, r25
     9a8:	98 2f       	mov	r25, r24
     9aa:	83 2f       	mov	r24, r19
     9ac:	34 2f       	mov	r19, r20
     9ae:	5a 95       	dec	r21
     9b0:	a5 1b       	sub	r26, r21
     9b2:	b4 0b       	sbc	r27, r20
     9b4:	54 17       	cp	r21, r20
     9b6:	59 f7       	brne	.-42     	; 0x98e <uECC_vli_mult+0x44>
     9b8:	91 93       	st	Z+, r25
     9ba:	11 24       	eor	r1, r1
     9bc:	df 91       	pop	r29
     9be:	cf 91       	pop	r28
     9c0:	08 95       	ret

000009c2 <uECC_vli_isZero>:
     9c2:	16 16       	cp	r1, r22
     9c4:	7c f4       	brge	.+30     	; 0x9e4 <uECC_vli_isZero+0x22>
     9c6:	fc 01       	movw	r30, r24
     9c8:	61 50       	subi	r22, 0x01	; 1
     9ca:	46 2f       	mov	r20, r22
     9cc:	50 e0       	ldi	r21, 0x00	; 0
     9ce:	4f 5f       	subi	r20, 0xFF	; 255
     9d0:	5f 4f       	sbci	r21, 0xFF	; 255
     9d2:	48 0f       	add	r20, r24
     9d4:	59 1f       	adc	r21, r25
     9d6:	90 e0       	ldi	r25, 0x00	; 0
     9d8:	21 91       	ld	r18, Z+
     9da:	92 2b       	or	r25, r18
     9dc:	e4 17       	cp	r30, r20
     9de:	f5 07       	cpc	r31, r21
     9e0:	d9 f7       	brne	.-10     	; 0x9d8 <uECC_vli_isZero+0x16>
     9e2:	01 c0       	rjmp	.+2      	; 0x9e6 <uECC_vli_isZero+0x24>
     9e4:	90 e0       	ldi	r25, 0x00	; 0
     9e6:	81 e0       	ldi	r24, 0x01	; 1
     9e8:	91 11       	cpse	r25, r1
     9ea:	80 e0       	ldi	r24, 0x00	; 0
     9ec:	08 95       	ret

000009ee <uECC_vli_testBit>:
     9ee:	9b 01       	movw	r18, r22
     9f0:	35 95       	asr	r19
     9f2:	27 95       	ror	r18
     9f4:	35 95       	asr	r19
     9f6:	27 95       	ror	r18
     9f8:	35 95       	asr	r19
     9fa:	27 95       	ror	r18
     9fc:	82 0f       	add	r24, r18
     9fe:	93 1f       	adc	r25, r19
     a00:	67 70       	andi	r22, 0x07	; 7
     a02:	77 27       	eor	r23, r23
     a04:	21 e0       	ldi	r18, 0x01	; 1
     a06:	30 e0       	ldi	r19, 0x00	; 0
     a08:	02 c0       	rjmp	.+4      	; 0xa0e <uECC_vli_testBit+0x20>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	6a 95       	dec	r22
     a10:	e2 f7       	brpl	.-8      	; 0xa0a <uECC_vli_testBit+0x1c>
     a12:	fc 01       	movw	r30, r24
     a14:	80 81       	ld	r24, Z
     a16:	82 23       	and	r24, r18
     a18:	08 95       	ret

00000a1a <uECC_vli_numBits>:
     a1a:	9c 01       	movw	r18, r24
     a1c:	61 50       	subi	r22, 0x01	; 1
     a1e:	92 f0       	brmi	.+36     	; 0xa44 <uECC_vli_numBits+0x2a>
     a20:	fc 01       	movw	r30, r24
     a22:	e6 0f       	add	r30, r22
     a24:	f1 1d       	adc	r31, r1
     a26:	67 fd       	sbrc	r22, 7
     a28:	fa 95       	dec	r31
     a2a:	80 81       	ld	r24, Z
     a2c:	81 11       	cpse	r24, r1
     a2e:	0a c0       	rjmp	.+20     	; 0xa44 <uECC_vli_numBits+0x2a>
     a30:	61 50       	subi	r22, 0x01	; 1
     a32:	42 f0       	brmi	.+16     	; 0xa44 <uECC_vli_numBits+0x2a>
     a34:	f9 01       	movw	r30, r18
     a36:	e6 0f       	add	r30, r22
     a38:	f1 1d       	adc	r31, r1
     a3a:	67 fd       	sbrc	r22, 7
     a3c:	fa 95       	dec	r31
     a3e:	90 81       	ld	r25, Z
     a40:	99 23       	and	r25, r25
     a42:	b1 f3       	breq	.-20     	; 0xa30 <uECC_vli_numBits+0x16>
     a44:	6f 5f       	subi	r22, 0xFF	; 255
     a46:	e9 f0       	breq	.+58     	; 0xa82 <uECC_vli_numBits+0x68>
     a48:	26 0f       	add	r18, r22
     a4a:	31 1d       	adc	r19, r1
     a4c:	67 fd       	sbrc	r22, 7
     a4e:	3a 95       	dec	r19
     a50:	f9 01       	movw	r30, r18
     a52:	31 97       	sbiw	r30, 0x01	; 1
     a54:	80 81       	ld	r24, Z
     a56:	88 23       	and	r24, r24
     a58:	31 f0       	breq	.+12     	; 0xa66 <uECC_vli_numBits+0x4c>
     a5a:	20 e0       	ldi	r18, 0x00	; 0
     a5c:	86 95       	lsr	r24
     a5e:	2f 5f       	subi	r18, 0xFF	; 255
     a60:	81 11       	cpse	r24, r1
     a62:	fc cf       	rjmp	.-8      	; 0xa5c <uECC_vli_numBits+0x42>
     a64:	01 c0       	rjmp	.+2      	; 0xa68 <uECC_vli_numBits+0x4e>
     a66:	20 e0       	ldi	r18, 0x00	; 0
     a68:	86 2f       	mov	r24, r22
     a6a:	66 0f       	add	r22, r22
     a6c:	99 0b       	sbc	r25, r25
     a6e:	01 97       	sbiw	r24, 0x01	; 1
     a70:	88 0f       	add	r24, r24
     a72:	99 1f       	adc	r25, r25
     a74:	88 0f       	add	r24, r24
     a76:	99 1f       	adc	r25, r25
     a78:	88 0f       	add	r24, r24
     a7a:	99 1f       	adc	r25, r25
     a7c:	82 0f       	add	r24, r18
     a7e:	91 1d       	adc	r25, r1
     a80:	08 95       	ret
     a82:	80 e0       	ldi	r24, 0x00	; 0
     a84:	90 e0       	ldi	r25, 0x00	; 0
     a86:	08 95       	ret

00000a88 <uECC_vli_cmp_unsafe>:
     a88:	dc 01       	movw	r26, r24
     a8a:	41 50       	subi	r20, 0x01	; 1
     a8c:	2a f1       	brmi	.+74     	; 0xad8 <uECC_vli_cmp_unsafe+0x50>
     a8e:	84 2f       	mov	r24, r20
     a90:	04 2e       	mov	r0, r20
     a92:	00 0c       	add	r0, r0
     a94:	99 0b       	sbc	r25, r25
     a96:	fd 01       	movw	r30, r26
     a98:	e8 0f       	add	r30, r24
     a9a:	f9 1f       	adc	r31, r25
     a9c:	20 81       	ld	r18, Z
     a9e:	fb 01       	movw	r30, r22
     aa0:	e8 0f       	add	r30, r24
     aa2:	f9 1f       	adc	r31, r25
     aa4:	80 81       	ld	r24, Z
     aa6:	82 17       	cp	r24, r18
     aa8:	c8 f0       	brcs	.+50     	; 0xadc <uECC_vli_cmp_unsafe+0x54>
     aaa:	28 17       	cp	r18, r24
     aac:	88 f4       	brcc	.+34     	; 0xad0 <uECC_vli_cmp_unsafe+0x48>
     aae:	18 c0       	rjmp	.+48     	; 0xae0 <uECC_vli_cmp_unsafe+0x58>
     ab0:	24 2f       	mov	r18, r20
     ab2:	04 2e       	mov	r0, r20
     ab4:	00 0c       	add	r0, r0
     ab6:	33 0b       	sbc	r19, r19
     ab8:	fd 01       	movw	r30, r26
     aba:	e2 0f       	add	r30, r18
     abc:	f3 1f       	adc	r31, r19
     abe:	50 81       	ld	r21, Z
     ac0:	fb 01       	movw	r30, r22
     ac2:	e2 0f       	add	r30, r18
     ac4:	f3 1f       	adc	r31, r19
     ac6:	90 81       	ld	r25, Z
     ac8:	95 17       	cp	r25, r21
     aca:	60 f0       	brcs	.+24     	; 0xae4 <uECC_vli_cmp_unsafe+0x5c>
     acc:	59 17       	cp	r21, r25
     ace:	60 f0       	brcs	.+24     	; 0xae8 <uECC_vli_cmp_unsafe+0x60>
     ad0:	41 50       	subi	r20, 0x01	; 1
     ad2:	72 f7       	brpl	.-36     	; 0xab0 <uECC_vli_cmp_unsafe+0x28>
     ad4:	80 e0       	ldi	r24, 0x00	; 0
     ad6:	08 95       	ret
     ad8:	80 e0       	ldi	r24, 0x00	; 0
     ada:	08 95       	ret
     adc:	81 e0       	ldi	r24, 0x01	; 1
     ade:	08 95       	ret
     ae0:	8f ef       	ldi	r24, 0xFF	; 255
     ae2:	08 95       	ret
     ae4:	81 e0       	ldi	r24, 0x01	; 1
     ae6:	08 95       	ret
     ae8:	8f ef       	ldi	r24, 0xFF	; 255
     aea:	08 95       	ret

00000aec <uECC_vli_cmp>:
     aec:	0f 93       	push	r16
     aee:	1f 93       	push	r17
     af0:	cf 93       	push	r28
     af2:	df 93       	push	r29
     af4:	cd b7       	in	r28, 0x3d	; 61
     af6:	de b7       	in	r29, 0x3e	; 62
     af8:	a0 97       	sbiw	r28, 0x20	; 32
     afa:	0f b6       	in	r0, 0x3f	; 63
     afc:	f8 94       	cli
     afe:	de bf       	out	0x3e, r29	; 62
     b00:	0f be       	out	0x3f, r0	; 63
     b02:	cd bf       	out	0x3d, r28	; 61
     b04:	14 2f       	mov	r17, r20
     b06:	24 2f       	mov	r18, r20
     b08:	ab 01       	movw	r20, r22
     b0a:	bc 01       	movw	r22, r24
     b0c:	ce 01       	movw	r24, r28
     b0e:	01 96       	adiw	r24, 0x01	; 1
     b10:	4b de       	rcall	.-874    	; 0x7a8 <uECC_vli_sub>
     b12:	08 2f       	mov	r16, r24
     b14:	61 2f       	mov	r22, r17
     b16:	ce 01       	movw	r24, r28
     b18:	01 96       	adiw	r24, 0x01	; 1
     b1a:	53 df       	rcall	.-346    	; 0x9c2 <uECC_vli_isZero>
     b1c:	91 e0       	ldi	r25, 0x01	; 1
     b1e:	81 11       	cpse	r24, r1
     b20:	90 e0       	ldi	r25, 0x00	; 0
     b22:	81 e0       	ldi	r24, 0x01	; 1
     b24:	01 11       	cpse	r16, r1
     b26:	01 c0       	rjmp	.+2      	; 0xb2a <uECC_vli_cmp+0x3e>
     b28:	80 e0       	ldi	r24, 0x00	; 0
     b2a:	88 0f       	add	r24, r24
     b2c:	98 1b       	sub	r25, r24
     b2e:	89 2f       	mov	r24, r25
     b30:	a0 96       	adiw	r28, 0x20	; 32
     b32:	0f b6       	in	r0, 0x3f	; 63
     b34:	f8 94       	cli
     b36:	de bf       	out	0x3e, r29	; 62
     b38:	0f be       	out	0x3f, r0	; 63
     b3a:	cd bf       	out	0x3d, r28	; 61
     b3c:	df 91       	pop	r29
     b3e:	cf 91       	pop	r28
     b40:	1f 91       	pop	r17
     b42:	0f 91       	pop	r16
     b44:	08 95       	ret

00000b46 <uECC_vli_modAdd>:
     b46:	ef 92       	push	r14
     b48:	ff 92       	push	r15
     b4a:	0f 93       	push	r16
     b4c:	cf 93       	push	r28
     b4e:	df 93       	push	r29
     b50:	ec 01       	movw	r28, r24
     b52:	79 01       	movw	r14, r18
     b54:	20 2f       	mov	r18, r16
     b56:	57 dd       	rcall	.-1362   	; 0x606 <uECC_vli_add>
     b58:	81 11       	cpse	r24, r1
     b5a:	06 c0       	rjmp	.+12     	; 0xb68 <uECC_vli_modAdd+0x22>
     b5c:	40 2f       	mov	r20, r16
     b5e:	be 01       	movw	r22, r28
     b60:	c7 01       	movw	r24, r14
     b62:	92 df       	rcall	.-220    	; 0xa88 <uECC_vli_cmp_unsafe>
     b64:	81 30       	cpi	r24, 0x01	; 1
     b66:	29 f0       	breq	.+10     	; 0xb72 <uECC_vli_modAdd+0x2c>
     b68:	20 2f       	mov	r18, r16
     b6a:	a7 01       	movw	r20, r14
     b6c:	be 01       	movw	r22, r28
     b6e:	ce 01       	movw	r24, r28
     b70:	1b de       	rcall	.-970    	; 0x7a8 <uECC_vli_sub>
     b72:	df 91       	pop	r29
     b74:	cf 91       	pop	r28
     b76:	0f 91       	pop	r16
     b78:	ff 90       	pop	r15
     b7a:	ef 90       	pop	r14
     b7c:	08 95       	ret

00000b7e <uECC_vli_modSub>:
     b7e:	ef 92       	push	r14
     b80:	ff 92       	push	r15
     b82:	0f 93       	push	r16
     b84:	cf 93       	push	r28
     b86:	df 93       	push	r29
     b88:	ec 01       	movw	r28, r24
     b8a:	79 01       	movw	r14, r18
     b8c:	20 2f       	mov	r18, r16
     b8e:	0c de       	rcall	.-1000   	; 0x7a8 <uECC_vli_sub>
     b90:	88 23       	and	r24, r24
     b92:	29 f0       	breq	.+10     	; 0xb9e <uECC_vli_modSub+0x20>
     b94:	20 2f       	mov	r18, r16
     b96:	a7 01       	movw	r20, r14
     b98:	be 01       	movw	r22, r28
     b9a:	ce 01       	movw	r24, r28
     b9c:	34 dd       	rcall	.-1432   	; 0x606 <uECC_vli_add>
     b9e:	df 91       	pop	r29
     ba0:	cf 91       	pop	r28
     ba2:	0f 91       	pop	r16
     ba4:	ff 90       	pop	r15
     ba6:	ef 90       	pop	r14
     ba8:	08 95       	ret

00000baa <uECC_vli_modMult_fast>:
     baa:	ef 92       	push	r14
     bac:	ff 92       	push	r15
     bae:	0f 93       	push	r16
     bb0:	1f 93       	push	r17
     bb2:	cf 93       	push	r28
     bb4:	df 93       	push	r29
     bb6:	cd b7       	in	r28, 0x3d	; 61
     bb8:	de b7       	in	r29, 0x3e	; 62
     bba:	c0 54       	subi	r28, 0x40	; 64
     bbc:	d1 09       	sbc	r29, r1
     bbe:	0f b6       	in	r0, 0x3f	; 63
     bc0:	f8 94       	cli
     bc2:	de bf       	out	0x3e, r29	; 62
     bc4:	0f be       	out	0x3f, r0	; 63
     bc6:	cd bf       	out	0x3d, r28	; 61
     bc8:	7c 01       	movw	r14, r24
     bca:	89 01       	movw	r16, r18
     bcc:	f9 01       	movw	r30, r18
     bce:	20 81       	ld	r18, Z
     bd0:	ce 01       	movw	r24, r28
     bd2:	01 96       	adiw	r24, 0x01	; 1
     bd4:	ba de       	rcall	.-652    	; 0x94a <uECC_vli_mult>
     bd6:	f8 01       	movw	r30, r16
     bd8:	e6 55       	subi	r30, 0x56	; 86
     bda:	ff 4f       	sbci	r31, 0xFF	; 255
     bdc:	01 90       	ld	r0, Z+
     bde:	f0 81       	ld	r31, Z
     be0:	e0 2d       	mov	r30, r0
     be2:	be 01       	movw	r22, r28
     be4:	6f 5f       	subi	r22, 0xFF	; 255
     be6:	7f 4f       	sbci	r23, 0xFF	; 255
     be8:	c7 01       	movw	r24, r14
     bea:	09 95       	icall
     bec:	c0 5c       	subi	r28, 0xC0	; 192
     bee:	df 4f       	sbci	r29, 0xFF	; 255
     bf0:	0f b6       	in	r0, 0x3f	; 63
     bf2:	f8 94       	cli
     bf4:	de bf       	out	0x3e, r29	; 62
     bf6:	0f be       	out	0x3f, r0	; 63
     bf8:	cd bf       	out	0x3d, r28	; 61
     bfa:	df 91       	pop	r29
     bfc:	cf 91       	pop	r28
     bfe:	1f 91       	pop	r17
     c00:	0f 91       	pop	r16
     c02:	ff 90       	pop	r15
     c04:	ef 90       	pop	r14
     c06:	08 95       	ret

00000c08 <uECC_vli_modSquare_fast>:
     c08:	9a 01       	movw	r18, r20
     c0a:	ab 01       	movw	r20, r22
     c0c:	ce cf       	rjmp	.-100    	; 0xbaa <uECC_vli_modMult_fast>
     c0e:	08 95       	ret

00000c10 <vli_modInv_update>:
     c10:	0f 93       	push	r16
     c12:	1f 93       	push	r17
     c14:	cf 93       	push	r28
     c16:	df 93       	push	r29
     c18:	8c 01       	movw	r16, r24
     c1a:	c4 2f       	mov	r28, r20
     c1c:	fc 01       	movw	r30, r24
     c1e:	80 81       	ld	r24, Z
     c20:	80 ff       	sbrs	r24, 0
     c22:	15 c0       	rjmp	.+42     	; 0xc4e <vli_modInv_update+0x3e>
     c24:	24 2f       	mov	r18, r20
     c26:	ab 01       	movw	r20, r22
     c28:	b8 01       	movw	r22, r16
     c2a:	c8 01       	movw	r24, r16
     c2c:	ec dc       	rcall	.-1576   	; 0x606 <uECC_vli_add>
     c2e:	d8 2f       	mov	r29, r24
     c30:	6c 2f       	mov	r22, r28
     c32:	c8 01       	movw	r24, r16
     c34:	76 dc       	rcall	.-1812   	; 0x522 <uECC_vli_rshift1>
     c36:	dd 23       	and	r29, r29
     c38:	69 f0       	breq	.+26     	; 0xc54 <vli_modInv_update+0x44>
     c3a:	ec 2f       	mov	r30, r28
     c3c:	cc 0f       	add	r28, r28
     c3e:	ff 0b       	sbc	r31, r31
     c40:	31 97       	sbiw	r30, 0x01	; 1
     c42:	e0 0f       	add	r30, r16
     c44:	f1 1f       	adc	r31, r17
     c46:	80 81       	ld	r24, Z
     c48:	80 68       	ori	r24, 0x80	; 128
     c4a:	80 83       	st	Z, r24
     c4c:	03 c0       	rjmp	.+6      	; 0xc54 <vli_modInv_update+0x44>
     c4e:	64 2f       	mov	r22, r20
     c50:	c8 01       	movw	r24, r16
     c52:	67 dc       	rcall	.-1842   	; 0x522 <uECC_vli_rshift1>
     c54:	df 91       	pop	r29
     c56:	cf 91       	pop	r28
     c58:	1f 91       	pop	r17
     c5a:	0f 91       	pop	r16
     c5c:	08 95       	ret

00000c5e <uECC_vli_modInv>:
     c5e:	af 92       	push	r10
     c60:	bf 92       	push	r11
     c62:	cf 92       	push	r12
     c64:	df 92       	push	r13
     c66:	ef 92       	push	r14
     c68:	ff 92       	push	r15
     c6a:	1f 93       	push	r17
     c6c:	cf 93       	push	r28
     c6e:	df 93       	push	r29
     c70:	cd b7       	in	r28, 0x3d	; 61
     c72:	de b7       	in	r29, 0x3e	; 62
     c74:	c0 58       	subi	r28, 0x80	; 128
     c76:	d1 09       	sbc	r29, r1
     c78:	0f b6       	in	r0, 0x3f	; 63
     c7a:	f8 94       	cli
     c7c:	de bf       	out	0x3e, r29	; 62
     c7e:	0f be       	out	0x3f, r0	; 63
     c80:	cd bf       	out	0x3d, r28	; 61
     c82:	5c 01       	movw	r10, r24
     c84:	6b 01       	movw	r12, r22
     c86:	7a 01       	movw	r14, r20
     c88:	12 2f       	mov	r17, r18
     c8a:	62 2f       	mov	r22, r18
     c8c:	c6 01       	movw	r24, r12
     c8e:	99 de       	rcall	.-718    	; 0x9c2 <uECC_vli_isZero>
     c90:	88 23       	and	r24, r24
     c92:	21 f0       	breq	.+8      	; 0xc9c <uECC_vli_modInv+0x3e>
     c94:	61 2f       	mov	r22, r17
     c96:	c5 01       	movw	r24, r10
     c98:	d0 db       	rcall	.-2144   	; 0x43a <uECC_vli_clear>
     c9a:	a1 c0       	rjmp	.+322    	; 0xdde <uECC_vli_modInv+0x180>
     c9c:	41 2f       	mov	r20, r17
     c9e:	b6 01       	movw	r22, r12
     ca0:	ce 01       	movw	r24, r28
     ca2:	01 96       	adiw	r24, 0x01	; 1
     ca4:	f1 db       	rcall	.-2078   	; 0x488 <uECC_vli_set>
     ca6:	41 2f       	mov	r20, r17
     ca8:	b7 01       	movw	r22, r14
     caa:	ce 01       	movw	r24, r28
     cac:	81 96       	adiw	r24, 0x21	; 33
     cae:	ec db       	rcall	.-2088   	; 0x488 <uECC_vli_set>
     cb0:	61 2f       	mov	r22, r17
     cb2:	ce 01       	movw	r24, r28
     cb4:	8f 5b       	subi	r24, 0xBF	; 191
     cb6:	9f 4f       	sbci	r25, 0xFF	; 255
     cb8:	c0 db       	rcall	.-2176   	; 0x43a <uECC_vli_clear>
     cba:	81 e0       	ldi	r24, 0x01	; 1
     cbc:	22 96       	adiw	r28, 0x02	; 2
     cbe:	8f af       	std	Y+63, r24	; 0x3f
     cc0:	22 97       	sbiw	r28, 0x02	; 2
     cc2:	61 2f       	mov	r22, r17
     cc4:	ce 01       	movw	r24, r28
     cc6:	8f 59       	subi	r24, 0x9F	; 159
     cc8:	9f 4f       	sbci	r25, 0xFF	; 255
     cca:	b7 db       	rcall	.-2194   	; 0x43a <uECC_vli_clear>
     ccc:	79 c0       	rjmp	.+242    	; 0xdc0 <uECC_vli_modInv+0x162>
     cce:	99 81       	ldd	r25, Y+1	; 0x01
     cd0:	90 fd       	sbrc	r25, 0
     cd2:	0b c0       	rjmp	.+22     	; 0xcea <uECC_vli_modInv+0x8c>
     cd4:	61 2f       	mov	r22, r17
     cd6:	ce 01       	movw	r24, r28
     cd8:	01 96       	adiw	r24, 0x01	; 1
     cda:	23 dc       	rcall	.-1978   	; 0x522 <uECC_vli_rshift1>
     cdc:	41 2f       	mov	r20, r17
     cde:	b7 01       	movw	r22, r14
     ce0:	ce 01       	movw	r24, r28
     ce2:	8f 5b       	subi	r24, 0xBF	; 191
     ce4:	9f 4f       	sbci	r25, 0xFF	; 255
     ce6:	94 df       	rcall	.-216    	; 0xc10 <vli_modInv_update>
     ce8:	6b c0       	rjmp	.+214    	; 0xdc0 <uECC_vli_modInv+0x162>
     cea:	99 a1       	ldd	r25, Y+33	; 0x21
     cec:	90 fd       	sbrc	r25, 0
     cee:	0b c0       	rjmp	.+22     	; 0xd06 <uECC_vli_modInv+0xa8>
     cf0:	61 2f       	mov	r22, r17
     cf2:	ce 01       	movw	r24, r28
     cf4:	81 96       	adiw	r24, 0x21	; 33
     cf6:	15 dc       	rcall	.-2006   	; 0x522 <uECC_vli_rshift1>
     cf8:	41 2f       	mov	r20, r17
     cfa:	b7 01       	movw	r22, r14
     cfc:	ce 01       	movw	r24, r28
     cfe:	8f 59       	subi	r24, 0x9F	; 159
     d00:	9f 4f       	sbci	r25, 0xFF	; 255
     d02:	86 df       	rcall	.-244    	; 0xc10 <vli_modInv_update>
     d04:	5d c0       	rjmp	.+186    	; 0xdc0 <uECC_vli_modInv+0x162>
     d06:	18 16       	cp	r1, r24
     d08:	74 f5       	brge	.+92     	; 0xd66 <uECC_vli_modInv+0x108>
     d0a:	21 2f       	mov	r18, r17
     d0c:	ae 01       	movw	r20, r28
     d0e:	4f 5d       	subi	r20, 0xDF	; 223
     d10:	5f 4f       	sbci	r21, 0xFF	; 255
     d12:	be 01       	movw	r22, r28
     d14:	6f 5f       	subi	r22, 0xFF	; 255
     d16:	7f 4f       	sbci	r23, 0xFF	; 255
     d18:	cb 01       	movw	r24, r22
     d1a:	46 dd       	rcall	.-1396   	; 0x7a8 <uECC_vli_sub>
     d1c:	61 2f       	mov	r22, r17
     d1e:	ce 01       	movw	r24, r28
     d20:	01 96       	adiw	r24, 0x01	; 1
     d22:	ff db       	rcall	.-2050   	; 0x522 <uECC_vli_rshift1>
     d24:	41 2f       	mov	r20, r17
     d26:	be 01       	movw	r22, r28
     d28:	6f 59       	subi	r22, 0x9F	; 159
     d2a:	7f 4f       	sbci	r23, 0xFF	; 255
     d2c:	ce 01       	movw	r24, r28
     d2e:	8f 5b       	subi	r24, 0xBF	; 191
     d30:	9f 4f       	sbci	r25, 0xFF	; 255
     d32:	aa de       	rcall	.-684    	; 0xa88 <uECC_vli_cmp_unsafe>
     d34:	88 23       	and	r24, r24
     d36:	3c f4       	brge	.+14     	; 0xd46 <uECC_vli_modInv+0xe8>
     d38:	21 2f       	mov	r18, r17
     d3a:	a7 01       	movw	r20, r14
     d3c:	be 01       	movw	r22, r28
     d3e:	6f 5b       	subi	r22, 0xBF	; 191
     d40:	7f 4f       	sbci	r23, 0xFF	; 255
     d42:	cb 01       	movw	r24, r22
     d44:	60 dc       	rcall	.-1856   	; 0x606 <uECC_vli_add>
     d46:	21 2f       	mov	r18, r17
     d48:	ae 01       	movw	r20, r28
     d4a:	4f 59       	subi	r20, 0x9F	; 159
     d4c:	5f 4f       	sbci	r21, 0xFF	; 255
     d4e:	be 01       	movw	r22, r28
     d50:	6f 5b       	subi	r22, 0xBF	; 191
     d52:	7f 4f       	sbci	r23, 0xFF	; 255
     d54:	cb 01       	movw	r24, r22
     d56:	28 dd       	rcall	.-1456   	; 0x7a8 <uECC_vli_sub>
     d58:	41 2f       	mov	r20, r17
     d5a:	b7 01       	movw	r22, r14
     d5c:	ce 01       	movw	r24, r28
     d5e:	8f 5b       	subi	r24, 0xBF	; 191
     d60:	9f 4f       	sbci	r25, 0xFF	; 255
     d62:	56 df       	rcall	.-340    	; 0xc10 <vli_modInv_update>
     d64:	2d c0       	rjmp	.+90     	; 0xdc0 <uECC_vli_modInv+0x162>
     d66:	21 2f       	mov	r18, r17
     d68:	ae 01       	movw	r20, r28
     d6a:	4f 5f       	subi	r20, 0xFF	; 255
     d6c:	5f 4f       	sbci	r21, 0xFF	; 255
     d6e:	be 01       	movw	r22, r28
     d70:	6f 5d       	subi	r22, 0xDF	; 223
     d72:	7f 4f       	sbci	r23, 0xFF	; 255
     d74:	cb 01       	movw	r24, r22
     d76:	18 dd       	rcall	.-1488   	; 0x7a8 <uECC_vli_sub>
     d78:	61 2f       	mov	r22, r17
     d7a:	ce 01       	movw	r24, r28
     d7c:	81 96       	adiw	r24, 0x21	; 33
     d7e:	d1 db       	rcall	.-2142   	; 0x522 <uECC_vli_rshift1>
     d80:	41 2f       	mov	r20, r17
     d82:	be 01       	movw	r22, r28
     d84:	6f 5b       	subi	r22, 0xBF	; 191
     d86:	7f 4f       	sbci	r23, 0xFF	; 255
     d88:	ce 01       	movw	r24, r28
     d8a:	8f 59       	subi	r24, 0x9F	; 159
     d8c:	9f 4f       	sbci	r25, 0xFF	; 255
     d8e:	7c de       	rcall	.-776    	; 0xa88 <uECC_vli_cmp_unsafe>
     d90:	88 23       	and	r24, r24
     d92:	3c f4       	brge	.+14     	; 0xda2 <uECC_vli_modInv+0x144>
     d94:	21 2f       	mov	r18, r17
     d96:	a7 01       	movw	r20, r14
     d98:	be 01       	movw	r22, r28
     d9a:	6f 59       	subi	r22, 0x9F	; 159
     d9c:	7f 4f       	sbci	r23, 0xFF	; 255
     d9e:	cb 01       	movw	r24, r22
     da0:	32 dc       	rcall	.-1948   	; 0x606 <uECC_vli_add>
     da2:	21 2f       	mov	r18, r17
     da4:	ae 01       	movw	r20, r28
     da6:	4f 5b       	subi	r20, 0xBF	; 191
     da8:	5f 4f       	sbci	r21, 0xFF	; 255
     daa:	be 01       	movw	r22, r28
     dac:	6f 59       	subi	r22, 0x9F	; 159
     dae:	7f 4f       	sbci	r23, 0xFF	; 255
     db0:	cb 01       	movw	r24, r22
     db2:	fa dc       	rcall	.-1548   	; 0x7a8 <uECC_vli_sub>
     db4:	41 2f       	mov	r20, r17
     db6:	b7 01       	movw	r22, r14
     db8:	ce 01       	movw	r24, r28
     dba:	8f 59       	subi	r24, 0x9F	; 159
     dbc:	9f 4f       	sbci	r25, 0xFF	; 255
     dbe:	28 df       	rcall	.-432    	; 0xc10 <vli_modInv_update>
     dc0:	41 2f       	mov	r20, r17
     dc2:	be 01       	movw	r22, r28
     dc4:	6f 5d       	subi	r22, 0xDF	; 223
     dc6:	7f 4f       	sbci	r23, 0xFF	; 255
     dc8:	ce 01       	movw	r24, r28
     dca:	01 96       	adiw	r24, 0x01	; 1
     dcc:	5d de       	rcall	.-838    	; 0xa88 <uECC_vli_cmp_unsafe>
     dce:	81 11       	cpse	r24, r1
     dd0:	7e cf       	rjmp	.-260    	; 0xcce <uECC_vli_modInv+0x70>
     dd2:	41 2f       	mov	r20, r17
     dd4:	be 01       	movw	r22, r28
     dd6:	6f 5b       	subi	r22, 0xBF	; 191
     dd8:	7f 4f       	sbci	r23, 0xFF	; 255
     dda:	c5 01       	movw	r24, r10
     ddc:	55 db       	rcall	.-2390   	; 0x488 <uECC_vli_set>
     dde:	c0 58       	subi	r28, 0x80	; 128
     de0:	df 4f       	sbci	r29, 0xFF	; 255
     de2:	0f b6       	in	r0, 0x3f	; 63
     de4:	f8 94       	cli
     de6:	de bf       	out	0x3e, r29	; 62
     de8:	0f be       	out	0x3f, r0	; 63
     dea:	cd bf       	out	0x3d, r28	; 61
     dec:	df 91       	pop	r29
     dee:	cf 91       	pop	r28
     df0:	1f 91       	pop	r17
     df2:	ff 90       	pop	r15
     df4:	ef 90       	pop	r14
     df6:	df 90       	pop	r13
     df8:	cf 90       	pop	r12
     dfa:	bf 90       	pop	r11
     dfc:	af 90       	pop	r10
     dfe:	08 95       	ret

00000e00 <double_jacobian_default>:
     e00:	6f 92       	push	r6
     e02:	7f 92       	push	r7
     e04:	8f 92       	push	r8
     e06:	9f 92       	push	r9
     e08:	af 92       	push	r10
     e0a:	bf 92       	push	r11
     e0c:	cf 92       	push	r12
     e0e:	df 92       	push	r13
     e10:	ef 92       	push	r14
     e12:	ff 92       	push	r15
     e14:	0f 93       	push	r16
     e16:	1f 93       	push	r17
     e18:	cf 93       	push	r28
     e1a:	df 93       	push	r29
     e1c:	cd b7       	in	r28, 0x3d	; 61
     e1e:	de b7       	in	r29, 0x3e	; 62
     e20:	c0 54       	subi	r28, 0x40	; 64
     e22:	d1 09       	sbc	r29, r1
     e24:	0f b6       	in	r0, 0x3f	; 63
     e26:	f8 94       	cli
     e28:	de bf       	out	0x3e, r29	; 62
     e2a:	0f be       	out	0x3f, r0	; 63
     e2c:	cd bf       	out	0x3d, r28	; 61
     e2e:	6c 01       	movw	r12, r24
     e30:	3b 01       	movw	r6, r22
     e32:	7a 01       	movw	r14, r20
     e34:	59 01       	movw	r10, r18
     e36:	f9 01       	movw	r30, r18
     e38:	10 81       	ld	r17, Z
     e3a:	61 2f       	mov	r22, r17
     e3c:	ca 01       	movw	r24, r20
     e3e:	c1 dd       	rcall	.-1150   	; 0x9c2 <uECC_vli_isZero>
     e40:	81 11       	cpse	r24, r1
     e42:	96 c0       	rjmp	.+300    	; 0xf70 <double_jacobian_default+0x170>
     e44:	a5 01       	movw	r20, r10
     e46:	b3 01       	movw	r22, r6
     e48:	ce 01       	movw	r24, r28
     e4a:	01 96       	adiw	r24, 0x01	; 1
     e4c:	dd de       	rcall	.-582    	; 0xc08 <uECC_vli_modSquare_fast>
     e4e:	95 01       	movw	r18, r10
     e50:	ae 01       	movw	r20, r28
     e52:	4f 5f       	subi	r20, 0xFF	; 255
     e54:	5f 4f       	sbci	r21, 0xFF	; 255
     e56:	b6 01       	movw	r22, r12
     e58:	ce 01       	movw	r24, r28
     e5a:	81 96       	adiw	r24, 0x21	; 33
     e5c:	a6 de       	rcall	.-692    	; 0xbaa <uECC_vli_modMult_fast>
     e5e:	a5 01       	movw	r20, r10
     e60:	be 01       	movw	r22, r28
     e62:	6f 5f       	subi	r22, 0xFF	; 255
     e64:	7f 4f       	sbci	r23, 0xFF	; 255
     e66:	cb 01       	movw	r24, r22
     e68:	cf de       	rcall	.-610    	; 0xc08 <uECC_vli_modSquare_fast>
     e6a:	95 01       	movw	r18, r10
     e6c:	a7 01       	movw	r20, r14
     e6e:	b3 01       	movw	r22, r6
     e70:	c3 01       	movw	r24, r6
     e72:	9b de       	rcall	.-714    	; 0xbaa <uECC_vli_modMult_fast>
     e74:	a5 01       	movw	r20, r10
     e76:	b7 01       	movw	r22, r14
     e78:	c7 01       	movw	r24, r14
     e7a:	c6 de       	rcall	.-628    	; 0xc08 <uECC_vli_modSquare_fast>
     e7c:	45 01       	movw	r8, r10
     e7e:	f4 e0       	ldi	r31, 0x04	; 4
     e80:	8f 0e       	add	r8, r31
     e82:	91 1c       	adc	r9, r1
     e84:	01 2f       	mov	r16, r17
     e86:	94 01       	movw	r18, r8
     e88:	a7 01       	movw	r20, r14
     e8a:	b6 01       	movw	r22, r12
     e8c:	c6 01       	movw	r24, r12
     e8e:	5b de       	rcall	.-842    	; 0xb46 <uECC_vli_modAdd>
     e90:	94 01       	movw	r18, r8
     e92:	a7 01       	movw	r20, r14
     e94:	b7 01       	movw	r22, r14
     e96:	c7 01       	movw	r24, r14
     e98:	56 de       	rcall	.-852    	; 0xb46 <uECC_vli_modAdd>
     e9a:	94 01       	movw	r18, r8
     e9c:	a7 01       	movw	r20, r14
     e9e:	b6 01       	movw	r22, r12
     ea0:	c7 01       	movw	r24, r14
     ea2:	6d de       	rcall	.-806    	; 0xb7e <uECC_vli_modSub>
     ea4:	95 01       	movw	r18, r10
     ea6:	a7 01       	movw	r20, r14
     ea8:	b6 01       	movw	r22, r12
     eaa:	c6 01       	movw	r24, r12
     eac:	7e de       	rcall	.-772    	; 0xbaa <uECC_vli_modMult_fast>
     eae:	94 01       	movw	r18, r8
     eb0:	a6 01       	movw	r20, r12
     eb2:	b6 01       	movw	r22, r12
     eb4:	c7 01       	movw	r24, r14
     eb6:	47 de       	rcall	.-882    	; 0xb46 <uECC_vli_modAdd>
     eb8:	94 01       	movw	r18, r8
     eba:	a7 01       	movw	r20, r14
     ebc:	b6 01       	movw	r22, r12
     ebe:	c6 01       	movw	r24, r12
     ec0:	42 de       	rcall	.-892    	; 0xb46 <uECC_vli_modAdd>
     ec2:	60 e0       	ldi	r22, 0x00	; 0
     ec4:	70 e0       	ldi	r23, 0x00	; 0
     ec6:	c6 01       	movw	r24, r12
     ec8:	92 dd       	rcall	.-1244   	; 0x9ee <uECC_vli_testBit>
     eca:	88 23       	and	r24, r24
     ecc:	c1 f0       	breq	.+48     	; 0xefe <double_jacobian_default+0xfe>
     ece:	21 2f       	mov	r18, r17
     ed0:	a4 01       	movw	r20, r8
     ed2:	b6 01       	movw	r22, r12
     ed4:	c6 01       	movw	r24, r12
     ed6:	97 db       	rcall	.-2258   	; 0x606 <uECC_vli_add>
     ed8:	08 2f       	mov	r16, r24
     eda:	61 2f       	mov	r22, r17
     edc:	c6 01       	movw	r24, r12
     ede:	21 db       	rcall	.-2494   	; 0x522 <uECC_vli_rshift1>
     ee0:	e1 2f       	mov	r30, r17
     ee2:	01 2e       	mov	r0, r17
     ee4:	00 0c       	add	r0, r0
     ee6:	ff 0b       	sbc	r31, r31
     ee8:	31 97       	sbiw	r30, 0x01	; 1
     eea:	ec 0d       	add	r30, r12
     eec:	fd 1d       	adc	r31, r13
     eee:	20 e8       	ldi	r18, 0x80	; 128
     ef0:	02 9f       	mul	r16, r18
     ef2:	c0 01       	movw	r24, r0
     ef4:	11 24       	eor	r1, r1
     ef6:	00 81       	ld	r16, Z
     ef8:	08 2b       	or	r16, r24
     efa:	00 83       	st	Z, r16
     efc:	03 c0       	rjmp	.+6      	; 0xf04 <double_jacobian_default+0x104>
     efe:	61 2f       	mov	r22, r17
     f00:	c6 01       	movw	r24, r12
     f02:	0f db       	rcall	.-2530   	; 0x522 <uECC_vli_rshift1>
     f04:	a5 01       	movw	r20, r10
     f06:	b6 01       	movw	r22, r12
     f08:	c7 01       	movw	r24, r14
     f0a:	7e de       	rcall	.-772    	; 0xc08 <uECC_vli_modSquare_fast>
     f0c:	01 2f       	mov	r16, r17
     f0e:	94 01       	movw	r18, r8
     f10:	ae 01       	movw	r20, r28
     f12:	4f 5d       	subi	r20, 0xDF	; 223
     f14:	5f 4f       	sbci	r21, 0xFF	; 255
     f16:	b7 01       	movw	r22, r14
     f18:	c7 01       	movw	r24, r14
     f1a:	31 de       	rcall	.-926    	; 0xb7e <uECC_vli_modSub>
     f1c:	94 01       	movw	r18, r8
     f1e:	ae 01       	movw	r20, r28
     f20:	4f 5d       	subi	r20, 0xDF	; 223
     f22:	5f 4f       	sbci	r21, 0xFF	; 255
     f24:	b7 01       	movw	r22, r14
     f26:	c7 01       	movw	r24, r14
     f28:	2a de       	rcall	.-940    	; 0xb7e <uECC_vli_modSub>
     f2a:	94 01       	movw	r18, r8
     f2c:	a7 01       	movw	r20, r14
     f2e:	be 01       	movw	r22, r28
     f30:	6f 5d       	subi	r22, 0xDF	; 223
     f32:	7f 4f       	sbci	r23, 0xFF	; 255
     f34:	cb 01       	movw	r24, r22
     f36:	23 de       	rcall	.-954    	; 0xb7e <uECC_vli_modSub>
     f38:	95 01       	movw	r18, r10
     f3a:	ae 01       	movw	r20, r28
     f3c:	4f 5d       	subi	r20, 0xDF	; 223
     f3e:	5f 4f       	sbci	r21, 0xFF	; 255
     f40:	b6 01       	movw	r22, r12
     f42:	c6 01       	movw	r24, r12
     f44:	32 de       	rcall	.-924    	; 0xbaa <uECC_vli_modMult_fast>
     f46:	94 01       	movw	r18, r8
     f48:	ae 01       	movw	r20, r28
     f4a:	4f 5f       	subi	r20, 0xFF	; 255
     f4c:	5f 4f       	sbci	r21, 0xFF	; 255
     f4e:	b6 01       	movw	r22, r12
     f50:	ca 01       	movw	r24, r20
     f52:	15 de       	rcall	.-982    	; 0xb7e <uECC_vli_modSub>
     f54:	41 2f       	mov	r20, r17
     f56:	b7 01       	movw	r22, r14
     f58:	c6 01       	movw	r24, r12
     f5a:	96 da       	rcall	.-2772   	; 0x488 <uECC_vli_set>
     f5c:	41 2f       	mov	r20, r17
     f5e:	b3 01       	movw	r22, r6
     f60:	c7 01       	movw	r24, r14
     f62:	92 da       	rcall	.-2780   	; 0x488 <uECC_vli_set>
     f64:	41 2f       	mov	r20, r17
     f66:	be 01       	movw	r22, r28
     f68:	6f 5f       	subi	r22, 0xFF	; 255
     f6a:	7f 4f       	sbci	r23, 0xFF	; 255
     f6c:	c3 01       	movw	r24, r6
     f6e:	8c da       	rcall	.-2792   	; 0x488 <uECC_vli_set>
     f70:	c0 5c       	subi	r28, 0xC0	; 192
     f72:	df 4f       	sbci	r29, 0xFF	; 255
     f74:	0f b6       	in	r0, 0x3f	; 63
     f76:	f8 94       	cli
     f78:	de bf       	out	0x3e, r29	; 62
     f7a:	0f be       	out	0x3f, r0	; 63
     f7c:	cd bf       	out	0x3d, r28	; 61
     f7e:	df 91       	pop	r29
     f80:	cf 91       	pop	r28
     f82:	1f 91       	pop	r17
     f84:	0f 91       	pop	r16
     f86:	ff 90       	pop	r15
     f88:	ef 90       	pop	r14
     f8a:	df 90       	pop	r13
     f8c:	cf 90       	pop	r12
     f8e:	bf 90       	pop	r11
     f90:	af 90       	pop	r10
     f92:	9f 90       	pop	r9
     f94:	8f 90       	pop	r8
     f96:	7f 90       	pop	r7
     f98:	6f 90       	pop	r6
     f9a:	08 95       	ret

00000f9c <x_side_default>:
     f9c:	6f 92       	push	r6
     f9e:	7f 92       	push	r7
     fa0:	8f 92       	push	r8
     fa2:	9f 92       	push	r9
     fa4:	af 92       	push	r10
     fa6:	bf 92       	push	r11
     fa8:	cf 92       	push	r12
     faa:	df 92       	push	r13
     fac:	ef 92       	push	r14
     fae:	ff 92       	push	r15
     fb0:	0f 93       	push	r16
     fb2:	1f 93       	push	r17
     fb4:	cf 93       	push	r28
     fb6:	df 93       	push	r29
     fb8:	cd b7       	in	r28, 0x3d	; 61
     fba:	de b7       	in	r29, 0x3e	; 62
     fbc:	a0 97       	sbiw	r28, 0x20	; 32
     fbe:	0f b6       	in	r0, 0x3f	; 63
     fc0:	f8 94       	cli
     fc2:	de bf       	out	0x3e, r29	; 62
     fc4:	0f be       	out	0x3f, r0	; 63
     fc6:	cd bf       	out	0x3d, r28	; 61
     fc8:	7c 01       	movw	r14, r24
     fca:	4b 01       	movw	r8, r22
     fcc:	6a 01       	movw	r12, r20
     fce:	ce 01       	movw	r24, r28
     fd0:	01 96       	adiw	r24, 0x01	; 1
     fd2:	3c 01       	movw	r6, r24
     fd4:	80 e2       	ldi	r24, 0x20	; 32
     fd6:	f3 01       	movw	r30, r6
     fd8:	11 92       	st	Z+, r1
     fda:	8a 95       	dec	r24
     fdc:	e9 f7       	brne	.-6      	; 0xfd8 <x_side_default+0x3c>
     fde:	83 e0       	ldi	r24, 0x03	; 3
     fe0:	89 83       	std	Y+1, r24	; 0x01
     fe2:	fa 01       	movw	r30, r20
     fe4:	10 81       	ld	r17, Z
     fe6:	c7 01       	movw	r24, r14
     fe8:	0f de       	rcall	.-994    	; 0xc08 <uECC_vli_modSquare_fast>
     fea:	56 01       	movw	r10, r12
     fec:	f4 e0       	ldi	r31, 0x04	; 4
     fee:	af 0e       	add	r10, r31
     ff0:	b1 1c       	adc	r11, r1
     ff2:	01 2f       	mov	r16, r17
     ff4:	95 01       	movw	r18, r10
     ff6:	a3 01       	movw	r20, r6
     ff8:	b7 01       	movw	r22, r14
     ffa:	c7 01       	movw	r24, r14
     ffc:	c0 dd       	rcall	.-1152   	; 0xb7e <uECC_vli_modSub>
     ffe:	96 01       	movw	r18, r12
    1000:	a4 01       	movw	r20, r8
    1002:	b7 01       	movw	r22, r14
    1004:	c7 01       	movw	r24, r14
    1006:	d1 dd       	rcall	.-1118   	; 0xbaa <uECC_vli_modMult_fast>
    1008:	a6 01       	movw	r20, r12
    100a:	4c 57       	subi	r20, 0x7C	; 124
    100c:	5f 4f       	sbci	r21, 0xFF	; 255
    100e:	95 01       	movw	r18, r10
    1010:	b7 01       	movw	r22, r14
    1012:	c7 01       	movw	r24, r14
    1014:	98 dd       	rcall	.-1232   	; 0xb46 <uECC_vli_modAdd>
    1016:	a0 96       	adiw	r28, 0x20	; 32
    1018:	0f b6       	in	r0, 0x3f	; 63
    101a:	f8 94       	cli
    101c:	de bf       	out	0x3e, r29	; 62
    101e:	0f be       	out	0x3f, r0	; 63
    1020:	cd bf       	out	0x3d, r28	; 61
    1022:	df 91       	pop	r29
    1024:	cf 91       	pop	r28
    1026:	1f 91       	pop	r17
    1028:	0f 91       	pop	r16
    102a:	ff 90       	pop	r15
    102c:	ef 90       	pop	r14
    102e:	df 90       	pop	r13
    1030:	cf 90       	pop	r12
    1032:	bf 90       	pop	r11
    1034:	af 90       	pop	r10
    1036:	9f 90       	pop	r9
    1038:	8f 90       	pop	r8
    103a:	7f 90       	pop	r7
    103c:	6f 90       	pop	r6
    103e:	08 95       	ret

00001040 <mod_sqrt_default>:
    1040:	bf 92       	push	r11
    1042:	cf 92       	push	r12
    1044:	df 92       	push	r13
    1046:	ef 92       	push	r14
    1048:	ff 92       	push	r15
    104a:	0f 93       	push	r16
    104c:	1f 93       	push	r17
    104e:	cf 93       	push	r28
    1050:	df 93       	push	r29
    1052:	cd b7       	in	r28, 0x3d	; 61
    1054:	de b7       	in	r29, 0x3e	; 62
    1056:	c0 54       	subi	r28, 0x40	; 64
    1058:	d1 09       	sbc	r29, r1
    105a:	0f b6       	in	r0, 0x3f	; 63
    105c:	f8 94       	cli
    105e:	de bf       	out	0x3e, r29	; 62
    1060:	0f be       	out	0x3f, r0	; 63
    1062:	cd bf       	out	0x3d, r28	; 61
    1064:	6c 01       	movw	r12, r24
    1066:	7b 01       	movw	r14, r22
    1068:	90 e2       	ldi	r25, 0x20	; 32
    106a:	8e 01       	movw	r16, r28
    106c:	0f 5f       	subi	r16, 0xFF	; 255
    106e:	1f 4f       	sbci	r17, 0xFF	; 255
    1070:	d8 01       	movw	r26, r16
    1072:	e9 2f       	mov	r30, r25
    1074:	1d 92       	st	X+, r1
    1076:	ea 95       	dec	r30
    1078:	e9 f7       	brne	.-6      	; 0x1074 <mod_sqrt_default+0x34>
    107a:	81 e0       	ldi	r24, 0x01	; 1
    107c:	89 83       	std	Y+1, r24	; 0x01
    107e:	fe 01       	movw	r30, r28
    1080:	b1 96       	adiw	r30, 0x21	; 33
    1082:	df 01       	movw	r26, r30
    1084:	1d 92       	st	X+, r1
    1086:	9a 95       	dec	r25
    1088:	e9 f7       	brne	.-6      	; 0x1084 <mod_sqrt_default+0x44>
    108a:	89 a3       	std	Y+33, r24	; 0x21
    108c:	fb 01       	movw	r30, r22
    108e:	b0 80       	ld	r11, Z
    1090:	6c 5f       	subi	r22, 0xFC	; 252
    1092:	7f 4f       	sbci	r23, 0xFF	; 255
    1094:	2b 2d       	mov	r18, r11
    1096:	a8 01       	movw	r20, r16
    1098:	c8 01       	movw	r24, r16
    109a:	b5 da       	rcall	.-2710   	; 0x606 <uECC_vli_add>
    109c:	6b 2d       	mov	r22, r11
    109e:	c8 01       	movw	r24, r16
    10a0:	bc dc       	rcall	.-1672   	; 0xa1a <uECC_vli_numBits>
    10a2:	8c 01       	movw	r16, r24
    10a4:	01 50       	subi	r16, 0x01	; 1
    10a6:	11 09       	sbc	r17, r1
    10a8:	02 30       	cpi	r16, 0x02	; 2
    10aa:	11 05       	cpc	r17, r1
    10ac:	c4 f0       	brlt	.+48     	; 0x10de <mod_sqrt_default+0x9e>
    10ae:	a7 01       	movw	r20, r14
    10b0:	be 01       	movw	r22, r28
    10b2:	6f 5d       	subi	r22, 0xDF	; 223
    10b4:	7f 4f       	sbci	r23, 0xFF	; 255
    10b6:	cb 01       	movw	r24, r22
    10b8:	a7 dd       	rcall	.-1202   	; 0xc08 <uECC_vli_modSquare_fast>
    10ba:	b8 01       	movw	r22, r16
    10bc:	ce 01       	movw	r24, r28
    10be:	01 96       	adiw	r24, 0x01	; 1
    10c0:	96 dc       	rcall	.-1748   	; 0x9ee <uECC_vli_testBit>
    10c2:	88 23       	and	r24, r24
    10c4:	39 f0       	breq	.+14     	; 0x10d4 <mod_sqrt_default+0x94>
    10c6:	97 01       	movw	r18, r14
    10c8:	a6 01       	movw	r20, r12
    10ca:	be 01       	movw	r22, r28
    10cc:	6f 5d       	subi	r22, 0xDF	; 223
    10ce:	7f 4f       	sbci	r23, 0xFF	; 255
    10d0:	cb 01       	movw	r24, r22
    10d2:	6b dd       	rcall	.-1322   	; 0xbaa <uECC_vli_modMult_fast>
    10d4:	01 50       	subi	r16, 0x01	; 1
    10d6:	11 09       	sbc	r17, r1
    10d8:	01 30       	cpi	r16, 0x01	; 1
    10da:	11 05       	cpc	r17, r1
    10dc:	41 f7       	brne	.-48     	; 0x10ae <mod_sqrt_default+0x6e>
    10de:	4b 2d       	mov	r20, r11
    10e0:	be 01       	movw	r22, r28
    10e2:	6f 5d       	subi	r22, 0xDF	; 223
    10e4:	7f 4f       	sbci	r23, 0xFF	; 255
    10e6:	c6 01       	movw	r24, r12
    10e8:	cf d9       	rcall	.-3170   	; 0x488 <uECC_vli_set>
    10ea:	c0 5c       	subi	r28, 0xC0	; 192
    10ec:	df 4f       	sbci	r29, 0xFF	; 255
    10ee:	0f b6       	in	r0, 0x3f	; 63
    10f0:	f8 94       	cli
    10f2:	de bf       	out	0x3e, r29	; 62
    10f4:	0f be       	out	0x3f, r0	; 63
    10f6:	cd bf       	out	0x3d, r28	; 61
    10f8:	df 91       	pop	r29
    10fa:	cf 91       	pop	r28
    10fc:	1f 91       	pop	r17
    10fe:	0f 91       	pop	r16
    1100:	ff 90       	pop	r15
    1102:	ef 90       	pop	r14
    1104:	df 90       	pop	r13
    1106:	cf 90       	pop	r12
    1108:	bf 90       	pop	r11
    110a:	08 95       	ret

0000110c <vli_mmod_fast_secp256r1>:
    110c:	cf 92       	push	r12
    110e:	df 92       	push	r13
    1110:	ff 92       	push	r15
    1112:	0f 93       	push	r16
    1114:	1f 93       	push	r17
    1116:	cf 93       	push	r28
    1118:	df 93       	push	r29
    111a:	cd b7       	in	r28, 0x3d	; 61
    111c:	de b7       	in	r29, 0x3e	; 62
    111e:	a0 97       	sbiw	r28, 0x20	; 32
    1120:	0f b6       	in	r0, 0x3f	; 63
    1122:	f8 94       	cli
    1124:	de bf       	out	0x3e, r29	; 62
    1126:	0f be       	out	0x3f, r0	; 63
    1128:	cd bf       	out	0x3d, r28	; 61
    112a:	6c 01       	movw	r12, r24
    112c:	8b 01       	movw	r16, r22
    112e:	40 e2       	ldi	r20, 0x20	; 32
    1130:	ab d9       	rcall	.-3242   	; 0x488 <uECC_vli_set>
    1132:	1c 82       	std	Y+4, r1	; 0x04
    1134:	1b 82       	std	Y+3, r1	; 0x03
    1136:	1a 82       	std	Y+2, r1	; 0x02
    1138:	19 82       	std	Y+1, r1	; 0x01
    113a:	18 86       	std	Y+8, r1	; 0x08
    113c:	1f 82       	std	Y+7, r1	; 0x07
    113e:	1e 82       	std	Y+6, r1	; 0x06
    1140:	1d 82       	std	Y+5, r1	; 0x05
    1142:	1c 86       	std	Y+12, r1	; 0x0c
    1144:	1b 86       	std	Y+11, r1	; 0x0b
    1146:	1a 86       	std	Y+10, r1	; 0x0a
    1148:	19 86       	std	Y+9, r1	; 0x09
    114a:	f8 01       	movw	r30, r16
    114c:	84 a5       	ldd	r24, Z+44	; 0x2c
    114e:	8d 87       	std	Y+13, r24	; 0x0d
    1150:	85 a5       	ldd	r24, Z+45	; 0x2d
    1152:	8e 87       	std	Y+14, r24	; 0x0e
    1154:	86 a5       	ldd	r24, Z+46	; 0x2e
    1156:	8f 87       	std	Y+15, r24	; 0x0f
    1158:	87 a5       	ldd	r24, Z+47	; 0x2f
    115a:	88 8b       	std	Y+16, r24	; 0x10
    115c:	80 a9       	ldd	r24, Z+48	; 0x30
    115e:	89 8b       	std	Y+17, r24	; 0x11
    1160:	81 a9       	ldd	r24, Z+49	; 0x31
    1162:	8a 8b       	std	Y+18, r24	; 0x12
    1164:	82 a9       	ldd	r24, Z+50	; 0x32
    1166:	8b 8b       	std	Y+19, r24	; 0x13
    1168:	83 a9       	ldd	r24, Z+51	; 0x33
    116a:	8c 8b       	std	Y+20, r24	; 0x14
    116c:	84 a9       	ldd	r24, Z+52	; 0x34
    116e:	8d 8b       	std	Y+21, r24	; 0x15
    1170:	85 a9       	ldd	r24, Z+53	; 0x35
    1172:	8e 8b       	std	Y+22, r24	; 0x16
    1174:	86 a9       	ldd	r24, Z+54	; 0x36
    1176:	8f 8b       	std	Y+23, r24	; 0x17
    1178:	87 a9       	ldd	r24, Z+55	; 0x37
    117a:	88 8f       	std	Y+24, r24	; 0x18
    117c:	80 ad       	ldd	r24, Z+56	; 0x38
    117e:	89 8f       	std	Y+25, r24	; 0x19
    1180:	81 ad       	ldd	r24, Z+57	; 0x39
    1182:	8a 8f       	std	Y+26, r24	; 0x1a
    1184:	82 ad       	ldd	r24, Z+58	; 0x3a
    1186:	8b 8f       	std	Y+27, r24	; 0x1b
    1188:	83 ad       	ldd	r24, Z+59	; 0x3b
    118a:	8c 8f       	std	Y+28, r24	; 0x1c
    118c:	84 ad       	ldd	r24, Z+60	; 0x3c
    118e:	8d 8f       	std	Y+29, r24	; 0x1d
    1190:	85 ad       	ldd	r24, Z+61	; 0x3d
    1192:	8e 8f       	std	Y+30, r24	; 0x1e
    1194:	86 ad       	ldd	r24, Z+62	; 0x3e
    1196:	8f 8f       	std	Y+31, r24	; 0x1f
    1198:	87 ad       	ldd	r24, Z+63	; 0x3f
    119a:	88 a3       	std	Y+32, r24	; 0x20
    119c:	20 e2       	ldi	r18, 0x20	; 32
    119e:	ae 01       	movw	r20, r28
    11a0:	4f 5f       	subi	r20, 0xFF	; 255
    11a2:	5f 4f       	sbci	r21, 0xFF	; 255
    11a4:	ba 01       	movw	r22, r20
    11a6:	ca 01       	movw	r24, r20
    11a8:	2e da       	rcall	.-2980   	; 0x606 <uECC_vli_add>
    11aa:	f8 2e       	mov	r15, r24
    11ac:	20 e2       	ldi	r18, 0x20	; 32
    11ae:	ae 01       	movw	r20, r28
    11b0:	4f 5f       	subi	r20, 0xFF	; 255
    11b2:	5f 4f       	sbci	r21, 0xFF	; 255
    11b4:	b6 01       	movw	r22, r12
    11b6:	c6 01       	movw	r24, r12
    11b8:	26 da       	rcall	.-2996   	; 0x606 <uECC_vli_add>
    11ba:	f8 0e       	add	r15, r24
    11bc:	f8 01       	movw	r30, r16
    11be:	80 a9       	ldd	r24, Z+48	; 0x30
    11c0:	8d 87       	std	Y+13, r24	; 0x0d
    11c2:	81 a9       	ldd	r24, Z+49	; 0x31
    11c4:	8e 87       	std	Y+14, r24	; 0x0e
    11c6:	82 a9       	ldd	r24, Z+50	; 0x32
    11c8:	8f 87       	std	Y+15, r24	; 0x0f
    11ca:	83 a9       	ldd	r24, Z+51	; 0x33
    11cc:	88 8b       	std	Y+16, r24	; 0x10
    11ce:	84 a9       	ldd	r24, Z+52	; 0x34
    11d0:	89 8b       	std	Y+17, r24	; 0x11
    11d2:	85 a9       	ldd	r24, Z+53	; 0x35
    11d4:	8a 8b       	std	Y+18, r24	; 0x12
    11d6:	86 a9       	ldd	r24, Z+54	; 0x36
    11d8:	8b 8b       	std	Y+19, r24	; 0x13
    11da:	87 a9       	ldd	r24, Z+55	; 0x37
    11dc:	8c 8b       	std	Y+20, r24	; 0x14
    11de:	80 ad       	ldd	r24, Z+56	; 0x38
    11e0:	8d 8b       	std	Y+21, r24	; 0x15
    11e2:	81 ad       	ldd	r24, Z+57	; 0x39
    11e4:	8e 8b       	std	Y+22, r24	; 0x16
    11e6:	82 ad       	ldd	r24, Z+58	; 0x3a
    11e8:	8f 8b       	std	Y+23, r24	; 0x17
    11ea:	83 ad       	ldd	r24, Z+59	; 0x3b
    11ec:	88 8f       	std	Y+24, r24	; 0x18
    11ee:	84 ad       	ldd	r24, Z+60	; 0x3c
    11f0:	89 8f       	std	Y+25, r24	; 0x19
    11f2:	85 ad       	ldd	r24, Z+61	; 0x3d
    11f4:	8a 8f       	std	Y+26, r24	; 0x1a
    11f6:	86 ad       	ldd	r24, Z+62	; 0x3e
    11f8:	8b 8f       	std	Y+27, r24	; 0x1b
    11fa:	87 ad       	ldd	r24, Z+63	; 0x3f
    11fc:	8c 8f       	std	Y+28, r24	; 0x1c
    11fe:	18 a2       	std	Y+32, r1	; 0x20
    1200:	1f 8e       	std	Y+31, r1	; 0x1f
    1202:	1e 8e       	std	Y+30, r1	; 0x1e
    1204:	1d 8e       	std	Y+29, r1	; 0x1d
    1206:	20 e2       	ldi	r18, 0x20	; 32
    1208:	ae 01       	movw	r20, r28
    120a:	4f 5f       	subi	r20, 0xFF	; 255
    120c:	5f 4f       	sbci	r21, 0xFF	; 255
    120e:	ba 01       	movw	r22, r20
    1210:	ca 01       	movw	r24, r20
    1212:	f9 d9       	rcall	.-3086   	; 0x606 <uECC_vli_add>
    1214:	f8 0e       	add	r15, r24
    1216:	20 e2       	ldi	r18, 0x20	; 32
    1218:	ae 01       	movw	r20, r28
    121a:	4f 5f       	subi	r20, 0xFF	; 255
    121c:	5f 4f       	sbci	r21, 0xFF	; 255
    121e:	b6 01       	movw	r22, r12
    1220:	c6 01       	movw	r24, r12
    1222:	f1 d9       	rcall	.-3102   	; 0x606 <uECC_vli_add>
    1224:	f8 0e       	add	r15, r24
    1226:	f8 01       	movw	r30, r16
    1228:	80 a1       	ldd	r24, Z+32	; 0x20
    122a:	89 83       	std	Y+1, r24	; 0x01
    122c:	81 a1       	ldd	r24, Z+33	; 0x21
    122e:	8a 83       	std	Y+2, r24	; 0x02
    1230:	82 a1       	ldd	r24, Z+34	; 0x22
    1232:	8b 83       	std	Y+3, r24	; 0x03
    1234:	83 a1       	ldd	r24, Z+35	; 0x23
    1236:	8c 83       	std	Y+4, r24	; 0x04
    1238:	84 a1       	ldd	r24, Z+36	; 0x24
    123a:	8d 83       	std	Y+5, r24	; 0x05
    123c:	85 a1       	ldd	r24, Z+37	; 0x25
    123e:	8e 83       	std	Y+6, r24	; 0x06
    1240:	86 a1       	ldd	r24, Z+38	; 0x26
    1242:	8f 83       	std	Y+7, r24	; 0x07
    1244:	87 a1       	ldd	r24, Z+39	; 0x27
    1246:	88 87       	std	Y+8, r24	; 0x08
    1248:	80 a5       	ldd	r24, Z+40	; 0x28
    124a:	89 87       	std	Y+9, r24	; 0x09
    124c:	81 a5       	ldd	r24, Z+41	; 0x29
    124e:	8a 87       	std	Y+10, r24	; 0x0a
    1250:	82 a5       	ldd	r24, Z+42	; 0x2a
    1252:	8b 87       	std	Y+11, r24	; 0x0b
    1254:	83 a5       	ldd	r24, Z+43	; 0x2b
    1256:	8c 87       	std	Y+12, r24	; 0x0c
    1258:	18 8a       	std	Y+16, r1	; 0x10
    125a:	1f 86       	std	Y+15, r1	; 0x0f
    125c:	1e 86       	std	Y+14, r1	; 0x0e
    125e:	1d 86       	std	Y+13, r1	; 0x0d
    1260:	1c 8a       	std	Y+20, r1	; 0x14
    1262:	1b 8a       	std	Y+19, r1	; 0x13
    1264:	1a 8a       	std	Y+18, r1	; 0x12
    1266:	19 8a       	std	Y+17, r1	; 0x11
    1268:	18 8e       	std	Y+24, r1	; 0x18
    126a:	1f 8a       	std	Y+23, r1	; 0x17
    126c:	1e 8a       	std	Y+22, r1	; 0x16
    126e:	1d 8a       	std	Y+21, r1	; 0x15
    1270:	80 ad       	ldd	r24, Z+56	; 0x38
    1272:	89 8f       	std	Y+25, r24	; 0x19
    1274:	81 ad       	ldd	r24, Z+57	; 0x39
    1276:	8a 8f       	std	Y+26, r24	; 0x1a
    1278:	82 ad       	ldd	r24, Z+58	; 0x3a
    127a:	8b 8f       	std	Y+27, r24	; 0x1b
    127c:	83 ad       	ldd	r24, Z+59	; 0x3b
    127e:	8c 8f       	std	Y+28, r24	; 0x1c
    1280:	84 ad       	ldd	r24, Z+60	; 0x3c
    1282:	8d 8f       	std	Y+29, r24	; 0x1d
    1284:	85 ad       	ldd	r24, Z+61	; 0x3d
    1286:	8e 8f       	std	Y+30, r24	; 0x1e
    1288:	86 ad       	ldd	r24, Z+62	; 0x3e
    128a:	8f 8f       	std	Y+31, r24	; 0x1f
    128c:	87 ad       	ldd	r24, Z+63	; 0x3f
    128e:	88 a3       	std	Y+32, r24	; 0x20
    1290:	20 e2       	ldi	r18, 0x20	; 32
    1292:	ae 01       	movw	r20, r28
    1294:	4f 5f       	subi	r20, 0xFF	; 255
    1296:	5f 4f       	sbci	r21, 0xFF	; 255
    1298:	b6 01       	movw	r22, r12
    129a:	c6 01       	movw	r24, r12
    129c:	b4 d9       	rcall	.-3224   	; 0x606 <uECC_vli_add>
    129e:	f8 0e       	add	r15, r24
    12a0:	f8 01       	movw	r30, r16
    12a2:	84 a1       	ldd	r24, Z+36	; 0x24
    12a4:	89 83       	std	Y+1, r24	; 0x01
    12a6:	85 a1       	ldd	r24, Z+37	; 0x25
    12a8:	8a 83       	std	Y+2, r24	; 0x02
    12aa:	86 a1       	ldd	r24, Z+38	; 0x26
    12ac:	8b 83       	std	Y+3, r24	; 0x03
    12ae:	87 a1       	ldd	r24, Z+39	; 0x27
    12b0:	8c 83       	std	Y+4, r24	; 0x04
    12b2:	80 a5       	ldd	r24, Z+40	; 0x28
    12b4:	8d 83       	std	Y+5, r24	; 0x05
    12b6:	81 a5       	ldd	r24, Z+41	; 0x29
    12b8:	8e 83       	std	Y+6, r24	; 0x06
    12ba:	82 a5       	ldd	r24, Z+42	; 0x2a
    12bc:	8f 83       	std	Y+7, r24	; 0x07
    12be:	83 a5       	ldd	r24, Z+43	; 0x2b
    12c0:	88 87       	std	Y+8, r24	; 0x08
    12c2:	84 a5       	ldd	r24, Z+44	; 0x2c
    12c4:	89 87       	std	Y+9, r24	; 0x09
    12c6:	85 a5       	ldd	r24, Z+45	; 0x2d
    12c8:	8a 87       	std	Y+10, r24	; 0x0a
    12ca:	86 a5       	ldd	r24, Z+46	; 0x2e
    12cc:	8b 87       	std	Y+11, r24	; 0x0b
    12ce:	87 a5       	ldd	r24, Z+47	; 0x2f
    12d0:	8c 87       	std	Y+12, r24	; 0x0c
    12d2:	34 a9       	ldd	r19, Z+52	; 0x34
    12d4:	3d 87       	std	Y+13, r19	; 0x0d
    12d6:	25 a9       	ldd	r18, Z+53	; 0x35
    12d8:	2e 87       	std	Y+14, r18	; 0x0e
    12da:	96 a9       	ldd	r25, Z+54	; 0x36
    12dc:	9f 87       	std	Y+15, r25	; 0x0f
    12de:	87 a9       	ldd	r24, Z+55	; 0x37
    12e0:	88 8b       	std	Y+16, r24	; 0x10
    12e2:	40 ad       	ldd	r20, Z+56	; 0x38
    12e4:	49 8b       	std	Y+17, r20	; 0x11
    12e6:	41 ad       	ldd	r20, Z+57	; 0x39
    12e8:	4a 8b       	std	Y+18, r20	; 0x12
    12ea:	42 ad       	ldd	r20, Z+58	; 0x3a
    12ec:	4b 8b       	std	Y+19, r20	; 0x13
    12ee:	43 ad       	ldd	r20, Z+59	; 0x3b
    12f0:	4c 8b       	std	Y+20, r20	; 0x14
    12f2:	44 ad       	ldd	r20, Z+60	; 0x3c
    12f4:	4d 8b       	std	Y+21, r20	; 0x15
    12f6:	45 ad       	ldd	r20, Z+61	; 0x3d
    12f8:	4e 8b       	std	Y+22, r20	; 0x16
    12fa:	46 ad       	ldd	r20, Z+62	; 0x3e
    12fc:	4f 8b       	std	Y+23, r20	; 0x17
    12fe:	47 ad       	ldd	r20, Z+63	; 0x3f
    1300:	48 8f       	std	Y+24, r20	; 0x18
    1302:	39 8f       	std	Y+25, r19	; 0x19
    1304:	2a 8f       	std	Y+26, r18	; 0x1a
    1306:	9b 8f       	std	Y+27, r25	; 0x1b
    1308:	8c 8f       	std	Y+28, r24	; 0x1c
    130a:	80 a1       	ldd	r24, Z+32	; 0x20
    130c:	8d 8f       	std	Y+29, r24	; 0x1d
    130e:	81 a1       	ldd	r24, Z+33	; 0x21
    1310:	8e 8f       	std	Y+30, r24	; 0x1e
    1312:	82 a1       	ldd	r24, Z+34	; 0x22
    1314:	8f 8f       	std	Y+31, r24	; 0x1f
    1316:	83 a1       	ldd	r24, Z+35	; 0x23
    1318:	88 a3       	std	Y+32, r24	; 0x20
    131a:	20 e2       	ldi	r18, 0x20	; 32
    131c:	ae 01       	movw	r20, r28
    131e:	4f 5f       	subi	r20, 0xFF	; 255
    1320:	5f 4f       	sbci	r21, 0xFF	; 255
    1322:	b6 01       	movw	r22, r12
    1324:	c6 01       	movw	r24, r12
    1326:	6f d9       	rcall	.-3362   	; 0x606 <uECC_vli_add>
    1328:	f8 0e       	add	r15, r24
    132a:	f8 01       	movw	r30, r16
    132c:	84 a5       	ldd	r24, Z+44	; 0x2c
    132e:	89 83       	std	Y+1, r24	; 0x01
    1330:	85 a5       	ldd	r24, Z+45	; 0x2d
    1332:	8a 83       	std	Y+2, r24	; 0x02
    1334:	86 a5       	ldd	r24, Z+46	; 0x2e
    1336:	8b 83       	std	Y+3, r24	; 0x03
    1338:	87 a5       	ldd	r24, Z+47	; 0x2f
    133a:	8c 83       	std	Y+4, r24	; 0x04
    133c:	80 a9       	ldd	r24, Z+48	; 0x30
    133e:	8d 83       	std	Y+5, r24	; 0x05
    1340:	81 a9       	ldd	r24, Z+49	; 0x31
    1342:	8e 83       	std	Y+6, r24	; 0x06
    1344:	82 a9       	ldd	r24, Z+50	; 0x32
    1346:	8f 83       	std	Y+7, r24	; 0x07
    1348:	83 a9       	ldd	r24, Z+51	; 0x33
    134a:	88 87       	std	Y+8, r24	; 0x08
    134c:	84 a9       	ldd	r24, Z+52	; 0x34
    134e:	89 87       	std	Y+9, r24	; 0x09
    1350:	85 a9       	ldd	r24, Z+53	; 0x35
    1352:	8a 87       	std	Y+10, r24	; 0x0a
    1354:	86 a9       	ldd	r24, Z+54	; 0x36
    1356:	8b 87       	std	Y+11, r24	; 0x0b
    1358:	87 a9       	ldd	r24, Z+55	; 0x37
    135a:	8c 87       	std	Y+12, r24	; 0x0c
    135c:	18 8a       	std	Y+16, r1	; 0x10
    135e:	1f 86       	std	Y+15, r1	; 0x0f
    1360:	1e 86       	std	Y+14, r1	; 0x0e
    1362:	1d 86       	std	Y+13, r1	; 0x0d
    1364:	1c 8a       	std	Y+20, r1	; 0x14
    1366:	1b 8a       	std	Y+19, r1	; 0x13
    1368:	1a 8a       	std	Y+18, r1	; 0x12
    136a:	19 8a       	std	Y+17, r1	; 0x11
    136c:	18 8e       	std	Y+24, r1	; 0x18
    136e:	1f 8a       	std	Y+23, r1	; 0x17
    1370:	1e 8a       	std	Y+22, r1	; 0x16
    1372:	1d 8a       	std	Y+21, r1	; 0x15
    1374:	80 a1       	ldd	r24, Z+32	; 0x20
    1376:	89 8f       	std	Y+25, r24	; 0x19
    1378:	81 a1       	ldd	r24, Z+33	; 0x21
    137a:	8a 8f       	std	Y+26, r24	; 0x1a
    137c:	82 a1       	ldd	r24, Z+34	; 0x22
    137e:	8b 8f       	std	Y+27, r24	; 0x1b
    1380:	83 a1       	ldd	r24, Z+35	; 0x23
    1382:	8c 8f       	std	Y+28, r24	; 0x1c
    1384:	80 a5       	ldd	r24, Z+40	; 0x28
    1386:	8d 8f       	std	Y+29, r24	; 0x1d
    1388:	81 a5       	ldd	r24, Z+41	; 0x29
    138a:	8e 8f       	std	Y+30, r24	; 0x1e
    138c:	82 a5       	ldd	r24, Z+42	; 0x2a
    138e:	8f 8f       	std	Y+31, r24	; 0x1f
    1390:	83 a5       	ldd	r24, Z+43	; 0x2b
    1392:	88 a3       	std	Y+32, r24	; 0x20
    1394:	20 e2       	ldi	r18, 0x20	; 32
    1396:	ae 01       	movw	r20, r28
    1398:	4f 5f       	subi	r20, 0xFF	; 255
    139a:	5f 4f       	sbci	r21, 0xFF	; 255
    139c:	b6 01       	movw	r22, r12
    139e:	c6 01       	movw	r24, r12
    13a0:	03 da       	rcall	.-3066   	; 0x7a8 <uECC_vli_sub>
    13a2:	f8 1a       	sub	r15, r24
    13a4:	f8 01       	movw	r30, r16
    13a6:	80 a9       	ldd	r24, Z+48	; 0x30
    13a8:	89 83       	std	Y+1, r24	; 0x01
    13aa:	81 a9       	ldd	r24, Z+49	; 0x31
    13ac:	8a 83       	std	Y+2, r24	; 0x02
    13ae:	82 a9       	ldd	r24, Z+50	; 0x32
    13b0:	8b 83       	std	Y+3, r24	; 0x03
    13b2:	83 a9       	ldd	r24, Z+51	; 0x33
    13b4:	8c 83       	std	Y+4, r24	; 0x04
    13b6:	84 a9       	ldd	r24, Z+52	; 0x34
    13b8:	8d 83       	std	Y+5, r24	; 0x05
    13ba:	85 a9       	ldd	r24, Z+53	; 0x35
    13bc:	8e 83       	std	Y+6, r24	; 0x06
    13be:	86 a9       	ldd	r24, Z+54	; 0x36
    13c0:	8f 83       	std	Y+7, r24	; 0x07
    13c2:	87 a9       	ldd	r24, Z+55	; 0x37
    13c4:	88 87       	std	Y+8, r24	; 0x08
    13c6:	80 ad       	ldd	r24, Z+56	; 0x38
    13c8:	89 87       	std	Y+9, r24	; 0x09
    13ca:	81 ad       	ldd	r24, Z+57	; 0x39
    13cc:	8a 87       	std	Y+10, r24	; 0x0a
    13ce:	82 ad       	ldd	r24, Z+58	; 0x3a
    13d0:	8b 87       	std	Y+11, r24	; 0x0b
    13d2:	83 ad       	ldd	r24, Z+59	; 0x3b
    13d4:	8c 87       	std	Y+12, r24	; 0x0c
    13d6:	84 ad       	ldd	r24, Z+60	; 0x3c
    13d8:	8d 87       	std	Y+13, r24	; 0x0d
    13da:	85 ad       	ldd	r24, Z+61	; 0x3d
    13dc:	8e 87       	std	Y+14, r24	; 0x0e
    13de:	86 ad       	ldd	r24, Z+62	; 0x3e
    13e0:	8f 87       	std	Y+15, r24	; 0x0f
    13e2:	87 ad       	ldd	r24, Z+63	; 0x3f
    13e4:	88 8b       	std	Y+16, r24	; 0x10
    13e6:	1c 8a       	std	Y+20, r1	; 0x14
    13e8:	1b 8a       	std	Y+19, r1	; 0x13
    13ea:	1a 8a       	std	Y+18, r1	; 0x12
    13ec:	19 8a       	std	Y+17, r1	; 0x11
    13ee:	18 8e       	std	Y+24, r1	; 0x18
    13f0:	1f 8a       	std	Y+23, r1	; 0x17
    13f2:	1e 8a       	std	Y+22, r1	; 0x16
    13f4:	1d 8a       	std	Y+21, r1	; 0x15
    13f6:	84 a1       	ldd	r24, Z+36	; 0x24
    13f8:	89 8f       	std	Y+25, r24	; 0x19
    13fa:	85 a1       	ldd	r24, Z+37	; 0x25
    13fc:	8a 8f       	std	Y+26, r24	; 0x1a
    13fe:	86 a1       	ldd	r24, Z+38	; 0x26
    1400:	8b 8f       	std	Y+27, r24	; 0x1b
    1402:	87 a1       	ldd	r24, Z+39	; 0x27
    1404:	8c 8f       	std	Y+28, r24	; 0x1c
    1406:	84 a5       	ldd	r24, Z+44	; 0x2c
    1408:	8d 8f       	std	Y+29, r24	; 0x1d
    140a:	85 a5       	ldd	r24, Z+45	; 0x2d
    140c:	8e 8f       	std	Y+30, r24	; 0x1e
    140e:	86 a5       	ldd	r24, Z+46	; 0x2e
    1410:	8f 8f       	std	Y+31, r24	; 0x1f
    1412:	87 a5       	ldd	r24, Z+47	; 0x2f
    1414:	88 a3       	std	Y+32, r24	; 0x20
    1416:	20 e2       	ldi	r18, 0x20	; 32
    1418:	ae 01       	movw	r20, r28
    141a:	4f 5f       	subi	r20, 0xFF	; 255
    141c:	5f 4f       	sbci	r21, 0xFF	; 255
    141e:	b6 01       	movw	r22, r12
    1420:	c6 01       	movw	r24, r12
    1422:	c2 d9       	rcall	.-3196   	; 0x7a8 <uECC_vli_sub>
    1424:	f8 1a       	sub	r15, r24
    1426:	f8 01       	movw	r30, r16
    1428:	84 a9       	ldd	r24, Z+52	; 0x34
    142a:	89 83       	std	Y+1, r24	; 0x01
    142c:	85 a9       	ldd	r24, Z+53	; 0x35
    142e:	8a 83       	std	Y+2, r24	; 0x02
    1430:	86 a9       	ldd	r24, Z+54	; 0x36
    1432:	8b 83       	std	Y+3, r24	; 0x03
    1434:	87 a9       	ldd	r24, Z+55	; 0x37
    1436:	8c 83       	std	Y+4, r24	; 0x04
    1438:	80 ad       	ldd	r24, Z+56	; 0x38
    143a:	8d 83       	std	Y+5, r24	; 0x05
    143c:	81 ad       	ldd	r24, Z+57	; 0x39
    143e:	8e 83       	std	Y+6, r24	; 0x06
    1440:	82 ad       	ldd	r24, Z+58	; 0x3a
    1442:	8f 83       	std	Y+7, r24	; 0x07
    1444:	83 ad       	ldd	r24, Z+59	; 0x3b
    1446:	88 87       	std	Y+8, r24	; 0x08
    1448:	84 ad       	ldd	r24, Z+60	; 0x3c
    144a:	89 87       	std	Y+9, r24	; 0x09
    144c:	85 ad       	ldd	r24, Z+61	; 0x3d
    144e:	8a 87       	std	Y+10, r24	; 0x0a
    1450:	86 ad       	ldd	r24, Z+62	; 0x3e
    1452:	8b 87       	std	Y+11, r24	; 0x0b
    1454:	87 ad       	ldd	r24, Z+63	; 0x3f
    1456:	8c 87       	std	Y+12, r24	; 0x0c
    1458:	80 a1       	ldd	r24, Z+32	; 0x20
    145a:	8d 87       	std	Y+13, r24	; 0x0d
    145c:	81 a1       	ldd	r24, Z+33	; 0x21
    145e:	8e 87       	std	Y+14, r24	; 0x0e
    1460:	82 a1       	ldd	r24, Z+34	; 0x22
    1462:	8f 87       	std	Y+15, r24	; 0x0f
    1464:	83 a1       	ldd	r24, Z+35	; 0x23
    1466:	88 8b       	std	Y+16, r24	; 0x10
    1468:	84 a1       	ldd	r24, Z+36	; 0x24
    146a:	89 8b       	std	Y+17, r24	; 0x11
    146c:	85 a1       	ldd	r24, Z+37	; 0x25
    146e:	8a 8b       	std	Y+18, r24	; 0x12
    1470:	86 a1       	ldd	r24, Z+38	; 0x26
    1472:	8b 8b       	std	Y+19, r24	; 0x13
    1474:	87 a1       	ldd	r24, Z+39	; 0x27
    1476:	8c 8b       	std	Y+20, r24	; 0x14
    1478:	80 a5       	ldd	r24, Z+40	; 0x28
    147a:	8d 8b       	std	Y+21, r24	; 0x15
    147c:	81 a5       	ldd	r24, Z+41	; 0x29
    147e:	8e 8b       	std	Y+22, r24	; 0x16
    1480:	82 a5       	ldd	r24, Z+42	; 0x2a
    1482:	8f 8b       	std	Y+23, r24	; 0x17
    1484:	83 a5       	ldd	r24, Z+43	; 0x2b
    1486:	88 8f       	std	Y+24, r24	; 0x18
    1488:	1c 8e       	std	Y+28, r1	; 0x1c
    148a:	1b 8e       	std	Y+27, r1	; 0x1b
    148c:	1a 8e       	std	Y+26, r1	; 0x1a
    148e:	19 8e       	std	Y+25, r1	; 0x19
    1490:	80 a9       	ldd	r24, Z+48	; 0x30
    1492:	8d 8f       	std	Y+29, r24	; 0x1d
    1494:	81 a9       	ldd	r24, Z+49	; 0x31
    1496:	8e 8f       	std	Y+30, r24	; 0x1e
    1498:	82 a9       	ldd	r24, Z+50	; 0x32
    149a:	8f 8f       	std	Y+31, r24	; 0x1f
    149c:	83 a9       	ldd	r24, Z+51	; 0x33
    149e:	88 a3       	std	Y+32, r24	; 0x20
    14a0:	20 e2       	ldi	r18, 0x20	; 32
    14a2:	ae 01       	movw	r20, r28
    14a4:	4f 5f       	subi	r20, 0xFF	; 255
    14a6:	5f 4f       	sbci	r21, 0xFF	; 255
    14a8:	b6 01       	movw	r22, r12
    14aa:	c6 01       	movw	r24, r12
    14ac:	7d d9       	rcall	.-3334   	; 0x7a8 <uECC_vli_sub>
    14ae:	f8 1a       	sub	r15, r24
    14b0:	f8 01       	movw	r30, r16
    14b2:	80 ad       	ldd	r24, Z+56	; 0x38
    14b4:	89 83       	std	Y+1, r24	; 0x01
    14b6:	81 ad       	ldd	r24, Z+57	; 0x39
    14b8:	8a 83       	std	Y+2, r24	; 0x02
    14ba:	82 ad       	ldd	r24, Z+58	; 0x3a
    14bc:	8b 83       	std	Y+3, r24	; 0x03
    14be:	83 ad       	ldd	r24, Z+59	; 0x3b
    14c0:	8c 83       	std	Y+4, r24	; 0x04
    14c2:	84 ad       	ldd	r24, Z+60	; 0x3c
    14c4:	8d 83       	std	Y+5, r24	; 0x05
    14c6:	85 ad       	ldd	r24, Z+61	; 0x3d
    14c8:	8e 83       	std	Y+6, r24	; 0x06
    14ca:	86 ad       	ldd	r24, Z+62	; 0x3e
    14cc:	8f 83       	std	Y+7, r24	; 0x07
    14ce:	87 ad       	ldd	r24, Z+63	; 0x3f
    14d0:	88 87       	std	Y+8, r24	; 0x08
    14d2:	1c 86       	std	Y+12, r1	; 0x0c
    14d4:	1b 86       	std	Y+11, r1	; 0x0b
    14d6:	1a 86       	std	Y+10, r1	; 0x0a
    14d8:	19 86       	std	Y+9, r1	; 0x09
    14da:	84 a1       	ldd	r24, Z+36	; 0x24
    14dc:	8d 87       	std	Y+13, r24	; 0x0d
    14de:	85 a1       	ldd	r24, Z+37	; 0x25
    14e0:	8e 87       	std	Y+14, r24	; 0x0e
    14e2:	86 a1       	ldd	r24, Z+38	; 0x26
    14e4:	8f 87       	std	Y+15, r24	; 0x0f
    14e6:	87 a1       	ldd	r24, Z+39	; 0x27
    14e8:	88 8b       	std	Y+16, r24	; 0x10
    14ea:	80 a5       	ldd	r24, Z+40	; 0x28
    14ec:	89 8b       	std	Y+17, r24	; 0x11
    14ee:	81 a5       	ldd	r24, Z+41	; 0x29
    14f0:	8a 8b       	std	Y+18, r24	; 0x12
    14f2:	82 a5       	ldd	r24, Z+42	; 0x2a
    14f4:	8b 8b       	std	Y+19, r24	; 0x13
    14f6:	83 a5       	ldd	r24, Z+43	; 0x2b
    14f8:	8c 8b       	std	Y+20, r24	; 0x14
    14fa:	84 a5       	ldd	r24, Z+44	; 0x2c
    14fc:	8d 8b       	std	Y+21, r24	; 0x15
    14fe:	85 a5       	ldd	r24, Z+45	; 0x2d
    1500:	8e 8b       	std	Y+22, r24	; 0x16
    1502:	86 a5       	ldd	r24, Z+46	; 0x2e
    1504:	8f 8b       	std	Y+23, r24	; 0x17
    1506:	87 a5       	ldd	r24, Z+47	; 0x2f
    1508:	88 8f       	std	Y+24, r24	; 0x18
    150a:	1c 8e       	std	Y+28, r1	; 0x1c
    150c:	1b 8e       	std	Y+27, r1	; 0x1b
    150e:	1a 8e       	std	Y+26, r1	; 0x1a
    1510:	19 8e       	std	Y+25, r1	; 0x19
    1512:	84 a9       	ldd	r24, Z+52	; 0x34
    1514:	8d 8f       	std	Y+29, r24	; 0x1d
    1516:	85 a9       	ldd	r24, Z+53	; 0x35
    1518:	8e 8f       	std	Y+30, r24	; 0x1e
    151a:	86 a9       	ldd	r24, Z+54	; 0x36
    151c:	8f 8f       	std	Y+31, r24	; 0x1f
    151e:	87 a9       	ldd	r24, Z+55	; 0x37
    1520:	88 a3       	std	Y+32, r24	; 0x20
    1522:	20 e2       	ldi	r18, 0x20	; 32
    1524:	ae 01       	movw	r20, r28
    1526:	4f 5f       	subi	r20, 0xFF	; 255
    1528:	5f 4f       	sbci	r21, 0xFF	; 255
    152a:	b6 01       	movw	r22, r12
    152c:	c6 01       	movw	r24, r12
    152e:	3c d9       	rcall	.-3464   	; 0x7a8 <uECC_vli_sub>
    1530:	1f 2d       	mov	r17, r15
    1532:	18 1b       	sub	r17, r24
    1534:	82 f4       	brpl	.+32     	; 0x1556 <vli_mmod_fast_secp256r1+0x44a>
    1536:	20 e2       	ldi	r18, 0x20	; 32
    1538:	48 e0       	ldi	r20, 0x08	; 8
    153a:	51 e0       	ldi	r21, 0x01	; 1
    153c:	b6 01       	movw	r22, r12
    153e:	c6 01       	movw	r24, r12
    1540:	62 d8       	rcall	.-3900   	; 0x606 <uECC_vli_add>
    1542:	18 0f       	add	r17, r24
    1544:	c2 f3       	brmi	.-16     	; 0x1536 <vli_mmod_fast_secp256r1+0x42a>
    1546:	10 c0       	rjmp	.+32     	; 0x1568 <vli_mmod_fast_secp256r1+0x45c>
    1548:	20 e2       	ldi	r18, 0x20	; 32
    154a:	48 e0       	ldi	r20, 0x08	; 8
    154c:	51 e0       	ldi	r21, 0x01	; 1
    154e:	b6 01       	movw	r22, r12
    1550:	c6 01       	movw	r24, r12
    1552:	2a d9       	rcall	.-3500   	; 0x7a8 <uECC_vli_sub>
    1554:	18 1b       	sub	r17, r24
    1556:	11 11       	cpse	r17, r1
    1558:	f7 cf       	rjmp	.-18     	; 0x1548 <vli_mmod_fast_secp256r1+0x43c>
    155a:	40 e2       	ldi	r20, 0x20	; 32
    155c:	b6 01       	movw	r22, r12
    155e:	88 e0       	ldi	r24, 0x08	; 8
    1560:	91 e0       	ldi	r25, 0x01	; 1
    1562:	92 da       	rcall	.-2780   	; 0xa88 <uECC_vli_cmp_unsafe>
    1564:	81 30       	cpi	r24, 0x01	; 1
    1566:	81 f7       	brne	.-32     	; 0x1548 <vli_mmod_fast_secp256r1+0x43c>
    1568:	a0 96       	adiw	r28, 0x20	; 32
    156a:	0f b6       	in	r0, 0x3f	; 63
    156c:	f8 94       	cli
    156e:	de bf       	out	0x3e, r29	; 62
    1570:	0f be       	out	0x3f, r0	; 63
    1572:	cd bf       	out	0x3d, r28	; 61
    1574:	df 91       	pop	r29
    1576:	cf 91       	pop	r28
    1578:	1f 91       	pop	r17
    157a:	0f 91       	pop	r16
    157c:	ff 90       	pop	r15
    157e:	df 90       	pop	r13
    1580:	cf 90       	pop	r12
    1582:	08 95       	ret

00001584 <apply_z>:
    1584:	af 92       	push	r10
    1586:	bf 92       	push	r11
    1588:	cf 92       	push	r12
    158a:	df 92       	push	r13
    158c:	ef 92       	push	r14
    158e:	ff 92       	push	r15
    1590:	0f 93       	push	r16
    1592:	1f 93       	push	r17
    1594:	cf 93       	push	r28
    1596:	df 93       	push	r29
    1598:	cd b7       	in	r28, 0x3d	; 61
    159a:	de b7       	in	r29, 0x3e	; 62
    159c:	a0 97       	sbiw	r28, 0x20	; 32
    159e:	0f b6       	in	r0, 0x3f	; 63
    15a0:	f8 94       	cli
    15a2:	de bf       	out	0x3e, r29	; 62
    15a4:	0f be       	out	0x3f, r0	; 63
    15a6:	cd bf       	out	0x3d, r28	; 61
    15a8:	5c 01       	movw	r10, r24
    15aa:	7b 01       	movw	r14, r22
    15ac:	6a 01       	movw	r12, r20
    15ae:	89 01       	movw	r16, r18
    15b0:	a9 01       	movw	r20, r18
    15b2:	b6 01       	movw	r22, r12
    15b4:	ce 01       	movw	r24, r28
    15b6:	01 96       	adiw	r24, 0x01	; 1
    15b8:	27 db       	rcall	.-2482   	; 0xc08 <uECC_vli_modSquare_fast>
    15ba:	98 01       	movw	r18, r16
    15bc:	ae 01       	movw	r20, r28
    15be:	4f 5f       	subi	r20, 0xFF	; 255
    15c0:	5f 4f       	sbci	r21, 0xFF	; 255
    15c2:	b5 01       	movw	r22, r10
    15c4:	c5 01       	movw	r24, r10
    15c6:	f1 da       	rcall	.-2590   	; 0xbaa <uECC_vli_modMult_fast>
    15c8:	98 01       	movw	r18, r16
    15ca:	a6 01       	movw	r20, r12
    15cc:	be 01       	movw	r22, r28
    15ce:	6f 5f       	subi	r22, 0xFF	; 255
    15d0:	7f 4f       	sbci	r23, 0xFF	; 255
    15d2:	cb 01       	movw	r24, r22
    15d4:	ea da       	rcall	.-2604   	; 0xbaa <uECC_vli_modMult_fast>
    15d6:	98 01       	movw	r18, r16
    15d8:	ae 01       	movw	r20, r28
    15da:	4f 5f       	subi	r20, 0xFF	; 255
    15dc:	5f 4f       	sbci	r21, 0xFF	; 255
    15de:	b7 01       	movw	r22, r14
    15e0:	c7 01       	movw	r24, r14
    15e2:	e3 da       	rcall	.-2618   	; 0xbaa <uECC_vli_modMult_fast>
    15e4:	a0 96       	adiw	r28, 0x20	; 32
    15e6:	0f b6       	in	r0, 0x3f	; 63
    15e8:	f8 94       	cli
    15ea:	de bf       	out	0x3e, r29	; 62
    15ec:	0f be       	out	0x3f, r0	; 63
    15ee:	cd bf       	out	0x3d, r28	; 61
    15f0:	df 91       	pop	r29
    15f2:	cf 91       	pop	r28
    15f4:	1f 91       	pop	r17
    15f6:	0f 91       	pop	r16
    15f8:	ff 90       	pop	r15
    15fa:	ef 90       	pop	r14
    15fc:	df 90       	pop	r13
    15fe:	cf 90       	pop	r12
    1600:	bf 90       	pop	r11
    1602:	af 90       	pop	r10
    1604:	08 95       	ret

00001606 <XYcZ_add>:
    1606:	4f 92       	push	r4
    1608:	5f 92       	push	r5
    160a:	6f 92       	push	r6
    160c:	7f 92       	push	r7
    160e:	8f 92       	push	r8
    1610:	9f 92       	push	r9
    1612:	af 92       	push	r10
    1614:	bf 92       	push	r11
    1616:	cf 92       	push	r12
    1618:	df 92       	push	r13
    161a:	ef 92       	push	r14
    161c:	ff 92       	push	r15
    161e:	0f 93       	push	r16
    1620:	1f 93       	push	r17
    1622:	cf 93       	push	r28
    1624:	df 93       	push	r29
    1626:	cd b7       	in	r28, 0x3d	; 61
    1628:	de b7       	in	r29, 0x3e	; 62
    162a:	a0 97       	sbiw	r28, 0x20	; 32
    162c:	0f b6       	in	r0, 0x3f	; 63
    162e:	f8 94       	cli
    1630:	de bf       	out	0x3e, r29	; 62
    1632:	0f be       	out	0x3f, r0	; 63
    1634:	cd bf       	out	0x3d, r28	; 61
    1636:	3c 01       	movw	r6, r24
    1638:	2b 01       	movw	r4, r22
    163a:	7a 01       	movw	r14, r20
    163c:	59 01       	movw	r10, r18
    163e:	68 01       	movw	r12, r16
    1640:	f8 01       	movw	r30, r16
    1642:	10 81       	ld	r17, Z
    1644:	46 01       	movw	r8, r12
    1646:	f4 e0       	ldi	r31, 0x04	; 4
    1648:	8f 0e       	add	r8, r31
    164a:	91 1c       	adc	r9, r1
    164c:	01 2f       	mov	r16, r17
    164e:	94 01       	movw	r18, r8
    1650:	ac 01       	movw	r20, r24
    1652:	b7 01       	movw	r22, r14
    1654:	ce 01       	movw	r24, r28
    1656:	01 96       	adiw	r24, 0x01	; 1
    1658:	92 da       	rcall	.-2780   	; 0xb7e <uECC_vli_modSub>
    165a:	a6 01       	movw	r20, r12
    165c:	be 01       	movw	r22, r28
    165e:	6f 5f       	subi	r22, 0xFF	; 255
    1660:	7f 4f       	sbci	r23, 0xFF	; 255
    1662:	cb 01       	movw	r24, r22
    1664:	d1 da       	rcall	.-2654   	; 0xc08 <uECC_vli_modSquare_fast>
    1666:	96 01       	movw	r18, r12
    1668:	ae 01       	movw	r20, r28
    166a:	4f 5f       	subi	r20, 0xFF	; 255
    166c:	5f 4f       	sbci	r21, 0xFF	; 255
    166e:	b3 01       	movw	r22, r6
    1670:	c3 01       	movw	r24, r6
    1672:	9b da       	rcall	.-2762   	; 0xbaa <uECC_vli_modMult_fast>
    1674:	96 01       	movw	r18, r12
    1676:	ae 01       	movw	r20, r28
    1678:	4f 5f       	subi	r20, 0xFF	; 255
    167a:	5f 4f       	sbci	r21, 0xFF	; 255
    167c:	b7 01       	movw	r22, r14
    167e:	c7 01       	movw	r24, r14
    1680:	94 da       	rcall	.-2776   	; 0xbaa <uECC_vli_modMult_fast>
    1682:	94 01       	movw	r18, r8
    1684:	a2 01       	movw	r20, r4
    1686:	b5 01       	movw	r22, r10
    1688:	c5 01       	movw	r24, r10
    168a:	79 da       	rcall	.-2830   	; 0xb7e <uECC_vli_modSub>
    168c:	a6 01       	movw	r20, r12
    168e:	b5 01       	movw	r22, r10
    1690:	ce 01       	movw	r24, r28
    1692:	01 96       	adiw	r24, 0x01	; 1
    1694:	b9 da       	rcall	.-2702   	; 0xc08 <uECC_vli_modSquare_fast>
    1696:	94 01       	movw	r18, r8
    1698:	a3 01       	movw	r20, r6
    169a:	be 01       	movw	r22, r28
    169c:	6f 5f       	subi	r22, 0xFF	; 255
    169e:	7f 4f       	sbci	r23, 0xFF	; 255
    16a0:	cb 01       	movw	r24, r22
    16a2:	6d da       	rcall	.-2854   	; 0xb7e <uECC_vli_modSub>
    16a4:	94 01       	movw	r18, r8
    16a6:	a7 01       	movw	r20, r14
    16a8:	be 01       	movw	r22, r28
    16aa:	6f 5f       	subi	r22, 0xFF	; 255
    16ac:	7f 4f       	sbci	r23, 0xFF	; 255
    16ae:	cb 01       	movw	r24, r22
    16b0:	66 da       	rcall	.-2868   	; 0xb7e <uECC_vli_modSub>
    16b2:	94 01       	movw	r18, r8
    16b4:	a3 01       	movw	r20, r6
    16b6:	b7 01       	movw	r22, r14
    16b8:	c7 01       	movw	r24, r14
    16ba:	61 da       	rcall	.-2878   	; 0xb7e <uECC_vli_modSub>
    16bc:	96 01       	movw	r18, r12
    16be:	a7 01       	movw	r20, r14
    16c0:	b2 01       	movw	r22, r4
    16c2:	c2 01       	movw	r24, r4
    16c4:	72 da       	rcall	.-2844   	; 0xbaa <uECC_vli_modMult_fast>
    16c6:	94 01       	movw	r18, r8
    16c8:	ae 01       	movw	r20, r28
    16ca:	4f 5f       	subi	r20, 0xFF	; 255
    16cc:	5f 4f       	sbci	r21, 0xFF	; 255
    16ce:	b3 01       	movw	r22, r6
    16d0:	c7 01       	movw	r24, r14
    16d2:	55 da       	rcall	.-2902   	; 0xb7e <uECC_vli_modSub>
    16d4:	96 01       	movw	r18, r12
    16d6:	a7 01       	movw	r20, r14
    16d8:	b5 01       	movw	r22, r10
    16da:	c5 01       	movw	r24, r10
    16dc:	66 da       	rcall	.-2868   	; 0xbaa <uECC_vli_modMult_fast>
    16de:	94 01       	movw	r18, r8
    16e0:	a2 01       	movw	r20, r4
    16e2:	b5 01       	movw	r22, r10
    16e4:	c5 01       	movw	r24, r10
    16e6:	4b da       	rcall	.-2922   	; 0xb7e <uECC_vli_modSub>
    16e8:	41 2f       	mov	r20, r17
    16ea:	be 01       	movw	r22, r28
    16ec:	6f 5f       	subi	r22, 0xFF	; 255
    16ee:	7f 4f       	sbci	r23, 0xFF	; 255
    16f0:	c7 01       	movw	r24, r14
    16f2:	0e 94 44 02 	call	0x488	; 0x488 <uECC_vli_set>
    16f6:	a0 96       	adiw	r28, 0x20	; 32
    16f8:	0f b6       	in	r0, 0x3f	; 63
    16fa:	f8 94       	cli
    16fc:	de bf       	out	0x3e, r29	; 62
    16fe:	0f be       	out	0x3f, r0	; 63
    1700:	cd bf       	out	0x3d, r28	; 61
    1702:	df 91       	pop	r29
    1704:	cf 91       	pop	r28
    1706:	1f 91       	pop	r17
    1708:	0f 91       	pop	r16
    170a:	ff 90       	pop	r15
    170c:	ef 90       	pop	r14
    170e:	df 90       	pop	r13
    1710:	cf 90       	pop	r12
    1712:	bf 90       	pop	r11
    1714:	af 90       	pop	r10
    1716:	9f 90       	pop	r9
    1718:	8f 90       	pop	r8
    171a:	7f 90       	pop	r7
    171c:	6f 90       	pop	r6
    171e:	5f 90       	pop	r5
    1720:	4f 90       	pop	r4
    1722:	08 95       	ret

00001724 <XYcZ_addC>:
    1724:	4f 92       	push	r4
    1726:	5f 92       	push	r5
    1728:	6f 92       	push	r6
    172a:	7f 92       	push	r7
    172c:	8f 92       	push	r8
    172e:	9f 92       	push	r9
    1730:	af 92       	push	r10
    1732:	bf 92       	push	r11
    1734:	cf 92       	push	r12
    1736:	df 92       	push	r13
    1738:	ef 92       	push	r14
    173a:	ff 92       	push	r15
    173c:	0f 93       	push	r16
    173e:	1f 93       	push	r17
    1740:	cf 93       	push	r28
    1742:	df 93       	push	r29
    1744:	cd b7       	in	r28, 0x3d	; 61
    1746:	de b7       	in	r29, 0x3e	; 62
    1748:	c0 56       	subi	r28, 0x60	; 96
    174a:	d1 09       	sbc	r29, r1
    174c:	0f b6       	in	r0, 0x3f	; 63
    174e:	f8 94       	cli
    1750:	de bf       	out	0x3e, r29	; 62
    1752:	0f be       	out	0x3f, r0	; 63
    1754:	cd bf       	out	0x3d, r28	; 61
    1756:	4c 01       	movw	r8, r24
    1758:	2b 01       	movw	r4, r22
    175a:	5a 01       	movw	r10, r20
    175c:	39 01       	movw	r6, r18
    175e:	68 01       	movw	r12, r16
    1760:	f8 01       	movw	r30, r16
    1762:	10 81       	ld	r17, Z
    1764:	76 01       	movw	r14, r12
    1766:	f4 e0       	ldi	r31, 0x04	; 4
    1768:	ef 0e       	add	r14, r31
    176a:	f1 1c       	adc	r15, r1
    176c:	01 2f       	mov	r16, r17
    176e:	97 01       	movw	r18, r14
    1770:	ac 01       	movw	r20, r24
    1772:	b5 01       	movw	r22, r10
    1774:	ce 01       	movw	r24, r28
    1776:	01 96       	adiw	r24, 0x01	; 1
    1778:	02 da       	rcall	.-3068   	; 0xb7e <uECC_vli_modSub>
    177a:	a6 01       	movw	r20, r12
    177c:	be 01       	movw	r22, r28
    177e:	6f 5f       	subi	r22, 0xFF	; 255
    1780:	7f 4f       	sbci	r23, 0xFF	; 255
    1782:	cb 01       	movw	r24, r22
    1784:	41 da       	rcall	.-2942   	; 0xc08 <uECC_vli_modSquare_fast>
    1786:	96 01       	movw	r18, r12
    1788:	ae 01       	movw	r20, r28
    178a:	4f 5f       	subi	r20, 0xFF	; 255
    178c:	5f 4f       	sbci	r21, 0xFF	; 255
    178e:	b4 01       	movw	r22, r8
    1790:	c4 01       	movw	r24, r8
    1792:	0b da       	rcall	.-3050   	; 0xbaa <uECC_vli_modMult_fast>
    1794:	96 01       	movw	r18, r12
    1796:	ae 01       	movw	r20, r28
    1798:	4f 5f       	subi	r20, 0xFF	; 255
    179a:	5f 4f       	sbci	r21, 0xFF	; 255
    179c:	b5 01       	movw	r22, r10
    179e:	c5 01       	movw	r24, r10
    17a0:	04 da       	rcall	.-3064   	; 0xbaa <uECC_vli_modMult_fast>
    17a2:	97 01       	movw	r18, r14
    17a4:	a2 01       	movw	r20, r4
    17a6:	b3 01       	movw	r22, r6
    17a8:	ce 01       	movw	r24, r28
    17aa:	01 96       	adiw	r24, 0x01	; 1
    17ac:	cc d9       	rcall	.-3176   	; 0xb46 <uECC_vli_modAdd>
    17ae:	97 01       	movw	r18, r14
    17b0:	a2 01       	movw	r20, r4
    17b2:	b3 01       	movw	r22, r6
    17b4:	c3 01       	movw	r24, r6
    17b6:	e3 d9       	rcall	.-3130   	; 0xb7e <uECC_vli_modSub>
    17b8:	97 01       	movw	r18, r14
    17ba:	a4 01       	movw	r20, r8
    17bc:	b5 01       	movw	r22, r10
    17be:	ce 01       	movw	r24, r28
    17c0:	81 96       	adiw	r24, 0x21	; 33
    17c2:	dd d9       	rcall	.-3142   	; 0xb7e <uECC_vli_modSub>
    17c4:	96 01       	movw	r18, r12
    17c6:	ae 01       	movw	r20, r28
    17c8:	4f 5d       	subi	r20, 0xDF	; 223
    17ca:	5f 4f       	sbci	r21, 0xFF	; 255
    17cc:	b2 01       	movw	r22, r4
    17ce:	c2 01       	movw	r24, r4
    17d0:	ec d9       	rcall	.-3112   	; 0xbaa <uECC_vli_modMult_fast>
    17d2:	97 01       	movw	r18, r14
    17d4:	a5 01       	movw	r20, r10
    17d6:	b4 01       	movw	r22, r8
    17d8:	ce 01       	movw	r24, r28
    17da:	81 96       	adiw	r24, 0x21	; 33
    17dc:	b4 d9       	rcall	.-3224   	; 0xb46 <uECC_vli_modAdd>
    17de:	a6 01       	movw	r20, r12
    17e0:	b3 01       	movw	r22, r6
    17e2:	c5 01       	movw	r24, r10
    17e4:	11 da       	rcall	.-3038   	; 0xc08 <uECC_vli_modSquare_fast>
    17e6:	97 01       	movw	r18, r14
    17e8:	ae 01       	movw	r20, r28
    17ea:	4f 5d       	subi	r20, 0xDF	; 223
    17ec:	5f 4f       	sbci	r21, 0xFF	; 255
    17ee:	b5 01       	movw	r22, r10
    17f0:	c5 01       	movw	r24, r10
    17f2:	c5 d9       	rcall	.-3190   	; 0xb7e <uECC_vli_modSub>
    17f4:	97 01       	movw	r18, r14
    17f6:	a5 01       	movw	r20, r10
    17f8:	b4 01       	movw	r22, r8
    17fa:	ce 01       	movw	r24, r28
    17fc:	8f 5b       	subi	r24, 0xBF	; 191
    17fe:	9f 4f       	sbci	r25, 0xFF	; 255
    1800:	be d9       	rcall	.-3204   	; 0xb7e <uECC_vli_modSub>
    1802:	96 01       	movw	r18, r12
    1804:	ae 01       	movw	r20, r28
    1806:	4f 5b       	subi	r20, 0xBF	; 191
    1808:	5f 4f       	sbci	r21, 0xFF	; 255
    180a:	b3 01       	movw	r22, r6
    180c:	c3 01       	movw	r24, r6
    180e:	cd d9       	rcall	.-3174   	; 0xbaa <uECC_vli_modMult_fast>
    1810:	97 01       	movw	r18, r14
    1812:	a2 01       	movw	r20, r4
    1814:	b3 01       	movw	r22, r6
    1816:	c3 01       	movw	r24, r6
    1818:	b2 d9       	rcall	.-3228   	; 0xb7e <uECC_vli_modSub>
    181a:	a6 01       	movw	r20, r12
    181c:	be 01       	movw	r22, r28
    181e:	6f 5f       	subi	r22, 0xFF	; 255
    1820:	7f 4f       	sbci	r23, 0xFF	; 255
    1822:	ce 01       	movw	r24, r28
    1824:	8f 5b       	subi	r24, 0xBF	; 191
    1826:	9f 4f       	sbci	r25, 0xFF	; 255
    1828:	ef d9       	rcall	.-3106   	; 0xc08 <uECC_vli_modSquare_fast>
    182a:	97 01       	movw	r18, r14
    182c:	ae 01       	movw	r20, r28
    182e:	4f 5d       	subi	r20, 0xDF	; 223
    1830:	5f 4f       	sbci	r21, 0xFF	; 255
    1832:	be 01       	movw	r22, r28
    1834:	6f 5b       	subi	r22, 0xBF	; 191
    1836:	7f 4f       	sbci	r23, 0xFF	; 255
    1838:	cb 01       	movw	r24, r22
    183a:	a1 d9       	rcall	.-3262   	; 0xb7e <uECC_vli_modSub>
    183c:	97 01       	movw	r18, r14
    183e:	a4 01       	movw	r20, r8
    1840:	be 01       	movw	r22, r28
    1842:	6f 5b       	subi	r22, 0xBF	; 191
    1844:	7f 4f       	sbci	r23, 0xFF	; 255
    1846:	ce 01       	movw	r24, r28
    1848:	81 96       	adiw	r24, 0x21	; 33
    184a:	99 d9       	rcall	.-3278   	; 0xb7e <uECC_vli_modSub>
    184c:	96 01       	movw	r18, r12
    184e:	ae 01       	movw	r20, r28
    1850:	4f 5f       	subi	r20, 0xFF	; 255
    1852:	5f 4f       	sbci	r21, 0xFF	; 255
    1854:	be 01       	movw	r22, r28
    1856:	6f 5d       	subi	r22, 0xDF	; 223
    1858:	7f 4f       	sbci	r23, 0xFF	; 255
    185a:	cb 01       	movw	r24, r22
    185c:	a6 d9       	rcall	.-3252   	; 0xbaa <uECC_vli_modMult_fast>
    185e:	97 01       	movw	r18, r14
    1860:	a2 01       	movw	r20, r4
    1862:	be 01       	movw	r22, r28
    1864:	6f 5d       	subi	r22, 0xDF	; 223
    1866:	7f 4f       	sbci	r23, 0xFF	; 255
    1868:	c2 01       	movw	r24, r4
    186a:	89 d9       	rcall	.-3310   	; 0xb7e <uECC_vli_modSub>
    186c:	41 2f       	mov	r20, r17
    186e:	be 01       	movw	r22, r28
    1870:	6f 5b       	subi	r22, 0xBF	; 191
    1872:	7f 4f       	sbci	r23, 0xFF	; 255
    1874:	c4 01       	movw	r24, r8
    1876:	0e 94 44 02 	call	0x488	; 0x488 <uECC_vli_set>
    187a:	c0 5a       	subi	r28, 0xA0	; 160
    187c:	df 4f       	sbci	r29, 0xFF	; 255
    187e:	0f b6       	in	r0, 0x3f	; 63
    1880:	f8 94       	cli
    1882:	de bf       	out	0x3e, r29	; 62
    1884:	0f be       	out	0x3f, r0	; 63
    1886:	cd bf       	out	0x3d, r28	; 61
    1888:	df 91       	pop	r29
    188a:	cf 91       	pop	r28
    188c:	1f 91       	pop	r17
    188e:	0f 91       	pop	r16
    1890:	ff 90       	pop	r15
    1892:	ef 90       	pop	r14
    1894:	df 90       	pop	r13
    1896:	cf 90       	pop	r12
    1898:	bf 90       	pop	r11
    189a:	af 90       	pop	r10
    189c:	9f 90       	pop	r9
    189e:	8f 90       	pop	r8
    18a0:	7f 90       	pop	r7
    18a2:	6f 90       	pop	r6
    18a4:	5f 90       	pop	r5
    18a6:	4f 90       	pop	r4
    18a8:	08 95       	ret

000018aa <EccPoint_mult>:
    18aa:	2f 92       	push	r2
    18ac:	3f 92       	push	r3
    18ae:	4f 92       	push	r4
    18b0:	5f 92       	push	r5
    18b2:	6f 92       	push	r6
    18b4:	7f 92       	push	r7
    18b6:	8f 92       	push	r8
    18b8:	9f 92       	push	r9
    18ba:	af 92       	push	r10
    18bc:	bf 92       	push	r11
    18be:	cf 92       	push	r12
    18c0:	df 92       	push	r13
    18c2:	ef 92       	push	r14
    18c4:	ff 92       	push	r15
    18c6:	0f 93       	push	r16
    18c8:	1f 93       	push	r17
    18ca:	cf 93       	push	r28
    18cc:	df 93       	push	r29
    18ce:	cd b7       	in	r28, 0x3d	; 61
    18d0:	de b7       	in	r29, 0x3e	; 62
    18d2:	cb 5c       	subi	r28, 0xCB	; 203
    18d4:	d1 09       	sbc	r29, r1
    18d6:	0f b6       	in	r0, 0x3f	; 63
    18d8:	f8 94       	cli
    18da:	de bf       	out	0x3e, r29	; 62
    18dc:	0f be       	out	0x3f, r0	; 63
    18de:	cd bf       	out	0x3d, r28	; 61
    18e0:	c6 53       	subi	r28, 0x36	; 54
    18e2:	df 4f       	sbci	r29, 0xFF	; 255
    18e4:	99 83       	std	Y+1, r25	; 0x01
    18e6:	88 83       	st	Y, r24
    18e8:	ca 5c       	subi	r28, 0xCA	; 202
    18ea:	d0 40       	sbci	r29, 0x00	; 0
    18ec:	cc 53       	subi	r28, 0x3C	; 60
    18ee:	df 4f       	sbci	r29, 0xFF	; 255
    18f0:	79 83       	std	Y+1, r23	; 0x01
    18f2:	68 83       	st	Y, r22
    18f4:	c4 5c       	subi	r28, 0xC4	; 196
    18f6:	d0 40       	sbci	r29, 0x00	; 0
    18f8:	cf 53       	subi	r28, 0x3F	; 63
    18fa:	df 4f       	sbci	r29, 0xFF	; 255
    18fc:	59 83       	std	Y+1, r21	; 0x01
    18fe:	48 83       	st	Y, r20
    1900:	c1 5c       	subi	r28, 0xC1	; 193
    1902:	d0 40       	sbci	r29, 0x00	; 0
    1904:	69 01       	movw	r12, r18
    1906:	17 01       	movw	r2, r14
    1908:	f7 01       	movw	r30, r14
    190a:	f0 81       	ld	r31, Z
    190c:	cd 53       	subi	r28, 0x3D	; 61
    190e:	df 4f       	sbci	r29, 0xFF	; 255
    1910:	f8 83       	st	Y, r31
    1912:	c3 5c       	subi	r28, 0xC3	; 195
    1914:	d0 40       	sbci	r29, 0x00	; 0
    1916:	4f 2f       	mov	r20, r31
    1918:	ce 01       	movw	r24, r28
    191a:	81 96       	adiw	r24, 0x21	; 33
    191c:	0e 94 44 02 	call	0x488	; 0x488 <uECC_vli_set>
    1920:	cd 53       	subi	r28, 0x3D	; 61
    1922:	df 4f       	sbci	r29, 0xFF	; 255
    1924:	28 81       	ld	r18, Y
    1926:	c3 5c       	subi	r28, 0xC3	; 195
    1928:	d0 40       	sbci	r29, 0x00	; 0
    192a:	02 2e       	mov	r0, r18
    192c:	00 0c       	add	r0, r0
    192e:	33 0b       	sbc	r19, r19
    1930:	ca 53       	subi	r28, 0x3A	; 58
    1932:	df 4f       	sbci	r29, 0xFF	; 255
    1934:	39 83       	std	Y+1, r19	; 0x01
    1936:	28 83       	st	Y, r18
    1938:	c6 5c       	subi	r28, 0xC6	; 198
    193a:	d0 40       	sbci	r29, 0x00	; 0
    193c:	cc 53       	subi	r28, 0x3C	; 60
    193e:	df 4f       	sbci	r29, 0xFF	; 255
    1940:	88 81       	ld	r24, Y
    1942:	99 81       	ldd	r25, Y+1	; 0x01
    1944:	c4 5c       	subi	r28, 0xC4	; 196
    1946:	d0 40       	sbci	r29, 0x00	; 0
    1948:	82 0f       	add	r24, r18
    194a:	93 1f       	adc	r25, r19
    194c:	c8 53       	subi	r28, 0x38	; 56
    194e:	df 4f       	sbci	r29, 0xFF	; 255
    1950:	99 83       	std	Y+1, r25	; 0x01
    1952:	88 83       	st	Y, r24
    1954:	c8 5c       	subi	r28, 0xC8	; 200
    1956:	d0 40       	sbci	r29, 0x00	; 0
    1958:	cd 53       	subi	r28, 0x3D	; 61
    195a:	df 4f       	sbci	r29, 0xFF	; 255
    195c:	48 81       	ld	r20, Y
    195e:	c3 5c       	subi	r28, 0xC3	; 195
    1960:	d0 40       	sbci	r29, 0x00	; 0
    1962:	bc 01       	movw	r22, r24
    1964:	ce 01       	movw	r24, r28
    1966:	8f 59       	subi	r24, 0x9F	; 159
    1968:	9f 4f       	sbci	r25, 0xFF	; 255
    196a:	0e 94 44 02 	call	0x488	; 0x488 <uECC_vli_set>
    196e:	f7 01       	movw	r30, r14
    1970:	b0 80       	ld	r11, Z
    1972:	c1 14       	cp	r12, r1
    1974:	d1 04       	cpc	r13, r1
    1976:	41 f0       	breq	.+16     	; 0x1988 <EccPoint_mult+0xde>
    1978:	4b 2d       	mov	r20, r11
    197a:	b6 01       	movw	r22, r12
    197c:	ce 01       	movw	r24, r28
    197e:	8f 55       	subi	r24, 0x5F	; 95
    1980:	9f 4f       	sbci	r25, 0xFF	; 255
    1982:	0e 94 44 02 	call	0x488	; 0x488 <uECC_vli_set>
    1986:	0c c0       	rjmp	.+24     	; 0x19a0 <EccPoint_mult+0xf6>
    1988:	6b 2d       	mov	r22, r11
    198a:	ce 01       	movw	r24, r28
    198c:	8f 55       	subi	r24, 0x5F	; 95
    198e:	9f 4f       	sbci	r25, 0xFF	; 255
    1990:	0e 94 1d 02 	call	0x43a	; 0x43a <uECC_vli_clear>
    1994:	81 e0       	ldi	r24, 0x01	; 1
    1996:	cf 55       	subi	r28, 0x5F	; 95
    1998:	df 4f       	sbci	r29, 0xFF	; 255
    199a:	88 83       	st	Y, r24
    199c:	c1 5a       	subi	r28, 0xA1	; 161
    199e:	d0 40       	sbci	r29, 0x00	; 0
    19a0:	4b 2d       	mov	r20, r11
    19a2:	be 01       	movw	r22, r28
    19a4:	6f 5d       	subi	r22, 0xDF	; 223
    19a6:	7f 4f       	sbci	r23, 0xFF	; 255
    19a8:	ce 01       	movw	r24, r28
    19aa:	01 96       	adiw	r24, 0x01	; 1
    19ac:	0e 94 44 02 	call	0x488	; 0x488 <uECC_vli_set>
    19b0:	0f 2e       	mov	r0, r31
    19b2:	f1 e4       	ldi	r31, 0x41	; 65
    19b4:	ef 2e       	mov	r14, r31
    19b6:	f1 2c       	mov	r15, r1
    19b8:	f0 2d       	mov	r31, r0
    19ba:	ec 0e       	add	r14, r28
    19bc:	fd 1e       	adc	r15, r29
    19be:	f0 e2       	ldi	r31, 0x20	; 32
    19c0:	ef 0e       	add	r14, r31
    19c2:	f1 1c       	adc	r15, r1
    19c4:	4b 2d       	mov	r20, r11
    19c6:	b7 01       	movw	r22, r14
    19c8:	ce 01       	movw	r24, r28
    19ca:	8f 5b       	subi	r24, 0xBF	; 191
    19cc:	9f 4f       	sbci	r25, 0xFF	; 255
    19ce:	0e 94 44 02 	call	0x488	; 0x488 <uECC_vli_set>
    19d2:	91 01       	movw	r18, r2
    19d4:	ae 01       	movw	r20, r28
    19d6:	4f 55       	subi	r20, 0x5F	; 95
    19d8:	5f 4f       	sbci	r21, 0xFF	; 255
    19da:	b7 01       	movw	r22, r14
    19dc:	ce 01       	movw	r24, r28
    19de:	81 96       	adiw	r24, 0x21	; 33
    19e0:	d1 dd       	rcall	.-1118   	; 0x1584 <apply_z>
    19e2:	f1 01       	movw	r30, r2
    19e4:	ec 55       	subi	r30, 0x5C	; 92
    19e6:	ff 4f       	sbci	r31, 0xFF	; 255
    19e8:	01 90       	ld	r0, Z+
    19ea:	f0 81       	ld	r31, Z
    19ec:	e0 2d       	mov	r30, r0
    19ee:	91 01       	movw	r18, r2
    19f0:	ae 01       	movw	r20, r28
    19f2:	4f 55       	subi	r20, 0x5F	; 95
    19f4:	5f 4f       	sbci	r21, 0xFF	; 255
    19f6:	b7 01       	movw	r22, r14
    19f8:	ce 01       	movw	r24, r28
    19fa:	81 96       	adiw	r24, 0x21	; 33
    19fc:	09 95       	icall
    19fe:	91 01       	movw	r18, r2
    1a00:	ae 01       	movw	r20, r28
    1a02:	4f 55       	subi	r20, 0x5F	; 95
    1a04:	5f 4f       	sbci	r21, 0xFF	; 255
    1a06:	be 01       	movw	r22, r28
    1a08:	6f 5b       	subi	r22, 0xBF	; 191
    1a0a:	7f 4f       	sbci	r23, 0xFF	; 255
    1a0c:	ce 01       	movw	r24, r28
    1a0e:	01 96       	adiw	r24, 0x01	; 1
    1a10:	b9 dd       	rcall	.-1166   	; 0x1584 <apply_z>
    1a12:	58 01       	movw	r10, r16
    1a14:	22 e0       	ldi	r18, 0x02	; 2
    1a16:	a2 1a       	sub	r10, r18
    1a18:	b1 08       	sbc	r11, r1
    1a1a:	1a 14       	cp	r1, r10
    1a1c:	1b 04       	cpc	r1, r11
    1a1e:	0c f0       	brlt	.+2      	; 0x1a22 <EccPoint_mult+0x178>
    1a20:	53 c0       	rjmp	.+166    	; 0x1ac8 <EccPoint_mult+0x21e>
    1a22:	44 24       	eor	r4, r4
    1a24:	43 94       	inc	r4
    1a26:	51 2c       	mov	r5, r1
    1a28:	b5 01       	movw	r22, r10
    1a2a:	cf 53       	subi	r28, 0x3F	; 63
    1a2c:	df 4f       	sbci	r29, 0xFF	; 255
    1a2e:	88 81       	ld	r24, Y
    1a30:	99 81       	ldd	r25, Y+1	; 0x01
    1a32:	c1 5c       	subi	r28, 0xC1	; 193
    1a34:	d0 40       	sbci	r29, 0x00	; 0
    1a36:	0e 94 f7 04 	call	0x9ee	; 0x9ee <uECC_vli_testBit>
    1a3a:	92 01       	movw	r18, r4
    1a3c:	88 23       	and	r24, r24
    1a3e:	11 f0       	breq	.+4      	; 0x1a44 <EccPoint_mult+0x19a>
    1a40:	20 e0       	ldi	r18, 0x00	; 0
    1a42:	30 e0       	ldi	r19, 0x00	; 0
    1a44:	39 01       	movw	r6, r18
    1a46:	66 0c       	add	r6, r6
    1a48:	77 1c       	adc	r7, r7
    1a4a:	66 0c       	add	r6, r6
    1a4c:	77 1c       	adc	r7, r7
    1a4e:	66 0c       	add	r6, r6
    1a50:	77 1c       	adc	r7, r7
    1a52:	66 0c       	add	r6, r6
    1a54:	77 1c       	adc	r7, r7
    1a56:	66 0c       	add	r6, r6
    1a58:	77 1c       	adc	r7, r7
    1a5a:	0f 2e       	mov	r0, r31
    1a5c:	f1 e4       	ldi	r31, 0x41	; 65
    1a5e:	cf 2e       	mov	r12, r31
    1a60:	d1 2c       	mov	r13, r1
    1a62:	f0 2d       	mov	r31, r0
    1a64:	cc 0e       	add	r12, r28
    1a66:	dd 1e       	adc	r13, r29
    1a68:	c6 0c       	add	r12, r6
    1a6a:	d7 1c       	adc	r13, r7
    1a6c:	81 e0       	ldi	r24, 0x01	; 1
    1a6e:	90 e0       	ldi	r25, 0x00	; 0
    1a70:	8c 0f       	add	r24, r28
    1a72:	9d 1f       	adc	r25, r29
    1a74:	68 0e       	add	r6, r24
    1a76:	79 1e       	adc	r7, r25
    1a78:	72 01       	movw	r14, r4
    1a7a:	e2 1a       	sub	r14, r18
    1a7c:	f3 0a       	sbc	r15, r19
    1a7e:	ee 0c       	add	r14, r14
    1a80:	ff 1c       	adc	r15, r15
    1a82:	ee 0c       	add	r14, r14
    1a84:	ff 1c       	adc	r15, r15
    1a86:	ee 0c       	add	r14, r14
    1a88:	ff 1c       	adc	r15, r15
    1a8a:	ee 0c       	add	r14, r14
    1a8c:	ff 1c       	adc	r15, r15
    1a8e:	ee 0c       	add	r14, r14
    1a90:	ff 1c       	adc	r15, r15
    1a92:	0f 2e       	mov	r0, r31
    1a94:	f1 e4       	ldi	r31, 0x41	; 65
    1a96:	8f 2e       	mov	r8, r31
    1a98:	91 2c       	mov	r9, r1
    1a9a:	f0 2d       	mov	r31, r0
    1a9c:	8c 0e       	add	r8, r28
    1a9e:	9d 1e       	adc	r9, r29
    1aa0:	8e 0c       	add	r8, r14
    1aa2:	9f 1c       	adc	r9, r15
    1aa4:	e8 0e       	add	r14, r24
    1aa6:	f9 1e       	adc	r15, r25
    1aa8:	81 01       	movw	r16, r2
    1aaa:	96 01       	movw	r18, r12
    1aac:	a3 01       	movw	r20, r6
    1aae:	b4 01       	movw	r22, r8
    1ab0:	c7 01       	movw	r24, r14
    1ab2:	38 de       	rcall	.-912    	; 0x1724 <XYcZ_addC>
    1ab4:	94 01       	movw	r18, r8
    1ab6:	a7 01       	movw	r20, r14
    1ab8:	b6 01       	movw	r22, r12
    1aba:	c3 01       	movw	r24, r6
    1abc:	a4 dd       	rcall	.-1208   	; 0x1606 <XYcZ_add>
    1abe:	91 e0       	ldi	r25, 0x01	; 1
    1ac0:	a9 1a       	sub	r10, r25
    1ac2:	b1 08       	sbc	r11, r1
    1ac4:	09 f0       	breq	.+2      	; 0x1ac8 <EccPoint_mult+0x21e>
    1ac6:	b0 cf       	rjmp	.-160    	; 0x1a28 <EccPoint_mult+0x17e>
    1ac8:	60 e0       	ldi	r22, 0x00	; 0
    1aca:	70 e0       	ldi	r23, 0x00	; 0
    1acc:	cf 53       	subi	r28, 0x3F	; 63
    1ace:	df 4f       	sbci	r29, 0xFF	; 255
    1ad0:	88 81       	ld	r24, Y
    1ad2:	99 81       	ldd	r25, Y+1	; 0x01
    1ad4:	c1 5c       	subi	r28, 0xC1	; 193
    1ad6:	d0 40       	sbci	r29, 0x00	; 0
    1ad8:	0e 94 f7 04 	call	0x9ee	; 0x9ee <uECC_vli_testBit>
    1adc:	21 e0       	ldi	r18, 0x01	; 1
    1ade:	30 e0       	ldi	r19, 0x00	; 0
    1ae0:	88 23       	and	r24, r24
    1ae2:	11 f0       	breq	.+4      	; 0x1ae8 <EccPoint_mult+0x23e>
    1ae4:	20 e0       	ldi	r18, 0x00	; 0
    1ae6:	30 e0       	ldi	r19, 0x00	; 0
    1ae8:	69 01       	movw	r12, r18
    1aea:	cc 0c       	add	r12, r12
    1aec:	dd 1c       	adc	r13, r13
    1aee:	cc 0c       	add	r12, r12
    1af0:	dd 1c       	adc	r13, r13
    1af2:	cc 0c       	add	r12, r12
    1af4:	dd 1c       	adc	r13, r13
    1af6:	cc 0c       	add	r12, r12
    1af8:	dd 1c       	adc	r13, r13
    1afa:	cc 0c       	add	r12, r12
    1afc:	dd 1c       	adc	r13, r13
    1afe:	0f 2e       	mov	r0, r31
    1b00:	f1 e4       	ldi	r31, 0x41	; 65
    1b02:	8f 2e       	mov	r8, r31
    1b04:	91 2c       	mov	r9, r1
    1b06:	f0 2d       	mov	r31, r0
    1b08:	8c 0e       	add	r8, r28
    1b0a:	9d 1e       	adc	r9, r29
    1b0c:	8c 0c       	add	r8, r12
    1b0e:	9d 1c       	adc	r9, r13
    1b10:	e1 e0       	ldi	r30, 0x01	; 1
    1b12:	f0 e0       	ldi	r31, 0x00	; 0
    1b14:	ec 0f       	add	r30, r28
    1b16:	fd 1f       	adc	r31, r29
    1b18:	ce 0e       	add	r12, r30
    1b1a:	df 1e       	adc	r13, r31
    1b1c:	81 e0       	ldi	r24, 0x01	; 1
    1b1e:	90 e0       	ldi	r25, 0x00	; 0
    1b20:	7c 01       	movw	r14, r24
    1b22:	e2 1a       	sub	r14, r18
    1b24:	f3 0a       	sbc	r15, r19
    1b26:	ee 0c       	add	r14, r14
    1b28:	ff 1c       	adc	r15, r15
    1b2a:	ee 0c       	add	r14, r14
    1b2c:	ff 1c       	adc	r15, r15
    1b2e:	ee 0c       	add	r14, r14
    1b30:	ff 1c       	adc	r15, r15
    1b32:	ee 0c       	add	r14, r14
    1b34:	ff 1c       	adc	r15, r15
    1b36:	ee 0c       	add	r14, r14
    1b38:	ff 1c       	adc	r15, r15
    1b3a:	0f 2e       	mov	r0, r31
    1b3c:	f1 e4       	ldi	r31, 0x41	; 65
    1b3e:	af 2e       	mov	r10, r31
    1b40:	b1 2c       	mov	r11, r1
    1b42:	f0 2d       	mov	r31, r0
    1b44:	ac 0e       	add	r10, r28
    1b46:	bd 1e       	adc	r11, r29
    1b48:	ae 0c       	add	r10, r14
    1b4a:	bf 1c       	adc	r11, r15
    1b4c:	ee 0e       	add	r14, r30
    1b4e:	ff 1e       	adc	r15, r31
    1b50:	81 01       	movw	r16, r2
    1b52:	94 01       	movw	r18, r8
    1b54:	a6 01       	movw	r20, r12
    1b56:	b5 01       	movw	r22, r10
    1b58:	c7 01       	movw	r24, r14
    1b5a:	e4 dd       	rcall	.-1080   	; 0x1724 <XYcZ_addC>
    1b5c:	31 01       	movw	r6, r2
    1b5e:	f4 e0       	ldi	r31, 0x04	; 4
    1b60:	6f 0e       	add	r6, r31
    1b62:	71 1c       	adc	r7, r1
    1b64:	cd 53       	subi	r28, 0x3D	; 61
    1b66:	df 4f       	sbci	r29, 0xFF	; 255
    1b68:	08 81       	ld	r16, Y
    1b6a:	c3 5c       	subi	r28, 0xC3	; 195
    1b6c:	d0 40       	sbci	r29, 0x00	; 0
    1b6e:	93 01       	movw	r18, r6
    1b70:	ae 01       	movw	r20, r28
    1b72:	4f 5f       	subi	r20, 0xFF	; 255
    1b74:	5f 4f       	sbci	r21, 0xFF	; 255
    1b76:	be 01       	movw	r22, r28
    1b78:	6f 5d       	subi	r22, 0xDF	; 223
    1b7a:	7f 4f       	sbci	r23, 0xFF	; 255
    1b7c:	ce 01       	movw	r24, r28
    1b7e:	8f 57       	subi	r24, 0x7F	; 127
    1b80:	9f 4f       	sbci	r25, 0xFF	; 255
    1b82:	0e 94 bf 05 	call	0xb7e	; 0xb7e <uECC_vli_modSub>
    1b86:	91 01       	movw	r18, r2
    1b88:	a5 01       	movw	r20, r10
    1b8a:	be 01       	movw	r22, r28
    1b8c:	6f 57       	subi	r22, 0x7F	; 127
    1b8e:	7f 4f       	sbci	r23, 0xFF	; 255
    1b90:	cb 01       	movw	r24, r22
    1b92:	0b d8       	rcall	.-4074   	; 0xbaa <uECC_vli_modMult_fast>
    1b94:	91 01       	movw	r18, r2
    1b96:	cc 53       	subi	r28, 0x3C	; 60
    1b98:	df 4f       	sbci	r29, 0xFF	; 255
    1b9a:	48 81       	ld	r20, Y
    1b9c:	59 81       	ldd	r21, Y+1	; 0x01
    1b9e:	c4 5c       	subi	r28, 0xC4	; 196
    1ba0:	d0 40       	sbci	r29, 0x00	; 0
    1ba2:	be 01       	movw	r22, r28
    1ba4:	6f 57       	subi	r22, 0x7F	; 127
    1ba6:	7f 4f       	sbci	r23, 0xFF	; 255
    1ba8:	cb 01       	movw	r24, r22
    1baa:	0e 94 d5 05 	call	0xbaa	; 0xbaa <uECC_vli_modMult_fast>
    1bae:	cd 53       	subi	r28, 0x3D	; 61
    1bb0:	df 4f       	sbci	r29, 0xFF	; 255
    1bb2:	28 81       	ld	r18, Y
    1bb4:	c3 5c       	subi	r28, 0xC3	; 195
    1bb6:	d0 40       	sbci	r29, 0x00	; 0
    1bb8:	a3 01       	movw	r20, r6
    1bba:	be 01       	movw	r22, r28
    1bbc:	6f 57       	subi	r22, 0x7F	; 127
    1bbe:	7f 4f       	sbci	r23, 0xFF	; 255
    1bc0:	cb 01       	movw	r24, r22
    1bc2:	4d d8       	rcall	.-3942   	; 0xc5e <uECC_vli_modInv>
    1bc4:	91 01       	movw	r18, r2
    1bc6:	c8 53       	subi	r28, 0x38	; 56
    1bc8:	df 4f       	sbci	r29, 0xFF	; 255
    1bca:	48 81       	ld	r20, Y
    1bcc:	59 81       	ldd	r21, Y+1	; 0x01
    1bce:	c8 5c       	subi	r28, 0xC8	; 200
    1bd0:	d0 40       	sbci	r29, 0x00	; 0
    1bd2:	be 01       	movw	r22, r28
    1bd4:	6f 57       	subi	r22, 0x7F	; 127
    1bd6:	7f 4f       	sbci	r23, 0xFF	; 255
    1bd8:	cb 01       	movw	r24, r22
    1bda:	0e 94 d5 05 	call	0xbaa	; 0xbaa <uECC_vli_modMult_fast>
    1bde:	91 01       	movw	r18, r2
    1be0:	a7 01       	movw	r20, r14
    1be2:	be 01       	movw	r22, r28
    1be4:	6f 57       	subi	r22, 0x7F	; 127
    1be6:	7f 4f       	sbci	r23, 0xFF	; 255
    1be8:	cb 01       	movw	r24, r22
    1bea:	0e 94 d5 05 	call	0xbaa	; 0xbaa <uECC_vli_modMult_fast>
    1bee:	81 01       	movw	r16, r2
    1bf0:	95 01       	movw	r18, r10
    1bf2:	a7 01       	movw	r20, r14
    1bf4:	b4 01       	movw	r22, r8
    1bf6:	c6 01       	movw	r24, r12
    1bf8:	06 dd       	rcall	.-1524   	; 0x1606 <XYcZ_add>
    1bfa:	91 01       	movw	r18, r2
    1bfc:	ae 01       	movw	r20, r28
    1bfe:	4f 57       	subi	r20, 0x7F	; 127
    1c00:	5f 4f       	sbci	r21, 0xFF	; 255
    1c02:	be 01       	movw	r22, r28
    1c04:	6f 5b       	subi	r22, 0xBF	; 191
    1c06:	7f 4f       	sbci	r23, 0xFF	; 255
    1c08:	ce 01       	movw	r24, r28
    1c0a:	01 96       	adiw	r24, 0x01	; 1
    1c0c:	bb dc       	rcall	.-1674   	; 0x1584 <apply_z>
    1c0e:	cd 53       	subi	r28, 0x3D	; 61
    1c10:	df 4f       	sbci	r29, 0xFF	; 255
    1c12:	48 81       	ld	r20, Y
    1c14:	c3 5c       	subi	r28, 0xC3	; 195
    1c16:	d0 40       	sbci	r29, 0x00	; 0
    1c18:	be 01       	movw	r22, r28
    1c1a:	6f 5f       	subi	r22, 0xFF	; 255
    1c1c:	7f 4f       	sbci	r23, 0xFF	; 255
    1c1e:	c6 53       	subi	r28, 0x36	; 54
    1c20:	df 4f       	sbci	r29, 0xFF	; 255
    1c22:	88 81       	ld	r24, Y
    1c24:	99 81       	ldd	r25, Y+1	; 0x01
    1c26:	ca 5c       	subi	r28, 0xCA	; 202
    1c28:	d0 40       	sbci	r29, 0x00	; 0
    1c2a:	0e 94 44 02 	call	0x488	; 0x488 <uECC_vli_set>
    1c2e:	cd 53       	subi	r28, 0x3D	; 61
    1c30:	df 4f       	sbci	r29, 0xFF	; 255
    1c32:	48 81       	ld	r20, Y
    1c34:	c3 5c       	subi	r28, 0xC3	; 195
    1c36:	d0 40       	sbci	r29, 0x00	; 0
    1c38:	be 01       	movw	r22, r28
    1c3a:	6f 5b       	subi	r22, 0xBF	; 191
    1c3c:	7f 4f       	sbci	r23, 0xFF	; 255
    1c3e:	c6 53       	subi	r28, 0x36	; 54
    1c40:	df 4f       	sbci	r29, 0xFF	; 255
    1c42:	88 81       	ld	r24, Y
    1c44:	99 81       	ldd	r25, Y+1	; 0x01
    1c46:	ca 5c       	subi	r28, 0xCA	; 202
    1c48:	d0 40       	sbci	r29, 0x00	; 0
    1c4a:	ca 53       	subi	r28, 0x3A	; 58
    1c4c:	df 4f       	sbci	r29, 0xFF	; 255
    1c4e:	28 81       	ld	r18, Y
    1c50:	39 81       	ldd	r19, Y+1	; 0x01
    1c52:	c6 5c       	subi	r28, 0xC6	; 198
    1c54:	d0 40       	sbci	r29, 0x00	; 0
    1c56:	82 0f       	add	r24, r18
    1c58:	93 1f       	adc	r25, r19
    1c5a:	0e 94 44 02 	call	0x488	; 0x488 <uECC_vli_set>
    1c5e:	c5 53       	subi	r28, 0x35	; 53
    1c60:	df 4f       	sbci	r29, 0xFF	; 255
    1c62:	0f b6       	in	r0, 0x3f	; 63
    1c64:	f8 94       	cli
    1c66:	de bf       	out	0x3e, r29	; 62
    1c68:	0f be       	out	0x3f, r0	; 63
    1c6a:	cd bf       	out	0x3d, r28	; 61
    1c6c:	df 91       	pop	r29
    1c6e:	cf 91       	pop	r28
    1c70:	1f 91       	pop	r17
    1c72:	0f 91       	pop	r16
    1c74:	ff 90       	pop	r15
    1c76:	ef 90       	pop	r14
    1c78:	df 90       	pop	r13
    1c7a:	cf 90       	pop	r12
    1c7c:	bf 90       	pop	r11
    1c7e:	af 90       	pop	r10
    1c80:	9f 90       	pop	r9
    1c82:	8f 90       	pop	r8
    1c84:	7f 90       	pop	r7
    1c86:	6f 90       	pop	r6
    1c88:	5f 90       	pop	r5
    1c8a:	4f 90       	pop	r4
    1c8c:	3f 90       	pop	r3
    1c8e:	2f 90       	pop	r2
    1c90:	08 95       	ret

00001c92 <regularize_k>:
    1c92:	af 92       	push	r10
    1c94:	bf 92       	push	r11
    1c96:	cf 92       	push	r12
    1c98:	df 92       	push	r13
    1c9a:	ef 92       	push	r14
    1c9c:	ff 92       	push	r15
    1c9e:	0f 93       	push	r16
    1ca0:	1f 93       	push	r17
    1ca2:	cf 93       	push	r28
    1ca4:	df 93       	push	r29
    1ca6:	7b 01       	movw	r14, r22
    1ca8:	5a 01       	movw	r10, r20
    1caa:	f9 01       	movw	r30, r18
    1cac:	c2 80       	ldd	r12, Z+2	; 0x02
    1cae:	d3 80       	ldd	r13, Z+3	; 0x03
    1cb0:	a6 01       	movw	r20, r12
    1cb2:	49 5f       	subi	r20, 0xF9	; 249
    1cb4:	5f 4f       	sbci	r21, 0xFF	; 255
    1cb6:	ea 01       	movw	r28, r20
    1cb8:	dd 23       	and	r29, r29
    1cba:	0c f4       	brge	.+2      	; 0x1cbe <regularize_k+0x2c>
    1cbc:	27 96       	adiw	r28, 0x07	; 7
    1cbe:	d5 95       	asr	r29
    1cc0:	c7 95       	ror	r28
    1cc2:	d5 95       	asr	r29
    1cc4:	c7 95       	ror	r28
    1cc6:	d5 95       	asr	r29
    1cc8:	c7 95       	ror	r28
    1cca:	89 01       	movw	r16, r18
    1ccc:	0c 5d       	subi	r16, 0xDC	; 220
    1cce:	1f 4f       	sbci	r17, 0xFF	; 255
    1cd0:	2c 2f       	mov	r18, r28
    1cd2:	a8 01       	movw	r20, r16
    1cd4:	bc 01       	movw	r22, r24
    1cd6:	c7 01       	movw	r24, r14
    1cd8:	0e 94 03 03 	call	0x606	; 0x606 <uECC_vli_add>
    1cdc:	81 11       	cpse	r24, r1
    1cde:	11 c0       	rjmp	.+34     	; 0x1d02 <regularize_k+0x70>
    1ce0:	28 e0       	ldi	r18, 0x08	; 8
    1ce2:	c2 02       	muls	r28, r18
    1ce4:	c0 01       	movw	r24, r0
    1ce6:	11 24       	eor	r1, r1
    1ce8:	c8 16       	cp	r12, r24
    1cea:	d9 06       	cpc	r13, r25
    1cec:	6c f4       	brge	.+26     	; 0x1d08 <regularize_k+0x76>
    1cee:	b6 01       	movw	r22, r12
    1cf0:	c7 01       	movw	r24, r14
    1cf2:	0e 94 f7 04 	call	0x9ee	; 0x9ee <uECC_vli_testBit>
    1cf6:	91 e0       	ldi	r25, 0x01	; 1
    1cf8:	81 11       	cpse	r24, r1
    1cfa:	01 c0       	rjmp	.+2      	; 0x1cfe <regularize_k+0x6c>
    1cfc:	90 e0       	ldi	r25, 0x00	; 0
    1cfe:	d9 2e       	mov	r13, r25
    1d00:	04 c0       	rjmp	.+8      	; 0x1d0a <regularize_k+0x78>
    1d02:	dd 24       	eor	r13, r13
    1d04:	d3 94       	inc	r13
    1d06:	01 c0       	rjmp	.+2      	; 0x1d0a <regularize_k+0x78>
    1d08:	d1 2c       	mov	r13, r1
    1d0a:	2c 2f       	mov	r18, r28
    1d0c:	a8 01       	movw	r20, r16
    1d0e:	b7 01       	movw	r22, r14
    1d10:	c5 01       	movw	r24, r10
    1d12:	0e 94 03 03 	call	0x606	; 0x606 <uECC_vli_add>
    1d16:	8d 2d       	mov	r24, r13
    1d18:	df 91       	pop	r29
    1d1a:	cf 91       	pop	r28
    1d1c:	1f 91       	pop	r17
    1d1e:	0f 91       	pop	r16
    1d20:	ff 90       	pop	r15
    1d22:	ef 90       	pop	r14
    1d24:	df 90       	pop	r13
    1d26:	cf 90       	pop	r12
    1d28:	bf 90       	pop	r11
    1d2a:	af 90       	pop	r10
    1d2c:	08 95       	ret

00001d2e <EccPoint_compute_public_key>:
    1d2e:	af 92       	push	r10
    1d30:	bf 92       	push	r11
    1d32:	cf 92       	push	r12
    1d34:	df 92       	push	r13
    1d36:	ef 92       	push	r14
    1d38:	ff 92       	push	r15
    1d3a:	0f 93       	push	r16
    1d3c:	1f 93       	push	r17
    1d3e:	cf 93       	push	r28
    1d40:	df 93       	push	r29
    1d42:	cd b7       	in	r28, 0x3d	; 61
    1d44:	de b7       	in	r29, 0x3e	; 62
    1d46:	c4 54       	subi	r28, 0x44	; 68
    1d48:	d1 09       	sbc	r29, r1
    1d4a:	0f b6       	in	r0, 0x3f	; 63
    1d4c:	f8 94       	cli
    1d4e:	de bf       	out	0x3e, r29	; 62
    1d50:	0f be       	out	0x3f, r0	; 63
    1d52:	cd bf       	out	0x3d, r28	; 61
    1d54:	5c 01       	movw	r10, r24
    1d56:	cb 01       	movw	r24, r22
    1d58:	6a 01       	movw	r12, r20
    1d5a:	7e 01       	movw	r14, r28
    1d5c:	21 e4       	ldi	r18, 0x41	; 65
    1d5e:	e2 0e       	add	r14, r18
    1d60:	f1 1c       	adc	r15, r1
    1d62:	be 01       	movw	r22, r28
    1d64:	6f 5f       	subi	r22, 0xFF	; 255
    1d66:	7f 4f       	sbci	r23, 0xFF	; 255
    1d68:	f7 01       	movw	r30, r14
    1d6a:	71 83       	std	Z+1, r23	; 0x01
    1d6c:	60 83       	st	Z, r22
    1d6e:	ae 01       	movw	r20, r28
    1d70:	4f 5d       	subi	r20, 0xDF	; 223
    1d72:	5f 4f       	sbci	r21, 0xFF	; 255
    1d74:	53 83       	std	Z+3, r21	; 0x03
    1d76:	42 83       	std	Z+2, r20	; 0x02
    1d78:	96 01       	movw	r18, r12
    1d7a:	8b df       	rcall	.-234    	; 0x1c92 <regularize_k>
    1d7c:	f6 01       	movw	r30, r12
    1d7e:	02 81       	ldd	r16, Z+2	; 0x02
    1d80:	13 81       	ldd	r17, Z+3	; 0x03
    1d82:	0f 5f       	subi	r16, 0xFF	; 255
    1d84:	1f 4f       	sbci	r17, 0xFF	; 255
    1d86:	f7 01       	movw	r30, r14
    1d88:	21 e0       	ldi	r18, 0x01	; 1
    1d8a:	30 e0       	ldi	r19, 0x00	; 0
    1d8c:	88 23       	and	r24, r24
    1d8e:	11 f0       	breq	.+4      	; 0x1d94 <EccPoint_compute_public_key+0x66>
    1d90:	20 e0       	ldi	r18, 0x00	; 0
    1d92:	30 e0       	ldi	r19, 0x00	; 0
    1d94:	22 0f       	add	r18, r18
    1d96:	33 1f       	adc	r19, r19
    1d98:	e2 0f       	add	r30, r18
    1d9a:	f3 1f       	adc	r31, r19
    1d9c:	40 81       	ld	r20, Z
    1d9e:	51 81       	ldd	r21, Z+1	; 0x01
    1da0:	b6 01       	movw	r22, r12
    1da2:	6c 5b       	subi	r22, 0xBC	; 188
    1da4:	7f 4f       	sbci	r23, 0xFF	; 255
    1da6:	76 01       	movw	r14, r12
    1da8:	20 e0       	ldi	r18, 0x00	; 0
    1daa:	30 e0       	ldi	r19, 0x00	; 0
    1dac:	c5 01       	movw	r24, r10
    1dae:	7d dd       	rcall	.-1286   	; 0x18aa <EccPoint_mult>
    1db0:	f6 01       	movw	r30, r12
    1db2:	60 81       	ld	r22, Z
    1db4:	66 0f       	add	r22, r22
    1db6:	c5 01       	movw	r24, r10
    1db8:	0e 94 e1 04 	call	0x9c2	; 0x9c2 <uECC_vli_isZero>
    1dbc:	91 e0       	ldi	r25, 0x01	; 1
    1dbe:	81 11       	cpse	r24, r1
    1dc0:	90 e0       	ldi	r25, 0x00	; 0
    1dc2:	89 2f       	mov	r24, r25
    1dc4:	cc 5b       	subi	r28, 0xBC	; 188
    1dc6:	df 4f       	sbci	r29, 0xFF	; 255
    1dc8:	0f b6       	in	r0, 0x3f	; 63
    1dca:	f8 94       	cli
    1dcc:	de bf       	out	0x3e, r29	; 62
    1dce:	0f be       	out	0x3f, r0	; 63
    1dd0:	cd bf       	out	0x3d, r28	; 61
    1dd2:	df 91       	pop	r29
    1dd4:	cf 91       	pop	r28
    1dd6:	1f 91       	pop	r17
    1dd8:	0f 91       	pop	r16
    1dda:	ff 90       	pop	r15
    1ddc:	ef 90       	pop	r14
    1dde:	df 90       	pop	r13
    1de0:	cf 90       	pop	r12
    1de2:	bf 90       	pop	r11
    1de4:	af 90       	pop	r10
    1de6:	08 95       	ret

00001de8 <uECC_vli_nativeToBytes>:
    1de8:	cf 93       	push	r28
    1dea:	df 93       	push	r29
    1dec:	dc 01       	movw	r26, r24
    1dee:	16 16       	cp	r1, r22
    1df0:	17 06       	cpc	r1, r23
    1df2:	cc f4       	brge	.+50     	; 0x1e26 <uECC_vli_nativeToBytes+0x3e>
    1df4:	20 e0       	ldi	r18, 0x00	; 0
    1df6:	30 e0       	ldi	r19, 0x00	; 0
    1df8:	90 e0       	ldi	r25, 0x00	; 0
    1dfa:	eb 01       	movw	r28, r22
    1dfc:	21 97       	sbiw	r28, 0x01	; 1
    1dfe:	fe 01       	movw	r30, r28
    1e00:	e2 1b       	sub	r30, r18
    1e02:	f3 0b       	sbc	r31, r19
    1e04:	e4 0f       	add	r30, r20
    1e06:	f5 1f       	adc	r31, r21
    1e08:	20 81       	ld	r18, Z
    1e0a:	fd 01       	movw	r30, r26
    1e0c:	e9 0f       	add	r30, r25
    1e0e:	f1 1d       	adc	r31, r1
    1e10:	97 fd       	sbrc	r25, 7
    1e12:	fa 95       	dec	r31
    1e14:	20 83       	st	Z, r18
    1e16:	9f 5f       	subi	r25, 0xFF	; 255
    1e18:	29 2f       	mov	r18, r25
    1e1a:	09 2e       	mov	r0, r25
    1e1c:	00 0c       	add	r0, r0
    1e1e:	33 0b       	sbc	r19, r19
    1e20:	26 17       	cp	r18, r22
    1e22:	37 07       	cpc	r19, r23
    1e24:	64 f3       	brlt	.-40     	; 0x1dfe <uECC_vli_nativeToBytes+0x16>
    1e26:	df 91       	pop	r29
    1e28:	cf 91       	pop	r28
    1e2a:	08 95       	ret

00001e2c <uECC_generate_random_int>:
    1e2c:	9f 92       	push	r9
    1e2e:	af 92       	push	r10
    1e30:	bf 92       	push	r11
    1e32:	cf 92       	push	r12
    1e34:	df 92       	push	r13
    1e36:	ef 92       	push	r14
    1e38:	ff 92       	push	r15
    1e3a:	0f 93       	push	r16
    1e3c:	1f 93       	push	r17
    1e3e:	cf 93       	push	r28
    1e40:	df 93       	push	r29
    1e42:	8c 01       	movw	r16, r24
    1e44:	5b 01       	movw	r10, r22
    1e46:	d4 2f       	mov	r29, r20
    1e48:	64 2f       	mov	r22, r20
    1e4a:	c5 01       	movw	r24, r10
    1e4c:	0e 94 0d 05 	call	0xa1a	; 0xa1a <uECC_vli_numBits>
    1e50:	20 91 68 02 	lds	r18, 0x0268	; 0x800268 <__data_end>
    1e54:	30 91 69 02 	lds	r19, 0x0269	; 0x800269 <__data_end+0x1>
    1e58:	23 2b       	or	r18, r19
    1e5a:	c1 f1       	breq	.+112    	; 0x1ecc <uECC_generate_random_int+0xa0>
    1e5c:	48 e0       	ldi	r20, 0x08	; 8
    1e5e:	d4 02       	muls	r29, r20
    1e60:	90 01       	movw	r18, r0
    1e62:	11 24       	eor	r1, r1
    1e64:	28 1b       	sub	r18, r24
    1e66:	39 0b       	sbc	r19, r25
    1e68:	8f ef       	ldi	r24, 0xFF	; 255
    1e6a:	90 e0       	ldi	r25, 0x00	; 0
    1e6c:	02 c0       	rjmp	.+4      	; 0x1e72 <uECC_generate_random_int+0x46>
    1e6e:	95 95       	asr	r25
    1e70:	87 95       	ror	r24
    1e72:	2a 95       	dec	r18
    1e74:	e2 f7       	brpl	.-8      	; 0x1e6e <uECC_generate_random_int+0x42>
    1e76:	98 2e       	mov	r9, r24
    1e78:	c0 e4       	ldi	r28, 0x40	; 64
    1e7a:	cd 2e       	mov	r12, r29
    1e7c:	0d 2e       	mov	r0, r29
    1e7e:	00 0c       	add	r0, r0
    1e80:	dd 08       	sbc	r13, r13
    1e82:	76 01       	movw	r14, r12
    1e84:	81 e0       	ldi	r24, 0x01	; 1
    1e86:	e8 1a       	sub	r14, r24
    1e88:	f1 08       	sbc	r15, r1
    1e8a:	e0 0e       	add	r14, r16
    1e8c:	f1 1e       	adc	r15, r17
    1e8e:	e0 91 68 02 	lds	r30, 0x0268	; 0x800268 <__data_end>
    1e92:	f0 91 69 02 	lds	r31, 0x0269	; 0x800269 <__data_end+0x1>
    1e96:	b6 01       	movw	r22, r12
    1e98:	c8 01       	movw	r24, r16
    1e9a:	09 95       	icall
    1e9c:	00 97       	sbiw	r24, 0x00	; 0
    1e9e:	d9 f0       	breq	.+54     	; 0x1ed6 <uECC_generate_random_int+0xaa>
    1ea0:	f7 01       	movw	r30, r14
    1ea2:	80 81       	ld	r24, Z
    1ea4:	89 21       	and	r24, r9
    1ea6:	80 83       	st	Z, r24
    1ea8:	6d 2f       	mov	r22, r29
    1eaa:	c8 01       	movw	r24, r16
    1eac:	0e 94 e1 04 	call	0x9c2	; 0x9c2 <uECC_vli_isZero>
    1eb0:	81 11       	cpse	r24, r1
    1eb2:	07 c0       	rjmp	.+14     	; 0x1ec2 <uECC_generate_random_int+0x96>
    1eb4:	4d 2f       	mov	r20, r29
    1eb6:	b8 01       	movw	r22, r16
    1eb8:	c5 01       	movw	r24, r10
    1eba:	0e 94 76 05 	call	0xaec	; 0xaec <uECC_vli_cmp>
    1ebe:	81 30       	cpi	r24, 0x01	; 1
    1ec0:	41 f0       	breq	.+16     	; 0x1ed2 <uECC_generate_random_int+0xa6>
    1ec2:	c1 50       	subi	r28, 0x01	; 1
    1ec4:	21 f7       	brne	.-56     	; 0x1e8e <uECC_generate_random_int+0x62>
    1ec6:	80 e0       	ldi	r24, 0x00	; 0
    1ec8:	90 e0       	ldi	r25, 0x00	; 0
    1eca:	05 c0       	rjmp	.+10     	; 0x1ed6 <uECC_generate_random_int+0xaa>
    1ecc:	80 e0       	ldi	r24, 0x00	; 0
    1ece:	90 e0       	ldi	r25, 0x00	; 0
    1ed0:	02 c0       	rjmp	.+4      	; 0x1ed6 <uECC_generate_random_int+0xaa>
    1ed2:	81 e0       	ldi	r24, 0x01	; 1
    1ed4:	90 e0       	ldi	r25, 0x00	; 0
    1ed6:	df 91       	pop	r29
    1ed8:	cf 91       	pop	r28
    1eda:	1f 91       	pop	r17
    1edc:	0f 91       	pop	r16
    1ede:	ff 90       	pop	r15
    1ee0:	ef 90       	pop	r14
    1ee2:	df 90       	pop	r13
    1ee4:	cf 90       	pop	r12
    1ee6:	bf 90       	pop	r11
    1ee8:	af 90       	pop	r10
    1eea:	9f 90       	pop	r9
    1eec:	08 95       	ret

00001eee <uECC_set_rng>:
    1eee:	90 93 69 02 	sts	0x0269, r25	; 0x800269 <__data_end+0x1>
    1ef2:	80 93 68 02 	sts	0x0268, r24	; 0x800268 <__data_end>
    1ef6:	08 95       	ret

00001ef8 <uECC_secp256r1>:
    1ef8:	84 e0       	ldi	r24, 0x04	; 4
    1efa:	91 e0       	ldi	r25, 0x01	; 1
    1efc:	08 95       	ret

00001efe <uECC_make_key>:
    return 0;
}

int uECC_make_key(uint8_t *public_key,
                  uint8_t *private_key,
                  uECC_Curve curve) {
    1efe:	9f 92       	push	r9
    1f00:	af 92       	push	r10
    1f02:	bf 92       	push	r11
    1f04:	cf 92       	push	r12
    1f06:	df 92       	push	r13
    1f08:	ef 92       	push	r14
    1f0a:	ff 92       	push	r15
    1f0c:	0f 93       	push	r16
    1f0e:	1f 93       	push	r17
    1f10:	cf 93       	push	r28
    1f12:	df 93       	push	r29
    1f14:	cd b7       	in	r28, 0x3d	; 61
    1f16:	de b7       	in	r29, 0x3e	; 62
    1f18:	c0 56       	subi	r28, 0x60	; 96
    1f1a:	d1 09       	sbc	r29, r1
    1f1c:	0f b6       	in	r0, 0x3f	; 63
    1f1e:	f8 94       	cli
    1f20:	de bf       	out	0x3e, r29	; 62
    1f22:	0f be       	out	0x3f, r0	; 63
    1f24:	cd bf       	out	0x3d, r28	; 61
    1f26:	6c 01       	movw	r12, r24
    1f28:	5b 01       	movw	r10, r22
    1f2a:	8a 01       	movw	r16, r20
    1f2c:	68 94       	set
    1f2e:	99 24       	eor	r9, r9
    1f30:	96 f8       	bld	r9, 6
    uECC_word_t _public[uECC_MAX_WORDS * 2];
#endif
    uECC_word_t tries;

    for (tries = 0; tries < uECC_RNG_MAX_TRIES; ++tries) {
        if (!uECC_generate_random_int(_private, curve->n, BITS_TO_WORDS(curve->num_n_bits))) {
    1f32:	7a 01       	movw	r14, r20
    1f34:	84 e2       	ldi	r24, 0x24	; 36
    1f36:	e8 0e       	add	r14, r24
    1f38:	f1 1c       	adc	r15, r1
    1f3a:	f8 01       	movw	r30, r16
    1f3c:	82 81       	ldd	r24, Z+2	; 0x02
    1f3e:	93 81       	ldd	r25, Z+3	; 0x03
    1f40:	07 96       	adiw	r24, 0x07	; 7
    1f42:	ac 01       	movw	r20, r24
    1f44:	12 f4       	brpl	.+4      	; 0x1f4a <uECC_make_key+0x4c>
    1f46:	49 5f       	subi	r20, 0xF9	; 249
    1f48:	5f 4f       	sbci	r21, 0xFF	; 255
    1f4a:	55 95       	asr	r21
    1f4c:	47 95       	ror	r20
    1f4e:	55 95       	asr	r21
    1f50:	47 95       	ror	r20
    1f52:	55 95       	asr	r21
    1f54:	47 95       	ror	r20
    1f56:	b7 01       	movw	r22, r14
    1f58:	ce 01       	movw	r24, r28
    1f5a:	01 96       	adiw	r24, 0x01	; 1
    1f5c:	67 df       	rcall	.-306    	; 0x1e2c <uECC_generate_random_int>
    1f5e:	00 97       	sbiw	r24, 0x00	; 0
    1f60:	09 f4       	brne	.+2      	; 0x1f64 <uECC_make_key+0x66>
    1f62:	40 c0       	rjmp	.+128    	; 0x1fe4 <uECC_make_key+0xe6>
            return 0;
        }

        if (EccPoint_compute_public_key(_public, _private, curve)) {
    1f64:	a8 01       	movw	r20, r16
    1f66:	be 01       	movw	r22, r28
    1f68:	6f 5f       	subi	r22, 0xFF	; 255
    1f6a:	7f 4f       	sbci	r23, 0xFF	; 255
    1f6c:	ce 01       	movw	r24, r28
    1f6e:	81 96       	adiw	r24, 0x21	; 33
    1f70:	de de       	rcall	.-580    	; 0x1d2e <EccPoint_compute_public_key>
    1f72:	88 23       	and	r24, r24
    1f74:	91 f1       	breq	.+100    	; 0x1fda <uECC_make_key+0xdc>
#if uECC_VLI_NATIVE_LITTLE_ENDIAN == 0
            uECC_vli_nativeToBytes(private_key, BITS_TO_BYTES(curve->num_n_bits), _private);
    1f76:	f8 01       	movw	r30, r16
    1f78:	82 81       	ldd	r24, Z+2	; 0x02
    1f7a:	93 81       	ldd	r25, Z+3	; 0x03
    1f7c:	07 96       	adiw	r24, 0x07	; 7
    1f7e:	bc 01       	movw	r22, r24
    1f80:	12 f4       	brpl	.+4      	; 0x1f86 <uECC_make_key+0x88>
    1f82:	69 5f       	subi	r22, 0xF9	; 249
    1f84:	7f 4f       	sbci	r23, 0xFF	; 255
    1f86:	75 95       	asr	r23
    1f88:	67 95       	ror	r22
    1f8a:	75 95       	asr	r23
    1f8c:	67 95       	ror	r22
    1f8e:	75 95       	asr	r23
    1f90:	67 95       	ror	r22
    1f92:	ae 01       	movw	r20, r28
    1f94:	4f 5f       	subi	r20, 0xFF	; 255
    1f96:	5f 4f       	sbci	r21, 0xFF	; 255
    1f98:	c5 01       	movw	r24, r10
    1f9a:	26 df       	rcall	.-436    	; 0x1de8 <uECC_vli_nativeToBytes>
            uECC_vli_nativeToBytes(public_key, curve->num_bytes, _public);
    1f9c:	f8 01       	movw	r30, r16
    1f9e:	61 81       	ldd	r22, Z+1	; 0x01
    1fa0:	06 2e       	mov	r0, r22
    1fa2:	00 0c       	add	r0, r0
    1fa4:	77 0b       	sbc	r23, r23
    1fa6:	ae 01       	movw	r20, r28
    1fa8:	4f 5d       	subi	r20, 0xDF	; 223
    1faa:	5f 4f       	sbci	r21, 0xFF	; 255
    1fac:	c6 01       	movw	r24, r12
    1fae:	1c df       	rcall	.-456    	; 0x1de8 <uECC_vli_nativeToBytes>
            uECC_vli_nativeToBytes(
                public_key + curve->num_bytes, curve->num_bytes, _public + curve->num_words);
    1fb0:	f8 01       	movw	r30, r16
    1fb2:	81 81       	ldd	r24, Z+1	; 0x01

        if (EccPoint_compute_public_key(_public, _private, curve)) {
#if uECC_VLI_NATIVE_LITTLE_ENDIAN == 0
            uECC_vli_nativeToBytes(private_key, BITS_TO_BYTES(curve->num_n_bits), _private);
            uECC_vli_nativeToBytes(public_key, curve->num_bytes, _public);
            uECC_vli_nativeToBytes(
    1fb4:	90 81       	ld	r25, Z
    1fb6:	41 e2       	ldi	r20, 0x21	; 33
    1fb8:	50 e0       	ldi	r21, 0x00	; 0
    1fba:	4c 0f       	add	r20, r28
    1fbc:	5d 1f       	adc	r21, r29
    1fbe:	49 0f       	add	r20, r25
    1fc0:	51 1d       	adc	r21, r1
    1fc2:	97 fd       	sbrc	r25, 7
    1fc4:	5a 95       	dec	r21
    1fc6:	08 2e       	mov	r0, r24
    1fc8:	00 0c       	add	r0, r0
    1fca:	99 0b       	sbc	r25, r25
    1fcc:	bc 01       	movw	r22, r24
    1fce:	8c 0d       	add	r24, r12
    1fd0:	9d 1d       	adc	r25, r13
    1fd2:	0a df       	rcall	.-492    	; 0x1de8 <uECC_vli_nativeToBytes>
                public_key + curve->num_bytes, curve->num_bytes, _public + curve->num_words);
#endif
            return 1;
    1fd4:	81 e0       	ldi	r24, 0x01	; 1
    1fd6:	90 e0       	ldi	r25, 0x00	; 0
    1fd8:	05 c0       	rjmp	.+10     	; 0x1fe4 <uECC_make_key+0xe6>
    1fda:	9a 94       	dec	r9
    uECC_word_t _private[uECC_MAX_WORDS];
    uECC_word_t _public[uECC_MAX_WORDS * 2];
#endif
    uECC_word_t tries;

    for (tries = 0; tries < uECC_RNG_MAX_TRIES; ++tries) {
    1fdc:	91 10       	cpse	r9, r1
    1fde:	ad cf       	rjmp	.-166    	; 0x1f3a <uECC_make_key+0x3c>
                public_key + curve->num_bytes, curve->num_bytes, _public + curve->num_words);
#endif
            return 1;
        }
    }
    return 0;
    1fe0:	80 e0       	ldi	r24, 0x00	; 0
    1fe2:	90 e0       	ldi	r25, 0x00	; 0
}
    1fe4:	c0 5a       	subi	r28, 0xA0	; 160
    1fe6:	df 4f       	sbci	r29, 0xFF	; 255
    1fe8:	0f b6       	in	r0, 0x3f	; 63
    1fea:	f8 94       	cli
    1fec:	de bf       	out	0x3e, r29	; 62
    1fee:	0f be       	out	0x3f, r0	; 63
    1ff0:	cd bf       	out	0x3d, r28	; 61
    1ff2:	df 91       	pop	r29
    1ff4:	cf 91       	pop	r28
    1ff6:	1f 91       	pop	r17
    1ff8:	0f 91       	pop	r16
    1ffa:	ff 90       	pop	r15
    1ffc:	ef 90       	pop	r14
    1ffe:	df 90       	pop	r13
    2000:	cf 90       	pop	r12
    2002:	bf 90       	pop	r11
    2004:	af 90       	pop	r10
    2006:	9f 90       	pop	r9
    2008:	08 95       	ret

0000200a <uECC_shared_secret>:

int uECC_shared_secret(const uint8_t *public_key,
                       const uint8_t *private_key,
                       uint8_t *secret,
                       uECC_Curve curve) {
    200a:	6f 92       	push	r6
    200c:	7f 92       	push	r7
    200e:	8f 92       	push	r8
    2010:	9f 92       	push	r9
    2012:	af 92       	push	r10
    2014:	bf 92       	push	r11
    2016:	cf 92       	push	r12
    2018:	df 92       	push	r13
    201a:	ef 92       	push	r14
    201c:	ff 92       	push	r15
    201e:	0f 93       	push	r16
    2020:	1f 93       	push	r17
    2022:	cf 93       	push	r28
    2024:	df 93       	push	r29
    2026:	cd b7       	in	r28, 0x3d	; 61
    2028:	de b7       	in	r29, 0x3e	; 62
    202a:	c4 58       	subi	r28, 0x84	; 132
    202c:	d1 09       	sbc	r29, r1
    202e:	0f b6       	in	r0, 0x3f	; 63
    2030:	f8 94       	cli
    2032:	de bf       	out	0x3e, r29	; 62
    2034:	0f be       	out	0x3f, r0	; 63
    2036:	cd bf       	out	0x3d, r28	; 61
    2038:	8c 01       	movw	r16, r24
    203a:	4a 01       	movw	r8, r20
    203c:	69 01       	movw	r12, r18
    uECC_word_t _public[uECC_MAX_WORDS * 2];
    uECC_word_t _private[uECC_MAX_WORDS];

    uECC_word_t tmp[uECC_MAX_WORDS];
    uECC_word_t *p2[2] = {_private, tmp};
    203e:	ce 01       	movw	r24, r28
    2040:	8f 5b       	subi	r24, 0xBF	; 191
    2042:	9f 4f       	sbci	r25, 0xFF	; 255
    2044:	cf 57       	subi	r28, 0x7F	; 127
    2046:	df 4f       	sbci	r29, 0xFF	; 255
    2048:	99 83       	std	Y+1, r25	; 0x01
    204a:	88 83       	st	Y, r24
    204c:	c1 58       	subi	r28, 0x81	; 129
    204e:	d0 40       	sbci	r29, 0x00	; 0
    2050:	80 96       	adiw	r24, 0x20	; 32
    2052:	cd 57       	subi	r28, 0x7D	; 125
    2054:	df 4f       	sbci	r29, 0xFF	; 255
    2056:	99 83       	std	Y+1, r25	; 0x01
    2058:	88 83       	st	Y, r24
    205a:	c3 58       	subi	r28, 0x83	; 131
    205c:	d0 40       	sbci	r29, 0x00	; 0
    uECC_word_t *initial_Z = 0;
    uECC_word_t carry;
    wordcount_t num_words = curve->num_words;
    205e:	f9 01       	movw	r30, r18
    2060:	f0 80       	ld	r15, Z
    wordcount_t num_bytes = curve->num_bytes;
    2062:	a1 80       	ldd	r10, Z+1	; 0x01
}

uECC_VLI_API void uECC_vli_bytesToNative(uint8_t *native,
                                         const uint8_t *bytes,
                                         int num_bytes) {
    uECC_vli_nativeToBytes(native, num_bytes, bytes);
    2064:	22 81       	ldd	r18, Z+2	; 0x02
    2066:	33 81       	ldd	r19, Z+3	; 0x03
    2068:	29 5f       	subi	r18, 0xF9	; 249
    206a:	3f 4f       	sbci	r19, 0xFF	; 255
    206c:	c9 01       	movw	r24, r18
    206e:	99 23       	and	r25, r25
    2070:	0c f4       	brge	.+2      	; 0x2074 <uECC_shared_secret+0x6a>
    2072:	07 96       	adiw	r24, 0x07	; 7
    2074:	95 95       	asr	r25
    2076:	87 95       	ror	r24
    2078:	95 95       	asr	r25
    207a:	87 95       	ror	r24
    207c:	95 95       	asr	r25
    207e:	87 95       	ror	r24
    2080:	ab 01       	movw	r20, r22
    2082:	bc 01       	movw	r22, r24
    2084:	ce 01       	movw	r24, r28
    2086:	8f 5b       	subi	r24, 0xBF	; 191
    2088:	9f 4f       	sbci	r25, 0xFF	; 255
    208a:	ae de       	rcall	.-676    	; 0x1de8 <uECC_vli_nativeToBytes>
#if uECC_VLI_NATIVE_LITTLE_ENDIAN
    bcopy((uint8_t *) _private, private_key, num_bytes);
    bcopy((uint8_t *) _public, public_key, num_bytes*2);
#else
    uECC_vli_bytesToNative(_private, private_key, BITS_TO_BYTES(curve->num_n_bits));
    uECC_vli_bytesToNative(_public, public_key, num_bytes);
    208c:	0a 2c       	mov	r0, r10
    208e:	00 0c       	add	r0, r0
    2090:	bb 08       	sbc	r11, r11
}

uECC_VLI_API void uECC_vli_bytesToNative(uint8_t *native,
                                         const uint8_t *bytes,
                                         int num_bytes) {
    uECC_vli_nativeToBytes(native, num_bytes, bytes);
    2092:	a8 01       	movw	r20, r16
    2094:	b5 01       	movw	r22, r10
    2096:	ce 01       	movw	r24, r28
    2098:	01 96       	adiw	r24, 0x01	; 1
    209a:	a6 de       	rcall	.-692    	; 0x1de8 <uECC_vli_nativeToBytes>
    209c:	a8 01       	movw	r20, r16
    209e:	4a 0d       	add	r20, r10
    20a0:	5b 1d       	adc	r21, r11
    20a2:	b5 01       	movw	r22, r10
    20a4:	81 e0       	ldi	r24, 0x01	; 1
    20a6:	90 e0       	ldi	r25, 0x00	; 0
    20a8:	8c 0f       	add	r24, r28
    20aa:	9d 1f       	adc	r25, r29
    20ac:	8f 0d       	add	r24, r15
    20ae:	91 1d       	adc	r25, r1
    20b0:	f7 fc       	sbrc	r15, 7
    20b2:	9a 95       	dec	r25
    20b4:	99 de       	rcall	.-718    	; 0x1de8 <uECC_vli_nativeToBytes>
    uECC_vli_bytesToNative(_public + num_words, public_key + num_bytes, num_bytes);
#endif

    /* Regularize the bitcount for the private key so that attackers cannot use a side channel
       attack to learn the number of leading zeros. */
    carry = regularize_k(_private, _private, tmp, curve);
    20b6:	96 01       	movw	r18, r12
    20b8:	ae 01       	movw	r20, r28
    20ba:	4f 59       	subi	r20, 0x9F	; 159
    20bc:	5f 4f       	sbci	r21, 0xFF	; 255
    20be:	be 01       	movw	r22, r28
    20c0:	6f 5b       	subi	r22, 0xBF	; 191
    20c2:	7f 4f       	sbci	r23, 0xFF	; 255
    20c4:	cb 01       	movw	r24, r22
    20c6:	e5 dd       	rcall	.-1078   	; 0x1c92 <regularize_k>
    20c8:	18 2f       	mov	r17, r24

    /* If an RNG function was specified, try to get a random initial Z value to improve
       protection against side-channel attacks. */
    if (g_rng_function) {
    20ca:	80 91 68 02 	lds	r24, 0x0268	; 0x800268 <__data_end>
    20ce:	90 91 69 02 	lds	r25, 0x0269	; 0x800269 <__data_end+0x1>
    20d2:	89 2b       	or	r24, r25
    20d4:	a9 f0       	breq	.+42     	; 0x2100 <uECC_shared_secret+0xf6>
        if (!uECC_generate_random_int(p2[carry], curve->p, num_words)) {
    20d6:	e1 2f       	mov	r30, r17
    20d8:	f0 e0       	ldi	r31, 0x00	; 0
    20da:	ee 0f       	add	r30, r30
    20dc:	ff 1f       	adc	r31, r31
    20de:	81 e8       	ldi	r24, 0x81	; 129
    20e0:	90 e0       	ldi	r25, 0x00	; 0
    20e2:	8c 0f       	add	r24, r28
    20e4:	9d 1f       	adc	r25, r29
    20e6:	e8 0f       	add	r30, r24
    20e8:	f9 1f       	adc	r31, r25
    20ea:	60 80       	ld	r6, Z
    20ec:	71 80       	ldd	r7, Z+1	; 0x01
    20ee:	4f 2d       	mov	r20, r15
    20f0:	b6 01       	movw	r22, r12
    20f2:	6c 5f       	subi	r22, 0xFC	; 252
    20f4:	7f 4f       	sbci	r23, 0xFF	; 255
    20f6:	c3 01       	movw	r24, r6
    20f8:	99 de       	rcall	.-718    	; 0x1e2c <uECC_generate_random_int>
    20fa:	00 97       	sbiw	r24, 0x00	; 0
    20fc:	19 f4       	brne	.+6      	; 0x2104 <uECC_shared_secret+0xfa>
    20fe:	32 c0       	rjmp	.+100    	; 0x2164 <uECC_shared_secret+0x15a>
    uECC_word_t _public[uECC_MAX_WORDS * 2];
    uECC_word_t _private[uECC_MAX_WORDS];

    uECC_word_t tmp[uECC_MAX_WORDS];
    uECC_word_t *p2[2] = {_private, tmp};
    uECC_word_t *initial_Z = 0;
    2100:	61 2c       	mov	r6, r1
    2102:	71 2c       	mov	r7, r1
            return 0;
        }
        initial_Z = p2[carry];
    }

    EccPoint_mult(_public, _public, p2[!carry], initial_Z, curve->num_n_bits + 1, curve);
    2104:	f6 01       	movw	r30, r12
    2106:	22 81       	ldd	r18, Z+2	; 0x02
    2108:	33 81       	ldd	r19, Z+3	; 0x03
    210a:	2f 5f       	subi	r18, 0xFF	; 255
    210c:	3f 4f       	sbci	r19, 0xFF	; 255
    210e:	81 e0       	ldi	r24, 0x01	; 1
    2110:	90 e0       	ldi	r25, 0x00	; 0
    2112:	11 23       	and	r17, r17
    2114:	11 f0       	breq	.+4      	; 0x211a <uECC_shared_secret+0x110>
    2116:	80 e0       	ldi	r24, 0x00	; 0
    2118:	90 e0       	ldi	r25, 0x00	; 0
    211a:	88 0f       	add	r24, r24
    211c:	99 1f       	adc	r25, r25
    211e:	e1 e8       	ldi	r30, 0x81	; 129
    2120:	f0 e0       	ldi	r31, 0x00	; 0
    2122:	ec 0f       	add	r30, r28
    2124:	fd 1f       	adc	r31, r29
    2126:	e8 0f       	add	r30, r24
    2128:	f9 1f       	adc	r31, r25
    212a:	40 81       	ld	r20, Z
    212c:	51 81       	ldd	r21, Z+1	; 0x01
    212e:	76 01       	movw	r14, r12
    2130:	89 01       	movw	r16, r18
    2132:	93 01       	movw	r18, r6
    2134:	be 01       	movw	r22, r28
    2136:	6f 5f       	subi	r22, 0xFF	; 255
    2138:	7f 4f       	sbci	r23, 0xFF	; 255
    213a:	cb 01       	movw	r24, r22
    213c:	b6 db       	rcall	.-2196   	; 0x18aa <EccPoint_mult>
#if uECC_VLI_NATIVE_LITTLE_ENDIAN
    bcopy((uint8_t *) secret, (uint8_t *) _public, num_bytes);
#else
    uECC_vli_nativeToBytes(secret, num_bytes, _public);
    213e:	ae 01       	movw	r20, r28
    2140:	4f 5f       	subi	r20, 0xFF	; 255
    2142:	5f 4f       	sbci	r21, 0xFF	; 255
    2144:	b5 01       	movw	r22, r10
    2146:	c4 01       	movw	r24, r8
    2148:	4f de       	rcall	.-866    	; 0x1de8 <uECC_vli_nativeToBytes>
    214a:	f6 01       	movw	r30, r12
#endif
    return !EccPoint_isZero(_public, curve);
    214c:	60 81       	ld	r22, Z
    214e:	66 0f       	add	r22, r22
    2150:	ce 01       	movw	r24, r28
    2152:	01 96       	adiw	r24, 0x01	; 1
    2154:	0e 94 e1 04 	call	0x9c2	; 0x9c2 <uECC_vli_isZero>
    2158:	31 e0       	ldi	r19, 0x01	; 1
    215a:	20 e0       	ldi	r18, 0x00	; 0
    215c:	81 11       	cpse	r24, r1
    215e:	30 e0       	ldi	r19, 0x00	; 0
    2160:	83 2f       	mov	r24, r19
    2162:	92 2f       	mov	r25, r18
    2164:	cc 57       	subi	r28, 0x7C	; 124
}
    2166:	df 4f       	sbci	r29, 0xFF	; 255
    2168:	0f b6       	in	r0, 0x3f	; 63
    216a:	f8 94       	cli
    216c:	de bf       	out	0x3e, r29	; 62
    216e:	0f be       	out	0x3f, r0	; 63
    2170:	cd bf       	out	0x3d, r28	; 61
    2172:	df 91       	pop	r29
    2174:	cf 91       	pop	r28
    2176:	1f 91       	pop	r17
    2178:	0f 91       	pop	r16
    217a:	ff 90       	pop	r15
    217c:	ef 90       	pop	r14
    217e:	df 90       	pop	r13
    2180:	cf 90       	pop	r12
    2182:	bf 90       	pop	r11
    2184:	af 90       	pop	r10
    2186:	9f 90       	pop	r9
    2188:	8f 90       	pop	r8
    218a:	7f 90       	pop	r7
    218c:	6f 90       	pop	r6
    218e:	08 95       	ret

00002190 <RNG>:
    2190:	ff 92       	push	r15
	}else{
		uart_puts("signature is false!");
		can_send_message(0, 0x00, message);
	}
	return 0;
}
    2192:	0f 93       	push	r16
    2194:	1f 93       	push	r17
    2196:	cf 93       	push	r28
    2198:	df 93       	push	r29
    219a:	ec 01       	movw	r28, r24
    219c:	8b 01       	movw	r16, r22
    219e:	67 2b       	or	r22, r23
    21a0:	41 f0       	breq	.+16     	; 0x21b2 <RNG+0x22>
    21a2:	8b d6       	rcall	.+3350   	; 0x2eba <rand>
    21a4:	f8 2e       	mov	r15, r24
    21a6:	89 d6       	rcall	.+3346   	; 0x2eba <rand>
    21a8:	8f 0d       	add	r24, r15
    21aa:	89 93       	st	Y+, r24
    21ac:	01 50       	subi	r16, 0x01	; 1
    21ae:	11 09       	sbc	r17, r1
    21b0:	c1 f7       	brne	.-16     	; 0x21a2 <RNG+0x12>
    21b2:	81 e0       	ldi	r24, 0x01	; 1
    21b4:	90 e0       	ldi	r25, 0x00	; 0
    21b6:	df 91       	pop	r29
    21b8:	cf 91       	pop	r28
    21ba:	1f 91       	pop	r17
    21bc:	0f 91       	pop	r16
    21be:	ff 90       	pop	r15
    21c0:	08 95       	ret

000021c2 <buttons_init>:
    21c2:	1d b8       	out	0x0d, r1	; 13
    21c4:	80 ef       	ldi	r24, 0xF0	; 240
    21c6:	8e b9       	out	0x0e, r24	; 14
    21c8:	9f ef       	ldi	r25, 0xFF	; 255
    21ca:	90 93 6a 00 	sts	0x006A, r25	; 0x80006a <__TEXT_REGION_LENGTH__+0x7e006a>
    21ce:	8d bb       	out	0x1d, r24	; 29
    21d0:	08 95       	ret

000021d2 <run_scenario2>:

int run_scenario2(){
    21d2:	cf 93       	push	r28
    21d4:	df 93       	push	r29
    21d6:	cd b7       	in	r28, 0x3d	; 61
    21d8:	de b7       	in	r29, 0x3e	; 62
    21da:	c9 51       	subi	r28, 0x19	; 25
    21dc:	d1 40       	sbci	r29, 0x01	; 1
    21de:	0f b6       	in	r0, 0x3f	; 63
    21e0:	f8 94       	cli
    21e2:	de bf       	out	0x3e, r29	; 62
    21e4:	0f be       	out	0x3f, r0	; 63
    21e6:	cd bf       	out	0x3d, r28	; 61
	
	volatile uint8_t result;
	uart_puts("idle");
    21e8:	80 eb       	ldi	r24, 0xB0	; 176
    21ea:	91 e0       	ldi	r25, 0x01	; 1
    21ec:	f0 d5       	rcall	.+3040   	; 0x2dce <uart_puts>
	can_msg_t init;
	can_receive_message(0, 0x00, 0x00, init);
    21ee:	9e 01       	movw	r18, r28
    21f0:	2e 5f       	subi	r18, 0xFE	; 254
    21f2:	3f 4f       	sbci	r19, 0xFF	; 255
    21f4:	40 e0       	ldi	r20, 0x00	; 0
    21f6:	60 e0       	ldi	r22, 0x00	; 0
    21f8:	80 e0       	ldi	r24, 0x00	; 0
    21fa:	0e 94 7d 01 	call	0x2fa	; 0x2fa <can_receive_message>
	uart_puts("authentication started");
    21fe:	85 eb       	ldi	r24, 0xB5	; 181
    2200:	91 e0       	ldi	r25, 0x01	; 1
    2202:	e5 d5       	rcall	.+3018   	; 0x2dce <uart_puts>
	uECC_set_rng(RNG);
    2204:	88 ec       	ldi	r24, 0xC8	; 200
    2206:	90 e1       	ldi	r25, 0x10	; 16
	volatile uint8_t private[32];
	volatile uint8_t public[64];
	const struct uECC_Curve_t * curve = uECC_secp256r1();
    2208:	72 de       	rcall	.-796    	; 0x1eee <uECC_set_rng>
    220a:	76 de       	rcall	.-788    	; 0x1ef8 <uECC_secp256r1>
    220c:	8c 01       	movw	r16, r24
	result = uECC_make_key(public, private, curve);
    220e:	ac 01       	movw	r20, r24
    2210:	be 01       	movw	r22, r28
    2212:	66 5f       	subi	r22, 0xF6	; 246
    2214:	7f 4f       	sbci	r23, 0xFF	; 255
    2216:	ce 01       	movw	r24, r28
    2218:	8a 96       	adiw	r24, 0x2a	; 42
    221a:	71 de       	rcall	.-798    	; 0x1efe <uECC_make_key>
    221c:	89 83       	std	Y+1, r24	; 0x01
	uint8_t secret_unhashed[32];
	result = uECC_shared_secret(public_key, private, secret_unhashed, curve);
    221e:	98 01       	movw	r18, r16
    2220:	ae 01       	movw	r20, r28
    2222:	46 59       	subi	r20, 0x96	; 150
    2224:	5f 4f       	sbci	r21, 0xFF	; 255
    2226:	be 01       	movw	r22, r28
    2228:	66 5f       	subi	r22, 0xF6	; 246
    222a:	7f 4f       	sbci	r23, 0xFF	; 255
    222c:	87 e2       	ldi	r24, 0x27	; 39
    222e:	92 e0       	ldi	r25, 0x02	; 2
    2230:	ec de       	rcall	.-552    	; 0x200a <uECC_shared_secret>
    2232:	89 83       	std	Y+1, r24	; 0x01
	uint8_t secret[32];
	uint32_t len = 256;
	sha256(secret, secret_unhashed, len);
    2234:	20 e0       	ldi	r18, 0x00	; 0
    2236:	31 e0       	ldi	r19, 0x01	; 1
    2238:	40 e0       	ldi	r20, 0x00	; 0
    223a:	50 e0       	ldi	r21, 0x00	; 0
    223c:	be 01       	movw	r22, r28
    223e:	66 59       	subi	r22, 0x96	; 150
    2240:	7f 4f       	sbci	r23, 0xFF	; 255
    2242:	ce 01       	movw	r24, r28
    2244:	86 57       	subi	r24, 0x76	; 118
    2246:	9f 4f       	sbci	r25, 0xFF	; 255
    2248:	58 d1       	rcall	.+688    	; 0x24fa <sha256>
	can_send_frame_buffer(public, 8);
    224a:	68 e0       	ldi	r22, 0x08	; 8
    224c:	ce 01       	movw	r24, r28
    224e:	8a 96       	adiw	r24, 0x2a	; 42
    2250:	0e 94 b4 01 	call	0x368	; 0x368 <can_send_frame_buffer>
	uart_puts("secret established");
    2254:	83 e0       	ldi	r24, 0x03	; 3
    2256:	92 e0       	ldi	r25, 0x02	; 2
    2258:	ba d5       	rcall	.+2932   	; 0x2dce <uart_puts>
	can_init();
    225a:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <can_init>
	
	while(1){
		can_msg_t message[8];
		can_receive_message(0, 0x00, 0x00, message);
    225e:	9e 01       	movw	r18, r28
    2260:	26 55       	subi	r18, 0x56	; 86
    2262:	3f 4f       	sbci	r19, 0xFF	; 255
    2264:	40 e0       	ldi	r20, 0x00	; 0
    2266:	60 e0       	ldi	r22, 0x00	; 0
    2268:	80 e0       	ldi	r24, 0x00	; 0
    226a:	0e 94 7d 01 	call	0x2fa	; 0x2fa <can_receive_message>
		can_send_message(0, 0x00, message);
    226e:	ae 01       	movw	r20, r28
    2270:	46 55       	subi	r20, 0x56	; 86
    2272:	5f 4f       	sbci	r21, 0xFF	; 255
    2274:	60 e0       	ldi	r22, 0x00	; 0
    2276:	80 e0       	ldi	r24, 0x00	; 0
    2278:	0e 94 6a 01 	call	0x2d4	; 0x2d4 <can_send_message>
		uint8_t mac[16];
		can_receive_frame_buffer(mac,2);
    227c:	62 e0       	ldi	r22, 0x02	; 2
    227e:	ce 01       	movw	r24, r28
    2280:	86 5f       	subi	r24, 0xF6	; 246
    2282:	9e 4f       	sbci	r25, 0xFE	; 254
    2284:	0e 94 c8 01 	call	0x390	; 0x390 <can_receive_frame_buffer>
		
		uint8_t mac2[32];
		hmac_sha256(mac2, secret, 265 ,message , 64);
    2288:	10 e4       	ldi	r17, 0x40	; 64
    228a:	e1 2e       	mov	r14, r17
    228c:	f1 2c       	mov	r15, r1
    228e:	00 e0       	ldi	r16, 0x00	; 0
    2290:	10 e0       	ldi	r17, 0x00	; 0
    2292:	9e 01       	movw	r18, r28
    2294:	26 55       	subi	r18, 0x56	; 86
    2296:	3f 4f       	sbci	r19, 0xFF	; 255
    2298:	49 e0       	ldi	r20, 0x09	; 9
    229a:	51 e0       	ldi	r21, 0x01	; 1
    229c:	be 01       	movw	r22, r28
    229e:	66 57       	subi	r22, 0x76	; 118
    22a0:	7f 4f       	sbci	r23, 0xFF	; 255
    22a2:	ce 01       	movw	r24, r28
    22a4:	86 51       	subi	r24, 0x16	; 22
    22a6:	9f 4f       	sbci	r25, 0xFF	; 255
    22a8:	14 d0       	rcall	.+40     	; 0x22d2 <hmac_sha256>
		if(memcmp(mac, mac2, 16) == 0) uart_puts("message accepted");
    22aa:	40 e1       	ldi	r20, 0x10	; 16
    22ac:	50 e0       	ldi	r21, 0x00	; 0
    22ae:	be 01       	movw	r22, r28
    22b0:	66 51       	subi	r22, 0x16	; 22
    22b2:	7f 4f       	sbci	r23, 0xFF	; 255
    22b4:	ce 01       	movw	r24, r28
    22b6:	86 5f       	subi	r24, 0xF6	; 246
    22b8:	9e 4f       	sbci	r25, 0xFE	; 254
    22ba:	16 d6       	rcall	.+3116   	; 0x2ee8 <memcmp>
    22bc:	89 2b       	or	r24, r25
    22be:	79 f6       	brne	.-98     	; 0x225e <run_scenario2+0x8c>
    22c0:	86 e1       	ldi	r24, 0x16	; 22
    22c2:	92 e0       	ldi	r25, 0x02	; 2
    22c4:	84 d5       	rcall	.+2824   	; 0x2dce <uart_puts>
    22c6:	cb cf       	rjmp	.-106    	; 0x225e <run_scenario2+0x8c>

000022c8 <main>:
	}
    22c8:	76 d5       	rcall	.+2796   	; 0x2db6 <uart_init>

 int main()
 {	
	
	uart_init();
	buttons_init();
    22ca:	7b df       	rcall	.-266    	; 0x21c2 <buttons_init>
    22cc:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <can_init>
	can_init();
	run_scenario2();
    22d0:	80 df       	rcall	.-256    	; 0x21d2 <run_scenario2>

000022d2 <hmac_sha256>:
    22d2:	2f 92       	push	r2

/*
 * keylength in bits!
 * message length in bits!
 */
void hmac_sha256(void *dest, const void *key, uint16_t keylength_b, const void *msg, uint32_t msglength_b){ /* a one-shot*/
    22d4:	3f 92       	push	r3
    22d6:	4f 92       	push	r4
    22d8:	5f 92       	push	r5
    22da:	6f 92       	push	r6
    22dc:	7f 92       	push	r7
    22de:	8f 92       	push	r8
    22e0:	9f 92       	push	r9
    22e2:	af 92       	push	r10
    22e4:	bf 92       	push	r11
    22e6:	cf 92       	push	r12
    22e8:	df 92       	push	r13
    22ea:	ef 92       	push	r14
    22ec:	ff 92       	push	r15
    22ee:	0f 93       	push	r16
    22f0:	1f 93       	push	r17
    22f2:	cf 93       	push	r28
    22f4:	df 93       	push	r29
    22f6:	cd b7       	in	r28, 0x3d	; 61
    22f8:	de b7       	in	r29, 0x3e	; 62
    22fa:	c8 56       	subi	r28, 0x68	; 104
    22fc:	d1 09       	sbc	r29, r1
    22fe:	0f b6       	in	r0, 0x3f	; 63
    2300:	f8 94       	cli
    2302:	de bf       	out	0x3e, r29	; 62
    2304:	0f be       	out	0x3f, r0	; 63
    2306:	cd bf       	out	0x3d, r28	; 61
    2308:	1c 01       	movw	r2, r24
    230a:	49 01       	movw	r8, r18
    230c:	a9 96       	adiw	r28, 0x29	; 41
    230e:	ec ae       	std	Y+60, r14	; 0x3c
    2310:	fd ae       	std	Y+61, r15	; 0x3d
    2312:	0e af       	std	Y+62, r16	; 0x3e
    2314:	1f af       	std	Y+63, r17	; 0x3f
    2316:	a9 97       	sbiw	r28, 0x29	; 41
	sha256_ctx_t s;
	uint8_t i;
	uint8_t buffer[HMAC_SHA256_BLOCK_BYTES];
	
	memset(buffer, 0, HMAC_SHA256_BLOCK_BYTES);
    2318:	fe 01       	movw	r30, r28
    231a:	b5 96       	adiw	r30, 0x25	; 37
    231c:	80 e4       	ldi	r24, 0x40	; 64
    231e:	df 01       	movw	r26, r30
    2320:	1d 92       	st	X+, r1
    2322:	8a 95       	dec	r24
    2324:	e9 f7       	brne	.-6      	; 0x2320 <hmac_sha256+0x4e>
	
	/* if key is larger than a block we have to hash it*/
	if (keylength_b > SHA256_BLOCK_BITS){
    2326:	41 30       	cpi	r20, 0x01	; 1
    2328:	b2 e0       	ldi	r27, 0x02	; 2
    232a:	5b 07       	cpc	r21, r27
    232c:	30 f0       	brcs	.+12     	; 0x233a <hmac_sha256+0x68>
		sha256((void*)buffer, key, keylength_b);
    232e:	9a 01       	movw	r18, r20
    2330:	40 e0       	ldi	r20, 0x00	; 0
    2332:	50 e0       	ldi	r21, 0x00	; 0
    2334:	cf 01       	movw	r24, r30
    2336:	e1 d0       	rcall	.+450    	; 0x24fa <sha256>
    2338:	95 c0       	rjmp	.+298    	; 0x2464 <hmac_sha256+0x192>
	} else {
		memcpy(buffer, key, (keylength_b+7)/8);
    233a:	49 5f       	subi	r20, 0xF9	; 249
    233c:	5f 4f       	sbci	r21, 0xFF	; 255
    233e:	56 95       	lsr	r21
    2340:	47 95       	ror	r20
    2342:	56 95       	lsr	r21
    2344:	47 95       	ror	r20
    2346:	56 95       	lsr	r21
    2348:	47 95       	ror	r20
    234a:	ce 01       	movw	r24, r28
    234c:	85 96       	adiw	r24, 0x25	; 37
    234e:	d9 d5       	rcall	.+2994   	; 0x2f02 <memcpy>
    2350:	89 c0       	rjmp	.+274    	; 0x2464 <hmac_sha256+0x192>
	}
	
	for (i=0; i<SHA256_BLOCK_BYTES; ++i){
		buffer[i] ^= IPAD;
    2352:	80 81       	ld	r24, Z
    2354:	89 27       	eor	r24, r25
    2356:	81 93       	st	Z+, r24
		sha256((void*)buffer, key, keylength_b);
	} else {
		memcpy(buffer, key, (keylength_b+7)/8);
	}
	
	for (i=0; i<SHA256_BLOCK_BYTES; ++i){
    2358:	ec 15       	cp	r30, r12
    235a:	fd 05       	cpc	r31, r13
    235c:	d1 f7       	brne	.-12     	; 0x2352 <hmac_sha256+0x80>
		buffer[i] ^= IPAD;
	}
	sha256_init(&s);
    235e:	ce 01       	movw	r24, r28
    2360:	01 96       	adiw	r24, 0x01	; 1
    2362:	a4 d0       	rcall	.+328    	; 0x24ac <sha256_init>
	sha256_nextBlock(&s, buffer);
    2364:	be 01       	movw	r22, r28
    2366:	6b 5d       	subi	r22, 0xDB	; 219
    2368:	7f 4f       	sbci	r23, 0xFF	; 255
    236a:	ce 01       	movw	r24, r28
    236c:	01 96       	adiw	r24, 0x01	; 1
    236e:	a9 d0       	rcall	.+338    	; 0x24c2 <sha256_nextBlock>
	while (msglength_b >= HMAC_SHA256_BLOCK_BITS){
    2370:	a9 96       	adiw	r28, 0x29	; 41
    2372:	8c ad       	ldd	r24, Y+60	; 0x3c
    2374:	9d ad       	ldd	r25, Y+61	; 0x3d
    2376:	ae ad       	ldd	r26, Y+62	; 0x3e
    2378:	bf ad       	ldd	r27, Y+63	; 0x3f
    237a:	a9 97       	sbiw	r28, 0x29	; 41
    237c:	81 15       	cp	r24, r1
    237e:	e2 e0       	ldi	r30, 0x02	; 2
    2380:	9e 07       	cpc	r25, r30
    2382:	a1 05       	cpc	r26, r1
    2384:	b1 05       	cpc	r27, r1
    2386:	08 f4       	brcc	.+2      	; 0x238a <hmac_sha256+0xb8>
    2388:	41 c0       	rjmp	.+130    	; 0x240c <hmac_sha256+0x13a>
    238a:	2c 01       	movw	r4, r24
    238c:	3d 01       	movw	r6, r26
		sha256_nextBlock(&s, msg);
    238e:	54 01       	movw	r10, r8
    2390:	b5 01       	movw	r22, r10
    2392:	ce 01       	movw	r24, r28
    2394:	01 96       	adiw	r24, 0x01	; 1
    2396:	95 d0       	rcall	.+298    	; 0x24c2 <sha256_nextBlock>
		msg = (uint8_t*)msg + HMAC_SHA256_BLOCK_BYTES;
    2398:	f0 e4       	ldi	r31, 0x40	; 64
    239a:	af 0e       	add	r10, r31
    239c:	b1 1c       	adc	r11, r1
		msglength_b -=  HMAC_SHA256_BLOCK_BITS;
    239e:	22 e0       	ldi	r18, 0x02	; 2
    23a0:	52 1a       	sub	r5, r18
    23a2:	61 08       	sbc	r6, r1
    23a4:	71 08       	sbc	r7, r1
	for (i=0; i<SHA256_BLOCK_BYTES; ++i){
		buffer[i] ^= IPAD;
	}
	sha256_init(&s);
	sha256_nextBlock(&s, buffer);
	while (msglength_b >= HMAC_SHA256_BLOCK_BITS){
    23a6:	41 14       	cp	r4, r1
    23a8:	82 e0       	ldi	r24, 0x02	; 2
    23aa:	58 06       	cpc	r5, r24
    23ac:	61 04       	cpc	r6, r1
    23ae:	71 04       	cpc	r7, r1
    23b0:	78 f7       	brcc	.-34     	; 0x2390 <hmac_sha256+0xbe>
    23b2:	a9 96       	adiw	r28, 0x29	; 41
    23b4:	8c ad       	ldd	r24, Y+60	; 0x3c
    23b6:	9d ad       	ldd	r25, Y+61	; 0x3d
    23b8:	ae ad       	ldd	r26, Y+62	; 0x3e
    23ba:	bf ad       	ldd	r27, Y+63	; 0x3f
    23bc:	a9 97       	sbiw	r28, 0x29	; 41
    23be:	92 50       	subi	r25, 0x02	; 2
    23c0:	a1 09       	sbc	r26, r1
    23c2:	b1 09       	sbc	r27, r1
    23c4:	07 2e       	mov	r0, r23
    23c6:	79 e0       	ldi	r23, 0x09	; 9
    23c8:	b6 95       	lsr	r27
    23ca:	a7 95       	ror	r26
    23cc:	97 95       	ror	r25
    23ce:	87 95       	ror	r24
    23d0:	7a 95       	dec	r23
    23d2:	d1 f7       	brne	.-12     	; 0x23c8 <hmac_sha256+0xf6>
    23d4:	70 2d       	mov	r23, r0
    23d6:	01 96       	adiw	r24, 0x01	; 1
    23d8:	00 24       	eor	r0, r0
    23da:	96 95       	lsr	r25
    23dc:	87 95       	ror	r24
    23de:	07 94       	ror	r0
    23e0:	96 95       	lsr	r25
    23e2:	87 95       	ror	r24
    23e4:	07 94       	ror	r0
    23e6:	98 2f       	mov	r25, r24
    23e8:	80 2d       	mov	r24, r0
    23ea:	88 0e       	add	r8, r24
    23ec:	99 1e       	adc	r9, r25
    23ee:	a9 96       	adiw	r28, 0x29	; 41
    23f0:	8c ad       	ldd	r24, Y+60	; 0x3c
    23f2:	9d ad       	ldd	r25, Y+61	; 0x3d
    23f4:	ae ad       	ldd	r26, Y+62	; 0x3e
    23f6:	bf ad       	ldd	r27, Y+63	; 0x3f
    23f8:	a9 97       	sbiw	r28, 0x29	; 41
    23fa:	91 70       	andi	r25, 0x01	; 1
    23fc:	aa 27       	eor	r26, r26
    23fe:	bb 27       	eor	r27, r27
    2400:	a9 96       	adiw	r28, 0x29	; 41
    2402:	8c af       	std	Y+60, r24	; 0x3c
    2404:	9d af       	std	Y+61, r25	; 0x3d
    2406:	ae af       	std	Y+62, r26	; 0x3e
    2408:	bf af       	std	Y+63, r27	; 0x3f
    240a:	a9 97       	sbiw	r28, 0x29	; 41
		sha256_nextBlock(&s, msg);
		msg = (uint8_t*)msg + HMAC_SHA256_BLOCK_BYTES;
		msglength_b -=  HMAC_SHA256_BLOCK_BITS;
	}
	sha256_lastBlock(&s, msg, msglength_b);
    240c:	a7 96       	adiw	r28, 0x27	; 39
    240e:	4e ad       	ldd	r20, Y+62	; 0x3e
    2410:	5f ad       	ldd	r21, Y+63	; 0x3f
    2412:	a7 97       	sbiw	r28, 0x27	; 39
    2414:	b4 01       	movw	r22, r8
    2416:	ce 01       	movw	r24, r28
    2418:	01 96       	adiw	r24, 0x01	; 1
    241a:	55 d0       	rcall	.+170    	; 0x24c6 <sha256_lastBlock>
	/* since buffer still contains key xor ipad we can do ... */
	for (i=0; i<HMAC_SHA256_BLOCK_BYTES; ++i){
		buffer[i] ^= IPAD ^ OPAD;
    241c:	9a e6       	ldi	r25, 0x6A	; 106
    241e:	d8 01       	movw	r26, r16
    2420:	8c 91       	ld	r24, X
    2422:	89 27       	eor	r24, r25
    2424:	f8 01       	movw	r30, r16
    2426:	81 93       	st	Z+, r24
    2428:	8f 01       	movw	r16, r30
		msg = (uint8_t*)msg + HMAC_SHA256_BLOCK_BYTES;
		msglength_b -=  HMAC_SHA256_BLOCK_BITS;
	}
	sha256_lastBlock(&s, msg, msglength_b);
	/* since buffer still contains key xor ipad we can do ... */
	for (i=0; i<HMAC_SHA256_BLOCK_BYTES; ++i){
    242a:	ec 15       	cp	r30, r12
    242c:	fd 05       	cpc	r31, r13
		buffer[i] ^= IPAD ^ OPAD;
	}
	sha256_ctx2hash(dest, &s); /* save inner hash temporary to dest */
    242e:	b9 f7       	brne	.-18     	; 0x241e <hmac_sha256+0x14c>
    2430:	be 01       	movw	r22, r28
    2432:	6f 5f       	subi	r22, 0xFF	; 255
    2434:	7f 4f       	sbci	r23, 0xFF	; 255
    2436:	c1 01       	movw	r24, r2
	sha256_init(&s);
    2438:	48 d0       	rcall	.+144    	; 0x24ca <sha256_ctx2hash>
    243a:	ce 01       	movw	r24, r28
    243c:	01 96       	adiw	r24, 0x01	; 1
	sha256_nextBlock(&s, buffer);
    243e:	36 d0       	rcall	.+108    	; 0x24ac <sha256_init>
    2440:	be 01       	movw	r22, r28
    2442:	6b 5d       	subi	r22, 0xDB	; 219
    2444:	7f 4f       	sbci	r23, 0xFF	; 255
    2446:	ce 01       	movw	r24, r28
    2448:	01 96       	adiw	r24, 0x01	; 1
	sha256_lastBlock(&s, dest, SHA256_HASH_BITS);
    244a:	3b d0       	rcall	.+118    	; 0x24c2 <sha256_nextBlock>
    244c:	40 e0       	ldi	r20, 0x00	; 0
    244e:	51 e0       	ldi	r21, 0x01	; 1
    2450:	b1 01       	movw	r22, r2
    2452:	ce 01       	movw	r24, r28
    2454:	01 96       	adiw	r24, 0x01	; 1
	sha256_ctx2hash(dest, &s);
    2456:	37 d0       	rcall	.+110    	; 0x24c6 <sha256_lastBlock>
    2458:	be 01       	movw	r22, r28
    245a:	6f 5f       	subi	r22, 0xFF	; 255
    245c:	7f 4f       	sbci	r23, 0xFF	; 255
    245e:	c1 01       	movw	r24, r2
    2460:	34 d0       	rcall	.+104    	; 0x24ca <sha256_ctx2hash>
}
    2462:	0a c0       	rjmp	.+20     	; 0x2478 <hmac_sha256+0x1a6>
    2464:	8e 01       	movw	r16, r28
    2466:	0b 5d       	subi	r16, 0xDB	; 219
    2468:	1f 4f       	sbci	r17, 0xFF	; 255
    246a:	6e 01       	movw	r12, r28
    246c:	f5 e6       	ldi	r31, 0x65	; 101
    246e:	cf 0e       	add	r12, r31
    2470:	d1 1c       	adc	r13, r1

/*
 * keylength in bits!
 * message length in bits!
 */
void hmac_sha256(void *dest, const void *key, uint16_t keylength_b, const void *msg, uint32_t msglength_b){ /* a one-shot*/
    2472:	f8 01       	movw	r30, r16
	} else {
		memcpy(buffer, key, (keylength_b+7)/8);
	}
	
	for (i=0; i<SHA256_BLOCK_BYTES; ++i){
		buffer[i] ^= IPAD;
    2474:	96 e3       	ldi	r25, 0x36	; 54
    2476:	6d cf       	rjmp	.-294    	; 0x2352 <hmac_sha256+0x80>
	sha256_ctx2hash(dest, &s); /* save inner hash temporary to dest */
	sha256_init(&s);
	sha256_nextBlock(&s, buffer);
	sha256_lastBlock(&s, dest, SHA256_HASH_BITS);
	sha256_ctx2hash(dest, &s);
}
    2478:	c8 59       	subi	r28, 0x98	; 152
    247a:	df 4f       	sbci	r29, 0xFF	; 255
    247c:	0f b6       	in	r0, 0x3f	; 63
    247e:	f8 94       	cli
    2480:	de bf       	out	0x3e, r29	; 62
    2482:	0f be       	out	0x3f, r0	; 63
    2484:	cd bf       	out	0x3d, r28	; 61
    2486:	df 91       	pop	r29
    2488:	cf 91       	pop	r28
    248a:	1f 91       	pop	r17
    248c:	0f 91       	pop	r16
    248e:	ff 90       	pop	r15
    2490:	ef 90       	pop	r14
    2492:	df 90       	pop	r13
    2494:	cf 90       	pop	r12
    2496:	bf 90       	pop	r11
    2498:	af 90       	pop	r10
    249a:	9f 90       	pop	r9
    249c:	8f 90       	pop	r8
    249e:	7f 90       	pop	r7
    24a0:	6f 90       	pop	r6
    24a2:	5f 90       	pop	r5
    24a4:	4f 90       	pop	r4
    24a6:	3f 90       	pop	r3
    24a8:	2f 90       	pop	r2
    24aa:	08 95       	ret

000024ac <sha256_init>:
 * \c sh256_init c initialises the given sha256 context for hashing
 * @param state pointer to a sha256 context
 * @return none
 */
void sha256_init(sha256_ctx_t *state){
	state->length=0;
    24ac:	fc 01       	movw	r30, r24
    24ae:	10 a2       	std	Z+32, r1	; 0x20
    24b0:	11 a2       	std	Z+33, r1	; 0x21
    24b2:	12 a2       	std	Z+34, r1	; 0x22
    24b4:	13 a2       	std	Z+35, r1	; 0x23
	memcpy_P(state->h, sha256_init_vector, 8*4);
    24b6:	40 e2       	ldi	r20, 0x20	; 32
    24b8:	50 e0       	ldi	r21, 0x00	; 0
    24ba:	64 e9       	ldi	r22, 0x94	; 148
    24bc:	70 e0       	ldi	r23, 0x00	; 0
    24be:	0b c5       	rjmp	.+2582   	; 0x2ed6 <memcpy_P>
    24c0:	08 95       	ret

000024c2 <sha256_nextBlock>:
}

/*************************************************************************/
void sha256_nextBlock (sha256_ctx_t *state, const void *block){
	sha2_small_common_nextBlock(state, block);
    24c2:	92 c0       	rjmp	.+292    	; 0x25e8 <sha2_small_common_nextBlock>
    24c4:	08 95       	ret

000024c6 <sha256_lastBlock>:
}

/*************************************************************************/
void sha256_lastBlock (sha256_ctx_t *state, const void *block, uint16_t length_b){
	sha2_small_common_lastBlock(state, block, length_b);
    24c6:	a0 c3       	rjmp	.+1856   	; 0x2c08 <sha2_small_common_lastBlock>
    24c8:	08 95       	ret

000024ca <sha256_ctx2hash>:



/*************************************************************************/

void sha256_ctx2hash(void *dest, const sha256_ctx_t *state){
    24ca:	cf 93       	push	r28
    24cc:	df 93       	push	r29
    24ce:	ac 01       	movw	r20, r24
    24d0:	ec 01       	movw	r28, r24
    24d2:	a0 96       	adiw	r28, 0x20	; 32
    24d4:	fa 01       	movw	r30, r20
#if defined LITTLE_ENDIAN
	uint8_t i, j, *s=(uint8_t*)(state->h);
	i=8;
	do{
		j=3;
    24d6:	93 e0       	ldi	r25, 0x03	; 3
		do{
			*((uint8_t*)dest) = s[j];
    24d8:	db 01       	movw	r26, r22
    24da:	a9 0f       	add	r26, r25
    24dc:	b1 1d       	adc	r27, r1
    24de:	2c 91       	ld	r18, X
    24e0:	21 93       	st	Z+, r18
			dest = (uint8_t*)dest + 1;
		}while(j--);
    24e2:	91 50       	subi	r25, 0x01	; 1
    24e4:	c8 f7       	brcc	.-14     	; 0x24d8 <sha256_ctx2hash+0xe>
    24e6:	4c 5f       	subi	r20, 0xFC	; 252
    24e8:	5f 4f       	sbci	r21, 0xFF	; 255
		s += 4;
    24ea:	6c 5f       	subi	r22, 0xFC	; 252
    24ec:	7f 4f       	sbci	r23, 0xFF	; 255
	}while(--i);
    24ee:	4c 17       	cp	r20, r28
    24f0:	5d 07       	cpc	r21, r29
    24f2:	81 f7       	brne	.-32     	; 0x24d4 <sha256_ctx2hash+0xa>
#elif BIG_ENDIAN
	memcpy(dest, state->h, 32);
#else
# error unsupported endian type!
#endif
}
    24f4:	df 91       	pop	r29
    24f6:	cf 91       	pop	r28
    24f8:	08 95       	ret

000024fa <sha256>:
/*************************************************************************/

/*
 * length in bits!
 */
void sha256(void *dest, const void *msg, uint32_t length_b){ /* length could be choosen longer but this is for µC */
    24fa:	4f 92       	push	r4
    24fc:	5f 92       	push	r5
    24fe:	6f 92       	push	r6
    2500:	7f 92       	push	r7
    2502:	8f 92       	push	r8
    2504:	9f 92       	push	r9
    2506:	af 92       	push	r10
    2508:	bf 92       	push	r11
    250a:	cf 92       	push	r12
    250c:	df 92       	push	r13
    250e:	ef 92       	push	r14
    2510:	ff 92       	push	r15
    2512:	0f 93       	push	r16
    2514:	1f 93       	push	r17
    2516:	cf 93       	push	r28
    2518:	df 93       	push	r29
    251a:	cd b7       	in	r28, 0x3d	; 61
    251c:	de b7       	in	r29, 0x3e	; 62
    251e:	a4 97       	sbiw	r28, 0x24	; 36
    2520:	0f b6       	in	r0, 0x3f	; 63
    2522:	f8 94       	cli
    2524:	de bf       	out	0x3e, r29	; 62
    2526:	0f be       	out	0x3f, r0	; 63
    2528:	cd bf       	out	0x3d, r28	; 61
    252a:	4c 01       	movw	r8, r24
    252c:	5b 01       	movw	r10, r22
    252e:	69 01       	movw	r12, r18
    2530:	7a 01       	movw	r14, r20
	sha256_ctx_t s;
	sha256_init(&s);
    2532:	ce 01       	movw	r24, r28
    2534:	01 96       	adiw	r24, 0x01	; 1
    2536:	ba df       	rcall	.-140    	; 0x24ac <sha256_init>
	while(length_b >= SHA256_BLOCK_BITS){
    2538:	c1 14       	cp	r12, r1
    253a:	82 e0       	ldi	r24, 0x02	; 2
    253c:	d8 06       	cpc	r13, r24
    253e:	e1 04       	cpc	r14, r1
    2540:	f1 04       	cpc	r15, r1
    2542:	88 f1       	brcs	.+98     	; 0x25a6 <sha256+0xac>
    2544:	26 01       	movw	r4, r12
    2546:	37 01       	movw	r6, r14
    2548:	85 01       	movw	r16, r10
	memcpy_P(state->h, sha256_init_vector, 8*4);
}

/*************************************************************************/
void sha256_nextBlock (sha256_ctx_t *state, const void *block){
	sha2_small_common_nextBlock(state, block);
    254a:	b8 01       	movw	r22, r16
    254c:	ce 01       	movw	r24, r28
    254e:	01 96       	adiw	r24, 0x01	; 1
    2550:	4b d0       	rcall	.+150    	; 0x25e8 <sha2_small_common_nextBlock>
void sha256(void *dest, const void *msg, uint32_t length_b){ /* length could be choosen longer but this is for µC */
	sha256_ctx_t s;
	sha256_init(&s);
	while(length_b >= SHA256_BLOCK_BITS){
		sha256_nextBlock(&s, msg);
		msg = (uint8_t*)msg + SHA256_BLOCK_BITS/8;
    2552:	00 5c       	subi	r16, 0xC0	; 192
    2554:	1f 4f       	sbci	r17, 0xFF	; 255
		length_b -= SHA256_BLOCK_BITS;
    2556:	82 e0       	ldi	r24, 0x02	; 2
    2558:	58 1a       	sub	r5, r24
    255a:	61 08       	sbc	r6, r1
    255c:	71 08       	sbc	r7, r1
 * length in bits!
 */
void sha256(void *dest, const void *msg, uint32_t length_b){ /* length could be choosen longer but this is for µC */
	sha256_ctx_t s;
	sha256_init(&s);
	while(length_b >= SHA256_BLOCK_BITS){
    255e:	41 14       	cp	r4, r1
    2560:	82 e0       	ldi	r24, 0x02	; 2
    2562:	58 06       	cpc	r5, r24
    2564:	61 04       	cpc	r6, r1
    2566:	71 04       	cpc	r7, r1
    2568:	80 f7       	brcc	.-32     	; 0x254a <sha256+0x50>
    256a:	d7 01       	movw	r26, r14
    256c:	c6 01       	movw	r24, r12
    256e:	92 50       	subi	r25, 0x02	; 2
    2570:	a1 09       	sbc	r26, r1
    2572:	b1 09       	sbc	r27, r1
    2574:	07 2e       	mov	r0, r23
    2576:	79 e0       	ldi	r23, 0x09	; 9
    2578:	b6 95       	lsr	r27
    257a:	a7 95       	ror	r26
    257c:	97 95       	ror	r25
    257e:	87 95       	ror	r24
    2580:	7a 95       	dec	r23
    2582:	d1 f7       	brne	.-12     	; 0x2578 <sha256+0x7e>
    2584:	70 2d       	mov	r23, r0
    2586:	01 96       	adiw	r24, 0x01	; 1
    2588:	00 24       	eor	r0, r0
    258a:	96 95       	lsr	r25
    258c:	87 95       	ror	r24
    258e:	07 94       	ror	r0
    2590:	96 95       	lsr	r25
    2592:	87 95       	ror	r24
    2594:	07 94       	ror	r0
    2596:	98 2f       	mov	r25, r24
    2598:	80 2d       	mov	r24, r0
    259a:	a8 0e       	add	r10, r24
    259c:	b9 1e       	adc	r11, r25
    259e:	81 e0       	ldi	r24, 0x01	; 1
    25a0:	d8 22       	and	r13, r24
    25a2:	ee 24       	eor	r14, r14
    25a4:	ff 24       	eor	r15, r15
	sha2_small_common_nextBlock(state, block);
}

/*************************************************************************/
void sha256_lastBlock (sha256_ctx_t *state, const void *block, uint16_t length_b){
	sha2_small_common_lastBlock(state, block, length_b);
    25a6:	a6 01       	movw	r20, r12
    25a8:	b5 01       	movw	r22, r10
    25aa:	ce 01       	movw	r24, r28
    25ac:	01 96       	adiw	r24, 0x01	; 1
    25ae:	2c d3       	rcall	.+1624   	; 0x2c08 <sha2_small_common_lastBlock>
		sha256_nextBlock(&s, msg);
		msg = (uint8_t*)msg + SHA256_BLOCK_BITS/8;
		length_b -= SHA256_BLOCK_BITS;
	}
	sha256_lastBlock(&s, msg, length_b);
	sha256_ctx2hash(dest,&s);
    25b0:	be 01       	movw	r22, r28
    25b2:	6f 5f       	subi	r22, 0xFF	; 255
    25b4:	7f 4f       	sbci	r23, 0xFF	; 255
    25b6:	c4 01       	movw	r24, r8
    25b8:	88 df       	rcall	.-240    	; 0x24ca <sha256_ctx2hash>
}
    25ba:	a4 96       	adiw	r28, 0x24	; 36
    25bc:	0f b6       	in	r0, 0x3f	; 63
    25be:	f8 94       	cli
    25c0:	de bf       	out	0x3e, r29	; 62
    25c2:	0f be       	out	0x3f, r0	; 63
    25c4:	cd bf       	out	0x3d, r28	; 61
    25c6:	df 91       	pop	r29
    25c8:	cf 91       	pop	r28
    25ca:	1f 91       	pop	r17
    25cc:	0f 91       	pop	r16
    25ce:	ff 90       	pop	r15
    25d0:	ef 90       	pop	r14
    25d2:	df 90       	pop	r13
    25d4:	cf 90       	pop	r12
    25d6:	bf 90       	pop	r11
    25d8:	af 90       	pop	r10
    25da:	9f 90       	pop	r9
    25dc:	8f 90       	pop	r8
    25de:	7f 90       	pop	r7
    25e0:	6f 90       	pop	r6
    25e2:	5f 90       	pop	r5
    25e4:	4f 90       	pop	r4
    25e6:	08 95       	ret

000025e8 <sha2_small_common_nextBlock>:


/**
 * block must be, 512, Bit = 64, Byte, long !!!
 */
void sha2_small_common_nextBlock (sha2_small_common_ctx_t *state, const void *block){
    25e8:	2f 92       	push	r2
    25ea:	3f 92       	push	r3
    25ec:	4f 92       	push	r4
    25ee:	5f 92       	push	r5
    25f0:	6f 92       	push	r6
    25f2:	7f 92       	push	r7
    25f4:	8f 92       	push	r8
    25f6:	9f 92       	push	r9
    25f8:	af 92       	push	r10
    25fa:	bf 92       	push	r11
    25fc:	cf 92       	push	r12
    25fe:	df 92       	push	r13
    2600:	ef 92       	push	r14
    2602:	ff 92       	push	r15
    2604:	0f 93       	push	r16
    2606:	1f 93       	push	r17
    2608:	cf 93       	push	r28
    260a:	df 93       	push	r29
    260c:	cd b7       	in	r28, 0x3d	; 61
    260e:	de b7       	in	r29, 0x3e	; 62
    2610:	cb 56       	subi	r28, 0x6B	; 107
    2612:	d1 09       	sbc	r29, r1
    2614:	0f b6       	in	r0, 0x3f	; 63
    2616:	f8 94       	cli
    2618:	de bf       	out	0x3e, r29	; 62
    261a:	0f be       	out	0x3f, r0	; 63
    261c:	cd bf       	out	0x3d, r28	; 61
    261e:	ac 96       	adiw	r28, 0x2c	; 44
    2620:	9f af       	std	Y+63, r25	; 0x3f
    2622:	8e af       	std	Y+62, r24	; 0x3e
    2624:	ac 97       	sbiw	r28, 0x2c	; 44
    2626:	9e 01       	movw	r18, r28
    2628:	2f 5f       	subi	r18, 0xFF	; 255
    262a:	3f 4f       	sbci	r19, 0xFF	; 255
    262c:	a8 96       	adiw	r28, 0x28	; 40
    262e:	3f af       	std	Y+63, r19	; 0x3f
    2630:	2e af       	std	Y+62, r18	; 0x3e
    2632:	a8 97       	sbiw	r28, 0x28	; 40
    2634:	20 5c       	subi	r18, 0xC0	; 192
    2636:	3f 4f       	sbci	r19, 0xFF	; 255
    2638:	a8 96       	adiw	r28, 0x28	; 40
    263a:	ee ad       	ldd	r30, Y+62	; 0x3e
    263c:	ff ad       	ldd	r31, Y+63	; 0x3f
    263e:	a8 97       	sbiw	r28, 0x28	; 40
    2640:	af 01       	movw	r20, r30
	uint32_t a[8],t1,t2;

	/* init w */
#if defined LITTLE_ENDIAN
	for (i=0; i<16; ++i){
		w[i]= change_endian32(((uint32_t*)block)[i]);
    2642:	fb 01       	movw	r30, r22
    2644:	81 91       	ld	r24, Z+
    2646:	91 91       	ld	r25, Z+
    2648:	a1 91       	ld	r26, Z+
    264a:	b1 91       	ld	r27, Z+
    264c:	bf 01       	movw	r22, r30
    264e:	b8 2e       	mov	r11, r24
    2650:	aa 24       	eor	r10, r10
    2652:	99 24       	eor	r9, r9
    2654:	88 24       	eor	r8, r8
    2656:	cb 2e       	mov	r12, r27
    2658:	dd 24       	eor	r13, r13
    265a:	ee 24       	eor	r14, r14
    265c:	ff 24       	eor	r15, r15
    265e:	c8 28       	or	r12, r8
    2660:	d9 28       	or	r13, r9
    2662:	ea 28       	or	r14, r10
    2664:	fb 28       	or	r15, r11
    2666:	4c 01       	movw	r8, r24
    2668:	5d 01       	movw	r10, r26
    266a:	88 24       	eor	r8, r8
    266c:	aa 24       	eor	r10, r10
    266e:	bb 24       	eor	r11, r11
    2670:	ba 2c       	mov	r11, r10
    2672:	a9 2c       	mov	r10, r9
    2674:	98 2c       	mov	r9, r8
    2676:	88 24       	eor	r8, r8
    2678:	c8 28       	or	r12, r8
    267a:	d9 28       	or	r13, r9
    267c:	ea 28       	or	r14, r10
    267e:	fb 28       	or	r15, r11
    2680:	88 27       	eor	r24, r24
    2682:	99 27       	eor	r25, r25
    2684:	bb 27       	eor	r27, r27
    2686:	89 2f       	mov	r24, r25
    2688:	9a 2f       	mov	r25, r26
    268a:	ab 2f       	mov	r26, r27
    268c:	bb 27       	eor	r27, r27
    268e:	8c 29       	or	r24, r12
    2690:	9d 29       	or	r25, r13
    2692:	ae 29       	or	r26, r14
    2694:	bf 29       	or	r27, r15
    2696:	fa 01       	movw	r30, r20
    2698:	81 93       	st	Z+, r24
    269a:	91 93       	st	Z+, r25
    269c:	a1 93       	st	Z+, r26
    269e:	b1 93       	st	Z+, r27
    26a0:	af 01       	movw	r20, r30
	uint8_t  i;
	uint32_t a[8],t1,t2;

	/* init w */
#if defined LITTLE_ENDIAN
	for (i=0; i<16; ++i){
    26a2:	e2 17       	cp	r30, r18
    26a4:	f3 07       	cpc	r31, r19
    26a6:	69 f6       	brne	.-102    	; 0x2642 <sha2_small_common_nextBlock+0x5a>
	for (i=16; i<64; ++i){
		w[i] = SIGMA_b(w[i-2]) + w[i-7] + SIGMA_a(w[i-15]) + w[i-16];
	}
*/
/* init working variables */
	memcpy((void*)a,(void*)(state->h), 8*4);
    26a8:	80 e2       	ldi	r24, 0x20	; 32
    26aa:	ac 96       	adiw	r28, 0x2c	; 44
    26ac:	ee ad       	ldd	r30, Y+62	; 0x3e
    26ae:	ff ad       	ldd	r31, Y+63	; 0x3f
    26b0:	ac 97       	sbiw	r28, 0x2c	; 44
    26b2:	de 01       	movw	r26, r28
    26b4:	af 5b       	subi	r26, 0xBF	; 191
    26b6:	bf 4f       	sbci	r27, 0xFF	; 255
    26b8:	01 90       	ld	r0, Z+
    26ba:	0d 92       	st	X+, r0
    26bc:	8a 95       	dec	r24
    26be:	e1 f7       	brne	.-8      	; 0x26b8 <sha2_small_common_nextBlock+0xd0>
    26c0:	0f 2e       	mov	r0, r31
    26c2:	f4 eb       	ldi	r31, 0xB4	; 180
    26c4:	2f 2e       	mov	r2, r31
    26c6:	f0 e0       	ldi	r31, 0x00	; 0
    26c8:	3f 2e       	mov	r3, r31
    26ca:	f0 2d       	mov	r31, r0

/* do the, fun stuff, */
	for (i=0; i<64; ++i){
    26cc:	a6 96       	adiw	r28, 0x26	; 38
    26ce:	1f ae       	std	Y+63, r1	; 0x3f
    26d0:	a6 97       	sbiw	r28, 0x26	; 38
			memmove(&(w[0]), &(w[1]), 15*4);
			w[15] = wx;
		}
		t1 = a[7] + SIGMA_1(a[4]) + CH(a[4],a[5],a[6]) + pgm_read_dword(&k[i]) + wx;
		t2 = SIGMA_0(a[0]) + MAJ(a[0],a[1],a[2]);
		memmove(&(a[1]), &(a[0]), 7*4); 	/* a[7]=a[6]; a[6]=a[5]; a[5]=a[4]; a[4]=a[3]; a[3]=a[2]; a[2]=a[1]; a[1]=a[0]; */
    26d2:	21 e4       	ldi	r18, 0x41	; 65
    26d4:	30 e0       	ldi	r19, 0x00	; 0
    26d6:	2c 0f       	add	r18, r28
    26d8:	3d 1f       	adc	r19, r29
    26da:	2c 5f       	subi	r18, 0xFC	; 252
    26dc:	3f 4f       	sbci	r19, 0xFF	; 255
    26de:	aa 96       	adiw	r28, 0x2a	; 42
    26e0:	3f af       	std	Y+63, r19	; 0x3f
    26e2:	2e af       	std	Y+62, r18	; 0x3e
    26e4:	aa 97       	sbiw	r28, 0x2a	; 42
/* init working variables */
	memcpy((void*)a,(void*)(state->h), 8*4);

/* do the, fun stuff, */
	for (i=0; i<64; ++i){
		if(i<16){
    26e6:	a6 96       	adiw	r28, 0x26	; 38
    26e8:	3f ad       	ldd	r19, Y+63	; 0x3f
    26ea:	a6 97       	sbiw	r28, 0x26	; 38
    26ec:	30 31       	cpi	r19, 0x10	; 16
    26ee:	48 f4       	brcc	.+18     	; 0x2702 <sha2_small_common_nextBlock+0x11a>
			wx = w[i];
    26f0:	a8 96       	adiw	r28, 0x28	; 40
    26f2:	ae ad       	ldd	r26, Y+62	; 0x3e
    26f4:	bf ad       	ldd	r27, Y+63	; 0x3f
    26f6:	a8 97       	sbiw	r28, 0x28	; 40
    26f8:	cd 90       	ld	r12, X+
    26fa:	dd 90       	ld	r13, X+
    26fc:	ed 90       	ld	r14, X+
    26fe:	fc 90       	ld	r15, X
    2700:	b8 c0       	rjmp	.+368    	; 0x2872 <sha2_small_common_nextBlock+0x28a>
		}else{
			wx = SIGMA_b(w[14]) + w[9] + SIGMA_a(w[1]) + w[0];
    2702:	89 ad       	ldd	r24, Y+57	; 0x39
    2704:	9a ad       	ldd	r25, Y+58	; 0x3a
    2706:	ab ad       	ldd	r26, Y+59	; 0x3b
    2708:	bc ad       	ldd	r27, Y+60	; 0x3c
    270a:	8d 80       	ldd	r8, Y+5	; 0x05
    270c:	9e 80       	ldd	r9, Y+6	; 0x06
    270e:	af 80       	ldd	r10, Y+7	; 0x07
    2710:	b8 84       	ldd	r11, Y+8	; 0x08
    2712:	6c 01       	movw	r12, r24
    2714:	7d 01       	movw	r14, r26
    2716:	0b 2e       	mov	r0, r27
    2718:	bd e0       	ldi	r27, 0x0D	; 13
    271a:	cc 0c       	add	r12, r12
    271c:	dd 1c       	adc	r13, r13
    271e:	ee 1c       	adc	r14, r14
    2720:	ff 1c       	adc	r15, r15
    2722:	ba 95       	dec	r27
    2724:	d1 f7       	brne	.-12     	; 0x271a <sha2_small_common_nextBlock+0x132>
    2726:	b0 2d       	mov	r27, r0
    2728:	ac 01       	movw	r20, r24
    272a:	bd 01       	movw	r22, r26
    272c:	03 2e       	mov	r0, r19
    272e:	33 e1       	ldi	r19, 0x13	; 19
    2730:	76 95       	lsr	r23
    2732:	67 95       	ror	r22
    2734:	57 95       	ror	r21
    2736:	47 95       	ror	r20
    2738:	3a 95       	dec	r19
    273a:	d1 f7       	brne	.-12     	; 0x2730 <sha2_small_common_nextBlock+0x148>
    273c:	30 2d       	mov	r19, r0
    273e:	97 01       	movw	r18, r14
    2740:	86 01       	movw	r16, r12
    2742:	04 2b       	or	r16, r20
    2744:	15 2b       	or	r17, r21
    2746:	26 2b       	or	r18, r22
    2748:	37 2b       	or	r19, r23
    274a:	6c 01       	movw	r12, r24
    274c:	7d 01       	movw	r14, r26
    274e:	0b 2e       	mov	r0, r27
    2750:	bf e0       	ldi	r27, 0x0F	; 15
    2752:	cc 0c       	add	r12, r12
    2754:	dd 1c       	adc	r13, r13
    2756:	ee 1c       	adc	r14, r14
    2758:	ff 1c       	adc	r15, r15
    275a:	ba 95       	dec	r27
    275c:	d1 f7       	brne	.-12     	; 0x2752 <sha2_small_common_nextBlock+0x16a>
    275e:	b0 2d       	mov	r27, r0
    2760:	ac 01       	movw	r20, r24
    2762:	bd 01       	movw	r22, r26
    2764:	03 2e       	mov	r0, r19
    2766:	31 e1       	ldi	r19, 0x11	; 17
    2768:	76 95       	lsr	r23
    276a:	67 95       	ror	r22
    276c:	57 95       	ror	r21
    276e:	47 95       	ror	r20
    2770:	3a 95       	dec	r19
    2772:	d1 f7       	brne	.-12     	; 0x2768 <sha2_small_common_nextBlock+0x180>
    2774:	30 2d       	mov	r19, r0
    2776:	4c 29       	or	r20, r12
    2778:	5d 29       	or	r21, r13
    277a:	6e 29       	or	r22, r14
    277c:	7f 29       	or	r23, r15
    277e:	68 01       	movw	r12, r16
    2780:	79 01       	movw	r14, r18
    2782:	c4 26       	eor	r12, r20
    2784:	d5 26       	eor	r13, r21
    2786:	e6 26       	eor	r14, r22
    2788:	f7 26       	eor	r15, r23
    278a:	07 2e       	mov	r0, r23
    278c:	7a e0       	ldi	r23, 0x0A	; 10
    278e:	b6 95       	lsr	r27
    2790:	a7 95       	ror	r26
    2792:	97 95       	ror	r25
    2794:	87 95       	ror	r24
    2796:	7a 95       	dec	r23
    2798:	d1 f7       	brne	.-12     	; 0x278e <sha2_small_common_nextBlock+0x1a6>
    279a:	70 2d       	mov	r23, r0
    279c:	8c 25       	eor	r24, r12
    279e:	9d 25       	eor	r25, r13
    27a0:	ae 25       	eor	r26, r14
    27a2:	bf 25       	eor	r27, r15
    27a4:	cd a0       	ldd	r12, Y+37	; 0x25
    27a6:	de a0       	ldd	r13, Y+38	; 0x26
    27a8:	ef a0       	ldd	r14, Y+39	; 0x27
    27aa:	f8 a4       	ldd	r15, Y+40	; 0x28
    27ac:	49 81       	ldd	r20, Y+1	; 0x01
    27ae:	5a 81       	ldd	r21, Y+2	; 0x02
    27b0:	6b 81       	ldd	r22, Y+3	; 0x03
    27b2:	7c 81       	ldd	r23, Y+4	; 0x04
    27b4:	c4 0e       	add	r12, r20
    27b6:	d5 1e       	adc	r13, r21
    27b8:	e6 1e       	adc	r14, r22
    27ba:	f7 1e       	adc	r15, r23
    27bc:	8c 0d       	add	r24, r12
    27be:	9d 1d       	adc	r25, r13
    27c0:	ae 1d       	adc	r26, r14
    27c2:	bf 1d       	adc	r27, r15
    27c4:	75 01       	movw	r14, r10
    27c6:	64 01       	movw	r12, r8
    27c8:	0b 2e       	mov	r0, r27
    27ca:	be e0       	ldi	r27, 0x0E	; 14
    27cc:	cc 0c       	add	r12, r12
    27ce:	dd 1c       	adc	r13, r13
    27d0:	ee 1c       	adc	r14, r14
    27d2:	ff 1c       	adc	r15, r15
    27d4:	ba 95       	dec	r27
    27d6:	d1 f7       	brne	.-12     	; 0x27cc <sha2_small_common_nextBlock+0x1e4>
    27d8:	b0 2d       	mov	r27, r0
    27da:	b5 01       	movw	r22, r10
    27dc:	a4 01       	movw	r20, r8
    27de:	03 2e       	mov	r0, r19
    27e0:	32 e1       	ldi	r19, 0x12	; 18
    27e2:	76 95       	lsr	r23
    27e4:	67 95       	ror	r22
    27e6:	57 95       	ror	r21
    27e8:	47 95       	ror	r20
    27ea:	3a 95       	dec	r19
    27ec:	d1 f7       	brne	.-12     	; 0x27e2 <sha2_small_common_nextBlock+0x1fa>
    27ee:	30 2d       	mov	r19, r0
    27f0:	c4 2a       	or	r12, r20
    27f2:	d5 2a       	or	r13, r21
    27f4:	e6 2a       	or	r14, r22
    27f6:	f7 2a       	or	r15, r23
    27f8:	b5 01       	movw	r22, r10
    27fa:	a4 01       	movw	r20, r8
    27fc:	68 94       	set
    27fe:	16 f8       	bld	r1, 6
    2800:	76 95       	lsr	r23
    2802:	67 95       	ror	r22
    2804:	57 95       	ror	r21
    2806:	47 95       	ror	r20
    2808:	16 94       	lsr	r1
    280a:	d1 f7       	brne	.-12     	; 0x2800 <sha2_small_common_nextBlock+0x218>
    280c:	95 01       	movw	r18, r10
    280e:	84 01       	movw	r16, r8
    2810:	0f 2e       	mov	r0, r31
    2812:	f9 e1       	ldi	r31, 0x19	; 25
    2814:	00 0f       	add	r16, r16
    2816:	11 1f       	adc	r17, r17
    2818:	22 1f       	adc	r18, r18
    281a:	33 1f       	adc	r19, r19
    281c:	fa 95       	dec	r31
    281e:	d1 f7       	brne	.-12     	; 0x2814 <sha2_small_common_nextBlock+0x22c>
    2820:	f0 2d       	mov	r31, r0
    2822:	40 2b       	or	r20, r16
    2824:	51 2b       	or	r21, r17
    2826:	62 2b       	or	r22, r18
    2828:	73 2b       	or	r23, r19
    282a:	c4 26       	eor	r12, r20
    282c:	d5 26       	eor	r13, r21
    282e:	e6 26       	eor	r14, r22
    2830:	f7 26       	eor	r15, r23
    2832:	68 94       	set
    2834:	12 f8       	bld	r1, 2
    2836:	b6 94       	lsr	r11
    2838:	a7 94       	ror	r10
    283a:	97 94       	ror	r9
    283c:	87 94       	ror	r8
    283e:	16 94       	lsr	r1
    2840:	d1 f7       	brne	.-12     	; 0x2836 <sha2_small_common_nextBlock+0x24e>
    2842:	8c 24       	eor	r8, r12
    2844:	9d 24       	eor	r9, r13
    2846:	ae 24       	eor	r10, r14
    2848:	bf 24       	eor	r11, r15
    284a:	6c 01       	movw	r12, r24
    284c:	7d 01       	movw	r14, r26
    284e:	c8 0c       	add	r12, r8
    2850:	d9 1c       	adc	r13, r9
    2852:	ea 1c       	adc	r14, r10
    2854:	fb 1c       	adc	r15, r11
			memmove(&(w[0]), &(w[1]), 15*4);
    2856:	4c e3       	ldi	r20, 0x3C	; 60
    2858:	50 e0       	ldi	r21, 0x00	; 0
    285a:	be 01       	movw	r22, r28
    285c:	6b 5f       	subi	r22, 0xFB	; 251
    285e:	7f 4f       	sbci	r23, 0xFF	; 255
    2860:	ce 01       	movw	r24, r28
    2862:	01 96       	adiw	r24, 0x01	; 1
    2864:	57 d3       	rcall	.+1710   	; 0x2f14 <memmove>
			w[15] = wx;
    2866:	21 96       	adiw	r28, 0x01	; 1
    2868:	cc ae       	std	Y+60, r12	; 0x3c
    286a:	dd ae       	std	Y+61, r13	; 0x3d
    286c:	ee ae       	std	Y+62, r14	; 0x3e
    286e:	ff ae       	std	Y+63, r15	; 0x3f
    2870:	21 97       	sbiw	r28, 0x01	; 1
		}
		t1 = a[7] + SIGMA_1(a[4]) + CH(a[4],a[5],a[6]) + pgm_read_dword(&k[i]) + wx;
    2872:	65 96       	adiw	r28, 0x15	; 21
    2874:	8c ad       	ldd	r24, Y+60	; 0x3c
    2876:	9d ad       	ldd	r25, Y+61	; 0x3d
    2878:	ae ad       	ldd	r26, Y+62	; 0x3e
    287a:	bf ad       	ldd	r27, Y+63	; 0x3f
    287c:	65 97       	sbiw	r28, 0x15	; 21
    287e:	f1 01       	movw	r30, r2
    2880:	25 91       	lpm	r18, Z+
    2882:	35 91       	lpm	r19, Z+
    2884:	45 91       	lpm	r20, Z+
    2886:	54 91       	lpm	r21, Z
    2888:	a5 96       	adiw	r28, 0x25	; 37
    288a:	2c af       	std	Y+60, r18	; 0x3c
    288c:	3d af       	std	Y+61, r19	; 0x3d
    288e:	4e af       	std	Y+62, r20	; 0x3e
    2890:	5f af       	std	Y+63, r21	; 0x3f
    2892:	a5 97       	sbiw	r28, 0x25	; 37
    2894:	4c 01       	movw	r8, r24
    2896:	5d 01       	movw	r10, r26
    2898:	80 94       	com	r8
    289a:	90 94       	com	r9
    289c:	a0 94       	com	r10
    289e:	b0 94       	com	r11
    28a0:	6d 96       	adiw	r28, 0x1d	; 29
    28a2:	4c ad       	ldd	r20, Y+60	; 0x3c
    28a4:	5d ad       	ldd	r21, Y+61	; 0x3d
    28a6:	6e ad       	ldd	r22, Y+62	; 0x3e
    28a8:	7f ad       	ldd	r23, Y+63	; 0x3f
    28aa:	6d 97       	sbiw	r28, 0x1d	; 29
    28ac:	84 22       	and	r8, r20
    28ae:	95 22       	and	r9, r21
    28b0:	a6 22       	and	r10, r22
    28b2:	b7 22       	and	r11, r23
    28b4:	69 96       	adiw	r28, 0x19	; 25
    28b6:	4c ad       	ldd	r20, Y+60	; 0x3c
    28b8:	5d ad       	ldd	r21, Y+61	; 0x3d
    28ba:	6e ad       	ldd	r22, Y+62	; 0x3e
    28bc:	7f ad       	ldd	r23, Y+63	; 0x3f
    28be:	69 97       	sbiw	r28, 0x19	; 25
    28c0:	8c 01       	movw	r16, r24
    28c2:	9d 01       	movw	r18, r26
    28c4:	04 23       	and	r16, r20
    28c6:	15 23       	and	r17, r21
    28c8:	26 23       	and	r18, r22
    28ca:	37 23       	and	r19, r23
    28cc:	b5 01       	movw	r22, r10
    28ce:	a4 01       	movw	r20, r8
    28d0:	40 27       	eor	r20, r16
    28d2:	51 27       	eor	r21, r17
    28d4:	62 27       	eor	r22, r18
    28d6:	73 27       	eor	r23, r19
    28d8:	4c 01       	movw	r8, r24
    28da:	5d 01       	movw	r10, r26
    28dc:	07 2e       	mov	r0, r23
    28de:	7b e0       	ldi	r23, 0x0B	; 11
    28e0:	b6 94       	lsr	r11
    28e2:	a7 94       	ror	r10
    28e4:	97 94       	ror	r9
    28e6:	87 94       	ror	r8
    28e8:	7a 95       	dec	r23
    28ea:	d1 f7       	brne	.-12     	; 0x28e0 <sha2_small_common_nextBlock+0x2f8>
    28ec:	70 2d       	mov	r23, r0
    28ee:	8c 01       	movw	r16, r24
    28f0:	9d 01       	movw	r18, r26
    28f2:	0f 2e       	mov	r0, r31
    28f4:	f5 e1       	ldi	r31, 0x15	; 21
    28f6:	00 0f       	add	r16, r16
    28f8:	11 1f       	adc	r17, r17
    28fa:	22 1f       	adc	r18, r18
    28fc:	33 1f       	adc	r19, r19
    28fe:	fa 95       	dec	r31
    2900:	d1 f7       	brne	.-12     	; 0x28f6 <sha2_small_common_nextBlock+0x30e>
    2902:	f0 2d       	mov	r31, r0
    2904:	80 2a       	or	r8, r16
    2906:	91 2a       	or	r9, r17
    2908:	a2 2a       	or	r10, r18
    290a:	b3 2a       	or	r11, r19
    290c:	2c 01       	movw	r4, r24
    290e:	3d 01       	movw	r6, r26
    2910:	68 94       	set
    2912:	15 f8       	bld	r1, 5
    2914:	76 94       	lsr	r7
    2916:	67 94       	ror	r6
    2918:	57 94       	ror	r5
    291a:	47 94       	ror	r4
    291c:	16 94       	lsr	r1
    291e:	d1 f7       	brne	.-12     	; 0x2914 <sha2_small_common_nextBlock+0x32c>
    2920:	8c 01       	movw	r16, r24
    2922:	9d 01       	movw	r18, r26
    2924:	0f 2e       	mov	r0, r31
    2926:	fa e1       	ldi	r31, 0x1A	; 26
    2928:	00 0f       	add	r16, r16
    292a:	11 1f       	adc	r17, r17
    292c:	22 1f       	adc	r18, r18
    292e:	33 1f       	adc	r19, r19
    2930:	fa 95       	dec	r31
    2932:	d1 f7       	brne	.-12     	; 0x2928 <sha2_small_common_nextBlock+0x340>
    2934:	f0 2d       	mov	r31, r0
    2936:	04 29       	or	r16, r4
    2938:	15 29       	or	r17, r5
    293a:	26 29       	or	r18, r6
    293c:	37 29       	or	r19, r7
    293e:	08 25       	eor	r16, r8
    2940:	19 25       	eor	r17, r9
    2942:	2a 25       	eor	r18, r10
    2944:	3b 25       	eor	r19, r11
    2946:	4c 01       	movw	r8, r24
    2948:	5d 01       	movw	r10, r26
    294a:	88 0c       	add	r8, r8
    294c:	99 1c       	adc	r9, r9
    294e:	aa 1c       	adc	r10, r10
    2950:	bb 1c       	adc	r11, r11
    2952:	88 0c       	add	r8, r8
    2954:	99 1c       	adc	r9, r9
    2956:	aa 1c       	adc	r10, r10
    2958:	bb 1c       	adc	r11, r11
    295a:	88 0c       	add	r8, r8
    295c:	99 1c       	adc	r9, r9
    295e:	aa 1c       	adc	r10, r10
    2960:	bb 1c       	adc	r11, r11
    2962:	88 0c       	add	r8, r8
    2964:	99 1c       	adc	r9, r9
    2966:	aa 1c       	adc	r10, r10
    2968:	bb 1c       	adc	r11, r11
    296a:	88 0c       	add	r8, r8
    296c:	99 1c       	adc	r9, r9
    296e:	aa 1c       	adc	r10, r10
    2970:	bb 1c       	adc	r11, r11
    2972:	88 0c       	add	r8, r8
    2974:	99 1c       	adc	r9, r9
    2976:	aa 1c       	adc	r10, r10
    2978:	bb 1c       	adc	r11, r11
    297a:	88 0c       	add	r8, r8
    297c:	99 1c       	adc	r9, r9
    297e:	aa 1c       	adc	r10, r10
    2980:	bb 1c       	adc	r11, r11
    2982:	07 2e       	mov	r0, r23
    2984:	79 e1       	ldi	r23, 0x19	; 25
    2986:	b6 95       	lsr	r27
    2988:	a7 95       	ror	r26
    298a:	97 95       	ror	r25
    298c:	87 95       	ror	r24
    298e:	7a 95       	dec	r23
    2990:	d1 f7       	brne	.-12     	; 0x2986 <sha2_small_common_nextBlock+0x39e>
    2992:	70 2d       	mov	r23, r0
    2994:	88 29       	or	r24, r8
    2996:	99 29       	or	r25, r9
    2998:	aa 29       	or	r26, r10
    299a:	bb 29       	or	r27, r11
    299c:	08 27       	eor	r16, r24
    299e:	19 27       	eor	r17, r25
    29a0:	2a 27       	eor	r18, r26
    29a2:	3b 27       	eor	r19, r27
    29a4:	40 0f       	add	r20, r16
    29a6:	51 1f       	adc	r21, r17
    29a8:	62 1f       	adc	r22, r18
    29aa:	73 1f       	adc	r23, r19
    29ac:	a1 96       	adiw	r28, 0x21	; 33
    29ae:	0c ad       	ldd	r16, Y+60	; 0x3c
    29b0:	1d ad       	ldd	r17, Y+61	; 0x3d
    29b2:	2e ad       	ldd	r18, Y+62	; 0x3e
    29b4:	3f ad       	ldd	r19, Y+63	; 0x3f
    29b6:	a1 97       	sbiw	r28, 0x21	; 33
    29b8:	40 0f       	add	r20, r16
    29ba:	51 1f       	adc	r21, r17
    29bc:	62 1f       	adc	r22, r18
    29be:	73 1f       	adc	r23, r19
    29c0:	c4 0e       	add	r12, r20
    29c2:	d5 1e       	adc	r13, r21
    29c4:	e6 1e       	adc	r14, r22
    29c6:	f7 1e       	adc	r15, r23
    29c8:	a5 96       	adiw	r28, 0x25	; 37
    29ca:	8c ad       	ldd	r24, Y+60	; 0x3c
    29cc:	9d ad       	ldd	r25, Y+61	; 0x3d
    29ce:	ae ad       	ldd	r26, Y+62	; 0x3e
    29d0:	bf ad       	ldd	r27, Y+63	; 0x3f
    29d2:	a5 97       	sbiw	r28, 0x25	; 37
    29d4:	8c 0d       	add	r24, r12
    29d6:	9d 1d       	adc	r25, r13
    29d8:	ae 1d       	adc	r26, r14
    29da:	bf 1d       	adc	r27, r15
    29dc:	a5 96       	adiw	r28, 0x25	; 37
    29de:	8c af       	std	Y+60, r24	; 0x3c
    29e0:	9d af       	std	Y+61, r25	; 0x3d
    29e2:	ae af       	std	Y+62, r26	; 0x3e
    29e4:	bf af       	std	Y+63, r27	; 0x3f
    29e6:	a5 97       	sbiw	r28, 0x25	; 37
		t2 = SIGMA_0(a[0]) + MAJ(a[0],a[1],a[2]);
    29e8:	25 96       	adiw	r28, 0x05	; 5
    29ea:	8c ac       	ldd	r8, Y+60	; 0x3c
    29ec:	9d ac       	ldd	r9, Y+61	; 0x3d
    29ee:	ae ac       	ldd	r10, Y+62	; 0x3e
    29f0:	bf ac       	ldd	r11, Y+63	; 0x3f
    29f2:	25 97       	sbiw	r28, 0x05	; 5
    29f4:	29 96       	adiw	r28, 0x09	; 9
    29f6:	4c ac       	ldd	r4, Y+60	; 0x3c
    29f8:	5d ac       	ldd	r5, Y+61	; 0x3d
    29fa:	6e ac       	ldd	r6, Y+62	; 0x3e
    29fc:	7f ac       	ldd	r7, Y+63	; 0x3f
    29fe:	29 97       	sbiw	r28, 0x09	; 9
    2a00:	2d 96       	adiw	r28, 0x0d	; 13
    2a02:	cc ac       	ldd	r12, Y+60	; 0x3c
    2a04:	dd ac       	ldd	r13, Y+61	; 0x3d
    2a06:	ee ac       	ldd	r14, Y+62	; 0x3e
    2a08:	ff ac       	ldd	r15, Y+63	; 0x3f
    2a0a:	2d 97       	sbiw	r28, 0x0d	; 13
		memmove(&(a[1]), &(a[0]), 7*4); 	/* a[7]=a[6]; a[6]=a[5]; a[5]=a[4]; a[4]=a[3]; a[3]=a[2]; a[2]=a[1]; a[1]=a[0]; */
    2a0c:	4c e1       	ldi	r20, 0x1C	; 28
    2a0e:	50 e0       	ldi	r21, 0x00	; 0
    2a10:	be 01       	movw	r22, r28
    2a12:	6f 5b       	subi	r22, 0xBF	; 191
    2a14:	7f 4f       	sbci	r23, 0xFF	; 255
    2a16:	aa 96       	adiw	r28, 0x2a	; 42
    2a18:	8e ad       	ldd	r24, Y+62	; 0x3e
    2a1a:	9f ad       	ldd	r25, Y+63	; 0x3f
    2a1c:	aa 97       	sbiw	r28, 0x2a	; 42
    2a1e:	7a d2       	rcall	.+1268   	; 0x2f14 <memmove>
		a[4] += t1;
    2a20:	65 96       	adiw	r28, 0x15	; 21
    2a22:	8c ad       	ldd	r24, Y+60	; 0x3c
    2a24:	9d ad       	ldd	r25, Y+61	; 0x3d
    2a26:	ae ad       	ldd	r26, Y+62	; 0x3e
    2a28:	bf ad       	ldd	r27, Y+63	; 0x3f
    2a2a:	65 97       	sbiw	r28, 0x15	; 21
    2a2c:	a5 96       	adiw	r28, 0x25	; 37
    2a2e:	2c ad       	ldd	r18, Y+60	; 0x3c
    2a30:	3d ad       	ldd	r19, Y+61	; 0x3d
    2a32:	4e ad       	ldd	r20, Y+62	; 0x3e
    2a34:	5f ad       	ldd	r21, Y+63	; 0x3f
    2a36:	a5 97       	sbiw	r28, 0x25	; 37
    2a38:	82 0f       	add	r24, r18
    2a3a:	93 1f       	adc	r25, r19
    2a3c:	a4 1f       	adc	r26, r20
    2a3e:	b5 1f       	adc	r27, r21
    2a40:	65 96       	adiw	r28, 0x15	; 21
    2a42:	8c af       	std	Y+60, r24	; 0x3c
    2a44:	9d af       	std	Y+61, r25	; 0x3d
    2a46:	ae af       	std	Y+62, r26	; 0x3e
    2a48:	bf af       	std	Y+63, r27	; 0x3f
    2a4a:	65 97       	sbiw	r28, 0x15	; 21
		a[0] = t1 + t2;
    2a4c:	b5 01       	movw	r22, r10
    2a4e:	a4 01       	movw	r20, r8
    2a50:	03 2e       	mov	r0, r19
    2a52:	3d e0       	ldi	r19, 0x0D	; 13
    2a54:	76 95       	lsr	r23
    2a56:	67 95       	ror	r22
    2a58:	57 95       	ror	r21
    2a5a:	47 95       	ror	r20
    2a5c:	3a 95       	dec	r19
    2a5e:	d1 f7       	brne	.-12     	; 0x2a54 <sha2_small_common_nextBlock+0x46c>
    2a60:	30 2d       	mov	r19, r0
    2a62:	d5 01       	movw	r26, r10
    2a64:	c4 01       	movw	r24, r8
    2a66:	07 2e       	mov	r0, r23
    2a68:	73 e1       	ldi	r23, 0x13	; 19
    2a6a:	88 0f       	add	r24, r24
    2a6c:	99 1f       	adc	r25, r25
    2a6e:	aa 1f       	adc	r26, r26
    2a70:	bb 1f       	adc	r27, r27
    2a72:	7a 95       	dec	r23
    2a74:	d1 f7       	brne	.-12     	; 0x2a6a <sha2_small_common_nextBlock+0x482>
    2a76:	70 2d       	mov	r23, r0
    2a78:	84 2b       	or	r24, r20
    2a7a:	95 2b       	or	r25, r21
    2a7c:	a6 2b       	or	r26, r22
    2a7e:	b7 2b       	or	r27, r23
    2a80:	b5 01       	movw	r22, r10
    2a82:	a4 01       	movw	r20, r8
    2a84:	76 95       	lsr	r23
    2a86:	67 95       	ror	r22
    2a88:	57 95       	ror	r21
    2a8a:	47 95       	ror	r20
    2a8c:	76 95       	lsr	r23
    2a8e:	67 95       	ror	r22
    2a90:	57 95       	ror	r21
    2a92:	47 95       	ror	r20
    2a94:	95 01       	movw	r18, r10
    2a96:	84 01       	movw	r16, r8
    2a98:	0f 2e       	mov	r0, r31
    2a9a:	fe e1       	ldi	r31, 0x1E	; 30
    2a9c:	00 0f       	add	r16, r16
    2a9e:	11 1f       	adc	r17, r17
    2aa0:	22 1f       	adc	r18, r18
    2aa2:	33 1f       	adc	r19, r19
    2aa4:	fa 95       	dec	r31
    2aa6:	d1 f7       	brne	.-12     	; 0x2a9c <sha2_small_common_nextBlock+0x4b4>
    2aa8:	f0 2d       	mov	r31, r0
    2aaa:	40 2b       	or	r20, r16
    2aac:	51 2b       	or	r21, r17
    2aae:	62 2b       	or	r22, r18
    2ab0:	73 2b       	or	r23, r19
    2ab2:	48 27       	eor	r20, r24
    2ab4:	59 27       	eor	r21, r25
    2ab6:	6a 27       	eor	r22, r26
    2ab8:	7b 27       	eor	r23, r27
    2aba:	95 01       	movw	r18, r10
    2abc:	84 01       	movw	r16, r8
    2abe:	0f 2e       	mov	r0, r31
    2ac0:	fa e0       	ldi	r31, 0x0A	; 10
    2ac2:	00 0f       	add	r16, r16
    2ac4:	11 1f       	adc	r17, r17
    2ac6:	22 1f       	adc	r18, r18
    2ac8:	33 1f       	adc	r19, r19
    2aca:	fa 95       	dec	r31
    2acc:	d1 f7       	brne	.-12     	; 0x2ac2 <sha2_small_common_nextBlock+0x4da>
    2ace:	f0 2d       	mov	r31, r0
    2ad0:	d5 01       	movw	r26, r10
    2ad2:	c4 01       	movw	r24, r8
    2ad4:	07 2e       	mov	r0, r23
    2ad6:	76 e1       	ldi	r23, 0x16	; 22
    2ad8:	b6 95       	lsr	r27
    2ada:	a7 95       	ror	r26
    2adc:	97 95       	ror	r25
    2ade:	87 95       	ror	r24
    2ae0:	7a 95       	dec	r23
    2ae2:	d1 f7       	brne	.-12     	; 0x2ad8 <sha2_small_common_nextBlock+0x4f0>
    2ae4:	70 2d       	mov	r23, r0
    2ae6:	80 2b       	or	r24, r16
    2ae8:	91 2b       	or	r25, r17
    2aea:	a2 2b       	or	r26, r18
    2aec:	b3 2b       	or	r27, r19
    2aee:	48 27       	eor	r20, r24
    2af0:	59 27       	eor	r21, r25
    2af2:	6a 27       	eor	r22, r26
    2af4:	7b 27       	eor	r23, r27
    2af6:	97 01       	movw	r18, r14
    2af8:	86 01       	movw	r16, r12
    2afa:	04 25       	eor	r16, r4
    2afc:	15 25       	eor	r17, r5
    2afe:	26 25       	eor	r18, r6
    2b00:	37 25       	eor	r19, r7
    2b02:	80 22       	and	r8, r16
    2b04:	91 22       	and	r9, r17
    2b06:	a2 22       	and	r10, r18
    2b08:	b3 22       	and	r11, r19
    2b0a:	c4 20       	and	r12, r4
    2b0c:	d5 20       	and	r13, r5
    2b0e:	e6 20       	and	r14, r6
    2b10:	f7 20       	and	r15, r7
    2b12:	95 01       	movw	r18, r10
    2b14:	84 01       	movw	r16, r8
    2b16:	0c 25       	eor	r16, r12
    2b18:	1d 25       	eor	r17, r13
    2b1a:	2e 25       	eor	r18, r14
    2b1c:	3f 25       	eor	r19, r15
    2b1e:	40 0f       	add	r20, r16
    2b20:	51 1f       	adc	r21, r17
    2b22:	62 1f       	adc	r22, r18
    2b24:	73 1f       	adc	r23, r19
    2b26:	a5 96       	adiw	r28, 0x25	; 37
    2b28:	8c ad       	ldd	r24, Y+60	; 0x3c
    2b2a:	9d ad       	ldd	r25, Y+61	; 0x3d
    2b2c:	ae ad       	ldd	r26, Y+62	; 0x3e
    2b2e:	bf ad       	ldd	r27, Y+63	; 0x3f
    2b30:	a5 97       	sbiw	r28, 0x25	; 37
    2b32:	48 0f       	add	r20, r24
    2b34:	59 1f       	adc	r21, r25
    2b36:	6a 1f       	adc	r22, r26
    2b38:	7b 1f       	adc	r23, r27
    2b3a:	25 96       	adiw	r28, 0x05	; 5
    2b3c:	4c af       	std	Y+60, r20	; 0x3c
    2b3e:	5d af       	std	Y+61, r21	; 0x3d
    2b40:	6e af       	std	Y+62, r22	; 0x3e
    2b42:	7f af       	std	Y+63, r23	; 0x3f
    2b44:	25 97       	sbiw	r28, 0x05	; 5
*/
/* init working variables */
	memcpy((void*)a,(void*)(state->h), 8*4);

/* do the, fun stuff, */
	for (i=0; i<64; ++i){
    2b46:	a6 96       	adiw	r28, 0x26	; 38
    2b48:	9f ad       	ldd	r25, Y+63	; 0x3f
    2b4a:	a6 97       	sbiw	r28, 0x26	; 38
    2b4c:	9f 5f       	subi	r25, 0xFF	; 255
    2b4e:	a6 96       	adiw	r28, 0x26	; 38
    2b50:	9f af       	std	Y+63, r25	; 0x3f
    2b52:	a6 97       	sbiw	r28, 0x26	; 38
    2b54:	a4 e0       	ldi	r26, 0x04	; 4
    2b56:	2a 0e       	add	r2, r26
    2b58:	31 1c       	adc	r3, r1
    2b5a:	a8 96       	adiw	r28, 0x28	; 40
    2b5c:	ee ad       	ldd	r30, Y+62	; 0x3e
    2b5e:	ff ad       	ldd	r31, Y+63	; 0x3f
    2b60:	a8 97       	sbiw	r28, 0x28	; 40
    2b62:	34 96       	adiw	r30, 0x04	; 4
    2b64:	a8 96       	adiw	r28, 0x28	; 40
    2b66:	ff af       	std	Y+63, r31	; 0x3f
    2b68:	ee af       	std	Y+62, r30	; 0x3e
    2b6a:	a8 97       	sbiw	r28, 0x28	; 40
    2b6c:	90 34       	cpi	r25, 0x40	; 64
    2b6e:	09 f0       	breq	.+2      	; 0x2b72 <sha2_small_common_nextBlock+0x58a>
    2b70:	ba cd       	rjmp	.-1164   	; 0x26e6 <sha2_small_common_nextBlock+0xfe>
    2b72:	fe 01       	movw	r30, r28
    2b74:	ef 5b       	subi	r30, 0xBF	; 191
    2b76:	ff 4f       	sbci	r31, 0xFF	; 255
    2b78:	ac 96       	adiw	r28, 0x2c	; 44
    2b7a:	2e ad       	ldd	r18, Y+62	; 0x3e
    2b7c:	3f ad       	ldd	r19, Y+63	; 0x3f
    2b7e:	ac 97       	sbiw	r28, 0x2c	; 44
    2b80:	af 01       	movw	r20, r30
    2b82:	40 5e       	subi	r20, 0xE0	; 224
    2b84:	5f 4f       	sbci	r21, 0xFF	; 255
    2b86:	bf 01       	movw	r22, r30
		a[0] = t1 + t2;
	}

/* update, the, state, */
	for (i=0; i<8; ++i){
		state->h[i] += a[i];
    2b88:	fb 01       	movw	r30, r22
    2b8a:	81 91       	ld	r24, Z+
    2b8c:	91 91       	ld	r25, Z+
    2b8e:	a1 91       	ld	r26, Z+
    2b90:	b1 91       	ld	r27, Z+
    2b92:	bf 01       	movw	r22, r30
    2b94:	f9 01       	movw	r30, r18
    2b96:	c0 80       	ld	r12, Z
    2b98:	d1 80       	ldd	r13, Z+1	; 0x01
    2b9a:	e2 80       	ldd	r14, Z+2	; 0x02
    2b9c:	f3 80       	ldd	r15, Z+3	; 0x03
    2b9e:	8c 0d       	add	r24, r12
    2ba0:	9d 1d       	adc	r25, r13
    2ba2:	ae 1d       	adc	r26, r14
    2ba4:	bf 1d       	adc	r27, r15
    2ba6:	81 93       	st	Z+, r24
    2ba8:	91 93       	st	Z+, r25
    2baa:	a1 93       	st	Z+, r26
    2bac:	b1 93       	st	Z+, r27
    2bae:	9f 01       	movw	r18, r30
		a[4] += t1;
		a[0] = t1 + t2;
	}

/* update, the, state, */
	for (i=0; i<8; ++i){
    2bb0:	64 17       	cp	r22, r20
    2bb2:	75 07       	cpc	r23, r21
    2bb4:	49 f7       	brne	.-46     	; 0x2b88 <sha2_small_common_nextBlock+0x5a0>
		state->h[i] += a[i];
	}
	state->length += 1;
    2bb6:	ac 96       	adiw	r28, 0x2c	; 44
    2bb8:	ee ad       	ldd	r30, Y+62	; 0x3e
    2bba:	ff ad       	ldd	r31, Y+63	; 0x3f
    2bbc:	ac 97       	sbiw	r28, 0x2c	; 44
    2bbe:	80 a1       	ldd	r24, Z+32	; 0x20
    2bc0:	91 a1       	ldd	r25, Z+33	; 0x21
    2bc2:	a2 a1       	ldd	r26, Z+34	; 0x22
    2bc4:	b3 a1       	ldd	r27, Z+35	; 0x23
    2bc6:	01 96       	adiw	r24, 0x01	; 1
    2bc8:	a1 1d       	adc	r26, r1
    2bca:	b1 1d       	adc	r27, r1
    2bcc:	80 a3       	std	Z+32, r24	; 0x20
    2bce:	91 a3       	std	Z+33, r25	; 0x21
    2bd0:	a2 a3       	std	Z+34, r26	; 0x22
    2bd2:	b3 a3       	std	Z+35, r27	; 0x23
}
    2bd4:	c5 59       	subi	r28, 0x95	; 149
    2bd6:	df 4f       	sbci	r29, 0xFF	; 255
    2bd8:	0f b6       	in	r0, 0x3f	; 63
    2bda:	f8 94       	cli
    2bdc:	de bf       	out	0x3e, r29	; 62
    2bde:	0f be       	out	0x3f, r0	; 63
    2be0:	cd bf       	out	0x3d, r28	; 61
    2be2:	df 91       	pop	r29
    2be4:	cf 91       	pop	r28
    2be6:	1f 91       	pop	r17
    2be8:	0f 91       	pop	r16
    2bea:	ff 90       	pop	r15
    2bec:	ef 90       	pop	r14
    2bee:	df 90       	pop	r13
    2bf0:	cf 90       	pop	r12
    2bf2:	bf 90       	pop	r11
    2bf4:	af 90       	pop	r10
    2bf6:	9f 90       	pop	r9
    2bf8:	8f 90       	pop	r8
    2bfa:	7f 90       	pop	r7
    2bfc:	6f 90       	pop	r6
    2bfe:	5f 90       	pop	r5
    2c00:	4f 90       	pop	r4
    2c02:	3f 90       	pop	r3
    2c04:	2f 90       	pop	r2
    2c06:	08 95       	ret

00002c08 <sha2_small_common_lastBlock>:


void sha2_small_common_lastBlock(sha2_small_common_ctx_t *state, const void *block, uint16_t length_b){
    2c08:	8f 92       	push	r8
    2c0a:	9f 92       	push	r9
    2c0c:	af 92       	push	r10
    2c0e:	bf 92       	push	r11
    2c10:	cf 92       	push	r12
    2c12:	df 92       	push	r13
    2c14:	ef 92       	push	r14
    2c16:	ff 92       	push	r15
    2c18:	0f 93       	push	r16
    2c1a:	1f 93       	push	r17
    2c1c:	cf 93       	push	r28
    2c1e:	df 93       	push	r29
    2c20:	cd b7       	in	r28, 0x3d	; 61
    2c22:	de b7       	in	r29, 0x3e	; 62
    2c24:	c8 54       	subi	r28, 0x48	; 72
    2c26:	d1 09       	sbc	r29, r1
    2c28:	0f b6       	in	r0, 0x3f	; 63
    2c2a:	f8 94       	cli
    2c2c:	de bf       	out	0x3e, r29	; 62
    2c2e:	0f be       	out	0x3f, r0	; 63
    2c30:	cd bf       	out	0x3d, r28	; 61
    2c32:	8c 01       	movw	r16, r24
    2c34:	4b 01       	movw	r8, r22
    2c36:	5a 01       	movw	r10, r20
	uint8_t lb[512/8]; /* local block */
	uint64_t len;
	while(length_b>=512){
    2c38:	41 15       	cp	r20, r1
    2c3a:	62 e0       	ldi	r22, 0x02	; 2
    2c3c:	56 07       	cpc	r21, r22
    2c3e:	28 f1       	brcs	.+74     	; 0x2c8a <sha2_small_common_lastBlock+0x82>
    2c40:	6a 01       	movw	r12, r20
    2c42:	74 01       	movw	r14, r8
		sha2_small_common_nextBlock(state, block);
    2c44:	b7 01       	movw	r22, r14
    2c46:	c8 01       	movw	r24, r16
    2c48:	cf dc       	rcall	.-1634   	; 0x25e8 <sha2_small_common_nextBlock>
		length_b -= 512;
    2c4a:	72 e0       	ldi	r23, 0x02	; 2
    2c4c:	d7 1a       	sub	r13, r23
		block = (uint8_t*)block+64;
    2c4e:	80 e4       	ldi	r24, 0x40	; 64
    2c50:	e8 0e       	add	r14, r24
    2c52:	f1 1c       	adc	r15, r1


void sha2_small_common_lastBlock(sha2_small_common_ctx_t *state, const void *block, uint16_t length_b){
	uint8_t lb[512/8]; /* local block */
	uint64_t len;
	while(length_b>=512){
    2c54:	c1 14       	cp	r12, r1
    2c56:	92 e0       	ldi	r25, 0x02	; 2
    2c58:	d9 06       	cpc	r13, r25
    2c5a:	a0 f7       	brcc	.-24     	; 0x2c44 <sha2_small_common_lastBlock+0x3c>
    2c5c:	75 01       	movw	r14, r10
    2c5e:	e1 e0       	ldi	r30, 0x01	; 1
    2c60:	fe 22       	and	r15, r30
    2c62:	f2 e0       	ldi	r31, 0x02	; 2
    2c64:	bf 1a       	sub	r11, r31
    2c66:	ab 2c       	mov	r10, r11
    2c68:	bb 24       	eor	r11, r11
    2c6a:	a6 94       	lsr	r10
    2c6c:	6f ef       	ldi	r22, 0xFF	; 255
    2c6e:	a6 1a       	sub	r10, r22
    2c70:	b6 0a       	sbc	r11, r22
    2c72:	00 24       	eor	r0, r0
    2c74:	b6 94       	lsr	r11
    2c76:	a7 94       	ror	r10
    2c78:	07 94       	ror	r0
    2c7a:	b6 94       	lsr	r11
    2c7c:	a7 94       	ror	r10
    2c7e:	07 94       	ror	r0
    2c80:	ba 2c       	mov	r11, r10
    2c82:	a0 2c       	mov	r10, r0
    2c84:	8a 0c       	add	r8, r10
    2c86:	9b 1c       	adc	r9, r11
    2c88:	01 c0       	rjmp	.+2      	; 0x2c8c <sha2_small_common_lastBlock+0x84>
    2c8a:	7a 01       	movw	r14, r20
		sha2_small_common_nextBlock(state, block);
		length_b -= 512;
		block = (uint8_t*)block+64;
	}
	len = state->length*512 + length_b;
    2c8c:	f8 01       	movw	r30, r16
    2c8e:	80 a1       	ldd	r24, Z+32	; 0x20
    2c90:	91 a1       	ldd	r25, Z+33	; 0x21
    2c92:	a2 a1       	ldd	r26, Z+34	; 0x22
    2c94:	b3 a1       	ldd	r27, Z+35	; 0x23
    2c96:	07 2e       	mov	r0, r23
    2c98:	79 e0       	ldi	r23, 0x09	; 9
    2c9a:	88 0f       	add	r24, r24
    2c9c:	99 1f       	adc	r25, r25
    2c9e:	aa 1f       	adc	r26, r26
    2ca0:	bb 1f       	adc	r27, r27
    2ca2:	7a 95       	dec	r23
    2ca4:	d1 f7       	brne	.-12     	; 0x2c9a <sha2_small_common_lastBlock+0x92>
    2ca6:	70 2d       	mov	r23, r0
    2ca8:	8e 0d       	add	r24, r14
    2caa:	9f 1d       	adc	r25, r15
    2cac:	a1 1d       	adc	r26, r1
    2cae:	b1 1d       	adc	r27, r1
    2cb0:	9c 01       	movw	r18, r24
    2cb2:	ad 01       	movw	r20, r26
    2cb4:	22 96       	adiw	r28, 0x02	; 2
    2cb6:	2f af       	std	Y+63, r18	; 0x3f
    2cb8:	22 97       	sbiw	r28, 0x02	; 2
    2cba:	23 96       	adiw	r28, 0x03	; 3
    2cbc:	3f af       	std	Y+63, r19	; 0x3f
    2cbe:	23 97       	sbiw	r28, 0x03	; 3
    2cc0:	24 96       	adiw	r28, 0x04	; 4
    2cc2:	4f af       	std	Y+63, r20	; 0x3f
    2cc4:	24 97       	sbiw	r28, 0x04	; 4
    2cc6:	25 96       	adiw	r28, 0x05	; 5
    2cc8:	5f af       	std	Y+63, r21	; 0x3f
    2cca:	25 97       	sbiw	r28, 0x05	; 5
    2ccc:	26 96       	adiw	r28, 0x06	; 6
    2cce:	1f ae       	std	Y+63, r1	; 0x3f
    2cd0:	26 97       	sbiw	r28, 0x06	; 6
    2cd2:	27 96       	adiw	r28, 0x07	; 7
    2cd4:	1f ae       	std	Y+63, r1	; 0x3f
    2cd6:	27 97       	sbiw	r28, 0x07	; 7
    2cd8:	28 96       	adiw	r28, 0x08	; 8
    2cda:	1f ae       	std	Y+63, r1	; 0x3f
    2cdc:	28 97       	sbiw	r28, 0x08	; 8
    2cde:	29 96       	adiw	r28, 0x09	; 9
    2ce0:	1f ae       	std	Y+63, r1	; 0x3f
    2ce2:	29 97       	sbiw	r28, 0x09	; 9
	memset(lb, 0, 64);
    2ce4:	be 01       	movw	r22, r28
    2ce6:	6f 5f       	subi	r22, 0xFF	; 255
    2ce8:	7f 4f       	sbci	r23, 0xFF	; 255
    2cea:	6b 01       	movw	r12, r22
    2cec:	80 e4       	ldi	r24, 0x40	; 64
    2cee:	fb 01       	movw	r30, r22
    2cf0:	11 92       	st	Z+, r1
    2cf2:	8a 95       	dec	r24
    2cf4:	e9 f7       	brne	.-6      	; 0x2cf0 <sha2_small_common_lastBlock+0xe8>
	memcpy(lb, block, (length_b+7)/8);
    2cf6:	a7 01       	movw	r20, r14
    2cf8:	49 5f       	subi	r20, 0xF9	; 249
    2cfa:	5f 4f       	sbci	r21, 0xFF	; 255
    2cfc:	56 95       	lsr	r21
    2cfe:	47 95       	ror	r20
    2d00:	56 95       	lsr	r21
    2d02:	47 95       	ror	r20
    2d04:	56 95       	lsr	r21
    2d06:	47 95       	ror	r20
    2d08:	b4 01       	movw	r22, r8
    2d0a:	c6 01       	movw	r24, r12
    2d0c:	fa d0       	rcall	.+500    	; 0x2f02 <memcpy>

	/* set the final one bit */
	lb[length_b/8] |= 0x80>>(length_b & 0x7);
    2d0e:	f7 01       	movw	r30, r14
    2d10:	f6 95       	lsr	r31
    2d12:	e7 95       	ror	r30
    2d14:	f6 95       	lsr	r31
    2d16:	e7 95       	ror	r30
    2d18:	f6 95       	lsr	r31
    2d1a:	e7 95       	ror	r30
    2d1c:	ec 0d       	add	r30, r12
    2d1e:	fd 1d       	adc	r31, r13
    2d20:	c7 01       	movw	r24, r14
    2d22:	87 70       	andi	r24, 0x07	; 7
    2d24:	99 27       	eor	r25, r25
    2d26:	20 e8       	ldi	r18, 0x80	; 128
    2d28:	30 e0       	ldi	r19, 0x00	; 0
    2d2a:	02 c0       	rjmp	.+4      	; 0x2d30 <sha2_small_common_lastBlock+0x128>
    2d2c:	35 95       	asr	r19
    2d2e:	27 95       	ror	r18
    2d30:	8a 95       	dec	r24
    2d32:	e2 f7       	brpl	.-8      	; 0x2d2c <sha2_small_common_lastBlock+0x124>
    2d34:	80 81       	ld	r24, Z
    2d36:	28 2b       	or	r18, r24
    2d38:	20 83       	st	Z, r18
	/* pad with zeros */
	if (length_b>=512-64){ /* not enouth space for 64bit length value */
    2d3a:	f0 ec       	ldi	r31, 0xC0	; 192
    2d3c:	ef 16       	cp	r14, r31
    2d3e:	f1 e0       	ldi	r31, 0x01	; 1
    2d40:	ff 06       	cpc	r15, r31
    2d42:	40 f0       	brcs	.+16     	; 0x2d54 <sha2_small_common_lastBlock+0x14c>
		sha2_small_common_nextBlock(state, lb);
    2d44:	b6 01       	movw	r22, r12
    2d46:	c8 01       	movw	r24, r16
    2d48:	4f dc       	rcall	.-1890   	; 0x25e8 <sha2_small_common_nextBlock>
		memset(lb, 0, 64);
    2d4a:	80 e4       	ldi	r24, 0x40	; 64
    2d4c:	f6 01       	movw	r30, r12
    2d4e:	11 92       	st	Z+, r1
    2d50:	8a 95       	dec	r24
    2d52:	e9 f7       	brne	.-6      	; 0x2d4e <sha2_small_common_lastBlock+0x146>


void sha2_small_common_lastBlock(sha2_small_common_ctx_t *state, const void *block, uint16_t length_b){
	uint8_t lb[512/8]; /* local block */
	uint64_t len;
	while(length_b>=512){
    2d54:	27 e0       	ldi	r18, 0x07	; 7
#if defined LITTLE_ENDIAN
	 	/* this is now rolled up */
	uint8_t i;
	i=7;
	do{
		lb[63-i] = ((uint8_t*)&len)[i];
    2d56:	4f e3       	ldi	r20, 0x3F	; 63
    2d58:	50 e0       	ldi	r21, 0x00	; 0
    2d5a:	82 2f       	mov	r24, r18
    2d5c:	90 e0       	ldi	r25, 0x00	; 0
    2d5e:	fa 01       	movw	r30, r20
    2d60:	e8 1b       	sub	r30, r24
    2d62:	f9 0b       	sbc	r31, r25
    2d64:	61 e0       	ldi	r22, 0x01	; 1
    2d66:	70 e0       	ldi	r23, 0x00	; 0
    2d68:	6c 0f       	add	r22, r28
    2d6a:	7d 1f       	adc	r23, r29
    2d6c:	e6 0f       	add	r30, r22
    2d6e:	f7 1f       	adc	r31, r23
    2d70:	a1 e4       	ldi	r26, 0x41	; 65
    2d72:	b0 e0       	ldi	r27, 0x00	; 0
    2d74:	ac 0f       	add	r26, r28
    2d76:	bd 1f       	adc	r27, r29
    2d78:	a8 0f       	add	r26, r24
    2d7a:	b9 1f       	adc	r27, r25
    2d7c:	8c 91       	ld	r24, X
    2d7e:	80 83       	st	Z, r24
	}while(i--);
    2d80:	21 50       	subi	r18, 0x01	; 1
    2d82:	58 f7       	brcc	.-42     	; 0x2d5a <sha2_small_common_lastBlock+0x152>
#elif defined BIG_ENDIAN
	*((uint64_t)&(lb[56])) = len;
#endif
	sha2_small_common_nextBlock(state, lb);
    2d84:	be 01       	movw	r22, r28
    2d86:	6f 5f       	subi	r22, 0xFF	; 255
    2d88:	7f 4f       	sbci	r23, 0xFF	; 255
    2d8a:	c8 01       	movw	r24, r16
    2d8c:	2d dc       	rcall	.-1958   	; 0x25e8 <sha2_small_common_nextBlock>
}
    2d8e:	c8 5b       	subi	r28, 0xB8	; 184
    2d90:	df 4f       	sbci	r29, 0xFF	; 255
    2d92:	0f b6       	in	r0, 0x3f	; 63
    2d94:	f8 94       	cli
    2d96:	de bf       	out	0x3e, r29	; 62
    2d98:	0f be       	out	0x3f, r0	; 63
    2d9a:	cd bf       	out	0x3d, r28	; 61
    2d9c:	df 91       	pop	r29
    2d9e:	cf 91       	pop	r28
    2da0:	1f 91       	pop	r17
    2da2:	0f 91       	pop	r16
    2da4:	ff 90       	pop	r15
    2da6:	ef 90       	pop	r14
    2da8:	df 90       	pop	r13
    2daa:	cf 90       	pop	r12
    2dac:	bf 90       	pop	r11
    2dae:	af 90       	pop	r10
    2db0:	9f 90       	pop	r9
    2db2:	8f 90       	pop	r8
    2db4:	08 95       	ret

00002db6 <uart_init>:
#include <avr/io.h>
#include <string.h>
#include "uart_f.h"

void uart_init(){
	UBRR0H = (BAUD_PRESCALE >> 8); // Load upper 8-bits of the baud rate value into the high byte of the UBRR register
    2db6:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
	UBRR0L = BAUD_PRESCALE; // Load lower 8-bits of the baud rate value into the low byte of the UBRR register
    2dba:	83 e3       	ldi	r24, 0x33	; 51
    2dbc:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
	UCSR0C = (0<<UMSEL0) | (0<<UPM0) | (1<<USBS0) | (3<<UCSZ0);
    2dc0:	8e e0       	ldi	r24, 0x0E	; 14
    2dc2:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>
	UCSR0B = (1<<RXEN0) | (1<<TXEN0);
    2dc6:	88 e1       	ldi	r24, 0x18	; 24
    2dc8:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
    2dcc:	08 95       	ret

00002dce <uart_puts>:
}

void uart_puts(char* s){
    2dce:	cf 93       	push	r28
    2dd0:	df 93       	push	r29
	int i;
	int len = strlen(s);
    2dd2:	fc 01       	movw	r30, r24
    2dd4:	01 90       	ld	r0, Z+
    2dd6:	00 20       	and	r0, r0
    2dd8:	e9 f7       	brne	.-6      	; 0x2dd4 <uart_puts+0x6>
    2dda:	31 97       	sbiw	r30, 0x01	; 1
    2ddc:	e8 1b       	sub	r30, r24
    2dde:	f9 0b       	sbc	r31, r25
	for (i = 0; i < len; i++){
    2de0:	1e 16       	cp	r1, r30
    2de2:	1f 06       	cpc	r1, r31
    2de4:	84 f4       	brge	.+32     	; 0x2e06 <uart_puts+0x38>
    2de6:	dc 01       	movw	r26, r24
    2de8:	9c 01       	movw	r18, r24
    2dea:	2e 0f       	add	r18, r30
    2dec:	3f 1f       	adc	r19, r31
		while(!( UCSR0A & 0X20));
    2dee:	e0 ec       	ldi	r30, 0xC0	; 192
    2df0:	f0 e0       	ldi	r31, 0x00	; 0
		UDR0=s[i];
    2df2:	c6 ec       	ldi	r28, 0xC6	; 198
    2df4:	d0 e0       	ldi	r29, 0x00	; 0

void uart_puts(char* s){
	int i;
	int len = strlen(s);
	for (i = 0; i < len; i++){
		while(!( UCSR0A & 0X20));
    2df6:	90 81       	ld	r25, Z
    2df8:	95 ff       	sbrs	r25, 5
    2dfa:	fd cf       	rjmp	.-6      	; 0x2df6 <uart_puts+0x28>
		UDR0=s[i];
    2dfc:	9d 91       	ld	r25, X+
    2dfe:	98 83       	st	Y, r25
}

void uart_puts(char* s){
	int i;
	int len = strlen(s);
	for (i = 0; i < len; i++){
    2e00:	a2 17       	cp	r26, r18
    2e02:	b3 07       	cpc	r27, r19
    2e04:	c1 f7       	brne	.-16     	; 0x2df6 <uart_puts+0x28>
		while(!( UCSR0A & 0X20));
		UDR0=s[i];
	}
	while(!( UCSR0A & 0X20));
    2e06:	e0 ec       	ldi	r30, 0xC0	; 192
    2e08:	f0 e0       	ldi	r31, 0x00	; 0
    2e0a:	80 81       	ld	r24, Z
    2e0c:	85 ff       	sbrs	r24, 5
    2e0e:	fd cf       	rjmp	.-6      	; 0x2e0a <uart_puts+0x3c>
	UDR0 = 13;
    2e10:	8d e0       	ldi	r24, 0x0D	; 13
    2e12:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
	while(!( UCSR0A & 0X20));
    2e16:	e0 ec       	ldi	r30, 0xC0	; 192
    2e18:	f0 e0       	ldi	r31, 0x00	; 0
    2e1a:	80 81       	ld	r24, Z
    2e1c:	85 ff       	sbrs	r24, 5
    2e1e:	fd cf       	rjmp	.-6      	; 0x2e1a <uart_puts+0x4c>
	UDR0 = 10;
    2e20:	8a e0       	ldi	r24, 0x0A	; 10
    2e22:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
}
    2e26:	df 91       	pop	r29
    2e28:	cf 91       	pop	r28
    2e2a:	08 95       	ret

00002e2c <do_rand>:
    2e2c:	8f 92       	push	r8
    2e2e:	9f 92       	push	r9
    2e30:	af 92       	push	r10
    2e32:	bf 92       	push	r11
    2e34:	cf 92       	push	r12
    2e36:	df 92       	push	r13
    2e38:	ef 92       	push	r14
    2e3a:	ff 92       	push	r15
    2e3c:	cf 93       	push	r28
    2e3e:	df 93       	push	r29
    2e40:	ec 01       	movw	r28, r24
    2e42:	68 81       	ld	r22, Y
    2e44:	79 81       	ldd	r23, Y+1	; 0x01
    2e46:	8a 81       	ldd	r24, Y+2	; 0x02
    2e48:	9b 81       	ldd	r25, Y+3	; 0x03
    2e4a:	61 15       	cp	r22, r1
    2e4c:	71 05       	cpc	r23, r1
    2e4e:	81 05       	cpc	r24, r1
    2e50:	91 05       	cpc	r25, r1
    2e52:	21 f4       	brne	.+8      	; 0x2e5c <do_rand+0x30>
    2e54:	64 e2       	ldi	r22, 0x24	; 36
    2e56:	79 ed       	ldi	r23, 0xD9	; 217
    2e58:	8b e5       	ldi	r24, 0x5B	; 91
    2e5a:	97 e0       	ldi	r25, 0x07	; 7
    2e5c:	2d e1       	ldi	r18, 0x1D	; 29
    2e5e:	33 ef       	ldi	r19, 0xF3	; 243
    2e60:	41 e0       	ldi	r20, 0x01	; 1
    2e62:	50 e0       	ldi	r21, 0x00	; 0
    2e64:	68 d0       	rcall	.+208    	; 0x2f36 <__divmodsi4>
    2e66:	49 01       	movw	r8, r18
    2e68:	5a 01       	movw	r10, r20
    2e6a:	9b 01       	movw	r18, r22
    2e6c:	ac 01       	movw	r20, r24
    2e6e:	a7 ea       	ldi	r26, 0xA7	; 167
    2e70:	b1 e4       	ldi	r27, 0x41	; 65
    2e72:	7d d0       	rcall	.+250    	; 0x2f6e <__muluhisi3>
    2e74:	6b 01       	movw	r12, r22
    2e76:	7c 01       	movw	r14, r24
    2e78:	ac ee       	ldi	r26, 0xEC	; 236
    2e7a:	b4 ef       	ldi	r27, 0xF4	; 244
    2e7c:	a5 01       	movw	r20, r10
    2e7e:	94 01       	movw	r18, r8
    2e80:	82 d0       	rcall	.+260    	; 0x2f86 <__mulohisi3>
    2e82:	dc 01       	movw	r26, r24
    2e84:	cb 01       	movw	r24, r22
    2e86:	8c 0d       	add	r24, r12
    2e88:	9d 1d       	adc	r25, r13
    2e8a:	ae 1d       	adc	r26, r14
    2e8c:	bf 1d       	adc	r27, r15
    2e8e:	b7 ff       	sbrs	r27, 7
    2e90:	03 c0       	rjmp	.+6      	; 0x2e98 <do_rand+0x6c>
    2e92:	01 97       	sbiw	r24, 0x01	; 1
    2e94:	a1 09       	sbc	r26, r1
    2e96:	b0 48       	sbci	r27, 0x80	; 128
    2e98:	88 83       	st	Y, r24
    2e9a:	99 83       	std	Y+1, r25	; 0x01
    2e9c:	aa 83       	std	Y+2, r26	; 0x02
    2e9e:	bb 83       	std	Y+3, r27	; 0x03
    2ea0:	9f 77       	andi	r25, 0x7F	; 127
    2ea2:	df 91       	pop	r29
    2ea4:	cf 91       	pop	r28
    2ea6:	ff 90       	pop	r15
    2ea8:	ef 90       	pop	r14
    2eaa:	df 90       	pop	r13
    2eac:	cf 90       	pop	r12
    2eae:	bf 90       	pop	r11
    2eb0:	af 90       	pop	r10
    2eb2:	9f 90       	pop	r9
    2eb4:	8f 90       	pop	r8
    2eb6:	08 95       	ret

00002eb8 <rand_r>:
    2eb8:	b9 cf       	rjmp	.-142    	; 0x2e2c <do_rand>

00002eba <rand>:
    2eba:	80 e0       	ldi	r24, 0x00	; 0
    2ebc:	91 e0       	ldi	r25, 0x01	; 1
    2ebe:	b6 cf       	rjmp	.-148    	; 0x2e2c <do_rand>

00002ec0 <srand>:
    2ec0:	a0 e0       	ldi	r26, 0x00	; 0
    2ec2:	b0 e0       	ldi	r27, 0x00	; 0
    2ec4:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
    2ec8:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
    2ecc:	a0 93 02 01 	sts	0x0102, r26	; 0x800102 <__data_start+0x2>
    2ed0:	b0 93 03 01 	sts	0x0103, r27	; 0x800103 <__data_start+0x3>
    2ed4:	08 95       	ret

00002ed6 <memcpy_P>:
    2ed6:	fb 01       	movw	r30, r22
    2ed8:	dc 01       	movw	r26, r24
    2eda:	02 c0       	rjmp	.+4      	; 0x2ee0 <memcpy_P+0xa>
    2edc:	05 90       	lpm	r0, Z+
    2ede:	0d 92       	st	X+, r0
    2ee0:	41 50       	subi	r20, 0x01	; 1
    2ee2:	50 40       	sbci	r21, 0x00	; 0
    2ee4:	d8 f7       	brcc	.-10     	; 0x2edc <memcpy_P+0x6>
    2ee6:	08 95       	ret

00002ee8 <memcmp>:
    2ee8:	fb 01       	movw	r30, r22
    2eea:	dc 01       	movw	r26, r24
    2eec:	04 c0       	rjmp	.+8      	; 0x2ef6 <memcmp+0xe>
    2eee:	8d 91       	ld	r24, X+
    2ef0:	01 90       	ld	r0, Z+
    2ef2:	80 19       	sub	r24, r0
    2ef4:	21 f4       	brne	.+8      	; 0x2efe <memcmp+0x16>
    2ef6:	41 50       	subi	r20, 0x01	; 1
    2ef8:	50 40       	sbci	r21, 0x00	; 0
    2efa:	c8 f7       	brcc	.-14     	; 0x2eee <memcmp+0x6>
    2efc:	88 1b       	sub	r24, r24
    2efe:	99 0b       	sbc	r25, r25
    2f00:	08 95       	ret

00002f02 <memcpy>:
    2f02:	fb 01       	movw	r30, r22
    2f04:	dc 01       	movw	r26, r24
    2f06:	02 c0       	rjmp	.+4      	; 0x2f0c <memcpy+0xa>
    2f08:	01 90       	ld	r0, Z+
    2f0a:	0d 92       	st	X+, r0
    2f0c:	41 50       	subi	r20, 0x01	; 1
    2f0e:	50 40       	sbci	r21, 0x00	; 0
    2f10:	d8 f7       	brcc	.-10     	; 0x2f08 <memcpy+0x6>
    2f12:	08 95       	ret

00002f14 <memmove>:
    2f14:	68 17       	cp	r22, r24
    2f16:	79 07       	cpc	r23, r25
    2f18:	68 f4       	brcc	.+26     	; 0x2f34 <memmove+0x20>
    2f1a:	fb 01       	movw	r30, r22
    2f1c:	dc 01       	movw	r26, r24
    2f1e:	e4 0f       	add	r30, r20
    2f20:	f5 1f       	adc	r31, r21
    2f22:	a4 0f       	add	r26, r20
    2f24:	b5 1f       	adc	r27, r21
    2f26:	02 c0       	rjmp	.+4      	; 0x2f2c <memmove+0x18>
    2f28:	02 90       	ld	r0, -Z
    2f2a:	0e 92       	st	-X, r0
    2f2c:	41 50       	subi	r20, 0x01	; 1
    2f2e:	50 40       	sbci	r21, 0x00	; 0
    2f30:	d8 f7       	brcc	.-10     	; 0x2f28 <memmove+0x14>
    2f32:	08 95       	ret
    2f34:	e6 cf       	rjmp	.-52     	; 0x2f02 <memcpy>

00002f36 <__divmodsi4>:
    2f36:	05 2e       	mov	r0, r21
    2f38:	97 fb       	bst	r25, 7
    2f3a:	16 f4       	brtc	.+4      	; 0x2f40 <__divmodsi4+0xa>
    2f3c:	00 94       	com	r0
    2f3e:	0f d0       	rcall	.+30     	; 0x2f5e <__negsi2>
    2f40:	57 fd       	sbrc	r21, 7
    2f42:	05 d0       	rcall	.+10     	; 0x2f4e <__divmodsi4_neg2>
    2f44:	24 d0       	rcall	.+72     	; 0x2f8e <__udivmodsi4>
    2f46:	07 fc       	sbrc	r0, 7
    2f48:	02 d0       	rcall	.+4      	; 0x2f4e <__divmodsi4_neg2>
    2f4a:	46 f4       	brtc	.+16     	; 0x2f5c <__divmodsi4_exit>
    2f4c:	08 c0       	rjmp	.+16     	; 0x2f5e <__negsi2>

00002f4e <__divmodsi4_neg2>:
    2f4e:	50 95       	com	r21
    2f50:	40 95       	com	r20
    2f52:	30 95       	com	r19
    2f54:	21 95       	neg	r18
    2f56:	3f 4f       	sbci	r19, 0xFF	; 255
    2f58:	4f 4f       	sbci	r20, 0xFF	; 255
    2f5a:	5f 4f       	sbci	r21, 0xFF	; 255

00002f5c <__divmodsi4_exit>:
    2f5c:	08 95       	ret

00002f5e <__negsi2>:
    2f5e:	90 95       	com	r25
    2f60:	80 95       	com	r24
    2f62:	70 95       	com	r23
    2f64:	61 95       	neg	r22
    2f66:	7f 4f       	sbci	r23, 0xFF	; 255
    2f68:	8f 4f       	sbci	r24, 0xFF	; 255
    2f6a:	9f 4f       	sbci	r25, 0xFF	; 255
    2f6c:	08 95       	ret

00002f6e <__muluhisi3>:
    2f6e:	31 d0       	rcall	.+98     	; 0x2fd2 <__umulhisi3>
    2f70:	a5 9f       	mul	r26, r21
    2f72:	90 0d       	add	r25, r0
    2f74:	b4 9f       	mul	r27, r20
    2f76:	90 0d       	add	r25, r0
    2f78:	a4 9f       	mul	r26, r20
    2f7a:	80 0d       	add	r24, r0
    2f7c:	91 1d       	adc	r25, r1
    2f7e:	11 24       	eor	r1, r1
    2f80:	08 95       	ret

00002f82 <__mulshisi3>:
    2f82:	b7 ff       	sbrs	r27, 7
    2f84:	f4 cf       	rjmp	.-24     	; 0x2f6e <__muluhisi3>

00002f86 <__mulohisi3>:
    2f86:	f3 df       	rcall	.-26     	; 0x2f6e <__muluhisi3>
    2f88:	82 1b       	sub	r24, r18
    2f8a:	93 0b       	sbc	r25, r19
    2f8c:	08 95       	ret

00002f8e <__udivmodsi4>:
    2f8e:	a1 e2       	ldi	r26, 0x21	; 33
    2f90:	1a 2e       	mov	r1, r26
    2f92:	aa 1b       	sub	r26, r26
    2f94:	bb 1b       	sub	r27, r27
    2f96:	fd 01       	movw	r30, r26
    2f98:	0d c0       	rjmp	.+26     	; 0x2fb4 <__udivmodsi4_ep>

00002f9a <__udivmodsi4_loop>:
    2f9a:	aa 1f       	adc	r26, r26
    2f9c:	bb 1f       	adc	r27, r27
    2f9e:	ee 1f       	adc	r30, r30
    2fa0:	ff 1f       	adc	r31, r31
    2fa2:	a2 17       	cp	r26, r18
    2fa4:	b3 07       	cpc	r27, r19
    2fa6:	e4 07       	cpc	r30, r20
    2fa8:	f5 07       	cpc	r31, r21
    2faa:	20 f0       	brcs	.+8      	; 0x2fb4 <__udivmodsi4_ep>
    2fac:	a2 1b       	sub	r26, r18
    2fae:	b3 0b       	sbc	r27, r19
    2fb0:	e4 0b       	sbc	r30, r20
    2fb2:	f5 0b       	sbc	r31, r21

00002fb4 <__udivmodsi4_ep>:
    2fb4:	66 1f       	adc	r22, r22
    2fb6:	77 1f       	adc	r23, r23
    2fb8:	88 1f       	adc	r24, r24
    2fba:	99 1f       	adc	r25, r25
    2fbc:	1a 94       	dec	r1
    2fbe:	69 f7       	brne	.-38     	; 0x2f9a <__udivmodsi4_loop>
    2fc0:	60 95       	com	r22
    2fc2:	70 95       	com	r23
    2fc4:	80 95       	com	r24
    2fc6:	90 95       	com	r25
    2fc8:	9b 01       	movw	r18, r22
    2fca:	ac 01       	movw	r20, r24
    2fcc:	bd 01       	movw	r22, r26
    2fce:	cf 01       	movw	r24, r30
    2fd0:	08 95       	ret

00002fd2 <__umulhisi3>:
    2fd2:	a2 9f       	mul	r26, r18
    2fd4:	b0 01       	movw	r22, r0
    2fd6:	b3 9f       	mul	r27, r19
    2fd8:	c0 01       	movw	r24, r0
    2fda:	a3 9f       	mul	r26, r19
    2fdc:	70 0d       	add	r23, r0
    2fde:	81 1d       	adc	r24, r1
    2fe0:	11 24       	eor	r1, r1
    2fe2:	91 1d       	adc	r25, r1
    2fe4:	b2 9f       	mul	r27, r18
    2fe6:	70 0d       	add	r23, r0
    2fe8:	81 1d       	adc	r24, r1
    2fea:	11 24       	eor	r1, r1
    2fec:	91 1d       	adc	r25, r1
    2fee:	08 95       	ret

00002ff0 <_exit>:
    2ff0:	f8 94       	cli

00002ff2 <__stop_program>:
    2ff2:	ff cf       	rjmp	.-2      	; 0x2ff2 <__stop_program>
