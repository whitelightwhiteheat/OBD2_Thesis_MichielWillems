
Gateway.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000017c  00800100  00003392  00003426  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00003392  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000008  0080027c  0080027c  000035a2  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000035a2  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000035d4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000400  00000000  00000000  00003614  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00009fa6  00000000  00000000  00003a14  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000188f  00000000  00000000  0000d9ba  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00002bf3  00000000  00000000  0000f249  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000013a0  00000000  00000000  00011e3c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000122a  00000000  00000000  000131dc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00006fdf  00000000  00000000  00014406  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000003e0  00000000  00000000  0001b3e5  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	d9 c0       	rjmp	.+434    	; 0x1b4 <__ctors_end>
       2:	00 00       	nop
       4:	f6 c0       	rjmp	.+492    	; 0x1f2 <__bad_interrupt>
       6:	00 00       	nop
       8:	f4 c0       	rjmp	.+488    	; 0x1f2 <__bad_interrupt>
       a:	00 00       	nop
       c:	f2 c0       	rjmp	.+484    	; 0x1f2 <__bad_interrupt>
       e:	00 00       	nop
      10:	f0 c0       	rjmp	.+480    	; 0x1f2 <__bad_interrupt>
      12:	00 00       	nop
      14:	ee c0       	rjmp	.+476    	; 0x1f2 <__bad_interrupt>
      16:	00 00       	nop
      18:	ec c0       	rjmp	.+472    	; 0x1f2 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	ea c0       	rjmp	.+468    	; 0x1f2 <__bad_interrupt>
      1e:	00 00       	nop
      20:	e8 c0       	rjmp	.+464    	; 0x1f2 <__bad_interrupt>
      22:	00 00       	nop
      24:	e6 c0       	rjmp	.+460    	; 0x1f2 <__bad_interrupt>
      26:	00 00       	nop
      28:	e4 c0       	rjmp	.+456    	; 0x1f2 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	e2 c0       	rjmp	.+452    	; 0x1f2 <__bad_interrupt>
      2e:	00 00       	nop
      30:	e0 c0       	rjmp	.+448    	; 0x1f2 <__bad_interrupt>
      32:	00 00       	nop
      34:	de c0       	rjmp	.+444    	; 0x1f2 <__bad_interrupt>
      36:	00 00       	nop
      38:	dc c0       	rjmp	.+440    	; 0x1f2 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	da c0       	rjmp	.+436    	; 0x1f2 <__bad_interrupt>
      3e:	00 00       	nop
      40:	d8 c0       	rjmp	.+432    	; 0x1f2 <__bad_interrupt>
      42:	00 00       	nop
      44:	d6 c0       	rjmp	.+428    	; 0x1f2 <__bad_interrupt>
      46:	00 00       	nop
      48:	d4 c0       	rjmp	.+424    	; 0x1f2 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	d2 c0       	rjmp	.+420    	; 0x1f2 <__bad_interrupt>
      4e:	00 00       	nop
      50:	d0 c0       	rjmp	.+416    	; 0x1f2 <__bad_interrupt>
      52:	00 00       	nop
      54:	ce c0       	rjmp	.+412    	; 0x1f2 <__bad_interrupt>
      56:	00 00       	nop
      58:	cc c0       	rjmp	.+408    	; 0x1f2 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	ca c0       	rjmp	.+404    	; 0x1f2 <__bad_interrupt>
      5e:	00 00       	nop
      60:	c8 c0       	rjmp	.+400    	; 0x1f2 <__bad_interrupt>
      62:	00 00       	nop
      64:	c6 c0       	rjmp	.+396    	; 0x1f2 <__bad_interrupt>
      66:	00 00       	nop
      68:	c4 c0       	rjmp	.+392    	; 0x1f2 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	c2 c0       	rjmp	.+388    	; 0x1f2 <__bad_interrupt>
      6e:	00 00       	nop
      70:	c0 c0       	rjmp	.+384    	; 0x1f2 <__bad_interrupt>
      72:	00 00       	nop
      74:	be c0       	rjmp	.+380    	; 0x1f2 <__bad_interrupt>
      76:	00 00       	nop
      78:	bc c0       	rjmp	.+376    	; 0x1f2 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	ba c0       	rjmp	.+372    	; 0x1f2 <__bad_interrupt>
      7e:	00 00       	nop
      80:	b8 c0       	rjmp	.+368    	; 0x1f2 <__bad_interrupt>
      82:	00 00       	nop
      84:	b6 c0       	rjmp	.+364    	; 0x1f2 <__bad_interrupt>
      86:	00 00       	nop
      88:	b4 c0       	rjmp	.+360    	; 0x1f2 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	b2 c0       	rjmp	.+356    	; 0x1f2 <__bad_interrupt>
      8e:	00 00       	nop
      90:	b0 c0       	rjmp	.+352    	; 0x1f2 <__bad_interrupt>
	...

00000094 <__trampolines_end>:
      94:	67 e6       	ldi	r22, 0x67	; 103
      96:	09 6a       	ori	r16, 0xA9	; 169
      98:	85 ae       	std	Z+61, r8	; 0x3d
      9a:	67 bb       	out	0x17, r22	; 23
      9c:	72 f3       	brmi	.-36     	; 0x7a <__SREG__+0x3b>
      9e:	6e 3c       	cpi	r22, 0xCE	; 206
      a0:	3a f5       	brpl	.+78     	; 0xf0 <k+0x3c>
      a2:	4f a5       	ldd	r20, Y+47	; 0x2f
      a4:	7f 52       	subi	r23, 0x2F	; 47
      a6:	0e 51       	subi	r16, 0x1E	; 30
      a8:	8c 68       	ori	r24, 0x8C	; 140
      aa:	05 9b       	sbis	0x00, 5	; 0
      ac:	ab d9       	rcall	.-3242   	; 0xfffff404 <__eeprom_end+0xff7ef404>
      ae:	83 1f       	adc	r24, r19
      b0:	19 cd       	rjmp	.-1486   	; 0xfffffae4 <__eeprom_end+0xff7efae4>
      b2:	e0 5b       	subi	r30, 0xB0	; 176

000000b4 <k>:
      b4:	98 2f 8a 42 91 44 37 71 cf fb c0 b5 a5 db b5 e9     ./.B.D7q........
      c4:	5b c2 56 39 f1 11 f1 59 a4 82 3f 92 d5 5e 1c ab     [.V9...Y..?..^..
      d4:	98 aa 07 d8 01 5b 83 12 be 85 31 24 c3 7d 0c 55     .....[....1$.}.U
      e4:	74 5d be 72 fe b1 de 80 a7 06 dc 9b 74 f1 9b c1     t].r........t...
      f4:	c1 69 9b e4 86 47 be ef c6 9d c1 0f cc a1 0c 24     .i...G.........$
     104:	6f 2c e9 2d aa 84 74 4a dc a9 b0 5c da 88 f9 76     o,.-..tJ...\...v
     114:	52 51 3e 98 6d c6 31 a8 c8 27 03 b0 c7 7f 59 bf     RQ>.m.1..'....Y.
     124:	f3 0b e0 c6 47 91 a7 d5 51 63 ca 06 67 29 29 14     ....G...Qc..g)).
     134:	85 0a b7 27 38 21 1b 2e fc 6d 2c 4d 13 0d 38 53     ...'8!...m,M..8S
     144:	54 73 0a 65 bb 0a 6a 76 2e c9 c2 81 85 2c 72 92     Ts.e..jv.....,r.
     154:	a1 e8 bf a2 4b 66 1a a8 70 8b 4b c2 a3 51 6c c7     ....Kf..p.K..Ql.
     164:	19 e8 92 d1 24 06 99 d6 85 35 0e f4 70 a0 6a 10     ....$....5..p.j.
     174:	16 c1 a4 19 08 6c 37 1e 4c 77 48 27 b5 bc b0 34     .....l7.LwH'...4
     184:	b3 0c 1c 39 4a aa d8 4e 4f ca 9c 5b f3 6f 2e 68     ...9J..NO..[.o.h
     194:	ee 82 8f 74 6f 63 a5 78 14 78 c8 84 08 02 c7 8c     ...toc.x.x......
     1a4:	fa ff be 90 eb 6c 50 a4 f7 a3 f9 be f2 78 71 c6     .....lP......xq.

000001b4 <__ctors_end>:
     1b4:	11 24       	eor	r1, r1
     1b6:	1f be       	out	0x3f, r1	; 63
     1b8:	cf ef       	ldi	r28, 0xFF	; 255
     1ba:	d0 e1       	ldi	r29, 0x10	; 16
     1bc:	de bf       	out	0x3e, r29	; 62
     1be:	cd bf       	out	0x3d, r28	; 61

000001c0 <__do_copy_data>:
     1c0:	12 e0       	ldi	r17, 0x02	; 2
     1c2:	a0 e0       	ldi	r26, 0x00	; 0
     1c4:	b1 e0       	ldi	r27, 0x01	; 1
     1c6:	e2 e9       	ldi	r30, 0x92	; 146
     1c8:	f3 e3       	ldi	r31, 0x33	; 51
     1ca:	00 e0       	ldi	r16, 0x00	; 0
     1cc:	0b bf       	out	0x3b, r16	; 59
     1ce:	02 c0       	rjmp	.+4      	; 0x1d4 <__do_copy_data+0x14>
     1d0:	07 90       	elpm	r0, Z+
     1d2:	0d 92       	st	X+, r0
     1d4:	ac 37       	cpi	r26, 0x7C	; 124
     1d6:	b1 07       	cpc	r27, r17
     1d8:	d9 f7       	brne	.-10     	; 0x1d0 <__do_copy_data+0x10>

000001da <__do_clear_bss>:
     1da:	22 e0       	ldi	r18, 0x02	; 2
     1dc:	ac e7       	ldi	r26, 0x7C	; 124
     1de:	b2 e0       	ldi	r27, 0x02	; 2
     1e0:	01 c0       	rjmp	.+2      	; 0x1e4 <.do_clear_bss_start>

000001e2 <.do_clear_bss_loop>:
     1e2:	1d 92       	st	X+, r1

000001e4 <.do_clear_bss_start>:
     1e4:	a4 38       	cpi	r26, 0x84	; 132
     1e6:	b2 07       	cpc	r27, r18
     1e8:	e1 f7       	brne	.-8      	; 0x1e2 <.do_clear_bss_loop>
     1ea:	0e 94 71 11 	call	0x22e2	; 0x22e2 <main>
     1ee:	0c 94 c7 19 	jmp	0x338e	; 0x338e <_exit>

000001f2 <__bad_interrupt>:
     1f2:	06 cf       	rjmp	.-500    	; 0x0 <__vectors>

000001f4 <can_init>:
void can_init_mask (uint8_t mask){
	CANIDM1 = mask << 5;
	CANIDM2 = mask >> 3;
	// RTRMSK = 0 : We don't use remote frames ever.
	// IDEMSK = 0 : we don't use the extended format.
	CANIDM4 = (0 << RTRMSK) | (0 << IDEMSK);
     1f4:	cf 93       	push	r28
     1f6:	df 93       	push	r29
     1f8:	f8 94       	cli
     1fa:	81 e0       	ldi	r24, 0x01	; 1
     1fc:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
     200:	84 e3       	ldi	r24, 0x34	; 52
     202:	80 93 db 00 	sts	0x00DB, r24	; 0x8000db <__TEXT_REGION_LENGTH__+0x7e00db>
     206:	10 92 da 00 	sts	0x00DA, r1	; 0x8000da <__TEXT_REGION_LENGTH__+0x7e00da>
     20a:	80 e0       	ldi	r24, 0x00	; 0
     20c:	cd ee       	ldi	r28, 0xED	; 237
     20e:	d0 e0       	ldi	r29, 0x00	; 0
     210:	af ee       	ldi	r26, 0xEF	; 239
     212:	b0 e0       	ldi	r27, 0x00	; 0
     214:	ee ee       	ldi	r30, 0xEE	; 238
     216:	f0 e0       	ldi	r31, 0x00	; 0
     218:	98 2f       	mov	r25, r24
     21a:	92 95       	swap	r25
     21c:	90 7f       	andi	r25, 0xF0	; 240
     21e:	98 83       	st	Y, r25
     220:	1c 92       	st	X, r1
     222:	10 82       	st	Z, r1
     224:	8f 5f       	subi	r24, 0xFF	; 255
     226:	8f 30       	cpi	r24, 0x0F	; 15
     228:	b9 f7       	brne	.-18     	; 0x218 <can_init+0x24>
     22a:	86 e0       	ldi	r24, 0x06	; 6
     22c:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
     230:	8c e0       	ldi	r24, 0x0C	; 12
     232:	80 93 e3 00 	sts	0x00E3, r24	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7e00e3>
     236:	87 e3       	ldi	r24, 0x37	; 55
     238:	80 93 e4 00 	sts	0x00E4, r24	; 0x8000e4 <__TEXT_REGION_LENGTH__+0x7e00e4>
     23c:	10 92 e5 00 	sts	0x00E5, r1	; 0x8000e5 <__TEXT_REGION_LENGTH__+0x7e00e5>
     240:	82 e0       	ldi	r24, 0x02	; 2
     242:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
     246:	78 94       	sei
     248:	df 91       	pop	r29
     24a:	cf 91       	pop	r28
     24c:	08 95       	ret

0000024e <can_get_message>:
     24e:	fb 01       	movw	r30, r22
     250:	82 95       	swap	r24
     252:	80 7f       	andi	r24, 0xF0	; 240
     254:	80 93 ed 00 	sts	0x00ED, r24	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7e00ed>
     258:	9b 01       	movw	r18, r22
     25a:	28 5f       	subi	r18, 0xF8	; 248
     25c:	3f 4f       	sbci	r19, 0xFF	; 255
     25e:	aa ef       	ldi	r26, 0xFA	; 250
     260:	b0 e0       	ldi	r27, 0x00	; 0
     262:	8c 91       	ld	r24, X
     264:	81 93       	st	Z+, r24
     266:	2e 17       	cp	r18, r30
     268:	3f 07       	cpc	r19, r31
     26a:	d9 f7       	brne	.-10     	; 0x262 <can_get_message+0x14>
     26c:	08 95       	ret

0000026e <can_get_frame_buffer>:
     26e:	0f 93       	push	r16
     270:	1f 93       	push	r17
     272:	cf 93       	push	r28
     274:	8c 01       	movw	r16, r24
     276:	c0 e0       	ldi	r28, 0x00	; 0
     278:	b8 01       	movw	r22, r16
     27a:	8c 2f       	mov	r24, r28
     27c:	e8 df       	rcall	.-48     	; 0x24e <can_get_message>
     27e:	08 5f       	subi	r16, 0xF8	; 248
     280:	1f 4f       	sbci	r17, 0xFF	; 255
     282:	cf 5f       	subi	r28, 0xFF	; 255
     284:	c8 30       	cpi	r28, 0x08	; 8
     286:	c1 f7       	brne	.-16     	; 0x278 <can_get_frame_buffer+0xa>
     288:	cf 91       	pop	r28
     28a:	1f 91       	pop	r17
     28c:	0f 91       	pop	r16
     28e:	08 95       	ret

00000290 <can_init_id>:
     290:	98 2f       	mov	r25, r24
     292:	92 95       	swap	r25
     294:	99 0f       	add	r25, r25
     296:	90 7e       	andi	r25, 0xE0	; 224
     298:	90 93 f2 00 	sts	0x00F2, r25	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7e00f2>
     29c:	86 95       	lsr	r24
     29e:	86 95       	lsr	r24
     2a0:	86 95       	lsr	r24
     2a2:	80 93 f3 00 	sts	0x00F3, r24	; 0x8000f3 <__TEXT_REGION_LENGTH__+0x7e00f3>
     2a6:	10 92 f0 00 	sts	0x00F0, r1	; 0x8000f0 <__TEXT_REGION_LENGTH__+0x7e00f0>
     2aa:	08 95       	ret

000002ac <can_init_mask_def>:
     2ac:	8f ef       	ldi	r24, 0xFF	; 255
     2ae:	80 93 f7 00 	sts	0x00F7, r24	; 0x8000f7 <__TEXT_REGION_LENGTH__+0x7e00f7>
     2b2:	80 93 f6 00 	sts	0x00F6, r24	; 0x8000f6 <__TEXT_REGION_LENGTH__+0x7e00f6>
     2b6:	10 92 f4 00 	sts	0x00F4, r1	; 0x8000f4 <__TEXT_REGION_LENGTH__+0x7e00f4>
     2ba:	08 95       	ret

000002bc <can_init_message>:
}

void can_init_message( uint8_t *message ){
     2bc:	fc 01       	movw	r30, r24
     2be:	9c 01       	movw	r18, r24
     2c0:	28 5f       	subi	r18, 0xF8	; 248
     2c2:	3f 4f       	sbci	r19, 0xFF	; 255
	uint8_t j;
	for(j=0; j<8; j++){
		CANMSG = *message;
     2c4:	aa ef       	ldi	r26, 0xFA	; 250
     2c6:	b0 e0       	ldi	r27, 0x00	; 0
     2c8:	81 91       	ld	r24, Z+
     2ca:	8c 93       	st	X, r24
	CANIDM4 = (0 << RTRMSK) | (0 << IDEMSK);
}

void can_init_message( uint8_t *message ){
	uint8_t j;
	for(j=0; j<8; j++){
     2cc:	2e 17       	cp	r18, r30
     2ce:	3f 07       	cpc	r19, r31
     2d0:	d9 f7       	brne	.-10     	; 0x2c8 <can_init_message+0xc>
		CANMSG = *message;
		message++;
	}
}
     2d2:	08 95       	ret

000002d4 <can_send_message>:

int can_send_message( uint8_t mobnr , uint8_t id, uint8_t *message ){
     2d4:	cf 93       	push	r28
     2d6:	df 93       	push	r29
     2d8:	ea 01       	movw	r28, r20
	//select mob.
	CANPAGE = (mobnr << 4);
     2da:	82 95       	swap	r24
     2dc:	80 7f       	andi	r24, 0xF0	; 240
     2de:	80 93 ed 00 	sts	0x00ED, r24	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7e00ed>
	//copy ID.
	can_init_id(id);
     2e2:	86 2f       	mov	r24, r22
     2e4:	d5 df       	rcall	.-86     	; 0x290 <can_init_id>
	//copy message.
	can_init_message(message);
     2e6:	ce 01       	movw	r24, r28
     2e8:	e9 df       	rcall	.-46     	; 0x2bc <can_init_message>
	//enable transmission.
	CANCDMOB = (1 << CONMOB0) | (1 << DLC3);
     2ea:	88 e4       	ldi	r24, 0x48	; 72
     2ec:	80 93 ef 00 	sts	0x00EF, r24	; 0x8000ef <__TEXT_REGION_LENGTH__+0x7e00ef>
	//wait for transmission.
	while(CANSTMOB != (1 << TXOK));
     2f0:	ee ee       	ldi	r30, 0xEE	; 238
     2f2:	f0 e0       	ldi	r31, 0x00	; 0
     2f4:	80 81       	ld	r24, Z
     2f6:	80 34       	cpi	r24, 0x40	; 64
     2f8:	e9 f7       	brne	.-6      	; 0x2f4 <can_send_message+0x20>
	//reset mob.
	CANSTMOB = 0x00;
     2fa:	10 92 ee 00 	sts	0x00EE, r1	; 0x8000ee <__TEXT_REGION_LENGTH__+0x7e00ee>
	CANCDMOB = 0x00;
     2fe:	10 92 ef 00 	sts	0x00EF, r1	; 0x8000ef <__TEXT_REGION_LENGTH__+0x7e00ef>
	return 0;
}
     302:	80 e0       	ldi	r24, 0x00	; 0
     304:	90 e0       	ldi	r25, 0x00	; 0
     306:	df 91       	pop	r29
     308:	cf 91       	pop	r28
     30a:	08 95       	ret

0000030c <can_receive_message>:

int can_receive_message( uint8_t mobnr, uint8_t id, uint8_t mask, uint8_t *message){
     30c:	0f 93       	push	r16
     30e:	1f 93       	push	r17
     310:	cf 93       	push	r28
     312:	c8 2f       	mov	r28, r24
     314:	86 2f       	mov	r24, r22
     316:	89 01       	movw	r16, r18
	CANPAGE = (mobnr << 4);
     318:	9c 2f       	mov	r25, r28
     31a:	92 95       	swap	r25
     31c:	90 7f       	andi	r25, 0xF0	; 240
     31e:	90 93 ed 00 	sts	0x00ED, r25	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7e00ed>
	CANIE2 = (1 << mobnr);
     322:	21 e0       	ldi	r18, 0x01	; 1
     324:	30 e0       	ldi	r19, 0x00	; 0
     326:	0c 2e       	mov	r0, r28
     328:	02 c0       	rjmp	.+4      	; 0x32e <can_receive_message+0x22>
     32a:	22 0f       	add	r18, r18
     32c:	33 1f       	adc	r19, r19
     32e:	0a 94       	dec	r0
     330:	e2 f7       	brpl	.-8      	; 0x32a <can_receive_message+0x1e>
     332:	20 93 de 00 	sts	0x00DE, r18	; 0x8000de <__TEXT_REGION_LENGTH__+0x7e00de>
	can_init_id(id);
     336:	ac df       	rcall	.-168    	; 0x290 <can_init_id>
	can_init_mask_def();
     338:	b9 df       	rcall	.-142    	; 0x2ac <can_init_mask_def>
     33a:	88 e8       	ldi	r24, 0x88	; 136
	//CAN standard rev 2.0 A (identifiers length = 11 bits)
	CANCDMOB = (1 << CONMOB1) | (1 << DLC3); //enable reception and data length code = 8 bytes
     33c:	80 93 ef 00 	sts	0x00EF, r24	; 0x8000ef <__TEXT_REGION_LENGTH__+0x7e00ef>
     340:	ea ed       	ldi	r30, 0xDA	; 218
	//wait for interrupt
	while((CANGIT & INTR_MASK) != (1 << CANIT));
     342:	f0 e0       	ldi	r31, 0x00	; 0
     344:	80 81       	ld	r24, Z
     346:	88 23       	and	r24, r24
     348:	ec f7       	brge	.-6      	; 0x344 <can_receive_message+0x38>
     34a:	80 91 ee 00 	lds	r24, 0x00EE	; 0x8000ee <__TEXT_REGION_LENGTH__+0x7e00ee>
	//check if it is the right interrupt.
	if((CANSTMOB & RXOK_MASK) != (1 << RXOK)) return 1;
     34e:	85 ff       	sbrs	r24, 5
     350:	10 c0       	rjmp	.+32     	; 0x372 <can_receive_message+0x66>
     352:	10 92 ee 00 	sts	0x00EE, r1	; 0x8000ee <__TEXT_REGION_LENGTH__+0x7e00ee>
	//reset mob.
	CANSTMOB = 0x00;
     356:	10 92 ef 00 	sts	0x00EF, r1	; 0x8000ef <__TEXT_REGION_LENGTH__+0x7e00ef>
	CANCDMOB = 0x00;
     35a:	10 92 de 00 	sts	0x00DE, r1	; 0x8000de <__TEXT_REGION_LENGTH__+0x7e00de>
	//reset interrupt enable
	CANIE2 = 0x00;
     35e:	ea ed       	ldi	r30, 0xDA	; 218
	//reset interrupt register.
	CANGIT = CANGIT;
     360:	f0 e0       	ldi	r31, 0x00	; 0
     362:	80 81       	ld	r24, Z
     364:	80 83       	st	Z, r24
     366:	b8 01       	movw	r22, r16
	//retrieve message.
	can_get_message(mobnr, message);
     368:	8c 2f       	mov	r24, r28
     36a:	71 df       	rcall	.-286    	; 0x24e <can_get_message>
     36c:	80 e0       	ldi	r24, 0x00	; 0
	return 0;
     36e:	90 e0       	ldi	r25, 0x00	; 0
     370:	02 c0       	rjmp	.+4      	; 0x376 <can_receive_message+0x6a>
     372:	81 e0       	ldi	r24, 0x01	; 1
	//CAN standard rev 2.0 A (identifiers length = 11 bits)
	CANCDMOB = (1 << CONMOB1) | (1 << DLC3); //enable reception and data length code = 8 bytes
	//wait for interrupt
	while((CANGIT & INTR_MASK) != (1 << CANIT));
	//check if it is the right interrupt.
	if((CANSTMOB & RXOK_MASK) != (1 << RXOK)) return 1;
     374:	90 e0       	ldi	r25, 0x00	; 0
     376:	cf 91       	pop	r28
	//reset interrupt register.
	CANGIT = CANGIT;
	//retrieve message.
	can_get_message(mobnr, message);
	return 0;
}
     378:	1f 91       	pop	r17
     37a:	0f 91       	pop	r16
     37c:	08 95       	ret

0000037e <can_send_frame_buffer>:
     37e:	0f 93       	push	r16

int can_send_frame_buffer( uint8_t *message, uint8_t buff_len ){
     380:	1f 93       	push	r17
     382:	cf 93       	push	r28
     384:	8c 01       	movw	r16, r24
	uint8_t j = buff_len;
	for(j=0; j<8; j++){
     386:	c0 e0       	ldi	r28, 0x00	; 0
		can_send_message(j,j,message);
     388:	a8 01       	movw	r20, r16
     38a:	6c 2f       	mov	r22, r28
     38c:	8c 2f       	mov	r24, r28
     38e:	a2 df       	rcall	.-188    	; 0x2d4 <can_send_message>
		message = message + 8;
     390:	08 5f       	subi	r16, 0xF8	; 248
     392:	1f 4f       	sbci	r17, 0xFF	; 255
	return 0;
}

int can_send_frame_buffer( uint8_t *message, uint8_t buff_len ){
	uint8_t j = buff_len;
	for(j=0; j<8; j++){
     394:	cf 5f       	subi	r28, 0xFF	; 255
     396:	c8 30       	cpi	r28, 0x08	; 8
     398:	b9 f7       	brne	.-18     	; 0x388 <can_send_frame_buffer+0xa>
		can_send_message(j,j,message);
		message = message + 8;
	}
	return 0;
}
     39a:	80 e0       	ldi	r24, 0x00	; 0
     39c:	90 e0       	ldi	r25, 0x00	; 0
     39e:	cf 91       	pop	r28
     3a0:	1f 91       	pop	r17
     3a2:	0f 91       	pop	r16
     3a4:	08 95       	ret

000003a6 <can_receive_frame_buffer>:

int can_receive_frame_buffer( uint8_t *message , uint8_t buff_len){
     3a6:	bf 92       	push	r11
     3a8:	cf 92       	push	r12
     3aa:	df 92       	push	r13
     3ac:	ef 92       	push	r14
     3ae:	ff 92       	push	r15
     3b0:	0f 93       	push	r16
     3b2:	1f 93       	push	r17
     3b4:	cf 93       	push	r28
     3b6:	df 93       	push	r29
     3b8:	7c 01       	movw	r14, r24
     3ba:	b6 2e       	mov	r11, r22
	//Enable buffer receive interrupt.
	CANGIE |= (1 << ENBX);
     3bc:	eb ed       	ldi	r30, 0xDB	; 219
     3be:	f0 e0       	ldi	r31, 0x00	; 0
     3c0:	80 81       	ld	r24, Z
     3c2:	84 60       	ori	r24, 0x04	; 4
     3c4:	80 83       	st	Z, r24
	uint8_t j = buff_len;
	for(j=0; j<8; j++){
     3c6:	c0 e0       	ldi	r28, 0x00	; 0
		CANPAGE = (j << 4);
     3c8:	0f 2e       	mov	r0, r31
     3ca:	fd ee       	ldi	r31, 0xED	; 237
     3cc:	cf 2e       	mov	r12, r31
     3ce:	d1 2c       	mov	r13, r1
     3d0:	f0 2d       	mov	r31, r0
		can_init_id(j);
		// Mask = 255
		can_init_mask_def();
		//set mob in buffer receive mode.
		CANCDMOB = (1 << CONMOB0) | (1 << CONMOB1) | (1 << DLC3);
     3d2:	0f ee       	ldi	r16, 0xEF	; 239
     3d4:	10 e0       	ldi	r17, 0x00	; 0
     3d6:	d8 ec       	ldi	r29, 0xC8	; 200
int can_receive_frame_buffer( uint8_t *message , uint8_t buff_len){
	//Enable buffer receive interrupt.
	CANGIE |= (1 << ENBX);
	uint8_t j = buff_len;
	for(j=0; j<8; j++){
		CANPAGE = (j << 4);
     3d8:	8c 2f       	mov	r24, r28
     3da:	82 95       	swap	r24
     3dc:	80 7f       	andi	r24, 0xF0	; 240
     3de:	f6 01       	movw	r30, r12
     3e0:	80 83       	st	Z, r24
		can_init_id(j);
     3e2:	8c 2f       	mov	r24, r28
     3e4:	55 df       	rcall	.-342    	; 0x290 <can_init_id>
		// Mask = 255
		can_init_mask_def();
     3e6:	62 df       	rcall	.-316    	; 0x2ac <can_init_mask_def>
     3e8:	f8 01       	movw	r30, r16
		//set mob in buffer receive mode.
		CANCDMOB = (1 << CONMOB0) | (1 << CONMOB1) | (1 << DLC3);
     3ea:	d0 83       	st	Z, r29
     3ec:	cf 5f       	subi	r28, 0xFF	; 255

int can_receive_frame_buffer( uint8_t *message , uint8_t buff_len){
	//Enable buffer receive interrupt.
	CANGIE |= (1 << ENBX);
	uint8_t j = buff_len;
	for(j=0; j<8; j++){
     3ee:	c8 30       	cpi	r28, 0x08	; 8
     3f0:	99 f7       	brne	.-26     	; 0x3d8 <can_receive_frame_buffer+0x32>
     3f2:	ea ed       	ldi	r30, 0xDA	; 218
		can_init_mask_def();
		//set mob in buffer receive mode.
		CANCDMOB = (1 << CONMOB0) | (1 << CONMOB1) | (1 << DLC3);
	}
	//wait for interrupt.
	while((CANGIT & INTR_MASK) != (1 << CANIT));
     3f4:	f0 e0       	ldi	r31, 0x00	; 0
     3f6:	80 81       	ld	r24, Z
     3f8:	88 23       	and	r24, r24
     3fa:	ec f7       	brge	.-6      	; 0x3f6 <can_receive_frame_buffer+0x50>
     3fc:	80 91 da 00 	lds	r24, 0x00DA	; 0x8000da <__TEXT_REGION_LENGTH__+0x7e00da>
	//Check if interrupt is the right one (BXOK).
	if((CANGIT & BXOK_MASK) != (1 << BXOK)) return 1;
     400:	84 ff       	sbrs	r24, 4
     402:	1a c0       	rjmp	.+52     	; 0x438 <__LOCK_REGION_LENGTH__+0x38>
     404:	80 e0       	ldi	r24, 0x00	; 0
     406:	cd ee       	ldi	r28, 0xED	; 237
	//reset mob RXOK flags
	for(j=0; j<8; j++){
		CANPAGE = (j << 4);
     408:	d0 e0       	ldi	r29, 0x00	; 0
     40a:	af ee       	ldi	r26, 0xEF	; 239
		CANCDMOB = 0x00;
     40c:	b0 e0       	ldi	r27, 0x00	; 0
     40e:	ee ee       	ldi	r30, 0xEE	; 238
		CANSTMOB = 0x00;
     410:	f0 e0       	ldi	r31, 0x00	; 0
     412:	98 2f       	mov	r25, r24
	while((CANGIT & INTR_MASK) != (1 << CANIT));
	//Check if interrupt is the right one (BXOK).
	if((CANGIT & BXOK_MASK) != (1 << BXOK)) return 1;
	//reset mob RXOK flags
	for(j=0; j<8; j++){
		CANPAGE = (j << 4);
     414:	92 95       	swap	r25
     416:	90 7f       	andi	r25, 0xF0	; 240
     418:	98 83       	st	Y, r25
     41a:	1c 92       	st	X, r1
		CANCDMOB = 0x00;
     41c:	10 82       	st	Z, r1
		CANSTMOB = 0x00;
     41e:	8f 5f       	subi	r24, 0xFF	; 255
	//wait for interrupt.
	while((CANGIT & INTR_MASK) != (1 << CANIT));
	//Check if interrupt is the right one (BXOK).
	if((CANGIT & BXOK_MASK) != (1 << BXOK)) return 1;
	//reset mob RXOK flags
	for(j=0; j<8; j++){
     420:	88 30       	cpi	r24, 0x08	; 8
     422:	b9 f7       	brne	.-18     	; 0x412 <__LOCK_REGION_LENGTH__+0x12>
     424:	ea ed       	ldi	r30, 0xDA	; 218
		CANPAGE = (j << 4);
		CANCDMOB = 0x00;
		CANSTMOB = 0x00;
	}
	//Reset interrupt register.
	CANGIT = CANGIT;
     426:	f0 e0       	ldi	r31, 0x00	; 0
     428:	80 81       	ld	r24, Z
     42a:	80 83       	st	Z, r24
     42c:	6b 2d       	mov	r22, r11
	//retrieve message.
	can_get_frame_buffer(message, buff_len);
     42e:	c7 01       	movw	r24, r14
     430:	1e df       	rcall	.-452    	; 0x26e <can_get_frame_buffer>
     432:	80 e0       	ldi	r24, 0x00	; 0
	return 0;
     434:	90 e0       	ldi	r25, 0x00	; 0
     436:	02 c0       	rjmp	.+4      	; 0x43c <__LOCK_REGION_LENGTH__+0x3c>
     438:	81 e0       	ldi	r24, 0x01	; 1
		CANCDMOB = (1 << CONMOB0) | (1 << CONMOB1) | (1 << DLC3);
	}
	//wait for interrupt.
	while((CANGIT & INTR_MASK) != (1 << CANIT));
	//Check if interrupt is the right one (BXOK).
	if((CANGIT & BXOK_MASK) != (1 << BXOK)) return 1;
     43a:	90 e0       	ldi	r25, 0x00	; 0
     43c:	df 91       	pop	r29
	//Reset interrupt register.
	CANGIT = CANGIT;
	//retrieve message.
	can_get_frame_buffer(message, buff_len);
	return 0;
}
     43e:	cf 91       	pop	r28
     440:	1f 91       	pop	r17
     442:	0f 91       	pop	r16
     444:	ff 90       	pop	r15
     446:	ef 90       	pop	r14
     448:	df 90       	pop	r13
     44a:	cf 90       	pop	r12
     44c:	bf 90       	pop	r11
     44e:	08 95       	ret

00000450 <uECC_vli_clear>:
     450:	dc 01       	movw	r26, r24
#if (uECC_OPTIMIZATION_LEVEL > 0)
    &vli_mmod_fast_secp256k1
#endif
};

uECC_Curve uECC_secp256k1(void) { return &curve_secp256k1; }
     452:	ee e4       	ldi	r30, 0x4E	; 78
     454:	f2 e0       	ldi	r31, 0x02	; 2
     456:	e6 1b       	sub	r30, r22
     458:	f1 09       	sbc	r31, r1
     45a:	09 94       	ijmp
     45c:	1d 92       	st	X+, r1
     45e:	1d 92       	st	X+, r1
     460:	1d 92       	st	X+, r1
     462:	1d 92       	st	X+, r1
     464:	1d 92       	st	X+, r1
     466:	1d 92       	st	X+, r1
     468:	1d 92       	st	X+, r1
     46a:	1d 92       	st	X+, r1
     46c:	1d 92       	st	X+, r1
     46e:	1d 92       	st	X+, r1
     470:	1d 92       	st	X+, r1
     472:	1d 92       	st	X+, r1
     474:	1d 92       	st	X+, r1
     476:	1d 92       	st	X+, r1
     478:	1d 92       	st	X+, r1
     47a:	1d 92       	st	X+, r1
     47c:	1d 92       	st	X+, r1
     47e:	1d 92       	st	X+, r1
     480:	1d 92       	st	X+, r1
     482:	1d 92       	st	X+, r1
     484:	1d 92       	st	X+, r1
     486:	1d 92       	st	X+, r1
     488:	1d 92       	st	X+, r1
     48a:	1d 92       	st	X+, r1
     48c:	1d 92       	st	X+, r1
     48e:	1d 92       	st	X+, r1
     490:	1d 92       	st	X+, r1
     492:	1d 92       	st	X+, r1
     494:	1d 92       	st	X+, r1
     496:	1d 92       	st	X+, r1
     498:	1d 92       	st	X+, r1
     49a:	1d 92       	st	X+, r1
     49c:	08 95       	ret

0000049e <uECC_vli_set>:
     49e:	cf 93       	push	r28
     4a0:	df 93       	push	r29
     4a2:	44 0f       	add	r20, r20
     4a4:	eb 01       	movw	r28, r22
     4a6:	dc 01       	movw	r26, r24
     4a8:	e9 e9       	ldi	r30, 0x99	; 153
     4aa:	f2 e0       	ldi	r31, 0x02	; 2
     4ac:	e4 1b       	sub	r30, r20
     4ae:	f1 09       	sbc	r31, r1
     4b0:	09 94       	ijmp
     4b2:	09 90       	ld	r0, Y+
     4b4:	0d 92       	st	X+, r0
     4b6:	09 90       	ld	r0, Y+
     4b8:	0d 92       	st	X+, r0
     4ba:	09 90       	ld	r0, Y+
     4bc:	0d 92       	st	X+, r0
     4be:	09 90       	ld	r0, Y+
     4c0:	0d 92       	st	X+, r0
     4c2:	09 90       	ld	r0, Y+
     4c4:	0d 92       	st	X+, r0
     4c6:	09 90       	ld	r0, Y+
     4c8:	0d 92       	st	X+, r0
     4ca:	09 90       	ld	r0, Y+
     4cc:	0d 92       	st	X+, r0
     4ce:	09 90       	ld	r0, Y+
     4d0:	0d 92       	st	X+, r0
     4d2:	09 90       	ld	r0, Y+
     4d4:	0d 92       	st	X+, r0
     4d6:	09 90       	ld	r0, Y+
     4d8:	0d 92       	st	X+, r0
     4da:	09 90       	ld	r0, Y+
     4dc:	0d 92       	st	X+, r0
     4de:	09 90       	ld	r0, Y+
     4e0:	0d 92       	st	X+, r0
     4e2:	09 90       	ld	r0, Y+
     4e4:	0d 92       	st	X+, r0
     4e6:	09 90       	ld	r0, Y+
     4e8:	0d 92       	st	X+, r0
     4ea:	09 90       	ld	r0, Y+
     4ec:	0d 92       	st	X+, r0
     4ee:	09 90       	ld	r0, Y+
     4f0:	0d 92       	st	X+, r0
     4f2:	09 90       	ld	r0, Y+
     4f4:	0d 92       	st	X+, r0
     4f6:	09 90       	ld	r0, Y+
     4f8:	0d 92       	st	X+, r0
     4fa:	09 90       	ld	r0, Y+
     4fc:	0d 92       	st	X+, r0
     4fe:	09 90       	ld	r0, Y+
     500:	0d 92       	st	X+, r0
     502:	09 90       	ld	r0, Y+
     504:	0d 92       	st	X+, r0
     506:	09 90       	ld	r0, Y+
     508:	0d 92       	st	X+, r0
     50a:	09 90       	ld	r0, Y+
     50c:	0d 92       	st	X+, r0
     50e:	09 90       	ld	r0, Y+
     510:	0d 92       	st	X+, r0
     512:	09 90       	ld	r0, Y+
     514:	0d 92       	st	X+, r0
     516:	09 90       	ld	r0, Y+
     518:	0d 92       	st	X+, r0
     51a:	09 90       	ld	r0, Y+
     51c:	0d 92       	st	X+, r0
     51e:	09 90       	ld	r0, Y+
     520:	0d 92       	st	X+, r0
     522:	09 90       	ld	r0, Y+
     524:	0d 92       	st	X+, r0
     526:	09 90       	ld	r0, Y+
     528:	0d 92       	st	X+, r0
     52a:	09 90       	ld	r0, Y+
     52c:	0d 92       	st	X+, r0
     52e:	09 90       	ld	r0, Y+
     530:	0d 92       	st	X+, r0
     532:	df 91       	pop	r29
     534:	cf 91       	pop	r28
     536:	08 95       	ret

00000538 <uECC_vli_rshift1>:
     538:	26 2f       	mov	r18, r22
     53a:	06 2e       	mov	r0, r22
     53c:	00 0c       	add	r0, r0
     53e:	33 0b       	sbc	r19, r19
     540:	21 50       	subi	r18, 0x01	; 1
     542:	31 09       	sbc	r19, r1
     544:	32 2f       	mov	r19, r18
     546:	33 0f       	add	r19, r19
     548:	23 0f       	add	r18, r19
     54a:	dc 01       	movw	r26, r24
     54c:	ed e0       	ldi	r30, 0x0D	; 13
     54e:	f3 e0       	ldi	r31, 0x03	; 3
     550:	e2 1b       	sub	r30, r18
     552:	f1 09       	sbc	r31, r1
     554:	a6 0f       	add	r26, r22
     556:	b1 1d       	adc	r27, r1
     558:	0e 90       	ld	r0, -X
     55a:	06 94       	lsr	r0
     55c:	0c 92       	st	X, r0
     55e:	09 94       	ijmp
     560:	0e 90       	ld	r0, -X
     562:	07 94       	ror	r0
     564:	0c 92       	st	X, r0
     566:	0e 90       	ld	r0, -X
     568:	07 94       	ror	r0
     56a:	0c 92       	st	X, r0
     56c:	0e 90       	ld	r0, -X
     56e:	07 94       	ror	r0
     570:	0c 92       	st	X, r0
     572:	0e 90       	ld	r0, -X
     574:	07 94       	ror	r0
     576:	0c 92       	st	X, r0
     578:	0e 90       	ld	r0, -X
     57a:	07 94       	ror	r0
     57c:	0c 92       	st	X, r0
     57e:	0e 90       	ld	r0, -X
     580:	07 94       	ror	r0
     582:	0c 92       	st	X, r0
     584:	0e 90       	ld	r0, -X
     586:	07 94       	ror	r0
     588:	0c 92       	st	X, r0
     58a:	0e 90       	ld	r0, -X
     58c:	07 94       	ror	r0
     58e:	0c 92       	st	X, r0
     590:	0e 90       	ld	r0, -X
     592:	07 94       	ror	r0
     594:	0c 92       	st	X, r0
     596:	0e 90       	ld	r0, -X
     598:	07 94       	ror	r0
     59a:	0c 92       	st	X, r0
     59c:	0e 90       	ld	r0, -X
     59e:	07 94       	ror	r0
     5a0:	0c 92       	st	X, r0
     5a2:	0e 90       	ld	r0, -X
     5a4:	07 94       	ror	r0
     5a6:	0c 92       	st	X, r0
     5a8:	0e 90       	ld	r0, -X
     5aa:	07 94       	ror	r0
     5ac:	0c 92       	st	X, r0
     5ae:	0e 90       	ld	r0, -X
     5b0:	07 94       	ror	r0
     5b2:	0c 92       	st	X, r0
     5b4:	0e 90       	ld	r0, -X
     5b6:	07 94       	ror	r0
     5b8:	0c 92       	st	X, r0
     5ba:	0e 90       	ld	r0, -X
     5bc:	07 94       	ror	r0
     5be:	0c 92       	st	X, r0
     5c0:	0e 90       	ld	r0, -X
     5c2:	07 94       	ror	r0
     5c4:	0c 92       	st	X, r0
     5c6:	0e 90       	ld	r0, -X
     5c8:	07 94       	ror	r0
     5ca:	0c 92       	st	X, r0
     5cc:	0e 90       	ld	r0, -X
     5ce:	07 94       	ror	r0
     5d0:	0c 92       	st	X, r0
     5d2:	0e 90       	ld	r0, -X
     5d4:	07 94       	ror	r0
     5d6:	0c 92       	st	X, r0
     5d8:	0e 90       	ld	r0, -X
     5da:	07 94       	ror	r0
     5dc:	0c 92       	st	X, r0
     5de:	0e 90       	ld	r0, -X
     5e0:	07 94       	ror	r0
     5e2:	0c 92       	st	X, r0
     5e4:	0e 90       	ld	r0, -X
     5e6:	07 94       	ror	r0
     5e8:	0c 92       	st	X, r0
     5ea:	0e 90       	ld	r0, -X
     5ec:	07 94       	ror	r0
     5ee:	0c 92       	st	X, r0
     5f0:	0e 90       	ld	r0, -X
     5f2:	07 94       	ror	r0
     5f4:	0c 92       	st	X, r0
     5f6:	0e 90       	ld	r0, -X
     5f8:	07 94       	ror	r0
     5fa:	0c 92       	st	X, r0
     5fc:	0e 90       	ld	r0, -X
     5fe:	07 94       	ror	r0
     600:	0c 92       	st	X, r0
     602:	0e 90       	ld	r0, -X
     604:	07 94       	ror	r0
     606:	0c 92       	st	X, r0
     608:	0e 90       	ld	r0, -X
     60a:	07 94       	ror	r0
     60c:	0c 92       	st	X, r0
     60e:	0e 90       	ld	r0, -X
     610:	07 94       	ror	r0
     612:	0c 92       	st	X, r0
     614:	0e 90       	ld	r0, -X
     616:	07 94       	ror	r0
     618:	0c 92       	st	X, r0
     61a:	08 95       	ret

0000061c <uECC_vli_add>:
     61c:	cf 93       	push	r28
     61e:	df 93       	push	r29
     620:	22 0f       	add	r18, r18
     622:	db 01       	movw	r26, r22
     624:	ea 01       	movw	r28, r20
     626:	ac 01       	movw	r20, r24
     628:	ea e5       	ldi	r30, 0x5A	; 90
     62a:	f3 e0       	ldi	r31, 0x03	; 3
     62c:	e2 1b       	sub	r30, r18
     62e:	f1 09       	sbc	r31, r1
     630:	88 94       	clc
     632:	09 94       	ijmp
     634:	fa 01       	movw	r30, r20
     636:	3e c0       	rjmp	.+124    	; 0x6b4 <add_89_32>
     638:	fa 01       	movw	r30, r20
     63a:	40 c0       	rjmp	.+128    	; 0x6bc <add_89_31>
     63c:	fa 01       	movw	r30, r20
     63e:	42 c0       	rjmp	.+132    	; 0x6c4 <add_89_30>
     640:	fa 01       	movw	r30, r20
     642:	44 c0       	rjmp	.+136    	; 0x6cc <add_89_29>
     644:	fa 01       	movw	r30, r20
     646:	46 c0       	rjmp	.+140    	; 0x6d4 <add_89_28>
     648:	fa 01       	movw	r30, r20
     64a:	48 c0       	rjmp	.+144    	; 0x6dc <add_89_27>
     64c:	fa 01       	movw	r30, r20
     64e:	4a c0       	rjmp	.+148    	; 0x6e4 <add_89_26>
     650:	fa 01       	movw	r30, r20
     652:	4c c0       	rjmp	.+152    	; 0x6ec <add_89_25>
     654:	fa 01       	movw	r30, r20
     656:	4e c0       	rjmp	.+156    	; 0x6f4 <add_89_24>
     658:	fa 01       	movw	r30, r20
     65a:	50 c0       	rjmp	.+160    	; 0x6fc <add_89_23>
     65c:	fa 01       	movw	r30, r20
     65e:	52 c0       	rjmp	.+164    	; 0x704 <add_89_22>
     660:	fa 01       	movw	r30, r20
     662:	54 c0       	rjmp	.+168    	; 0x70c <add_89_21>
     664:	fa 01       	movw	r30, r20
     666:	56 c0       	rjmp	.+172    	; 0x714 <add_89_20>
     668:	fa 01       	movw	r30, r20
     66a:	58 c0       	rjmp	.+176    	; 0x71c <add_89_19>
     66c:	fa 01       	movw	r30, r20
     66e:	5a c0       	rjmp	.+180    	; 0x724 <add_89_18>
     670:	fa 01       	movw	r30, r20
     672:	5c c0       	rjmp	.+184    	; 0x72c <add_89_17>
     674:	fa 01       	movw	r30, r20
     676:	5e c0       	rjmp	.+188    	; 0x734 <add_89_16>
     678:	fa 01       	movw	r30, r20
     67a:	60 c0       	rjmp	.+192    	; 0x73c <add_89_15>
     67c:	fa 01       	movw	r30, r20
     67e:	62 c0       	rjmp	.+196    	; 0x744 <add_89_14>
     680:	fa 01       	movw	r30, r20
     682:	64 c0       	rjmp	.+200    	; 0x74c <add_89_13>
     684:	fa 01       	movw	r30, r20
     686:	66 c0       	rjmp	.+204    	; 0x754 <add_89_12>
     688:	fa 01       	movw	r30, r20
     68a:	68 c0       	rjmp	.+208    	; 0x75c <add_89_11>
     68c:	fa 01       	movw	r30, r20
     68e:	6a c0       	rjmp	.+212    	; 0x764 <add_89_10>
     690:	fa 01       	movw	r30, r20
     692:	6c c0       	rjmp	.+216    	; 0x76c <add_89_9>
     694:	fa 01       	movw	r30, r20
     696:	6e c0       	rjmp	.+220    	; 0x774 <add_89_8>
     698:	fa 01       	movw	r30, r20
     69a:	70 c0       	rjmp	.+224    	; 0x77c <add_89_7>
     69c:	fa 01       	movw	r30, r20
     69e:	72 c0       	rjmp	.+228    	; 0x784 <add_89_6>
     6a0:	fa 01       	movw	r30, r20
     6a2:	74 c0       	rjmp	.+232    	; 0x78c <add_89_5>
     6a4:	fa 01       	movw	r30, r20
     6a6:	76 c0       	rjmp	.+236    	; 0x794 <add_89_4>
     6a8:	fa 01       	movw	r30, r20
     6aa:	78 c0       	rjmp	.+240    	; 0x79c <add_89_3>
     6ac:	fa 01       	movw	r30, r20
     6ae:	7a c0       	rjmp	.+244    	; 0x7a4 <add_89_2>
     6b0:	fa 01       	movw	r30, r20
     6b2:	7c c0       	rjmp	.+248    	; 0x7ac <add_89_1>

000006b4 <add_89_32>:
     6b4:	8d 91       	ld	r24, X+
     6b6:	99 91       	ld	r25, Y+
     6b8:	89 1f       	adc	r24, r25
     6ba:	81 93       	st	Z+, r24

000006bc <add_89_31>:
     6bc:	8d 91       	ld	r24, X+
     6be:	99 91       	ld	r25, Y+
     6c0:	89 1f       	adc	r24, r25
     6c2:	81 93       	st	Z+, r24

000006c4 <add_89_30>:
     6c4:	8d 91       	ld	r24, X+
     6c6:	99 91       	ld	r25, Y+
     6c8:	89 1f       	adc	r24, r25
     6ca:	81 93       	st	Z+, r24

000006cc <add_89_29>:
     6cc:	8d 91       	ld	r24, X+
     6ce:	99 91       	ld	r25, Y+
     6d0:	89 1f       	adc	r24, r25
     6d2:	81 93       	st	Z+, r24

000006d4 <add_89_28>:
     6d4:	8d 91       	ld	r24, X+
     6d6:	99 91       	ld	r25, Y+
     6d8:	89 1f       	adc	r24, r25
     6da:	81 93       	st	Z+, r24

000006dc <add_89_27>:
     6dc:	8d 91       	ld	r24, X+
     6de:	99 91       	ld	r25, Y+
     6e0:	89 1f       	adc	r24, r25
     6e2:	81 93       	st	Z+, r24

000006e4 <add_89_26>:
     6e4:	8d 91       	ld	r24, X+
     6e6:	99 91       	ld	r25, Y+
     6e8:	89 1f       	adc	r24, r25
     6ea:	81 93       	st	Z+, r24

000006ec <add_89_25>:
     6ec:	8d 91       	ld	r24, X+
     6ee:	99 91       	ld	r25, Y+
     6f0:	89 1f       	adc	r24, r25
     6f2:	81 93       	st	Z+, r24

000006f4 <add_89_24>:
     6f4:	8d 91       	ld	r24, X+
     6f6:	99 91       	ld	r25, Y+
     6f8:	89 1f       	adc	r24, r25
     6fa:	81 93       	st	Z+, r24

000006fc <add_89_23>:
     6fc:	8d 91       	ld	r24, X+
     6fe:	99 91       	ld	r25, Y+
     700:	89 1f       	adc	r24, r25
     702:	81 93       	st	Z+, r24

00000704 <add_89_22>:
     704:	8d 91       	ld	r24, X+
     706:	99 91       	ld	r25, Y+
     708:	89 1f       	adc	r24, r25
     70a:	81 93       	st	Z+, r24

0000070c <add_89_21>:
     70c:	8d 91       	ld	r24, X+
     70e:	99 91       	ld	r25, Y+
     710:	89 1f       	adc	r24, r25
     712:	81 93       	st	Z+, r24

00000714 <add_89_20>:
     714:	8d 91       	ld	r24, X+
     716:	99 91       	ld	r25, Y+
     718:	89 1f       	adc	r24, r25
     71a:	81 93       	st	Z+, r24

0000071c <add_89_19>:
     71c:	8d 91       	ld	r24, X+
     71e:	99 91       	ld	r25, Y+
     720:	89 1f       	adc	r24, r25
     722:	81 93       	st	Z+, r24

00000724 <add_89_18>:
     724:	8d 91       	ld	r24, X+
     726:	99 91       	ld	r25, Y+
     728:	89 1f       	adc	r24, r25
     72a:	81 93       	st	Z+, r24

0000072c <add_89_17>:
     72c:	8d 91       	ld	r24, X+
     72e:	99 91       	ld	r25, Y+
     730:	89 1f       	adc	r24, r25
     732:	81 93       	st	Z+, r24

00000734 <add_89_16>:
     734:	8d 91       	ld	r24, X+
     736:	99 91       	ld	r25, Y+
     738:	89 1f       	adc	r24, r25
     73a:	81 93       	st	Z+, r24

0000073c <add_89_15>:
     73c:	8d 91       	ld	r24, X+
     73e:	99 91       	ld	r25, Y+
     740:	89 1f       	adc	r24, r25
     742:	81 93       	st	Z+, r24

00000744 <add_89_14>:
     744:	8d 91       	ld	r24, X+
     746:	99 91       	ld	r25, Y+
     748:	89 1f       	adc	r24, r25
     74a:	81 93       	st	Z+, r24

0000074c <add_89_13>:
     74c:	8d 91       	ld	r24, X+
     74e:	99 91       	ld	r25, Y+
     750:	89 1f       	adc	r24, r25
     752:	81 93       	st	Z+, r24

00000754 <add_89_12>:
     754:	8d 91       	ld	r24, X+
     756:	99 91       	ld	r25, Y+
     758:	89 1f       	adc	r24, r25
     75a:	81 93       	st	Z+, r24

0000075c <add_89_11>:
     75c:	8d 91       	ld	r24, X+
     75e:	99 91       	ld	r25, Y+
     760:	89 1f       	adc	r24, r25
     762:	81 93       	st	Z+, r24

00000764 <add_89_10>:
     764:	8d 91       	ld	r24, X+
     766:	99 91       	ld	r25, Y+
     768:	89 1f       	adc	r24, r25
     76a:	81 93       	st	Z+, r24

0000076c <add_89_9>:
     76c:	8d 91       	ld	r24, X+
     76e:	99 91       	ld	r25, Y+
     770:	89 1f       	adc	r24, r25
     772:	81 93       	st	Z+, r24

00000774 <add_89_8>:
     774:	8d 91       	ld	r24, X+
     776:	99 91       	ld	r25, Y+
     778:	89 1f       	adc	r24, r25
     77a:	81 93       	st	Z+, r24

0000077c <add_89_7>:
     77c:	8d 91       	ld	r24, X+
     77e:	99 91       	ld	r25, Y+
     780:	89 1f       	adc	r24, r25
     782:	81 93       	st	Z+, r24

00000784 <add_89_6>:
     784:	8d 91       	ld	r24, X+
     786:	99 91       	ld	r25, Y+
     788:	89 1f       	adc	r24, r25
     78a:	81 93       	st	Z+, r24

0000078c <add_89_5>:
     78c:	8d 91       	ld	r24, X+
     78e:	99 91       	ld	r25, Y+
     790:	89 1f       	adc	r24, r25
     792:	81 93       	st	Z+, r24

00000794 <add_89_4>:
     794:	8d 91       	ld	r24, X+
     796:	99 91       	ld	r25, Y+
     798:	89 1f       	adc	r24, r25
     79a:	81 93       	st	Z+, r24

0000079c <add_89_3>:
     79c:	8d 91       	ld	r24, X+
     79e:	99 91       	ld	r25, Y+
     7a0:	89 1f       	adc	r24, r25
     7a2:	81 93       	st	Z+, r24

000007a4 <add_89_2>:
     7a4:	8d 91       	ld	r24, X+
     7a6:	99 91       	ld	r25, Y+
     7a8:	89 1f       	adc	r24, r25
     7aa:	81 93       	st	Z+, r24

000007ac <add_89_1>:
     7ac:	8d 91       	ld	r24, X+
     7ae:	99 91       	ld	r25, Y+
     7b0:	89 1f       	adc	r24, r25
     7b2:	81 93       	st	Z+, r24
     7b4:	81 2d       	mov	r24, r1
     7b6:	88 1f       	adc	r24, r24
     7b8:	df 91       	pop	r29
     7ba:	cf 91       	pop	r28
     7bc:	08 95       	ret

000007be <uECC_vli_sub>:
     7be:	cf 93       	push	r28
     7c0:	df 93       	push	r29
     7c2:	22 0f       	add	r18, r18
     7c4:	db 01       	movw	r26, r22
     7c6:	ea 01       	movw	r28, r20
     7c8:	ac 01       	movw	r20, r24
     7ca:	eb e2       	ldi	r30, 0x2B	; 43
     7cc:	f4 e0       	ldi	r31, 0x04	; 4
     7ce:	e2 1b       	sub	r30, r18
     7d0:	f1 09       	sbc	r31, r1
     7d2:	88 94       	clc
     7d4:	09 94       	ijmp
     7d6:	fa 01       	movw	r30, r20
     7d8:	3e c0       	rjmp	.+124    	; 0x856 <sub_129_32>
     7da:	fa 01       	movw	r30, r20
     7dc:	40 c0       	rjmp	.+128    	; 0x85e <sub_129_31>
     7de:	fa 01       	movw	r30, r20
     7e0:	42 c0       	rjmp	.+132    	; 0x866 <sub_129_30>
     7e2:	fa 01       	movw	r30, r20
     7e4:	44 c0       	rjmp	.+136    	; 0x86e <sub_129_29>
     7e6:	fa 01       	movw	r30, r20
     7e8:	46 c0       	rjmp	.+140    	; 0x876 <sub_129_28>
     7ea:	fa 01       	movw	r30, r20
     7ec:	48 c0       	rjmp	.+144    	; 0x87e <sub_129_27>
     7ee:	fa 01       	movw	r30, r20
     7f0:	4a c0       	rjmp	.+148    	; 0x886 <sub_129_26>
     7f2:	fa 01       	movw	r30, r20
     7f4:	4c c0       	rjmp	.+152    	; 0x88e <sub_129_25>
     7f6:	fa 01       	movw	r30, r20
     7f8:	4e c0       	rjmp	.+156    	; 0x896 <sub_129_24>
     7fa:	fa 01       	movw	r30, r20
     7fc:	50 c0       	rjmp	.+160    	; 0x89e <sub_129_23>
     7fe:	fa 01       	movw	r30, r20
     800:	52 c0       	rjmp	.+164    	; 0x8a6 <sub_129_22>
     802:	fa 01       	movw	r30, r20
     804:	54 c0       	rjmp	.+168    	; 0x8ae <sub_129_21>
     806:	fa 01       	movw	r30, r20
     808:	56 c0       	rjmp	.+172    	; 0x8b6 <sub_129_20>
     80a:	fa 01       	movw	r30, r20
     80c:	58 c0       	rjmp	.+176    	; 0x8be <sub_129_19>
     80e:	fa 01       	movw	r30, r20
     810:	5a c0       	rjmp	.+180    	; 0x8c6 <sub_129_18>
     812:	fa 01       	movw	r30, r20
     814:	5c c0       	rjmp	.+184    	; 0x8ce <sub_129_17>
     816:	fa 01       	movw	r30, r20
     818:	5e c0       	rjmp	.+188    	; 0x8d6 <sub_129_16>
     81a:	fa 01       	movw	r30, r20
     81c:	60 c0       	rjmp	.+192    	; 0x8de <sub_129_15>
     81e:	fa 01       	movw	r30, r20
     820:	62 c0       	rjmp	.+196    	; 0x8e6 <sub_129_14>
     822:	fa 01       	movw	r30, r20
     824:	64 c0       	rjmp	.+200    	; 0x8ee <sub_129_13>
     826:	fa 01       	movw	r30, r20
     828:	66 c0       	rjmp	.+204    	; 0x8f6 <sub_129_12>
     82a:	fa 01       	movw	r30, r20
     82c:	68 c0       	rjmp	.+208    	; 0x8fe <sub_129_11>
     82e:	fa 01       	movw	r30, r20
     830:	6a c0       	rjmp	.+212    	; 0x906 <sub_129_10>
     832:	fa 01       	movw	r30, r20
     834:	6c c0       	rjmp	.+216    	; 0x90e <sub_129_9>
     836:	fa 01       	movw	r30, r20
     838:	6e c0       	rjmp	.+220    	; 0x916 <sub_129_8>
     83a:	fa 01       	movw	r30, r20
     83c:	70 c0       	rjmp	.+224    	; 0x91e <sub_129_7>
     83e:	fa 01       	movw	r30, r20
     840:	72 c0       	rjmp	.+228    	; 0x926 <sub_129_6>
     842:	fa 01       	movw	r30, r20
     844:	74 c0       	rjmp	.+232    	; 0x92e <sub_129_5>
     846:	fa 01       	movw	r30, r20
     848:	76 c0       	rjmp	.+236    	; 0x936 <sub_129_4>
     84a:	fa 01       	movw	r30, r20
     84c:	78 c0       	rjmp	.+240    	; 0x93e <sub_129_3>
     84e:	fa 01       	movw	r30, r20
     850:	7a c0       	rjmp	.+244    	; 0x946 <sub_129_2>
     852:	fa 01       	movw	r30, r20
     854:	7c c0       	rjmp	.+248    	; 0x94e <sub_129_1>

00000856 <sub_129_32>:
     856:	8d 91       	ld	r24, X+
     858:	99 91       	ld	r25, Y+
     85a:	89 0b       	sbc	r24, r25
     85c:	81 93       	st	Z+, r24

0000085e <sub_129_31>:
     85e:	8d 91       	ld	r24, X+
     860:	99 91       	ld	r25, Y+
     862:	89 0b       	sbc	r24, r25
     864:	81 93       	st	Z+, r24

00000866 <sub_129_30>:
     866:	8d 91       	ld	r24, X+
     868:	99 91       	ld	r25, Y+
     86a:	89 0b       	sbc	r24, r25
     86c:	81 93       	st	Z+, r24

0000086e <sub_129_29>:
     86e:	8d 91       	ld	r24, X+
     870:	99 91       	ld	r25, Y+
     872:	89 0b       	sbc	r24, r25
     874:	81 93       	st	Z+, r24

00000876 <sub_129_28>:
     876:	8d 91       	ld	r24, X+
     878:	99 91       	ld	r25, Y+
     87a:	89 0b       	sbc	r24, r25
     87c:	81 93       	st	Z+, r24

0000087e <sub_129_27>:
     87e:	8d 91       	ld	r24, X+
     880:	99 91       	ld	r25, Y+
     882:	89 0b       	sbc	r24, r25
     884:	81 93       	st	Z+, r24

00000886 <sub_129_26>:
     886:	8d 91       	ld	r24, X+
     888:	99 91       	ld	r25, Y+
     88a:	89 0b       	sbc	r24, r25
     88c:	81 93       	st	Z+, r24

0000088e <sub_129_25>:
     88e:	8d 91       	ld	r24, X+
     890:	99 91       	ld	r25, Y+
     892:	89 0b       	sbc	r24, r25
     894:	81 93       	st	Z+, r24

00000896 <sub_129_24>:
     896:	8d 91       	ld	r24, X+
     898:	99 91       	ld	r25, Y+
     89a:	89 0b       	sbc	r24, r25
     89c:	81 93       	st	Z+, r24

0000089e <sub_129_23>:
     89e:	8d 91       	ld	r24, X+
     8a0:	99 91       	ld	r25, Y+
     8a2:	89 0b       	sbc	r24, r25
     8a4:	81 93       	st	Z+, r24

000008a6 <sub_129_22>:
     8a6:	8d 91       	ld	r24, X+
     8a8:	99 91       	ld	r25, Y+
     8aa:	89 0b       	sbc	r24, r25
     8ac:	81 93       	st	Z+, r24

000008ae <sub_129_21>:
     8ae:	8d 91       	ld	r24, X+
     8b0:	99 91       	ld	r25, Y+
     8b2:	89 0b       	sbc	r24, r25
     8b4:	81 93       	st	Z+, r24

000008b6 <sub_129_20>:
     8b6:	8d 91       	ld	r24, X+
     8b8:	99 91       	ld	r25, Y+
     8ba:	89 0b       	sbc	r24, r25
     8bc:	81 93       	st	Z+, r24

000008be <sub_129_19>:
     8be:	8d 91       	ld	r24, X+
     8c0:	99 91       	ld	r25, Y+
     8c2:	89 0b       	sbc	r24, r25
     8c4:	81 93       	st	Z+, r24

000008c6 <sub_129_18>:
     8c6:	8d 91       	ld	r24, X+
     8c8:	99 91       	ld	r25, Y+
     8ca:	89 0b       	sbc	r24, r25
     8cc:	81 93       	st	Z+, r24

000008ce <sub_129_17>:
     8ce:	8d 91       	ld	r24, X+
     8d0:	99 91       	ld	r25, Y+
     8d2:	89 0b       	sbc	r24, r25
     8d4:	81 93       	st	Z+, r24

000008d6 <sub_129_16>:
     8d6:	8d 91       	ld	r24, X+
     8d8:	99 91       	ld	r25, Y+
     8da:	89 0b       	sbc	r24, r25
     8dc:	81 93       	st	Z+, r24

000008de <sub_129_15>:
     8de:	8d 91       	ld	r24, X+
     8e0:	99 91       	ld	r25, Y+
     8e2:	89 0b       	sbc	r24, r25
     8e4:	81 93       	st	Z+, r24

000008e6 <sub_129_14>:
     8e6:	8d 91       	ld	r24, X+
     8e8:	99 91       	ld	r25, Y+
     8ea:	89 0b       	sbc	r24, r25
     8ec:	81 93       	st	Z+, r24

000008ee <sub_129_13>:
     8ee:	8d 91       	ld	r24, X+
     8f0:	99 91       	ld	r25, Y+
     8f2:	89 0b       	sbc	r24, r25
     8f4:	81 93       	st	Z+, r24

000008f6 <sub_129_12>:
     8f6:	8d 91       	ld	r24, X+
     8f8:	99 91       	ld	r25, Y+
     8fa:	89 0b       	sbc	r24, r25
     8fc:	81 93       	st	Z+, r24

000008fe <sub_129_11>:
     8fe:	8d 91       	ld	r24, X+
     900:	99 91       	ld	r25, Y+
     902:	89 0b       	sbc	r24, r25
     904:	81 93       	st	Z+, r24

00000906 <sub_129_10>:
     906:	8d 91       	ld	r24, X+
     908:	99 91       	ld	r25, Y+
     90a:	89 0b       	sbc	r24, r25
     90c:	81 93       	st	Z+, r24

0000090e <sub_129_9>:
     90e:	8d 91       	ld	r24, X+
     910:	99 91       	ld	r25, Y+
     912:	89 0b       	sbc	r24, r25
     914:	81 93       	st	Z+, r24

00000916 <sub_129_8>:
     916:	8d 91       	ld	r24, X+
     918:	99 91       	ld	r25, Y+
     91a:	89 0b       	sbc	r24, r25
     91c:	81 93       	st	Z+, r24

0000091e <sub_129_7>:
     91e:	8d 91       	ld	r24, X+
     920:	99 91       	ld	r25, Y+
     922:	89 0b       	sbc	r24, r25
     924:	81 93       	st	Z+, r24

00000926 <sub_129_6>:
     926:	8d 91       	ld	r24, X+
     928:	99 91       	ld	r25, Y+
     92a:	89 0b       	sbc	r24, r25
     92c:	81 93       	st	Z+, r24

0000092e <sub_129_5>:
     92e:	8d 91       	ld	r24, X+
     930:	99 91       	ld	r25, Y+
     932:	89 0b       	sbc	r24, r25
     934:	81 93       	st	Z+, r24

00000936 <sub_129_4>:
     936:	8d 91       	ld	r24, X+
     938:	99 91       	ld	r25, Y+
     93a:	89 0b       	sbc	r24, r25
     93c:	81 93       	st	Z+, r24

0000093e <sub_129_3>:
     93e:	8d 91       	ld	r24, X+
     940:	99 91       	ld	r25, Y+
     942:	89 0b       	sbc	r24, r25
     944:	81 93       	st	Z+, r24

00000946 <sub_129_2>:
     946:	8d 91       	ld	r24, X+
     948:	99 91       	ld	r25, Y+
     94a:	89 0b       	sbc	r24, r25
     94c:	81 93       	st	Z+, r24

0000094e <sub_129_1>:
     94e:	8d 91       	ld	r24, X+
     950:	99 91       	ld	r25, Y+
     952:	89 0b       	sbc	r24, r25
     954:	81 93       	st	Z+, r24
     956:	81 2d       	mov	r24, r1
     958:	88 1f       	adc	r24, r24
     95a:	df 91       	pop	r29
     95c:	cf 91       	pop	r28
     95e:	08 95       	ret

00000960 <uECC_vli_mult>:
     960:	cf 93       	push	r28
     962:	df 93       	push	r29
     964:	fc 01       	movw	r30, r24
     966:	db 01       	movw	r26, r22
     968:	ea 01       	movw	r28, r20
     96a:	90 e0       	ldi	r25, 0x00	; 0
     96c:	89 2f       	mov	r24, r25
     96e:	39 2f       	mov	r19, r25
     970:	49 2f       	mov	r20, r25
     972:	51 e0       	ldi	r21, 0x01	; 1
     974:	60 e0       	ldi	r22, 0x00	; 0
     976:	c5 0f       	add	r28, r21
     978:	d4 1f       	adc	r29, r20
     97a:	0d 90       	ld	r0, X+
     97c:	1a 90       	ld	r1, -Y
     97e:	01 9c       	mul	r0, r1
     980:	90 0d       	add	r25, r0
     982:	81 1d       	adc	r24, r1
     984:	34 1f       	adc	r19, r20
     986:	63 95       	inc	r22
     988:	65 17       	cp	r22, r21
     98a:	b8 f3       	brcs	.-18     	; 0x97a <uECC_vli_mult+0x1a>
     98c:	a5 1b       	sub	r26, r21
     98e:	b4 0b       	sbc	r27, r20
     990:	91 93       	st	Z+, r25
     992:	98 2f       	mov	r25, r24
     994:	83 2f       	mov	r24, r19
     996:	34 2f       	mov	r19, r20
     998:	53 95       	inc	r21
     99a:	52 17       	cp	r21, r18
     99c:	58 f3       	brcs	.-42     	; 0x974 <uECC_vli_mult+0x14>
     99e:	52 2f       	mov	r21, r18
     9a0:	c2 0f       	add	r28, r18
     9a2:	d4 1f       	adc	r29, r20
     9a4:	60 e0       	ldi	r22, 0x00	; 0
     9a6:	0d 90       	ld	r0, X+
     9a8:	1a 90       	ld	r1, -Y
     9aa:	01 9c       	mul	r0, r1
     9ac:	90 0d       	add	r25, r0
     9ae:	81 1d       	adc	r24, r1
     9b0:	34 1f       	adc	r19, r20
     9b2:	63 95       	inc	r22
     9b4:	65 17       	cp	r22, r21
     9b6:	b8 f3       	brcs	.-18     	; 0x9a6 <uECC_vli_mult+0x46>
     9b8:	c5 0f       	add	r28, r21
     9ba:	d4 1f       	adc	r29, r20
     9bc:	91 93       	st	Z+, r25
     9be:	98 2f       	mov	r25, r24
     9c0:	83 2f       	mov	r24, r19
     9c2:	34 2f       	mov	r19, r20
     9c4:	5a 95       	dec	r21
     9c6:	a5 1b       	sub	r26, r21
     9c8:	b4 0b       	sbc	r27, r20
     9ca:	54 17       	cp	r21, r20
     9cc:	59 f7       	brne	.-42     	; 0x9a4 <uECC_vli_mult+0x44>
     9ce:	91 93       	st	Z+, r25
     9d0:	11 24       	eor	r1, r1
     9d2:	df 91       	pop	r29
     9d4:	cf 91       	pop	r28
     9d6:	08 95       	ret

000009d8 <uECC_vli_isZero>:
     9d8:	16 16       	cp	r1, r22
     9da:	7c f4       	brge	.+30     	; 0x9fa <uECC_vli_isZero+0x22>
     9dc:	fc 01       	movw	r30, r24
     9de:	61 50       	subi	r22, 0x01	; 1
     9e0:	46 2f       	mov	r20, r22
     9e2:	50 e0       	ldi	r21, 0x00	; 0
     9e4:	4f 5f       	subi	r20, 0xFF	; 255
     9e6:	5f 4f       	sbci	r21, 0xFF	; 255
     9e8:	48 0f       	add	r20, r24
     9ea:	59 1f       	adc	r21, r25
     9ec:	90 e0       	ldi	r25, 0x00	; 0
     9ee:	21 91       	ld	r18, Z+
     9f0:	92 2b       	or	r25, r18
     9f2:	e4 17       	cp	r30, r20
     9f4:	f5 07       	cpc	r31, r21
     9f6:	d9 f7       	brne	.-10     	; 0x9ee <uECC_vli_isZero+0x16>
     9f8:	01 c0       	rjmp	.+2      	; 0x9fc <uECC_vli_isZero+0x24>
     9fa:	90 e0       	ldi	r25, 0x00	; 0
     9fc:	81 e0       	ldi	r24, 0x01	; 1
     9fe:	91 11       	cpse	r25, r1
     a00:	80 e0       	ldi	r24, 0x00	; 0
     a02:	08 95       	ret

00000a04 <uECC_vli_testBit>:
     a04:	9b 01       	movw	r18, r22
     a06:	35 95       	asr	r19
     a08:	27 95       	ror	r18
     a0a:	35 95       	asr	r19
     a0c:	27 95       	ror	r18
     a0e:	35 95       	asr	r19
     a10:	27 95       	ror	r18
     a12:	82 0f       	add	r24, r18
     a14:	93 1f       	adc	r25, r19
     a16:	67 70       	andi	r22, 0x07	; 7
     a18:	77 27       	eor	r23, r23
     a1a:	21 e0       	ldi	r18, 0x01	; 1
     a1c:	30 e0       	ldi	r19, 0x00	; 0
     a1e:	02 c0       	rjmp	.+4      	; 0xa24 <uECC_vli_testBit+0x20>
     a20:	22 0f       	add	r18, r18
     a22:	33 1f       	adc	r19, r19
     a24:	6a 95       	dec	r22
     a26:	e2 f7       	brpl	.-8      	; 0xa20 <uECC_vli_testBit+0x1c>
     a28:	fc 01       	movw	r30, r24
     a2a:	80 81       	ld	r24, Z
     a2c:	82 23       	and	r24, r18
     a2e:	08 95       	ret

00000a30 <uECC_vli_numBits>:
     a30:	9c 01       	movw	r18, r24
     a32:	61 50       	subi	r22, 0x01	; 1
     a34:	92 f0       	brmi	.+36     	; 0xa5a <uECC_vli_numBits+0x2a>
     a36:	fc 01       	movw	r30, r24
     a38:	e6 0f       	add	r30, r22
     a3a:	f1 1d       	adc	r31, r1
     a3c:	67 fd       	sbrc	r22, 7
     a3e:	fa 95       	dec	r31
     a40:	80 81       	ld	r24, Z
     a42:	81 11       	cpse	r24, r1
     a44:	0a c0       	rjmp	.+20     	; 0xa5a <uECC_vli_numBits+0x2a>
     a46:	61 50       	subi	r22, 0x01	; 1
     a48:	42 f0       	brmi	.+16     	; 0xa5a <uECC_vli_numBits+0x2a>
     a4a:	f9 01       	movw	r30, r18
     a4c:	e6 0f       	add	r30, r22
     a4e:	f1 1d       	adc	r31, r1
     a50:	67 fd       	sbrc	r22, 7
     a52:	fa 95       	dec	r31
     a54:	90 81       	ld	r25, Z
     a56:	99 23       	and	r25, r25
     a58:	b1 f3       	breq	.-20     	; 0xa46 <uECC_vli_numBits+0x16>
     a5a:	6f 5f       	subi	r22, 0xFF	; 255
     a5c:	e9 f0       	breq	.+58     	; 0xa98 <uECC_vli_numBits+0x68>
     a5e:	26 0f       	add	r18, r22
     a60:	31 1d       	adc	r19, r1
     a62:	67 fd       	sbrc	r22, 7
     a64:	3a 95       	dec	r19
     a66:	f9 01       	movw	r30, r18
     a68:	31 97       	sbiw	r30, 0x01	; 1
     a6a:	80 81       	ld	r24, Z
     a6c:	88 23       	and	r24, r24
     a6e:	31 f0       	breq	.+12     	; 0xa7c <uECC_vli_numBits+0x4c>
     a70:	20 e0       	ldi	r18, 0x00	; 0
     a72:	86 95       	lsr	r24
     a74:	2f 5f       	subi	r18, 0xFF	; 255
     a76:	81 11       	cpse	r24, r1
     a78:	fc cf       	rjmp	.-8      	; 0xa72 <uECC_vli_numBits+0x42>
     a7a:	01 c0       	rjmp	.+2      	; 0xa7e <uECC_vli_numBits+0x4e>
     a7c:	20 e0       	ldi	r18, 0x00	; 0
     a7e:	86 2f       	mov	r24, r22
     a80:	66 0f       	add	r22, r22
     a82:	99 0b       	sbc	r25, r25
     a84:	01 97       	sbiw	r24, 0x01	; 1
     a86:	88 0f       	add	r24, r24
     a88:	99 1f       	adc	r25, r25
     a8a:	88 0f       	add	r24, r24
     a8c:	99 1f       	adc	r25, r25
     a8e:	88 0f       	add	r24, r24
     a90:	99 1f       	adc	r25, r25
     a92:	82 0f       	add	r24, r18
     a94:	91 1d       	adc	r25, r1
     a96:	08 95       	ret
     a98:	80 e0       	ldi	r24, 0x00	; 0
     a9a:	90 e0       	ldi	r25, 0x00	; 0
     a9c:	08 95       	ret

00000a9e <uECC_vli_cmp_unsafe>:
     a9e:	dc 01       	movw	r26, r24
     aa0:	41 50       	subi	r20, 0x01	; 1
     aa2:	2a f1       	brmi	.+74     	; 0xaee <uECC_vli_cmp_unsafe+0x50>
     aa4:	84 2f       	mov	r24, r20
     aa6:	04 2e       	mov	r0, r20
     aa8:	00 0c       	add	r0, r0
     aaa:	99 0b       	sbc	r25, r25
     aac:	fd 01       	movw	r30, r26
     aae:	e8 0f       	add	r30, r24
     ab0:	f9 1f       	adc	r31, r25
     ab2:	20 81       	ld	r18, Z
     ab4:	fb 01       	movw	r30, r22
     ab6:	e8 0f       	add	r30, r24
     ab8:	f9 1f       	adc	r31, r25
     aba:	80 81       	ld	r24, Z
     abc:	82 17       	cp	r24, r18
     abe:	c8 f0       	brcs	.+50     	; 0xaf2 <uECC_vli_cmp_unsafe+0x54>
     ac0:	28 17       	cp	r18, r24
     ac2:	88 f4       	brcc	.+34     	; 0xae6 <uECC_vli_cmp_unsafe+0x48>
     ac4:	18 c0       	rjmp	.+48     	; 0xaf6 <uECC_vli_cmp_unsafe+0x58>
     ac6:	24 2f       	mov	r18, r20
     ac8:	04 2e       	mov	r0, r20
     aca:	00 0c       	add	r0, r0
     acc:	33 0b       	sbc	r19, r19
     ace:	fd 01       	movw	r30, r26
     ad0:	e2 0f       	add	r30, r18
     ad2:	f3 1f       	adc	r31, r19
     ad4:	50 81       	ld	r21, Z
     ad6:	fb 01       	movw	r30, r22
     ad8:	e2 0f       	add	r30, r18
     ada:	f3 1f       	adc	r31, r19
     adc:	90 81       	ld	r25, Z
     ade:	95 17       	cp	r25, r21
     ae0:	60 f0       	brcs	.+24     	; 0xafa <uECC_vli_cmp_unsafe+0x5c>
     ae2:	59 17       	cp	r21, r25
     ae4:	60 f0       	brcs	.+24     	; 0xafe <uECC_vli_cmp_unsafe+0x60>
     ae6:	41 50       	subi	r20, 0x01	; 1
     ae8:	72 f7       	brpl	.-36     	; 0xac6 <uECC_vli_cmp_unsafe+0x28>
     aea:	80 e0       	ldi	r24, 0x00	; 0
     aec:	08 95       	ret
     aee:	80 e0       	ldi	r24, 0x00	; 0
     af0:	08 95       	ret
     af2:	81 e0       	ldi	r24, 0x01	; 1
     af4:	08 95       	ret
     af6:	8f ef       	ldi	r24, 0xFF	; 255
     af8:	08 95       	ret
     afa:	81 e0       	ldi	r24, 0x01	; 1
     afc:	08 95       	ret
     afe:	8f ef       	ldi	r24, 0xFF	; 255
     b00:	08 95       	ret

00000b02 <uECC_vli_cmp>:
     b02:	0f 93       	push	r16
     b04:	1f 93       	push	r17
     b06:	cf 93       	push	r28
     b08:	df 93       	push	r29
     b0a:	cd b7       	in	r28, 0x3d	; 61
     b0c:	de b7       	in	r29, 0x3e	; 62
     b0e:	a0 97       	sbiw	r28, 0x20	; 32
     b10:	0f b6       	in	r0, 0x3f	; 63
     b12:	f8 94       	cli
     b14:	de bf       	out	0x3e, r29	; 62
     b16:	0f be       	out	0x3f, r0	; 63
     b18:	cd bf       	out	0x3d, r28	; 61
     b1a:	14 2f       	mov	r17, r20
     b1c:	24 2f       	mov	r18, r20
     b1e:	ab 01       	movw	r20, r22
     b20:	bc 01       	movw	r22, r24
     b22:	ce 01       	movw	r24, r28
     b24:	01 96       	adiw	r24, 0x01	; 1
     b26:	4b de       	rcall	.-874    	; 0x7be <uECC_vli_sub>
     b28:	08 2f       	mov	r16, r24
     b2a:	61 2f       	mov	r22, r17
     b2c:	ce 01       	movw	r24, r28
     b2e:	01 96       	adiw	r24, 0x01	; 1
     b30:	53 df       	rcall	.-346    	; 0x9d8 <uECC_vli_isZero>
     b32:	91 e0       	ldi	r25, 0x01	; 1
     b34:	81 11       	cpse	r24, r1
     b36:	90 e0       	ldi	r25, 0x00	; 0
     b38:	81 e0       	ldi	r24, 0x01	; 1
     b3a:	01 11       	cpse	r16, r1
     b3c:	01 c0       	rjmp	.+2      	; 0xb40 <uECC_vli_cmp+0x3e>
     b3e:	80 e0       	ldi	r24, 0x00	; 0
     b40:	88 0f       	add	r24, r24
     b42:	98 1b       	sub	r25, r24
     b44:	89 2f       	mov	r24, r25
     b46:	a0 96       	adiw	r28, 0x20	; 32
     b48:	0f b6       	in	r0, 0x3f	; 63
     b4a:	f8 94       	cli
     b4c:	de bf       	out	0x3e, r29	; 62
     b4e:	0f be       	out	0x3f, r0	; 63
     b50:	cd bf       	out	0x3d, r28	; 61
     b52:	df 91       	pop	r29
     b54:	cf 91       	pop	r28
     b56:	1f 91       	pop	r17
     b58:	0f 91       	pop	r16
     b5a:	08 95       	ret

00000b5c <uECC_vli_modAdd>:
     b5c:	ef 92       	push	r14
     b5e:	ff 92       	push	r15
     b60:	0f 93       	push	r16
     b62:	cf 93       	push	r28
     b64:	df 93       	push	r29
     b66:	ec 01       	movw	r28, r24
     b68:	79 01       	movw	r14, r18
     b6a:	20 2f       	mov	r18, r16
     b6c:	57 dd       	rcall	.-1362   	; 0x61c <uECC_vli_add>
     b6e:	81 11       	cpse	r24, r1
     b70:	06 c0       	rjmp	.+12     	; 0xb7e <uECC_vli_modAdd+0x22>
     b72:	40 2f       	mov	r20, r16
     b74:	be 01       	movw	r22, r28
     b76:	c7 01       	movw	r24, r14
     b78:	92 df       	rcall	.-220    	; 0xa9e <uECC_vli_cmp_unsafe>
     b7a:	81 30       	cpi	r24, 0x01	; 1
     b7c:	29 f0       	breq	.+10     	; 0xb88 <uECC_vli_modAdd+0x2c>
     b7e:	20 2f       	mov	r18, r16
     b80:	a7 01       	movw	r20, r14
     b82:	be 01       	movw	r22, r28
     b84:	ce 01       	movw	r24, r28
     b86:	1b de       	rcall	.-970    	; 0x7be <uECC_vli_sub>
     b88:	df 91       	pop	r29
     b8a:	cf 91       	pop	r28
     b8c:	0f 91       	pop	r16
     b8e:	ff 90       	pop	r15
     b90:	ef 90       	pop	r14
     b92:	08 95       	ret

00000b94 <uECC_vli_modSub>:
     b94:	ef 92       	push	r14
     b96:	ff 92       	push	r15
     b98:	0f 93       	push	r16
     b9a:	cf 93       	push	r28
     b9c:	df 93       	push	r29
     b9e:	ec 01       	movw	r28, r24
     ba0:	79 01       	movw	r14, r18
     ba2:	20 2f       	mov	r18, r16
     ba4:	0c de       	rcall	.-1000   	; 0x7be <uECC_vli_sub>
     ba6:	88 23       	and	r24, r24
     ba8:	29 f0       	breq	.+10     	; 0xbb4 <uECC_vli_modSub+0x20>
     baa:	20 2f       	mov	r18, r16
     bac:	a7 01       	movw	r20, r14
     bae:	be 01       	movw	r22, r28
     bb0:	ce 01       	movw	r24, r28
     bb2:	34 dd       	rcall	.-1432   	; 0x61c <uECC_vli_add>
     bb4:	df 91       	pop	r29
     bb6:	cf 91       	pop	r28
     bb8:	0f 91       	pop	r16
     bba:	ff 90       	pop	r15
     bbc:	ef 90       	pop	r14
     bbe:	08 95       	ret

00000bc0 <uECC_vli_modMult_fast>:
     bc0:	ef 92       	push	r14
     bc2:	ff 92       	push	r15
     bc4:	0f 93       	push	r16
     bc6:	1f 93       	push	r17
     bc8:	cf 93       	push	r28
     bca:	df 93       	push	r29
     bcc:	cd b7       	in	r28, 0x3d	; 61
     bce:	de b7       	in	r29, 0x3e	; 62
     bd0:	c0 54       	subi	r28, 0x40	; 64
     bd2:	d1 09       	sbc	r29, r1
     bd4:	0f b6       	in	r0, 0x3f	; 63
     bd6:	f8 94       	cli
     bd8:	de bf       	out	0x3e, r29	; 62
     bda:	0f be       	out	0x3f, r0	; 63
     bdc:	cd bf       	out	0x3d, r28	; 61
     bde:	7c 01       	movw	r14, r24
     be0:	89 01       	movw	r16, r18
     be2:	f9 01       	movw	r30, r18
     be4:	20 81       	ld	r18, Z
     be6:	ce 01       	movw	r24, r28
     be8:	01 96       	adiw	r24, 0x01	; 1
     bea:	ba de       	rcall	.-652    	; 0x960 <uECC_vli_mult>
     bec:	f8 01       	movw	r30, r16
     bee:	e6 55       	subi	r30, 0x56	; 86
     bf0:	ff 4f       	sbci	r31, 0xFF	; 255
     bf2:	01 90       	ld	r0, Z+
     bf4:	f0 81       	ld	r31, Z
     bf6:	e0 2d       	mov	r30, r0
     bf8:	be 01       	movw	r22, r28
     bfa:	6f 5f       	subi	r22, 0xFF	; 255
     bfc:	7f 4f       	sbci	r23, 0xFF	; 255
     bfe:	c7 01       	movw	r24, r14
     c00:	09 95       	icall
     c02:	c0 5c       	subi	r28, 0xC0	; 192
     c04:	df 4f       	sbci	r29, 0xFF	; 255
     c06:	0f b6       	in	r0, 0x3f	; 63
     c08:	f8 94       	cli
     c0a:	de bf       	out	0x3e, r29	; 62
     c0c:	0f be       	out	0x3f, r0	; 63
     c0e:	cd bf       	out	0x3d, r28	; 61
     c10:	df 91       	pop	r29
     c12:	cf 91       	pop	r28
     c14:	1f 91       	pop	r17
     c16:	0f 91       	pop	r16
     c18:	ff 90       	pop	r15
     c1a:	ef 90       	pop	r14
     c1c:	08 95       	ret

00000c1e <uECC_vli_modSquare_fast>:
     c1e:	9a 01       	movw	r18, r20
     c20:	ab 01       	movw	r20, r22
     c22:	ce cf       	rjmp	.-100    	; 0xbc0 <uECC_vli_modMult_fast>
     c24:	08 95       	ret

00000c26 <vli_modInv_update>:
     c26:	0f 93       	push	r16
     c28:	1f 93       	push	r17
     c2a:	cf 93       	push	r28
     c2c:	df 93       	push	r29
     c2e:	8c 01       	movw	r16, r24
     c30:	c4 2f       	mov	r28, r20
     c32:	fc 01       	movw	r30, r24
     c34:	80 81       	ld	r24, Z
     c36:	80 ff       	sbrs	r24, 0
     c38:	15 c0       	rjmp	.+42     	; 0xc64 <vli_modInv_update+0x3e>
     c3a:	24 2f       	mov	r18, r20
     c3c:	ab 01       	movw	r20, r22
     c3e:	b8 01       	movw	r22, r16
     c40:	c8 01       	movw	r24, r16
     c42:	ec dc       	rcall	.-1576   	; 0x61c <uECC_vli_add>
     c44:	d8 2f       	mov	r29, r24
     c46:	6c 2f       	mov	r22, r28
     c48:	c8 01       	movw	r24, r16
     c4a:	76 dc       	rcall	.-1812   	; 0x538 <uECC_vli_rshift1>
     c4c:	dd 23       	and	r29, r29
     c4e:	69 f0       	breq	.+26     	; 0xc6a <vli_modInv_update+0x44>
     c50:	ec 2f       	mov	r30, r28
     c52:	cc 0f       	add	r28, r28
     c54:	ff 0b       	sbc	r31, r31
     c56:	31 97       	sbiw	r30, 0x01	; 1
     c58:	e0 0f       	add	r30, r16
     c5a:	f1 1f       	adc	r31, r17
     c5c:	80 81       	ld	r24, Z
     c5e:	80 68       	ori	r24, 0x80	; 128
     c60:	80 83       	st	Z, r24
     c62:	03 c0       	rjmp	.+6      	; 0xc6a <vli_modInv_update+0x44>
     c64:	64 2f       	mov	r22, r20
     c66:	c8 01       	movw	r24, r16
     c68:	67 dc       	rcall	.-1842   	; 0x538 <uECC_vli_rshift1>
     c6a:	df 91       	pop	r29
     c6c:	cf 91       	pop	r28
     c6e:	1f 91       	pop	r17
     c70:	0f 91       	pop	r16
     c72:	08 95       	ret

00000c74 <uECC_vli_modInv>:
     c74:	af 92       	push	r10
     c76:	bf 92       	push	r11
     c78:	cf 92       	push	r12
     c7a:	df 92       	push	r13
     c7c:	ef 92       	push	r14
     c7e:	ff 92       	push	r15
     c80:	1f 93       	push	r17
     c82:	cf 93       	push	r28
     c84:	df 93       	push	r29
     c86:	cd b7       	in	r28, 0x3d	; 61
     c88:	de b7       	in	r29, 0x3e	; 62
     c8a:	c0 58       	subi	r28, 0x80	; 128
     c8c:	d1 09       	sbc	r29, r1
     c8e:	0f b6       	in	r0, 0x3f	; 63
     c90:	f8 94       	cli
     c92:	de bf       	out	0x3e, r29	; 62
     c94:	0f be       	out	0x3f, r0	; 63
     c96:	cd bf       	out	0x3d, r28	; 61
     c98:	5c 01       	movw	r10, r24
     c9a:	6b 01       	movw	r12, r22
     c9c:	7a 01       	movw	r14, r20
     c9e:	12 2f       	mov	r17, r18
     ca0:	62 2f       	mov	r22, r18
     ca2:	c6 01       	movw	r24, r12
     ca4:	99 de       	rcall	.-718    	; 0x9d8 <uECC_vli_isZero>
     ca6:	88 23       	and	r24, r24
     ca8:	21 f0       	breq	.+8      	; 0xcb2 <uECC_vli_modInv+0x3e>
     caa:	61 2f       	mov	r22, r17
     cac:	c5 01       	movw	r24, r10
     cae:	d0 db       	rcall	.-2144   	; 0x450 <uECC_vli_clear>
     cb0:	a1 c0       	rjmp	.+322    	; 0xdf4 <uECC_vli_modInv+0x180>
     cb2:	41 2f       	mov	r20, r17
     cb4:	b6 01       	movw	r22, r12
     cb6:	ce 01       	movw	r24, r28
     cb8:	01 96       	adiw	r24, 0x01	; 1
     cba:	f1 db       	rcall	.-2078   	; 0x49e <uECC_vli_set>
     cbc:	41 2f       	mov	r20, r17
     cbe:	b7 01       	movw	r22, r14
     cc0:	ce 01       	movw	r24, r28
     cc2:	81 96       	adiw	r24, 0x21	; 33
     cc4:	ec db       	rcall	.-2088   	; 0x49e <uECC_vli_set>
     cc6:	61 2f       	mov	r22, r17
     cc8:	ce 01       	movw	r24, r28
     cca:	8f 5b       	subi	r24, 0xBF	; 191
     ccc:	9f 4f       	sbci	r25, 0xFF	; 255
     cce:	c0 db       	rcall	.-2176   	; 0x450 <uECC_vli_clear>
     cd0:	81 e0       	ldi	r24, 0x01	; 1
     cd2:	22 96       	adiw	r28, 0x02	; 2
     cd4:	8f af       	std	Y+63, r24	; 0x3f
     cd6:	22 97       	sbiw	r28, 0x02	; 2
     cd8:	61 2f       	mov	r22, r17
     cda:	ce 01       	movw	r24, r28
     cdc:	8f 59       	subi	r24, 0x9F	; 159
     cde:	9f 4f       	sbci	r25, 0xFF	; 255
     ce0:	b7 db       	rcall	.-2194   	; 0x450 <uECC_vli_clear>
     ce2:	79 c0       	rjmp	.+242    	; 0xdd6 <uECC_vli_modInv+0x162>
     ce4:	99 81       	ldd	r25, Y+1	; 0x01
     ce6:	90 fd       	sbrc	r25, 0
     ce8:	0b c0       	rjmp	.+22     	; 0xd00 <uECC_vli_modInv+0x8c>
     cea:	61 2f       	mov	r22, r17
     cec:	ce 01       	movw	r24, r28
     cee:	01 96       	adiw	r24, 0x01	; 1
     cf0:	23 dc       	rcall	.-1978   	; 0x538 <uECC_vli_rshift1>
     cf2:	41 2f       	mov	r20, r17
     cf4:	b7 01       	movw	r22, r14
     cf6:	ce 01       	movw	r24, r28
     cf8:	8f 5b       	subi	r24, 0xBF	; 191
     cfa:	9f 4f       	sbci	r25, 0xFF	; 255
     cfc:	94 df       	rcall	.-216    	; 0xc26 <vli_modInv_update>
     cfe:	6b c0       	rjmp	.+214    	; 0xdd6 <uECC_vli_modInv+0x162>
     d00:	99 a1       	ldd	r25, Y+33	; 0x21
     d02:	90 fd       	sbrc	r25, 0
     d04:	0b c0       	rjmp	.+22     	; 0xd1c <uECC_vli_modInv+0xa8>
     d06:	61 2f       	mov	r22, r17
     d08:	ce 01       	movw	r24, r28
     d0a:	81 96       	adiw	r24, 0x21	; 33
     d0c:	15 dc       	rcall	.-2006   	; 0x538 <uECC_vli_rshift1>
     d0e:	41 2f       	mov	r20, r17
     d10:	b7 01       	movw	r22, r14
     d12:	ce 01       	movw	r24, r28
     d14:	8f 59       	subi	r24, 0x9F	; 159
     d16:	9f 4f       	sbci	r25, 0xFF	; 255
     d18:	86 df       	rcall	.-244    	; 0xc26 <vli_modInv_update>
     d1a:	5d c0       	rjmp	.+186    	; 0xdd6 <uECC_vli_modInv+0x162>
     d1c:	18 16       	cp	r1, r24
     d1e:	74 f5       	brge	.+92     	; 0xd7c <uECC_vli_modInv+0x108>
     d20:	21 2f       	mov	r18, r17
     d22:	ae 01       	movw	r20, r28
     d24:	4f 5d       	subi	r20, 0xDF	; 223
     d26:	5f 4f       	sbci	r21, 0xFF	; 255
     d28:	be 01       	movw	r22, r28
     d2a:	6f 5f       	subi	r22, 0xFF	; 255
     d2c:	7f 4f       	sbci	r23, 0xFF	; 255
     d2e:	cb 01       	movw	r24, r22
     d30:	46 dd       	rcall	.-1396   	; 0x7be <uECC_vli_sub>
     d32:	61 2f       	mov	r22, r17
     d34:	ce 01       	movw	r24, r28
     d36:	01 96       	adiw	r24, 0x01	; 1
     d38:	ff db       	rcall	.-2050   	; 0x538 <uECC_vli_rshift1>
     d3a:	41 2f       	mov	r20, r17
     d3c:	be 01       	movw	r22, r28
     d3e:	6f 59       	subi	r22, 0x9F	; 159
     d40:	7f 4f       	sbci	r23, 0xFF	; 255
     d42:	ce 01       	movw	r24, r28
     d44:	8f 5b       	subi	r24, 0xBF	; 191
     d46:	9f 4f       	sbci	r25, 0xFF	; 255
     d48:	aa de       	rcall	.-684    	; 0xa9e <uECC_vli_cmp_unsafe>
     d4a:	88 23       	and	r24, r24
     d4c:	3c f4       	brge	.+14     	; 0xd5c <uECC_vli_modInv+0xe8>
     d4e:	21 2f       	mov	r18, r17
     d50:	a7 01       	movw	r20, r14
     d52:	be 01       	movw	r22, r28
     d54:	6f 5b       	subi	r22, 0xBF	; 191
     d56:	7f 4f       	sbci	r23, 0xFF	; 255
     d58:	cb 01       	movw	r24, r22
     d5a:	60 dc       	rcall	.-1856   	; 0x61c <uECC_vli_add>
     d5c:	21 2f       	mov	r18, r17
     d5e:	ae 01       	movw	r20, r28
     d60:	4f 59       	subi	r20, 0x9F	; 159
     d62:	5f 4f       	sbci	r21, 0xFF	; 255
     d64:	be 01       	movw	r22, r28
     d66:	6f 5b       	subi	r22, 0xBF	; 191
     d68:	7f 4f       	sbci	r23, 0xFF	; 255
     d6a:	cb 01       	movw	r24, r22
     d6c:	28 dd       	rcall	.-1456   	; 0x7be <uECC_vli_sub>
     d6e:	41 2f       	mov	r20, r17
     d70:	b7 01       	movw	r22, r14
     d72:	ce 01       	movw	r24, r28
     d74:	8f 5b       	subi	r24, 0xBF	; 191
     d76:	9f 4f       	sbci	r25, 0xFF	; 255
     d78:	56 df       	rcall	.-340    	; 0xc26 <vli_modInv_update>
     d7a:	2d c0       	rjmp	.+90     	; 0xdd6 <uECC_vli_modInv+0x162>
     d7c:	21 2f       	mov	r18, r17
     d7e:	ae 01       	movw	r20, r28
     d80:	4f 5f       	subi	r20, 0xFF	; 255
     d82:	5f 4f       	sbci	r21, 0xFF	; 255
     d84:	be 01       	movw	r22, r28
     d86:	6f 5d       	subi	r22, 0xDF	; 223
     d88:	7f 4f       	sbci	r23, 0xFF	; 255
     d8a:	cb 01       	movw	r24, r22
     d8c:	18 dd       	rcall	.-1488   	; 0x7be <uECC_vli_sub>
     d8e:	61 2f       	mov	r22, r17
     d90:	ce 01       	movw	r24, r28
     d92:	81 96       	adiw	r24, 0x21	; 33
     d94:	d1 db       	rcall	.-2142   	; 0x538 <uECC_vli_rshift1>
     d96:	41 2f       	mov	r20, r17
     d98:	be 01       	movw	r22, r28
     d9a:	6f 5b       	subi	r22, 0xBF	; 191
     d9c:	7f 4f       	sbci	r23, 0xFF	; 255
     d9e:	ce 01       	movw	r24, r28
     da0:	8f 59       	subi	r24, 0x9F	; 159
     da2:	9f 4f       	sbci	r25, 0xFF	; 255
     da4:	7c de       	rcall	.-776    	; 0xa9e <uECC_vli_cmp_unsafe>
     da6:	88 23       	and	r24, r24
     da8:	3c f4       	brge	.+14     	; 0xdb8 <uECC_vli_modInv+0x144>
     daa:	21 2f       	mov	r18, r17
     dac:	a7 01       	movw	r20, r14
     dae:	be 01       	movw	r22, r28
     db0:	6f 59       	subi	r22, 0x9F	; 159
     db2:	7f 4f       	sbci	r23, 0xFF	; 255
     db4:	cb 01       	movw	r24, r22
     db6:	32 dc       	rcall	.-1948   	; 0x61c <uECC_vli_add>
     db8:	21 2f       	mov	r18, r17
     dba:	ae 01       	movw	r20, r28
     dbc:	4f 5b       	subi	r20, 0xBF	; 191
     dbe:	5f 4f       	sbci	r21, 0xFF	; 255
     dc0:	be 01       	movw	r22, r28
     dc2:	6f 59       	subi	r22, 0x9F	; 159
     dc4:	7f 4f       	sbci	r23, 0xFF	; 255
     dc6:	cb 01       	movw	r24, r22
     dc8:	fa dc       	rcall	.-1548   	; 0x7be <uECC_vli_sub>
     dca:	41 2f       	mov	r20, r17
     dcc:	b7 01       	movw	r22, r14
     dce:	ce 01       	movw	r24, r28
     dd0:	8f 59       	subi	r24, 0x9F	; 159
     dd2:	9f 4f       	sbci	r25, 0xFF	; 255
     dd4:	28 df       	rcall	.-432    	; 0xc26 <vli_modInv_update>
     dd6:	41 2f       	mov	r20, r17
     dd8:	be 01       	movw	r22, r28
     dda:	6f 5d       	subi	r22, 0xDF	; 223
     ddc:	7f 4f       	sbci	r23, 0xFF	; 255
     dde:	ce 01       	movw	r24, r28
     de0:	01 96       	adiw	r24, 0x01	; 1
     de2:	5d de       	rcall	.-838    	; 0xa9e <uECC_vli_cmp_unsafe>
     de4:	81 11       	cpse	r24, r1
     de6:	7e cf       	rjmp	.-260    	; 0xce4 <uECC_vli_modInv+0x70>
     de8:	41 2f       	mov	r20, r17
     dea:	be 01       	movw	r22, r28
     dec:	6f 5b       	subi	r22, 0xBF	; 191
     dee:	7f 4f       	sbci	r23, 0xFF	; 255
     df0:	c5 01       	movw	r24, r10
     df2:	55 db       	rcall	.-2390   	; 0x49e <uECC_vli_set>
     df4:	c0 58       	subi	r28, 0x80	; 128
     df6:	df 4f       	sbci	r29, 0xFF	; 255
     df8:	0f b6       	in	r0, 0x3f	; 63
     dfa:	f8 94       	cli
     dfc:	de bf       	out	0x3e, r29	; 62
     dfe:	0f be       	out	0x3f, r0	; 63
     e00:	cd bf       	out	0x3d, r28	; 61
     e02:	df 91       	pop	r29
     e04:	cf 91       	pop	r28
     e06:	1f 91       	pop	r17
     e08:	ff 90       	pop	r15
     e0a:	ef 90       	pop	r14
     e0c:	df 90       	pop	r13
     e0e:	cf 90       	pop	r12
     e10:	bf 90       	pop	r11
     e12:	af 90       	pop	r10
     e14:	08 95       	ret

00000e16 <double_jacobian_default>:
     e16:	6f 92       	push	r6
     e18:	7f 92       	push	r7
     e1a:	8f 92       	push	r8
     e1c:	9f 92       	push	r9
     e1e:	af 92       	push	r10
     e20:	bf 92       	push	r11
     e22:	cf 92       	push	r12
     e24:	df 92       	push	r13
     e26:	ef 92       	push	r14
     e28:	ff 92       	push	r15
     e2a:	0f 93       	push	r16
     e2c:	1f 93       	push	r17
     e2e:	cf 93       	push	r28
     e30:	df 93       	push	r29
     e32:	cd b7       	in	r28, 0x3d	; 61
     e34:	de b7       	in	r29, 0x3e	; 62
     e36:	c0 54       	subi	r28, 0x40	; 64
     e38:	d1 09       	sbc	r29, r1
     e3a:	0f b6       	in	r0, 0x3f	; 63
     e3c:	f8 94       	cli
     e3e:	de bf       	out	0x3e, r29	; 62
     e40:	0f be       	out	0x3f, r0	; 63
     e42:	cd bf       	out	0x3d, r28	; 61
     e44:	6c 01       	movw	r12, r24
     e46:	3b 01       	movw	r6, r22
     e48:	7a 01       	movw	r14, r20
     e4a:	59 01       	movw	r10, r18
     e4c:	f9 01       	movw	r30, r18
     e4e:	10 81       	ld	r17, Z
     e50:	61 2f       	mov	r22, r17
     e52:	ca 01       	movw	r24, r20
     e54:	c1 dd       	rcall	.-1150   	; 0x9d8 <uECC_vli_isZero>
     e56:	81 11       	cpse	r24, r1
     e58:	96 c0       	rjmp	.+300    	; 0xf86 <double_jacobian_default+0x170>
     e5a:	a5 01       	movw	r20, r10
     e5c:	b3 01       	movw	r22, r6
     e5e:	ce 01       	movw	r24, r28
     e60:	01 96       	adiw	r24, 0x01	; 1
     e62:	dd de       	rcall	.-582    	; 0xc1e <uECC_vli_modSquare_fast>
     e64:	95 01       	movw	r18, r10
     e66:	ae 01       	movw	r20, r28
     e68:	4f 5f       	subi	r20, 0xFF	; 255
     e6a:	5f 4f       	sbci	r21, 0xFF	; 255
     e6c:	b6 01       	movw	r22, r12
     e6e:	ce 01       	movw	r24, r28
     e70:	81 96       	adiw	r24, 0x21	; 33
     e72:	a6 de       	rcall	.-692    	; 0xbc0 <uECC_vli_modMult_fast>
     e74:	a5 01       	movw	r20, r10
     e76:	be 01       	movw	r22, r28
     e78:	6f 5f       	subi	r22, 0xFF	; 255
     e7a:	7f 4f       	sbci	r23, 0xFF	; 255
     e7c:	cb 01       	movw	r24, r22
     e7e:	cf de       	rcall	.-610    	; 0xc1e <uECC_vli_modSquare_fast>
     e80:	95 01       	movw	r18, r10
     e82:	a7 01       	movw	r20, r14
     e84:	b3 01       	movw	r22, r6
     e86:	c3 01       	movw	r24, r6
     e88:	9b de       	rcall	.-714    	; 0xbc0 <uECC_vli_modMult_fast>
     e8a:	a5 01       	movw	r20, r10
     e8c:	b7 01       	movw	r22, r14
     e8e:	c7 01       	movw	r24, r14
     e90:	c6 de       	rcall	.-628    	; 0xc1e <uECC_vli_modSquare_fast>
     e92:	45 01       	movw	r8, r10
     e94:	f4 e0       	ldi	r31, 0x04	; 4
     e96:	8f 0e       	add	r8, r31
     e98:	91 1c       	adc	r9, r1
     e9a:	01 2f       	mov	r16, r17
     e9c:	94 01       	movw	r18, r8
     e9e:	a7 01       	movw	r20, r14
     ea0:	b6 01       	movw	r22, r12
     ea2:	c6 01       	movw	r24, r12
     ea4:	5b de       	rcall	.-842    	; 0xb5c <uECC_vli_modAdd>
     ea6:	94 01       	movw	r18, r8
     ea8:	a7 01       	movw	r20, r14
     eaa:	b7 01       	movw	r22, r14
     eac:	c7 01       	movw	r24, r14
     eae:	56 de       	rcall	.-852    	; 0xb5c <uECC_vli_modAdd>
     eb0:	94 01       	movw	r18, r8
     eb2:	a7 01       	movw	r20, r14
     eb4:	b6 01       	movw	r22, r12
     eb6:	c7 01       	movw	r24, r14
     eb8:	6d de       	rcall	.-806    	; 0xb94 <uECC_vli_modSub>
     eba:	95 01       	movw	r18, r10
     ebc:	a7 01       	movw	r20, r14
     ebe:	b6 01       	movw	r22, r12
     ec0:	c6 01       	movw	r24, r12
     ec2:	7e de       	rcall	.-772    	; 0xbc0 <uECC_vli_modMult_fast>
     ec4:	94 01       	movw	r18, r8
     ec6:	a6 01       	movw	r20, r12
     ec8:	b6 01       	movw	r22, r12
     eca:	c7 01       	movw	r24, r14
     ecc:	47 de       	rcall	.-882    	; 0xb5c <uECC_vli_modAdd>
     ece:	94 01       	movw	r18, r8
     ed0:	a7 01       	movw	r20, r14
     ed2:	b6 01       	movw	r22, r12
     ed4:	c6 01       	movw	r24, r12
     ed6:	42 de       	rcall	.-892    	; 0xb5c <uECC_vli_modAdd>
     ed8:	60 e0       	ldi	r22, 0x00	; 0
     eda:	70 e0       	ldi	r23, 0x00	; 0
     edc:	c6 01       	movw	r24, r12
     ede:	92 dd       	rcall	.-1244   	; 0xa04 <uECC_vli_testBit>
     ee0:	88 23       	and	r24, r24
     ee2:	c1 f0       	breq	.+48     	; 0xf14 <double_jacobian_default+0xfe>
     ee4:	21 2f       	mov	r18, r17
     ee6:	a4 01       	movw	r20, r8
     ee8:	b6 01       	movw	r22, r12
     eea:	c6 01       	movw	r24, r12
     eec:	97 db       	rcall	.-2258   	; 0x61c <uECC_vli_add>
     eee:	08 2f       	mov	r16, r24
     ef0:	61 2f       	mov	r22, r17
     ef2:	c6 01       	movw	r24, r12
     ef4:	21 db       	rcall	.-2494   	; 0x538 <uECC_vli_rshift1>
     ef6:	e1 2f       	mov	r30, r17
     ef8:	01 2e       	mov	r0, r17
     efa:	00 0c       	add	r0, r0
     efc:	ff 0b       	sbc	r31, r31
     efe:	31 97       	sbiw	r30, 0x01	; 1
     f00:	ec 0d       	add	r30, r12
     f02:	fd 1d       	adc	r31, r13
     f04:	20 e8       	ldi	r18, 0x80	; 128
     f06:	02 9f       	mul	r16, r18
     f08:	c0 01       	movw	r24, r0
     f0a:	11 24       	eor	r1, r1
     f0c:	00 81       	ld	r16, Z
     f0e:	08 2b       	or	r16, r24
     f10:	00 83       	st	Z, r16
     f12:	03 c0       	rjmp	.+6      	; 0xf1a <double_jacobian_default+0x104>
     f14:	61 2f       	mov	r22, r17
     f16:	c6 01       	movw	r24, r12
     f18:	0f db       	rcall	.-2530   	; 0x538 <uECC_vli_rshift1>
     f1a:	a5 01       	movw	r20, r10
     f1c:	b6 01       	movw	r22, r12
     f1e:	c7 01       	movw	r24, r14
     f20:	7e de       	rcall	.-772    	; 0xc1e <uECC_vli_modSquare_fast>
     f22:	01 2f       	mov	r16, r17
     f24:	94 01       	movw	r18, r8
     f26:	ae 01       	movw	r20, r28
     f28:	4f 5d       	subi	r20, 0xDF	; 223
     f2a:	5f 4f       	sbci	r21, 0xFF	; 255
     f2c:	b7 01       	movw	r22, r14
     f2e:	c7 01       	movw	r24, r14
     f30:	31 de       	rcall	.-926    	; 0xb94 <uECC_vli_modSub>
     f32:	94 01       	movw	r18, r8
     f34:	ae 01       	movw	r20, r28
     f36:	4f 5d       	subi	r20, 0xDF	; 223
     f38:	5f 4f       	sbci	r21, 0xFF	; 255
     f3a:	b7 01       	movw	r22, r14
     f3c:	c7 01       	movw	r24, r14
     f3e:	2a de       	rcall	.-940    	; 0xb94 <uECC_vli_modSub>
     f40:	94 01       	movw	r18, r8
     f42:	a7 01       	movw	r20, r14
     f44:	be 01       	movw	r22, r28
     f46:	6f 5d       	subi	r22, 0xDF	; 223
     f48:	7f 4f       	sbci	r23, 0xFF	; 255
     f4a:	cb 01       	movw	r24, r22
     f4c:	23 de       	rcall	.-954    	; 0xb94 <uECC_vli_modSub>
     f4e:	95 01       	movw	r18, r10
     f50:	ae 01       	movw	r20, r28
     f52:	4f 5d       	subi	r20, 0xDF	; 223
     f54:	5f 4f       	sbci	r21, 0xFF	; 255
     f56:	b6 01       	movw	r22, r12
     f58:	c6 01       	movw	r24, r12
     f5a:	32 de       	rcall	.-924    	; 0xbc0 <uECC_vli_modMult_fast>
     f5c:	94 01       	movw	r18, r8
     f5e:	ae 01       	movw	r20, r28
     f60:	4f 5f       	subi	r20, 0xFF	; 255
     f62:	5f 4f       	sbci	r21, 0xFF	; 255
     f64:	b6 01       	movw	r22, r12
     f66:	ca 01       	movw	r24, r20
     f68:	15 de       	rcall	.-982    	; 0xb94 <uECC_vli_modSub>
     f6a:	41 2f       	mov	r20, r17
     f6c:	b7 01       	movw	r22, r14
     f6e:	c6 01       	movw	r24, r12
     f70:	96 da       	rcall	.-2772   	; 0x49e <uECC_vli_set>
     f72:	41 2f       	mov	r20, r17
     f74:	b3 01       	movw	r22, r6
     f76:	c7 01       	movw	r24, r14
     f78:	92 da       	rcall	.-2780   	; 0x49e <uECC_vli_set>
     f7a:	41 2f       	mov	r20, r17
     f7c:	be 01       	movw	r22, r28
     f7e:	6f 5f       	subi	r22, 0xFF	; 255
     f80:	7f 4f       	sbci	r23, 0xFF	; 255
     f82:	c3 01       	movw	r24, r6
     f84:	8c da       	rcall	.-2792   	; 0x49e <uECC_vli_set>
     f86:	c0 5c       	subi	r28, 0xC0	; 192
     f88:	df 4f       	sbci	r29, 0xFF	; 255
     f8a:	0f b6       	in	r0, 0x3f	; 63
     f8c:	f8 94       	cli
     f8e:	de bf       	out	0x3e, r29	; 62
     f90:	0f be       	out	0x3f, r0	; 63
     f92:	cd bf       	out	0x3d, r28	; 61
     f94:	df 91       	pop	r29
     f96:	cf 91       	pop	r28
     f98:	1f 91       	pop	r17
     f9a:	0f 91       	pop	r16
     f9c:	ff 90       	pop	r15
     f9e:	ef 90       	pop	r14
     fa0:	df 90       	pop	r13
     fa2:	cf 90       	pop	r12
     fa4:	bf 90       	pop	r11
     fa6:	af 90       	pop	r10
     fa8:	9f 90       	pop	r9
     faa:	8f 90       	pop	r8
     fac:	7f 90       	pop	r7
     fae:	6f 90       	pop	r6
     fb0:	08 95       	ret

00000fb2 <x_side_default>:
     fb2:	6f 92       	push	r6
     fb4:	7f 92       	push	r7
     fb6:	8f 92       	push	r8
     fb8:	9f 92       	push	r9
     fba:	af 92       	push	r10
     fbc:	bf 92       	push	r11
     fbe:	cf 92       	push	r12
     fc0:	df 92       	push	r13
     fc2:	ef 92       	push	r14
     fc4:	ff 92       	push	r15
     fc6:	0f 93       	push	r16
     fc8:	1f 93       	push	r17
     fca:	cf 93       	push	r28
     fcc:	df 93       	push	r29
     fce:	cd b7       	in	r28, 0x3d	; 61
     fd0:	de b7       	in	r29, 0x3e	; 62
     fd2:	a0 97       	sbiw	r28, 0x20	; 32
     fd4:	0f b6       	in	r0, 0x3f	; 63
     fd6:	f8 94       	cli
     fd8:	de bf       	out	0x3e, r29	; 62
     fda:	0f be       	out	0x3f, r0	; 63
     fdc:	cd bf       	out	0x3d, r28	; 61
     fde:	7c 01       	movw	r14, r24
     fe0:	4b 01       	movw	r8, r22
     fe2:	6a 01       	movw	r12, r20
     fe4:	ce 01       	movw	r24, r28
     fe6:	01 96       	adiw	r24, 0x01	; 1
     fe8:	3c 01       	movw	r6, r24
     fea:	80 e2       	ldi	r24, 0x20	; 32
     fec:	f3 01       	movw	r30, r6
     fee:	11 92       	st	Z+, r1
     ff0:	8a 95       	dec	r24
     ff2:	e9 f7       	brne	.-6      	; 0xfee <x_side_default+0x3c>
     ff4:	83 e0       	ldi	r24, 0x03	; 3
     ff6:	89 83       	std	Y+1, r24	; 0x01
     ff8:	fa 01       	movw	r30, r20
     ffa:	10 81       	ld	r17, Z
     ffc:	c7 01       	movw	r24, r14
     ffe:	0f de       	rcall	.-994    	; 0xc1e <uECC_vli_modSquare_fast>
    1000:	56 01       	movw	r10, r12
    1002:	f4 e0       	ldi	r31, 0x04	; 4
    1004:	af 0e       	add	r10, r31
    1006:	b1 1c       	adc	r11, r1
    1008:	01 2f       	mov	r16, r17
    100a:	95 01       	movw	r18, r10
    100c:	a3 01       	movw	r20, r6
    100e:	b7 01       	movw	r22, r14
    1010:	c7 01       	movw	r24, r14
    1012:	c0 dd       	rcall	.-1152   	; 0xb94 <uECC_vli_modSub>
    1014:	96 01       	movw	r18, r12
    1016:	a4 01       	movw	r20, r8
    1018:	b7 01       	movw	r22, r14
    101a:	c7 01       	movw	r24, r14
    101c:	d1 dd       	rcall	.-1118   	; 0xbc0 <uECC_vli_modMult_fast>
    101e:	a6 01       	movw	r20, r12
    1020:	4c 57       	subi	r20, 0x7C	; 124
    1022:	5f 4f       	sbci	r21, 0xFF	; 255
    1024:	95 01       	movw	r18, r10
    1026:	b7 01       	movw	r22, r14
    1028:	c7 01       	movw	r24, r14
    102a:	98 dd       	rcall	.-1232   	; 0xb5c <uECC_vli_modAdd>
    102c:	a0 96       	adiw	r28, 0x20	; 32
    102e:	0f b6       	in	r0, 0x3f	; 63
    1030:	f8 94       	cli
    1032:	de bf       	out	0x3e, r29	; 62
    1034:	0f be       	out	0x3f, r0	; 63
    1036:	cd bf       	out	0x3d, r28	; 61
    1038:	df 91       	pop	r29
    103a:	cf 91       	pop	r28
    103c:	1f 91       	pop	r17
    103e:	0f 91       	pop	r16
    1040:	ff 90       	pop	r15
    1042:	ef 90       	pop	r14
    1044:	df 90       	pop	r13
    1046:	cf 90       	pop	r12
    1048:	bf 90       	pop	r11
    104a:	af 90       	pop	r10
    104c:	9f 90       	pop	r9
    104e:	8f 90       	pop	r8
    1050:	7f 90       	pop	r7
    1052:	6f 90       	pop	r6
    1054:	08 95       	ret

00001056 <mod_sqrt_default>:
    1056:	bf 92       	push	r11
    1058:	cf 92       	push	r12
    105a:	df 92       	push	r13
    105c:	ef 92       	push	r14
    105e:	ff 92       	push	r15
    1060:	0f 93       	push	r16
    1062:	1f 93       	push	r17
    1064:	cf 93       	push	r28
    1066:	df 93       	push	r29
    1068:	cd b7       	in	r28, 0x3d	; 61
    106a:	de b7       	in	r29, 0x3e	; 62
    106c:	c0 54       	subi	r28, 0x40	; 64
    106e:	d1 09       	sbc	r29, r1
    1070:	0f b6       	in	r0, 0x3f	; 63
    1072:	f8 94       	cli
    1074:	de bf       	out	0x3e, r29	; 62
    1076:	0f be       	out	0x3f, r0	; 63
    1078:	cd bf       	out	0x3d, r28	; 61
    107a:	6c 01       	movw	r12, r24
    107c:	7b 01       	movw	r14, r22
    107e:	90 e2       	ldi	r25, 0x20	; 32
    1080:	8e 01       	movw	r16, r28
    1082:	0f 5f       	subi	r16, 0xFF	; 255
    1084:	1f 4f       	sbci	r17, 0xFF	; 255
    1086:	d8 01       	movw	r26, r16
    1088:	e9 2f       	mov	r30, r25
    108a:	1d 92       	st	X+, r1
    108c:	ea 95       	dec	r30
    108e:	e9 f7       	brne	.-6      	; 0x108a <mod_sqrt_default+0x34>
    1090:	81 e0       	ldi	r24, 0x01	; 1
    1092:	89 83       	std	Y+1, r24	; 0x01
    1094:	fe 01       	movw	r30, r28
    1096:	b1 96       	adiw	r30, 0x21	; 33
    1098:	df 01       	movw	r26, r30
    109a:	1d 92       	st	X+, r1
    109c:	9a 95       	dec	r25
    109e:	e9 f7       	brne	.-6      	; 0x109a <mod_sqrt_default+0x44>
    10a0:	89 a3       	std	Y+33, r24	; 0x21
    10a2:	fb 01       	movw	r30, r22
    10a4:	b0 80       	ld	r11, Z
    10a6:	6c 5f       	subi	r22, 0xFC	; 252
    10a8:	7f 4f       	sbci	r23, 0xFF	; 255
    10aa:	2b 2d       	mov	r18, r11
    10ac:	a8 01       	movw	r20, r16
    10ae:	c8 01       	movw	r24, r16
    10b0:	b5 da       	rcall	.-2710   	; 0x61c <uECC_vli_add>
    10b2:	6b 2d       	mov	r22, r11
    10b4:	c8 01       	movw	r24, r16
    10b6:	bc dc       	rcall	.-1672   	; 0xa30 <uECC_vli_numBits>
    10b8:	8c 01       	movw	r16, r24
    10ba:	01 50       	subi	r16, 0x01	; 1
    10bc:	11 09       	sbc	r17, r1
    10be:	02 30       	cpi	r16, 0x02	; 2
    10c0:	11 05       	cpc	r17, r1
    10c2:	c4 f0       	brlt	.+48     	; 0x10f4 <mod_sqrt_default+0x9e>
    10c4:	a7 01       	movw	r20, r14
    10c6:	be 01       	movw	r22, r28
    10c8:	6f 5d       	subi	r22, 0xDF	; 223
    10ca:	7f 4f       	sbci	r23, 0xFF	; 255
    10cc:	cb 01       	movw	r24, r22
    10ce:	a7 dd       	rcall	.-1202   	; 0xc1e <uECC_vli_modSquare_fast>
    10d0:	b8 01       	movw	r22, r16
    10d2:	ce 01       	movw	r24, r28
    10d4:	01 96       	adiw	r24, 0x01	; 1
    10d6:	96 dc       	rcall	.-1748   	; 0xa04 <uECC_vli_testBit>
    10d8:	88 23       	and	r24, r24
    10da:	39 f0       	breq	.+14     	; 0x10ea <mod_sqrt_default+0x94>
    10dc:	97 01       	movw	r18, r14
    10de:	a6 01       	movw	r20, r12
    10e0:	be 01       	movw	r22, r28
    10e2:	6f 5d       	subi	r22, 0xDF	; 223
    10e4:	7f 4f       	sbci	r23, 0xFF	; 255
    10e6:	cb 01       	movw	r24, r22
    10e8:	6b dd       	rcall	.-1322   	; 0xbc0 <uECC_vli_modMult_fast>
    10ea:	01 50       	subi	r16, 0x01	; 1
    10ec:	11 09       	sbc	r17, r1
    10ee:	01 30       	cpi	r16, 0x01	; 1
    10f0:	11 05       	cpc	r17, r1
    10f2:	41 f7       	brne	.-48     	; 0x10c4 <mod_sqrt_default+0x6e>
    10f4:	4b 2d       	mov	r20, r11
    10f6:	be 01       	movw	r22, r28
    10f8:	6f 5d       	subi	r22, 0xDF	; 223
    10fa:	7f 4f       	sbci	r23, 0xFF	; 255
    10fc:	c6 01       	movw	r24, r12
    10fe:	cf d9       	rcall	.-3170   	; 0x49e <uECC_vli_set>
    1100:	c0 5c       	subi	r28, 0xC0	; 192
    1102:	df 4f       	sbci	r29, 0xFF	; 255
    1104:	0f b6       	in	r0, 0x3f	; 63
    1106:	f8 94       	cli
    1108:	de bf       	out	0x3e, r29	; 62
    110a:	0f be       	out	0x3f, r0	; 63
    110c:	cd bf       	out	0x3d, r28	; 61
    110e:	df 91       	pop	r29
    1110:	cf 91       	pop	r28
    1112:	1f 91       	pop	r17
    1114:	0f 91       	pop	r16
    1116:	ff 90       	pop	r15
    1118:	ef 90       	pop	r14
    111a:	df 90       	pop	r13
    111c:	cf 90       	pop	r12
    111e:	bf 90       	pop	r11
    1120:	08 95       	ret

00001122 <vli_mmod_fast_secp256r1>:
    1122:	cf 92       	push	r12
    1124:	df 92       	push	r13
    1126:	ff 92       	push	r15
    1128:	0f 93       	push	r16
    112a:	1f 93       	push	r17
    112c:	cf 93       	push	r28
    112e:	df 93       	push	r29
    1130:	cd b7       	in	r28, 0x3d	; 61
    1132:	de b7       	in	r29, 0x3e	; 62
    1134:	a0 97       	sbiw	r28, 0x20	; 32
    1136:	0f b6       	in	r0, 0x3f	; 63
    1138:	f8 94       	cli
    113a:	de bf       	out	0x3e, r29	; 62
    113c:	0f be       	out	0x3f, r0	; 63
    113e:	cd bf       	out	0x3d, r28	; 61
    1140:	6c 01       	movw	r12, r24
    1142:	8b 01       	movw	r16, r22
    1144:	40 e2       	ldi	r20, 0x20	; 32
    1146:	ab d9       	rcall	.-3242   	; 0x49e <uECC_vli_set>
    1148:	1c 82       	std	Y+4, r1	; 0x04
    114a:	1b 82       	std	Y+3, r1	; 0x03
    114c:	1a 82       	std	Y+2, r1	; 0x02
    114e:	19 82       	std	Y+1, r1	; 0x01
    1150:	18 86       	std	Y+8, r1	; 0x08
    1152:	1f 82       	std	Y+7, r1	; 0x07
    1154:	1e 82       	std	Y+6, r1	; 0x06
    1156:	1d 82       	std	Y+5, r1	; 0x05
    1158:	1c 86       	std	Y+12, r1	; 0x0c
    115a:	1b 86       	std	Y+11, r1	; 0x0b
    115c:	1a 86       	std	Y+10, r1	; 0x0a
    115e:	19 86       	std	Y+9, r1	; 0x09
    1160:	f8 01       	movw	r30, r16
    1162:	84 a5       	ldd	r24, Z+44	; 0x2c
    1164:	8d 87       	std	Y+13, r24	; 0x0d
    1166:	85 a5       	ldd	r24, Z+45	; 0x2d
    1168:	8e 87       	std	Y+14, r24	; 0x0e
    116a:	86 a5       	ldd	r24, Z+46	; 0x2e
    116c:	8f 87       	std	Y+15, r24	; 0x0f
    116e:	87 a5       	ldd	r24, Z+47	; 0x2f
    1170:	88 8b       	std	Y+16, r24	; 0x10
    1172:	80 a9       	ldd	r24, Z+48	; 0x30
    1174:	89 8b       	std	Y+17, r24	; 0x11
    1176:	81 a9       	ldd	r24, Z+49	; 0x31
    1178:	8a 8b       	std	Y+18, r24	; 0x12
    117a:	82 a9       	ldd	r24, Z+50	; 0x32
    117c:	8b 8b       	std	Y+19, r24	; 0x13
    117e:	83 a9       	ldd	r24, Z+51	; 0x33
    1180:	8c 8b       	std	Y+20, r24	; 0x14
    1182:	84 a9       	ldd	r24, Z+52	; 0x34
    1184:	8d 8b       	std	Y+21, r24	; 0x15
    1186:	85 a9       	ldd	r24, Z+53	; 0x35
    1188:	8e 8b       	std	Y+22, r24	; 0x16
    118a:	86 a9       	ldd	r24, Z+54	; 0x36
    118c:	8f 8b       	std	Y+23, r24	; 0x17
    118e:	87 a9       	ldd	r24, Z+55	; 0x37
    1190:	88 8f       	std	Y+24, r24	; 0x18
    1192:	80 ad       	ldd	r24, Z+56	; 0x38
    1194:	89 8f       	std	Y+25, r24	; 0x19
    1196:	81 ad       	ldd	r24, Z+57	; 0x39
    1198:	8a 8f       	std	Y+26, r24	; 0x1a
    119a:	82 ad       	ldd	r24, Z+58	; 0x3a
    119c:	8b 8f       	std	Y+27, r24	; 0x1b
    119e:	83 ad       	ldd	r24, Z+59	; 0x3b
    11a0:	8c 8f       	std	Y+28, r24	; 0x1c
    11a2:	84 ad       	ldd	r24, Z+60	; 0x3c
    11a4:	8d 8f       	std	Y+29, r24	; 0x1d
    11a6:	85 ad       	ldd	r24, Z+61	; 0x3d
    11a8:	8e 8f       	std	Y+30, r24	; 0x1e
    11aa:	86 ad       	ldd	r24, Z+62	; 0x3e
    11ac:	8f 8f       	std	Y+31, r24	; 0x1f
    11ae:	87 ad       	ldd	r24, Z+63	; 0x3f
    11b0:	88 a3       	std	Y+32, r24	; 0x20
    11b2:	20 e2       	ldi	r18, 0x20	; 32
    11b4:	ae 01       	movw	r20, r28
    11b6:	4f 5f       	subi	r20, 0xFF	; 255
    11b8:	5f 4f       	sbci	r21, 0xFF	; 255
    11ba:	ba 01       	movw	r22, r20
    11bc:	ca 01       	movw	r24, r20
    11be:	2e da       	rcall	.-2980   	; 0x61c <uECC_vli_add>
    11c0:	f8 2e       	mov	r15, r24
    11c2:	20 e2       	ldi	r18, 0x20	; 32
    11c4:	ae 01       	movw	r20, r28
    11c6:	4f 5f       	subi	r20, 0xFF	; 255
    11c8:	5f 4f       	sbci	r21, 0xFF	; 255
    11ca:	b6 01       	movw	r22, r12
    11cc:	c6 01       	movw	r24, r12
    11ce:	26 da       	rcall	.-2996   	; 0x61c <uECC_vli_add>
    11d0:	f8 0e       	add	r15, r24
    11d2:	f8 01       	movw	r30, r16
    11d4:	80 a9       	ldd	r24, Z+48	; 0x30
    11d6:	8d 87       	std	Y+13, r24	; 0x0d
    11d8:	81 a9       	ldd	r24, Z+49	; 0x31
    11da:	8e 87       	std	Y+14, r24	; 0x0e
    11dc:	82 a9       	ldd	r24, Z+50	; 0x32
    11de:	8f 87       	std	Y+15, r24	; 0x0f
    11e0:	83 a9       	ldd	r24, Z+51	; 0x33
    11e2:	88 8b       	std	Y+16, r24	; 0x10
    11e4:	84 a9       	ldd	r24, Z+52	; 0x34
    11e6:	89 8b       	std	Y+17, r24	; 0x11
    11e8:	85 a9       	ldd	r24, Z+53	; 0x35
    11ea:	8a 8b       	std	Y+18, r24	; 0x12
    11ec:	86 a9       	ldd	r24, Z+54	; 0x36
    11ee:	8b 8b       	std	Y+19, r24	; 0x13
    11f0:	87 a9       	ldd	r24, Z+55	; 0x37
    11f2:	8c 8b       	std	Y+20, r24	; 0x14
    11f4:	80 ad       	ldd	r24, Z+56	; 0x38
    11f6:	8d 8b       	std	Y+21, r24	; 0x15
    11f8:	81 ad       	ldd	r24, Z+57	; 0x39
    11fa:	8e 8b       	std	Y+22, r24	; 0x16
    11fc:	82 ad       	ldd	r24, Z+58	; 0x3a
    11fe:	8f 8b       	std	Y+23, r24	; 0x17
    1200:	83 ad       	ldd	r24, Z+59	; 0x3b
    1202:	88 8f       	std	Y+24, r24	; 0x18
    1204:	84 ad       	ldd	r24, Z+60	; 0x3c
    1206:	89 8f       	std	Y+25, r24	; 0x19
    1208:	85 ad       	ldd	r24, Z+61	; 0x3d
    120a:	8a 8f       	std	Y+26, r24	; 0x1a
    120c:	86 ad       	ldd	r24, Z+62	; 0x3e
    120e:	8b 8f       	std	Y+27, r24	; 0x1b
    1210:	87 ad       	ldd	r24, Z+63	; 0x3f
    1212:	8c 8f       	std	Y+28, r24	; 0x1c
    1214:	18 a2       	std	Y+32, r1	; 0x20
    1216:	1f 8e       	std	Y+31, r1	; 0x1f
    1218:	1e 8e       	std	Y+30, r1	; 0x1e
    121a:	1d 8e       	std	Y+29, r1	; 0x1d
    121c:	20 e2       	ldi	r18, 0x20	; 32
    121e:	ae 01       	movw	r20, r28
    1220:	4f 5f       	subi	r20, 0xFF	; 255
    1222:	5f 4f       	sbci	r21, 0xFF	; 255
    1224:	ba 01       	movw	r22, r20
    1226:	ca 01       	movw	r24, r20
    1228:	f9 d9       	rcall	.-3086   	; 0x61c <uECC_vli_add>
    122a:	f8 0e       	add	r15, r24
    122c:	20 e2       	ldi	r18, 0x20	; 32
    122e:	ae 01       	movw	r20, r28
    1230:	4f 5f       	subi	r20, 0xFF	; 255
    1232:	5f 4f       	sbci	r21, 0xFF	; 255
    1234:	b6 01       	movw	r22, r12
    1236:	c6 01       	movw	r24, r12
    1238:	f1 d9       	rcall	.-3102   	; 0x61c <uECC_vli_add>
    123a:	f8 0e       	add	r15, r24
    123c:	f8 01       	movw	r30, r16
    123e:	80 a1       	ldd	r24, Z+32	; 0x20
    1240:	89 83       	std	Y+1, r24	; 0x01
    1242:	81 a1       	ldd	r24, Z+33	; 0x21
    1244:	8a 83       	std	Y+2, r24	; 0x02
    1246:	82 a1       	ldd	r24, Z+34	; 0x22
    1248:	8b 83       	std	Y+3, r24	; 0x03
    124a:	83 a1       	ldd	r24, Z+35	; 0x23
    124c:	8c 83       	std	Y+4, r24	; 0x04
    124e:	84 a1       	ldd	r24, Z+36	; 0x24
    1250:	8d 83       	std	Y+5, r24	; 0x05
    1252:	85 a1       	ldd	r24, Z+37	; 0x25
    1254:	8e 83       	std	Y+6, r24	; 0x06
    1256:	86 a1       	ldd	r24, Z+38	; 0x26
    1258:	8f 83       	std	Y+7, r24	; 0x07
    125a:	87 a1       	ldd	r24, Z+39	; 0x27
    125c:	88 87       	std	Y+8, r24	; 0x08
    125e:	80 a5       	ldd	r24, Z+40	; 0x28
    1260:	89 87       	std	Y+9, r24	; 0x09
    1262:	81 a5       	ldd	r24, Z+41	; 0x29
    1264:	8a 87       	std	Y+10, r24	; 0x0a
    1266:	82 a5       	ldd	r24, Z+42	; 0x2a
    1268:	8b 87       	std	Y+11, r24	; 0x0b
    126a:	83 a5       	ldd	r24, Z+43	; 0x2b
    126c:	8c 87       	std	Y+12, r24	; 0x0c
    126e:	18 8a       	std	Y+16, r1	; 0x10
    1270:	1f 86       	std	Y+15, r1	; 0x0f
    1272:	1e 86       	std	Y+14, r1	; 0x0e
    1274:	1d 86       	std	Y+13, r1	; 0x0d
    1276:	1c 8a       	std	Y+20, r1	; 0x14
    1278:	1b 8a       	std	Y+19, r1	; 0x13
    127a:	1a 8a       	std	Y+18, r1	; 0x12
    127c:	19 8a       	std	Y+17, r1	; 0x11
    127e:	18 8e       	std	Y+24, r1	; 0x18
    1280:	1f 8a       	std	Y+23, r1	; 0x17
    1282:	1e 8a       	std	Y+22, r1	; 0x16
    1284:	1d 8a       	std	Y+21, r1	; 0x15
    1286:	80 ad       	ldd	r24, Z+56	; 0x38
    1288:	89 8f       	std	Y+25, r24	; 0x19
    128a:	81 ad       	ldd	r24, Z+57	; 0x39
    128c:	8a 8f       	std	Y+26, r24	; 0x1a
    128e:	82 ad       	ldd	r24, Z+58	; 0x3a
    1290:	8b 8f       	std	Y+27, r24	; 0x1b
    1292:	83 ad       	ldd	r24, Z+59	; 0x3b
    1294:	8c 8f       	std	Y+28, r24	; 0x1c
    1296:	84 ad       	ldd	r24, Z+60	; 0x3c
    1298:	8d 8f       	std	Y+29, r24	; 0x1d
    129a:	85 ad       	ldd	r24, Z+61	; 0x3d
    129c:	8e 8f       	std	Y+30, r24	; 0x1e
    129e:	86 ad       	ldd	r24, Z+62	; 0x3e
    12a0:	8f 8f       	std	Y+31, r24	; 0x1f
    12a2:	87 ad       	ldd	r24, Z+63	; 0x3f
    12a4:	88 a3       	std	Y+32, r24	; 0x20
    12a6:	20 e2       	ldi	r18, 0x20	; 32
    12a8:	ae 01       	movw	r20, r28
    12aa:	4f 5f       	subi	r20, 0xFF	; 255
    12ac:	5f 4f       	sbci	r21, 0xFF	; 255
    12ae:	b6 01       	movw	r22, r12
    12b0:	c6 01       	movw	r24, r12
    12b2:	b4 d9       	rcall	.-3224   	; 0x61c <uECC_vli_add>
    12b4:	f8 0e       	add	r15, r24
    12b6:	f8 01       	movw	r30, r16
    12b8:	84 a1       	ldd	r24, Z+36	; 0x24
    12ba:	89 83       	std	Y+1, r24	; 0x01
    12bc:	85 a1       	ldd	r24, Z+37	; 0x25
    12be:	8a 83       	std	Y+2, r24	; 0x02
    12c0:	86 a1       	ldd	r24, Z+38	; 0x26
    12c2:	8b 83       	std	Y+3, r24	; 0x03
    12c4:	87 a1       	ldd	r24, Z+39	; 0x27
    12c6:	8c 83       	std	Y+4, r24	; 0x04
    12c8:	80 a5       	ldd	r24, Z+40	; 0x28
    12ca:	8d 83       	std	Y+5, r24	; 0x05
    12cc:	81 a5       	ldd	r24, Z+41	; 0x29
    12ce:	8e 83       	std	Y+6, r24	; 0x06
    12d0:	82 a5       	ldd	r24, Z+42	; 0x2a
    12d2:	8f 83       	std	Y+7, r24	; 0x07
    12d4:	83 a5       	ldd	r24, Z+43	; 0x2b
    12d6:	88 87       	std	Y+8, r24	; 0x08
    12d8:	84 a5       	ldd	r24, Z+44	; 0x2c
    12da:	89 87       	std	Y+9, r24	; 0x09
    12dc:	85 a5       	ldd	r24, Z+45	; 0x2d
    12de:	8a 87       	std	Y+10, r24	; 0x0a
    12e0:	86 a5       	ldd	r24, Z+46	; 0x2e
    12e2:	8b 87       	std	Y+11, r24	; 0x0b
    12e4:	87 a5       	ldd	r24, Z+47	; 0x2f
    12e6:	8c 87       	std	Y+12, r24	; 0x0c
    12e8:	34 a9       	ldd	r19, Z+52	; 0x34
    12ea:	3d 87       	std	Y+13, r19	; 0x0d
    12ec:	25 a9       	ldd	r18, Z+53	; 0x35
    12ee:	2e 87       	std	Y+14, r18	; 0x0e
    12f0:	96 a9       	ldd	r25, Z+54	; 0x36
    12f2:	9f 87       	std	Y+15, r25	; 0x0f
    12f4:	87 a9       	ldd	r24, Z+55	; 0x37
    12f6:	88 8b       	std	Y+16, r24	; 0x10
    12f8:	40 ad       	ldd	r20, Z+56	; 0x38
    12fa:	49 8b       	std	Y+17, r20	; 0x11
    12fc:	41 ad       	ldd	r20, Z+57	; 0x39
    12fe:	4a 8b       	std	Y+18, r20	; 0x12
    1300:	42 ad       	ldd	r20, Z+58	; 0x3a
    1302:	4b 8b       	std	Y+19, r20	; 0x13
    1304:	43 ad       	ldd	r20, Z+59	; 0x3b
    1306:	4c 8b       	std	Y+20, r20	; 0x14
    1308:	44 ad       	ldd	r20, Z+60	; 0x3c
    130a:	4d 8b       	std	Y+21, r20	; 0x15
    130c:	45 ad       	ldd	r20, Z+61	; 0x3d
    130e:	4e 8b       	std	Y+22, r20	; 0x16
    1310:	46 ad       	ldd	r20, Z+62	; 0x3e
    1312:	4f 8b       	std	Y+23, r20	; 0x17
    1314:	47 ad       	ldd	r20, Z+63	; 0x3f
    1316:	48 8f       	std	Y+24, r20	; 0x18
    1318:	39 8f       	std	Y+25, r19	; 0x19
    131a:	2a 8f       	std	Y+26, r18	; 0x1a
    131c:	9b 8f       	std	Y+27, r25	; 0x1b
    131e:	8c 8f       	std	Y+28, r24	; 0x1c
    1320:	80 a1       	ldd	r24, Z+32	; 0x20
    1322:	8d 8f       	std	Y+29, r24	; 0x1d
    1324:	81 a1       	ldd	r24, Z+33	; 0x21
    1326:	8e 8f       	std	Y+30, r24	; 0x1e
    1328:	82 a1       	ldd	r24, Z+34	; 0x22
    132a:	8f 8f       	std	Y+31, r24	; 0x1f
    132c:	83 a1       	ldd	r24, Z+35	; 0x23
    132e:	88 a3       	std	Y+32, r24	; 0x20
    1330:	20 e2       	ldi	r18, 0x20	; 32
    1332:	ae 01       	movw	r20, r28
    1334:	4f 5f       	subi	r20, 0xFF	; 255
    1336:	5f 4f       	sbci	r21, 0xFF	; 255
    1338:	b6 01       	movw	r22, r12
    133a:	c6 01       	movw	r24, r12
    133c:	6f d9       	rcall	.-3362   	; 0x61c <uECC_vli_add>
    133e:	f8 0e       	add	r15, r24
    1340:	f8 01       	movw	r30, r16
    1342:	84 a5       	ldd	r24, Z+44	; 0x2c
    1344:	89 83       	std	Y+1, r24	; 0x01
    1346:	85 a5       	ldd	r24, Z+45	; 0x2d
    1348:	8a 83       	std	Y+2, r24	; 0x02
    134a:	86 a5       	ldd	r24, Z+46	; 0x2e
    134c:	8b 83       	std	Y+3, r24	; 0x03
    134e:	87 a5       	ldd	r24, Z+47	; 0x2f
    1350:	8c 83       	std	Y+4, r24	; 0x04
    1352:	80 a9       	ldd	r24, Z+48	; 0x30
    1354:	8d 83       	std	Y+5, r24	; 0x05
    1356:	81 a9       	ldd	r24, Z+49	; 0x31
    1358:	8e 83       	std	Y+6, r24	; 0x06
    135a:	82 a9       	ldd	r24, Z+50	; 0x32
    135c:	8f 83       	std	Y+7, r24	; 0x07
    135e:	83 a9       	ldd	r24, Z+51	; 0x33
    1360:	88 87       	std	Y+8, r24	; 0x08
    1362:	84 a9       	ldd	r24, Z+52	; 0x34
    1364:	89 87       	std	Y+9, r24	; 0x09
    1366:	85 a9       	ldd	r24, Z+53	; 0x35
    1368:	8a 87       	std	Y+10, r24	; 0x0a
    136a:	86 a9       	ldd	r24, Z+54	; 0x36
    136c:	8b 87       	std	Y+11, r24	; 0x0b
    136e:	87 a9       	ldd	r24, Z+55	; 0x37
    1370:	8c 87       	std	Y+12, r24	; 0x0c
    1372:	18 8a       	std	Y+16, r1	; 0x10
    1374:	1f 86       	std	Y+15, r1	; 0x0f
    1376:	1e 86       	std	Y+14, r1	; 0x0e
    1378:	1d 86       	std	Y+13, r1	; 0x0d
    137a:	1c 8a       	std	Y+20, r1	; 0x14
    137c:	1b 8a       	std	Y+19, r1	; 0x13
    137e:	1a 8a       	std	Y+18, r1	; 0x12
    1380:	19 8a       	std	Y+17, r1	; 0x11
    1382:	18 8e       	std	Y+24, r1	; 0x18
    1384:	1f 8a       	std	Y+23, r1	; 0x17
    1386:	1e 8a       	std	Y+22, r1	; 0x16
    1388:	1d 8a       	std	Y+21, r1	; 0x15
    138a:	80 a1       	ldd	r24, Z+32	; 0x20
    138c:	89 8f       	std	Y+25, r24	; 0x19
    138e:	81 a1       	ldd	r24, Z+33	; 0x21
    1390:	8a 8f       	std	Y+26, r24	; 0x1a
    1392:	82 a1       	ldd	r24, Z+34	; 0x22
    1394:	8b 8f       	std	Y+27, r24	; 0x1b
    1396:	83 a1       	ldd	r24, Z+35	; 0x23
    1398:	8c 8f       	std	Y+28, r24	; 0x1c
    139a:	80 a5       	ldd	r24, Z+40	; 0x28
    139c:	8d 8f       	std	Y+29, r24	; 0x1d
    139e:	81 a5       	ldd	r24, Z+41	; 0x29
    13a0:	8e 8f       	std	Y+30, r24	; 0x1e
    13a2:	82 a5       	ldd	r24, Z+42	; 0x2a
    13a4:	8f 8f       	std	Y+31, r24	; 0x1f
    13a6:	83 a5       	ldd	r24, Z+43	; 0x2b
    13a8:	88 a3       	std	Y+32, r24	; 0x20
    13aa:	20 e2       	ldi	r18, 0x20	; 32
    13ac:	ae 01       	movw	r20, r28
    13ae:	4f 5f       	subi	r20, 0xFF	; 255
    13b0:	5f 4f       	sbci	r21, 0xFF	; 255
    13b2:	b6 01       	movw	r22, r12
    13b4:	c6 01       	movw	r24, r12
    13b6:	03 da       	rcall	.-3066   	; 0x7be <uECC_vli_sub>
    13b8:	f8 1a       	sub	r15, r24
    13ba:	f8 01       	movw	r30, r16
    13bc:	80 a9       	ldd	r24, Z+48	; 0x30
    13be:	89 83       	std	Y+1, r24	; 0x01
    13c0:	81 a9       	ldd	r24, Z+49	; 0x31
    13c2:	8a 83       	std	Y+2, r24	; 0x02
    13c4:	82 a9       	ldd	r24, Z+50	; 0x32
    13c6:	8b 83       	std	Y+3, r24	; 0x03
    13c8:	83 a9       	ldd	r24, Z+51	; 0x33
    13ca:	8c 83       	std	Y+4, r24	; 0x04
    13cc:	84 a9       	ldd	r24, Z+52	; 0x34
    13ce:	8d 83       	std	Y+5, r24	; 0x05
    13d0:	85 a9       	ldd	r24, Z+53	; 0x35
    13d2:	8e 83       	std	Y+6, r24	; 0x06
    13d4:	86 a9       	ldd	r24, Z+54	; 0x36
    13d6:	8f 83       	std	Y+7, r24	; 0x07
    13d8:	87 a9       	ldd	r24, Z+55	; 0x37
    13da:	88 87       	std	Y+8, r24	; 0x08
    13dc:	80 ad       	ldd	r24, Z+56	; 0x38
    13de:	89 87       	std	Y+9, r24	; 0x09
    13e0:	81 ad       	ldd	r24, Z+57	; 0x39
    13e2:	8a 87       	std	Y+10, r24	; 0x0a
    13e4:	82 ad       	ldd	r24, Z+58	; 0x3a
    13e6:	8b 87       	std	Y+11, r24	; 0x0b
    13e8:	83 ad       	ldd	r24, Z+59	; 0x3b
    13ea:	8c 87       	std	Y+12, r24	; 0x0c
    13ec:	84 ad       	ldd	r24, Z+60	; 0x3c
    13ee:	8d 87       	std	Y+13, r24	; 0x0d
    13f0:	85 ad       	ldd	r24, Z+61	; 0x3d
    13f2:	8e 87       	std	Y+14, r24	; 0x0e
    13f4:	86 ad       	ldd	r24, Z+62	; 0x3e
    13f6:	8f 87       	std	Y+15, r24	; 0x0f
    13f8:	87 ad       	ldd	r24, Z+63	; 0x3f
    13fa:	88 8b       	std	Y+16, r24	; 0x10
    13fc:	1c 8a       	std	Y+20, r1	; 0x14
    13fe:	1b 8a       	std	Y+19, r1	; 0x13
    1400:	1a 8a       	std	Y+18, r1	; 0x12
    1402:	19 8a       	std	Y+17, r1	; 0x11
    1404:	18 8e       	std	Y+24, r1	; 0x18
    1406:	1f 8a       	std	Y+23, r1	; 0x17
    1408:	1e 8a       	std	Y+22, r1	; 0x16
    140a:	1d 8a       	std	Y+21, r1	; 0x15
    140c:	84 a1       	ldd	r24, Z+36	; 0x24
    140e:	89 8f       	std	Y+25, r24	; 0x19
    1410:	85 a1       	ldd	r24, Z+37	; 0x25
    1412:	8a 8f       	std	Y+26, r24	; 0x1a
    1414:	86 a1       	ldd	r24, Z+38	; 0x26
    1416:	8b 8f       	std	Y+27, r24	; 0x1b
    1418:	87 a1       	ldd	r24, Z+39	; 0x27
    141a:	8c 8f       	std	Y+28, r24	; 0x1c
    141c:	84 a5       	ldd	r24, Z+44	; 0x2c
    141e:	8d 8f       	std	Y+29, r24	; 0x1d
    1420:	85 a5       	ldd	r24, Z+45	; 0x2d
    1422:	8e 8f       	std	Y+30, r24	; 0x1e
    1424:	86 a5       	ldd	r24, Z+46	; 0x2e
    1426:	8f 8f       	std	Y+31, r24	; 0x1f
    1428:	87 a5       	ldd	r24, Z+47	; 0x2f
    142a:	88 a3       	std	Y+32, r24	; 0x20
    142c:	20 e2       	ldi	r18, 0x20	; 32
    142e:	ae 01       	movw	r20, r28
    1430:	4f 5f       	subi	r20, 0xFF	; 255
    1432:	5f 4f       	sbci	r21, 0xFF	; 255
    1434:	b6 01       	movw	r22, r12
    1436:	c6 01       	movw	r24, r12
    1438:	c2 d9       	rcall	.-3196   	; 0x7be <uECC_vli_sub>
    143a:	f8 1a       	sub	r15, r24
    143c:	f8 01       	movw	r30, r16
    143e:	84 a9       	ldd	r24, Z+52	; 0x34
    1440:	89 83       	std	Y+1, r24	; 0x01
    1442:	85 a9       	ldd	r24, Z+53	; 0x35
    1444:	8a 83       	std	Y+2, r24	; 0x02
    1446:	86 a9       	ldd	r24, Z+54	; 0x36
    1448:	8b 83       	std	Y+3, r24	; 0x03
    144a:	87 a9       	ldd	r24, Z+55	; 0x37
    144c:	8c 83       	std	Y+4, r24	; 0x04
    144e:	80 ad       	ldd	r24, Z+56	; 0x38
    1450:	8d 83       	std	Y+5, r24	; 0x05
    1452:	81 ad       	ldd	r24, Z+57	; 0x39
    1454:	8e 83       	std	Y+6, r24	; 0x06
    1456:	82 ad       	ldd	r24, Z+58	; 0x3a
    1458:	8f 83       	std	Y+7, r24	; 0x07
    145a:	83 ad       	ldd	r24, Z+59	; 0x3b
    145c:	88 87       	std	Y+8, r24	; 0x08
    145e:	84 ad       	ldd	r24, Z+60	; 0x3c
    1460:	89 87       	std	Y+9, r24	; 0x09
    1462:	85 ad       	ldd	r24, Z+61	; 0x3d
    1464:	8a 87       	std	Y+10, r24	; 0x0a
    1466:	86 ad       	ldd	r24, Z+62	; 0x3e
    1468:	8b 87       	std	Y+11, r24	; 0x0b
    146a:	87 ad       	ldd	r24, Z+63	; 0x3f
    146c:	8c 87       	std	Y+12, r24	; 0x0c
    146e:	80 a1       	ldd	r24, Z+32	; 0x20
    1470:	8d 87       	std	Y+13, r24	; 0x0d
    1472:	81 a1       	ldd	r24, Z+33	; 0x21
    1474:	8e 87       	std	Y+14, r24	; 0x0e
    1476:	82 a1       	ldd	r24, Z+34	; 0x22
    1478:	8f 87       	std	Y+15, r24	; 0x0f
    147a:	83 a1       	ldd	r24, Z+35	; 0x23
    147c:	88 8b       	std	Y+16, r24	; 0x10
    147e:	84 a1       	ldd	r24, Z+36	; 0x24
    1480:	89 8b       	std	Y+17, r24	; 0x11
    1482:	85 a1       	ldd	r24, Z+37	; 0x25
    1484:	8a 8b       	std	Y+18, r24	; 0x12
    1486:	86 a1       	ldd	r24, Z+38	; 0x26
    1488:	8b 8b       	std	Y+19, r24	; 0x13
    148a:	87 a1       	ldd	r24, Z+39	; 0x27
    148c:	8c 8b       	std	Y+20, r24	; 0x14
    148e:	80 a5       	ldd	r24, Z+40	; 0x28
    1490:	8d 8b       	std	Y+21, r24	; 0x15
    1492:	81 a5       	ldd	r24, Z+41	; 0x29
    1494:	8e 8b       	std	Y+22, r24	; 0x16
    1496:	82 a5       	ldd	r24, Z+42	; 0x2a
    1498:	8f 8b       	std	Y+23, r24	; 0x17
    149a:	83 a5       	ldd	r24, Z+43	; 0x2b
    149c:	88 8f       	std	Y+24, r24	; 0x18
    149e:	1c 8e       	std	Y+28, r1	; 0x1c
    14a0:	1b 8e       	std	Y+27, r1	; 0x1b
    14a2:	1a 8e       	std	Y+26, r1	; 0x1a
    14a4:	19 8e       	std	Y+25, r1	; 0x19
    14a6:	80 a9       	ldd	r24, Z+48	; 0x30
    14a8:	8d 8f       	std	Y+29, r24	; 0x1d
    14aa:	81 a9       	ldd	r24, Z+49	; 0x31
    14ac:	8e 8f       	std	Y+30, r24	; 0x1e
    14ae:	82 a9       	ldd	r24, Z+50	; 0x32
    14b0:	8f 8f       	std	Y+31, r24	; 0x1f
    14b2:	83 a9       	ldd	r24, Z+51	; 0x33
    14b4:	88 a3       	std	Y+32, r24	; 0x20
    14b6:	20 e2       	ldi	r18, 0x20	; 32
    14b8:	ae 01       	movw	r20, r28
    14ba:	4f 5f       	subi	r20, 0xFF	; 255
    14bc:	5f 4f       	sbci	r21, 0xFF	; 255
    14be:	b6 01       	movw	r22, r12
    14c0:	c6 01       	movw	r24, r12
    14c2:	7d d9       	rcall	.-3334   	; 0x7be <uECC_vli_sub>
    14c4:	f8 1a       	sub	r15, r24
    14c6:	f8 01       	movw	r30, r16
    14c8:	80 ad       	ldd	r24, Z+56	; 0x38
    14ca:	89 83       	std	Y+1, r24	; 0x01
    14cc:	81 ad       	ldd	r24, Z+57	; 0x39
    14ce:	8a 83       	std	Y+2, r24	; 0x02
    14d0:	82 ad       	ldd	r24, Z+58	; 0x3a
    14d2:	8b 83       	std	Y+3, r24	; 0x03
    14d4:	83 ad       	ldd	r24, Z+59	; 0x3b
    14d6:	8c 83       	std	Y+4, r24	; 0x04
    14d8:	84 ad       	ldd	r24, Z+60	; 0x3c
    14da:	8d 83       	std	Y+5, r24	; 0x05
    14dc:	85 ad       	ldd	r24, Z+61	; 0x3d
    14de:	8e 83       	std	Y+6, r24	; 0x06
    14e0:	86 ad       	ldd	r24, Z+62	; 0x3e
    14e2:	8f 83       	std	Y+7, r24	; 0x07
    14e4:	87 ad       	ldd	r24, Z+63	; 0x3f
    14e6:	88 87       	std	Y+8, r24	; 0x08
    14e8:	1c 86       	std	Y+12, r1	; 0x0c
    14ea:	1b 86       	std	Y+11, r1	; 0x0b
    14ec:	1a 86       	std	Y+10, r1	; 0x0a
    14ee:	19 86       	std	Y+9, r1	; 0x09
    14f0:	84 a1       	ldd	r24, Z+36	; 0x24
    14f2:	8d 87       	std	Y+13, r24	; 0x0d
    14f4:	85 a1       	ldd	r24, Z+37	; 0x25
    14f6:	8e 87       	std	Y+14, r24	; 0x0e
    14f8:	86 a1       	ldd	r24, Z+38	; 0x26
    14fa:	8f 87       	std	Y+15, r24	; 0x0f
    14fc:	87 a1       	ldd	r24, Z+39	; 0x27
    14fe:	88 8b       	std	Y+16, r24	; 0x10
    1500:	80 a5       	ldd	r24, Z+40	; 0x28
    1502:	89 8b       	std	Y+17, r24	; 0x11
    1504:	81 a5       	ldd	r24, Z+41	; 0x29
    1506:	8a 8b       	std	Y+18, r24	; 0x12
    1508:	82 a5       	ldd	r24, Z+42	; 0x2a
    150a:	8b 8b       	std	Y+19, r24	; 0x13
    150c:	83 a5       	ldd	r24, Z+43	; 0x2b
    150e:	8c 8b       	std	Y+20, r24	; 0x14
    1510:	84 a5       	ldd	r24, Z+44	; 0x2c
    1512:	8d 8b       	std	Y+21, r24	; 0x15
    1514:	85 a5       	ldd	r24, Z+45	; 0x2d
    1516:	8e 8b       	std	Y+22, r24	; 0x16
    1518:	86 a5       	ldd	r24, Z+46	; 0x2e
    151a:	8f 8b       	std	Y+23, r24	; 0x17
    151c:	87 a5       	ldd	r24, Z+47	; 0x2f
    151e:	88 8f       	std	Y+24, r24	; 0x18
    1520:	1c 8e       	std	Y+28, r1	; 0x1c
    1522:	1b 8e       	std	Y+27, r1	; 0x1b
    1524:	1a 8e       	std	Y+26, r1	; 0x1a
    1526:	19 8e       	std	Y+25, r1	; 0x19
    1528:	84 a9       	ldd	r24, Z+52	; 0x34
    152a:	8d 8f       	std	Y+29, r24	; 0x1d
    152c:	85 a9       	ldd	r24, Z+53	; 0x35
    152e:	8e 8f       	std	Y+30, r24	; 0x1e
    1530:	86 a9       	ldd	r24, Z+54	; 0x36
    1532:	8f 8f       	std	Y+31, r24	; 0x1f
    1534:	87 a9       	ldd	r24, Z+55	; 0x37
    1536:	88 a3       	std	Y+32, r24	; 0x20
    1538:	20 e2       	ldi	r18, 0x20	; 32
    153a:	ae 01       	movw	r20, r28
    153c:	4f 5f       	subi	r20, 0xFF	; 255
    153e:	5f 4f       	sbci	r21, 0xFF	; 255
    1540:	b6 01       	movw	r22, r12
    1542:	c6 01       	movw	r24, r12
    1544:	3c d9       	rcall	.-3464   	; 0x7be <uECC_vli_sub>
    1546:	1f 2d       	mov	r17, r15
    1548:	18 1b       	sub	r17, r24
    154a:	82 f4       	brpl	.+32     	; 0x156c <vli_mmod_fast_secp256r1+0x44a>
    154c:	20 e2       	ldi	r18, 0x20	; 32
    154e:	4e e0       	ldi	r20, 0x0E	; 14
    1550:	51 e0       	ldi	r21, 0x01	; 1
    1552:	b6 01       	movw	r22, r12
    1554:	c6 01       	movw	r24, r12
    1556:	62 d8       	rcall	.-3900   	; 0x61c <uECC_vli_add>
    1558:	18 0f       	add	r17, r24
    155a:	c2 f3       	brmi	.-16     	; 0x154c <vli_mmod_fast_secp256r1+0x42a>
    155c:	10 c0       	rjmp	.+32     	; 0x157e <vli_mmod_fast_secp256r1+0x45c>
    155e:	20 e2       	ldi	r18, 0x20	; 32
    1560:	4e e0       	ldi	r20, 0x0E	; 14
    1562:	51 e0       	ldi	r21, 0x01	; 1
    1564:	b6 01       	movw	r22, r12
    1566:	c6 01       	movw	r24, r12
    1568:	2a d9       	rcall	.-3500   	; 0x7be <uECC_vli_sub>
    156a:	18 1b       	sub	r17, r24
    156c:	11 11       	cpse	r17, r1
    156e:	f7 cf       	rjmp	.-18     	; 0x155e <vli_mmod_fast_secp256r1+0x43c>
    1570:	40 e2       	ldi	r20, 0x20	; 32
    1572:	b6 01       	movw	r22, r12
    1574:	8e e0       	ldi	r24, 0x0E	; 14
    1576:	91 e0       	ldi	r25, 0x01	; 1
    1578:	92 da       	rcall	.-2780   	; 0xa9e <uECC_vli_cmp_unsafe>
    157a:	81 30       	cpi	r24, 0x01	; 1
    157c:	81 f7       	brne	.-32     	; 0x155e <vli_mmod_fast_secp256r1+0x43c>
    157e:	a0 96       	adiw	r28, 0x20	; 32
    1580:	0f b6       	in	r0, 0x3f	; 63
    1582:	f8 94       	cli
    1584:	de bf       	out	0x3e, r29	; 62
    1586:	0f be       	out	0x3f, r0	; 63
    1588:	cd bf       	out	0x3d, r28	; 61
    158a:	df 91       	pop	r29
    158c:	cf 91       	pop	r28
    158e:	1f 91       	pop	r17
    1590:	0f 91       	pop	r16
    1592:	ff 90       	pop	r15
    1594:	df 90       	pop	r13
    1596:	cf 90       	pop	r12
    1598:	08 95       	ret

0000159a <apply_z>:
    159a:	af 92       	push	r10
    159c:	bf 92       	push	r11
    159e:	cf 92       	push	r12
    15a0:	df 92       	push	r13
    15a2:	ef 92       	push	r14
    15a4:	ff 92       	push	r15
    15a6:	0f 93       	push	r16
    15a8:	1f 93       	push	r17
    15aa:	cf 93       	push	r28
    15ac:	df 93       	push	r29
    15ae:	cd b7       	in	r28, 0x3d	; 61
    15b0:	de b7       	in	r29, 0x3e	; 62
    15b2:	a0 97       	sbiw	r28, 0x20	; 32
    15b4:	0f b6       	in	r0, 0x3f	; 63
    15b6:	f8 94       	cli
    15b8:	de bf       	out	0x3e, r29	; 62
    15ba:	0f be       	out	0x3f, r0	; 63
    15bc:	cd bf       	out	0x3d, r28	; 61
    15be:	5c 01       	movw	r10, r24
    15c0:	7b 01       	movw	r14, r22
    15c2:	6a 01       	movw	r12, r20
    15c4:	89 01       	movw	r16, r18
    15c6:	a9 01       	movw	r20, r18
    15c8:	b6 01       	movw	r22, r12
    15ca:	ce 01       	movw	r24, r28
    15cc:	01 96       	adiw	r24, 0x01	; 1
    15ce:	27 db       	rcall	.-2482   	; 0xc1e <uECC_vli_modSquare_fast>
    15d0:	98 01       	movw	r18, r16
    15d2:	ae 01       	movw	r20, r28
    15d4:	4f 5f       	subi	r20, 0xFF	; 255
    15d6:	5f 4f       	sbci	r21, 0xFF	; 255
    15d8:	b5 01       	movw	r22, r10
    15da:	c5 01       	movw	r24, r10
    15dc:	f1 da       	rcall	.-2590   	; 0xbc0 <uECC_vli_modMult_fast>
    15de:	98 01       	movw	r18, r16
    15e0:	a6 01       	movw	r20, r12
    15e2:	be 01       	movw	r22, r28
    15e4:	6f 5f       	subi	r22, 0xFF	; 255
    15e6:	7f 4f       	sbci	r23, 0xFF	; 255
    15e8:	cb 01       	movw	r24, r22
    15ea:	ea da       	rcall	.-2604   	; 0xbc0 <uECC_vli_modMult_fast>
    15ec:	98 01       	movw	r18, r16
    15ee:	ae 01       	movw	r20, r28
    15f0:	4f 5f       	subi	r20, 0xFF	; 255
    15f2:	5f 4f       	sbci	r21, 0xFF	; 255
    15f4:	b7 01       	movw	r22, r14
    15f6:	c7 01       	movw	r24, r14
    15f8:	e3 da       	rcall	.-2618   	; 0xbc0 <uECC_vli_modMult_fast>
    15fa:	a0 96       	adiw	r28, 0x20	; 32
    15fc:	0f b6       	in	r0, 0x3f	; 63
    15fe:	f8 94       	cli
    1600:	de bf       	out	0x3e, r29	; 62
    1602:	0f be       	out	0x3f, r0	; 63
    1604:	cd bf       	out	0x3d, r28	; 61
    1606:	df 91       	pop	r29
    1608:	cf 91       	pop	r28
    160a:	1f 91       	pop	r17
    160c:	0f 91       	pop	r16
    160e:	ff 90       	pop	r15
    1610:	ef 90       	pop	r14
    1612:	df 90       	pop	r13
    1614:	cf 90       	pop	r12
    1616:	bf 90       	pop	r11
    1618:	af 90       	pop	r10
    161a:	08 95       	ret

0000161c <XYcZ_add>:
    161c:	4f 92       	push	r4
    161e:	5f 92       	push	r5
    1620:	6f 92       	push	r6
    1622:	7f 92       	push	r7
    1624:	8f 92       	push	r8
    1626:	9f 92       	push	r9
    1628:	af 92       	push	r10
    162a:	bf 92       	push	r11
    162c:	cf 92       	push	r12
    162e:	df 92       	push	r13
    1630:	ef 92       	push	r14
    1632:	ff 92       	push	r15
    1634:	0f 93       	push	r16
    1636:	1f 93       	push	r17
    1638:	cf 93       	push	r28
    163a:	df 93       	push	r29
    163c:	cd b7       	in	r28, 0x3d	; 61
    163e:	de b7       	in	r29, 0x3e	; 62
    1640:	a0 97       	sbiw	r28, 0x20	; 32
    1642:	0f b6       	in	r0, 0x3f	; 63
    1644:	f8 94       	cli
    1646:	de bf       	out	0x3e, r29	; 62
    1648:	0f be       	out	0x3f, r0	; 63
    164a:	cd bf       	out	0x3d, r28	; 61
    164c:	3c 01       	movw	r6, r24
    164e:	2b 01       	movw	r4, r22
    1650:	7a 01       	movw	r14, r20
    1652:	59 01       	movw	r10, r18
    1654:	68 01       	movw	r12, r16
    1656:	f8 01       	movw	r30, r16
    1658:	10 81       	ld	r17, Z
    165a:	46 01       	movw	r8, r12
    165c:	f4 e0       	ldi	r31, 0x04	; 4
    165e:	8f 0e       	add	r8, r31
    1660:	91 1c       	adc	r9, r1
    1662:	01 2f       	mov	r16, r17
    1664:	94 01       	movw	r18, r8
    1666:	ac 01       	movw	r20, r24
    1668:	b7 01       	movw	r22, r14
    166a:	ce 01       	movw	r24, r28
    166c:	01 96       	adiw	r24, 0x01	; 1
    166e:	92 da       	rcall	.-2780   	; 0xb94 <uECC_vli_modSub>
    1670:	a6 01       	movw	r20, r12
    1672:	be 01       	movw	r22, r28
    1674:	6f 5f       	subi	r22, 0xFF	; 255
    1676:	7f 4f       	sbci	r23, 0xFF	; 255
    1678:	cb 01       	movw	r24, r22
    167a:	d1 da       	rcall	.-2654   	; 0xc1e <uECC_vli_modSquare_fast>
    167c:	96 01       	movw	r18, r12
    167e:	ae 01       	movw	r20, r28
    1680:	4f 5f       	subi	r20, 0xFF	; 255
    1682:	5f 4f       	sbci	r21, 0xFF	; 255
    1684:	b3 01       	movw	r22, r6
    1686:	c3 01       	movw	r24, r6
    1688:	9b da       	rcall	.-2762   	; 0xbc0 <uECC_vli_modMult_fast>
    168a:	96 01       	movw	r18, r12
    168c:	ae 01       	movw	r20, r28
    168e:	4f 5f       	subi	r20, 0xFF	; 255
    1690:	5f 4f       	sbci	r21, 0xFF	; 255
    1692:	b7 01       	movw	r22, r14
    1694:	c7 01       	movw	r24, r14
    1696:	94 da       	rcall	.-2776   	; 0xbc0 <uECC_vli_modMult_fast>
    1698:	94 01       	movw	r18, r8
    169a:	a2 01       	movw	r20, r4
    169c:	b5 01       	movw	r22, r10
    169e:	c5 01       	movw	r24, r10
    16a0:	79 da       	rcall	.-2830   	; 0xb94 <uECC_vli_modSub>
    16a2:	a6 01       	movw	r20, r12
    16a4:	b5 01       	movw	r22, r10
    16a6:	ce 01       	movw	r24, r28
    16a8:	01 96       	adiw	r24, 0x01	; 1
    16aa:	b9 da       	rcall	.-2702   	; 0xc1e <uECC_vli_modSquare_fast>
    16ac:	94 01       	movw	r18, r8
    16ae:	a3 01       	movw	r20, r6
    16b0:	be 01       	movw	r22, r28
    16b2:	6f 5f       	subi	r22, 0xFF	; 255
    16b4:	7f 4f       	sbci	r23, 0xFF	; 255
    16b6:	cb 01       	movw	r24, r22
    16b8:	6d da       	rcall	.-2854   	; 0xb94 <uECC_vli_modSub>
    16ba:	94 01       	movw	r18, r8
    16bc:	a7 01       	movw	r20, r14
    16be:	be 01       	movw	r22, r28
    16c0:	6f 5f       	subi	r22, 0xFF	; 255
    16c2:	7f 4f       	sbci	r23, 0xFF	; 255
    16c4:	cb 01       	movw	r24, r22
    16c6:	66 da       	rcall	.-2868   	; 0xb94 <uECC_vli_modSub>
    16c8:	94 01       	movw	r18, r8
    16ca:	a3 01       	movw	r20, r6
    16cc:	b7 01       	movw	r22, r14
    16ce:	c7 01       	movw	r24, r14
    16d0:	61 da       	rcall	.-2878   	; 0xb94 <uECC_vli_modSub>
    16d2:	96 01       	movw	r18, r12
    16d4:	a7 01       	movw	r20, r14
    16d6:	b2 01       	movw	r22, r4
    16d8:	c2 01       	movw	r24, r4
    16da:	72 da       	rcall	.-2844   	; 0xbc0 <uECC_vli_modMult_fast>
    16dc:	94 01       	movw	r18, r8
    16de:	ae 01       	movw	r20, r28
    16e0:	4f 5f       	subi	r20, 0xFF	; 255
    16e2:	5f 4f       	sbci	r21, 0xFF	; 255
    16e4:	b3 01       	movw	r22, r6
    16e6:	c7 01       	movw	r24, r14
    16e8:	55 da       	rcall	.-2902   	; 0xb94 <uECC_vli_modSub>
    16ea:	96 01       	movw	r18, r12
    16ec:	a7 01       	movw	r20, r14
    16ee:	b5 01       	movw	r22, r10
    16f0:	c5 01       	movw	r24, r10
    16f2:	66 da       	rcall	.-2868   	; 0xbc0 <uECC_vli_modMult_fast>
    16f4:	94 01       	movw	r18, r8
    16f6:	a2 01       	movw	r20, r4
    16f8:	b5 01       	movw	r22, r10
    16fa:	c5 01       	movw	r24, r10
    16fc:	4b da       	rcall	.-2922   	; 0xb94 <uECC_vli_modSub>
    16fe:	41 2f       	mov	r20, r17
    1700:	be 01       	movw	r22, r28
    1702:	6f 5f       	subi	r22, 0xFF	; 255
    1704:	7f 4f       	sbci	r23, 0xFF	; 255
    1706:	c7 01       	movw	r24, r14
    1708:	0e 94 4f 02 	call	0x49e	; 0x49e <uECC_vli_set>
    170c:	a0 96       	adiw	r28, 0x20	; 32
    170e:	0f b6       	in	r0, 0x3f	; 63
    1710:	f8 94       	cli
    1712:	de bf       	out	0x3e, r29	; 62
    1714:	0f be       	out	0x3f, r0	; 63
    1716:	cd bf       	out	0x3d, r28	; 61
    1718:	df 91       	pop	r29
    171a:	cf 91       	pop	r28
    171c:	1f 91       	pop	r17
    171e:	0f 91       	pop	r16
    1720:	ff 90       	pop	r15
    1722:	ef 90       	pop	r14
    1724:	df 90       	pop	r13
    1726:	cf 90       	pop	r12
    1728:	bf 90       	pop	r11
    172a:	af 90       	pop	r10
    172c:	9f 90       	pop	r9
    172e:	8f 90       	pop	r8
    1730:	7f 90       	pop	r7
    1732:	6f 90       	pop	r6
    1734:	5f 90       	pop	r5
    1736:	4f 90       	pop	r4
    1738:	08 95       	ret

0000173a <XYcZ_addC>:
    173a:	4f 92       	push	r4
    173c:	5f 92       	push	r5
    173e:	6f 92       	push	r6
    1740:	7f 92       	push	r7
    1742:	8f 92       	push	r8
    1744:	9f 92       	push	r9
    1746:	af 92       	push	r10
    1748:	bf 92       	push	r11
    174a:	cf 92       	push	r12
    174c:	df 92       	push	r13
    174e:	ef 92       	push	r14
    1750:	ff 92       	push	r15
    1752:	0f 93       	push	r16
    1754:	1f 93       	push	r17
    1756:	cf 93       	push	r28
    1758:	df 93       	push	r29
    175a:	cd b7       	in	r28, 0x3d	; 61
    175c:	de b7       	in	r29, 0x3e	; 62
    175e:	c0 56       	subi	r28, 0x60	; 96
    1760:	d1 09       	sbc	r29, r1
    1762:	0f b6       	in	r0, 0x3f	; 63
    1764:	f8 94       	cli
    1766:	de bf       	out	0x3e, r29	; 62
    1768:	0f be       	out	0x3f, r0	; 63
    176a:	cd bf       	out	0x3d, r28	; 61
    176c:	4c 01       	movw	r8, r24
    176e:	2b 01       	movw	r4, r22
    1770:	5a 01       	movw	r10, r20
    1772:	39 01       	movw	r6, r18
    1774:	68 01       	movw	r12, r16
    1776:	f8 01       	movw	r30, r16
    1778:	10 81       	ld	r17, Z
    177a:	76 01       	movw	r14, r12
    177c:	f4 e0       	ldi	r31, 0x04	; 4
    177e:	ef 0e       	add	r14, r31
    1780:	f1 1c       	adc	r15, r1
    1782:	01 2f       	mov	r16, r17
    1784:	97 01       	movw	r18, r14
    1786:	ac 01       	movw	r20, r24
    1788:	b5 01       	movw	r22, r10
    178a:	ce 01       	movw	r24, r28
    178c:	01 96       	adiw	r24, 0x01	; 1
    178e:	02 da       	rcall	.-3068   	; 0xb94 <uECC_vli_modSub>
    1790:	a6 01       	movw	r20, r12
    1792:	be 01       	movw	r22, r28
    1794:	6f 5f       	subi	r22, 0xFF	; 255
    1796:	7f 4f       	sbci	r23, 0xFF	; 255
    1798:	cb 01       	movw	r24, r22
    179a:	41 da       	rcall	.-2942   	; 0xc1e <uECC_vli_modSquare_fast>
    179c:	96 01       	movw	r18, r12
    179e:	ae 01       	movw	r20, r28
    17a0:	4f 5f       	subi	r20, 0xFF	; 255
    17a2:	5f 4f       	sbci	r21, 0xFF	; 255
    17a4:	b4 01       	movw	r22, r8
    17a6:	c4 01       	movw	r24, r8
    17a8:	0b da       	rcall	.-3050   	; 0xbc0 <uECC_vli_modMult_fast>
    17aa:	96 01       	movw	r18, r12
    17ac:	ae 01       	movw	r20, r28
    17ae:	4f 5f       	subi	r20, 0xFF	; 255
    17b0:	5f 4f       	sbci	r21, 0xFF	; 255
    17b2:	b5 01       	movw	r22, r10
    17b4:	c5 01       	movw	r24, r10
    17b6:	04 da       	rcall	.-3064   	; 0xbc0 <uECC_vli_modMult_fast>
    17b8:	97 01       	movw	r18, r14
    17ba:	a2 01       	movw	r20, r4
    17bc:	b3 01       	movw	r22, r6
    17be:	ce 01       	movw	r24, r28
    17c0:	01 96       	adiw	r24, 0x01	; 1
    17c2:	cc d9       	rcall	.-3176   	; 0xb5c <uECC_vli_modAdd>
    17c4:	97 01       	movw	r18, r14
    17c6:	a2 01       	movw	r20, r4
    17c8:	b3 01       	movw	r22, r6
    17ca:	c3 01       	movw	r24, r6
    17cc:	e3 d9       	rcall	.-3130   	; 0xb94 <uECC_vli_modSub>
    17ce:	97 01       	movw	r18, r14
    17d0:	a4 01       	movw	r20, r8
    17d2:	b5 01       	movw	r22, r10
    17d4:	ce 01       	movw	r24, r28
    17d6:	81 96       	adiw	r24, 0x21	; 33
    17d8:	dd d9       	rcall	.-3142   	; 0xb94 <uECC_vli_modSub>
    17da:	96 01       	movw	r18, r12
    17dc:	ae 01       	movw	r20, r28
    17de:	4f 5d       	subi	r20, 0xDF	; 223
    17e0:	5f 4f       	sbci	r21, 0xFF	; 255
    17e2:	b2 01       	movw	r22, r4
    17e4:	c2 01       	movw	r24, r4
    17e6:	ec d9       	rcall	.-3112   	; 0xbc0 <uECC_vli_modMult_fast>
    17e8:	97 01       	movw	r18, r14
    17ea:	a5 01       	movw	r20, r10
    17ec:	b4 01       	movw	r22, r8
    17ee:	ce 01       	movw	r24, r28
    17f0:	81 96       	adiw	r24, 0x21	; 33
    17f2:	b4 d9       	rcall	.-3224   	; 0xb5c <uECC_vli_modAdd>
    17f4:	a6 01       	movw	r20, r12
    17f6:	b3 01       	movw	r22, r6
    17f8:	c5 01       	movw	r24, r10
    17fa:	11 da       	rcall	.-3038   	; 0xc1e <uECC_vli_modSquare_fast>
    17fc:	97 01       	movw	r18, r14
    17fe:	ae 01       	movw	r20, r28
    1800:	4f 5d       	subi	r20, 0xDF	; 223
    1802:	5f 4f       	sbci	r21, 0xFF	; 255
    1804:	b5 01       	movw	r22, r10
    1806:	c5 01       	movw	r24, r10
    1808:	c5 d9       	rcall	.-3190   	; 0xb94 <uECC_vli_modSub>
    180a:	97 01       	movw	r18, r14
    180c:	a5 01       	movw	r20, r10
    180e:	b4 01       	movw	r22, r8
    1810:	ce 01       	movw	r24, r28
    1812:	8f 5b       	subi	r24, 0xBF	; 191
    1814:	9f 4f       	sbci	r25, 0xFF	; 255
    1816:	be d9       	rcall	.-3204   	; 0xb94 <uECC_vli_modSub>
    1818:	96 01       	movw	r18, r12
    181a:	ae 01       	movw	r20, r28
    181c:	4f 5b       	subi	r20, 0xBF	; 191
    181e:	5f 4f       	sbci	r21, 0xFF	; 255
    1820:	b3 01       	movw	r22, r6
    1822:	c3 01       	movw	r24, r6
    1824:	cd d9       	rcall	.-3174   	; 0xbc0 <uECC_vli_modMult_fast>
    1826:	97 01       	movw	r18, r14
    1828:	a2 01       	movw	r20, r4
    182a:	b3 01       	movw	r22, r6
    182c:	c3 01       	movw	r24, r6
    182e:	b2 d9       	rcall	.-3228   	; 0xb94 <uECC_vli_modSub>
    1830:	a6 01       	movw	r20, r12
    1832:	be 01       	movw	r22, r28
    1834:	6f 5f       	subi	r22, 0xFF	; 255
    1836:	7f 4f       	sbci	r23, 0xFF	; 255
    1838:	ce 01       	movw	r24, r28
    183a:	8f 5b       	subi	r24, 0xBF	; 191
    183c:	9f 4f       	sbci	r25, 0xFF	; 255
    183e:	ef d9       	rcall	.-3106   	; 0xc1e <uECC_vli_modSquare_fast>
    1840:	97 01       	movw	r18, r14
    1842:	ae 01       	movw	r20, r28
    1844:	4f 5d       	subi	r20, 0xDF	; 223
    1846:	5f 4f       	sbci	r21, 0xFF	; 255
    1848:	be 01       	movw	r22, r28
    184a:	6f 5b       	subi	r22, 0xBF	; 191
    184c:	7f 4f       	sbci	r23, 0xFF	; 255
    184e:	cb 01       	movw	r24, r22
    1850:	a1 d9       	rcall	.-3262   	; 0xb94 <uECC_vli_modSub>
    1852:	97 01       	movw	r18, r14
    1854:	a4 01       	movw	r20, r8
    1856:	be 01       	movw	r22, r28
    1858:	6f 5b       	subi	r22, 0xBF	; 191
    185a:	7f 4f       	sbci	r23, 0xFF	; 255
    185c:	ce 01       	movw	r24, r28
    185e:	81 96       	adiw	r24, 0x21	; 33
    1860:	99 d9       	rcall	.-3278   	; 0xb94 <uECC_vli_modSub>
    1862:	96 01       	movw	r18, r12
    1864:	ae 01       	movw	r20, r28
    1866:	4f 5f       	subi	r20, 0xFF	; 255
    1868:	5f 4f       	sbci	r21, 0xFF	; 255
    186a:	be 01       	movw	r22, r28
    186c:	6f 5d       	subi	r22, 0xDF	; 223
    186e:	7f 4f       	sbci	r23, 0xFF	; 255
    1870:	cb 01       	movw	r24, r22
    1872:	a6 d9       	rcall	.-3252   	; 0xbc0 <uECC_vli_modMult_fast>
    1874:	97 01       	movw	r18, r14
    1876:	a2 01       	movw	r20, r4
    1878:	be 01       	movw	r22, r28
    187a:	6f 5d       	subi	r22, 0xDF	; 223
    187c:	7f 4f       	sbci	r23, 0xFF	; 255
    187e:	c2 01       	movw	r24, r4
    1880:	89 d9       	rcall	.-3310   	; 0xb94 <uECC_vli_modSub>
    1882:	41 2f       	mov	r20, r17
    1884:	be 01       	movw	r22, r28
    1886:	6f 5b       	subi	r22, 0xBF	; 191
    1888:	7f 4f       	sbci	r23, 0xFF	; 255
    188a:	c4 01       	movw	r24, r8
    188c:	0e 94 4f 02 	call	0x49e	; 0x49e <uECC_vli_set>
    1890:	c0 5a       	subi	r28, 0xA0	; 160
    1892:	df 4f       	sbci	r29, 0xFF	; 255
    1894:	0f b6       	in	r0, 0x3f	; 63
    1896:	f8 94       	cli
    1898:	de bf       	out	0x3e, r29	; 62
    189a:	0f be       	out	0x3f, r0	; 63
    189c:	cd bf       	out	0x3d, r28	; 61
    189e:	df 91       	pop	r29
    18a0:	cf 91       	pop	r28
    18a2:	1f 91       	pop	r17
    18a4:	0f 91       	pop	r16
    18a6:	ff 90       	pop	r15
    18a8:	ef 90       	pop	r14
    18aa:	df 90       	pop	r13
    18ac:	cf 90       	pop	r12
    18ae:	bf 90       	pop	r11
    18b0:	af 90       	pop	r10
    18b2:	9f 90       	pop	r9
    18b4:	8f 90       	pop	r8
    18b6:	7f 90       	pop	r7
    18b8:	6f 90       	pop	r6
    18ba:	5f 90       	pop	r5
    18bc:	4f 90       	pop	r4
    18be:	08 95       	ret

000018c0 <EccPoint_mult>:
    18c0:	2f 92       	push	r2
    18c2:	3f 92       	push	r3
    18c4:	4f 92       	push	r4
    18c6:	5f 92       	push	r5
    18c8:	6f 92       	push	r6
    18ca:	7f 92       	push	r7
    18cc:	8f 92       	push	r8
    18ce:	9f 92       	push	r9
    18d0:	af 92       	push	r10
    18d2:	bf 92       	push	r11
    18d4:	cf 92       	push	r12
    18d6:	df 92       	push	r13
    18d8:	ef 92       	push	r14
    18da:	ff 92       	push	r15
    18dc:	0f 93       	push	r16
    18de:	1f 93       	push	r17
    18e0:	cf 93       	push	r28
    18e2:	df 93       	push	r29
    18e4:	cd b7       	in	r28, 0x3d	; 61
    18e6:	de b7       	in	r29, 0x3e	; 62
    18e8:	cb 5c       	subi	r28, 0xCB	; 203
    18ea:	d1 09       	sbc	r29, r1
    18ec:	0f b6       	in	r0, 0x3f	; 63
    18ee:	f8 94       	cli
    18f0:	de bf       	out	0x3e, r29	; 62
    18f2:	0f be       	out	0x3f, r0	; 63
    18f4:	cd bf       	out	0x3d, r28	; 61
    18f6:	c6 53       	subi	r28, 0x36	; 54
    18f8:	df 4f       	sbci	r29, 0xFF	; 255
    18fa:	99 83       	std	Y+1, r25	; 0x01
    18fc:	88 83       	st	Y, r24
    18fe:	ca 5c       	subi	r28, 0xCA	; 202
    1900:	d0 40       	sbci	r29, 0x00	; 0
    1902:	cc 53       	subi	r28, 0x3C	; 60
    1904:	df 4f       	sbci	r29, 0xFF	; 255
    1906:	79 83       	std	Y+1, r23	; 0x01
    1908:	68 83       	st	Y, r22
    190a:	c4 5c       	subi	r28, 0xC4	; 196
    190c:	d0 40       	sbci	r29, 0x00	; 0
    190e:	cf 53       	subi	r28, 0x3F	; 63
    1910:	df 4f       	sbci	r29, 0xFF	; 255
    1912:	59 83       	std	Y+1, r21	; 0x01
    1914:	48 83       	st	Y, r20
    1916:	c1 5c       	subi	r28, 0xC1	; 193
    1918:	d0 40       	sbci	r29, 0x00	; 0
    191a:	69 01       	movw	r12, r18
    191c:	17 01       	movw	r2, r14
    191e:	f7 01       	movw	r30, r14
    1920:	f0 81       	ld	r31, Z
    1922:	cd 53       	subi	r28, 0x3D	; 61
    1924:	df 4f       	sbci	r29, 0xFF	; 255
    1926:	f8 83       	st	Y, r31
    1928:	c3 5c       	subi	r28, 0xC3	; 195
    192a:	d0 40       	sbci	r29, 0x00	; 0
    192c:	4f 2f       	mov	r20, r31
    192e:	ce 01       	movw	r24, r28
    1930:	81 96       	adiw	r24, 0x21	; 33
    1932:	0e 94 4f 02 	call	0x49e	; 0x49e <uECC_vli_set>
    1936:	cd 53       	subi	r28, 0x3D	; 61
    1938:	df 4f       	sbci	r29, 0xFF	; 255
    193a:	28 81       	ld	r18, Y
    193c:	c3 5c       	subi	r28, 0xC3	; 195
    193e:	d0 40       	sbci	r29, 0x00	; 0
    1940:	02 2e       	mov	r0, r18
    1942:	00 0c       	add	r0, r0
    1944:	33 0b       	sbc	r19, r19
    1946:	ca 53       	subi	r28, 0x3A	; 58
    1948:	df 4f       	sbci	r29, 0xFF	; 255
    194a:	39 83       	std	Y+1, r19	; 0x01
    194c:	28 83       	st	Y, r18
    194e:	c6 5c       	subi	r28, 0xC6	; 198
    1950:	d0 40       	sbci	r29, 0x00	; 0
    1952:	cc 53       	subi	r28, 0x3C	; 60
    1954:	df 4f       	sbci	r29, 0xFF	; 255
    1956:	88 81       	ld	r24, Y
    1958:	99 81       	ldd	r25, Y+1	; 0x01
    195a:	c4 5c       	subi	r28, 0xC4	; 196
    195c:	d0 40       	sbci	r29, 0x00	; 0
    195e:	82 0f       	add	r24, r18
    1960:	93 1f       	adc	r25, r19
    1962:	c8 53       	subi	r28, 0x38	; 56
    1964:	df 4f       	sbci	r29, 0xFF	; 255
    1966:	99 83       	std	Y+1, r25	; 0x01
    1968:	88 83       	st	Y, r24
    196a:	c8 5c       	subi	r28, 0xC8	; 200
    196c:	d0 40       	sbci	r29, 0x00	; 0
    196e:	cd 53       	subi	r28, 0x3D	; 61
    1970:	df 4f       	sbci	r29, 0xFF	; 255
    1972:	48 81       	ld	r20, Y
    1974:	c3 5c       	subi	r28, 0xC3	; 195
    1976:	d0 40       	sbci	r29, 0x00	; 0
    1978:	bc 01       	movw	r22, r24
    197a:	ce 01       	movw	r24, r28
    197c:	8f 59       	subi	r24, 0x9F	; 159
    197e:	9f 4f       	sbci	r25, 0xFF	; 255
    1980:	0e 94 4f 02 	call	0x49e	; 0x49e <uECC_vli_set>
    1984:	f7 01       	movw	r30, r14
    1986:	b0 80       	ld	r11, Z
    1988:	c1 14       	cp	r12, r1
    198a:	d1 04       	cpc	r13, r1
    198c:	41 f0       	breq	.+16     	; 0x199e <EccPoint_mult+0xde>
    198e:	4b 2d       	mov	r20, r11
    1990:	b6 01       	movw	r22, r12
    1992:	ce 01       	movw	r24, r28
    1994:	8f 55       	subi	r24, 0x5F	; 95
    1996:	9f 4f       	sbci	r25, 0xFF	; 255
    1998:	0e 94 4f 02 	call	0x49e	; 0x49e <uECC_vli_set>
    199c:	0c c0       	rjmp	.+24     	; 0x19b6 <EccPoint_mult+0xf6>
    199e:	6b 2d       	mov	r22, r11
    19a0:	ce 01       	movw	r24, r28
    19a2:	8f 55       	subi	r24, 0x5F	; 95
    19a4:	9f 4f       	sbci	r25, 0xFF	; 255
    19a6:	0e 94 28 02 	call	0x450	; 0x450 <uECC_vli_clear>
    19aa:	81 e0       	ldi	r24, 0x01	; 1
    19ac:	cf 55       	subi	r28, 0x5F	; 95
    19ae:	df 4f       	sbci	r29, 0xFF	; 255
    19b0:	88 83       	st	Y, r24
    19b2:	c1 5a       	subi	r28, 0xA1	; 161
    19b4:	d0 40       	sbci	r29, 0x00	; 0
    19b6:	4b 2d       	mov	r20, r11
    19b8:	be 01       	movw	r22, r28
    19ba:	6f 5d       	subi	r22, 0xDF	; 223
    19bc:	7f 4f       	sbci	r23, 0xFF	; 255
    19be:	ce 01       	movw	r24, r28
    19c0:	01 96       	adiw	r24, 0x01	; 1
    19c2:	0e 94 4f 02 	call	0x49e	; 0x49e <uECC_vli_set>
    19c6:	0f 2e       	mov	r0, r31
    19c8:	f1 e4       	ldi	r31, 0x41	; 65
    19ca:	ef 2e       	mov	r14, r31
    19cc:	f1 2c       	mov	r15, r1
    19ce:	f0 2d       	mov	r31, r0
    19d0:	ec 0e       	add	r14, r28
    19d2:	fd 1e       	adc	r15, r29
    19d4:	f0 e2       	ldi	r31, 0x20	; 32
    19d6:	ef 0e       	add	r14, r31
    19d8:	f1 1c       	adc	r15, r1
    19da:	4b 2d       	mov	r20, r11
    19dc:	b7 01       	movw	r22, r14
    19de:	ce 01       	movw	r24, r28
    19e0:	8f 5b       	subi	r24, 0xBF	; 191
    19e2:	9f 4f       	sbci	r25, 0xFF	; 255
    19e4:	0e 94 4f 02 	call	0x49e	; 0x49e <uECC_vli_set>
    19e8:	91 01       	movw	r18, r2
    19ea:	ae 01       	movw	r20, r28
    19ec:	4f 55       	subi	r20, 0x5F	; 95
    19ee:	5f 4f       	sbci	r21, 0xFF	; 255
    19f0:	b7 01       	movw	r22, r14
    19f2:	ce 01       	movw	r24, r28
    19f4:	81 96       	adiw	r24, 0x21	; 33
    19f6:	d1 dd       	rcall	.-1118   	; 0x159a <apply_z>
    19f8:	f1 01       	movw	r30, r2
    19fa:	ec 55       	subi	r30, 0x5C	; 92
    19fc:	ff 4f       	sbci	r31, 0xFF	; 255
    19fe:	01 90       	ld	r0, Z+
    1a00:	f0 81       	ld	r31, Z
    1a02:	e0 2d       	mov	r30, r0
    1a04:	91 01       	movw	r18, r2
    1a06:	ae 01       	movw	r20, r28
    1a08:	4f 55       	subi	r20, 0x5F	; 95
    1a0a:	5f 4f       	sbci	r21, 0xFF	; 255
    1a0c:	b7 01       	movw	r22, r14
    1a0e:	ce 01       	movw	r24, r28
    1a10:	81 96       	adiw	r24, 0x21	; 33
    1a12:	09 95       	icall
    1a14:	91 01       	movw	r18, r2
    1a16:	ae 01       	movw	r20, r28
    1a18:	4f 55       	subi	r20, 0x5F	; 95
    1a1a:	5f 4f       	sbci	r21, 0xFF	; 255
    1a1c:	be 01       	movw	r22, r28
    1a1e:	6f 5b       	subi	r22, 0xBF	; 191
    1a20:	7f 4f       	sbci	r23, 0xFF	; 255
    1a22:	ce 01       	movw	r24, r28
    1a24:	01 96       	adiw	r24, 0x01	; 1
    1a26:	b9 dd       	rcall	.-1166   	; 0x159a <apply_z>
    1a28:	58 01       	movw	r10, r16
    1a2a:	22 e0       	ldi	r18, 0x02	; 2
    1a2c:	a2 1a       	sub	r10, r18
    1a2e:	b1 08       	sbc	r11, r1
    1a30:	1a 14       	cp	r1, r10
    1a32:	1b 04       	cpc	r1, r11
    1a34:	0c f0       	brlt	.+2      	; 0x1a38 <EccPoint_mult+0x178>
    1a36:	53 c0       	rjmp	.+166    	; 0x1ade <EccPoint_mult+0x21e>
    1a38:	44 24       	eor	r4, r4
    1a3a:	43 94       	inc	r4
    1a3c:	51 2c       	mov	r5, r1
    1a3e:	b5 01       	movw	r22, r10
    1a40:	cf 53       	subi	r28, 0x3F	; 63
    1a42:	df 4f       	sbci	r29, 0xFF	; 255
    1a44:	88 81       	ld	r24, Y
    1a46:	99 81       	ldd	r25, Y+1	; 0x01
    1a48:	c1 5c       	subi	r28, 0xC1	; 193
    1a4a:	d0 40       	sbci	r29, 0x00	; 0
    1a4c:	0e 94 02 05 	call	0xa04	; 0xa04 <uECC_vli_testBit>
    1a50:	92 01       	movw	r18, r4
    1a52:	88 23       	and	r24, r24
    1a54:	11 f0       	breq	.+4      	; 0x1a5a <EccPoint_mult+0x19a>
    1a56:	20 e0       	ldi	r18, 0x00	; 0
    1a58:	30 e0       	ldi	r19, 0x00	; 0
    1a5a:	39 01       	movw	r6, r18
    1a5c:	66 0c       	add	r6, r6
    1a5e:	77 1c       	adc	r7, r7
    1a60:	66 0c       	add	r6, r6
    1a62:	77 1c       	adc	r7, r7
    1a64:	66 0c       	add	r6, r6
    1a66:	77 1c       	adc	r7, r7
    1a68:	66 0c       	add	r6, r6
    1a6a:	77 1c       	adc	r7, r7
    1a6c:	66 0c       	add	r6, r6
    1a6e:	77 1c       	adc	r7, r7
    1a70:	0f 2e       	mov	r0, r31
    1a72:	f1 e4       	ldi	r31, 0x41	; 65
    1a74:	cf 2e       	mov	r12, r31
    1a76:	d1 2c       	mov	r13, r1
    1a78:	f0 2d       	mov	r31, r0
    1a7a:	cc 0e       	add	r12, r28
    1a7c:	dd 1e       	adc	r13, r29
    1a7e:	c6 0c       	add	r12, r6
    1a80:	d7 1c       	adc	r13, r7
    1a82:	81 e0       	ldi	r24, 0x01	; 1
    1a84:	90 e0       	ldi	r25, 0x00	; 0
    1a86:	8c 0f       	add	r24, r28
    1a88:	9d 1f       	adc	r25, r29
    1a8a:	68 0e       	add	r6, r24
    1a8c:	79 1e       	adc	r7, r25
    1a8e:	72 01       	movw	r14, r4
    1a90:	e2 1a       	sub	r14, r18
    1a92:	f3 0a       	sbc	r15, r19
    1a94:	ee 0c       	add	r14, r14
    1a96:	ff 1c       	adc	r15, r15
    1a98:	ee 0c       	add	r14, r14
    1a9a:	ff 1c       	adc	r15, r15
    1a9c:	ee 0c       	add	r14, r14
    1a9e:	ff 1c       	adc	r15, r15
    1aa0:	ee 0c       	add	r14, r14
    1aa2:	ff 1c       	adc	r15, r15
    1aa4:	ee 0c       	add	r14, r14
    1aa6:	ff 1c       	adc	r15, r15
    1aa8:	0f 2e       	mov	r0, r31
    1aaa:	f1 e4       	ldi	r31, 0x41	; 65
    1aac:	8f 2e       	mov	r8, r31
    1aae:	91 2c       	mov	r9, r1
    1ab0:	f0 2d       	mov	r31, r0
    1ab2:	8c 0e       	add	r8, r28
    1ab4:	9d 1e       	adc	r9, r29
    1ab6:	8e 0c       	add	r8, r14
    1ab8:	9f 1c       	adc	r9, r15
    1aba:	e8 0e       	add	r14, r24
    1abc:	f9 1e       	adc	r15, r25
    1abe:	81 01       	movw	r16, r2
    1ac0:	96 01       	movw	r18, r12
    1ac2:	a3 01       	movw	r20, r6
    1ac4:	b4 01       	movw	r22, r8
    1ac6:	c7 01       	movw	r24, r14
    1ac8:	38 de       	rcall	.-912    	; 0x173a <XYcZ_addC>
    1aca:	94 01       	movw	r18, r8
    1acc:	a7 01       	movw	r20, r14
    1ace:	b6 01       	movw	r22, r12
    1ad0:	c3 01       	movw	r24, r6
    1ad2:	a4 dd       	rcall	.-1208   	; 0x161c <XYcZ_add>
    1ad4:	91 e0       	ldi	r25, 0x01	; 1
    1ad6:	a9 1a       	sub	r10, r25
    1ad8:	b1 08       	sbc	r11, r1
    1ada:	09 f0       	breq	.+2      	; 0x1ade <EccPoint_mult+0x21e>
    1adc:	b0 cf       	rjmp	.-160    	; 0x1a3e <EccPoint_mult+0x17e>
    1ade:	60 e0       	ldi	r22, 0x00	; 0
    1ae0:	70 e0       	ldi	r23, 0x00	; 0
    1ae2:	cf 53       	subi	r28, 0x3F	; 63
    1ae4:	df 4f       	sbci	r29, 0xFF	; 255
    1ae6:	88 81       	ld	r24, Y
    1ae8:	99 81       	ldd	r25, Y+1	; 0x01
    1aea:	c1 5c       	subi	r28, 0xC1	; 193
    1aec:	d0 40       	sbci	r29, 0x00	; 0
    1aee:	0e 94 02 05 	call	0xa04	; 0xa04 <uECC_vli_testBit>
    1af2:	21 e0       	ldi	r18, 0x01	; 1
    1af4:	30 e0       	ldi	r19, 0x00	; 0
    1af6:	88 23       	and	r24, r24
    1af8:	11 f0       	breq	.+4      	; 0x1afe <EccPoint_mult+0x23e>
    1afa:	20 e0       	ldi	r18, 0x00	; 0
    1afc:	30 e0       	ldi	r19, 0x00	; 0
    1afe:	69 01       	movw	r12, r18
    1b00:	cc 0c       	add	r12, r12
    1b02:	dd 1c       	adc	r13, r13
    1b04:	cc 0c       	add	r12, r12
    1b06:	dd 1c       	adc	r13, r13
    1b08:	cc 0c       	add	r12, r12
    1b0a:	dd 1c       	adc	r13, r13
    1b0c:	cc 0c       	add	r12, r12
    1b0e:	dd 1c       	adc	r13, r13
    1b10:	cc 0c       	add	r12, r12
    1b12:	dd 1c       	adc	r13, r13
    1b14:	0f 2e       	mov	r0, r31
    1b16:	f1 e4       	ldi	r31, 0x41	; 65
    1b18:	8f 2e       	mov	r8, r31
    1b1a:	91 2c       	mov	r9, r1
    1b1c:	f0 2d       	mov	r31, r0
    1b1e:	8c 0e       	add	r8, r28
    1b20:	9d 1e       	adc	r9, r29
    1b22:	8c 0c       	add	r8, r12
    1b24:	9d 1c       	adc	r9, r13
    1b26:	e1 e0       	ldi	r30, 0x01	; 1
    1b28:	f0 e0       	ldi	r31, 0x00	; 0
    1b2a:	ec 0f       	add	r30, r28
    1b2c:	fd 1f       	adc	r31, r29
    1b2e:	ce 0e       	add	r12, r30
    1b30:	df 1e       	adc	r13, r31
    1b32:	81 e0       	ldi	r24, 0x01	; 1
    1b34:	90 e0       	ldi	r25, 0x00	; 0
    1b36:	7c 01       	movw	r14, r24
    1b38:	e2 1a       	sub	r14, r18
    1b3a:	f3 0a       	sbc	r15, r19
    1b3c:	ee 0c       	add	r14, r14
    1b3e:	ff 1c       	adc	r15, r15
    1b40:	ee 0c       	add	r14, r14
    1b42:	ff 1c       	adc	r15, r15
    1b44:	ee 0c       	add	r14, r14
    1b46:	ff 1c       	adc	r15, r15
    1b48:	ee 0c       	add	r14, r14
    1b4a:	ff 1c       	adc	r15, r15
    1b4c:	ee 0c       	add	r14, r14
    1b4e:	ff 1c       	adc	r15, r15
    1b50:	0f 2e       	mov	r0, r31
    1b52:	f1 e4       	ldi	r31, 0x41	; 65
    1b54:	af 2e       	mov	r10, r31
    1b56:	b1 2c       	mov	r11, r1
    1b58:	f0 2d       	mov	r31, r0
    1b5a:	ac 0e       	add	r10, r28
    1b5c:	bd 1e       	adc	r11, r29
    1b5e:	ae 0c       	add	r10, r14
    1b60:	bf 1c       	adc	r11, r15
    1b62:	ee 0e       	add	r14, r30
    1b64:	ff 1e       	adc	r15, r31
    1b66:	81 01       	movw	r16, r2
    1b68:	94 01       	movw	r18, r8
    1b6a:	a6 01       	movw	r20, r12
    1b6c:	b5 01       	movw	r22, r10
    1b6e:	c7 01       	movw	r24, r14
    1b70:	e4 dd       	rcall	.-1080   	; 0x173a <XYcZ_addC>
    1b72:	31 01       	movw	r6, r2
    1b74:	f4 e0       	ldi	r31, 0x04	; 4
    1b76:	6f 0e       	add	r6, r31
    1b78:	71 1c       	adc	r7, r1
    1b7a:	cd 53       	subi	r28, 0x3D	; 61
    1b7c:	df 4f       	sbci	r29, 0xFF	; 255
    1b7e:	08 81       	ld	r16, Y
    1b80:	c3 5c       	subi	r28, 0xC3	; 195
    1b82:	d0 40       	sbci	r29, 0x00	; 0
    1b84:	93 01       	movw	r18, r6
    1b86:	ae 01       	movw	r20, r28
    1b88:	4f 5f       	subi	r20, 0xFF	; 255
    1b8a:	5f 4f       	sbci	r21, 0xFF	; 255
    1b8c:	be 01       	movw	r22, r28
    1b8e:	6f 5d       	subi	r22, 0xDF	; 223
    1b90:	7f 4f       	sbci	r23, 0xFF	; 255
    1b92:	ce 01       	movw	r24, r28
    1b94:	8f 57       	subi	r24, 0x7F	; 127
    1b96:	9f 4f       	sbci	r25, 0xFF	; 255
    1b98:	0e 94 ca 05 	call	0xb94	; 0xb94 <uECC_vli_modSub>
    1b9c:	91 01       	movw	r18, r2
    1b9e:	a5 01       	movw	r20, r10
    1ba0:	be 01       	movw	r22, r28
    1ba2:	6f 57       	subi	r22, 0x7F	; 127
    1ba4:	7f 4f       	sbci	r23, 0xFF	; 255
    1ba6:	cb 01       	movw	r24, r22
    1ba8:	0b d8       	rcall	.-4074   	; 0xbc0 <uECC_vli_modMult_fast>
    1baa:	91 01       	movw	r18, r2
    1bac:	cc 53       	subi	r28, 0x3C	; 60
    1bae:	df 4f       	sbci	r29, 0xFF	; 255
    1bb0:	48 81       	ld	r20, Y
    1bb2:	59 81       	ldd	r21, Y+1	; 0x01
    1bb4:	c4 5c       	subi	r28, 0xC4	; 196
    1bb6:	d0 40       	sbci	r29, 0x00	; 0
    1bb8:	be 01       	movw	r22, r28
    1bba:	6f 57       	subi	r22, 0x7F	; 127
    1bbc:	7f 4f       	sbci	r23, 0xFF	; 255
    1bbe:	cb 01       	movw	r24, r22
    1bc0:	0e 94 e0 05 	call	0xbc0	; 0xbc0 <uECC_vli_modMult_fast>
    1bc4:	cd 53       	subi	r28, 0x3D	; 61
    1bc6:	df 4f       	sbci	r29, 0xFF	; 255
    1bc8:	28 81       	ld	r18, Y
    1bca:	c3 5c       	subi	r28, 0xC3	; 195
    1bcc:	d0 40       	sbci	r29, 0x00	; 0
    1bce:	a3 01       	movw	r20, r6
    1bd0:	be 01       	movw	r22, r28
    1bd2:	6f 57       	subi	r22, 0x7F	; 127
    1bd4:	7f 4f       	sbci	r23, 0xFF	; 255
    1bd6:	cb 01       	movw	r24, r22
    1bd8:	4d d8       	rcall	.-3942   	; 0xc74 <uECC_vli_modInv>
    1bda:	91 01       	movw	r18, r2
    1bdc:	c8 53       	subi	r28, 0x38	; 56
    1bde:	df 4f       	sbci	r29, 0xFF	; 255
    1be0:	48 81       	ld	r20, Y
    1be2:	59 81       	ldd	r21, Y+1	; 0x01
    1be4:	c8 5c       	subi	r28, 0xC8	; 200
    1be6:	d0 40       	sbci	r29, 0x00	; 0
    1be8:	be 01       	movw	r22, r28
    1bea:	6f 57       	subi	r22, 0x7F	; 127
    1bec:	7f 4f       	sbci	r23, 0xFF	; 255
    1bee:	cb 01       	movw	r24, r22
    1bf0:	0e 94 e0 05 	call	0xbc0	; 0xbc0 <uECC_vli_modMult_fast>
    1bf4:	91 01       	movw	r18, r2
    1bf6:	a7 01       	movw	r20, r14
    1bf8:	be 01       	movw	r22, r28
    1bfa:	6f 57       	subi	r22, 0x7F	; 127
    1bfc:	7f 4f       	sbci	r23, 0xFF	; 255
    1bfe:	cb 01       	movw	r24, r22
    1c00:	0e 94 e0 05 	call	0xbc0	; 0xbc0 <uECC_vli_modMult_fast>
    1c04:	81 01       	movw	r16, r2
    1c06:	95 01       	movw	r18, r10
    1c08:	a7 01       	movw	r20, r14
    1c0a:	b4 01       	movw	r22, r8
    1c0c:	c6 01       	movw	r24, r12
    1c0e:	06 dd       	rcall	.-1524   	; 0x161c <XYcZ_add>
    1c10:	91 01       	movw	r18, r2
    1c12:	ae 01       	movw	r20, r28
    1c14:	4f 57       	subi	r20, 0x7F	; 127
    1c16:	5f 4f       	sbci	r21, 0xFF	; 255
    1c18:	be 01       	movw	r22, r28
    1c1a:	6f 5b       	subi	r22, 0xBF	; 191
    1c1c:	7f 4f       	sbci	r23, 0xFF	; 255
    1c1e:	ce 01       	movw	r24, r28
    1c20:	01 96       	adiw	r24, 0x01	; 1
    1c22:	bb dc       	rcall	.-1674   	; 0x159a <apply_z>
    1c24:	cd 53       	subi	r28, 0x3D	; 61
    1c26:	df 4f       	sbci	r29, 0xFF	; 255
    1c28:	48 81       	ld	r20, Y
    1c2a:	c3 5c       	subi	r28, 0xC3	; 195
    1c2c:	d0 40       	sbci	r29, 0x00	; 0
    1c2e:	be 01       	movw	r22, r28
    1c30:	6f 5f       	subi	r22, 0xFF	; 255
    1c32:	7f 4f       	sbci	r23, 0xFF	; 255
    1c34:	c6 53       	subi	r28, 0x36	; 54
    1c36:	df 4f       	sbci	r29, 0xFF	; 255
    1c38:	88 81       	ld	r24, Y
    1c3a:	99 81       	ldd	r25, Y+1	; 0x01
    1c3c:	ca 5c       	subi	r28, 0xCA	; 202
    1c3e:	d0 40       	sbci	r29, 0x00	; 0
    1c40:	0e 94 4f 02 	call	0x49e	; 0x49e <uECC_vli_set>
    1c44:	cd 53       	subi	r28, 0x3D	; 61
    1c46:	df 4f       	sbci	r29, 0xFF	; 255
    1c48:	48 81       	ld	r20, Y
    1c4a:	c3 5c       	subi	r28, 0xC3	; 195
    1c4c:	d0 40       	sbci	r29, 0x00	; 0
    1c4e:	be 01       	movw	r22, r28
    1c50:	6f 5b       	subi	r22, 0xBF	; 191
    1c52:	7f 4f       	sbci	r23, 0xFF	; 255
    1c54:	c6 53       	subi	r28, 0x36	; 54
    1c56:	df 4f       	sbci	r29, 0xFF	; 255
    1c58:	88 81       	ld	r24, Y
    1c5a:	99 81       	ldd	r25, Y+1	; 0x01
    1c5c:	ca 5c       	subi	r28, 0xCA	; 202
    1c5e:	d0 40       	sbci	r29, 0x00	; 0
    1c60:	ca 53       	subi	r28, 0x3A	; 58
    1c62:	df 4f       	sbci	r29, 0xFF	; 255
    1c64:	28 81       	ld	r18, Y
    1c66:	39 81       	ldd	r19, Y+1	; 0x01
    1c68:	c6 5c       	subi	r28, 0xC6	; 198
    1c6a:	d0 40       	sbci	r29, 0x00	; 0
    1c6c:	82 0f       	add	r24, r18
    1c6e:	93 1f       	adc	r25, r19
    1c70:	0e 94 4f 02 	call	0x49e	; 0x49e <uECC_vli_set>
    1c74:	c5 53       	subi	r28, 0x35	; 53
    1c76:	df 4f       	sbci	r29, 0xFF	; 255
    1c78:	0f b6       	in	r0, 0x3f	; 63
    1c7a:	f8 94       	cli
    1c7c:	de bf       	out	0x3e, r29	; 62
    1c7e:	0f be       	out	0x3f, r0	; 63
    1c80:	cd bf       	out	0x3d, r28	; 61
    1c82:	df 91       	pop	r29
    1c84:	cf 91       	pop	r28
    1c86:	1f 91       	pop	r17
    1c88:	0f 91       	pop	r16
    1c8a:	ff 90       	pop	r15
    1c8c:	ef 90       	pop	r14
    1c8e:	df 90       	pop	r13
    1c90:	cf 90       	pop	r12
    1c92:	bf 90       	pop	r11
    1c94:	af 90       	pop	r10
    1c96:	9f 90       	pop	r9
    1c98:	8f 90       	pop	r8
    1c9a:	7f 90       	pop	r7
    1c9c:	6f 90       	pop	r6
    1c9e:	5f 90       	pop	r5
    1ca0:	4f 90       	pop	r4
    1ca2:	3f 90       	pop	r3
    1ca4:	2f 90       	pop	r2
    1ca6:	08 95       	ret

00001ca8 <regularize_k>:
    1ca8:	af 92       	push	r10
    1caa:	bf 92       	push	r11
    1cac:	cf 92       	push	r12
    1cae:	df 92       	push	r13
    1cb0:	ef 92       	push	r14
    1cb2:	ff 92       	push	r15
    1cb4:	0f 93       	push	r16
    1cb6:	1f 93       	push	r17
    1cb8:	cf 93       	push	r28
    1cba:	df 93       	push	r29
    1cbc:	7b 01       	movw	r14, r22
    1cbe:	5a 01       	movw	r10, r20
    1cc0:	f9 01       	movw	r30, r18
    1cc2:	c2 80       	ldd	r12, Z+2	; 0x02
    1cc4:	d3 80       	ldd	r13, Z+3	; 0x03
    1cc6:	a6 01       	movw	r20, r12
    1cc8:	49 5f       	subi	r20, 0xF9	; 249
    1cca:	5f 4f       	sbci	r21, 0xFF	; 255
    1ccc:	ea 01       	movw	r28, r20
    1cce:	dd 23       	and	r29, r29
    1cd0:	0c f4       	brge	.+2      	; 0x1cd4 <regularize_k+0x2c>
    1cd2:	27 96       	adiw	r28, 0x07	; 7
    1cd4:	d5 95       	asr	r29
    1cd6:	c7 95       	ror	r28
    1cd8:	d5 95       	asr	r29
    1cda:	c7 95       	ror	r28
    1cdc:	d5 95       	asr	r29
    1cde:	c7 95       	ror	r28
    1ce0:	89 01       	movw	r16, r18
    1ce2:	0c 5d       	subi	r16, 0xDC	; 220
    1ce4:	1f 4f       	sbci	r17, 0xFF	; 255
    1ce6:	2c 2f       	mov	r18, r28
    1ce8:	a8 01       	movw	r20, r16
    1cea:	bc 01       	movw	r22, r24
    1cec:	c7 01       	movw	r24, r14
    1cee:	0e 94 0e 03 	call	0x61c	; 0x61c <uECC_vli_add>
    1cf2:	81 11       	cpse	r24, r1
    1cf4:	11 c0       	rjmp	.+34     	; 0x1d18 <regularize_k+0x70>
    1cf6:	28 e0       	ldi	r18, 0x08	; 8
    1cf8:	c2 02       	muls	r28, r18
    1cfa:	c0 01       	movw	r24, r0
    1cfc:	11 24       	eor	r1, r1
    1cfe:	c8 16       	cp	r12, r24
    1d00:	d9 06       	cpc	r13, r25
    1d02:	6c f4       	brge	.+26     	; 0x1d1e <regularize_k+0x76>
    1d04:	b6 01       	movw	r22, r12
    1d06:	c7 01       	movw	r24, r14
    1d08:	0e 94 02 05 	call	0xa04	; 0xa04 <uECC_vli_testBit>
    1d0c:	91 e0       	ldi	r25, 0x01	; 1
    1d0e:	81 11       	cpse	r24, r1
    1d10:	01 c0       	rjmp	.+2      	; 0x1d14 <regularize_k+0x6c>
    1d12:	90 e0       	ldi	r25, 0x00	; 0
    1d14:	d9 2e       	mov	r13, r25
    1d16:	04 c0       	rjmp	.+8      	; 0x1d20 <regularize_k+0x78>
    1d18:	dd 24       	eor	r13, r13
    1d1a:	d3 94       	inc	r13
    1d1c:	01 c0       	rjmp	.+2      	; 0x1d20 <regularize_k+0x78>
    1d1e:	d1 2c       	mov	r13, r1
    1d20:	2c 2f       	mov	r18, r28
    1d22:	a8 01       	movw	r20, r16
    1d24:	b7 01       	movw	r22, r14
    1d26:	c5 01       	movw	r24, r10
    1d28:	0e 94 0e 03 	call	0x61c	; 0x61c <uECC_vli_add>
    1d2c:	8d 2d       	mov	r24, r13
    1d2e:	df 91       	pop	r29
    1d30:	cf 91       	pop	r28
    1d32:	1f 91       	pop	r17
    1d34:	0f 91       	pop	r16
    1d36:	ff 90       	pop	r15
    1d38:	ef 90       	pop	r14
    1d3a:	df 90       	pop	r13
    1d3c:	cf 90       	pop	r12
    1d3e:	bf 90       	pop	r11
    1d40:	af 90       	pop	r10
    1d42:	08 95       	ret

00001d44 <EccPoint_compute_public_key>:
    1d44:	af 92       	push	r10
    1d46:	bf 92       	push	r11
    1d48:	cf 92       	push	r12
    1d4a:	df 92       	push	r13
    1d4c:	ef 92       	push	r14
    1d4e:	ff 92       	push	r15
    1d50:	0f 93       	push	r16
    1d52:	1f 93       	push	r17
    1d54:	cf 93       	push	r28
    1d56:	df 93       	push	r29
    1d58:	cd b7       	in	r28, 0x3d	; 61
    1d5a:	de b7       	in	r29, 0x3e	; 62
    1d5c:	c4 54       	subi	r28, 0x44	; 68
    1d5e:	d1 09       	sbc	r29, r1
    1d60:	0f b6       	in	r0, 0x3f	; 63
    1d62:	f8 94       	cli
    1d64:	de bf       	out	0x3e, r29	; 62
    1d66:	0f be       	out	0x3f, r0	; 63
    1d68:	cd bf       	out	0x3d, r28	; 61
    1d6a:	5c 01       	movw	r10, r24
    1d6c:	cb 01       	movw	r24, r22
    1d6e:	6a 01       	movw	r12, r20
    1d70:	7e 01       	movw	r14, r28
    1d72:	21 e4       	ldi	r18, 0x41	; 65
    1d74:	e2 0e       	add	r14, r18
    1d76:	f1 1c       	adc	r15, r1
    1d78:	be 01       	movw	r22, r28
    1d7a:	6f 5f       	subi	r22, 0xFF	; 255
    1d7c:	7f 4f       	sbci	r23, 0xFF	; 255
    1d7e:	f7 01       	movw	r30, r14
    1d80:	71 83       	std	Z+1, r23	; 0x01
    1d82:	60 83       	st	Z, r22
    1d84:	ae 01       	movw	r20, r28
    1d86:	4f 5d       	subi	r20, 0xDF	; 223
    1d88:	5f 4f       	sbci	r21, 0xFF	; 255
    1d8a:	53 83       	std	Z+3, r21	; 0x03
    1d8c:	42 83       	std	Z+2, r20	; 0x02
    1d8e:	96 01       	movw	r18, r12
    1d90:	8b df       	rcall	.-234    	; 0x1ca8 <regularize_k>
    1d92:	f6 01       	movw	r30, r12
    1d94:	02 81       	ldd	r16, Z+2	; 0x02
    1d96:	13 81       	ldd	r17, Z+3	; 0x03
    1d98:	0f 5f       	subi	r16, 0xFF	; 255
    1d9a:	1f 4f       	sbci	r17, 0xFF	; 255
    1d9c:	f7 01       	movw	r30, r14
    1d9e:	21 e0       	ldi	r18, 0x01	; 1
    1da0:	30 e0       	ldi	r19, 0x00	; 0
    1da2:	88 23       	and	r24, r24
    1da4:	11 f0       	breq	.+4      	; 0x1daa <EccPoint_compute_public_key+0x66>
    1da6:	20 e0       	ldi	r18, 0x00	; 0
    1da8:	30 e0       	ldi	r19, 0x00	; 0
    1daa:	22 0f       	add	r18, r18
    1dac:	33 1f       	adc	r19, r19
    1dae:	e2 0f       	add	r30, r18
    1db0:	f3 1f       	adc	r31, r19
    1db2:	40 81       	ld	r20, Z
    1db4:	51 81       	ldd	r21, Z+1	; 0x01
    1db6:	b6 01       	movw	r22, r12
    1db8:	6c 5b       	subi	r22, 0xBC	; 188
    1dba:	7f 4f       	sbci	r23, 0xFF	; 255
    1dbc:	76 01       	movw	r14, r12
    1dbe:	20 e0       	ldi	r18, 0x00	; 0
    1dc0:	30 e0       	ldi	r19, 0x00	; 0
    1dc2:	c5 01       	movw	r24, r10
    1dc4:	7d dd       	rcall	.-1286   	; 0x18c0 <EccPoint_mult>
    1dc6:	f6 01       	movw	r30, r12
    1dc8:	60 81       	ld	r22, Z
    1dca:	66 0f       	add	r22, r22
    1dcc:	c5 01       	movw	r24, r10
    1dce:	0e 94 ec 04 	call	0x9d8	; 0x9d8 <uECC_vli_isZero>
    1dd2:	91 e0       	ldi	r25, 0x01	; 1
    1dd4:	81 11       	cpse	r24, r1
    1dd6:	90 e0       	ldi	r25, 0x00	; 0
    1dd8:	89 2f       	mov	r24, r25
    1dda:	cc 5b       	subi	r28, 0xBC	; 188
    1ddc:	df 4f       	sbci	r29, 0xFF	; 255
    1dde:	0f b6       	in	r0, 0x3f	; 63
    1de0:	f8 94       	cli
    1de2:	de bf       	out	0x3e, r29	; 62
    1de4:	0f be       	out	0x3f, r0	; 63
    1de6:	cd bf       	out	0x3d, r28	; 61
    1de8:	df 91       	pop	r29
    1dea:	cf 91       	pop	r28
    1dec:	1f 91       	pop	r17
    1dee:	0f 91       	pop	r16
    1df0:	ff 90       	pop	r15
    1df2:	ef 90       	pop	r14
    1df4:	df 90       	pop	r13
    1df6:	cf 90       	pop	r12
    1df8:	bf 90       	pop	r11
    1dfa:	af 90       	pop	r10
    1dfc:	08 95       	ret

00001dfe <uECC_vli_nativeToBytes>:
    1dfe:	cf 93       	push	r28
    1e00:	df 93       	push	r29
    1e02:	dc 01       	movw	r26, r24
    1e04:	16 16       	cp	r1, r22
    1e06:	17 06       	cpc	r1, r23
    1e08:	cc f4       	brge	.+50     	; 0x1e3c <uECC_vli_nativeToBytes+0x3e>
    1e0a:	20 e0       	ldi	r18, 0x00	; 0
    1e0c:	30 e0       	ldi	r19, 0x00	; 0
    1e0e:	90 e0       	ldi	r25, 0x00	; 0
    1e10:	eb 01       	movw	r28, r22
    1e12:	21 97       	sbiw	r28, 0x01	; 1
    1e14:	fe 01       	movw	r30, r28
    1e16:	e2 1b       	sub	r30, r18
    1e18:	f3 0b       	sbc	r31, r19
    1e1a:	e4 0f       	add	r30, r20
    1e1c:	f5 1f       	adc	r31, r21
    1e1e:	20 81       	ld	r18, Z
    1e20:	fd 01       	movw	r30, r26
    1e22:	e9 0f       	add	r30, r25
    1e24:	f1 1d       	adc	r31, r1
    1e26:	97 fd       	sbrc	r25, 7
    1e28:	fa 95       	dec	r31
    1e2a:	20 83       	st	Z, r18
    1e2c:	9f 5f       	subi	r25, 0xFF	; 255
    1e2e:	29 2f       	mov	r18, r25
    1e30:	09 2e       	mov	r0, r25
    1e32:	00 0c       	add	r0, r0
    1e34:	33 0b       	sbc	r19, r19
    1e36:	26 17       	cp	r18, r22
    1e38:	37 07       	cpc	r19, r23
    1e3a:	64 f3       	brlt	.-40     	; 0x1e14 <uECC_vli_nativeToBytes+0x16>
    1e3c:	df 91       	pop	r29
    1e3e:	cf 91       	pop	r28
    1e40:	08 95       	ret

00001e42 <uECC_generate_random_int>:
    1e42:	9f 92       	push	r9
    1e44:	af 92       	push	r10
    1e46:	bf 92       	push	r11
    1e48:	cf 92       	push	r12
    1e4a:	df 92       	push	r13
    1e4c:	ef 92       	push	r14
    1e4e:	ff 92       	push	r15
    1e50:	0f 93       	push	r16
    1e52:	1f 93       	push	r17
    1e54:	cf 93       	push	r28
    1e56:	df 93       	push	r29
    1e58:	8c 01       	movw	r16, r24
    1e5a:	5b 01       	movw	r10, r22
    1e5c:	d4 2f       	mov	r29, r20
    1e5e:	64 2f       	mov	r22, r20
    1e60:	c5 01       	movw	r24, r10
    1e62:	0e 94 18 05 	call	0xa30	; 0xa30 <uECC_vli_numBits>
    1e66:	20 91 7c 02 	lds	r18, 0x027C	; 0x80027c <__data_end>
    1e6a:	30 91 7d 02 	lds	r19, 0x027D	; 0x80027d <__data_end+0x1>
    1e6e:	23 2b       	or	r18, r19
    1e70:	c1 f1       	breq	.+112    	; 0x1ee2 <uECC_generate_random_int+0xa0>
    1e72:	48 e0       	ldi	r20, 0x08	; 8
    1e74:	d4 02       	muls	r29, r20
    1e76:	90 01       	movw	r18, r0
    1e78:	11 24       	eor	r1, r1
    1e7a:	28 1b       	sub	r18, r24
    1e7c:	39 0b       	sbc	r19, r25
    1e7e:	8f ef       	ldi	r24, 0xFF	; 255
    1e80:	90 e0       	ldi	r25, 0x00	; 0
    1e82:	02 c0       	rjmp	.+4      	; 0x1e88 <uECC_generate_random_int+0x46>
    1e84:	95 95       	asr	r25
    1e86:	87 95       	ror	r24
    1e88:	2a 95       	dec	r18
    1e8a:	e2 f7       	brpl	.-8      	; 0x1e84 <uECC_generate_random_int+0x42>
    1e8c:	98 2e       	mov	r9, r24
    1e8e:	c0 e4       	ldi	r28, 0x40	; 64
    1e90:	cd 2e       	mov	r12, r29
    1e92:	0d 2e       	mov	r0, r29
    1e94:	00 0c       	add	r0, r0
    1e96:	dd 08       	sbc	r13, r13
    1e98:	76 01       	movw	r14, r12
    1e9a:	81 e0       	ldi	r24, 0x01	; 1
    1e9c:	e8 1a       	sub	r14, r24
    1e9e:	f1 08       	sbc	r15, r1
    1ea0:	e0 0e       	add	r14, r16
    1ea2:	f1 1e       	adc	r15, r17
    1ea4:	e0 91 7c 02 	lds	r30, 0x027C	; 0x80027c <__data_end>
    1ea8:	f0 91 7d 02 	lds	r31, 0x027D	; 0x80027d <__data_end+0x1>
    1eac:	b6 01       	movw	r22, r12
    1eae:	c8 01       	movw	r24, r16
    1eb0:	09 95       	icall
    1eb2:	00 97       	sbiw	r24, 0x00	; 0
    1eb4:	d9 f0       	breq	.+54     	; 0x1eec <uECC_generate_random_int+0xaa>
    1eb6:	f7 01       	movw	r30, r14
    1eb8:	80 81       	ld	r24, Z
    1eba:	89 21       	and	r24, r9
    1ebc:	80 83       	st	Z, r24
    1ebe:	6d 2f       	mov	r22, r29
    1ec0:	c8 01       	movw	r24, r16
    1ec2:	0e 94 ec 04 	call	0x9d8	; 0x9d8 <uECC_vli_isZero>
    1ec6:	81 11       	cpse	r24, r1
    1ec8:	07 c0       	rjmp	.+14     	; 0x1ed8 <uECC_generate_random_int+0x96>
    1eca:	4d 2f       	mov	r20, r29
    1ecc:	b8 01       	movw	r22, r16
    1ece:	c5 01       	movw	r24, r10
    1ed0:	0e 94 81 05 	call	0xb02	; 0xb02 <uECC_vli_cmp>
    1ed4:	81 30       	cpi	r24, 0x01	; 1
    1ed6:	41 f0       	breq	.+16     	; 0x1ee8 <uECC_generate_random_int+0xa6>
    1ed8:	c1 50       	subi	r28, 0x01	; 1
    1eda:	21 f7       	brne	.-56     	; 0x1ea4 <uECC_generate_random_int+0x62>
    1edc:	80 e0       	ldi	r24, 0x00	; 0
    1ede:	90 e0       	ldi	r25, 0x00	; 0
    1ee0:	05 c0       	rjmp	.+10     	; 0x1eec <uECC_generate_random_int+0xaa>
    1ee2:	80 e0       	ldi	r24, 0x00	; 0
    1ee4:	90 e0       	ldi	r25, 0x00	; 0
    1ee6:	02 c0       	rjmp	.+4      	; 0x1eec <uECC_generate_random_int+0xaa>
    1ee8:	81 e0       	ldi	r24, 0x01	; 1
    1eea:	90 e0       	ldi	r25, 0x00	; 0
    1eec:	df 91       	pop	r29
    1eee:	cf 91       	pop	r28
    1ef0:	1f 91       	pop	r17
    1ef2:	0f 91       	pop	r16
    1ef4:	ff 90       	pop	r15
    1ef6:	ef 90       	pop	r14
    1ef8:	df 90       	pop	r13
    1efa:	cf 90       	pop	r12
    1efc:	bf 90       	pop	r11
    1efe:	af 90       	pop	r10
    1f00:	9f 90       	pop	r9
    1f02:	08 95       	ret

00001f04 <uECC_set_rng>:
    1f04:	90 93 7d 02 	sts	0x027D, r25	; 0x80027d <__data_end+0x1>
    1f08:	80 93 7c 02 	sts	0x027C, r24	; 0x80027c <__data_end>
    1f0c:	08 95       	ret

00001f0e <uECC_secp256r1>:
    1f0e:	8a e0       	ldi	r24, 0x0A	; 10
    1f10:	91 e0       	ldi	r25, 0x01	; 1
    1f12:	08 95       	ret

00001f14 <uECC_make_key>:
    return 0;
}

int uECC_make_key(uint8_t *public_key,
                  uint8_t *private_key,
                  uECC_Curve curve) {
    1f14:	9f 92       	push	r9
    1f16:	af 92       	push	r10
    1f18:	bf 92       	push	r11
    1f1a:	cf 92       	push	r12
    1f1c:	df 92       	push	r13
    1f1e:	ef 92       	push	r14
    1f20:	ff 92       	push	r15
    1f22:	0f 93       	push	r16
    1f24:	1f 93       	push	r17
    1f26:	cf 93       	push	r28
    1f28:	df 93       	push	r29
    1f2a:	cd b7       	in	r28, 0x3d	; 61
    1f2c:	de b7       	in	r29, 0x3e	; 62
    1f2e:	c0 56       	subi	r28, 0x60	; 96
    1f30:	d1 09       	sbc	r29, r1
    1f32:	0f b6       	in	r0, 0x3f	; 63
    1f34:	f8 94       	cli
    1f36:	de bf       	out	0x3e, r29	; 62
    1f38:	0f be       	out	0x3f, r0	; 63
    1f3a:	cd bf       	out	0x3d, r28	; 61
    1f3c:	6c 01       	movw	r12, r24
    1f3e:	5b 01       	movw	r10, r22
    1f40:	8a 01       	movw	r16, r20
    1f42:	68 94       	set
    1f44:	99 24       	eor	r9, r9
    1f46:	96 f8       	bld	r9, 6
    uECC_word_t _public[uECC_MAX_WORDS * 2];
#endif
    uECC_word_t tries;

    for (tries = 0; tries < uECC_RNG_MAX_TRIES; ++tries) {
        if (!uECC_generate_random_int(_private, curve->n, BITS_TO_WORDS(curve->num_n_bits))) {
    1f48:	7a 01       	movw	r14, r20
    1f4a:	84 e2       	ldi	r24, 0x24	; 36
    1f4c:	e8 0e       	add	r14, r24
    1f4e:	f1 1c       	adc	r15, r1
    1f50:	f8 01       	movw	r30, r16
    1f52:	82 81       	ldd	r24, Z+2	; 0x02
    1f54:	93 81       	ldd	r25, Z+3	; 0x03
    1f56:	07 96       	adiw	r24, 0x07	; 7
    1f58:	ac 01       	movw	r20, r24
    1f5a:	12 f4       	brpl	.+4      	; 0x1f60 <uECC_make_key+0x4c>
    1f5c:	49 5f       	subi	r20, 0xF9	; 249
    1f5e:	5f 4f       	sbci	r21, 0xFF	; 255
    1f60:	55 95       	asr	r21
    1f62:	47 95       	ror	r20
    1f64:	55 95       	asr	r21
    1f66:	47 95       	ror	r20
    1f68:	55 95       	asr	r21
    1f6a:	47 95       	ror	r20
    1f6c:	b7 01       	movw	r22, r14
    1f6e:	ce 01       	movw	r24, r28
    1f70:	01 96       	adiw	r24, 0x01	; 1
    1f72:	67 df       	rcall	.-306    	; 0x1e42 <uECC_generate_random_int>
    1f74:	00 97       	sbiw	r24, 0x00	; 0
    1f76:	09 f4       	brne	.+2      	; 0x1f7a <uECC_make_key+0x66>
    1f78:	40 c0       	rjmp	.+128    	; 0x1ffa <uECC_make_key+0xe6>
            return 0;
        }

        if (EccPoint_compute_public_key(_public, _private, curve)) {
    1f7a:	a8 01       	movw	r20, r16
    1f7c:	be 01       	movw	r22, r28
    1f7e:	6f 5f       	subi	r22, 0xFF	; 255
    1f80:	7f 4f       	sbci	r23, 0xFF	; 255
    1f82:	ce 01       	movw	r24, r28
    1f84:	81 96       	adiw	r24, 0x21	; 33
    1f86:	de de       	rcall	.-580    	; 0x1d44 <EccPoint_compute_public_key>
    1f88:	88 23       	and	r24, r24
    1f8a:	91 f1       	breq	.+100    	; 0x1ff0 <uECC_make_key+0xdc>
#if uECC_VLI_NATIVE_LITTLE_ENDIAN == 0
            uECC_vli_nativeToBytes(private_key, BITS_TO_BYTES(curve->num_n_bits), _private);
    1f8c:	f8 01       	movw	r30, r16
    1f8e:	82 81       	ldd	r24, Z+2	; 0x02
    1f90:	93 81       	ldd	r25, Z+3	; 0x03
    1f92:	07 96       	adiw	r24, 0x07	; 7
    1f94:	bc 01       	movw	r22, r24
    1f96:	12 f4       	brpl	.+4      	; 0x1f9c <uECC_make_key+0x88>
    1f98:	69 5f       	subi	r22, 0xF9	; 249
    1f9a:	7f 4f       	sbci	r23, 0xFF	; 255
    1f9c:	75 95       	asr	r23
    1f9e:	67 95       	ror	r22
    1fa0:	75 95       	asr	r23
    1fa2:	67 95       	ror	r22
    1fa4:	75 95       	asr	r23
    1fa6:	67 95       	ror	r22
    1fa8:	ae 01       	movw	r20, r28
    1faa:	4f 5f       	subi	r20, 0xFF	; 255
    1fac:	5f 4f       	sbci	r21, 0xFF	; 255
    1fae:	c5 01       	movw	r24, r10
    1fb0:	26 df       	rcall	.-436    	; 0x1dfe <uECC_vli_nativeToBytes>
            uECC_vli_nativeToBytes(public_key, curve->num_bytes, _public);
    1fb2:	f8 01       	movw	r30, r16
    1fb4:	61 81       	ldd	r22, Z+1	; 0x01
    1fb6:	06 2e       	mov	r0, r22
    1fb8:	00 0c       	add	r0, r0
    1fba:	77 0b       	sbc	r23, r23
    1fbc:	ae 01       	movw	r20, r28
    1fbe:	4f 5d       	subi	r20, 0xDF	; 223
    1fc0:	5f 4f       	sbci	r21, 0xFF	; 255
    1fc2:	c6 01       	movw	r24, r12
    1fc4:	1c df       	rcall	.-456    	; 0x1dfe <uECC_vli_nativeToBytes>
            uECC_vli_nativeToBytes(
                public_key + curve->num_bytes, curve->num_bytes, _public + curve->num_words);
    1fc6:	f8 01       	movw	r30, r16
    1fc8:	81 81       	ldd	r24, Z+1	; 0x01

        if (EccPoint_compute_public_key(_public, _private, curve)) {
#if uECC_VLI_NATIVE_LITTLE_ENDIAN == 0
            uECC_vli_nativeToBytes(private_key, BITS_TO_BYTES(curve->num_n_bits), _private);
            uECC_vli_nativeToBytes(public_key, curve->num_bytes, _public);
            uECC_vli_nativeToBytes(
    1fca:	90 81       	ld	r25, Z
    1fcc:	41 e2       	ldi	r20, 0x21	; 33
    1fce:	50 e0       	ldi	r21, 0x00	; 0
    1fd0:	4c 0f       	add	r20, r28
    1fd2:	5d 1f       	adc	r21, r29
    1fd4:	49 0f       	add	r20, r25
    1fd6:	51 1d       	adc	r21, r1
    1fd8:	97 fd       	sbrc	r25, 7
    1fda:	5a 95       	dec	r21
    1fdc:	08 2e       	mov	r0, r24
    1fde:	00 0c       	add	r0, r0
    1fe0:	99 0b       	sbc	r25, r25
    1fe2:	bc 01       	movw	r22, r24
    1fe4:	8c 0d       	add	r24, r12
    1fe6:	9d 1d       	adc	r25, r13
    1fe8:	0a df       	rcall	.-492    	; 0x1dfe <uECC_vli_nativeToBytes>
                public_key + curve->num_bytes, curve->num_bytes, _public + curve->num_words);
#endif
            return 1;
    1fea:	81 e0       	ldi	r24, 0x01	; 1
    1fec:	90 e0       	ldi	r25, 0x00	; 0
    1fee:	05 c0       	rjmp	.+10     	; 0x1ffa <uECC_make_key+0xe6>
    1ff0:	9a 94       	dec	r9
    uECC_word_t _private[uECC_MAX_WORDS];
    uECC_word_t _public[uECC_MAX_WORDS * 2];
#endif
    uECC_word_t tries;

    for (tries = 0; tries < uECC_RNG_MAX_TRIES; ++tries) {
    1ff2:	91 10       	cpse	r9, r1
    1ff4:	ad cf       	rjmp	.-166    	; 0x1f50 <uECC_make_key+0x3c>
                public_key + curve->num_bytes, curve->num_bytes, _public + curve->num_words);
#endif
            return 1;
        }
    }
    return 0;
    1ff6:	80 e0       	ldi	r24, 0x00	; 0
    1ff8:	90 e0       	ldi	r25, 0x00	; 0
}
    1ffa:	c0 5a       	subi	r28, 0xA0	; 160
    1ffc:	df 4f       	sbci	r29, 0xFF	; 255
    1ffe:	0f b6       	in	r0, 0x3f	; 63
    2000:	f8 94       	cli
    2002:	de bf       	out	0x3e, r29	; 62
    2004:	0f be       	out	0x3f, r0	; 63
    2006:	cd bf       	out	0x3d, r28	; 61
    2008:	df 91       	pop	r29
    200a:	cf 91       	pop	r28
    200c:	1f 91       	pop	r17
    200e:	0f 91       	pop	r16
    2010:	ff 90       	pop	r15
    2012:	ef 90       	pop	r14
    2014:	df 90       	pop	r13
    2016:	cf 90       	pop	r12
    2018:	bf 90       	pop	r11
    201a:	af 90       	pop	r10
    201c:	9f 90       	pop	r9
    201e:	08 95       	ret

00002020 <uECC_shared_secret>:

int uECC_shared_secret(const uint8_t *public_key,
                       const uint8_t *private_key,
                       uint8_t *secret,
                       uECC_Curve curve) {
    2020:	6f 92       	push	r6
    2022:	7f 92       	push	r7
    2024:	8f 92       	push	r8
    2026:	9f 92       	push	r9
    2028:	af 92       	push	r10
    202a:	bf 92       	push	r11
    202c:	cf 92       	push	r12
    202e:	df 92       	push	r13
    2030:	ef 92       	push	r14
    2032:	ff 92       	push	r15
    2034:	0f 93       	push	r16
    2036:	1f 93       	push	r17
    2038:	cf 93       	push	r28
    203a:	df 93       	push	r29
    203c:	cd b7       	in	r28, 0x3d	; 61
    203e:	de b7       	in	r29, 0x3e	; 62
    2040:	c4 58       	subi	r28, 0x84	; 132
    2042:	d1 09       	sbc	r29, r1
    2044:	0f b6       	in	r0, 0x3f	; 63
    2046:	f8 94       	cli
    2048:	de bf       	out	0x3e, r29	; 62
    204a:	0f be       	out	0x3f, r0	; 63
    204c:	cd bf       	out	0x3d, r28	; 61
    204e:	8c 01       	movw	r16, r24
    2050:	4a 01       	movw	r8, r20
    2052:	69 01       	movw	r12, r18
    uECC_word_t _public[uECC_MAX_WORDS * 2];
    uECC_word_t _private[uECC_MAX_WORDS];

    uECC_word_t tmp[uECC_MAX_WORDS];
    uECC_word_t *p2[2] = {_private, tmp};
    2054:	ce 01       	movw	r24, r28
    2056:	8f 5b       	subi	r24, 0xBF	; 191
    2058:	9f 4f       	sbci	r25, 0xFF	; 255
    205a:	cf 57       	subi	r28, 0x7F	; 127
    205c:	df 4f       	sbci	r29, 0xFF	; 255
    205e:	99 83       	std	Y+1, r25	; 0x01
    2060:	88 83       	st	Y, r24
    2062:	c1 58       	subi	r28, 0x81	; 129
    2064:	d0 40       	sbci	r29, 0x00	; 0
    2066:	80 96       	adiw	r24, 0x20	; 32
    2068:	cd 57       	subi	r28, 0x7D	; 125
    206a:	df 4f       	sbci	r29, 0xFF	; 255
    206c:	99 83       	std	Y+1, r25	; 0x01
    206e:	88 83       	st	Y, r24
    2070:	c3 58       	subi	r28, 0x83	; 131
    2072:	d0 40       	sbci	r29, 0x00	; 0
    uECC_word_t *initial_Z = 0;
    uECC_word_t carry;
    wordcount_t num_words = curve->num_words;
    2074:	f9 01       	movw	r30, r18
    2076:	f0 80       	ld	r15, Z
    wordcount_t num_bytes = curve->num_bytes;
    2078:	a1 80       	ldd	r10, Z+1	; 0x01
}

uECC_VLI_API void uECC_vli_bytesToNative(uint8_t *native,
                                         const uint8_t *bytes,
                                         int num_bytes) {
    uECC_vli_nativeToBytes(native, num_bytes, bytes);
    207a:	22 81       	ldd	r18, Z+2	; 0x02
    207c:	33 81       	ldd	r19, Z+3	; 0x03
    207e:	29 5f       	subi	r18, 0xF9	; 249
    2080:	3f 4f       	sbci	r19, 0xFF	; 255
    2082:	c9 01       	movw	r24, r18
    2084:	99 23       	and	r25, r25
    2086:	0c f4       	brge	.+2      	; 0x208a <uECC_shared_secret+0x6a>
    2088:	07 96       	adiw	r24, 0x07	; 7
    208a:	95 95       	asr	r25
    208c:	87 95       	ror	r24
    208e:	95 95       	asr	r25
    2090:	87 95       	ror	r24
    2092:	95 95       	asr	r25
    2094:	87 95       	ror	r24
    2096:	ab 01       	movw	r20, r22
    2098:	bc 01       	movw	r22, r24
    209a:	ce 01       	movw	r24, r28
    209c:	8f 5b       	subi	r24, 0xBF	; 191
    209e:	9f 4f       	sbci	r25, 0xFF	; 255
    20a0:	ae de       	rcall	.-676    	; 0x1dfe <uECC_vli_nativeToBytes>
#if uECC_VLI_NATIVE_LITTLE_ENDIAN
    bcopy((uint8_t *) _private, private_key, num_bytes);
    bcopy((uint8_t *) _public, public_key, num_bytes*2);
#else
    uECC_vli_bytesToNative(_private, private_key, BITS_TO_BYTES(curve->num_n_bits));
    uECC_vli_bytesToNative(_public, public_key, num_bytes);
    20a2:	0a 2c       	mov	r0, r10
    20a4:	00 0c       	add	r0, r0
    20a6:	bb 08       	sbc	r11, r11
}

uECC_VLI_API void uECC_vli_bytesToNative(uint8_t *native,
                                         const uint8_t *bytes,
                                         int num_bytes) {
    uECC_vli_nativeToBytes(native, num_bytes, bytes);
    20a8:	a8 01       	movw	r20, r16
    20aa:	b5 01       	movw	r22, r10
    20ac:	ce 01       	movw	r24, r28
    20ae:	01 96       	adiw	r24, 0x01	; 1
    20b0:	a6 de       	rcall	.-692    	; 0x1dfe <uECC_vli_nativeToBytes>
    20b2:	a8 01       	movw	r20, r16
    20b4:	4a 0d       	add	r20, r10
    20b6:	5b 1d       	adc	r21, r11
    20b8:	b5 01       	movw	r22, r10
    20ba:	81 e0       	ldi	r24, 0x01	; 1
    20bc:	90 e0       	ldi	r25, 0x00	; 0
    20be:	8c 0f       	add	r24, r28
    20c0:	9d 1f       	adc	r25, r29
    20c2:	8f 0d       	add	r24, r15
    20c4:	91 1d       	adc	r25, r1
    20c6:	f7 fc       	sbrc	r15, 7
    20c8:	9a 95       	dec	r25
    20ca:	99 de       	rcall	.-718    	; 0x1dfe <uECC_vli_nativeToBytes>
    uECC_vli_bytesToNative(_public + num_words, public_key + num_bytes, num_bytes);
#endif

    /* Regularize the bitcount for the private key so that attackers cannot use a side channel
       attack to learn the number of leading zeros. */
    carry = regularize_k(_private, _private, tmp, curve);
    20cc:	96 01       	movw	r18, r12
    20ce:	ae 01       	movw	r20, r28
    20d0:	4f 59       	subi	r20, 0x9F	; 159
    20d2:	5f 4f       	sbci	r21, 0xFF	; 255
    20d4:	be 01       	movw	r22, r28
    20d6:	6f 5b       	subi	r22, 0xBF	; 191
    20d8:	7f 4f       	sbci	r23, 0xFF	; 255
    20da:	cb 01       	movw	r24, r22
    20dc:	e5 dd       	rcall	.-1078   	; 0x1ca8 <regularize_k>
    20de:	18 2f       	mov	r17, r24

    /* If an RNG function was specified, try to get a random initial Z value to improve
       protection against side-channel attacks. */
    if (g_rng_function) {
    20e0:	80 91 7c 02 	lds	r24, 0x027C	; 0x80027c <__data_end>
    20e4:	90 91 7d 02 	lds	r25, 0x027D	; 0x80027d <__data_end+0x1>
    20e8:	89 2b       	or	r24, r25
    20ea:	a9 f0       	breq	.+42     	; 0x2116 <uECC_shared_secret+0xf6>
        if (!uECC_generate_random_int(p2[carry], curve->p, num_words)) {
    20ec:	e1 2f       	mov	r30, r17
    20ee:	f0 e0       	ldi	r31, 0x00	; 0
    20f0:	ee 0f       	add	r30, r30
    20f2:	ff 1f       	adc	r31, r31
    20f4:	81 e8       	ldi	r24, 0x81	; 129
    20f6:	90 e0       	ldi	r25, 0x00	; 0
    20f8:	8c 0f       	add	r24, r28
    20fa:	9d 1f       	adc	r25, r29
    20fc:	e8 0f       	add	r30, r24
    20fe:	f9 1f       	adc	r31, r25
    2100:	60 80       	ld	r6, Z
    2102:	71 80       	ldd	r7, Z+1	; 0x01
    2104:	4f 2d       	mov	r20, r15
    2106:	b6 01       	movw	r22, r12
    2108:	6c 5f       	subi	r22, 0xFC	; 252
    210a:	7f 4f       	sbci	r23, 0xFF	; 255
    210c:	c3 01       	movw	r24, r6
    210e:	99 de       	rcall	.-718    	; 0x1e42 <uECC_generate_random_int>
    2110:	00 97       	sbiw	r24, 0x00	; 0
    2112:	19 f4       	brne	.+6      	; 0x211a <uECC_shared_secret+0xfa>
    2114:	32 c0       	rjmp	.+100    	; 0x217a <uECC_shared_secret+0x15a>
    uECC_word_t _public[uECC_MAX_WORDS * 2];
    uECC_word_t _private[uECC_MAX_WORDS];

    uECC_word_t tmp[uECC_MAX_WORDS];
    uECC_word_t *p2[2] = {_private, tmp};
    uECC_word_t *initial_Z = 0;
    2116:	61 2c       	mov	r6, r1
    2118:	71 2c       	mov	r7, r1
            return 0;
        }
        initial_Z = p2[carry];
    }

    EccPoint_mult(_public, _public, p2[!carry], initial_Z, curve->num_n_bits + 1, curve);
    211a:	f6 01       	movw	r30, r12
    211c:	22 81       	ldd	r18, Z+2	; 0x02
    211e:	33 81       	ldd	r19, Z+3	; 0x03
    2120:	2f 5f       	subi	r18, 0xFF	; 255
    2122:	3f 4f       	sbci	r19, 0xFF	; 255
    2124:	81 e0       	ldi	r24, 0x01	; 1
    2126:	90 e0       	ldi	r25, 0x00	; 0
    2128:	11 23       	and	r17, r17
    212a:	11 f0       	breq	.+4      	; 0x2130 <uECC_shared_secret+0x110>
    212c:	80 e0       	ldi	r24, 0x00	; 0
    212e:	90 e0       	ldi	r25, 0x00	; 0
    2130:	88 0f       	add	r24, r24
    2132:	99 1f       	adc	r25, r25
    2134:	e1 e8       	ldi	r30, 0x81	; 129
    2136:	f0 e0       	ldi	r31, 0x00	; 0
    2138:	ec 0f       	add	r30, r28
    213a:	fd 1f       	adc	r31, r29
    213c:	e8 0f       	add	r30, r24
    213e:	f9 1f       	adc	r31, r25
    2140:	40 81       	ld	r20, Z
    2142:	51 81       	ldd	r21, Z+1	; 0x01
    2144:	76 01       	movw	r14, r12
    2146:	89 01       	movw	r16, r18
    2148:	93 01       	movw	r18, r6
    214a:	be 01       	movw	r22, r28
    214c:	6f 5f       	subi	r22, 0xFF	; 255
    214e:	7f 4f       	sbci	r23, 0xFF	; 255
    2150:	cb 01       	movw	r24, r22
    2152:	b6 db       	rcall	.-2196   	; 0x18c0 <EccPoint_mult>
#if uECC_VLI_NATIVE_LITTLE_ENDIAN
    bcopy((uint8_t *) secret, (uint8_t *) _public, num_bytes);
#else
    uECC_vli_nativeToBytes(secret, num_bytes, _public);
    2154:	ae 01       	movw	r20, r28
    2156:	4f 5f       	subi	r20, 0xFF	; 255
    2158:	5f 4f       	sbci	r21, 0xFF	; 255
    215a:	b5 01       	movw	r22, r10
    215c:	c4 01       	movw	r24, r8
    215e:	4f de       	rcall	.-866    	; 0x1dfe <uECC_vli_nativeToBytes>
    2160:	f6 01       	movw	r30, r12
#endif
    return !EccPoint_isZero(_public, curve);
    2162:	60 81       	ld	r22, Z
    2164:	66 0f       	add	r22, r22
    2166:	ce 01       	movw	r24, r28
    2168:	01 96       	adiw	r24, 0x01	; 1
    216a:	0e 94 ec 04 	call	0x9d8	; 0x9d8 <uECC_vli_isZero>
    216e:	31 e0       	ldi	r19, 0x01	; 1
    2170:	20 e0       	ldi	r18, 0x00	; 0
    2172:	81 11       	cpse	r24, r1
    2174:	30 e0       	ldi	r19, 0x00	; 0
    2176:	83 2f       	mov	r24, r19
    2178:	92 2f       	mov	r25, r18
    217a:	cc 57       	subi	r28, 0x7C	; 124
}
    217c:	df 4f       	sbci	r29, 0xFF	; 255
    217e:	0f b6       	in	r0, 0x3f	; 63
    2180:	f8 94       	cli
    2182:	de bf       	out	0x3e, r29	; 62
    2184:	0f be       	out	0x3f, r0	; 63
    2186:	cd bf       	out	0x3d, r28	; 61
    2188:	df 91       	pop	r29
    218a:	cf 91       	pop	r28
    218c:	1f 91       	pop	r17
    218e:	0f 91       	pop	r16
    2190:	ff 90       	pop	r15
    2192:	ef 90       	pop	r14
    2194:	df 90       	pop	r13
    2196:	cf 90       	pop	r12
    2198:	bf 90       	pop	r11
    219a:	af 90       	pop	r10
    219c:	9f 90       	pop	r9
    219e:	8f 90       	pop	r8
    21a0:	7f 90       	pop	r7
    21a2:	6f 90       	pop	r6
    21a4:	08 95       	ret

000021a6 <RNG>:
    21a6:	ff 92       	push	r15
	}else{
		uart_puts("signature is false!");
		can_send_message(0, 0x00, message);
	}
	return 0;
}
    21a8:	0f 93       	push	r16
    21aa:	1f 93       	push	r17
    21ac:	cf 93       	push	r28
    21ae:	df 93       	push	r29
    21b0:	ec 01       	movw	r28, r24
    21b2:	8b 01       	movw	r16, r22
    21b4:	67 2b       	or	r22, r23
    21b6:	51 f0       	breq	.+20     	; 0x21cc <RNG+0x26>
    21b8:	0e 94 2c 19 	call	0x3258	; 0x3258 <rand>
    21bc:	f8 2e       	mov	r15, r24
    21be:	0e 94 2c 19 	call	0x3258	; 0x3258 <rand>
    21c2:	8f 0d       	add	r24, r15
    21c4:	89 93       	st	Y+, r24
    21c6:	01 50       	subi	r16, 0x01	; 1
    21c8:	11 09       	sbc	r17, r1
    21ca:	b1 f7       	brne	.-20     	; 0x21b8 <RNG+0x12>
    21cc:	81 e0       	ldi	r24, 0x01	; 1
    21ce:	90 e0       	ldi	r25, 0x00	; 0
    21d0:	df 91       	pop	r29
    21d2:	cf 91       	pop	r28
    21d4:	1f 91       	pop	r17
    21d6:	0f 91       	pop	r16
    21d8:	ff 90       	pop	r15
    21da:	08 95       	ret

000021dc <buttons_init>:
    21dc:	1d b8       	out	0x0d, r1	; 13
    21de:	80 ef       	ldi	r24, 0xF0	; 240
    21e0:	8e b9       	out	0x0e, r24	; 14
    21e2:	9f ef       	ldi	r25, 0xFF	; 255
    21e4:	90 93 6a 00 	sts	0x006A, r25	; 0x80006a <__TEXT_REGION_LENGTH__+0x7e006a>
    21e8:	8d bb       	out	0x1d, r24	; 29
    21ea:	08 95       	ret

000021ec <run_scenario2>:

int run_scenario2(role_t role){
    21ec:	cf 93       	push	r28
    21ee:	df 93       	push	r29
    21f0:	cd b7       	in	r28, 0x3d	; 61
    21f2:	de b7       	in	r29, 0x3e	; 62
    21f4:	c9 51       	subi	r28, 0x19	; 25
    21f6:	d1 40       	sbci	r29, 0x01	; 1
    21f8:	0f b6       	in	r0, 0x3f	; 63
    21fa:	f8 94       	cli
    21fc:	de bf       	out	0x3e, r29	; 62
    21fe:	0f be       	out	0x3f, r0	; 63
    2200:	cd bf       	out	0x3d, r28	; 61
	
	volatile uint8_t result;
	uart_puts("idle");
    2202:	86 eb       	ldi	r24, 0xB6	; 182
    2204:	91 e0       	ldi	r25, 0x01	; 1
    2206:	91 d6       	rcall	.+3362   	; 0x2f2a <uart_puts>
	can_msg_t init;
	can_receive_message(0, 0x00, 0x00, init);
    2208:	9e 01       	movw	r18, r28
    220a:	2e 5f       	subi	r18, 0xFE	; 254
    220c:	3f 4f       	sbci	r19, 0xFF	; 255
    220e:	40 e0       	ldi	r20, 0x00	; 0
    2210:	60 e0       	ldi	r22, 0x00	; 0
    2212:	80 e0       	ldi	r24, 0x00	; 0
    2214:	0e 94 86 01 	call	0x30c	; 0x30c <can_receive_message>
	uart_puts("authentication started");
    2218:	8b eb       	ldi	r24, 0xBB	; 187
    221a:	91 e0       	ldi	r25, 0x01	; 1
    221c:	86 d6       	rcall	.+3340   	; 0x2f2a <uart_puts>
	uECC_set_rng(RNG);
    221e:	83 ed       	ldi	r24, 0xD3	; 211
    2220:	90 e1       	ldi	r25, 0x10	; 16
	volatile uint8_t private[32];
	volatile uint8_t public[64];
	const struct uECC_Curve_t * curve = uECC_secp256r1();
    2222:	70 de       	rcall	.-800    	; 0x1f04 <uECC_set_rng>
    2224:	74 de       	rcall	.-792    	; 0x1f0e <uECC_secp256r1>
    2226:	8c 01       	movw	r16, r24
	result = uECC_make_key(public, private, curve);
    2228:	ac 01       	movw	r20, r24
    222a:	be 01       	movw	r22, r28
    222c:	66 5f       	subi	r22, 0xF6	; 246
    222e:	7f 4f       	sbci	r23, 0xFF	; 255
    2230:	ce 01       	movw	r24, r28
    2232:	8a 96       	adiw	r24, 0x2a	; 42
    2234:	6f de       	rcall	.-802    	; 0x1f14 <uECC_make_key>
    2236:	89 83       	std	Y+1, r24	; 0x01
	uint8_t secret_unhashed[32];
	result = uECC_shared_secret(public_key, private, secret_unhashed, curve);
    2238:	98 01       	movw	r18, r16
    223a:	ae 01       	movw	r20, r28
    223c:	46 59       	subi	r20, 0x96	; 150
    223e:	5f 4f       	sbci	r21, 0xFF	; 255
    2240:	be 01       	movw	r22, r28
    2242:	66 5f       	subi	r22, 0xF6	; 246
    2244:	7f 4f       	sbci	r23, 0xFF	; 255
    2246:	8d e2       	ldi	r24, 0x2D	; 45
    2248:	92 e0       	ldi	r25, 0x02	; 2
    224a:	ea de       	rcall	.-556    	; 0x2020 <uECC_shared_secret>
    224c:	89 83       	std	Y+1, r24	; 0x01
	uint8_t secret[32];
	uint32_t len = 256;
	sha256(secret, secret_unhashed, len);
    224e:	20 e0       	ldi	r18, 0x00	; 0
    2250:	31 e0       	ldi	r19, 0x01	; 1
    2252:	40 e0       	ldi	r20, 0x00	; 0
    2254:	50 e0       	ldi	r21, 0x00	; 0
    2256:	be 01       	movw	r22, r28
    2258:	66 59       	subi	r22, 0x96	; 150
    225a:	7f 4f       	sbci	r23, 0xFF	; 255
    225c:	ce 01       	movw	r24, r28
    225e:	86 57       	subi	r24, 0x76	; 118
    2260:	9f 4f       	sbci	r25, 0xFF	; 255
    2262:	f9 d1       	rcall	.+1010   	; 0x2656 <sha256>
	can_send_frame_buffer(public, 8);
    2264:	68 e0       	ldi	r22, 0x08	; 8
    2266:	ce 01       	movw	r24, r28
    2268:	8a 96       	adiw	r24, 0x2a	; 42
    226a:	0e 94 bf 01 	call	0x37e	; 0x37e <can_send_frame_buffer>
	uart_puts("secret established");
    226e:	89 e0       	ldi	r24, 0x09	; 9
    2270:	92 e0       	ldi	r25, 0x02	; 2
    2272:	5b d6       	rcall	.+3254   	; 0x2f2a <uart_puts>
	can_init();
    2274:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <can_init>
	
	while(1){
		can_msg_t message[8];
		can_receive_message(0, 0x00, 0x00, message);
    2278:	9e 01       	movw	r18, r28
    227a:	26 55       	subi	r18, 0x56	; 86
    227c:	3f 4f       	sbci	r19, 0xFF	; 255
    227e:	40 e0       	ldi	r20, 0x00	; 0
    2280:	60 e0       	ldi	r22, 0x00	; 0
    2282:	80 e0       	ldi	r24, 0x00	; 0
    2284:	0e 94 86 01 	call	0x30c	; 0x30c <can_receive_message>
		can_send_message(0, 0x00, message);
    2288:	ae 01       	movw	r20, r28
    228a:	46 55       	subi	r20, 0x56	; 86
    228c:	5f 4f       	sbci	r21, 0xFF	; 255
    228e:	60 e0       	ldi	r22, 0x00	; 0
    2290:	80 e0       	ldi	r24, 0x00	; 0
    2292:	0e 94 6a 01 	call	0x2d4	; 0x2d4 <can_send_message>
		uint8_t mac[16];
		can_receive_frame_buffer(mac,2);
    2296:	62 e0       	ldi	r22, 0x02	; 2
    2298:	ce 01       	movw	r24, r28
    229a:	86 5f       	subi	r24, 0xF6	; 246
    229c:	9e 4f       	sbci	r25, 0xFE	; 254
    229e:	0e 94 d3 01 	call	0x3a6	; 0x3a6 <can_receive_frame_buffer>
		
		uint8_t mac2[32];
		hmac_sha256(mac2, secret, 265 ,message , 64);
    22a2:	10 e4       	ldi	r17, 0x40	; 64
    22a4:	e1 2e       	mov	r14, r17
    22a6:	f1 2c       	mov	r15, r1
    22a8:	00 e0       	ldi	r16, 0x00	; 0
    22aa:	10 e0       	ldi	r17, 0x00	; 0
    22ac:	9e 01       	movw	r18, r28
    22ae:	26 55       	subi	r18, 0x56	; 86
    22b0:	3f 4f       	sbci	r19, 0xFF	; 255
    22b2:	49 e0       	ldi	r20, 0x09	; 9
    22b4:	51 e0       	ldi	r21, 0x01	; 1
    22b6:	be 01       	movw	r22, r28
    22b8:	66 57       	subi	r22, 0x76	; 118
    22ba:	7f 4f       	sbci	r23, 0xFF	; 255
    22bc:	ce 01       	movw	r24, r28
    22be:	86 51       	subi	r24, 0x16	; 22
    22c0:	9f 4f       	sbci	r25, 0xFF	; 255
    22c2:	b5 d0       	rcall	.+362    	; 0x242e <hmac_sha256>
		if(memcmp(mac, mac2, 16) == 0) uart_puts("message accepted");
    22c4:	40 e1       	ldi	r20, 0x10	; 16
    22c6:	50 e0       	ldi	r21, 0x00	; 0
    22c8:	be 01       	movw	r22, r28
    22ca:	66 51       	subi	r22, 0x16	; 22
    22cc:	7f 4f       	sbci	r23, 0xFF	; 255
    22ce:	ce 01       	movw	r24, r28
    22d0:	86 5f       	subi	r24, 0xF6	; 246
    22d2:	9e 4f       	sbci	r25, 0xFE	; 254
    22d4:	d8 d7       	rcall	.+4016   	; 0x3286 <memcmp>
    22d6:	89 2b       	or	r24, r25
    22d8:	79 f6       	brne	.-98     	; 0x2278 <run_scenario2+0x8c>
    22da:	8c e1       	ldi	r24, 0x1C	; 28
    22dc:	92 e0       	ldi	r25, 0x02	; 2
    22de:	25 d6       	rcall	.+3146   	; 0x2f2a <uart_puts>
    22e0:	cb cf       	rjmp	.-106    	; 0x2278 <run_scenario2+0x8c>

000022e2 <main>:
	}
    22e2:	0f 93       	push	r16




 int main()
 {
    22e4:	1f 93       	push	r17
    22e6:	cf 93       	push	r28
    22e8:	df 93       	push	r29
    22ea:	cd b7       	in	r28, 0x3d	; 61
    22ec:	de b7       	in	r29, 0x3e	; 62
    22ee:	28 97       	sbiw	r28, 0x08	; 8
    22f0:	0f b6       	in	r0, 0x3f	; 63
    22f2:	f8 94       	cli
    22f4:	de bf       	out	0x3e, r29	; 62
    22f6:	0f be       	out	0x3f, r0	; 63
    22f8:	cd bf       	out	0x3d, r28	; 61
	uart_init();
    22fa:	0b d6       	rcall	.+3094   	; 0x2f12 <uart_init>
	buttons_init();
    22fc:	6f df       	rcall	.-290    	; 0x21dc <buttons_init>
    22fe:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <can_init>
	can_init();
	init_permissions_table();
    2302:	68 d0       	rcall	.+208    	; 0x23d4 <init_permissions_table>
    2304:	8e 01       	movw	r16, r28
	can_msg_t init;
	can_receive_message(0, 0x00, 0x00, init);
    2306:	0f 5f       	subi	r16, 0xFF	; 255
    2308:	1f 4f       	sbci	r17, 0xFF	; 255
    230a:	98 01       	movw	r18, r16
    230c:	40 e0       	ldi	r20, 0x00	; 0
    230e:	60 e0       	ldi	r22, 0x00	; 0
    2310:	80 e0       	ldi	r24, 0x00	; 0
    2312:	0e 94 86 01 	call	0x30c	; 0x30c <can_receive_message>
    2316:	02 30       	cpi	r16, 0x02	; 2
	switch((int) init){
    2318:	11 05       	cpc	r17, r1
    231a:	41 f0       	breq	.+16     	; 0x232c <main+0x4a>
    231c:	6c f0       	brlt	.+26     	; 0x2338 <main+0x56>
    231e:	c2 30       	cpi	r28, 0x02	; 2
    2320:	d1 05       	cpc	r29, r1
    2322:	31 f0       	breq	.+12     	; 0x2330 <main+0x4e>
    2324:	c3 30       	cpi	r28, 0x03	; 3
    2326:	d1 05       	cpc	r29, r1
    2328:	29 f0       	breq	.+10     	; 0x2334 <main+0x52>
    232a:	06 c0       	rjmp	.+12     	; 0x2338 <main+0x56>
		case OWNER_ROLE_INIT :
			run_scenario2(OWNER_ROLE);
			break;
		case REPAIRSHOP_ROLE_INIT :
			run_scenario2(REPAISHOP_ROLE);
    232c:	81 e0       	ldi	r24, 0x01	; 1
    232e:	5e df       	rcall	.-324    	; 0x21ec <run_scenario2>
			break;
		case POLICEMAN_ROLE_INIT :
			run_scenario2(POLICEMAN_ROLE);
    2330:	82 e0       	ldi	r24, 0x02	; 2
    2332:	5c df       	rcall	.-328    	; 0x21ec <run_scenario2>
    2334:	83 e0       	ldi	r24, 0x03	; 3
			break;
		case TESTER_ROLE_INIT :
			run_scenario2(TESTER_ROLE);
    2336:	5a df       	rcall	.-332    	; 0x21ec <run_scenario2>
    2338:	80 e0       	ldi	r24, 0x00	; 0
    233a:	90 e0       	ldi	r25, 0x00	; 0
			break;	
		default : 
			break;
	}
 }
    233c:	28 96       	adiw	r28, 0x08	; 8
    233e:	0f b6       	in	r0, 0x3f	; 63
    2340:	f8 94       	cli
    2342:	de bf       	out	0x3e, r29	; 62
    2344:	0f be       	out	0x3f, r0	; 63
    2346:	cd bf       	out	0x3d, r28	; 61
    2348:	df 91       	pop	r29
    234a:	cf 91       	pop	r28
    234c:	1f 91       	pop	r17
    234e:	0f 91       	pop	r16
    2350:	08 95       	ret

00002352 <add_entry>:
    2352:	ef 92       	push	r14
    2354:	ff 92       	push	r15
	add_entry(id, roles);
	return 0;
}


int add_entry(can_id_t *id, role_t *roles){
    2356:	0f 93       	push	r16
    2358:	1f 93       	push	r17
    235a:	cf 93       	push	r28
    235c:	df 93       	push	r29
    235e:	7c 01       	movw	r14, r24
    2360:	8b 01       	movw	r16, r22
	entry_t *new_entry; 
	new_entry = malloc(sizeof(entry_t));
    2362:	86 e0       	ldi	r24, 0x06	; 6
    2364:	90 e0       	ldi	r25, 0x00	; 0
    2366:	10 d6       	rcall	.+3104   	; 0x2f88 <malloc>
    2368:	ec 01       	movw	r28, r24
	new_entry->id = malloc(sizeof(can_id_t));
    236a:	82 e0       	ldi	r24, 0x02	; 2
    236c:	90 e0       	ldi	r25, 0x00	; 0
    236e:	0c d6       	rcall	.+3096   	; 0x2f88 <malloc>
    2370:	99 83       	std	Y+1, r25	; 0x01
    2372:	88 83       	st	Y, r24
	new_entry->id->idh = id->idl;
    2374:	d7 01       	movw	r26, r14
    2376:	11 96       	adiw	r26, 0x01	; 1
    2378:	2c 91       	ld	r18, X
    237a:	fc 01       	movw	r30, r24
    237c:	20 83       	st	Z, r18
	new_entry->id->idl = id->idl;
    237e:	21 83       	std	Z+1, r18	; 0x01
	new_entry->permissions = malloc(sizeof(permissions_t));
    2380:	82 e0       	ldi	r24, 0x02	; 2
    2382:	90 e0       	ldi	r25, 0x00	; 0
    2384:	01 d6       	rcall	.+3074   	; 0x2f88 <malloc>
    2386:	9b 83       	std	Y+3, r25	; 0x03
    2388:	8a 83       	std	Y+2, r24	; 0x02
	memcpy(new_entry->permissions->roles, roles, sizeof(roles));
    238a:	dc 01       	movw	r26, r24
    238c:	ed 91       	ld	r30, X+
    238e:	fc 91       	ld	r31, X
    2390:	d8 01       	movw	r26, r16
    2392:	8d 91       	ld	r24, X+
    2394:	9c 91       	ld	r25, X
    2396:	91 83       	std	Z+1, r25	; 0x01
    2398:	80 83       	st	Z, r24
	
	entry_t *curr = permission_table->head;
    239a:	a0 91 7e 02 	lds	r26, 0x027E	; 0x80027e <permission_table>
    239e:	b0 91 7f 02 	lds	r27, 0x027F	; 0x80027f <permission_table+0x1>
    23a2:	ed 91       	ld	r30, X+
    23a4:	fc 91       	ld	r31, X
    23a6:	11 97       	sbiw	r26, 0x01	; 1
	if(curr != NULL){
    23a8:	30 97       	sbiw	r30, 0x00	; 0
    23aa:	11 f4       	brne	.+4      	; 0x23b0 <add_entry+0x5e>
    23ac:	08 c0       	rjmp	.+16     	; 0x23be <add_entry+0x6c>
		while(curr->successor != NULL){
			curr = curr->successor;
    23ae:	fc 01       	movw	r30, r24
	new_entry->permissions = malloc(sizeof(permissions_t));
	memcpy(new_entry->permissions->roles, roles, sizeof(roles));
	
	entry_t *curr = permission_table->head;
	if(curr != NULL){
		while(curr->successor != NULL){
    23b0:	84 81       	ldd	r24, Z+4	; 0x04
    23b2:	95 81       	ldd	r25, Z+5	; 0x05
    23b4:	00 97       	sbiw	r24, 0x00	; 0
    23b6:	d9 f7       	brne	.-10     	; 0x23ae <add_entry+0x5c>
			curr = curr->successor;
		}
		curr->successor = new_entry;
    23b8:	d5 83       	std	Z+5, r29	; 0x05
    23ba:	c4 83       	std	Z+4, r28	; 0x04
    23bc:	02 c0       	rjmp	.+4      	; 0x23c2 <add_entry+0x70>
	}else{
		permission_table->head = new_entry;
    23be:	cd 93       	st	X+, r28
    23c0:	dc 93       	st	X, r29
	}
	
	return 0;
}
    23c2:	80 e0       	ldi	r24, 0x00	; 0
    23c4:	90 e0       	ldi	r25, 0x00	; 0
    23c6:	df 91       	pop	r29
    23c8:	cf 91       	pop	r28
    23ca:	1f 91       	pop	r17
    23cc:	0f 91       	pop	r16
    23ce:	ff 90       	pop	r15
    23d0:	ef 90       	pop	r14
    23d2:	08 95       	ret

000023d4 <init_permissions_table>:
#include <stdlib.h>
#include <string.h>

permission_table_t *permission_table; 

void init_permissions_table(){
    23d4:	cf 93       	push	r28
    23d6:	df 93       	push	r29
    23d8:	00 d0       	rcall	.+0      	; 0x23da <init_permissions_table+0x6>
    23da:	00 d0       	rcall	.+0      	; 0x23dc <init_permissions_table+0x8>
    23dc:	cd b7       	in	r28, 0x3d	; 61
    23de:	de b7       	in	r29, 0x3e	; 62
	permission_table = malloc(sizeof(permission_table_t));
    23e0:	82 e0       	ldi	r24, 0x02	; 2
    23e2:	90 e0       	ldi	r25, 0x00	; 0
    23e4:	d1 d5       	rcall	.+2978   	; 0x2f88 <malloc>
    23e6:	90 93 7f 02 	sts	0x027F, r25	; 0x80027f <permission_table+0x1>
    23ea:	80 93 7e 02 	sts	0x027E, r24	; 0x80027e <permission_table>
	role_t roles[4] = {OWNER_ROLE, REPAISHOP_ROLE, POLICEMAN_ROLE, TESTER_ROLE};
    23ee:	19 82       	std	Y+1, r1	; 0x01
    23f0:	81 e0       	ldi	r24, 0x01	; 1
    23f2:	8a 83       	std	Y+2, r24	; 0x02
    23f4:	82 e0       	ldi	r24, 0x02	; 2
    23f6:	8b 83       	std	Y+3, r24	; 0x03
    23f8:	83 e0       	ldi	r24, 0x03	; 3
    23fa:	8c 83       	std	Y+4, r24	; 0x04
	add_entry("0760", roles);
    23fc:	be 01       	movw	r22, r28
    23fe:	6f 5f       	subi	r22, 0xFF	; 255
    2400:	7f 4f       	sbci	r23, 0xFF	; 255
    2402:	8d e6       	ldi	r24, 0x6D	; 109
    2404:	92 e0       	ldi	r25, 0x02	; 2
    2406:	a5 df       	rcall	.-182    	; 0x2352 <add_entry>
	add_entry("07E0", roles);
    2408:	be 01       	movw	r22, r28
    240a:	6f 5f       	subi	r22, 0xFF	; 255
    240c:	7f 4f       	sbci	r23, 0xFF	; 255
    240e:	82 e7       	ldi	r24, 0x72	; 114
    2410:	92 e0       	ldi	r25, 0x02	; 2
    2412:	9f df       	rcall	.-194    	; 0x2352 <add_entry>
	add_entry("0726", roles);
    2414:	be 01       	movw	r22, r28
    2416:	6f 5f       	subi	r22, 0xFF	; 255
    2418:	7f 4f       	sbci	r23, 0xFF	; 255
    241a:	87 e7       	ldi	r24, 0x77	; 119
    241c:	92 e0       	ldi	r25, 0x02	; 2
    241e:	99 df       	rcall	.-206    	; 0x2352 <add_entry>
}
    2420:	0f 90       	pop	r0
    2422:	0f 90       	pop	r0
    2424:	0f 90       	pop	r0
    2426:	0f 90       	pop	r0
    2428:	df 91       	pop	r29
    242a:	cf 91       	pop	r28
    242c:	08 95       	ret

0000242e <hmac_sha256>:

/*
 * keylength in bits!
 * message length in bits!
 */
void hmac_sha256(void *dest, const void *key, uint16_t keylength_b, const void *msg, uint32_t msglength_b){ /* a one-shot*/
    242e:	2f 92       	push	r2
    2430:	3f 92       	push	r3
    2432:	4f 92       	push	r4
    2434:	5f 92       	push	r5
    2436:	6f 92       	push	r6
    2438:	7f 92       	push	r7
    243a:	8f 92       	push	r8
    243c:	9f 92       	push	r9
    243e:	af 92       	push	r10
    2440:	bf 92       	push	r11
    2442:	cf 92       	push	r12
    2444:	df 92       	push	r13
    2446:	ef 92       	push	r14
    2448:	ff 92       	push	r15
    244a:	0f 93       	push	r16
    244c:	1f 93       	push	r17
    244e:	cf 93       	push	r28
    2450:	df 93       	push	r29
    2452:	cd b7       	in	r28, 0x3d	; 61
    2454:	de b7       	in	r29, 0x3e	; 62
    2456:	c8 56       	subi	r28, 0x68	; 104
    2458:	d1 09       	sbc	r29, r1
    245a:	0f b6       	in	r0, 0x3f	; 63
    245c:	f8 94       	cli
    245e:	de bf       	out	0x3e, r29	; 62
    2460:	0f be       	out	0x3f, r0	; 63
    2462:	cd bf       	out	0x3d, r28	; 61
    2464:	1c 01       	movw	r2, r24
    2466:	49 01       	movw	r8, r18
    2468:	a9 96       	adiw	r28, 0x29	; 41
    246a:	ec ae       	std	Y+60, r14	; 0x3c
    246c:	fd ae       	std	Y+61, r15	; 0x3d
    246e:	0e af       	std	Y+62, r16	; 0x3e
    2470:	1f af       	std	Y+63, r17	; 0x3f
    2472:	a9 97       	sbiw	r28, 0x29	; 41
	sha256_ctx_t s;
	uint8_t i;
	uint8_t buffer[HMAC_SHA256_BLOCK_BYTES];
	
	memset(buffer, 0, HMAC_SHA256_BLOCK_BYTES);
    2474:	fe 01       	movw	r30, r28
    2476:	b5 96       	adiw	r30, 0x25	; 37
    2478:	80 e4       	ldi	r24, 0x40	; 64
    247a:	df 01       	movw	r26, r30
    247c:	1d 92       	st	X+, r1
    247e:	8a 95       	dec	r24
    2480:	e9 f7       	brne	.-6      	; 0x247c <hmac_sha256+0x4e>
	
	/* if key is larger than a block we have to hash it*/
	if (keylength_b > SHA256_BLOCK_BITS){
    2482:	41 30       	cpi	r20, 0x01	; 1
    2484:	b2 e0       	ldi	r27, 0x02	; 2
    2486:	5b 07       	cpc	r21, r27
    2488:	30 f0       	brcs	.+12     	; 0x2496 <hmac_sha256+0x68>
		sha256((void*)buffer, key, keylength_b);
    248a:	9a 01       	movw	r18, r20
    248c:	40 e0       	ldi	r20, 0x00	; 0
    248e:	50 e0       	ldi	r21, 0x00	; 0
    2490:	cf 01       	movw	r24, r30
    2492:	e1 d0       	rcall	.+450    	; 0x2656 <sha256>
    2494:	95 c0       	rjmp	.+298    	; 0x25c0 <hmac_sha256+0x192>
	} else {
		memcpy(buffer, key, (keylength_b+7)/8);
    2496:	49 5f       	subi	r20, 0xF9	; 249
    2498:	5f 4f       	sbci	r21, 0xFF	; 255
    249a:	56 95       	lsr	r21
    249c:	47 95       	ror	r20
    249e:	56 95       	lsr	r21
    24a0:	47 95       	ror	r20
    24a2:	56 95       	lsr	r21
    24a4:	47 95       	ror	r20
    24a6:	ce 01       	movw	r24, r28
    24a8:	85 96       	adiw	r24, 0x25	; 37
    24aa:	fa d6       	rcall	.+3572   	; 0x32a0 <memcpy>
    24ac:	89 c0       	rjmp	.+274    	; 0x25c0 <hmac_sha256+0x192>
	}
	
	for (i=0; i<SHA256_BLOCK_BYTES; ++i){
		buffer[i] ^= IPAD;
    24ae:	80 81       	ld	r24, Z
    24b0:	89 27       	eor	r24, r25
    24b2:	81 93       	st	Z+, r24
		sha256((void*)buffer, key, keylength_b);
	} else {
		memcpy(buffer, key, (keylength_b+7)/8);
	}
	
	for (i=0; i<SHA256_BLOCK_BYTES; ++i){
    24b4:	ec 15       	cp	r30, r12
    24b6:	fd 05       	cpc	r31, r13
    24b8:	d1 f7       	brne	.-12     	; 0x24ae <hmac_sha256+0x80>
		buffer[i] ^= IPAD;
	}
	sha256_init(&s);
    24ba:	ce 01       	movw	r24, r28
    24bc:	01 96       	adiw	r24, 0x01	; 1
    24be:	a4 d0       	rcall	.+328    	; 0x2608 <sha256_init>
	sha256_nextBlock(&s, buffer);
    24c0:	be 01       	movw	r22, r28
    24c2:	6b 5d       	subi	r22, 0xDB	; 219
    24c4:	7f 4f       	sbci	r23, 0xFF	; 255
    24c6:	ce 01       	movw	r24, r28
    24c8:	01 96       	adiw	r24, 0x01	; 1
    24ca:	a9 d0       	rcall	.+338    	; 0x261e <sha256_nextBlock>
	while (msglength_b >= HMAC_SHA256_BLOCK_BITS){
    24cc:	a9 96       	adiw	r28, 0x29	; 41
    24ce:	8c ad       	ldd	r24, Y+60	; 0x3c
    24d0:	9d ad       	ldd	r25, Y+61	; 0x3d
    24d2:	ae ad       	ldd	r26, Y+62	; 0x3e
    24d4:	bf ad       	ldd	r27, Y+63	; 0x3f
    24d6:	a9 97       	sbiw	r28, 0x29	; 41
    24d8:	81 15       	cp	r24, r1
    24da:	e2 e0       	ldi	r30, 0x02	; 2
    24dc:	9e 07       	cpc	r25, r30
    24de:	a1 05       	cpc	r26, r1
    24e0:	b1 05       	cpc	r27, r1
    24e2:	08 f4       	brcc	.+2      	; 0x24e6 <hmac_sha256+0xb8>
    24e4:	41 c0       	rjmp	.+130    	; 0x2568 <hmac_sha256+0x13a>
    24e6:	2c 01       	movw	r4, r24
    24e8:	3d 01       	movw	r6, r26
		sha256_nextBlock(&s, msg);
    24ea:	54 01       	movw	r10, r8
    24ec:	b5 01       	movw	r22, r10
    24ee:	ce 01       	movw	r24, r28
    24f0:	01 96       	adiw	r24, 0x01	; 1
    24f2:	95 d0       	rcall	.+298    	; 0x261e <sha256_nextBlock>
		msg = (uint8_t*)msg + HMAC_SHA256_BLOCK_BYTES;
    24f4:	f0 e4       	ldi	r31, 0x40	; 64
    24f6:	af 0e       	add	r10, r31
    24f8:	b1 1c       	adc	r11, r1
		msglength_b -=  HMAC_SHA256_BLOCK_BITS;
    24fa:	22 e0       	ldi	r18, 0x02	; 2
    24fc:	52 1a       	sub	r5, r18
    24fe:	61 08       	sbc	r6, r1
    2500:	71 08       	sbc	r7, r1
	for (i=0; i<SHA256_BLOCK_BYTES; ++i){
		buffer[i] ^= IPAD;
	}
	sha256_init(&s);
	sha256_nextBlock(&s, buffer);
	while (msglength_b >= HMAC_SHA256_BLOCK_BITS){
    2502:	41 14       	cp	r4, r1
    2504:	82 e0       	ldi	r24, 0x02	; 2
    2506:	58 06       	cpc	r5, r24
    2508:	61 04       	cpc	r6, r1
    250a:	71 04       	cpc	r7, r1
    250c:	78 f7       	brcc	.-34     	; 0x24ec <hmac_sha256+0xbe>
    250e:	a9 96       	adiw	r28, 0x29	; 41
    2510:	8c ad       	ldd	r24, Y+60	; 0x3c
    2512:	9d ad       	ldd	r25, Y+61	; 0x3d
    2514:	ae ad       	ldd	r26, Y+62	; 0x3e
    2516:	bf ad       	ldd	r27, Y+63	; 0x3f
    2518:	a9 97       	sbiw	r28, 0x29	; 41
    251a:	92 50       	subi	r25, 0x02	; 2
    251c:	a1 09       	sbc	r26, r1
    251e:	b1 09       	sbc	r27, r1
    2520:	07 2e       	mov	r0, r23
    2522:	79 e0       	ldi	r23, 0x09	; 9
    2524:	b6 95       	lsr	r27
    2526:	a7 95       	ror	r26
    2528:	97 95       	ror	r25
    252a:	87 95       	ror	r24
    252c:	7a 95       	dec	r23
    252e:	d1 f7       	brne	.-12     	; 0x2524 <hmac_sha256+0xf6>
    2530:	70 2d       	mov	r23, r0
    2532:	01 96       	adiw	r24, 0x01	; 1
    2534:	00 24       	eor	r0, r0
    2536:	96 95       	lsr	r25
    2538:	87 95       	ror	r24
    253a:	07 94       	ror	r0
    253c:	96 95       	lsr	r25
    253e:	87 95       	ror	r24
    2540:	07 94       	ror	r0
    2542:	98 2f       	mov	r25, r24
    2544:	80 2d       	mov	r24, r0
    2546:	88 0e       	add	r8, r24
    2548:	99 1e       	adc	r9, r25
    254a:	a9 96       	adiw	r28, 0x29	; 41
    254c:	8c ad       	ldd	r24, Y+60	; 0x3c
    254e:	9d ad       	ldd	r25, Y+61	; 0x3d
    2550:	ae ad       	ldd	r26, Y+62	; 0x3e
    2552:	bf ad       	ldd	r27, Y+63	; 0x3f
    2554:	a9 97       	sbiw	r28, 0x29	; 41
    2556:	91 70       	andi	r25, 0x01	; 1
    2558:	aa 27       	eor	r26, r26
    255a:	bb 27       	eor	r27, r27
    255c:	a9 96       	adiw	r28, 0x29	; 41
    255e:	8c af       	std	Y+60, r24	; 0x3c
    2560:	9d af       	std	Y+61, r25	; 0x3d
    2562:	ae af       	std	Y+62, r26	; 0x3e
    2564:	bf af       	std	Y+63, r27	; 0x3f
    2566:	a9 97       	sbiw	r28, 0x29	; 41
		sha256_nextBlock(&s, msg);
		msg = (uint8_t*)msg + HMAC_SHA256_BLOCK_BYTES;
		msglength_b -=  HMAC_SHA256_BLOCK_BITS;
	}
	sha256_lastBlock(&s, msg, msglength_b);
    2568:	a7 96       	adiw	r28, 0x27	; 39
    256a:	4e ad       	ldd	r20, Y+62	; 0x3e
    256c:	5f ad       	ldd	r21, Y+63	; 0x3f
    256e:	a7 97       	sbiw	r28, 0x27	; 39
    2570:	b4 01       	movw	r22, r8
    2572:	ce 01       	movw	r24, r28
    2574:	01 96       	adiw	r24, 0x01	; 1
    2576:	55 d0       	rcall	.+170    	; 0x2622 <sha256_lastBlock>
	/* since buffer still contains key xor ipad we can do ... */
	for (i=0; i<HMAC_SHA256_BLOCK_BYTES; ++i){
		buffer[i] ^= IPAD ^ OPAD;
    2578:	9a e6       	ldi	r25, 0x6A	; 106
    257a:	d8 01       	movw	r26, r16
    257c:	8c 91       	ld	r24, X
    257e:	89 27       	eor	r24, r25
    2580:	f8 01       	movw	r30, r16
    2582:	81 93       	st	Z+, r24
    2584:	8f 01       	movw	r16, r30
		msg = (uint8_t*)msg + HMAC_SHA256_BLOCK_BYTES;
		msglength_b -=  HMAC_SHA256_BLOCK_BITS;
	}
	sha256_lastBlock(&s, msg, msglength_b);
	/* since buffer still contains key xor ipad we can do ... */
	for (i=0; i<HMAC_SHA256_BLOCK_BYTES; ++i){
    2586:	ec 15       	cp	r30, r12
    2588:	fd 05       	cpc	r31, r13
		buffer[i] ^= IPAD ^ OPAD;
	}
	sha256_ctx2hash(dest, &s); /* save inner hash temporary to dest */
    258a:	b9 f7       	brne	.-18     	; 0x257a <hmac_sha256+0x14c>
    258c:	be 01       	movw	r22, r28
    258e:	6f 5f       	subi	r22, 0xFF	; 255
    2590:	7f 4f       	sbci	r23, 0xFF	; 255
    2592:	c1 01       	movw	r24, r2
	sha256_init(&s);
    2594:	48 d0       	rcall	.+144    	; 0x2626 <sha256_ctx2hash>
    2596:	ce 01       	movw	r24, r28
    2598:	01 96       	adiw	r24, 0x01	; 1
	sha256_nextBlock(&s, buffer);
    259a:	36 d0       	rcall	.+108    	; 0x2608 <sha256_init>
    259c:	be 01       	movw	r22, r28
    259e:	6b 5d       	subi	r22, 0xDB	; 219
    25a0:	7f 4f       	sbci	r23, 0xFF	; 255
    25a2:	ce 01       	movw	r24, r28
    25a4:	01 96       	adiw	r24, 0x01	; 1
	sha256_lastBlock(&s, dest, SHA256_HASH_BITS);
    25a6:	3b d0       	rcall	.+118    	; 0x261e <sha256_nextBlock>
    25a8:	40 e0       	ldi	r20, 0x00	; 0
    25aa:	51 e0       	ldi	r21, 0x01	; 1
    25ac:	b1 01       	movw	r22, r2
    25ae:	ce 01       	movw	r24, r28
    25b0:	01 96       	adiw	r24, 0x01	; 1
	sha256_ctx2hash(dest, &s);
    25b2:	37 d0       	rcall	.+110    	; 0x2622 <sha256_lastBlock>
    25b4:	be 01       	movw	r22, r28
    25b6:	6f 5f       	subi	r22, 0xFF	; 255
    25b8:	7f 4f       	sbci	r23, 0xFF	; 255
    25ba:	c1 01       	movw	r24, r2
    25bc:	34 d0       	rcall	.+104    	; 0x2626 <sha256_ctx2hash>
}
    25be:	0a c0       	rjmp	.+20     	; 0x25d4 <hmac_sha256+0x1a6>
    25c0:	8e 01       	movw	r16, r28
    25c2:	0b 5d       	subi	r16, 0xDB	; 219
    25c4:	1f 4f       	sbci	r17, 0xFF	; 255
    25c6:	6e 01       	movw	r12, r28
    25c8:	f5 e6       	ldi	r31, 0x65	; 101
    25ca:	cf 0e       	add	r12, r31
    25cc:	d1 1c       	adc	r13, r1

/*
 * keylength in bits!
 * message length in bits!
 */
void hmac_sha256(void *dest, const void *key, uint16_t keylength_b, const void *msg, uint32_t msglength_b){ /* a one-shot*/
    25ce:	f8 01       	movw	r30, r16
	} else {
		memcpy(buffer, key, (keylength_b+7)/8);
	}
	
	for (i=0; i<SHA256_BLOCK_BYTES; ++i){
		buffer[i] ^= IPAD;
    25d0:	96 e3       	ldi	r25, 0x36	; 54
    25d2:	6d cf       	rjmp	.-294    	; 0x24ae <hmac_sha256+0x80>
	sha256_ctx2hash(dest, &s); /* save inner hash temporary to dest */
	sha256_init(&s);
	sha256_nextBlock(&s, buffer);
	sha256_lastBlock(&s, dest, SHA256_HASH_BITS);
	sha256_ctx2hash(dest, &s);
}
    25d4:	c8 59       	subi	r28, 0x98	; 152
    25d6:	df 4f       	sbci	r29, 0xFF	; 255
    25d8:	0f b6       	in	r0, 0x3f	; 63
    25da:	f8 94       	cli
    25dc:	de bf       	out	0x3e, r29	; 62
    25de:	0f be       	out	0x3f, r0	; 63
    25e0:	cd bf       	out	0x3d, r28	; 61
    25e2:	df 91       	pop	r29
    25e4:	cf 91       	pop	r28
    25e6:	1f 91       	pop	r17
    25e8:	0f 91       	pop	r16
    25ea:	ff 90       	pop	r15
    25ec:	ef 90       	pop	r14
    25ee:	df 90       	pop	r13
    25f0:	cf 90       	pop	r12
    25f2:	bf 90       	pop	r11
    25f4:	af 90       	pop	r10
    25f6:	9f 90       	pop	r9
    25f8:	8f 90       	pop	r8
    25fa:	7f 90       	pop	r7
    25fc:	6f 90       	pop	r6
    25fe:	5f 90       	pop	r5
    2600:	4f 90       	pop	r4
    2602:	3f 90       	pop	r3
    2604:	2f 90       	pop	r2
    2606:	08 95       	ret

00002608 <sha256_init>:
 * \c sh256_init c initialises the given sha256 context for hashing
 * @param state pointer to a sha256 context
 * @return none
 */
void sha256_init(sha256_ctx_t *state){
	state->length=0;
    2608:	fc 01       	movw	r30, r24
    260a:	10 a2       	std	Z+32, r1	; 0x20
    260c:	11 a2       	std	Z+33, r1	; 0x21
    260e:	12 a2       	std	Z+34, r1	; 0x22
    2610:	13 a2       	std	Z+35, r1	; 0x23
	memcpy_P(state->h, sha256_init_vector, 8*4);
    2612:	40 e2       	ldi	r20, 0x20	; 32
    2614:	50 e0       	ldi	r21, 0x00	; 0
    2616:	64 e9       	ldi	r22, 0x94	; 148
    2618:	70 e0       	ldi	r23, 0x00	; 0
    261a:	2c c6       	rjmp	.+3160   	; 0x3274 <memcpy_P>
    261c:	08 95       	ret

0000261e <sha256_nextBlock>:
}

/*************************************************************************/
void sha256_nextBlock (sha256_ctx_t *state, const void *block){
	sha2_small_common_nextBlock(state, block);
    261e:	92 c0       	rjmp	.+292    	; 0x2744 <sha2_small_common_nextBlock>
    2620:	08 95       	ret

00002622 <sha256_lastBlock>:
}

/*************************************************************************/
void sha256_lastBlock (sha256_ctx_t *state, const void *block, uint16_t length_b){
	sha2_small_common_lastBlock(state, block, length_b);
    2622:	a0 c3       	rjmp	.+1856   	; 0x2d64 <sha2_small_common_lastBlock>
    2624:	08 95       	ret

00002626 <sha256_ctx2hash>:



/*************************************************************************/

void sha256_ctx2hash(void *dest, const sha256_ctx_t *state){
    2626:	cf 93       	push	r28
    2628:	df 93       	push	r29
    262a:	ac 01       	movw	r20, r24
    262c:	ec 01       	movw	r28, r24
    262e:	a0 96       	adiw	r28, 0x20	; 32
    2630:	fa 01       	movw	r30, r20
#if defined LITTLE_ENDIAN
	uint8_t i, j, *s=(uint8_t*)(state->h);
	i=8;
	do{
		j=3;
    2632:	93 e0       	ldi	r25, 0x03	; 3
		do{
			*((uint8_t*)dest) = s[j];
    2634:	db 01       	movw	r26, r22
    2636:	a9 0f       	add	r26, r25
    2638:	b1 1d       	adc	r27, r1
    263a:	2c 91       	ld	r18, X
    263c:	21 93       	st	Z+, r18
			dest = (uint8_t*)dest + 1;
		}while(j--);
    263e:	91 50       	subi	r25, 0x01	; 1
    2640:	c8 f7       	brcc	.-14     	; 0x2634 <sha256_ctx2hash+0xe>
    2642:	4c 5f       	subi	r20, 0xFC	; 252
    2644:	5f 4f       	sbci	r21, 0xFF	; 255
		s += 4;
    2646:	6c 5f       	subi	r22, 0xFC	; 252
    2648:	7f 4f       	sbci	r23, 0xFF	; 255
	}while(--i);
    264a:	4c 17       	cp	r20, r28
    264c:	5d 07       	cpc	r21, r29
    264e:	81 f7       	brne	.-32     	; 0x2630 <sha256_ctx2hash+0xa>
#elif BIG_ENDIAN
	memcpy(dest, state->h, 32);
#else
# error unsupported endian type!
#endif
}
    2650:	df 91       	pop	r29
    2652:	cf 91       	pop	r28
    2654:	08 95       	ret

00002656 <sha256>:
/*************************************************************************/

/*
 * length in bits!
 */
void sha256(void *dest, const void *msg, uint32_t length_b){ /* length could be choosen longer but this is for µC */
    2656:	4f 92       	push	r4
    2658:	5f 92       	push	r5
    265a:	6f 92       	push	r6
    265c:	7f 92       	push	r7
    265e:	8f 92       	push	r8
    2660:	9f 92       	push	r9
    2662:	af 92       	push	r10
    2664:	bf 92       	push	r11
    2666:	cf 92       	push	r12
    2668:	df 92       	push	r13
    266a:	ef 92       	push	r14
    266c:	ff 92       	push	r15
    266e:	0f 93       	push	r16
    2670:	1f 93       	push	r17
    2672:	cf 93       	push	r28
    2674:	df 93       	push	r29
    2676:	cd b7       	in	r28, 0x3d	; 61
    2678:	de b7       	in	r29, 0x3e	; 62
    267a:	a4 97       	sbiw	r28, 0x24	; 36
    267c:	0f b6       	in	r0, 0x3f	; 63
    267e:	f8 94       	cli
    2680:	de bf       	out	0x3e, r29	; 62
    2682:	0f be       	out	0x3f, r0	; 63
    2684:	cd bf       	out	0x3d, r28	; 61
    2686:	4c 01       	movw	r8, r24
    2688:	5b 01       	movw	r10, r22
    268a:	69 01       	movw	r12, r18
    268c:	7a 01       	movw	r14, r20
	sha256_ctx_t s;
	sha256_init(&s);
    268e:	ce 01       	movw	r24, r28
    2690:	01 96       	adiw	r24, 0x01	; 1
    2692:	ba df       	rcall	.-140    	; 0x2608 <sha256_init>
	while(length_b >= SHA256_BLOCK_BITS){
    2694:	c1 14       	cp	r12, r1
    2696:	82 e0       	ldi	r24, 0x02	; 2
    2698:	d8 06       	cpc	r13, r24
    269a:	e1 04       	cpc	r14, r1
    269c:	f1 04       	cpc	r15, r1
    269e:	88 f1       	brcs	.+98     	; 0x2702 <sha256+0xac>
    26a0:	26 01       	movw	r4, r12
    26a2:	37 01       	movw	r6, r14
    26a4:	85 01       	movw	r16, r10
	memcpy_P(state->h, sha256_init_vector, 8*4);
}

/*************************************************************************/
void sha256_nextBlock (sha256_ctx_t *state, const void *block){
	sha2_small_common_nextBlock(state, block);
    26a6:	b8 01       	movw	r22, r16
    26a8:	ce 01       	movw	r24, r28
    26aa:	01 96       	adiw	r24, 0x01	; 1
    26ac:	4b d0       	rcall	.+150    	; 0x2744 <sha2_small_common_nextBlock>
void sha256(void *dest, const void *msg, uint32_t length_b){ /* length could be choosen longer but this is for µC */
	sha256_ctx_t s;
	sha256_init(&s);
	while(length_b >= SHA256_BLOCK_BITS){
		sha256_nextBlock(&s, msg);
		msg = (uint8_t*)msg + SHA256_BLOCK_BITS/8;
    26ae:	00 5c       	subi	r16, 0xC0	; 192
    26b0:	1f 4f       	sbci	r17, 0xFF	; 255
		length_b -= SHA256_BLOCK_BITS;
    26b2:	82 e0       	ldi	r24, 0x02	; 2
    26b4:	58 1a       	sub	r5, r24
    26b6:	61 08       	sbc	r6, r1
    26b8:	71 08       	sbc	r7, r1
 * length in bits!
 */
void sha256(void *dest, const void *msg, uint32_t length_b){ /* length could be choosen longer but this is for µC */
	sha256_ctx_t s;
	sha256_init(&s);
	while(length_b >= SHA256_BLOCK_BITS){
    26ba:	41 14       	cp	r4, r1
    26bc:	82 e0       	ldi	r24, 0x02	; 2
    26be:	58 06       	cpc	r5, r24
    26c0:	61 04       	cpc	r6, r1
    26c2:	71 04       	cpc	r7, r1
    26c4:	80 f7       	brcc	.-32     	; 0x26a6 <sha256+0x50>
    26c6:	d7 01       	movw	r26, r14
    26c8:	c6 01       	movw	r24, r12
    26ca:	92 50       	subi	r25, 0x02	; 2
    26cc:	a1 09       	sbc	r26, r1
    26ce:	b1 09       	sbc	r27, r1
    26d0:	07 2e       	mov	r0, r23
    26d2:	79 e0       	ldi	r23, 0x09	; 9
    26d4:	b6 95       	lsr	r27
    26d6:	a7 95       	ror	r26
    26d8:	97 95       	ror	r25
    26da:	87 95       	ror	r24
    26dc:	7a 95       	dec	r23
    26de:	d1 f7       	brne	.-12     	; 0x26d4 <sha256+0x7e>
    26e0:	70 2d       	mov	r23, r0
    26e2:	01 96       	adiw	r24, 0x01	; 1
    26e4:	00 24       	eor	r0, r0
    26e6:	96 95       	lsr	r25
    26e8:	87 95       	ror	r24
    26ea:	07 94       	ror	r0
    26ec:	96 95       	lsr	r25
    26ee:	87 95       	ror	r24
    26f0:	07 94       	ror	r0
    26f2:	98 2f       	mov	r25, r24
    26f4:	80 2d       	mov	r24, r0
    26f6:	a8 0e       	add	r10, r24
    26f8:	b9 1e       	adc	r11, r25
    26fa:	81 e0       	ldi	r24, 0x01	; 1
    26fc:	d8 22       	and	r13, r24
    26fe:	ee 24       	eor	r14, r14
    2700:	ff 24       	eor	r15, r15
	sha2_small_common_nextBlock(state, block);
}

/*************************************************************************/
void sha256_lastBlock (sha256_ctx_t *state, const void *block, uint16_t length_b){
	sha2_small_common_lastBlock(state, block, length_b);
    2702:	a6 01       	movw	r20, r12
    2704:	b5 01       	movw	r22, r10
    2706:	ce 01       	movw	r24, r28
    2708:	01 96       	adiw	r24, 0x01	; 1
    270a:	2c d3       	rcall	.+1624   	; 0x2d64 <sha2_small_common_lastBlock>
		sha256_nextBlock(&s, msg);
		msg = (uint8_t*)msg + SHA256_BLOCK_BITS/8;
		length_b -= SHA256_BLOCK_BITS;
	}
	sha256_lastBlock(&s, msg, length_b);
	sha256_ctx2hash(dest,&s);
    270c:	be 01       	movw	r22, r28
    270e:	6f 5f       	subi	r22, 0xFF	; 255
    2710:	7f 4f       	sbci	r23, 0xFF	; 255
    2712:	c4 01       	movw	r24, r8
    2714:	88 df       	rcall	.-240    	; 0x2626 <sha256_ctx2hash>
}
    2716:	a4 96       	adiw	r28, 0x24	; 36
    2718:	0f b6       	in	r0, 0x3f	; 63
    271a:	f8 94       	cli
    271c:	de bf       	out	0x3e, r29	; 62
    271e:	0f be       	out	0x3f, r0	; 63
    2720:	cd bf       	out	0x3d, r28	; 61
    2722:	df 91       	pop	r29
    2724:	cf 91       	pop	r28
    2726:	1f 91       	pop	r17
    2728:	0f 91       	pop	r16
    272a:	ff 90       	pop	r15
    272c:	ef 90       	pop	r14
    272e:	df 90       	pop	r13
    2730:	cf 90       	pop	r12
    2732:	bf 90       	pop	r11
    2734:	af 90       	pop	r10
    2736:	9f 90       	pop	r9
    2738:	8f 90       	pop	r8
    273a:	7f 90       	pop	r7
    273c:	6f 90       	pop	r6
    273e:	5f 90       	pop	r5
    2740:	4f 90       	pop	r4
    2742:	08 95       	ret

00002744 <sha2_small_common_nextBlock>:


/**
 * block must be, 512, Bit = 64, Byte, long !!!
 */
void sha2_small_common_nextBlock (sha2_small_common_ctx_t *state, const void *block){
    2744:	2f 92       	push	r2
    2746:	3f 92       	push	r3
    2748:	4f 92       	push	r4
    274a:	5f 92       	push	r5
    274c:	6f 92       	push	r6
    274e:	7f 92       	push	r7
    2750:	8f 92       	push	r8
    2752:	9f 92       	push	r9
    2754:	af 92       	push	r10
    2756:	bf 92       	push	r11
    2758:	cf 92       	push	r12
    275a:	df 92       	push	r13
    275c:	ef 92       	push	r14
    275e:	ff 92       	push	r15
    2760:	0f 93       	push	r16
    2762:	1f 93       	push	r17
    2764:	cf 93       	push	r28
    2766:	df 93       	push	r29
    2768:	cd b7       	in	r28, 0x3d	; 61
    276a:	de b7       	in	r29, 0x3e	; 62
    276c:	cb 56       	subi	r28, 0x6B	; 107
    276e:	d1 09       	sbc	r29, r1
    2770:	0f b6       	in	r0, 0x3f	; 63
    2772:	f8 94       	cli
    2774:	de bf       	out	0x3e, r29	; 62
    2776:	0f be       	out	0x3f, r0	; 63
    2778:	cd bf       	out	0x3d, r28	; 61
    277a:	ac 96       	adiw	r28, 0x2c	; 44
    277c:	9f af       	std	Y+63, r25	; 0x3f
    277e:	8e af       	std	Y+62, r24	; 0x3e
    2780:	ac 97       	sbiw	r28, 0x2c	; 44
    2782:	9e 01       	movw	r18, r28
    2784:	2f 5f       	subi	r18, 0xFF	; 255
    2786:	3f 4f       	sbci	r19, 0xFF	; 255
    2788:	a8 96       	adiw	r28, 0x28	; 40
    278a:	3f af       	std	Y+63, r19	; 0x3f
    278c:	2e af       	std	Y+62, r18	; 0x3e
    278e:	a8 97       	sbiw	r28, 0x28	; 40
    2790:	20 5c       	subi	r18, 0xC0	; 192
    2792:	3f 4f       	sbci	r19, 0xFF	; 255
    2794:	a8 96       	adiw	r28, 0x28	; 40
    2796:	ee ad       	ldd	r30, Y+62	; 0x3e
    2798:	ff ad       	ldd	r31, Y+63	; 0x3f
    279a:	a8 97       	sbiw	r28, 0x28	; 40
    279c:	af 01       	movw	r20, r30
	uint32_t a[8],t1,t2;

	/* init w */
#if defined LITTLE_ENDIAN
	for (i=0; i<16; ++i){
		w[i]= change_endian32(((uint32_t*)block)[i]);
    279e:	fb 01       	movw	r30, r22
    27a0:	81 91       	ld	r24, Z+
    27a2:	91 91       	ld	r25, Z+
    27a4:	a1 91       	ld	r26, Z+
    27a6:	b1 91       	ld	r27, Z+
    27a8:	bf 01       	movw	r22, r30
    27aa:	b8 2e       	mov	r11, r24
    27ac:	aa 24       	eor	r10, r10
    27ae:	99 24       	eor	r9, r9
    27b0:	88 24       	eor	r8, r8
    27b2:	cb 2e       	mov	r12, r27
    27b4:	dd 24       	eor	r13, r13
    27b6:	ee 24       	eor	r14, r14
    27b8:	ff 24       	eor	r15, r15
    27ba:	c8 28       	or	r12, r8
    27bc:	d9 28       	or	r13, r9
    27be:	ea 28       	or	r14, r10
    27c0:	fb 28       	or	r15, r11
    27c2:	4c 01       	movw	r8, r24
    27c4:	5d 01       	movw	r10, r26
    27c6:	88 24       	eor	r8, r8
    27c8:	aa 24       	eor	r10, r10
    27ca:	bb 24       	eor	r11, r11
    27cc:	ba 2c       	mov	r11, r10
    27ce:	a9 2c       	mov	r10, r9
    27d0:	98 2c       	mov	r9, r8
    27d2:	88 24       	eor	r8, r8
    27d4:	c8 28       	or	r12, r8
    27d6:	d9 28       	or	r13, r9
    27d8:	ea 28       	or	r14, r10
    27da:	fb 28       	or	r15, r11
    27dc:	88 27       	eor	r24, r24
    27de:	99 27       	eor	r25, r25
    27e0:	bb 27       	eor	r27, r27
    27e2:	89 2f       	mov	r24, r25
    27e4:	9a 2f       	mov	r25, r26
    27e6:	ab 2f       	mov	r26, r27
    27e8:	bb 27       	eor	r27, r27
    27ea:	8c 29       	or	r24, r12
    27ec:	9d 29       	or	r25, r13
    27ee:	ae 29       	or	r26, r14
    27f0:	bf 29       	or	r27, r15
    27f2:	fa 01       	movw	r30, r20
    27f4:	81 93       	st	Z+, r24
    27f6:	91 93       	st	Z+, r25
    27f8:	a1 93       	st	Z+, r26
    27fa:	b1 93       	st	Z+, r27
    27fc:	af 01       	movw	r20, r30
	uint8_t  i;
	uint32_t a[8],t1,t2;

	/* init w */
#if defined LITTLE_ENDIAN
	for (i=0; i<16; ++i){
    27fe:	e2 17       	cp	r30, r18
    2800:	f3 07       	cpc	r31, r19
    2802:	69 f6       	brne	.-102    	; 0x279e <sha2_small_common_nextBlock+0x5a>
	for (i=16; i<64; ++i){
		w[i] = SIGMA_b(w[i-2]) + w[i-7] + SIGMA_a(w[i-15]) + w[i-16];
	}
*/
/* init working variables */
	memcpy((void*)a,(void*)(state->h), 8*4);
    2804:	80 e2       	ldi	r24, 0x20	; 32
    2806:	ac 96       	adiw	r28, 0x2c	; 44
    2808:	ee ad       	ldd	r30, Y+62	; 0x3e
    280a:	ff ad       	ldd	r31, Y+63	; 0x3f
    280c:	ac 97       	sbiw	r28, 0x2c	; 44
    280e:	de 01       	movw	r26, r28
    2810:	af 5b       	subi	r26, 0xBF	; 191
    2812:	bf 4f       	sbci	r27, 0xFF	; 255
    2814:	01 90       	ld	r0, Z+
    2816:	0d 92       	st	X+, r0
    2818:	8a 95       	dec	r24
    281a:	e1 f7       	brne	.-8      	; 0x2814 <sha2_small_common_nextBlock+0xd0>
    281c:	0f 2e       	mov	r0, r31
    281e:	f4 eb       	ldi	r31, 0xB4	; 180
    2820:	2f 2e       	mov	r2, r31
    2822:	f0 e0       	ldi	r31, 0x00	; 0
    2824:	3f 2e       	mov	r3, r31
    2826:	f0 2d       	mov	r31, r0

/* do the, fun stuff, */
	for (i=0; i<64; ++i){
    2828:	a6 96       	adiw	r28, 0x26	; 38
    282a:	1f ae       	std	Y+63, r1	; 0x3f
    282c:	a6 97       	sbiw	r28, 0x26	; 38
			memmove(&(w[0]), &(w[1]), 15*4);
			w[15] = wx;
		}
		t1 = a[7] + SIGMA_1(a[4]) + CH(a[4],a[5],a[6]) + pgm_read_dword(&k[i]) + wx;
		t2 = SIGMA_0(a[0]) + MAJ(a[0],a[1],a[2]);
		memmove(&(a[1]), &(a[0]), 7*4); 	/* a[7]=a[6]; a[6]=a[5]; a[5]=a[4]; a[4]=a[3]; a[3]=a[2]; a[2]=a[1]; a[1]=a[0]; */
    282e:	21 e4       	ldi	r18, 0x41	; 65
    2830:	30 e0       	ldi	r19, 0x00	; 0
    2832:	2c 0f       	add	r18, r28
    2834:	3d 1f       	adc	r19, r29
    2836:	2c 5f       	subi	r18, 0xFC	; 252
    2838:	3f 4f       	sbci	r19, 0xFF	; 255
    283a:	aa 96       	adiw	r28, 0x2a	; 42
    283c:	3f af       	std	Y+63, r19	; 0x3f
    283e:	2e af       	std	Y+62, r18	; 0x3e
    2840:	aa 97       	sbiw	r28, 0x2a	; 42
/* init working variables */
	memcpy((void*)a,(void*)(state->h), 8*4);

/* do the, fun stuff, */
	for (i=0; i<64; ++i){
		if(i<16){
    2842:	a6 96       	adiw	r28, 0x26	; 38
    2844:	3f ad       	ldd	r19, Y+63	; 0x3f
    2846:	a6 97       	sbiw	r28, 0x26	; 38
    2848:	30 31       	cpi	r19, 0x10	; 16
    284a:	48 f4       	brcc	.+18     	; 0x285e <sha2_small_common_nextBlock+0x11a>
			wx = w[i];
    284c:	a8 96       	adiw	r28, 0x28	; 40
    284e:	ae ad       	ldd	r26, Y+62	; 0x3e
    2850:	bf ad       	ldd	r27, Y+63	; 0x3f
    2852:	a8 97       	sbiw	r28, 0x28	; 40
    2854:	cd 90       	ld	r12, X+
    2856:	dd 90       	ld	r13, X+
    2858:	ed 90       	ld	r14, X+
    285a:	fc 90       	ld	r15, X
    285c:	b8 c0       	rjmp	.+368    	; 0x29ce <sha2_small_common_nextBlock+0x28a>
		}else{
			wx = SIGMA_b(w[14]) + w[9] + SIGMA_a(w[1]) + w[0];
    285e:	89 ad       	ldd	r24, Y+57	; 0x39
    2860:	9a ad       	ldd	r25, Y+58	; 0x3a
    2862:	ab ad       	ldd	r26, Y+59	; 0x3b
    2864:	bc ad       	ldd	r27, Y+60	; 0x3c
    2866:	8d 80       	ldd	r8, Y+5	; 0x05
    2868:	9e 80       	ldd	r9, Y+6	; 0x06
    286a:	af 80       	ldd	r10, Y+7	; 0x07
    286c:	b8 84       	ldd	r11, Y+8	; 0x08
    286e:	6c 01       	movw	r12, r24
    2870:	7d 01       	movw	r14, r26
    2872:	0b 2e       	mov	r0, r27
    2874:	bd e0       	ldi	r27, 0x0D	; 13
    2876:	cc 0c       	add	r12, r12
    2878:	dd 1c       	adc	r13, r13
    287a:	ee 1c       	adc	r14, r14
    287c:	ff 1c       	adc	r15, r15
    287e:	ba 95       	dec	r27
    2880:	d1 f7       	brne	.-12     	; 0x2876 <sha2_small_common_nextBlock+0x132>
    2882:	b0 2d       	mov	r27, r0
    2884:	ac 01       	movw	r20, r24
    2886:	bd 01       	movw	r22, r26
    2888:	03 2e       	mov	r0, r19
    288a:	33 e1       	ldi	r19, 0x13	; 19
    288c:	76 95       	lsr	r23
    288e:	67 95       	ror	r22
    2890:	57 95       	ror	r21
    2892:	47 95       	ror	r20
    2894:	3a 95       	dec	r19
    2896:	d1 f7       	brne	.-12     	; 0x288c <sha2_small_common_nextBlock+0x148>
    2898:	30 2d       	mov	r19, r0
    289a:	97 01       	movw	r18, r14
    289c:	86 01       	movw	r16, r12
    289e:	04 2b       	or	r16, r20
    28a0:	15 2b       	or	r17, r21
    28a2:	26 2b       	or	r18, r22
    28a4:	37 2b       	or	r19, r23
    28a6:	6c 01       	movw	r12, r24
    28a8:	7d 01       	movw	r14, r26
    28aa:	0b 2e       	mov	r0, r27
    28ac:	bf e0       	ldi	r27, 0x0F	; 15
    28ae:	cc 0c       	add	r12, r12
    28b0:	dd 1c       	adc	r13, r13
    28b2:	ee 1c       	adc	r14, r14
    28b4:	ff 1c       	adc	r15, r15
    28b6:	ba 95       	dec	r27
    28b8:	d1 f7       	brne	.-12     	; 0x28ae <sha2_small_common_nextBlock+0x16a>
    28ba:	b0 2d       	mov	r27, r0
    28bc:	ac 01       	movw	r20, r24
    28be:	bd 01       	movw	r22, r26
    28c0:	03 2e       	mov	r0, r19
    28c2:	31 e1       	ldi	r19, 0x11	; 17
    28c4:	76 95       	lsr	r23
    28c6:	67 95       	ror	r22
    28c8:	57 95       	ror	r21
    28ca:	47 95       	ror	r20
    28cc:	3a 95       	dec	r19
    28ce:	d1 f7       	brne	.-12     	; 0x28c4 <sha2_small_common_nextBlock+0x180>
    28d0:	30 2d       	mov	r19, r0
    28d2:	4c 29       	or	r20, r12
    28d4:	5d 29       	or	r21, r13
    28d6:	6e 29       	or	r22, r14
    28d8:	7f 29       	or	r23, r15
    28da:	68 01       	movw	r12, r16
    28dc:	79 01       	movw	r14, r18
    28de:	c4 26       	eor	r12, r20
    28e0:	d5 26       	eor	r13, r21
    28e2:	e6 26       	eor	r14, r22
    28e4:	f7 26       	eor	r15, r23
    28e6:	07 2e       	mov	r0, r23
    28e8:	7a e0       	ldi	r23, 0x0A	; 10
    28ea:	b6 95       	lsr	r27
    28ec:	a7 95       	ror	r26
    28ee:	97 95       	ror	r25
    28f0:	87 95       	ror	r24
    28f2:	7a 95       	dec	r23
    28f4:	d1 f7       	brne	.-12     	; 0x28ea <sha2_small_common_nextBlock+0x1a6>
    28f6:	70 2d       	mov	r23, r0
    28f8:	8c 25       	eor	r24, r12
    28fa:	9d 25       	eor	r25, r13
    28fc:	ae 25       	eor	r26, r14
    28fe:	bf 25       	eor	r27, r15
    2900:	cd a0       	ldd	r12, Y+37	; 0x25
    2902:	de a0       	ldd	r13, Y+38	; 0x26
    2904:	ef a0       	ldd	r14, Y+39	; 0x27
    2906:	f8 a4       	ldd	r15, Y+40	; 0x28
    2908:	49 81       	ldd	r20, Y+1	; 0x01
    290a:	5a 81       	ldd	r21, Y+2	; 0x02
    290c:	6b 81       	ldd	r22, Y+3	; 0x03
    290e:	7c 81       	ldd	r23, Y+4	; 0x04
    2910:	c4 0e       	add	r12, r20
    2912:	d5 1e       	adc	r13, r21
    2914:	e6 1e       	adc	r14, r22
    2916:	f7 1e       	adc	r15, r23
    2918:	8c 0d       	add	r24, r12
    291a:	9d 1d       	adc	r25, r13
    291c:	ae 1d       	adc	r26, r14
    291e:	bf 1d       	adc	r27, r15
    2920:	75 01       	movw	r14, r10
    2922:	64 01       	movw	r12, r8
    2924:	0b 2e       	mov	r0, r27
    2926:	be e0       	ldi	r27, 0x0E	; 14
    2928:	cc 0c       	add	r12, r12
    292a:	dd 1c       	adc	r13, r13
    292c:	ee 1c       	adc	r14, r14
    292e:	ff 1c       	adc	r15, r15
    2930:	ba 95       	dec	r27
    2932:	d1 f7       	brne	.-12     	; 0x2928 <sha2_small_common_nextBlock+0x1e4>
    2934:	b0 2d       	mov	r27, r0
    2936:	b5 01       	movw	r22, r10
    2938:	a4 01       	movw	r20, r8
    293a:	03 2e       	mov	r0, r19
    293c:	32 e1       	ldi	r19, 0x12	; 18
    293e:	76 95       	lsr	r23
    2940:	67 95       	ror	r22
    2942:	57 95       	ror	r21
    2944:	47 95       	ror	r20
    2946:	3a 95       	dec	r19
    2948:	d1 f7       	brne	.-12     	; 0x293e <sha2_small_common_nextBlock+0x1fa>
    294a:	30 2d       	mov	r19, r0
    294c:	c4 2a       	or	r12, r20
    294e:	d5 2a       	or	r13, r21
    2950:	e6 2a       	or	r14, r22
    2952:	f7 2a       	or	r15, r23
    2954:	b5 01       	movw	r22, r10
    2956:	a4 01       	movw	r20, r8
    2958:	68 94       	set
    295a:	16 f8       	bld	r1, 6
    295c:	76 95       	lsr	r23
    295e:	67 95       	ror	r22
    2960:	57 95       	ror	r21
    2962:	47 95       	ror	r20
    2964:	16 94       	lsr	r1
    2966:	d1 f7       	brne	.-12     	; 0x295c <sha2_small_common_nextBlock+0x218>
    2968:	95 01       	movw	r18, r10
    296a:	84 01       	movw	r16, r8
    296c:	0f 2e       	mov	r0, r31
    296e:	f9 e1       	ldi	r31, 0x19	; 25
    2970:	00 0f       	add	r16, r16
    2972:	11 1f       	adc	r17, r17
    2974:	22 1f       	adc	r18, r18
    2976:	33 1f       	adc	r19, r19
    2978:	fa 95       	dec	r31
    297a:	d1 f7       	brne	.-12     	; 0x2970 <sha2_small_common_nextBlock+0x22c>
    297c:	f0 2d       	mov	r31, r0
    297e:	40 2b       	or	r20, r16
    2980:	51 2b       	or	r21, r17
    2982:	62 2b       	or	r22, r18
    2984:	73 2b       	or	r23, r19
    2986:	c4 26       	eor	r12, r20
    2988:	d5 26       	eor	r13, r21
    298a:	e6 26       	eor	r14, r22
    298c:	f7 26       	eor	r15, r23
    298e:	68 94       	set
    2990:	12 f8       	bld	r1, 2
    2992:	b6 94       	lsr	r11
    2994:	a7 94       	ror	r10
    2996:	97 94       	ror	r9
    2998:	87 94       	ror	r8
    299a:	16 94       	lsr	r1
    299c:	d1 f7       	brne	.-12     	; 0x2992 <sha2_small_common_nextBlock+0x24e>
    299e:	8c 24       	eor	r8, r12
    29a0:	9d 24       	eor	r9, r13
    29a2:	ae 24       	eor	r10, r14
    29a4:	bf 24       	eor	r11, r15
    29a6:	6c 01       	movw	r12, r24
    29a8:	7d 01       	movw	r14, r26
    29aa:	c8 0c       	add	r12, r8
    29ac:	d9 1c       	adc	r13, r9
    29ae:	ea 1c       	adc	r14, r10
    29b0:	fb 1c       	adc	r15, r11
			memmove(&(w[0]), &(w[1]), 15*4);
    29b2:	4c e3       	ldi	r20, 0x3C	; 60
    29b4:	50 e0       	ldi	r21, 0x00	; 0
    29b6:	be 01       	movw	r22, r28
    29b8:	6b 5f       	subi	r22, 0xFB	; 251
    29ba:	7f 4f       	sbci	r23, 0xFF	; 255
    29bc:	ce 01       	movw	r24, r28
    29be:	01 96       	adiw	r24, 0x01	; 1
    29c0:	78 d4       	rcall	.+2288   	; 0x32b2 <memmove>
			w[15] = wx;
    29c2:	21 96       	adiw	r28, 0x01	; 1
    29c4:	cc ae       	std	Y+60, r12	; 0x3c
    29c6:	dd ae       	std	Y+61, r13	; 0x3d
    29c8:	ee ae       	std	Y+62, r14	; 0x3e
    29ca:	ff ae       	std	Y+63, r15	; 0x3f
    29cc:	21 97       	sbiw	r28, 0x01	; 1
		}
		t1 = a[7] + SIGMA_1(a[4]) + CH(a[4],a[5],a[6]) + pgm_read_dword(&k[i]) + wx;
    29ce:	65 96       	adiw	r28, 0x15	; 21
    29d0:	8c ad       	ldd	r24, Y+60	; 0x3c
    29d2:	9d ad       	ldd	r25, Y+61	; 0x3d
    29d4:	ae ad       	ldd	r26, Y+62	; 0x3e
    29d6:	bf ad       	ldd	r27, Y+63	; 0x3f
    29d8:	65 97       	sbiw	r28, 0x15	; 21
    29da:	f1 01       	movw	r30, r2
    29dc:	25 91       	lpm	r18, Z+
    29de:	35 91       	lpm	r19, Z+
    29e0:	45 91       	lpm	r20, Z+
    29e2:	54 91       	lpm	r21, Z
    29e4:	a5 96       	adiw	r28, 0x25	; 37
    29e6:	2c af       	std	Y+60, r18	; 0x3c
    29e8:	3d af       	std	Y+61, r19	; 0x3d
    29ea:	4e af       	std	Y+62, r20	; 0x3e
    29ec:	5f af       	std	Y+63, r21	; 0x3f
    29ee:	a5 97       	sbiw	r28, 0x25	; 37
    29f0:	4c 01       	movw	r8, r24
    29f2:	5d 01       	movw	r10, r26
    29f4:	80 94       	com	r8
    29f6:	90 94       	com	r9
    29f8:	a0 94       	com	r10
    29fa:	b0 94       	com	r11
    29fc:	6d 96       	adiw	r28, 0x1d	; 29
    29fe:	4c ad       	ldd	r20, Y+60	; 0x3c
    2a00:	5d ad       	ldd	r21, Y+61	; 0x3d
    2a02:	6e ad       	ldd	r22, Y+62	; 0x3e
    2a04:	7f ad       	ldd	r23, Y+63	; 0x3f
    2a06:	6d 97       	sbiw	r28, 0x1d	; 29
    2a08:	84 22       	and	r8, r20
    2a0a:	95 22       	and	r9, r21
    2a0c:	a6 22       	and	r10, r22
    2a0e:	b7 22       	and	r11, r23
    2a10:	69 96       	adiw	r28, 0x19	; 25
    2a12:	4c ad       	ldd	r20, Y+60	; 0x3c
    2a14:	5d ad       	ldd	r21, Y+61	; 0x3d
    2a16:	6e ad       	ldd	r22, Y+62	; 0x3e
    2a18:	7f ad       	ldd	r23, Y+63	; 0x3f
    2a1a:	69 97       	sbiw	r28, 0x19	; 25
    2a1c:	8c 01       	movw	r16, r24
    2a1e:	9d 01       	movw	r18, r26
    2a20:	04 23       	and	r16, r20
    2a22:	15 23       	and	r17, r21
    2a24:	26 23       	and	r18, r22
    2a26:	37 23       	and	r19, r23
    2a28:	b5 01       	movw	r22, r10
    2a2a:	a4 01       	movw	r20, r8
    2a2c:	40 27       	eor	r20, r16
    2a2e:	51 27       	eor	r21, r17
    2a30:	62 27       	eor	r22, r18
    2a32:	73 27       	eor	r23, r19
    2a34:	4c 01       	movw	r8, r24
    2a36:	5d 01       	movw	r10, r26
    2a38:	07 2e       	mov	r0, r23
    2a3a:	7b e0       	ldi	r23, 0x0B	; 11
    2a3c:	b6 94       	lsr	r11
    2a3e:	a7 94       	ror	r10
    2a40:	97 94       	ror	r9
    2a42:	87 94       	ror	r8
    2a44:	7a 95       	dec	r23
    2a46:	d1 f7       	brne	.-12     	; 0x2a3c <sha2_small_common_nextBlock+0x2f8>
    2a48:	70 2d       	mov	r23, r0
    2a4a:	8c 01       	movw	r16, r24
    2a4c:	9d 01       	movw	r18, r26
    2a4e:	0f 2e       	mov	r0, r31
    2a50:	f5 e1       	ldi	r31, 0x15	; 21
    2a52:	00 0f       	add	r16, r16
    2a54:	11 1f       	adc	r17, r17
    2a56:	22 1f       	adc	r18, r18
    2a58:	33 1f       	adc	r19, r19
    2a5a:	fa 95       	dec	r31
    2a5c:	d1 f7       	brne	.-12     	; 0x2a52 <sha2_small_common_nextBlock+0x30e>
    2a5e:	f0 2d       	mov	r31, r0
    2a60:	80 2a       	or	r8, r16
    2a62:	91 2a       	or	r9, r17
    2a64:	a2 2a       	or	r10, r18
    2a66:	b3 2a       	or	r11, r19
    2a68:	2c 01       	movw	r4, r24
    2a6a:	3d 01       	movw	r6, r26
    2a6c:	68 94       	set
    2a6e:	15 f8       	bld	r1, 5
    2a70:	76 94       	lsr	r7
    2a72:	67 94       	ror	r6
    2a74:	57 94       	ror	r5
    2a76:	47 94       	ror	r4
    2a78:	16 94       	lsr	r1
    2a7a:	d1 f7       	brne	.-12     	; 0x2a70 <sha2_small_common_nextBlock+0x32c>
    2a7c:	8c 01       	movw	r16, r24
    2a7e:	9d 01       	movw	r18, r26
    2a80:	0f 2e       	mov	r0, r31
    2a82:	fa e1       	ldi	r31, 0x1A	; 26
    2a84:	00 0f       	add	r16, r16
    2a86:	11 1f       	adc	r17, r17
    2a88:	22 1f       	adc	r18, r18
    2a8a:	33 1f       	adc	r19, r19
    2a8c:	fa 95       	dec	r31
    2a8e:	d1 f7       	brne	.-12     	; 0x2a84 <sha2_small_common_nextBlock+0x340>
    2a90:	f0 2d       	mov	r31, r0
    2a92:	04 29       	or	r16, r4
    2a94:	15 29       	or	r17, r5
    2a96:	26 29       	or	r18, r6
    2a98:	37 29       	or	r19, r7
    2a9a:	08 25       	eor	r16, r8
    2a9c:	19 25       	eor	r17, r9
    2a9e:	2a 25       	eor	r18, r10
    2aa0:	3b 25       	eor	r19, r11
    2aa2:	4c 01       	movw	r8, r24
    2aa4:	5d 01       	movw	r10, r26
    2aa6:	88 0c       	add	r8, r8
    2aa8:	99 1c       	adc	r9, r9
    2aaa:	aa 1c       	adc	r10, r10
    2aac:	bb 1c       	adc	r11, r11
    2aae:	88 0c       	add	r8, r8
    2ab0:	99 1c       	adc	r9, r9
    2ab2:	aa 1c       	adc	r10, r10
    2ab4:	bb 1c       	adc	r11, r11
    2ab6:	88 0c       	add	r8, r8
    2ab8:	99 1c       	adc	r9, r9
    2aba:	aa 1c       	adc	r10, r10
    2abc:	bb 1c       	adc	r11, r11
    2abe:	88 0c       	add	r8, r8
    2ac0:	99 1c       	adc	r9, r9
    2ac2:	aa 1c       	adc	r10, r10
    2ac4:	bb 1c       	adc	r11, r11
    2ac6:	88 0c       	add	r8, r8
    2ac8:	99 1c       	adc	r9, r9
    2aca:	aa 1c       	adc	r10, r10
    2acc:	bb 1c       	adc	r11, r11
    2ace:	88 0c       	add	r8, r8
    2ad0:	99 1c       	adc	r9, r9
    2ad2:	aa 1c       	adc	r10, r10
    2ad4:	bb 1c       	adc	r11, r11
    2ad6:	88 0c       	add	r8, r8
    2ad8:	99 1c       	adc	r9, r9
    2ada:	aa 1c       	adc	r10, r10
    2adc:	bb 1c       	adc	r11, r11
    2ade:	07 2e       	mov	r0, r23
    2ae0:	79 e1       	ldi	r23, 0x19	; 25
    2ae2:	b6 95       	lsr	r27
    2ae4:	a7 95       	ror	r26
    2ae6:	97 95       	ror	r25
    2ae8:	87 95       	ror	r24
    2aea:	7a 95       	dec	r23
    2aec:	d1 f7       	brne	.-12     	; 0x2ae2 <sha2_small_common_nextBlock+0x39e>
    2aee:	70 2d       	mov	r23, r0
    2af0:	88 29       	or	r24, r8
    2af2:	99 29       	or	r25, r9
    2af4:	aa 29       	or	r26, r10
    2af6:	bb 29       	or	r27, r11
    2af8:	08 27       	eor	r16, r24
    2afa:	19 27       	eor	r17, r25
    2afc:	2a 27       	eor	r18, r26
    2afe:	3b 27       	eor	r19, r27
    2b00:	40 0f       	add	r20, r16
    2b02:	51 1f       	adc	r21, r17
    2b04:	62 1f       	adc	r22, r18
    2b06:	73 1f       	adc	r23, r19
    2b08:	a1 96       	adiw	r28, 0x21	; 33
    2b0a:	0c ad       	ldd	r16, Y+60	; 0x3c
    2b0c:	1d ad       	ldd	r17, Y+61	; 0x3d
    2b0e:	2e ad       	ldd	r18, Y+62	; 0x3e
    2b10:	3f ad       	ldd	r19, Y+63	; 0x3f
    2b12:	a1 97       	sbiw	r28, 0x21	; 33
    2b14:	40 0f       	add	r20, r16
    2b16:	51 1f       	adc	r21, r17
    2b18:	62 1f       	adc	r22, r18
    2b1a:	73 1f       	adc	r23, r19
    2b1c:	c4 0e       	add	r12, r20
    2b1e:	d5 1e       	adc	r13, r21
    2b20:	e6 1e       	adc	r14, r22
    2b22:	f7 1e       	adc	r15, r23
    2b24:	a5 96       	adiw	r28, 0x25	; 37
    2b26:	8c ad       	ldd	r24, Y+60	; 0x3c
    2b28:	9d ad       	ldd	r25, Y+61	; 0x3d
    2b2a:	ae ad       	ldd	r26, Y+62	; 0x3e
    2b2c:	bf ad       	ldd	r27, Y+63	; 0x3f
    2b2e:	a5 97       	sbiw	r28, 0x25	; 37
    2b30:	8c 0d       	add	r24, r12
    2b32:	9d 1d       	adc	r25, r13
    2b34:	ae 1d       	adc	r26, r14
    2b36:	bf 1d       	adc	r27, r15
    2b38:	a5 96       	adiw	r28, 0x25	; 37
    2b3a:	8c af       	std	Y+60, r24	; 0x3c
    2b3c:	9d af       	std	Y+61, r25	; 0x3d
    2b3e:	ae af       	std	Y+62, r26	; 0x3e
    2b40:	bf af       	std	Y+63, r27	; 0x3f
    2b42:	a5 97       	sbiw	r28, 0x25	; 37
		t2 = SIGMA_0(a[0]) + MAJ(a[0],a[1],a[2]);
    2b44:	25 96       	adiw	r28, 0x05	; 5
    2b46:	8c ac       	ldd	r8, Y+60	; 0x3c
    2b48:	9d ac       	ldd	r9, Y+61	; 0x3d
    2b4a:	ae ac       	ldd	r10, Y+62	; 0x3e
    2b4c:	bf ac       	ldd	r11, Y+63	; 0x3f
    2b4e:	25 97       	sbiw	r28, 0x05	; 5
    2b50:	29 96       	adiw	r28, 0x09	; 9
    2b52:	4c ac       	ldd	r4, Y+60	; 0x3c
    2b54:	5d ac       	ldd	r5, Y+61	; 0x3d
    2b56:	6e ac       	ldd	r6, Y+62	; 0x3e
    2b58:	7f ac       	ldd	r7, Y+63	; 0x3f
    2b5a:	29 97       	sbiw	r28, 0x09	; 9
    2b5c:	2d 96       	adiw	r28, 0x0d	; 13
    2b5e:	cc ac       	ldd	r12, Y+60	; 0x3c
    2b60:	dd ac       	ldd	r13, Y+61	; 0x3d
    2b62:	ee ac       	ldd	r14, Y+62	; 0x3e
    2b64:	ff ac       	ldd	r15, Y+63	; 0x3f
    2b66:	2d 97       	sbiw	r28, 0x0d	; 13
		memmove(&(a[1]), &(a[0]), 7*4); 	/* a[7]=a[6]; a[6]=a[5]; a[5]=a[4]; a[4]=a[3]; a[3]=a[2]; a[2]=a[1]; a[1]=a[0]; */
    2b68:	4c e1       	ldi	r20, 0x1C	; 28
    2b6a:	50 e0       	ldi	r21, 0x00	; 0
    2b6c:	be 01       	movw	r22, r28
    2b6e:	6f 5b       	subi	r22, 0xBF	; 191
    2b70:	7f 4f       	sbci	r23, 0xFF	; 255
    2b72:	aa 96       	adiw	r28, 0x2a	; 42
    2b74:	8e ad       	ldd	r24, Y+62	; 0x3e
    2b76:	9f ad       	ldd	r25, Y+63	; 0x3f
    2b78:	aa 97       	sbiw	r28, 0x2a	; 42
    2b7a:	9b d3       	rcall	.+1846   	; 0x32b2 <memmove>
		a[4] += t1;
    2b7c:	65 96       	adiw	r28, 0x15	; 21
    2b7e:	8c ad       	ldd	r24, Y+60	; 0x3c
    2b80:	9d ad       	ldd	r25, Y+61	; 0x3d
    2b82:	ae ad       	ldd	r26, Y+62	; 0x3e
    2b84:	bf ad       	ldd	r27, Y+63	; 0x3f
    2b86:	65 97       	sbiw	r28, 0x15	; 21
    2b88:	a5 96       	adiw	r28, 0x25	; 37
    2b8a:	2c ad       	ldd	r18, Y+60	; 0x3c
    2b8c:	3d ad       	ldd	r19, Y+61	; 0x3d
    2b8e:	4e ad       	ldd	r20, Y+62	; 0x3e
    2b90:	5f ad       	ldd	r21, Y+63	; 0x3f
    2b92:	a5 97       	sbiw	r28, 0x25	; 37
    2b94:	82 0f       	add	r24, r18
    2b96:	93 1f       	adc	r25, r19
    2b98:	a4 1f       	adc	r26, r20
    2b9a:	b5 1f       	adc	r27, r21
    2b9c:	65 96       	adiw	r28, 0x15	; 21
    2b9e:	8c af       	std	Y+60, r24	; 0x3c
    2ba0:	9d af       	std	Y+61, r25	; 0x3d
    2ba2:	ae af       	std	Y+62, r26	; 0x3e
    2ba4:	bf af       	std	Y+63, r27	; 0x3f
    2ba6:	65 97       	sbiw	r28, 0x15	; 21
		a[0] = t1 + t2;
    2ba8:	b5 01       	movw	r22, r10
    2baa:	a4 01       	movw	r20, r8
    2bac:	03 2e       	mov	r0, r19
    2bae:	3d e0       	ldi	r19, 0x0D	; 13
    2bb0:	76 95       	lsr	r23
    2bb2:	67 95       	ror	r22
    2bb4:	57 95       	ror	r21
    2bb6:	47 95       	ror	r20
    2bb8:	3a 95       	dec	r19
    2bba:	d1 f7       	brne	.-12     	; 0x2bb0 <sha2_small_common_nextBlock+0x46c>
    2bbc:	30 2d       	mov	r19, r0
    2bbe:	d5 01       	movw	r26, r10
    2bc0:	c4 01       	movw	r24, r8
    2bc2:	07 2e       	mov	r0, r23
    2bc4:	73 e1       	ldi	r23, 0x13	; 19
    2bc6:	88 0f       	add	r24, r24
    2bc8:	99 1f       	adc	r25, r25
    2bca:	aa 1f       	adc	r26, r26
    2bcc:	bb 1f       	adc	r27, r27
    2bce:	7a 95       	dec	r23
    2bd0:	d1 f7       	brne	.-12     	; 0x2bc6 <sha2_small_common_nextBlock+0x482>
    2bd2:	70 2d       	mov	r23, r0
    2bd4:	84 2b       	or	r24, r20
    2bd6:	95 2b       	or	r25, r21
    2bd8:	a6 2b       	or	r26, r22
    2bda:	b7 2b       	or	r27, r23
    2bdc:	b5 01       	movw	r22, r10
    2bde:	a4 01       	movw	r20, r8
    2be0:	76 95       	lsr	r23
    2be2:	67 95       	ror	r22
    2be4:	57 95       	ror	r21
    2be6:	47 95       	ror	r20
    2be8:	76 95       	lsr	r23
    2bea:	67 95       	ror	r22
    2bec:	57 95       	ror	r21
    2bee:	47 95       	ror	r20
    2bf0:	95 01       	movw	r18, r10
    2bf2:	84 01       	movw	r16, r8
    2bf4:	0f 2e       	mov	r0, r31
    2bf6:	fe e1       	ldi	r31, 0x1E	; 30
    2bf8:	00 0f       	add	r16, r16
    2bfa:	11 1f       	adc	r17, r17
    2bfc:	22 1f       	adc	r18, r18
    2bfe:	33 1f       	adc	r19, r19
    2c00:	fa 95       	dec	r31
    2c02:	d1 f7       	brne	.-12     	; 0x2bf8 <sha2_small_common_nextBlock+0x4b4>
    2c04:	f0 2d       	mov	r31, r0
    2c06:	40 2b       	or	r20, r16
    2c08:	51 2b       	or	r21, r17
    2c0a:	62 2b       	or	r22, r18
    2c0c:	73 2b       	or	r23, r19
    2c0e:	48 27       	eor	r20, r24
    2c10:	59 27       	eor	r21, r25
    2c12:	6a 27       	eor	r22, r26
    2c14:	7b 27       	eor	r23, r27
    2c16:	95 01       	movw	r18, r10
    2c18:	84 01       	movw	r16, r8
    2c1a:	0f 2e       	mov	r0, r31
    2c1c:	fa e0       	ldi	r31, 0x0A	; 10
    2c1e:	00 0f       	add	r16, r16
    2c20:	11 1f       	adc	r17, r17
    2c22:	22 1f       	adc	r18, r18
    2c24:	33 1f       	adc	r19, r19
    2c26:	fa 95       	dec	r31
    2c28:	d1 f7       	brne	.-12     	; 0x2c1e <sha2_small_common_nextBlock+0x4da>
    2c2a:	f0 2d       	mov	r31, r0
    2c2c:	d5 01       	movw	r26, r10
    2c2e:	c4 01       	movw	r24, r8
    2c30:	07 2e       	mov	r0, r23
    2c32:	76 e1       	ldi	r23, 0x16	; 22
    2c34:	b6 95       	lsr	r27
    2c36:	a7 95       	ror	r26
    2c38:	97 95       	ror	r25
    2c3a:	87 95       	ror	r24
    2c3c:	7a 95       	dec	r23
    2c3e:	d1 f7       	brne	.-12     	; 0x2c34 <sha2_small_common_nextBlock+0x4f0>
    2c40:	70 2d       	mov	r23, r0
    2c42:	80 2b       	or	r24, r16
    2c44:	91 2b       	or	r25, r17
    2c46:	a2 2b       	or	r26, r18
    2c48:	b3 2b       	or	r27, r19
    2c4a:	48 27       	eor	r20, r24
    2c4c:	59 27       	eor	r21, r25
    2c4e:	6a 27       	eor	r22, r26
    2c50:	7b 27       	eor	r23, r27
    2c52:	97 01       	movw	r18, r14
    2c54:	86 01       	movw	r16, r12
    2c56:	04 25       	eor	r16, r4
    2c58:	15 25       	eor	r17, r5
    2c5a:	26 25       	eor	r18, r6
    2c5c:	37 25       	eor	r19, r7
    2c5e:	80 22       	and	r8, r16
    2c60:	91 22       	and	r9, r17
    2c62:	a2 22       	and	r10, r18
    2c64:	b3 22       	and	r11, r19
    2c66:	c4 20       	and	r12, r4
    2c68:	d5 20       	and	r13, r5
    2c6a:	e6 20       	and	r14, r6
    2c6c:	f7 20       	and	r15, r7
    2c6e:	95 01       	movw	r18, r10
    2c70:	84 01       	movw	r16, r8
    2c72:	0c 25       	eor	r16, r12
    2c74:	1d 25       	eor	r17, r13
    2c76:	2e 25       	eor	r18, r14
    2c78:	3f 25       	eor	r19, r15
    2c7a:	40 0f       	add	r20, r16
    2c7c:	51 1f       	adc	r21, r17
    2c7e:	62 1f       	adc	r22, r18
    2c80:	73 1f       	adc	r23, r19
    2c82:	a5 96       	adiw	r28, 0x25	; 37
    2c84:	8c ad       	ldd	r24, Y+60	; 0x3c
    2c86:	9d ad       	ldd	r25, Y+61	; 0x3d
    2c88:	ae ad       	ldd	r26, Y+62	; 0x3e
    2c8a:	bf ad       	ldd	r27, Y+63	; 0x3f
    2c8c:	a5 97       	sbiw	r28, 0x25	; 37
    2c8e:	48 0f       	add	r20, r24
    2c90:	59 1f       	adc	r21, r25
    2c92:	6a 1f       	adc	r22, r26
    2c94:	7b 1f       	adc	r23, r27
    2c96:	25 96       	adiw	r28, 0x05	; 5
    2c98:	4c af       	std	Y+60, r20	; 0x3c
    2c9a:	5d af       	std	Y+61, r21	; 0x3d
    2c9c:	6e af       	std	Y+62, r22	; 0x3e
    2c9e:	7f af       	std	Y+63, r23	; 0x3f
    2ca0:	25 97       	sbiw	r28, 0x05	; 5
*/
/* init working variables */
	memcpy((void*)a,(void*)(state->h), 8*4);

/* do the, fun stuff, */
	for (i=0; i<64; ++i){
    2ca2:	a6 96       	adiw	r28, 0x26	; 38
    2ca4:	9f ad       	ldd	r25, Y+63	; 0x3f
    2ca6:	a6 97       	sbiw	r28, 0x26	; 38
    2ca8:	9f 5f       	subi	r25, 0xFF	; 255
    2caa:	a6 96       	adiw	r28, 0x26	; 38
    2cac:	9f af       	std	Y+63, r25	; 0x3f
    2cae:	a6 97       	sbiw	r28, 0x26	; 38
    2cb0:	a4 e0       	ldi	r26, 0x04	; 4
    2cb2:	2a 0e       	add	r2, r26
    2cb4:	31 1c       	adc	r3, r1
    2cb6:	a8 96       	adiw	r28, 0x28	; 40
    2cb8:	ee ad       	ldd	r30, Y+62	; 0x3e
    2cba:	ff ad       	ldd	r31, Y+63	; 0x3f
    2cbc:	a8 97       	sbiw	r28, 0x28	; 40
    2cbe:	34 96       	adiw	r30, 0x04	; 4
    2cc0:	a8 96       	adiw	r28, 0x28	; 40
    2cc2:	ff af       	std	Y+63, r31	; 0x3f
    2cc4:	ee af       	std	Y+62, r30	; 0x3e
    2cc6:	a8 97       	sbiw	r28, 0x28	; 40
    2cc8:	90 34       	cpi	r25, 0x40	; 64
    2cca:	09 f0       	breq	.+2      	; 0x2cce <sha2_small_common_nextBlock+0x58a>
    2ccc:	ba cd       	rjmp	.-1164   	; 0x2842 <sha2_small_common_nextBlock+0xfe>
    2cce:	fe 01       	movw	r30, r28
    2cd0:	ef 5b       	subi	r30, 0xBF	; 191
    2cd2:	ff 4f       	sbci	r31, 0xFF	; 255
    2cd4:	ac 96       	adiw	r28, 0x2c	; 44
    2cd6:	2e ad       	ldd	r18, Y+62	; 0x3e
    2cd8:	3f ad       	ldd	r19, Y+63	; 0x3f
    2cda:	ac 97       	sbiw	r28, 0x2c	; 44
    2cdc:	af 01       	movw	r20, r30
    2cde:	40 5e       	subi	r20, 0xE0	; 224
    2ce0:	5f 4f       	sbci	r21, 0xFF	; 255
    2ce2:	bf 01       	movw	r22, r30
		a[0] = t1 + t2;
	}

/* update, the, state, */
	for (i=0; i<8; ++i){
		state->h[i] += a[i];
    2ce4:	fb 01       	movw	r30, r22
    2ce6:	81 91       	ld	r24, Z+
    2ce8:	91 91       	ld	r25, Z+
    2cea:	a1 91       	ld	r26, Z+
    2cec:	b1 91       	ld	r27, Z+
    2cee:	bf 01       	movw	r22, r30
    2cf0:	f9 01       	movw	r30, r18
    2cf2:	c0 80       	ld	r12, Z
    2cf4:	d1 80       	ldd	r13, Z+1	; 0x01
    2cf6:	e2 80       	ldd	r14, Z+2	; 0x02
    2cf8:	f3 80       	ldd	r15, Z+3	; 0x03
    2cfa:	8c 0d       	add	r24, r12
    2cfc:	9d 1d       	adc	r25, r13
    2cfe:	ae 1d       	adc	r26, r14
    2d00:	bf 1d       	adc	r27, r15
    2d02:	81 93       	st	Z+, r24
    2d04:	91 93       	st	Z+, r25
    2d06:	a1 93       	st	Z+, r26
    2d08:	b1 93       	st	Z+, r27
    2d0a:	9f 01       	movw	r18, r30
		a[4] += t1;
		a[0] = t1 + t2;
	}

/* update, the, state, */
	for (i=0; i<8; ++i){
    2d0c:	64 17       	cp	r22, r20
    2d0e:	75 07       	cpc	r23, r21
    2d10:	49 f7       	brne	.-46     	; 0x2ce4 <sha2_small_common_nextBlock+0x5a0>
		state->h[i] += a[i];
	}
	state->length += 1;
    2d12:	ac 96       	adiw	r28, 0x2c	; 44
    2d14:	ee ad       	ldd	r30, Y+62	; 0x3e
    2d16:	ff ad       	ldd	r31, Y+63	; 0x3f
    2d18:	ac 97       	sbiw	r28, 0x2c	; 44
    2d1a:	80 a1       	ldd	r24, Z+32	; 0x20
    2d1c:	91 a1       	ldd	r25, Z+33	; 0x21
    2d1e:	a2 a1       	ldd	r26, Z+34	; 0x22
    2d20:	b3 a1       	ldd	r27, Z+35	; 0x23
    2d22:	01 96       	adiw	r24, 0x01	; 1
    2d24:	a1 1d       	adc	r26, r1
    2d26:	b1 1d       	adc	r27, r1
    2d28:	80 a3       	std	Z+32, r24	; 0x20
    2d2a:	91 a3       	std	Z+33, r25	; 0x21
    2d2c:	a2 a3       	std	Z+34, r26	; 0x22
    2d2e:	b3 a3       	std	Z+35, r27	; 0x23
}
    2d30:	c5 59       	subi	r28, 0x95	; 149
    2d32:	df 4f       	sbci	r29, 0xFF	; 255
    2d34:	0f b6       	in	r0, 0x3f	; 63
    2d36:	f8 94       	cli
    2d38:	de bf       	out	0x3e, r29	; 62
    2d3a:	0f be       	out	0x3f, r0	; 63
    2d3c:	cd bf       	out	0x3d, r28	; 61
    2d3e:	df 91       	pop	r29
    2d40:	cf 91       	pop	r28
    2d42:	1f 91       	pop	r17
    2d44:	0f 91       	pop	r16
    2d46:	ff 90       	pop	r15
    2d48:	ef 90       	pop	r14
    2d4a:	df 90       	pop	r13
    2d4c:	cf 90       	pop	r12
    2d4e:	bf 90       	pop	r11
    2d50:	af 90       	pop	r10
    2d52:	9f 90       	pop	r9
    2d54:	8f 90       	pop	r8
    2d56:	7f 90       	pop	r7
    2d58:	6f 90       	pop	r6
    2d5a:	5f 90       	pop	r5
    2d5c:	4f 90       	pop	r4
    2d5e:	3f 90       	pop	r3
    2d60:	2f 90       	pop	r2
    2d62:	08 95       	ret

00002d64 <sha2_small_common_lastBlock>:


void sha2_small_common_lastBlock(sha2_small_common_ctx_t *state, const void *block, uint16_t length_b){
    2d64:	8f 92       	push	r8
    2d66:	9f 92       	push	r9
    2d68:	af 92       	push	r10
    2d6a:	bf 92       	push	r11
    2d6c:	cf 92       	push	r12
    2d6e:	df 92       	push	r13
    2d70:	ef 92       	push	r14
    2d72:	ff 92       	push	r15
    2d74:	0f 93       	push	r16
    2d76:	1f 93       	push	r17
    2d78:	cf 93       	push	r28
    2d7a:	df 93       	push	r29
    2d7c:	cd b7       	in	r28, 0x3d	; 61
    2d7e:	de b7       	in	r29, 0x3e	; 62
    2d80:	c8 54       	subi	r28, 0x48	; 72
    2d82:	d1 09       	sbc	r29, r1
    2d84:	0f b6       	in	r0, 0x3f	; 63
    2d86:	f8 94       	cli
    2d88:	de bf       	out	0x3e, r29	; 62
    2d8a:	0f be       	out	0x3f, r0	; 63
    2d8c:	cd bf       	out	0x3d, r28	; 61
    2d8e:	8c 01       	movw	r16, r24
    2d90:	4b 01       	movw	r8, r22
    2d92:	5a 01       	movw	r10, r20
	uint8_t lb[512/8]; /* local block */
	uint64_t len;
	while(length_b>=512){
    2d94:	41 15       	cp	r20, r1
    2d96:	62 e0       	ldi	r22, 0x02	; 2
    2d98:	56 07       	cpc	r21, r22
    2d9a:	28 f1       	brcs	.+74     	; 0x2de6 <sha2_small_common_lastBlock+0x82>
    2d9c:	6a 01       	movw	r12, r20
    2d9e:	74 01       	movw	r14, r8
		sha2_small_common_nextBlock(state, block);
    2da0:	b7 01       	movw	r22, r14
    2da2:	c8 01       	movw	r24, r16
    2da4:	cf dc       	rcall	.-1634   	; 0x2744 <sha2_small_common_nextBlock>
		length_b -= 512;
    2da6:	72 e0       	ldi	r23, 0x02	; 2
    2da8:	d7 1a       	sub	r13, r23
		block = (uint8_t*)block+64;
    2daa:	80 e4       	ldi	r24, 0x40	; 64
    2dac:	e8 0e       	add	r14, r24
    2dae:	f1 1c       	adc	r15, r1


void sha2_small_common_lastBlock(sha2_small_common_ctx_t *state, const void *block, uint16_t length_b){
	uint8_t lb[512/8]; /* local block */
	uint64_t len;
	while(length_b>=512){
    2db0:	c1 14       	cp	r12, r1
    2db2:	92 e0       	ldi	r25, 0x02	; 2
    2db4:	d9 06       	cpc	r13, r25
    2db6:	a0 f7       	brcc	.-24     	; 0x2da0 <sha2_small_common_lastBlock+0x3c>
    2db8:	75 01       	movw	r14, r10
    2dba:	e1 e0       	ldi	r30, 0x01	; 1
    2dbc:	fe 22       	and	r15, r30
    2dbe:	f2 e0       	ldi	r31, 0x02	; 2
    2dc0:	bf 1a       	sub	r11, r31
    2dc2:	ab 2c       	mov	r10, r11
    2dc4:	bb 24       	eor	r11, r11
    2dc6:	a6 94       	lsr	r10
    2dc8:	6f ef       	ldi	r22, 0xFF	; 255
    2dca:	a6 1a       	sub	r10, r22
    2dcc:	b6 0a       	sbc	r11, r22
    2dce:	00 24       	eor	r0, r0
    2dd0:	b6 94       	lsr	r11
    2dd2:	a7 94       	ror	r10
    2dd4:	07 94       	ror	r0
    2dd6:	b6 94       	lsr	r11
    2dd8:	a7 94       	ror	r10
    2dda:	07 94       	ror	r0
    2ddc:	ba 2c       	mov	r11, r10
    2dde:	a0 2c       	mov	r10, r0
    2de0:	8a 0c       	add	r8, r10
    2de2:	9b 1c       	adc	r9, r11
    2de4:	01 c0       	rjmp	.+2      	; 0x2de8 <sha2_small_common_lastBlock+0x84>
    2de6:	7a 01       	movw	r14, r20
		sha2_small_common_nextBlock(state, block);
		length_b -= 512;
		block = (uint8_t*)block+64;
	}
	len = state->length*512 + length_b;
    2de8:	f8 01       	movw	r30, r16
    2dea:	80 a1       	ldd	r24, Z+32	; 0x20
    2dec:	91 a1       	ldd	r25, Z+33	; 0x21
    2dee:	a2 a1       	ldd	r26, Z+34	; 0x22
    2df0:	b3 a1       	ldd	r27, Z+35	; 0x23
    2df2:	07 2e       	mov	r0, r23
    2df4:	79 e0       	ldi	r23, 0x09	; 9
    2df6:	88 0f       	add	r24, r24
    2df8:	99 1f       	adc	r25, r25
    2dfa:	aa 1f       	adc	r26, r26
    2dfc:	bb 1f       	adc	r27, r27
    2dfe:	7a 95       	dec	r23
    2e00:	d1 f7       	brne	.-12     	; 0x2df6 <sha2_small_common_lastBlock+0x92>
    2e02:	70 2d       	mov	r23, r0
    2e04:	8e 0d       	add	r24, r14
    2e06:	9f 1d       	adc	r25, r15
    2e08:	a1 1d       	adc	r26, r1
    2e0a:	b1 1d       	adc	r27, r1
    2e0c:	9c 01       	movw	r18, r24
    2e0e:	ad 01       	movw	r20, r26
    2e10:	22 96       	adiw	r28, 0x02	; 2
    2e12:	2f af       	std	Y+63, r18	; 0x3f
    2e14:	22 97       	sbiw	r28, 0x02	; 2
    2e16:	23 96       	adiw	r28, 0x03	; 3
    2e18:	3f af       	std	Y+63, r19	; 0x3f
    2e1a:	23 97       	sbiw	r28, 0x03	; 3
    2e1c:	24 96       	adiw	r28, 0x04	; 4
    2e1e:	4f af       	std	Y+63, r20	; 0x3f
    2e20:	24 97       	sbiw	r28, 0x04	; 4
    2e22:	25 96       	adiw	r28, 0x05	; 5
    2e24:	5f af       	std	Y+63, r21	; 0x3f
    2e26:	25 97       	sbiw	r28, 0x05	; 5
    2e28:	26 96       	adiw	r28, 0x06	; 6
    2e2a:	1f ae       	std	Y+63, r1	; 0x3f
    2e2c:	26 97       	sbiw	r28, 0x06	; 6
    2e2e:	27 96       	adiw	r28, 0x07	; 7
    2e30:	1f ae       	std	Y+63, r1	; 0x3f
    2e32:	27 97       	sbiw	r28, 0x07	; 7
    2e34:	28 96       	adiw	r28, 0x08	; 8
    2e36:	1f ae       	std	Y+63, r1	; 0x3f
    2e38:	28 97       	sbiw	r28, 0x08	; 8
    2e3a:	29 96       	adiw	r28, 0x09	; 9
    2e3c:	1f ae       	std	Y+63, r1	; 0x3f
    2e3e:	29 97       	sbiw	r28, 0x09	; 9
	memset(lb, 0, 64);
    2e40:	be 01       	movw	r22, r28
    2e42:	6f 5f       	subi	r22, 0xFF	; 255
    2e44:	7f 4f       	sbci	r23, 0xFF	; 255
    2e46:	6b 01       	movw	r12, r22
    2e48:	80 e4       	ldi	r24, 0x40	; 64
    2e4a:	fb 01       	movw	r30, r22
    2e4c:	11 92       	st	Z+, r1
    2e4e:	8a 95       	dec	r24
    2e50:	e9 f7       	brne	.-6      	; 0x2e4c <sha2_small_common_lastBlock+0xe8>
	memcpy(lb, block, (length_b+7)/8);
    2e52:	a7 01       	movw	r20, r14
    2e54:	49 5f       	subi	r20, 0xF9	; 249
    2e56:	5f 4f       	sbci	r21, 0xFF	; 255
    2e58:	56 95       	lsr	r21
    2e5a:	47 95       	ror	r20
    2e5c:	56 95       	lsr	r21
    2e5e:	47 95       	ror	r20
    2e60:	56 95       	lsr	r21
    2e62:	47 95       	ror	r20
    2e64:	b4 01       	movw	r22, r8
    2e66:	c6 01       	movw	r24, r12
    2e68:	1b d2       	rcall	.+1078   	; 0x32a0 <memcpy>

	/* set the final one bit */
	lb[length_b/8] |= 0x80>>(length_b & 0x7);
    2e6a:	f7 01       	movw	r30, r14
    2e6c:	f6 95       	lsr	r31
    2e6e:	e7 95       	ror	r30
    2e70:	f6 95       	lsr	r31
    2e72:	e7 95       	ror	r30
    2e74:	f6 95       	lsr	r31
    2e76:	e7 95       	ror	r30
    2e78:	ec 0d       	add	r30, r12
    2e7a:	fd 1d       	adc	r31, r13
    2e7c:	c7 01       	movw	r24, r14
    2e7e:	87 70       	andi	r24, 0x07	; 7
    2e80:	99 27       	eor	r25, r25
    2e82:	20 e8       	ldi	r18, 0x80	; 128
    2e84:	30 e0       	ldi	r19, 0x00	; 0
    2e86:	02 c0       	rjmp	.+4      	; 0x2e8c <sha2_small_common_lastBlock+0x128>
    2e88:	35 95       	asr	r19
    2e8a:	27 95       	ror	r18
    2e8c:	8a 95       	dec	r24
    2e8e:	e2 f7       	brpl	.-8      	; 0x2e88 <sha2_small_common_lastBlock+0x124>
    2e90:	80 81       	ld	r24, Z
    2e92:	28 2b       	or	r18, r24
    2e94:	20 83       	st	Z, r18
	/* pad with zeros */
	if (length_b>=512-64){ /* not enouth space for 64bit length value */
    2e96:	f0 ec       	ldi	r31, 0xC0	; 192
    2e98:	ef 16       	cp	r14, r31
    2e9a:	f1 e0       	ldi	r31, 0x01	; 1
    2e9c:	ff 06       	cpc	r15, r31
    2e9e:	40 f0       	brcs	.+16     	; 0x2eb0 <sha2_small_common_lastBlock+0x14c>
		sha2_small_common_nextBlock(state, lb);
    2ea0:	b6 01       	movw	r22, r12
    2ea2:	c8 01       	movw	r24, r16
    2ea4:	4f dc       	rcall	.-1890   	; 0x2744 <sha2_small_common_nextBlock>
		memset(lb, 0, 64);
    2ea6:	80 e4       	ldi	r24, 0x40	; 64
    2ea8:	f6 01       	movw	r30, r12
    2eaa:	11 92       	st	Z+, r1
    2eac:	8a 95       	dec	r24
    2eae:	e9 f7       	brne	.-6      	; 0x2eaa <sha2_small_common_lastBlock+0x146>


void sha2_small_common_lastBlock(sha2_small_common_ctx_t *state, const void *block, uint16_t length_b){
	uint8_t lb[512/8]; /* local block */
	uint64_t len;
	while(length_b>=512){
    2eb0:	27 e0       	ldi	r18, 0x07	; 7
#if defined LITTLE_ENDIAN
	 	/* this is now rolled up */
	uint8_t i;
	i=7;
	do{
		lb[63-i] = ((uint8_t*)&len)[i];
    2eb2:	4f e3       	ldi	r20, 0x3F	; 63
    2eb4:	50 e0       	ldi	r21, 0x00	; 0
    2eb6:	82 2f       	mov	r24, r18
    2eb8:	90 e0       	ldi	r25, 0x00	; 0
    2eba:	fa 01       	movw	r30, r20
    2ebc:	e8 1b       	sub	r30, r24
    2ebe:	f9 0b       	sbc	r31, r25
    2ec0:	61 e0       	ldi	r22, 0x01	; 1
    2ec2:	70 e0       	ldi	r23, 0x00	; 0
    2ec4:	6c 0f       	add	r22, r28
    2ec6:	7d 1f       	adc	r23, r29
    2ec8:	e6 0f       	add	r30, r22
    2eca:	f7 1f       	adc	r31, r23
    2ecc:	a1 e4       	ldi	r26, 0x41	; 65
    2ece:	b0 e0       	ldi	r27, 0x00	; 0
    2ed0:	ac 0f       	add	r26, r28
    2ed2:	bd 1f       	adc	r27, r29
    2ed4:	a8 0f       	add	r26, r24
    2ed6:	b9 1f       	adc	r27, r25
    2ed8:	8c 91       	ld	r24, X
    2eda:	80 83       	st	Z, r24
	}while(i--);
    2edc:	21 50       	subi	r18, 0x01	; 1
    2ede:	58 f7       	brcc	.-42     	; 0x2eb6 <sha2_small_common_lastBlock+0x152>
#elif defined BIG_ENDIAN
	*((uint64_t)&(lb[56])) = len;
#endif
	sha2_small_common_nextBlock(state, lb);
    2ee0:	be 01       	movw	r22, r28
    2ee2:	6f 5f       	subi	r22, 0xFF	; 255
    2ee4:	7f 4f       	sbci	r23, 0xFF	; 255
    2ee6:	c8 01       	movw	r24, r16
    2ee8:	2d dc       	rcall	.-1958   	; 0x2744 <sha2_small_common_nextBlock>
}
    2eea:	c8 5b       	subi	r28, 0xB8	; 184
    2eec:	df 4f       	sbci	r29, 0xFF	; 255
    2eee:	0f b6       	in	r0, 0x3f	; 63
    2ef0:	f8 94       	cli
    2ef2:	de bf       	out	0x3e, r29	; 62
    2ef4:	0f be       	out	0x3f, r0	; 63
    2ef6:	cd bf       	out	0x3d, r28	; 61
    2ef8:	df 91       	pop	r29
    2efa:	cf 91       	pop	r28
    2efc:	1f 91       	pop	r17
    2efe:	0f 91       	pop	r16
    2f00:	ff 90       	pop	r15
    2f02:	ef 90       	pop	r14
    2f04:	df 90       	pop	r13
    2f06:	cf 90       	pop	r12
    2f08:	bf 90       	pop	r11
    2f0a:	af 90       	pop	r10
    2f0c:	9f 90       	pop	r9
    2f0e:	8f 90       	pop	r8
    2f10:	08 95       	ret

00002f12 <uart_init>:
#include <avr/io.h>
#include <string.h>
#include "uart_f.h"

void uart_init(){
	UBRR0H = (BAUD_PRESCALE >> 8); // Load upper 8-bits of the baud rate value into the high byte of the UBRR register
    2f12:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
	UBRR0L = BAUD_PRESCALE; // Load lower 8-bits of the baud rate value into the low byte of the UBRR register
    2f16:	83 e3       	ldi	r24, 0x33	; 51
    2f18:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
	UCSR0C = (0<<UMSEL0) | (0<<UPM0) | (1<<USBS0) | (3<<UCSZ0);
    2f1c:	8e e0       	ldi	r24, 0x0E	; 14
    2f1e:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>
	UCSR0B = (1<<RXEN0) | (1<<TXEN0);
    2f22:	88 e1       	ldi	r24, 0x18	; 24
    2f24:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
    2f28:	08 95       	ret

00002f2a <uart_puts>:
}

void uart_puts(char* s){
    2f2a:	cf 93       	push	r28
    2f2c:	df 93       	push	r29
	int i;
	int len = strlen(s);
    2f2e:	fc 01       	movw	r30, r24
    2f30:	01 90       	ld	r0, Z+
    2f32:	00 20       	and	r0, r0
    2f34:	e9 f7       	brne	.-6      	; 0x2f30 <uart_puts+0x6>
    2f36:	31 97       	sbiw	r30, 0x01	; 1
    2f38:	e8 1b       	sub	r30, r24
    2f3a:	f9 0b       	sbc	r31, r25
	for (i = 0; i < len; i++){
    2f3c:	1e 16       	cp	r1, r30
    2f3e:	1f 06       	cpc	r1, r31
    2f40:	84 f4       	brge	.+32     	; 0x2f62 <uart_puts+0x38>
    2f42:	dc 01       	movw	r26, r24
    2f44:	9c 01       	movw	r18, r24
    2f46:	2e 0f       	add	r18, r30
    2f48:	3f 1f       	adc	r19, r31
		while(!( UCSR0A & 0X20));
    2f4a:	e0 ec       	ldi	r30, 0xC0	; 192
    2f4c:	f0 e0       	ldi	r31, 0x00	; 0
		UDR0=s[i];
    2f4e:	c6 ec       	ldi	r28, 0xC6	; 198
    2f50:	d0 e0       	ldi	r29, 0x00	; 0

void uart_puts(char* s){
	int i;
	int len = strlen(s);
	for (i = 0; i < len; i++){
		while(!( UCSR0A & 0X20));
    2f52:	90 81       	ld	r25, Z
    2f54:	95 ff       	sbrs	r25, 5
    2f56:	fd cf       	rjmp	.-6      	; 0x2f52 <uart_puts+0x28>
		UDR0=s[i];
    2f58:	9d 91       	ld	r25, X+
    2f5a:	98 83       	st	Y, r25
}

void uart_puts(char* s){
	int i;
	int len = strlen(s);
	for (i = 0; i < len; i++){
    2f5c:	a2 17       	cp	r26, r18
    2f5e:	b3 07       	cpc	r27, r19
    2f60:	c1 f7       	brne	.-16     	; 0x2f52 <uart_puts+0x28>
		while(!( UCSR0A & 0X20));
		UDR0=s[i];
	}
	while(!( UCSR0A & 0X20));
    2f62:	e0 ec       	ldi	r30, 0xC0	; 192
    2f64:	f0 e0       	ldi	r31, 0x00	; 0
    2f66:	80 81       	ld	r24, Z
    2f68:	85 ff       	sbrs	r24, 5
    2f6a:	fd cf       	rjmp	.-6      	; 0x2f66 <uart_puts+0x3c>
	UDR0 = 13;
    2f6c:	8d e0       	ldi	r24, 0x0D	; 13
    2f6e:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
	while(!( UCSR0A & 0X20));
    2f72:	e0 ec       	ldi	r30, 0xC0	; 192
    2f74:	f0 e0       	ldi	r31, 0x00	; 0
    2f76:	80 81       	ld	r24, Z
    2f78:	85 ff       	sbrs	r24, 5
    2f7a:	fd cf       	rjmp	.-6      	; 0x2f76 <uart_puts+0x4c>
	UDR0 = 10;
    2f7c:	8a e0       	ldi	r24, 0x0A	; 10
    2f7e:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
}
    2f82:	df 91       	pop	r29
    2f84:	cf 91       	pop	r28
    2f86:	08 95       	ret

00002f88 <malloc>:
    2f88:	0f 93       	push	r16
    2f8a:	1f 93       	push	r17
    2f8c:	cf 93       	push	r28
    2f8e:	df 93       	push	r29
    2f90:	82 30       	cpi	r24, 0x02	; 2
    2f92:	91 05       	cpc	r25, r1
    2f94:	10 f4       	brcc	.+4      	; 0x2f9a <malloc+0x12>
    2f96:	82 e0       	ldi	r24, 0x02	; 2
    2f98:	90 e0       	ldi	r25, 0x00	; 0
    2f9a:	e0 91 82 02 	lds	r30, 0x0282	; 0x800282 <__flp>
    2f9e:	f0 91 83 02 	lds	r31, 0x0283	; 0x800283 <__flp+0x1>
    2fa2:	20 e0       	ldi	r18, 0x00	; 0
    2fa4:	30 e0       	ldi	r19, 0x00	; 0
    2fa6:	a0 e0       	ldi	r26, 0x00	; 0
    2fa8:	b0 e0       	ldi	r27, 0x00	; 0
    2faa:	30 97       	sbiw	r30, 0x00	; 0
    2fac:	19 f1       	breq	.+70     	; 0x2ff4 <malloc+0x6c>
    2fae:	40 81       	ld	r20, Z
    2fb0:	51 81       	ldd	r21, Z+1	; 0x01
    2fb2:	02 81       	ldd	r16, Z+2	; 0x02
    2fb4:	13 81       	ldd	r17, Z+3	; 0x03
    2fb6:	48 17       	cp	r20, r24
    2fb8:	59 07       	cpc	r21, r25
    2fba:	c8 f0       	brcs	.+50     	; 0x2fee <malloc+0x66>
    2fbc:	84 17       	cp	r24, r20
    2fbe:	95 07       	cpc	r25, r21
    2fc0:	69 f4       	brne	.+26     	; 0x2fdc <malloc+0x54>
    2fc2:	10 97       	sbiw	r26, 0x00	; 0
    2fc4:	31 f0       	breq	.+12     	; 0x2fd2 <malloc+0x4a>
    2fc6:	12 96       	adiw	r26, 0x02	; 2
    2fc8:	0c 93       	st	X, r16
    2fca:	12 97       	sbiw	r26, 0x02	; 2
    2fcc:	13 96       	adiw	r26, 0x03	; 3
    2fce:	1c 93       	st	X, r17
    2fd0:	27 c0       	rjmp	.+78     	; 0x3020 <malloc+0x98>
    2fd2:	00 93 82 02 	sts	0x0282, r16	; 0x800282 <__flp>
    2fd6:	10 93 83 02 	sts	0x0283, r17	; 0x800283 <__flp+0x1>
    2fda:	22 c0       	rjmp	.+68     	; 0x3020 <malloc+0x98>
    2fdc:	21 15       	cp	r18, r1
    2fde:	31 05       	cpc	r19, r1
    2fe0:	19 f0       	breq	.+6      	; 0x2fe8 <malloc+0x60>
    2fe2:	42 17       	cp	r20, r18
    2fe4:	53 07       	cpc	r21, r19
    2fe6:	18 f4       	brcc	.+6      	; 0x2fee <malloc+0x66>
    2fe8:	9a 01       	movw	r18, r20
    2fea:	bd 01       	movw	r22, r26
    2fec:	ef 01       	movw	r28, r30
    2fee:	df 01       	movw	r26, r30
    2ff0:	f8 01       	movw	r30, r16
    2ff2:	db cf       	rjmp	.-74     	; 0x2faa <malloc+0x22>
    2ff4:	21 15       	cp	r18, r1
    2ff6:	31 05       	cpc	r19, r1
    2ff8:	f9 f0       	breq	.+62     	; 0x3038 <malloc+0xb0>
    2ffa:	28 1b       	sub	r18, r24
    2ffc:	39 0b       	sbc	r19, r25
    2ffe:	24 30       	cpi	r18, 0x04	; 4
    3000:	31 05       	cpc	r19, r1
    3002:	80 f4       	brcc	.+32     	; 0x3024 <malloc+0x9c>
    3004:	8a 81       	ldd	r24, Y+2	; 0x02
    3006:	9b 81       	ldd	r25, Y+3	; 0x03
    3008:	61 15       	cp	r22, r1
    300a:	71 05       	cpc	r23, r1
    300c:	21 f0       	breq	.+8      	; 0x3016 <malloc+0x8e>
    300e:	fb 01       	movw	r30, r22
    3010:	93 83       	std	Z+3, r25	; 0x03
    3012:	82 83       	std	Z+2, r24	; 0x02
    3014:	04 c0       	rjmp	.+8      	; 0x301e <malloc+0x96>
    3016:	90 93 83 02 	sts	0x0283, r25	; 0x800283 <__flp+0x1>
    301a:	80 93 82 02 	sts	0x0282, r24	; 0x800282 <__flp>
    301e:	fe 01       	movw	r30, r28
    3020:	32 96       	adiw	r30, 0x02	; 2
    3022:	44 c0       	rjmp	.+136    	; 0x30ac <malloc+0x124>
    3024:	fe 01       	movw	r30, r28
    3026:	e2 0f       	add	r30, r18
    3028:	f3 1f       	adc	r31, r19
    302a:	81 93       	st	Z+, r24
    302c:	91 93       	st	Z+, r25
    302e:	22 50       	subi	r18, 0x02	; 2
    3030:	31 09       	sbc	r19, r1
    3032:	39 83       	std	Y+1, r19	; 0x01
    3034:	28 83       	st	Y, r18
    3036:	3a c0       	rjmp	.+116    	; 0x30ac <malloc+0x124>
    3038:	20 91 80 02 	lds	r18, 0x0280	; 0x800280 <__brkval>
    303c:	30 91 81 02 	lds	r19, 0x0281	; 0x800281 <__brkval+0x1>
    3040:	23 2b       	or	r18, r19
    3042:	41 f4       	brne	.+16     	; 0x3054 <malloc+0xcc>
    3044:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__malloc_heap_start>
    3048:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <__malloc_heap_start+0x1>
    304c:	30 93 81 02 	sts	0x0281, r19	; 0x800281 <__brkval+0x1>
    3050:	20 93 80 02 	sts	0x0280, r18	; 0x800280 <__brkval>
    3054:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__data_start>
    3058:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__data_start+0x1>
    305c:	21 15       	cp	r18, r1
    305e:	31 05       	cpc	r19, r1
    3060:	41 f4       	brne	.+16     	; 0x3072 <malloc+0xea>
    3062:	2d b7       	in	r18, 0x3d	; 61
    3064:	3e b7       	in	r19, 0x3e	; 62
    3066:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
    306a:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
    306e:	24 1b       	sub	r18, r20
    3070:	35 0b       	sbc	r19, r21
    3072:	e0 91 80 02 	lds	r30, 0x0280	; 0x800280 <__brkval>
    3076:	f0 91 81 02 	lds	r31, 0x0281	; 0x800281 <__brkval+0x1>
    307a:	e2 17       	cp	r30, r18
    307c:	f3 07       	cpc	r31, r19
    307e:	a0 f4       	brcc	.+40     	; 0x30a8 <malloc+0x120>
    3080:	2e 1b       	sub	r18, r30
    3082:	3f 0b       	sbc	r19, r31
    3084:	28 17       	cp	r18, r24
    3086:	39 07       	cpc	r19, r25
    3088:	78 f0       	brcs	.+30     	; 0x30a8 <malloc+0x120>
    308a:	ac 01       	movw	r20, r24
    308c:	4e 5f       	subi	r20, 0xFE	; 254
    308e:	5f 4f       	sbci	r21, 0xFF	; 255
    3090:	24 17       	cp	r18, r20
    3092:	35 07       	cpc	r19, r21
    3094:	48 f0       	brcs	.+18     	; 0x30a8 <malloc+0x120>
    3096:	4e 0f       	add	r20, r30
    3098:	5f 1f       	adc	r21, r31
    309a:	50 93 81 02 	sts	0x0281, r21	; 0x800281 <__brkval+0x1>
    309e:	40 93 80 02 	sts	0x0280, r20	; 0x800280 <__brkval>
    30a2:	81 93       	st	Z+, r24
    30a4:	91 93       	st	Z+, r25
    30a6:	02 c0       	rjmp	.+4      	; 0x30ac <malloc+0x124>
    30a8:	e0 e0       	ldi	r30, 0x00	; 0
    30aa:	f0 e0       	ldi	r31, 0x00	; 0
    30ac:	cf 01       	movw	r24, r30
    30ae:	df 91       	pop	r29
    30b0:	cf 91       	pop	r28
    30b2:	1f 91       	pop	r17
    30b4:	0f 91       	pop	r16
    30b6:	08 95       	ret

000030b8 <free>:
    30b8:	cf 93       	push	r28
    30ba:	df 93       	push	r29
    30bc:	00 97       	sbiw	r24, 0x00	; 0
    30be:	09 f4       	brne	.+2      	; 0x30c2 <free+0xa>
    30c0:	81 c0       	rjmp	.+258    	; 0x31c4 <free+0x10c>
    30c2:	fc 01       	movw	r30, r24
    30c4:	32 97       	sbiw	r30, 0x02	; 2
    30c6:	13 82       	std	Z+3, r1	; 0x03
    30c8:	12 82       	std	Z+2, r1	; 0x02
    30ca:	a0 91 82 02 	lds	r26, 0x0282	; 0x800282 <__flp>
    30ce:	b0 91 83 02 	lds	r27, 0x0283	; 0x800283 <__flp+0x1>
    30d2:	10 97       	sbiw	r26, 0x00	; 0
    30d4:	81 f4       	brne	.+32     	; 0x30f6 <free+0x3e>
    30d6:	20 81       	ld	r18, Z
    30d8:	31 81       	ldd	r19, Z+1	; 0x01
    30da:	82 0f       	add	r24, r18
    30dc:	93 1f       	adc	r25, r19
    30de:	20 91 80 02 	lds	r18, 0x0280	; 0x800280 <__brkval>
    30e2:	30 91 81 02 	lds	r19, 0x0281	; 0x800281 <__brkval+0x1>
    30e6:	28 17       	cp	r18, r24
    30e8:	39 07       	cpc	r19, r25
    30ea:	51 f5       	brne	.+84     	; 0x3140 <free+0x88>
    30ec:	f0 93 81 02 	sts	0x0281, r31	; 0x800281 <__brkval+0x1>
    30f0:	e0 93 80 02 	sts	0x0280, r30	; 0x800280 <__brkval>
    30f4:	67 c0       	rjmp	.+206    	; 0x31c4 <free+0x10c>
    30f6:	ed 01       	movw	r28, r26
    30f8:	20 e0       	ldi	r18, 0x00	; 0
    30fa:	30 e0       	ldi	r19, 0x00	; 0
    30fc:	ce 17       	cp	r28, r30
    30fe:	df 07       	cpc	r29, r31
    3100:	40 f4       	brcc	.+16     	; 0x3112 <free+0x5a>
    3102:	4a 81       	ldd	r20, Y+2	; 0x02
    3104:	5b 81       	ldd	r21, Y+3	; 0x03
    3106:	9e 01       	movw	r18, r28
    3108:	41 15       	cp	r20, r1
    310a:	51 05       	cpc	r21, r1
    310c:	f1 f0       	breq	.+60     	; 0x314a <free+0x92>
    310e:	ea 01       	movw	r28, r20
    3110:	f5 cf       	rjmp	.-22     	; 0x30fc <free+0x44>
    3112:	d3 83       	std	Z+3, r29	; 0x03
    3114:	c2 83       	std	Z+2, r28	; 0x02
    3116:	40 81       	ld	r20, Z
    3118:	51 81       	ldd	r21, Z+1	; 0x01
    311a:	84 0f       	add	r24, r20
    311c:	95 1f       	adc	r25, r21
    311e:	c8 17       	cp	r28, r24
    3120:	d9 07       	cpc	r29, r25
    3122:	59 f4       	brne	.+22     	; 0x313a <free+0x82>
    3124:	88 81       	ld	r24, Y
    3126:	99 81       	ldd	r25, Y+1	; 0x01
    3128:	84 0f       	add	r24, r20
    312a:	95 1f       	adc	r25, r21
    312c:	02 96       	adiw	r24, 0x02	; 2
    312e:	91 83       	std	Z+1, r25	; 0x01
    3130:	80 83       	st	Z, r24
    3132:	8a 81       	ldd	r24, Y+2	; 0x02
    3134:	9b 81       	ldd	r25, Y+3	; 0x03
    3136:	93 83       	std	Z+3, r25	; 0x03
    3138:	82 83       	std	Z+2, r24	; 0x02
    313a:	21 15       	cp	r18, r1
    313c:	31 05       	cpc	r19, r1
    313e:	29 f4       	brne	.+10     	; 0x314a <free+0x92>
    3140:	f0 93 83 02 	sts	0x0283, r31	; 0x800283 <__flp+0x1>
    3144:	e0 93 82 02 	sts	0x0282, r30	; 0x800282 <__flp>
    3148:	3d c0       	rjmp	.+122    	; 0x31c4 <free+0x10c>
    314a:	e9 01       	movw	r28, r18
    314c:	fb 83       	std	Y+3, r31	; 0x03
    314e:	ea 83       	std	Y+2, r30	; 0x02
    3150:	49 91       	ld	r20, Y+
    3152:	59 91       	ld	r21, Y+
    3154:	c4 0f       	add	r28, r20
    3156:	d5 1f       	adc	r29, r21
    3158:	ec 17       	cp	r30, r28
    315a:	fd 07       	cpc	r31, r29
    315c:	61 f4       	brne	.+24     	; 0x3176 <free+0xbe>
    315e:	80 81       	ld	r24, Z
    3160:	91 81       	ldd	r25, Z+1	; 0x01
    3162:	84 0f       	add	r24, r20
    3164:	95 1f       	adc	r25, r21
    3166:	02 96       	adiw	r24, 0x02	; 2
    3168:	e9 01       	movw	r28, r18
    316a:	99 83       	std	Y+1, r25	; 0x01
    316c:	88 83       	st	Y, r24
    316e:	82 81       	ldd	r24, Z+2	; 0x02
    3170:	93 81       	ldd	r25, Z+3	; 0x03
    3172:	9b 83       	std	Y+3, r25	; 0x03
    3174:	8a 83       	std	Y+2, r24	; 0x02
    3176:	e0 e0       	ldi	r30, 0x00	; 0
    3178:	f0 e0       	ldi	r31, 0x00	; 0
    317a:	12 96       	adiw	r26, 0x02	; 2
    317c:	8d 91       	ld	r24, X+
    317e:	9c 91       	ld	r25, X
    3180:	13 97       	sbiw	r26, 0x03	; 3
    3182:	00 97       	sbiw	r24, 0x00	; 0
    3184:	19 f0       	breq	.+6      	; 0x318c <free+0xd4>
    3186:	fd 01       	movw	r30, r26
    3188:	dc 01       	movw	r26, r24
    318a:	f7 cf       	rjmp	.-18     	; 0x317a <free+0xc2>
    318c:	8d 91       	ld	r24, X+
    318e:	9c 91       	ld	r25, X
    3190:	11 97       	sbiw	r26, 0x01	; 1
    3192:	9d 01       	movw	r18, r26
    3194:	2e 5f       	subi	r18, 0xFE	; 254
    3196:	3f 4f       	sbci	r19, 0xFF	; 255
    3198:	82 0f       	add	r24, r18
    319a:	93 1f       	adc	r25, r19
    319c:	20 91 80 02 	lds	r18, 0x0280	; 0x800280 <__brkval>
    31a0:	30 91 81 02 	lds	r19, 0x0281	; 0x800281 <__brkval+0x1>
    31a4:	28 17       	cp	r18, r24
    31a6:	39 07       	cpc	r19, r25
    31a8:	69 f4       	brne	.+26     	; 0x31c4 <free+0x10c>
    31aa:	30 97       	sbiw	r30, 0x00	; 0
    31ac:	29 f4       	brne	.+10     	; 0x31b8 <free+0x100>
    31ae:	10 92 83 02 	sts	0x0283, r1	; 0x800283 <__flp+0x1>
    31b2:	10 92 82 02 	sts	0x0282, r1	; 0x800282 <__flp>
    31b6:	02 c0       	rjmp	.+4      	; 0x31bc <free+0x104>
    31b8:	13 82       	std	Z+3, r1	; 0x03
    31ba:	12 82       	std	Z+2, r1	; 0x02
    31bc:	b0 93 81 02 	sts	0x0281, r27	; 0x800281 <__brkval+0x1>
    31c0:	a0 93 80 02 	sts	0x0280, r26	; 0x800280 <__brkval>
    31c4:	df 91       	pop	r29
    31c6:	cf 91       	pop	r28
    31c8:	08 95       	ret

000031ca <do_rand>:
    31ca:	8f 92       	push	r8
    31cc:	9f 92       	push	r9
    31ce:	af 92       	push	r10
    31d0:	bf 92       	push	r11
    31d2:	cf 92       	push	r12
    31d4:	df 92       	push	r13
    31d6:	ef 92       	push	r14
    31d8:	ff 92       	push	r15
    31da:	cf 93       	push	r28
    31dc:	df 93       	push	r29
    31de:	ec 01       	movw	r28, r24
    31e0:	68 81       	ld	r22, Y
    31e2:	79 81       	ldd	r23, Y+1	; 0x01
    31e4:	8a 81       	ldd	r24, Y+2	; 0x02
    31e6:	9b 81       	ldd	r25, Y+3	; 0x03
    31e8:	61 15       	cp	r22, r1
    31ea:	71 05       	cpc	r23, r1
    31ec:	81 05       	cpc	r24, r1
    31ee:	91 05       	cpc	r25, r1
    31f0:	21 f4       	brne	.+8      	; 0x31fa <do_rand+0x30>
    31f2:	64 e2       	ldi	r22, 0x24	; 36
    31f4:	79 ed       	ldi	r23, 0xD9	; 217
    31f6:	8b e5       	ldi	r24, 0x5B	; 91
    31f8:	97 e0       	ldi	r25, 0x07	; 7
    31fa:	2d e1       	ldi	r18, 0x1D	; 29
    31fc:	33 ef       	ldi	r19, 0xF3	; 243
    31fe:	41 e0       	ldi	r20, 0x01	; 1
    3200:	50 e0       	ldi	r21, 0x00	; 0
    3202:	68 d0       	rcall	.+208    	; 0x32d4 <__divmodsi4>
    3204:	49 01       	movw	r8, r18
    3206:	5a 01       	movw	r10, r20
    3208:	9b 01       	movw	r18, r22
    320a:	ac 01       	movw	r20, r24
    320c:	a7 ea       	ldi	r26, 0xA7	; 167
    320e:	b1 e4       	ldi	r27, 0x41	; 65
    3210:	7d d0       	rcall	.+250    	; 0x330c <__muluhisi3>
    3212:	6b 01       	movw	r12, r22
    3214:	7c 01       	movw	r14, r24
    3216:	ac ee       	ldi	r26, 0xEC	; 236
    3218:	b4 ef       	ldi	r27, 0xF4	; 244
    321a:	a5 01       	movw	r20, r10
    321c:	94 01       	movw	r18, r8
    321e:	82 d0       	rcall	.+260    	; 0x3324 <__mulohisi3>
    3220:	dc 01       	movw	r26, r24
    3222:	cb 01       	movw	r24, r22
    3224:	8c 0d       	add	r24, r12
    3226:	9d 1d       	adc	r25, r13
    3228:	ae 1d       	adc	r26, r14
    322a:	bf 1d       	adc	r27, r15
    322c:	b7 ff       	sbrs	r27, 7
    322e:	03 c0       	rjmp	.+6      	; 0x3236 <do_rand+0x6c>
    3230:	01 97       	sbiw	r24, 0x01	; 1
    3232:	a1 09       	sbc	r26, r1
    3234:	b0 48       	sbci	r27, 0x80	; 128
    3236:	88 83       	st	Y, r24
    3238:	99 83       	std	Y+1, r25	; 0x01
    323a:	aa 83       	std	Y+2, r26	; 0x02
    323c:	bb 83       	std	Y+3, r27	; 0x03
    323e:	9f 77       	andi	r25, 0x7F	; 127
    3240:	df 91       	pop	r29
    3242:	cf 91       	pop	r28
    3244:	ff 90       	pop	r15
    3246:	ef 90       	pop	r14
    3248:	df 90       	pop	r13
    324a:	cf 90       	pop	r12
    324c:	bf 90       	pop	r11
    324e:	af 90       	pop	r10
    3250:	9f 90       	pop	r9
    3252:	8f 90       	pop	r8
    3254:	08 95       	ret

00003256 <rand_r>:
    3256:	b9 cf       	rjmp	.-142    	; 0x31ca <do_rand>

00003258 <rand>:
    3258:	86 e0       	ldi	r24, 0x06	; 6
    325a:	91 e0       	ldi	r25, 0x01	; 1
    325c:	b6 cf       	rjmp	.-148    	; 0x31ca <do_rand>

0000325e <srand>:
    325e:	a0 e0       	ldi	r26, 0x00	; 0
    3260:	b0 e0       	ldi	r27, 0x00	; 0
    3262:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <next>
    3266:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <next+0x1>
    326a:	a0 93 08 01 	sts	0x0108, r26	; 0x800108 <next+0x2>
    326e:	b0 93 09 01 	sts	0x0109, r27	; 0x800109 <next+0x3>
    3272:	08 95       	ret

00003274 <memcpy_P>:
    3274:	fb 01       	movw	r30, r22
    3276:	dc 01       	movw	r26, r24
    3278:	02 c0       	rjmp	.+4      	; 0x327e <memcpy_P+0xa>
    327a:	05 90       	lpm	r0, Z+
    327c:	0d 92       	st	X+, r0
    327e:	41 50       	subi	r20, 0x01	; 1
    3280:	50 40       	sbci	r21, 0x00	; 0
    3282:	d8 f7       	brcc	.-10     	; 0x327a <memcpy_P+0x6>
    3284:	08 95       	ret

00003286 <memcmp>:
    3286:	fb 01       	movw	r30, r22
    3288:	dc 01       	movw	r26, r24
    328a:	04 c0       	rjmp	.+8      	; 0x3294 <memcmp+0xe>
    328c:	8d 91       	ld	r24, X+
    328e:	01 90       	ld	r0, Z+
    3290:	80 19       	sub	r24, r0
    3292:	21 f4       	brne	.+8      	; 0x329c <memcmp+0x16>
    3294:	41 50       	subi	r20, 0x01	; 1
    3296:	50 40       	sbci	r21, 0x00	; 0
    3298:	c8 f7       	brcc	.-14     	; 0x328c <memcmp+0x6>
    329a:	88 1b       	sub	r24, r24
    329c:	99 0b       	sbc	r25, r25
    329e:	08 95       	ret

000032a0 <memcpy>:
    32a0:	fb 01       	movw	r30, r22
    32a2:	dc 01       	movw	r26, r24
    32a4:	02 c0       	rjmp	.+4      	; 0x32aa <memcpy+0xa>
    32a6:	01 90       	ld	r0, Z+
    32a8:	0d 92       	st	X+, r0
    32aa:	41 50       	subi	r20, 0x01	; 1
    32ac:	50 40       	sbci	r21, 0x00	; 0
    32ae:	d8 f7       	brcc	.-10     	; 0x32a6 <memcpy+0x6>
    32b0:	08 95       	ret

000032b2 <memmove>:
    32b2:	68 17       	cp	r22, r24
    32b4:	79 07       	cpc	r23, r25
    32b6:	68 f4       	brcc	.+26     	; 0x32d2 <memmove+0x20>
    32b8:	fb 01       	movw	r30, r22
    32ba:	dc 01       	movw	r26, r24
    32bc:	e4 0f       	add	r30, r20
    32be:	f5 1f       	adc	r31, r21
    32c0:	a4 0f       	add	r26, r20
    32c2:	b5 1f       	adc	r27, r21
    32c4:	02 c0       	rjmp	.+4      	; 0x32ca <memmove+0x18>
    32c6:	02 90       	ld	r0, -Z
    32c8:	0e 92       	st	-X, r0
    32ca:	41 50       	subi	r20, 0x01	; 1
    32cc:	50 40       	sbci	r21, 0x00	; 0
    32ce:	d8 f7       	brcc	.-10     	; 0x32c6 <memmove+0x14>
    32d0:	08 95       	ret
    32d2:	e6 cf       	rjmp	.-52     	; 0x32a0 <memcpy>

000032d4 <__divmodsi4>:
    32d4:	05 2e       	mov	r0, r21
    32d6:	97 fb       	bst	r25, 7
    32d8:	16 f4       	brtc	.+4      	; 0x32de <__divmodsi4+0xa>
    32da:	00 94       	com	r0
    32dc:	0f d0       	rcall	.+30     	; 0x32fc <__negsi2>
    32de:	57 fd       	sbrc	r21, 7
    32e0:	05 d0       	rcall	.+10     	; 0x32ec <__divmodsi4_neg2>
    32e2:	24 d0       	rcall	.+72     	; 0x332c <__udivmodsi4>
    32e4:	07 fc       	sbrc	r0, 7
    32e6:	02 d0       	rcall	.+4      	; 0x32ec <__divmodsi4_neg2>
    32e8:	46 f4       	brtc	.+16     	; 0x32fa <__divmodsi4_exit>
    32ea:	08 c0       	rjmp	.+16     	; 0x32fc <__negsi2>

000032ec <__divmodsi4_neg2>:
    32ec:	50 95       	com	r21
    32ee:	40 95       	com	r20
    32f0:	30 95       	com	r19
    32f2:	21 95       	neg	r18
    32f4:	3f 4f       	sbci	r19, 0xFF	; 255
    32f6:	4f 4f       	sbci	r20, 0xFF	; 255
    32f8:	5f 4f       	sbci	r21, 0xFF	; 255

000032fa <__divmodsi4_exit>:
    32fa:	08 95       	ret

000032fc <__negsi2>:
    32fc:	90 95       	com	r25
    32fe:	80 95       	com	r24
    3300:	70 95       	com	r23
    3302:	61 95       	neg	r22
    3304:	7f 4f       	sbci	r23, 0xFF	; 255
    3306:	8f 4f       	sbci	r24, 0xFF	; 255
    3308:	9f 4f       	sbci	r25, 0xFF	; 255
    330a:	08 95       	ret

0000330c <__muluhisi3>:
    330c:	31 d0       	rcall	.+98     	; 0x3370 <__umulhisi3>
    330e:	a5 9f       	mul	r26, r21
    3310:	90 0d       	add	r25, r0
    3312:	b4 9f       	mul	r27, r20
    3314:	90 0d       	add	r25, r0
    3316:	a4 9f       	mul	r26, r20
    3318:	80 0d       	add	r24, r0
    331a:	91 1d       	adc	r25, r1
    331c:	11 24       	eor	r1, r1
    331e:	08 95       	ret

00003320 <__mulshisi3>:
    3320:	b7 ff       	sbrs	r27, 7
    3322:	f4 cf       	rjmp	.-24     	; 0x330c <__muluhisi3>

00003324 <__mulohisi3>:
    3324:	f3 df       	rcall	.-26     	; 0x330c <__muluhisi3>
    3326:	82 1b       	sub	r24, r18
    3328:	93 0b       	sbc	r25, r19
    332a:	08 95       	ret

0000332c <__udivmodsi4>:
    332c:	a1 e2       	ldi	r26, 0x21	; 33
    332e:	1a 2e       	mov	r1, r26
    3330:	aa 1b       	sub	r26, r26
    3332:	bb 1b       	sub	r27, r27
    3334:	fd 01       	movw	r30, r26
    3336:	0d c0       	rjmp	.+26     	; 0x3352 <__udivmodsi4_ep>

00003338 <__udivmodsi4_loop>:
    3338:	aa 1f       	adc	r26, r26
    333a:	bb 1f       	adc	r27, r27
    333c:	ee 1f       	adc	r30, r30
    333e:	ff 1f       	adc	r31, r31
    3340:	a2 17       	cp	r26, r18
    3342:	b3 07       	cpc	r27, r19
    3344:	e4 07       	cpc	r30, r20
    3346:	f5 07       	cpc	r31, r21
    3348:	20 f0       	brcs	.+8      	; 0x3352 <__udivmodsi4_ep>
    334a:	a2 1b       	sub	r26, r18
    334c:	b3 0b       	sbc	r27, r19
    334e:	e4 0b       	sbc	r30, r20
    3350:	f5 0b       	sbc	r31, r21

00003352 <__udivmodsi4_ep>:
    3352:	66 1f       	adc	r22, r22
    3354:	77 1f       	adc	r23, r23
    3356:	88 1f       	adc	r24, r24
    3358:	99 1f       	adc	r25, r25
    335a:	1a 94       	dec	r1
    335c:	69 f7       	brne	.-38     	; 0x3338 <__udivmodsi4_loop>
    335e:	60 95       	com	r22
    3360:	70 95       	com	r23
    3362:	80 95       	com	r24
    3364:	90 95       	com	r25
    3366:	9b 01       	movw	r18, r22
    3368:	ac 01       	movw	r20, r24
    336a:	bd 01       	movw	r22, r26
    336c:	cf 01       	movw	r24, r30
    336e:	08 95       	ret

00003370 <__umulhisi3>:
    3370:	a2 9f       	mul	r26, r18
    3372:	b0 01       	movw	r22, r0
    3374:	b3 9f       	mul	r27, r19
    3376:	c0 01       	movw	r24, r0
    3378:	a3 9f       	mul	r26, r19
    337a:	70 0d       	add	r23, r0
    337c:	81 1d       	adc	r24, r1
    337e:	11 24       	eor	r1, r1
    3380:	91 1d       	adc	r25, r1
    3382:	b2 9f       	mul	r27, r18
    3384:	70 0d       	add	r23, r0
    3386:	81 1d       	adc	r24, r1
    3388:	11 24       	eor	r1, r1
    338a:	91 1d       	adc	r25, r1
    338c:	08 95       	ret

0000338e <_exit>:
    338e:	f8 94       	cli

00003390 <__stop_program>:
    3390:	ff cf       	rjmp	.-2      	; 0x3390 <__stop_program>
