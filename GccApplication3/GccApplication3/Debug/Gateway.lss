
Gateway.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000007e  00800100  0000044c  000004c0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000044c  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  0000053e  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000570  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 000000e0  00000000  00000000  000005b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00001425  00000000  00000000  00000690  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000d00  00000000  00000000  00001ab5  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000853  00000000  00000000  000027b5  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000238  00000000  00000000  00003008  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000006fd  00000000  00000000  00003240  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000006a5  00000000  00000000  0000393d  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000b0  00000000  00000000  00003fe2  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	49 c0       	rjmp	.+146    	; 0x94 <__ctors_end>
   2:	00 00       	nop
   4:	64 c0       	rjmp	.+200    	; 0xce <__bad_interrupt>
   6:	00 00       	nop
   8:	62 c0       	rjmp	.+196    	; 0xce <__bad_interrupt>
   a:	00 00       	nop
   c:	60 c0       	rjmp	.+192    	; 0xce <__bad_interrupt>
   e:	00 00       	nop
  10:	5e c0       	rjmp	.+188    	; 0xce <__bad_interrupt>
  12:	00 00       	nop
  14:	5c c0       	rjmp	.+184    	; 0xce <__bad_interrupt>
  16:	00 00       	nop
  18:	5a c0       	rjmp	.+180    	; 0xce <__bad_interrupt>
  1a:	00 00       	nop
  1c:	58 c0       	rjmp	.+176    	; 0xce <__bad_interrupt>
  1e:	00 00       	nop
  20:	56 c0       	rjmp	.+172    	; 0xce <__bad_interrupt>
  22:	00 00       	nop
  24:	54 c0       	rjmp	.+168    	; 0xce <__bad_interrupt>
  26:	00 00       	nop
  28:	52 c0       	rjmp	.+164    	; 0xce <__bad_interrupt>
  2a:	00 00       	nop
  2c:	50 c0       	rjmp	.+160    	; 0xce <__bad_interrupt>
  2e:	00 00       	nop
  30:	4e c0       	rjmp	.+156    	; 0xce <__bad_interrupt>
  32:	00 00       	nop
  34:	4c c0       	rjmp	.+152    	; 0xce <__bad_interrupt>
  36:	00 00       	nop
  38:	4a c0       	rjmp	.+148    	; 0xce <__bad_interrupt>
  3a:	00 00       	nop
  3c:	48 c0       	rjmp	.+144    	; 0xce <__bad_interrupt>
  3e:	00 00       	nop
  40:	46 c0       	rjmp	.+140    	; 0xce <__bad_interrupt>
  42:	00 00       	nop
  44:	44 c0       	rjmp	.+136    	; 0xce <__bad_interrupt>
  46:	00 00       	nop
  48:	73 c1       	rjmp	.+742    	; 0x330 <__vector_18>
  4a:	00 00       	nop
  4c:	40 c0       	rjmp	.+128    	; 0xce <__bad_interrupt>
  4e:	00 00       	nop
  50:	3e c0       	rjmp	.+124    	; 0xce <__bad_interrupt>
  52:	00 00       	nop
  54:	3c c0       	rjmp	.+120    	; 0xce <__bad_interrupt>
  56:	00 00       	nop
  58:	3a c0       	rjmp	.+116    	; 0xce <__bad_interrupt>
  5a:	00 00       	nop
  5c:	38 c0       	rjmp	.+112    	; 0xce <__bad_interrupt>
  5e:	00 00       	nop
  60:	36 c0       	rjmp	.+108    	; 0xce <__bad_interrupt>
  62:	00 00       	nop
  64:	34 c0       	rjmp	.+104    	; 0xce <__bad_interrupt>
  66:	00 00       	nop
  68:	32 c0       	rjmp	.+100    	; 0xce <__bad_interrupt>
  6a:	00 00       	nop
  6c:	30 c0       	rjmp	.+96     	; 0xce <__bad_interrupt>
  6e:	00 00       	nop
  70:	2e c0       	rjmp	.+92     	; 0xce <__bad_interrupt>
  72:	00 00       	nop
  74:	2c c0       	rjmp	.+88     	; 0xce <__bad_interrupt>
  76:	00 00       	nop
  78:	2a c0       	rjmp	.+84     	; 0xce <__bad_interrupt>
  7a:	00 00       	nop
  7c:	28 c0       	rjmp	.+80     	; 0xce <__bad_interrupt>
  7e:	00 00       	nop
  80:	26 c0       	rjmp	.+76     	; 0xce <__bad_interrupt>
  82:	00 00       	nop
  84:	24 c0       	rjmp	.+72     	; 0xce <__bad_interrupt>
  86:	00 00       	nop
  88:	22 c0       	rjmp	.+68     	; 0xce <__bad_interrupt>
  8a:	00 00       	nop
  8c:	20 c0       	rjmp	.+64     	; 0xce <__bad_interrupt>
  8e:	00 00       	nop
  90:	1e c0       	rjmp	.+60     	; 0xce <__bad_interrupt>
	...

00000094 <__ctors_end>:
  94:	11 24       	eor	r1, r1
  96:	1f be       	out	0x3f, r1	; 63
  98:	cf ef       	ldi	r28, 0xFF	; 255
  9a:	d0 e1       	ldi	r29, 0x10	; 16
  9c:	de bf       	out	0x3e, r29	; 62
  9e:	cd bf       	out	0x3d, r28	; 61

000000a0 <__do_copy_data>:
  a0:	11 e0       	ldi	r17, 0x01	; 1
  a2:	a0 e0       	ldi	r26, 0x00	; 0
  a4:	b1 e0       	ldi	r27, 0x01	; 1
  a6:	ec e4       	ldi	r30, 0x4C	; 76
  a8:	f4 e0       	ldi	r31, 0x04	; 4
  aa:	00 e0       	ldi	r16, 0x00	; 0
  ac:	0b bf       	out	0x3b, r16	; 59
  ae:	02 c0       	rjmp	.+4      	; 0xb4 <__do_copy_data+0x14>
  b0:	07 90       	elpm	r0, Z+
  b2:	0d 92       	st	X+, r0
  b4:	ae 37       	cpi	r26, 0x7E	; 126
  b6:	b1 07       	cpc	r27, r17
  b8:	d9 f7       	brne	.-10     	; 0xb0 <__do_copy_data+0x10>

000000ba <__do_clear_bss>:
  ba:	21 e0       	ldi	r18, 0x01	; 1
  bc:	ae e7       	ldi	r26, 0x7E	; 126
  be:	b1 e0       	ldi	r27, 0x01	; 1
  c0:	01 c0       	rjmp	.+2      	; 0xc4 <.do_clear_bss_start>

000000c2 <.do_clear_bss_loop>:
  c2:	1d 92       	st	X+, r1

000000c4 <.do_clear_bss_start>:
  c4:	ae 37       	cpi	r26, 0x7E	; 126
  c6:	b2 07       	cpc	r27, r18
  c8:	e1 f7       	brne	.-8      	; 0xc2 <.do_clear_bss_loop>
  ca:	7c d1       	rcall	.+760    	; 0x3c4 <main>
  cc:	bd c1       	rjmp	.+890    	; 0x448 <_exit>

000000ce <__bad_interrupt>:
  ce:	98 cf       	rjmp	.-208    	; 0x0 <__vectors>

000000d0 <can_init>:
void can_init_mask (uint8_t mask){
	CANIDM1 = mask << 5;
	CANIDM2 = mask >> 3;
	// RTRMSK = 0 : We don't use remote frames ever.
	// IDEMSK = 0 : we don't use the extended format.
	CANIDM4 = (0 << RTRMSK) | (0 << IDEMSK);
  d0:	cf 93       	push	r28
  d2:	df 93       	push	r29
  d4:	f8 94       	cli
  d6:	81 e0       	ldi	r24, 0x01	; 1
  d8:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
  dc:	84 e3       	ldi	r24, 0x34	; 52
  de:	80 93 db 00 	sts	0x00DB, r24	; 0x8000db <__TEXT_REGION_LENGTH__+0x7e00db>
  e2:	10 92 da 00 	sts	0x00DA, r1	; 0x8000da <__TEXT_REGION_LENGTH__+0x7e00da>
  e6:	80 e0       	ldi	r24, 0x00	; 0
  e8:	cd ee       	ldi	r28, 0xED	; 237
  ea:	d0 e0       	ldi	r29, 0x00	; 0
  ec:	af ee       	ldi	r26, 0xEF	; 239
  ee:	b0 e0       	ldi	r27, 0x00	; 0
  f0:	ee ee       	ldi	r30, 0xEE	; 238
  f2:	f0 e0       	ldi	r31, 0x00	; 0
  f4:	98 2f       	mov	r25, r24
  f6:	92 95       	swap	r25
  f8:	90 7f       	andi	r25, 0xF0	; 240
  fa:	98 83       	st	Y, r25
  fc:	1c 92       	st	X, r1
  fe:	10 82       	st	Z, r1
 100:	8f 5f       	subi	r24, 0xFF	; 255
 102:	8f 30       	cpi	r24, 0x0F	; 15
 104:	b9 f7       	brne	.-18     	; 0xf4 <can_init+0x24>
 106:	86 e0       	ldi	r24, 0x06	; 6
 108:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
 10c:	8c e0       	ldi	r24, 0x0C	; 12
 10e:	80 93 e3 00 	sts	0x00E3, r24	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7e00e3>
 112:	87 e3       	ldi	r24, 0x37	; 55
 114:	80 93 e4 00 	sts	0x00E4, r24	; 0x8000e4 <__TEXT_REGION_LENGTH__+0x7e00e4>
 118:	10 92 e5 00 	sts	0x00E5, r1	; 0x8000e5 <__TEXT_REGION_LENGTH__+0x7e00e5>
 11c:	82 e0       	ldi	r24, 0x02	; 2
 11e:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
 122:	78 94       	sei
 124:	df 91       	pop	r29
 126:	cf 91       	pop	r28
 128:	08 95       	ret

0000012a <can_get_message>:
 12a:	fb 01       	movw	r30, r22
 12c:	82 95       	swap	r24
 12e:	80 7f       	andi	r24, 0xF0	; 240
 130:	80 93 ed 00 	sts	0x00ED, r24	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7e00ed>
 134:	9b 01       	movw	r18, r22
 136:	28 5f       	subi	r18, 0xF8	; 248
 138:	3f 4f       	sbci	r19, 0xFF	; 255
 13a:	aa ef       	ldi	r26, 0xFA	; 250
 13c:	b0 e0       	ldi	r27, 0x00	; 0
 13e:	8c 91       	ld	r24, X
 140:	81 93       	st	Z+, r24
 142:	2e 17       	cp	r18, r30
 144:	3f 07       	cpc	r19, r31
 146:	d9 f7       	brne	.-10     	; 0x13e <can_get_message+0x14>
 148:	08 95       	ret

0000014a <can_get_frame_buffer>:
 14a:	0f 93       	push	r16
 14c:	1f 93       	push	r17
 14e:	cf 93       	push	r28
 150:	8c 01       	movw	r16, r24
 152:	c0 e0       	ldi	r28, 0x00	; 0
 154:	b8 01       	movw	r22, r16
 156:	8c 2f       	mov	r24, r28
 158:	e8 df       	rcall	.-48     	; 0x12a <can_get_message>
 15a:	08 5f       	subi	r16, 0xF8	; 248
 15c:	1f 4f       	sbci	r17, 0xFF	; 255
 15e:	cf 5f       	subi	r28, 0xFF	; 255
 160:	c8 30       	cpi	r28, 0x08	; 8
 162:	c1 f7       	brne	.-16     	; 0x154 <can_get_frame_buffer+0xa>
 164:	cf 91       	pop	r28
 166:	1f 91       	pop	r17
 168:	0f 91       	pop	r16
 16a:	08 95       	ret

0000016c <can_init_id>:
 16c:	98 2f       	mov	r25, r24
 16e:	92 95       	swap	r25
 170:	99 0f       	add	r25, r25
 172:	90 7e       	andi	r25, 0xE0	; 224
 174:	90 93 f3 00 	sts	0x00F3, r25	; 0x8000f3 <__TEXT_REGION_LENGTH__+0x7e00f3>
 178:	86 95       	lsr	r24
 17a:	86 95       	lsr	r24
 17c:	86 95       	lsr	r24
 17e:	80 93 f2 00 	sts	0x00F2, r24	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7e00f2>
 182:	10 92 f0 00 	sts	0x00F0, r1	; 0x8000f0 <__TEXT_REGION_LENGTH__+0x7e00f0>
 186:	08 95       	ret

00000188 <can_init_mask_def>:
 188:	8f ef       	ldi	r24, 0xFF	; 255
 18a:	80 93 f7 00 	sts	0x00F7, r24	; 0x8000f7 <__TEXT_REGION_LENGTH__+0x7e00f7>
 18e:	80 93 f6 00 	sts	0x00F6, r24	; 0x8000f6 <__TEXT_REGION_LENGTH__+0x7e00f6>
 192:	10 92 f4 00 	sts	0x00F4, r1	; 0x8000f4 <__TEXT_REGION_LENGTH__+0x7e00f4>
 196:	08 95       	ret

00000198 <can_init_message>:
}

void can_init_message( uint8_t *message ){
 198:	fc 01       	movw	r30, r24
 19a:	9c 01       	movw	r18, r24
 19c:	28 5f       	subi	r18, 0xF8	; 248
 19e:	3f 4f       	sbci	r19, 0xFF	; 255
	uint8_t j;
	for(j=0; j<8; j++){
		CANMSG = *message;
 1a0:	aa ef       	ldi	r26, 0xFA	; 250
 1a2:	b0 e0       	ldi	r27, 0x00	; 0
 1a4:	81 91       	ld	r24, Z+
 1a6:	8c 93       	st	X, r24
	CANIDM4 = (0 << RTRMSK) | (0 << IDEMSK);
}

void can_init_message( uint8_t *message ){
	uint8_t j;
	for(j=0; j<8; j++){
 1a8:	2e 17       	cp	r18, r30
 1aa:	3f 07       	cpc	r19, r31
 1ac:	d9 f7       	brne	.-10     	; 0x1a4 <can_init_message+0xc>
		CANMSG = *message;
		message++;
	}
}
 1ae:	08 95       	ret

000001b0 <can_send_message>:

int can_send_message( uint8_t mobnr , uint8_t id, uint8_t *message ){
 1b0:	cf 93       	push	r28
 1b2:	df 93       	push	r29
 1b4:	ea 01       	movw	r28, r20
	//select mob.
	CANPAGE = (mobnr << 4);
 1b6:	82 95       	swap	r24
 1b8:	80 7f       	andi	r24, 0xF0	; 240
 1ba:	80 93 ed 00 	sts	0x00ED, r24	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7e00ed>
	//copy ID.
	can_init_id(id);
 1be:	86 2f       	mov	r24, r22
 1c0:	d5 df       	rcall	.-86     	; 0x16c <can_init_id>
	//copy message.
	can_init_message(message);
 1c2:	ce 01       	movw	r24, r28
 1c4:	e9 df       	rcall	.-46     	; 0x198 <can_init_message>
	//enable transmission
	CANCDMOB = (1 << CONMOB0) | (1 << DLC3);
 1c6:	88 e4       	ldi	r24, 0x48	; 72
 1c8:	80 93 ef 00 	sts	0x00EF, r24	; 0x8000ef <__TEXT_REGION_LENGTH__+0x7e00ef>
	
	return 0;
}
 1cc:	80 e0       	ldi	r24, 0x00	; 0
 1ce:	90 e0       	ldi	r25, 0x00	; 0
 1d0:	df 91       	pop	r29
 1d2:	cf 91       	pop	r28
 1d4:	08 95       	ret

000001d6 <can_receive_message>:

int can_receive_message( uint8_t mobnr, uint8_t id, uint8_t mask, uint8_t *message){
 1d6:	ef 92       	push	r14
 1d8:	ff 92       	push	r15
 1da:	0f 93       	push	r16
 1dc:	1f 93       	push	r17
 1de:	cf 93       	push	r28
 1e0:	df 93       	push	r29
 1e2:	08 2f       	mov	r16, r24
 1e4:	86 2f       	mov	r24, r22
 1e6:	79 01       	movw	r14, r18
	CANPAGE = (mobnr << 4);
 1e8:	10 2f       	mov	r17, r16
 1ea:	12 95       	swap	r17
 1ec:	10 7f       	andi	r17, 0xF0	; 240
 1ee:	cd ee       	ldi	r28, 0xED	; 237
 1f0:	d0 e0       	ldi	r29, 0x00	; 0
 1f2:	18 83       	st	Y, r17
	CANIE2 = (1 << mobnr);
 1f4:	21 e0       	ldi	r18, 0x01	; 1
 1f6:	30 e0       	ldi	r19, 0x00	; 0
 1f8:	00 2e       	mov	r0, r16
 1fa:	02 c0       	rjmp	.+4      	; 0x200 <can_receive_message+0x2a>
 1fc:	22 0f       	add	r18, r18
 1fe:	33 1f       	adc	r19, r19
 200:	0a 94       	dec	r0
 202:	e2 f7       	brpl	.-8      	; 0x1fc <can_receive_message+0x26>
 204:	20 93 de 00 	sts	0x00DE, r18	; 0x8000de <__TEXT_REGION_LENGTH__+0x7e00de>
	can_init_id(id);
 208:	b1 df       	rcall	.-158    	; 0x16c <can_init_id>
	can_init_mask_def();
 20a:	be df       	rcall	.-132    	; 0x188 <can_init_mask_def>
 20c:	88 e8       	ldi	r24, 0x88	; 136
	//CAN standard rev 2.0 A (identifiers length = 11 bits)
	CANCDMOB = (1 << CONMOB1) | (1 << DLC3); //enable reception and data length code = 8 bytes
 20e:	80 93 ef 00 	sts	0x00EF, r24	; 0x8000ef <__TEXT_REGION_LENGTH__+0x7e00ef>
 212:	18 83       	st	Y, r17
	
	CANPAGE = (mobnr << 4);
 214:	18 83       	st	Y, r17
	CANPAGE = (mobnr << 4);
 216:	ea ed       	ldi	r30, 0xDA	; 218
	//wait for interrupt
	while((CANGIT & INTR_MASK) != (1 << CANIT));
 218:	f0 e0       	ldi	r31, 0x00	; 0
 21a:	80 81       	ld	r24, Z
 21c:	88 23       	and	r24, r24
 21e:	ec f7       	brge	.-6      	; 0x21a <can_receive_message+0x44>
 220:	80 91 ee 00 	lds	r24, 0x00EE	; 0x8000ee <__TEXT_REGION_LENGTH__+0x7e00ee>
	//check if it is the right interrupt.
	if((CANSTMOB & RXOK_MASK) != (1 << RXOK)) return 1;
 224:	85 ff       	sbrs	r24, 5
 226:	0e c0       	rjmp	.+28     	; 0x244 <can_receive_message+0x6e>
 228:	10 92 ee 00 	sts	0x00EE, r1	; 0x8000ee <__TEXT_REGION_LENGTH__+0x7e00ee>
	//reset mob RXOK flag.
	CANSTMOB = 0x00;
 22c:	10 92 de 00 	sts	0x00DE, r1	; 0x8000de <__TEXT_REGION_LENGTH__+0x7e00de>
	//reset interrupt enable
	CANIE2 = 0x00;
 230:	ea ed       	ldi	r30, 0xDA	; 218
	//reset interrupt register.
	CANGIT = CANGIT;
 232:	f0 e0       	ldi	r31, 0x00	; 0
 234:	80 81       	ld	r24, Z
 236:	80 83       	st	Z, r24
 238:	b7 01       	movw	r22, r14
	//retrieve message.
	can_get_message(mobnr, message);
 23a:	80 2f       	mov	r24, r16
 23c:	76 df       	rcall	.-276    	; 0x12a <can_get_message>
 23e:	80 e0       	ldi	r24, 0x00	; 0
	return 0;
 240:	90 e0       	ldi	r25, 0x00	; 0
 242:	02 c0       	rjmp	.+4      	; 0x248 <can_receive_message+0x72>
 244:	81 e0       	ldi	r24, 0x01	; 1
	CANPAGE = (mobnr << 4);
	CANPAGE = (mobnr << 4);
	//wait for interrupt
	while((CANGIT & INTR_MASK) != (1 << CANIT));
	//check if it is the right interrupt.
	if((CANSTMOB & RXOK_MASK) != (1 << RXOK)) return 1;
 246:	90 e0       	ldi	r25, 0x00	; 0
 248:	df 91       	pop	r29
	//reset interrupt register.
	CANGIT = CANGIT;
	//retrieve message.
	can_get_message(mobnr, message);
	return 0;
}
 24a:	cf 91       	pop	r28
 24c:	1f 91       	pop	r17
 24e:	0f 91       	pop	r16
 250:	ff 90       	pop	r15
 252:	ef 90       	pop	r14
 254:	08 95       	ret

00000256 <can_send_frame_buffer>:
 256:	0f 93       	push	r16

int can_send_frame_buffer( uint8_t *message ){
 258:	1f 93       	push	r17
 25a:	cf 93       	push	r28
 25c:	8c 01       	movw	r16, r24
	uint8_t j;
	for(j=0; j<8; j++){
 25e:	c0 e0       	ldi	r28, 0x00	; 0
		can_send_message(j,j,message);
 260:	a8 01       	movw	r20, r16
 262:	6c 2f       	mov	r22, r28
 264:	8c 2f       	mov	r24, r28
 266:	a4 df       	rcall	.-184    	; 0x1b0 <can_send_message>
		message = message + 8;
 268:	08 5f       	subi	r16, 0xF8	; 248
 26a:	1f 4f       	sbci	r17, 0xFF	; 255
	return 0;
}

int can_send_frame_buffer( uint8_t *message ){
	uint8_t j;
	for(j=0; j<8; j++){
 26c:	cf 5f       	subi	r28, 0xFF	; 255
 26e:	c8 30       	cpi	r28, 0x08	; 8
 270:	b9 f7       	brne	.-18     	; 0x260 <can_send_frame_buffer+0xa>
		can_send_message(j,j,message);
		message = message + 8;
	}
	return 0;
}
 272:	80 e0       	ldi	r24, 0x00	; 0
 274:	90 e0       	ldi	r25, 0x00	; 0
 276:	cf 91       	pop	r28
 278:	1f 91       	pop	r17
 27a:	0f 91       	pop	r16
 27c:	08 95       	ret

0000027e <can_receive_frame_buffer>:

int can_receive_frame_buffer( uint8_t *message ){
 27e:	cf 92       	push	r12
 280:	df 92       	push	r13
 282:	ef 92       	push	r14
 284:	ff 92       	push	r15
 286:	0f 93       	push	r16
 288:	1f 93       	push	r17
 28a:	cf 93       	push	r28
 28c:	df 93       	push	r29
 28e:	7c 01       	movw	r14, r24
	//Enable buffer receive interrupt.
	CANGIE |= 1 << ENBX ;
 290:	eb ed       	ldi	r30, 0xDB	; 219
 292:	f0 e0       	ldi	r31, 0x00	; 0
 294:	80 81       	ld	r24, Z
 296:	84 60       	ori	r24, 0x04	; 4
 298:	80 83       	st	Z, r24
	uint8_t j;
	for(j=0; j<8; j++){
 29a:	c0 e0       	ldi	r28, 0x00	; 0
		CANPAGE = (j << 4);
 29c:	0f 2e       	mov	r0, r31
 29e:	fd ee       	ldi	r31, 0xED	; 237
 2a0:	cf 2e       	mov	r12, r31
 2a2:	d1 2c       	mov	r13, r1
 2a4:	f0 2d       	mov	r31, r0
		can_init_id(j);
		// Mask = 255
		can_init_mask_def();
		//set mob in buffer receive mode.
		CANCDMOB = (1 << CONMOB0) | (1 << CONMOB1) | (1 << DLC3);
 2a6:	0f ee       	ldi	r16, 0xEF	; 239
 2a8:	10 e0       	ldi	r17, 0x00	; 0
 2aa:	d8 ec       	ldi	r29, 0xC8	; 200
int can_receive_frame_buffer( uint8_t *message ){
	//Enable buffer receive interrupt.
	CANGIE |= 1 << ENBX ;
	uint8_t j;
	for(j=0; j<8; j++){
		CANPAGE = (j << 4);
 2ac:	8c 2f       	mov	r24, r28
 2ae:	82 95       	swap	r24
 2b0:	80 7f       	andi	r24, 0xF0	; 240
 2b2:	f6 01       	movw	r30, r12
 2b4:	80 83       	st	Z, r24
		can_init_id(j);
 2b6:	8c 2f       	mov	r24, r28
 2b8:	59 df       	rcall	.-334    	; 0x16c <can_init_id>
		// Mask = 255
		can_init_mask_def();
 2ba:	66 df       	rcall	.-308    	; 0x188 <can_init_mask_def>
 2bc:	f8 01       	movw	r30, r16
		//set mob in buffer receive mode.
		CANCDMOB = (1 << CONMOB0) | (1 << CONMOB1) | (1 << DLC3);
 2be:	d0 83       	st	Z, r29
 2c0:	cf 5f       	subi	r28, 0xFF	; 255

int can_receive_frame_buffer( uint8_t *message ){
	//Enable buffer receive interrupt.
	CANGIE |= 1 << ENBX ;
	uint8_t j;
	for(j=0; j<8; j++){
 2c2:	c8 30       	cpi	r28, 0x08	; 8
 2c4:	99 f7       	brne	.-26     	; 0x2ac <can_receive_frame_buffer+0x2e>
 2c6:	ea ed       	ldi	r30, 0xDA	; 218
		can_init_mask_def();
		//set mob in buffer receive mode.
		CANCDMOB = (1 << CONMOB0) | (1 << CONMOB1) | (1 << DLC3);
	}
	//wait for interrupt.
	while((CANGIT & INTR_MASK) != (1 << CANIT));
 2c8:	f0 e0       	ldi	r31, 0x00	; 0
 2ca:	80 81       	ld	r24, Z
 2cc:	88 23       	and	r24, r24
 2ce:	ec f7       	brge	.-6      	; 0x2ca <can_receive_frame_buffer+0x4c>
 2d0:	80 91 da 00 	lds	r24, 0x00DA	; 0x8000da <__TEXT_REGION_LENGTH__+0x7e00da>
	//Check if interrupt is the right one (BXOK).
	if((CANGIT & BXOK_MASK) != (1 << BXOK)) return 1;
 2d4:	84 ff       	sbrs	r24, 4
 2d6:	19 c0       	rjmp	.+50     	; 0x30a <can_receive_frame_buffer+0x8c>
 2d8:	80 e0       	ldi	r24, 0x00	; 0
 2da:	cd ee       	ldi	r28, 0xED	; 237
	//reset mob RXOK flags
	for(j=0; j<8; j++){
		CANPAGE = (j << 4);
 2dc:	d0 e0       	ldi	r29, 0x00	; 0
 2de:	af ee       	ldi	r26, 0xEF	; 239
		CANCDMOB = 0x00;
 2e0:	b0 e0       	ldi	r27, 0x00	; 0
 2e2:	ee ee       	ldi	r30, 0xEE	; 238
		CANSTMOB = 0x00;
 2e4:	f0 e0       	ldi	r31, 0x00	; 0
 2e6:	98 2f       	mov	r25, r24
	while((CANGIT & INTR_MASK) != (1 << CANIT));
	//Check if interrupt is the right one (BXOK).
	if((CANGIT & BXOK_MASK) != (1 << BXOK)) return 1;
	//reset mob RXOK flags
	for(j=0; j<8; j++){
		CANPAGE = (j << 4);
 2e8:	92 95       	swap	r25
 2ea:	90 7f       	andi	r25, 0xF0	; 240
 2ec:	98 83       	st	Y, r25
 2ee:	1c 92       	st	X, r1
		CANCDMOB = 0x00;
 2f0:	10 82       	st	Z, r1
		CANSTMOB = 0x00;
 2f2:	8f 5f       	subi	r24, 0xFF	; 255
	//wait for interrupt.
	while((CANGIT & INTR_MASK) != (1 << CANIT));
	//Check if interrupt is the right one (BXOK).
	if((CANGIT & BXOK_MASK) != (1 << BXOK)) return 1;
	//reset mob RXOK flags
	for(j=0; j<8; j++){
 2f4:	88 30       	cpi	r24, 0x08	; 8
 2f6:	b9 f7       	brne	.-18     	; 0x2e6 <can_receive_frame_buffer+0x68>
 2f8:	ea ed       	ldi	r30, 0xDA	; 218
		CANPAGE = (j << 4);
		CANCDMOB = 0x00;
		CANSTMOB = 0x00;
	}
	//Reset interrupt register.
	CANGIT = CANGIT;
 2fa:	f0 e0       	ldi	r31, 0x00	; 0
 2fc:	80 81       	ld	r24, Z
 2fe:	80 83       	st	Z, r24
	//retrieve message.
	can_get_frame_buffer(message);
 300:	c7 01       	movw	r24, r14
 302:	23 df       	rcall	.-442    	; 0x14a <can_get_frame_buffer>
 304:	80 e0       	ldi	r24, 0x00	; 0
	return 0;
 306:	90 e0       	ldi	r25, 0x00	; 0
 308:	02 c0       	rjmp	.+4      	; 0x30e <can_receive_frame_buffer+0x90>
 30a:	81 e0       	ldi	r24, 0x01	; 1
		CANCDMOB = (1 << CONMOB0) | (1 << CONMOB1) | (1 << DLC3);
	}
	//wait for interrupt.
	while((CANGIT & INTR_MASK) != (1 << CANIT));
	//Check if interrupt is the right one (BXOK).
	if((CANGIT & BXOK_MASK) != (1 << BXOK)) return 1;
 30c:	90 e0       	ldi	r25, 0x00	; 0
 30e:	df 91       	pop	r29
	//Reset interrupt register.
	CANGIT = CANGIT;
	//retrieve message.
	can_get_frame_buffer(message);
	return 0;
}
 310:	cf 91       	pop	r28
 312:	1f 91       	pop	r17
 314:	0f 91       	pop	r16
 316:	ff 90       	pop	r15
 318:	ef 90       	pop	r14
 31a:	df 90       	pop	r13
 31c:	cf 90       	pop	r12
 31e:	08 95       	ret

00000320 <buttons_init>:

volatile state_t state = IDLE_S;
volatile event_t event = NULL_E;

void buttons_init(){
	DDRE = 0x00;
 320:	1d b8       	out	0x0d, r1	; 13
	PORTE = 1 << PE4 | 1 << PE5 | 1 << PE6 | 1 << PE7;
 322:	80 ef       	ldi	r24, 0xF0	; 240
 324:	8e b9       	out	0x0e, r24	; 14
	EICRB = 1 << ISC40 | 1 << ISC41 | 1 << ISC50 | 1 << ISC51 | 1 << ISC60 | 1 << ISC61 | 1 << ISC70 | 1 << ISC71; // set interrupt on falling edge.
 326:	9f ef       	ldi	r25, 0xFF	; 255
 328:	90 93 6a 00 	sts	0x006A, r25	; 0x80006a <__TEXT_REGION_LENGTH__+0x7e006a>
	EIMSK = 1 << INT4 | 1 << INT5 | 1 << INT6 | 1 << INT7;
 32c:	8d bb       	out	0x1d, r24	; 29
 32e:	08 95       	ret

00000330 <__vector_18>:
}



ISR (CANIT_vect){
 330:	1f 92       	push	r1
 332:	0f 92       	push	r0
 334:	0f b6       	in	r0, 0x3f	; 63
 336:	0f 92       	push	r0
 338:	11 24       	eor	r1, r1
	 uart_puts(hex);
	 
	 CANSTMOB=0x00;
	 CANGIT = CANGIT;
	 */
}
 33a:	0f 90       	pop	r0
 33c:	0f be       	out	0x3f, r0	; 63
 33e:	0f 90       	pop	r0
 340:	1f 90       	pop	r1
 342:	18 95       	reti

00000344 <run>:

int run()
{
 344:	cf 93       	push	r28
 346:	df 93       	push	r29
 348:	cd b7       	in	r28, 0x3d	; 61
 34a:	de b7       	in	r29, 0x3e	; 62
 34c:	c8 58       	subi	r28, 0x88	; 136
 34e:	d1 09       	sbc	r29, r1
 350:	0f b6       	in	r0, 0x3f	; 63
 352:	f8 94       	cli
 354:	de bf       	out	0x3e, r29	; 62
 356:	0f be       	out	0x3f, r0	; 63
 358:	cd bf       	out	0x3d, r28	; 61
	uart_puts("idle");
 35a:	80 e4       	ldi	r24, 0x40	; 64
 35c:	91 e0       	ldi	r25, 0x01	; 1
 35e:	45 d0       	rcall	.+138    	; 0x3ea <uart_puts>
	uint8_t message[8];
	can_receive_message(0, 0x00, 0x00, message);
 360:	9e 01       	movw	r18, r28
 362:	2f 5f       	subi	r18, 0xFF	; 255
 364:	3f 4f       	sbci	r19, 0xFF	; 255
 366:	40 e0       	ldi	r20, 0x00	; 0
 368:	60 e0       	ldi	r22, 0x00	; 0
 36a:	80 e0       	ldi	r24, 0x00	; 0
 36c:	34 df       	rcall	.-408    	; 0x1d6 <can_receive_message>
	uart_puts("authentication started");
 36e:	85 e4       	ldi	r24, 0x45	; 69
 370:	91 e0       	ldi	r25, 0x01	; 1
 372:	3b d0       	rcall	.+118    	; 0x3ea <uart_puts>
	uint8_t challenge[64] = { 0 , 1 , 2 , 3 , 4 , 5 , 6 , 7 , 1 , 1 , 2 , 3 , 4 , 5 , 6 , 7 , 2 , 1 , 2 , 3 , 4 , 5 , 6 , 7 , 3 , 1 , 2 , 3 , 4 , 5 , 6 , 7 , 4 , 1 , 2 , 3 , 4 , 5 , 6 , 7 , 5 , 1 , 2 , 3 , 4 , 5 , 6 , 7 , 6 , 1 , 2 , 3 , 4 , 5 , 6 , 7 , 7 , 1 , 2 , 3 , 4 , 5 , 6 , 7 };
 374:	80 e4       	ldi	r24, 0x40	; 64
 376:	e0 e0       	ldi	r30, 0x00	; 0
 378:	f1 e0       	ldi	r31, 0x01	; 1
 37a:	de 01       	movw	r26, r28
 37c:	19 96       	adiw	r26, 0x09	; 9
 37e:	01 90       	ld	r0, Z+
 380:	0d 92       	st	X+, r0
 382:	8a 95       	dec	r24
	can_send_frame_buffer(challenge);
 384:	e1 f7       	brne	.-8      	; 0x37e <run+0x3a>
 386:	ce 01       	movw	r24, r28
 388:	09 96       	adiw	r24, 0x09	; 9
	uart_puts("challenge sent");
 38a:	65 df       	rcall	.-310    	; 0x256 <can_send_frame_buffer>
 38c:	8c e5       	ldi	r24, 0x5C	; 92
 38e:	91 e0       	ldi	r25, 0x01	; 1
	uint8_t signature[64];
	can_receive_frame_buffer(signature);
 390:	2c d0       	rcall	.+88     	; 0x3ea <uart_puts>
 392:	ce 01       	movw	r24, r28
 394:	87 5b       	subi	r24, 0xB7	; 183
 396:	9f 4f       	sbci	r25, 0xFF	; 255
	uart_puts("signature received");
 398:	72 df       	rcall	.-284    	; 0x27e <can_receive_frame_buffer>
 39a:	8b e6       	ldi	r24, 0x6B	; 107
 39c:	91 e0       	ldi	r25, 0x01	; 1
	can_send_message(0, 0x00, message);
 39e:	25 d0       	rcall	.+74     	; 0x3ea <uart_puts>
 3a0:	ae 01       	movw	r20, r28
 3a2:	4f 5f       	subi	r20, 0xFF	; 255
 3a4:	5f 4f       	sbci	r21, 0xFF	; 255
 3a6:	60 e0       	ldi	r22, 0x00	; 0
 3a8:	80 e0       	ldi	r24, 0x00	; 0
 3aa:	02 df       	rcall	.-508    	; 0x1b0 <can_send_message>
	return 0;
}
 3ac:	80 e0       	ldi	r24, 0x00	; 0
 3ae:	90 e0       	ldi	r25, 0x00	; 0
 3b0:	c8 57       	subi	r28, 0x78	; 120
 3b2:	df 4f       	sbci	r29, 0xFF	; 255
 3b4:	0f b6       	in	r0, 0x3f	; 63
 3b6:	f8 94       	cli
 3b8:	de bf       	out	0x3e, r29	; 62
 3ba:	0f be       	out	0x3f, r0	; 63
 3bc:	cd bf       	out	0x3d, r28	; 61
 3be:	df 91       	pop	r29
 3c0:	cf 91       	pop	r28
 3c2:	08 95       	ret

000003c4 <main>:


 int main()
 {	
	uart_init();
 3c4:	06 d0       	rcall	.+12     	; 0x3d2 <uart_init>
	buttons_init();
 3c6:	ac df       	rcall	.-168    	; 0x320 <buttons_init>
	can_init();
 3c8:	83 de       	rcall	.-762    	; 0xd0 <can_init>
 3ca:	bc df       	rcall	.-136    	; 0x344 <run>
	run();
 3cc:	80 e0       	ldi	r24, 0x00	; 0
 3ce:	90 e0       	ldi	r25, 0x00	; 0
 }
 3d0:	08 95       	ret

000003d2 <uart_init>:
 3d2:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
#include <string.h>
#include "uart_f.h"

void uart_init(){
	UBRR0H = (BAUD_PRESCALE >> 8); // Load upper 8-bits of the baud rate value into the high byte of the UBRR register
	UBRR0L = BAUD_PRESCALE; // Load lower 8-bits of the baud rate value into the low byte of the UBRR register
 3d6:	83 e3       	ldi	r24, 0x33	; 51
 3d8:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
	UCSR0C = (0<<UMSEL0) | (0<<UPM0) | (1<<USBS0) | (3<<UCSZ0);
 3dc:	8e e0       	ldi	r24, 0x0E	; 14
 3de:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>
	UCSR0B = (1<<RXEN0) | (1<<TXEN0);
 3e2:	88 e1       	ldi	r24, 0x18	; 24
 3e4:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
 3e8:	08 95       	ret

000003ea <uart_puts>:
}

void uart_puts(char* s){
 3ea:	cf 93       	push	r28
 3ec:	df 93       	push	r29
	int i;
	int len = strlen(s);
 3ee:	fc 01       	movw	r30, r24
 3f0:	01 90       	ld	r0, Z+
 3f2:	00 20       	and	r0, r0
 3f4:	e9 f7       	brne	.-6      	; 0x3f0 <uart_puts+0x6>
 3f6:	31 97       	sbiw	r30, 0x01	; 1
 3f8:	e8 1b       	sub	r30, r24
 3fa:	f9 0b       	sbc	r31, r25
	for (i = 0; i < len; i++){
 3fc:	1e 16       	cp	r1, r30
 3fe:	1f 06       	cpc	r1, r31
 400:	84 f4       	brge	.+32     	; 0x422 <__LOCK_REGION_LENGTH__+0x22>
 402:	dc 01       	movw	r26, r24
 404:	9c 01       	movw	r18, r24
 406:	2e 0f       	add	r18, r30
 408:	3f 1f       	adc	r19, r31
		while(!( UCSR0A & 0X20));
 40a:	e0 ec       	ldi	r30, 0xC0	; 192
 40c:	f0 e0       	ldi	r31, 0x00	; 0
		UDR0=s[i];
 40e:	c6 ec       	ldi	r28, 0xC6	; 198
 410:	d0 e0       	ldi	r29, 0x00	; 0

void uart_puts(char* s){
	int i;
	int len = strlen(s);
	for (i = 0; i < len; i++){
		while(!( UCSR0A & 0X20));
 412:	90 81       	ld	r25, Z
 414:	95 ff       	sbrs	r25, 5
 416:	fd cf       	rjmp	.-6      	; 0x412 <__LOCK_REGION_LENGTH__+0x12>
		UDR0=s[i];
 418:	9d 91       	ld	r25, X+
 41a:	98 83       	st	Y, r25
}

void uart_puts(char* s){
	int i;
	int len = strlen(s);
	for (i = 0; i < len; i++){
 41c:	a2 17       	cp	r26, r18
 41e:	b3 07       	cpc	r27, r19
 420:	c1 f7       	brne	.-16     	; 0x412 <__LOCK_REGION_LENGTH__+0x12>
		while(!( UCSR0A & 0X20));
		UDR0=s[i];
	}
	while(!( UCSR0A & 0X20));
 422:	e0 ec       	ldi	r30, 0xC0	; 192
 424:	f0 e0       	ldi	r31, 0x00	; 0
 426:	80 81       	ld	r24, Z
 428:	85 ff       	sbrs	r24, 5
 42a:	fd cf       	rjmp	.-6      	; 0x426 <__LOCK_REGION_LENGTH__+0x26>
	UDR0 = 13;
 42c:	8d e0       	ldi	r24, 0x0D	; 13
 42e:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
	while(!( UCSR0A & 0X20));
 432:	e0 ec       	ldi	r30, 0xC0	; 192
 434:	f0 e0       	ldi	r31, 0x00	; 0
 436:	80 81       	ld	r24, Z
 438:	85 ff       	sbrs	r24, 5
 43a:	fd cf       	rjmp	.-6      	; 0x436 <__LOCK_REGION_LENGTH__+0x36>
	UDR0 = 10;
 43c:	8a e0       	ldi	r24, 0x0A	; 10
 43e:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
}
 442:	df 91       	pop	r29
 444:	cf 91       	pop	r28
 446:	08 95       	ret

00000448 <_exit>:
 448:	f8 94       	cli

0000044a <__stop_program>:
 44a:	ff cf       	rjmp	.-2      	; 0x44a <__stop_program>
