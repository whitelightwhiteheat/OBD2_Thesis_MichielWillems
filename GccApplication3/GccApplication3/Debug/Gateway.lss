
Gateway.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000454  00800100  00005c18  00005cac  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00005c18  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000009  00800554  00800554  00006100  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00006100  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00006130  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000004a0  00000000  00000000  00006170  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000b2b9  00000000  00000000  00006610  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001df9  00000000  00000000  000118c9  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00003377  00000000  00000000  000136c2  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000016e4  00000000  00000000  00016a3c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000148d  00000000  00000000  00018120  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00008706  00000000  00000000  000195ad  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000498  00000000  00000000  00021cb3  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	39 c2       	rjmp	.+1138   	; 0x474 <__ctors_end>
       2:	00 00       	nop
       4:	56 c2       	rjmp	.+1196   	; 0x4b2 <__bad_interrupt>
       6:	00 00       	nop
       8:	54 c2       	rjmp	.+1192   	; 0x4b2 <__bad_interrupt>
       a:	00 00       	nop
       c:	52 c2       	rjmp	.+1188   	; 0x4b2 <__bad_interrupt>
       e:	00 00       	nop
      10:	50 c2       	rjmp	.+1184   	; 0x4b2 <__bad_interrupt>
      12:	00 00       	nop
      14:	4e c2       	rjmp	.+1180   	; 0x4b2 <__bad_interrupt>
      16:	00 00       	nop
      18:	4c c2       	rjmp	.+1176   	; 0x4b2 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	4a c2       	rjmp	.+1172   	; 0x4b2 <__bad_interrupt>
      1e:	00 00       	nop
      20:	0c 94 52 18 	jmp	0x30a4	; 0x30a4 <__vector_8>
      24:	46 c2       	rjmp	.+1164   	; 0x4b2 <__bad_interrupt>
      26:	00 00       	nop
      28:	44 c2       	rjmp	.+1160   	; 0x4b2 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	42 c2       	rjmp	.+1156   	; 0x4b2 <__bad_interrupt>
      2e:	00 00       	nop
      30:	40 c2       	rjmp	.+1152   	; 0x4b2 <__bad_interrupt>
      32:	00 00       	nop
      34:	3e c2       	rjmp	.+1148   	; 0x4b2 <__bad_interrupt>
      36:	00 00       	nop
      38:	3c c2       	rjmp	.+1144   	; 0x4b2 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	3a c2       	rjmp	.+1140   	; 0x4b2 <__bad_interrupt>
      3e:	00 00       	nop
      40:	38 c2       	rjmp	.+1136   	; 0x4b2 <__bad_interrupt>
      42:	00 00       	nop
      44:	36 c2       	rjmp	.+1132   	; 0x4b2 <__bad_interrupt>
      46:	00 00       	nop
      48:	34 c2       	rjmp	.+1128   	; 0x4b2 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	32 c2       	rjmp	.+1124   	; 0x4b2 <__bad_interrupt>
      4e:	00 00       	nop
      50:	30 c2       	rjmp	.+1120   	; 0x4b2 <__bad_interrupt>
      52:	00 00       	nop
      54:	2e c2       	rjmp	.+1116   	; 0x4b2 <__bad_interrupt>
      56:	00 00       	nop
      58:	2c c2       	rjmp	.+1112   	; 0x4b2 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	2a c2       	rjmp	.+1108   	; 0x4b2 <__bad_interrupt>
      5e:	00 00       	nop
      60:	28 c2       	rjmp	.+1104   	; 0x4b2 <__bad_interrupt>
      62:	00 00       	nop
      64:	26 c2       	rjmp	.+1100   	; 0x4b2 <__bad_interrupt>
      66:	00 00       	nop
      68:	24 c2       	rjmp	.+1096   	; 0x4b2 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	22 c2       	rjmp	.+1092   	; 0x4b2 <__bad_interrupt>
      6e:	00 00       	nop
      70:	20 c2       	rjmp	.+1088   	; 0x4b2 <__bad_interrupt>
      72:	00 00       	nop
      74:	1e c2       	rjmp	.+1084   	; 0x4b2 <__bad_interrupt>
      76:	00 00       	nop
      78:	1c c2       	rjmp	.+1080   	; 0x4b2 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	1a c2       	rjmp	.+1076   	; 0x4b2 <__bad_interrupt>
      7e:	00 00       	nop
      80:	18 c2       	rjmp	.+1072   	; 0x4b2 <__bad_interrupt>
      82:	00 00       	nop
      84:	16 c2       	rjmp	.+1068   	; 0x4b2 <__bad_interrupt>
      86:	00 00       	nop
      88:	14 c2       	rjmp	.+1064   	; 0x4b2 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	12 c2       	rjmp	.+1060   	; 0x4b2 <__bad_interrupt>
      8e:	00 00       	nop
      90:	10 c2       	rjmp	.+1056   	; 0x4b2 <__bad_interrupt>
	...

00000094 <__trampolines_end>:
      94:	67 e6       	ldi	r22, 0x67	; 103
      96:	09 6a       	ori	r16, 0xA9	; 169
      98:	85 ae       	std	Z+61, r8	; 0x3d
      9a:	67 bb       	out	0x17, r22	; 23
      9c:	72 f3       	brmi	.-36     	; 0x7a <__SREG__+0x3b>
      9e:	6e 3c       	cpi	r22, 0xCE	; 206
      a0:	3a f5       	brpl	.+78     	; 0xf0 <sha2_large_common_const+0x3c>
      a2:	4f a5       	ldd	r20, Y+47	; 0x2f
      a4:	7f 52       	subi	r23, 0x2F	; 47
      a6:	0e 51       	subi	r16, 0x1E	; 30
      a8:	8c 68       	ori	r24, 0x8C	; 140
      aa:	05 9b       	sbis	0x00, 5	; 0
      ac:	ab d9       	rcall	.-3242   	; 0xfffff404 <__eeprom_end+0xff7ef404>
      ae:	83 1f       	adc	r24, r19
      b0:	19 cd       	rjmp	.-1486   	; 0xfffffae4 <__eeprom_end+0xff7efae4>
      b2:	e0 5b       	subi	r30, 0xB0	; 176

000000b4 <sha2_large_common_const>:
      b4:	22 ae 28 d7 98 2f 8a 42 cd 65 ef 23 91 44 37 71     ".(../.B.e.#.D7q
      c4:	2f 3b 4d ec cf fb c0 b5 bc db 89 81 a5 db b5 e9     /;M.............
      d4:	38 b5 48 f3 5b c2 56 39 19 d0 05 b6 f1 11 f1 59     8.H.[.V9.......Y
      e4:	9b 4f 19 af a4 82 3f 92 18 81 6d da d5 5e 1c ab     .O....?...m..^..
      f4:	42 02 03 a3 98 aa 07 d8 be 6f 70 45 01 5b 83 12     B........opE.[..
     104:	8c b2 e4 4e be 85 31 24 e2 b4 ff d5 c3 7d 0c 55     ...N..1$.....}.U
     114:	6f 89 7b f2 74 5d be 72 b1 96 16 3b fe b1 de 80     o.{.t].r...;....
     124:	35 12 c7 25 a7 06 dc 9b 94 26 69 cf 74 f1 9b c1     5..%.....&i.t...
     134:	d2 4a f1 9e c1 69 9b e4 e3 25 4f 38 86 47 be ef     .J...i...%O8.G..
     144:	b5 d5 8c 8b c6 9d c1 0f 65 9c ac 77 cc a1 0c 24     ........e..w...$
     154:	75 02 2b 59 6f 2c e9 2d 83 e4 a6 6e aa 84 74 4a     u.+Yo,.-...n..tJ
     164:	d4 fb 41 bd dc a9 b0 5c b5 53 11 83 da 88 f9 76     ..A....\.S.....v
     174:	ab df 66 ee 52 51 3e 98 10 32 b4 2d 6d c6 31 a8     ..f.RQ>..2.-m.1.
     184:	3f 21 fb 98 c8 27 03 b0 e4 0e ef be c7 7f 59 bf     ?!...'........Y.
     194:	c2 8f a8 3d f3 0b e0 c6 25 a7 0a 93 47 91 a7 d5     ...=....%...G...
     1a4:	6f 82 03 e0 51 63 ca 06 70 6e 0e 0a 67 29 29 14     o...Qc..pn..g)).
     1b4:	fc 2f d2 46 85 0a b7 27 26 c9 26 5c 38 21 1b 2e     ./.F...'&.&\8!..
     1c4:	ed 2a c4 5a fc 6d 2c 4d df b3 95 9d 13 0d 38 53     .*.Z.m,M......8S
     1d4:	de 63 af 8b 54 73 0a 65 a8 b2 77 3c bb 0a 6a 76     .c..Ts.e..w<..jv
     1e4:	e6 ae ed 47 2e c9 c2 81 3b 35 82 14 85 2c 72 92     ...G....;5...,r.
     1f4:	64 03 f1 4c a1 e8 bf a2 01 30 42 bc 4b 66 1a a8     d..L.....0B.Kf..
     204:	91 97 f8 d0 70 8b 4b c2 30 be 54 06 a3 51 6c c7     ....p.K.0.T..Ql.
     214:	18 52 ef d6 19 e8 92 d1 10 a9 65 55 24 06 99 d6     .R........eU$...
     224:	2a 20 71 57 85 35 0e f4 b8 d1 bb 32 70 a0 6a 10     * qW.5.....2p.j.
     234:	c8 d0 d2 b8 16 c1 a4 19 53 ab 41 51 08 6c 37 1e     ........S.AQ.l7.
     244:	99 eb 8e df 4c 77 48 27 a8 48 9b e1 b5 bc b0 34     ....LwH'.H.....4
     254:	63 5a c9 c5 b3 0c 1c 39 cb 8a 41 e3 4a aa d8 4e     cZ.....9..A.J..N
     264:	73 e3 63 77 4f ca 9c 5b a3 b8 b2 d6 f3 6f 2e 68     s.cwO..[.....o.h
     274:	fc b2 ef 5d ee 82 8f 74 60 2f 17 43 6f 63 a5 78     ...]...t`/.Coc.x
     284:	72 ab f0 a1 14 78 c8 84 ec 39 64 1a 08 02 c7 8c     r....x...9d.....
     294:	28 1e 63 23 fa ff be 90 e9 bd 82 de eb 6c 50 a4     (.c#.........lP.
     2a4:	15 79 c6 b2 f7 a3 f9 be 2b 53 72 e3 f2 78 71 c6     .y......+Sr..xq.
     2b4:	9c 61 26 ea ce 3e 27 ca 07 c2 c0 21 c7 b8 86 d1     .a&..>'....!....
     2c4:	1e eb e0 cd d6 7d da ea 78 d1 6e ee 7f 4f 7d f5     .....}..x.n..O}.
     2d4:	ba 6f 17 72 aa 67 f0 06 a6 98 c8 a2 c5 7d 63 0a     .o.r.g.......}c.
     2e4:	ae 0d f9 be 04 98 3f 11 1b 47 1c 13 35 0b 71 1b     ......?..G..5.q.
     2f4:	84 7d 04 23 f5 77 db 28 93 24 c7 40 7b ab ca 32     .}.#.w.(.$.@{..2
     304:	bc be c9 15 0a be 9e 3c 4c 0d 10 9c c4 67 1d 43     .......<L....g.C
     314:	b6 42 3e cb be d4 c5 4c 2a 7e 65 fc 9c 29 7f 59     .B>....L*~e..).Y
     324:	ec fa d6 3a ab 6f cb 5f 17 58 47 4a 8c 19 44 6c     ...:.o._.XGJ..Dl

00000334 <k>:
     334:	98 2f 8a 42 91 44 37 71 cf fb c0 b5 a5 db b5 e9     ./.B.D7q........
     344:	5b c2 56 39 f1 11 f1 59 a4 82 3f 92 d5 5e 1c ab     [.V9...Y..?..^..
     354:	98 aa 07 d8 01 5b 83 12 be 85 31 24 c3 7d 0c 55     .....[....1$.}.U
     364:	74 5d be 72 fe b1 de 80 a7 06 dc 9b 74 f1 9b c1     t].r........t...
     374:	c1 69 9b e4 86 47 be ef c6 9d c1 0f cc a1 0c 24     .i...G.........$
     384:	6f 2c e9 2d aa 84 74 4a dc a9 b0 5c da 88 f9 76     o,.-..tJ...\...v
     394:	52 51 3e 98 6d c6 31 a8 c8 27 03 b0 c7 7f 59 bf     RQ>.m.1..'....Y.
     3a4:	f3 0b e0 c6 47 91 a7 d5 51 63 ca 06 67 29 29 14     ....G...Qc..g)).
     3b4:	85 0a b7 27 38 21 1b 2e fc 6d 2c 4d 13 0d 38 53     ...'8!...m,M..8S
     3c4:	54 73 0a 65 bb 0a 6a 76 2e c9 c2 81 85 2c 72 92     Ts.e..jv.....,r.
     3d4:	a1 e8 bf a2 4b 66 1a a8 70 8b 4b c2 a3 51 6c c7     ....Kf..p.K..Ql.
     3e4:	19 e8 92 d1 24 06 99 d6 85 35 0e f4 70 a0 6a 10     ....$....5..p.j.
     3f4:	16 c1 a4 19 08 6c 37 1e 4c 77 48 27 b5 bc b0 34     .....l7.LwH'...4
     404:	b3 0c 1c 39 4a aa d8 4e 4f ca 9c 5b f3 6f 2e 68     ...9J..NO..[.o.h
     414:	ee 82 8f 74 6f 63 a5 78 14 78 c8 84 08 02 c7 8c     ...toc.x.x......
     424:	fa ff be 90 eb 6c 50 a4 f7 a3 f9 be f2 78 71 c6     .....lP......xq.

00000434 <sha512_init_values>:
     434:	08 c9 bc f3 67 e6 09 6a 3b a7 ca 84 85 ae 67 bb     ....g..j;.....g.
     444:	2b f8 94 fe 72 f3 6e 3c f1 36 1d 5f 3a f5 4f a5     +...r.n<.6._:.O.
     454:	d1 82 e6 ad 7f 52 0e 51 1f 6c 3e 2b 8c 68 05 9b     .....R.Q.l>+.h..
     464:	6b bd 41 fb ab d9 83 1f 79 21 7e 13 19 cd e0 5b     k.A.....y!~....[

00000474 <__ctors_end>:
     474:	11 24       	eor	r1, r1
     476:	1f be       	out	0x3f, r1	; 63
     478:	cf ef       	ldi	r28, 0xFF	; 255
     47a:	d0 e1       	ldi	r29, 0x10	; 16
     47c:	de bf       	out	0x3e, r29	; 62
     47e:	cd bf       	out	0x3d, r28	; 61

00000480 <__do_copy_data>:
     480:	15 e0       	ldi	r17, 0x05	; 5
     482:	a0 e0       	ldi	r26, 0x00	; 0
     484:	b1 e0       	ldi	r27, 0x01	; 1
     486:	e8 e1       	ldi	r30, 0x18	; 24
     488:	fc e5       	ldi	r31, 0x5C	; 92
     48a:	00 e0       	ldi	r16, 0x00	; 0
     48c:	0b bf       	out	0x3b, r16	; 59
     48e:	02 c0       	rjmp	.+4      	; 0x494 <__do_copy_data+0x14>
     490:	07 90       	elpm	r0, Z+
     492:	0d 92       	st	X+, r0
     494:	a4 35       	cpi	r26, 0x54	; 84
     496:	b1 07       	cpc	r27, r17
     498:	d9 f7       	brne	.-10     	; 0x490 <__do_copy_data+0x10>

0000049a <__do_clear_bss>:
     49a:	25 e0       	ldi	r18, 0x05	; 5
     49c:	a4 e5       	ldi	r26, 0x54	; 84
     49e:	b5 e0       	ldi	r27, 0x05	; 5
     4a0:	01 c0       	rjmp	.+2      	; 0x4a4 <.do_clear_bss_start>

000004a2 <.do_clear_bss_loop>:
     4a2:	1d 92       	st	X+, r1

000004a4 <.do_clear_bss_start>:
     4a4:	ad 35       	cpi	r26, 0x5D	; 93
     4a6:	b2 07       	cpc	r27, r18
     4a8:	e1 f7       	brne	.-8      	; 0x4a2 <.do_clear_bss_loop>
     4aa:	0e 94 75 1a 	call	0x34ea	; 0x34ea <main>
     4ae:	0c 94 0a 2e 	jmp	0x5c14	; 0x5c14 <_exit>

000004b2 <__bad_interrupt>:
     4b2:	a6 cd       	rjmp	.-1204   	; 0x0 <__vectors>

000004b4 <set_page>:
	uint8_t message[8] = {0};
	can_get_message(mobnr , message);
	char hex[16] = "";
	bytes_to_hex(message, 8, hex);
	uart_puts(hex);
}
     4b4:	20 e1       	ldi	r18, 0x10	; 16
     4b6:	82 9f       	mul	r24, r18
     4b8:	c0 01       	movw	r24, r0
     4ba:	11 24       	eor	r1, r1
     4bc:	88 60       	ori	r24, 0x08	; 8
     4be:	80 93 ed 00 	sts	0x00ED, r24	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7e00ed>
     4c2:	08 95       	ret

000004c4 <can_init>:
     4c4:	cf 93       	push	r28
     4c6:	df 93       	push	r29
     4c8:	f8 94       	cli
     4ca:	81 e0       	ldi	r24, 0x01	; 1
     4cc:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
     4d0:	84 e3       	ldi	r24, 0x34	; 52
     4d2:	80 93 db 00 	sts	0x00DB, r24	; 0x8000db <__TEXT_REGION_LENGTH__+0x7e00db>
     4d6:	10 92 da 00 	sts	0x00DA, r1	; 0x8000da <__TEXT_REGION_LENGTH__+0x7e00da>
     4da:	20 e0       	ldi	r18, 0x00	; 0
     4dc:	4d ee       	ldi	r20, 0xED	; 237
     4de:	50 e0       	ldi	r21, 0x00	; 0
     4e0:	cf ee       	ldi	r28, 0xEF	; 239
     4e2:	d0 e0       	ldi	r29, 0x00	; 0
     4e4:	6e ee       	ldi	r22, 0xEE	; 238
     4e6:	70 e0       	ldi	r23, 0x00	; 0
     4e8:	ea ef       	ldi	r30, 0xFA	; 250
     4ea:	f0 e0       	ldi	r31, 0x00	; 0
     4ec:	82 2f       	mov	r24, r18
     4ee:	82 95       	swap	r24
     4f0:	80 7f       	andi	r24, 0xF0	; 240
     4f2:	da 01       	movw	r26, r20
     4f4:	8c 93       	st	X, r24
     4f6:	18 82       	st	Y, r1
     4f8:	db 01       	movw	r26, r22
     4fa:	1c 92       	st	X, r1
     4fc:	88 e0       	ldi	r24, 0x08	; 8
     4fe:	90 e0       	ldi	r25, 0x00	; 0
     500:	10 82       	st	Z, r1
     502:	01 97       	sbiw	r24, 0x01	; 1
     504:	e9 f7       	brne	.-6      	; 0x500 <can_init+0x3c>
     506:	2f 5f       	subi	r18, 0xFF	; 255
     508:	2f 30       	cpi	r18, 0x0F	; 15
     50a:	81 f7       	brne	.-32     	; 0x4ec <can_init+0x28>
     50c:	88 e0       	ldi	r24, 0x08	; 8
     50e:	80 93 ed 00 	sts	0x00ED, r24	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7e00ed>
     512:	86 e0       	ldi	r24, 0x06	; 6
     514:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
     518:	8c e0       	ldi	r24, 0x0C	; 12
     51a:	80 93 e3 00 	sts	0x00E3, r24	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7e00e3>
     51e:	87 e3       	ldi	r24, 0x37	; 55
     520:	80 93 e4 00 	sts	0x00E4, r24	; 0x8000e4 <__TEXT_REGION_LENGTH__+0x7e00e4>
     524:	10 92 e5 00 	sts	0x00E5, r1	; 0x8000e5 <__TEXT_REGION_LENGTH__+0x7e00e5>
     528:	82 e0       	ldi	r24, 0x02	; 2
     52a:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
     52e:	78 94       	sei
     530:	df 91       	pop	r29
     532:	cf 91       	pop	r28
     534:	08 95       	ret

00000536 <can_get_message>:
     536:	1f 93       	push	r17
     538:	cf 93       	push	r28
     53a:	df 93       	push	r29
     53c:	18 2f       	mov	r17, r24
     53e:	eb 01       	movw	r28, r22
     540:	b9 df       	rcall	.-142    	; 0x4b4 <set_page>
     542:	20 e1       	ldi	r18, 0x10	; 16
     544:	12 9f       	mul	r17, r18
     546:	c0 01       	movw	r24, r0
     548:	11 24       	eor	r1, r1
     54a:	88 60       	ori	r24, 0x08	; 8
     54c:	90 e0       	ldi	r25, 0x00	; 0
     54e:	ad ee       	ldi	r26, 0xED	; 237
     550:	b0 e0       	ldi	r27, 0x00	; 0
     552:	ea ef       	ldi	r30, 0xFA	; 250
     554:	f0 e0       	ldi	r31, 0x00	; 0
     556:	29 2f       	mov	r18, r25
     558:	28 2b       	or	r18, r24
     55a:	2c 93       	st	X, r18
     55c:	20 81       	ld	r18, Z
     55e:	29 93       	st	Y+, r18
     560:	9f 5f       	subi	r25, 0xFF	; 255
     562:	98 30       	cpi	r25, 0x08	; 8
     564:	c1 f7       	brne	.-16     	; 0x556 <can_get_message+0x20>
     566:	80 93 ed 00 	sts	0x00ED, r24	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7e00ed>
     56a:	df 91       	pop	r29
     56c:	cf 91       	pop	r28
     56e:	1f 91       	pop	r17
     570:	08 95       	ret

00000572 <can_get_frame_buffer>:
     572:	0f 93       	push	r16
     574:	1f 93       	push	r17
     576:	cf 93       	push	r28
     578:	df 93       	push	r29
     57a:	8c 01       	movw	r16, r24
     57c:	d6 2f       	mov	r29, r22
     57e:	66 23       	and	r22, r22
     580:	49 f0       	breq	.+18     	; 0x594 <can_get_frame_buffer+0x22>
     582:	c0 e0       	ldi	r28, 0x00	; 0
     584:	b8 01       	movw	r22, r16
     586:	8c 2f       	mov	r24, r28
     588:	d6 df       	rcall	.-84     	; 0x536 <can_get_message>
     58a:	08 5f       	subi	r16, 0xF8	; 248
     58c:	1f 4f       	sbci	r17, 0xFF	; 255
     58e:	cf 5f       	subi	r28, 0xFF	; 255
     590:	dc 13       	cpse	r29, r28
     592:	f8 cf       	rjmp	.-16     	; 0x584 <can_get_frame_buffer+0x12>
     594:	df 91       	pop	r29
     596:	cf 91       	pop	r28
     598:	1f 91       	pop	r17
     59a:	0f 91       	pop	r16
     59c:	08 95       	ret

0000059e <can_get_id>:

void can_get_id(uint8_t mobnr, can_id_t id){
     59e:	cf 93       	push	r28
     5a0:	df 93       	push	r29
     5a2:	eb 01       	movw	r28, r22
	set_page(mobnr);
     5a4:	87 df       	rcall	.-242    	; 0x4b4 <set_page>
	id[0] = CANIDT2 >> 5 | CANIDT1 << 3;
     5a6:	90 91 f2 00 	lds	r25, 0x00F2	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7e00f2>
     5aa:	e3 ef       	ldi	r30, 0xF3	; 243
     5ac:	f0 e0       	ldi	r31, 0x00	; 0
     5ae:	80 81       	ld	r24, Z
     5b0:	92 95       	swap	r25
     5b2:	96 95       	lsr	r25
     5b4:	97 70       	andi	r25, 0x07	; 7
     5b6:	88 0f       	add	r24, r24
     5b8:	88 0f       	add	r24, r24
     5ba:	88 0f       	add	r24, r24
     5bc:	89 2b       	or	r24, r25
     5be:	88 83       	st	Y, r24
	id[1] = CANIDT1 >> 5;
     5c0:	80 81       	ld	r24, Z
     5c2:	82 95       	swap	r24
     5c4:	86 95       	lsr	r24
     5c6:	87 70       	andi	r24, 0x07	; 7
     5c8:	89 83       	std	Y+1, r24	; 0x01
}
     5ca:	df 91       	pop	r29
     5cc:	cf 91       	pop	r28
     5ce:	08 95       	ret

000005d0 <can_init_id>:

void can_init_id ( can_id_t id){
     5d0:	fc 01       	movw	r30, r24
	CANIDT2 = id[0] << 5;
     5d2:	80 81       	ld	r24, Z
     5d4:	82 95       	swap	r24
     5d6:	88 0f       	add	r24, r24
     5d8:	80 7e       	andi	r24, 0xE0	; 224
     5da:	80 93 f2 00 	sts	0x00F2, r24	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7e00f2>
	CANIDT1 = id[0] >> 3 | id[1] << 5;
     5de:	20 81       	ld	r18, Z
     5e0:	26 95       	lsr	r18
     5e2:	26 95       	lsr	r18
     5e4:	26 95       	lsr	r18
     5e6:	91 81       	ldd	r25, Z+1	; 0x01
     5e8:	30 e2       	ldi	r19, 0x20	; 32
     5ea:	93 9f       	mul	r25, r19
     5ec:	c0 01       	movw	r24, r0
     5ee:	11 24       	eor	r1, r1
     5f0:	82 2b       	or	r24, r18
     5f2:	80 93 f3 00 	sts	0x00F3, r24	; 0x8000f3 <__TEXT_REGION_LENGTH__+0x7e00f3>
	//not a remote frame.
	CANIDT4 = 0 << RTRTAG;
     5f6:	10 92 f0 00 	sts	0x00F0, r1	; 0x8000f0 <__TEXT_REGION_LENGTH__+0x7e00f0>
     5fa:	08 95       	ret

000005fc <can_init_mask>:
	CANIDM2 = 255;
	CANIDM4 = (0 << RTRMSK) | (0 << IDEMSK);
}
*/

void can_init_mask (can_mask_t mask){
     5fc:	fc 01       	movw	r30, r24
	CANIDM2 = mask[0] << 5;
     5fe:	80 81       	ld	r24, Z
     600:	82 95       	swap	r24
     602:	88 0f       	add	r24, r24
     604:	80 7e       	andi	r24, 0xE0	; 224
     606:	80 93 f6 00 	sts	0x00F6, r24	; 0x8000f6 <__TEXT_REGION_LENGTH__+0x7e00f6>
	CANIDM1 = mask[0] >> 3 | mask[1] << 5;
     60a:	20 81       	ld	r18, Z
     60c:	26 95       	lsr	r18
     60e:	26 95       	lsr	r18
     610:	26 95       	lsr	r18
     612:	91 81       	ldd	r25, Z+1	; 0x01
     614:	30 e2       	ldi	r19, 0x20	; 32
     616:	93 9f       	mul	r25, r19
     618:	c0 01       	movw	r24, r0
     61a:	11 24       	eor	r1, r1
     61c:	82 2b       	or	r24, r18
     61e:	80 93 f7 00 	sts	0x00F7, r24	; 0x8000f7 <__TEXT_REGION_LENGTH__+0x7e00f7>
	//RTRMSK = 0 : We don't use remote frames ever.
	//IDEMSK = 0 : we don't use the extended format.
	CANIDM4 = (0 << RTRMSK) | (0 << IDEMSK);
     622:	10 92 f4 00 	sts	0x00F4, r1	; 0x8000f4 <__TEXT_REGION_LENGTH__+0x7e00f4>
     626:	08 95       	ret

00000628 <can_init_message>:
}

void can_init_message( uint8_t *message , uint8_t mobnr){
     628:	1f 93       	push	r17
     62a:	cf 93       	push	r28
     62c:	df 93       	push	r29
     62e:	ec 01       	movw	r28, r24
     630:	16 2f       	mov	r17, r22
	set_page(mobnr);
     632:	86 2f       	mov	r24, r22
     634:	3f df       	rcall	.-386    	; 0x4b4 <set_page>
     636:	80 e1       	ldi	r24, 0x10	; 16
     638:	18 9f       	mul	r17, r24
     63a:	b0 01       	movw	r22, r0
     63c:	11 24       	eor	r1, r1
     63e:	68 60       	ori	r22, 0x08	; 8
	uint8_t j;
	for(j=0; j<8; j++){
     640:	80 e0       	ldi	r24, 0x00	; 0
static void set_page(uint8_t mobnr){
	CANPAGE = (mobnr << 4) | PAGE_MASK;
}

static void set_page_indx(uint8_t indx, uint8_t mobnr){
	CANPAGE = (mobnr << 4) | PAGE_MASK | indx;
     642:	ad ee       	ldi	r26, 0xED	; 237
     644:	b0 e0       	ldi	r27, 0x00	; 0
void can_init_message( uint8_t *message , uint8_t mobnr){
	set_page(mobnr);
	uint8_t j;
	for(j=0; j<8; j++){
		set_page_indx(j, mobnr);
		CANMSG = *message;
     646:	ea ef       	ldi	r30, 0xFA	; 250
     648:	f0 e0       	ldi	r31, 0x00	; 0
static void set_page(uint8_t mobnr){
	CANPAGE = (mobnr << 4) | PAGE_MASK;
}

static void set_page_indx(uint8_t indx, uint8_t mobnr){
	CANPAGE = (mobnr << 4) | PAGE_MASK | indx;
     64a:	98 2f       	mov	r25, r24
     64c:	96 2b       	or	r25, r22
     64e:	9c 93       	st	X, r25
void can_init_message( uint8_t *message , uint8_t mobnr){
	set_page(mobnr);
	uint8_t j;
	for(j=0; j<8; j++){
		set_page_indx(j, mobnr);
		CANMSG = *message;
     650:	99 91       	ld	r25, Y+
     652:	90 83       	st	Z, r25
}

void can_init_message( uint8_t *message , uint8_t mobnr){
	set_page(mobnr);
	uint8_t j;
	for(j=0; j<8; j++){
     654:	8f 5f       	subi	r24, 0xFF	; 255
     656:	88 30       	cpi	r24, 0x08	; 8
     658:	c1 f7       	brne	.-16     	; 0x64a <can_init_message+0x22>
static void set_page(uint8_t mobnr){
	CANPAGE = (mobnr << 4) | PAGE_MASK;
}

static void set_page_indx(uint8_t indx, uint8_t mobnr){
	CANPAGE = (mobnr << 4) | PAGE_MASK | indx;
     65a:	60 93 ed 00 	sts	0x00ED, r22	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7e00ed>
		set_page_indx(j, mobnr);
		CANMSG = *message;
		message++;
	}
	set_page_indx(0, mobnr);
}
     65e:	df 91       	pop	r29
     660:	cf 91       	pop	r28
     662:	1f 91       	pop	r17
     664:	08 95       	ret

00000666 <can_send_message>:

int can_send_message( uint8_t mobnr , can_id_t id, can_msg_t message ){
     666:	ef 92       	push	r14
     668:	ff 92       	push	r15
     66a:	0f 93       	push	r16
     66c:	1f 93       	push	r17
     66e:	cf 93       	push	r28
     670:	c8 2f       	mov	r28, r24
     672:	7b 01       	movw	r14, r22
     674:	8a 01       	movw	r16, r20
	//select mob.
	set_page(mobnr);
     676:	1e df       	rcall	.-452    	; 0x4b4 <set_page>
	//copy ID.
	can_init_id(id);
     678:	c7 01       	movw	r24, r14
     67a:	aa df       	rcall	.-172    	; 0x5d0 <can_init_id>
	//copy message.
	can_init_message(message, mobnr);
     67c:	6c 2f       	mov	r22, r28
     67e:	c8 01       	movw	r24, r16
     680:	d3 df       	rcall	.-90     	; 0x628 <can_init_message>
	//enable transmission.
	CANCDMOB = (1 << CONMOB0) | (1 << DLC3);
     682:	88 e4       	ldi	r24, 0x48	; 72
     684:	80 93 ef 00 	sts	0x00EF, r24	; 0x8000ef <__TEXT_REGION_LENGTH__+0x7e00ef>
	//wait for transmission.
	while(CANSTMOB != (1 << TXOK));
     688:	ee ee       	ldi	r30, 0xEE	; 238
     68a:	f0 e0       	ldi	r31, 0x00	; 0
     68c:	80 81       	ld	r24, Z
     68e:	80 34       	cpi	r24, 0x40	; 64
     690:	e9 f7       	brne	.-6      	; 0x68c <can_send_message+0x26>
	//reset mob.
	CANSTMOB = 0x00;
     692:	10 92 ee 00 	sts	0x00EE, r1	; 0x8000ee <__TEXT_REGION_LENGTH__+0x7e00ee>
	CANCDMOB = 0x00;
     696:	10 92 ef 00 	sts	0x00EF, r1	; 0x8000ef <__TEXT_REGION_LENGTH__+0x7e00ef>
	return 0;
}
     69a:	80 e0       	ldi	r24, 0x00	; 0
     69c:	90 e0       	ldi	r25, 0x00	; 0
     69e:	cf 91       	pop	r28
     6a0:	1f 91       	pop	r17
     6a2:	0f 91       	pop	r16
     6a4:	ff 90       	pop	r15
     6a6:	ef 90       	pop	r14
     6a8:	08 95       	ret

000006aa <can_receive_message>:

int can_receive_message( uint8_t mobnr, can_id_t id, can_mask_t mask, can_msg_t message){
     6aa:	cf 92       	push	r12
     6ac:	df 92       	push	r13
     6ae:	ef 92       	push	r14
     6b0:	ff 92       	push	r15
     6b2:	0f 93       	push	r16
     6b4:	1f 93       	push	r17
     6b6:	cf 93       	push	r28
     6b8:	c8 2f       	mov	r28, r24
     6ba:	6b 01       	movw	r12, r22
     6bc:	7a 01       	movw	r14, r20
     6be:	89 01       	movw	r16, r18
	set_page(mobnr);
     6c0:	f9 de       	rcall	.-526    	; 0x4b4 <set_page>
	CANIE2 = (1 << mobnr);
     6c2:	81 e0       	ldi	r24, 0x01	; 1
     6c4:	90 e0       	ldi	r25, 0x00	; 0
     6c6:	0c 2e       	mov	r0, r28
     6c8:	02 c0       	rjmp	.+4      	; 0x6ce <can_receive_message+0x24>
     6ca:	88 0f       	add	r24, r24
     6cc:	99 1f       	adc	r25, r25
     6ce:	0a 94       	dec	r0
     6d0:	e2 f7       	brpl	.-8      	; 0x6ca <can_receive_message+0x20>
     6d2:	80 93 de 00 	sts	0x00DE, r24	; 0x8000de <__TEXT_REGION_LENGTH__+0x7e00de>
	can_init_id(id);
     6d6:	c6 01       	movw	r24, r12
     6d8:	7b df       	rcall	.-266    	; 0x5d0 <can_init_id>
	can_init_mask(mask);
     6da:	c7 01       	movw	r24, r14
     6dc:	8f df       	rcall	.-226    	; 0x5fc <can_init_mask>
     6de:	88 e8       	ldi	r24, 0x88	; 136
	//CAN standard rev 2.0 A (identifiers length = 11 bits)
	CANCDMOB = (1 << CONMOB1) | (1 << DLC3); //enable reception and data length code = 8 bytes
     6e0:	80 93 ef 00 	sts	0x00EF, r24	; 0x8000ef <__TEXT_REGION_LENGTH__+0x7e00ef>
     6e4:	ea ed       	ldi	r30, 0xDA	; 218
	//wait for interrupt
	while((CANGIT & INTR_MASK) != (1 << CANIT));
     6e6:	f0 e0       	ldi	r31, 0x00	; 0
     6e8:	80 81       	ld	r24, Z
     6ea:	88 23       	and	r24, r24
     6ec:	ec f7       	brge	.-6      	; 0x6e8 <can_receive_message+0x3e>
     6ee:	80 91 ee 00 	lds	r24, 0x00EE	; 0x8000ee <__TEXT_REGION_LENGTH__+0x7e00ee>
	//check if it is the right interrupt.
	if((CANSTMOB & RXOK_MASK) != (1 << RXOK)) return 1;
     6f2:	85 ff       	sbrs	r24, 5
     6f4:	10 c0       	rjmp	.+32     	; 0x716 <can_receive_message+0x6c>
     6f6:	10 92 ee 00 	sts	0x00EE, r1	; 0x8000ee <__TEXT_REGION_LENGTH__+0x7e00ee>
	//reset mob.
	CANSTMOB = 0x00;
     6fa:	10 92 ef 00 	sts	0x00EF, r1	; 0x8000ef <__TEXT_REGION_LENGTH__+0x7e00ef>
	CANCDMOB = 0x00;
     6fe:	10 92 de 00 	sts	0x00DE, r1	; 0x8000de <__TEXT_REGION_LENGTH__+0x7e00de>
	//reset interrupt enable
	CANIE2 = 0x00;
     702:	ea ed       	ldi	r30, 0xDA	; 218
	//reset interrupt register.
	CANGIT = CANGIT;
     704:	f0 e0       	ldi	r31, 0x00	; 0
     706:	80 81       	ld	r24, Z
     708:	80 83       	st	Z, r24
	//retrieve message.
	can_get_message(mobnr, message);
     70a:	b8 01       	movw	r22, r16
     70c:	8c 2f       	mov	r24, r28
     70e:	13 df       	rcall	.-474    	; 0x536 <can_get_message>
     710:	80 e0       	ldi	r24, 0x00	; 0
	return 0;
     712:	90 e0       	ldi	r25, 0x00	; 0
     714:	02 c0       	rjmp	.+4      	; 0x71a <can_receive_message+0x70>
     716:	81 e0       	ldi	r24, 0x01	; 1
	//CAN standard rev 2.0 A (identifiers length = 11 bits)
	CANCDMOB = (1 << CONMOB1) | (1 << DLC3); //enable reception and data length code = 8 bytes
	//wait for interrupt
	while((CANGIT & INTR_MASK) != (1 << CANIT));
	//check if it is the right interrupt.
	if((CANSTMOB & RXOK_MASK) != (1 << RXOK)) return 1;
     718:	90 e0       	ldi	r25, 0x00	; 0
     71a:	cf 91       	pop	r28
	//reset interrupt register.
	CANGIT = CANGIT;
	//retrieve message.
	can_get_message(mobnr, message);
	return 0;
}
     71c:	1f 91       	pop	r17
     71e:	0f 91       	pop	r16
     720:	ff 90       	pop	r15
     722:	ef 90       	pop	r14
     724:	df 90       	pop	r13
     726:	cf 90       	pop	r12
     728:	08 95       	ret

0000072a <can_send_frame_buffer>:
     72a:	ef 92       	push	r14

int can_send_frame_buffer( uint8_t *message, uint8_t buff_len ){
     72c:	ff 92       	push	r15
     72e:	0f 93       	push	r16
     730:	1f 93       	push	r17
     732:	cf 93       	push	r28
     734:	df 93       	push	r29
     736:	00 d0       	rcall	.+0      	; 0x738 <can_send_frame_buffer+0xe>
     738:	cd b7       	in	r28, 0x3d	; 61
     73a:	de b7       	in	r29, 0x3e	; 62
     73c:	7c 01       	movw	r14, r24
     73e:	06 2f       	mov	r16, r22
	uint8_t j = 0;
	for(j=0; j<buff_len; j++){
     740:	66 23       	and	r22, r22
     742:	79 f0       	breq	.+30     	; 0x762 <can_send_frame_buffer+0x38>
     744:	10 e0       	ldi	r17, 0x00	; 0
		can_id_t id = {j , 0x00};
     746:	19 83       	std	Y+1, r17	; 0x01
     748:	1a 82       	std	Y+2, r1	; 0x02
		can_send_message(j,id,message);
     74a:	a7 01       	movw	r20, r14
     74c:	be 01       	movw	r22, r28
     74e:	6f 5f       	subi	r22, 0xFF	; 255
     750:	7f 4f       	sbci	r23, 0xFF	; 255
     752:	81 2f       	mov	r24, r17
     754:	88 df       	rcall	.-240    	; 0x666 <can_send_message>
		message = message + 8;
     756:	88 e0       	ldi	r24, 0x08	; 8
     758:	e8 0e       	add	r14, r24
     75a:	f1 1c       	adc	r15, r1
	return 0;
}

int can_send_frame_buffer( uint8_t *message, uint8_t buff_len ){
	uint8_t j = 0;
	for(j=0; j<buff_len; j++){
     75c:	1f 5f       	subi	r17, 0xFF	; 255
     75e:	01 13       	cpse	r16, r17
     760:	f2 cf       	rjmp	.-28     	; 0x746 <can_send_frame_buffer+0x1c>
		can_id_t id = {j , 0x00};
		can_send_message(j,id,message);
		message = message + 8;
	}
	return 0;
}
     762:	80 e0       	ldi	r24, 0x00	; 0
     764:	90 e0       	ldi	r25, 0x00	; 0
     766:	0f 90       	pop	r0
     768:	0f 90       	pop	r0
     76a:	df 91       	pop	r29
     76c:	cf 91       	pop	r28
     76e:	1f 91       	pop	r17
     770:	0f 91       	pop	r16
     772:	ff 90       	pop	r15
     774:	ef 90       	pop	r14
     776:	08 95       	ret

00000778 <can_receive_frame_buffer>:

int can_receive_frame_buffer( uint8_t *message , uint8_t buff_len){
     778:	8f 92       	push	r8
     77a:	9f 92       	push	r9
     77c:	af 92       	push	r10
     77e:	bf 92       	push	r11
     780:	cf 92       	push	r12
     782:	df 92       	push	r13
     784:	ef 92       	push	r14
     786:	ff 92       	push	r15
     788:	0f 93       	push	r16
     78a:	1f 93       	push	r17
     78c:	cf 93       	push	r28
     78e:	df 93       	push	r29
     790:	00 d0       	rcall	.+0      	; 0x792 <can_receive_frame_buffer+0x1a>
     792:	00 d0       	rcall	.+0      	; 0x794 <can_receive_frame_buffer+0x1c>
     794:	cd b7       	in	r28, 0x3d	; 61
     796:	de b7       	in	r29, 0x3e	; 62
     798:	6c 01       	movw	r12, r24
     79a:	f6 2e       	mov	r15, r22
	//Enable buffer receive interrupt.
	CANGIE |= (1 << ENBX);
     79c:	eb ed       	ldi	r30, 0xDB	; 219
     79e:	f0 e0       	ldi	r31, 0x00	; 0
     7a0:	80 81       	ld	r24, Z
     7a2:	84 60       	ori	r24, 0x04	; 4
     7a4:	80 83       	st	Z, r24
	uint8_t j;
	for(j=0; j<buff_len; j++){
     7a6:	66 23       	and	r22, r22
     7a8:	e1 f0       	breq	.+56     	; 0x7e2 <can_receive_frame_buffer+0x6a>
     7aa:	10 e0       	ldi	r17, 0x00	; 0
		set_page(j);
		can_id_t id = { j , 0};
		can_init_id(id);
		// Mask = 255
		can_mask_t mask = { 255, 255 };
     7ac:	0f ef       	ldi	r16, 0xFF	; 255
		can_init_mask(mask);
		//set mob in buffer receive mode.
		CANCDMOB = (1 << CONMOB0) | (1 << CONMOB1) | (1 << DLC3);
     7ae:	0f 2e       	mov	r0, r31
     7b0:	ff ee       	ldi	r31, 0xEF	; 239
     7b2:	af 2e       	mov	r10, r31
     7b4:	b1 2c       	mov	r11, r1
     7b6:	f0 2d       	mov	r31, r0
     7b8:	0f 2e       	mov	r0, r31
     7ba:	f8 ec       	ldi	r31, 0xC8	; 200
     7bc:	ef 2e       	mov	r14, r31
     7be:	f0 2d       	mov	r31, r0
int can_receive_frame_buffer( uint8_t *message , uint8_t buff_len){
	//Enable buffer receive interrupt.
	CANGIE |= (1 << ENBX);
	uint8_t j;
	for(j=0; j<buff_len; j++){
		set_page(j);
     7c0:	81 2f       	mov	r24, r17
     7c2:	78 de       	rcall	.-784    	; 0x4b4 <set_page>
		can_id_t id = { j , 0};
     7c4:	1b 83       	std	Y+3, r17	; 0x03
     7c6:	1c 82       	std	Y+4, r1	; 0x04
		can_init_id(id);
     7c8:	ce 01       	movw	r24, r28
     7ca:	03 96       	adiw	r24, 0x03	; 3
     7cc:	01 df       	rcall	.-510    	; 0x5d0 <can_init_id>
		// Mask = 255
		can_mask_t mask = { 255, 255 };
     7ce:	09 83       	std	Y+1, r16	; 0x01
     7d0:	0a 83       	std	Y+2, r16	; 0x02
		can_init_mask(mask);
     7d2:	ce 01       	movw	r24, r28
     7d4:	01 96       	adiw	r24, 0x01	; 1
     7d6:	12 df       	rcall	.-476    	; 0x5fc <can_init_mask>
		//set mob in buffer receive mode.
		CANCDMOB = (1 << CONMOB0) | (1 << CONMOB1) | (1 << DLC3);
     7d8:	f5 01       	movw	r30, r10
     7da:	e0 82       	st	Z, r14

int can_receive_frame_buffer( uint8_t *message , uint8_t buff_len){
	//Enable buffer receive interrupt.
	CANGIE |= (1 << ENBX);
	uint8_t j;
	for(j=0; j<buff_len; j++){
     7dc:	1f 5f       	subi	r17, 0xFF	; 255
     7de:	f1 12       	cpse	r15, r17
     7e0:	ef cf       	rjmp	.-34     	; 0x7c0 <can_receive_frame_buffer+0x48>
		can_init_mask(mask);
		//set mob in buffer receive mode.
		CANCDMOB = (1 << CONMOB0) | (1 << CONMOB1) | (1 << DLC3);
	}
	//wait for interrupt.
	while((CANGIT & INTR_MASK) != (1 << CANIT));
     7e2:	ea ed       	ldi	r30, 0xDA	; 218
     7e4:	f0 e0       	ldi	r31, 0x00	; 0
     7e6:	80 81       	ld	r24, Z
     7e8:	88 23       	and	r24, r24
     7ea:	ec f7       	brge	.-6      	; 0x7e6 <can_receive_frame_buffer+0x6e>
	//Check if interrupt is the right one (BXOK).
	if((CANGIT & BXOK_MASK) != (1 << BXOK)) return 1;
     7ec:	80 91 da 00 	lds	r24, 0x00DA	; 0x8000da <__TEXT_REGION_LENGTH__+0x7e00da>
     7f0:	84 ff       	sbrs	r24, 4
     7f2:	20 c0       	rjmp	.+64     	; 0x834 <can_receive_frame_buffer+0xbc>
	//reset mob RXOK flags
	for(j=0; j<buff_len; j++){
     7f4:	ff 20       	and	r15, r15
     7f6:	a1 f0       	breq	.+40     	; 0x820 <can_receive_frame_buffer+0xa8>
     7f8:	10 e0       	ldi	r17, 0x00	; 0
		set_page(j);
		CANCDMOB = 0x00;
     7fa:	0f 2e       	mov	r0, r31
     7fc:	ff ee       	ldi	r31, 0xEF	; 239
     7fe:	8f 2e       	mov	r8, r31
     800:	91 2c       	mov	r9, r1
     802:	f0 2d       	mov	r31, r0
		CANSTMOB = 0x00;
     804:	0f 2e       	mov	r0, r31
     806:	fe ee       	ldi	r31, 0xEE	; 238
     808:	af 2e       	mov	r10, r31
     80a:	b1 2c       	mov	r11, r1
	while((CANGIT & INTR_MASK) != (1 << CANIT));
	//Check if interrupt is the right one (BXOK).
	if((CANGIT & BXOK_MASK) != (1 << BXOK)) return 1;
	//reset mob RXOK flags
	for(j=0; j<buff_len; j++){
		set_page(j);
     80c:	f0 2d       	mov	r31, r0
     80e:	81 2f       	mov	r24, r17
     810:	51 de       	rcall	.-862    	; 0x4b4 <set_page>
		CANCDMOB = 0x00;
     812:	f4 01       	movw	r30, r8
     814:	10 82       	st	Z, r1
		CANSTMOB = 0x00;
     816:	f5 01       	movw	r30, r10
     818:	10 82       	st	Z, r1
	//wait for interrupt.
	while((CANGIT & INTR_MASK) != (1 << CANIT));
	//Check if interrupt is the right one (BXOK).
	if((CANGIT & BXOK_MASK) != (1 << BXOK)) return 1;
	//reset mob RXOK flags
	for(j=0; j<buff_len; j++){
     81a:	1f 5f       	subi	r17, 0xFF	; 255
     81c:	f1 12       	cpse	r15, r17
     81e:	f7 cf       	rjmp	.-18     	; 0x80e <can_receive_frame_buffer+0x96>
		set_page(j);
		CANCDMOB = 0x00;
		CANSTMOB = 0x00;
	}
	//Reset interrupt register.
	CANGIT = CANGIT;
     820:	ea ed       	ldi	r30, 0xDA	; 218
     822:	f0 e0       	ldi	r31, 0x00	; 0
     824:	80 81       	ld	r24, Z
	//retrieve message.
	can_get_frame_buffer(message, buff_len);
     826:	80 83       	st	Z, r24
     828:	6f 2d       	mov	r22, r15
     82a:	c6 01       	movw	r24, r12
     82c:	a2 de       	rcall	.-700    	; 0x572 <can_get_frame_buffer>
	return 0;
     82e:	80 e0       	ldi	r24, 0x00	; 0
     830:	90 e0       	ldi	r25, 0x00	; 0
     832:	02 c0       	rjmp	.+4      	; 0x838 <can_receive_frame_buffer+0xc0>
		CANCDMOB = (1 << CONMOB0) | (1 << CONMOB1) | (1 << DLC3);
	}
	//wait for interrupt.
	while((CANGIT & INTR_MASK) != (1 << CANIT));
	//Check if interrupt is the right one (BXOK).
	if((CANGIT & BXOK_MASK) != (1 << BXOK)) return 1;
     834:	81 e0       	ldi	r24, 0x01	; 1
     836:	90 e0       	ldi	r25, 0x00	; 0
	//Reset interrupt register.
	CANGIT = CANGIT;
	//retrieve message.
	can_get_frame_buffer(message, buff_len);
	return 0;
}
     838:	0f 90       	pop	r0
     83a:	0f 90       	pop	r0
     83c:	0f 90       	pop	r0
     83e:	0f 90       	pop	r0
     840:	df 91       	pop	r29
     842:	cf 91       	pop	r28
     844:	1f 91       	pop	r17
     846:	0f 91       	pop	r16
     848:	ff 90       	pop	r15
     84a:	ef 90       	pop	r14
     84c:	df 90       	pop	r13
     84e:	cf 90       	pop	r12
     850:	bf 90       	pop	r11
     852:	af 90       	pop	r10
     854:	9f 90       	pop	r9
     856:	8f 90       	pop	r8
     858:	08 95       	ret

0000085a <uECC_vli_clear>:
        HMAC_finish(hash_context, K, K);

        update_V(hash_context, K, V);
    }
    return 0;
}
     85a:	dc 01       	movw	r26, r24
     85c:	e3 e5       	ldi	r30, 0x53	; 83
     85e:	f4 e0       	ldi	r31, 0x04	; 4
     860:	e6 1b       	sub	r30, r22
     862:	f1 09       	sbc	r31, r1
     864:	09 94       	ijmp
     866:	1d 92       	st	X+, r1
     868:	1d 92       	st	X+, r1
     86a:	1d 92       	st	X+, r1
     86c:	1d 92       	st	X+, r1
     86e:	1d 92       	st	X+, r1
     870:	1d 92       	st	X+, r1
     872:	1d 92       	st	X+, r1
     874:	1d 92       	st	X+, r1
     876:	1d 92       	st	X+, r1
     878:	1d 92       	st	X+, r1
     87a:	1d 92       	st	X+, r1
     87c:	1d 92       	st	X+, r1
     87e:	1d 92       	st	X+, r1
     880:	1d 92       	st	X+, r1
     882:	1d 92       	st	X+, r1
     884:	1d 92       	st	X+, r1
     886:	1d 92       	st	X+, r1
     888:	1d 92       	st	X+, r1
     88a:	1d 92       	st	X+, r1
     88c:	1d 92       	st	X+, r1
     88e:	1d 92       	st	X+, r1
     890:	1d 92       	st	X+, r1
     892:	1d 92       	st	X+, r1
     894:	1d 92       	st	X+, r1
     896:	1d 92       	st	X+, r1
     898:	1d 92       	st	X+, r1
     89a:	1d 92       	st	X+, r1
     89c:	1d 92       	st	X+, r1
     89e:	1d 92       	st	X+, r1
     8a0:	1d 92       	st	X+, r1
     8a2:	1d 92       	st	X+, r1
     8a4:	1d 92       	st	X+, r1
     8a6:	08 95       	ret

000008a8 <uECC_vli_set>:
     8a8:	cf 93       	push	r28
     8aa:	df 93       	push	r29
     8ac:	44 0f       	add	r20, r20
     8ae:	eb 01       	movw	r28, r22
     8b0:	dc 01       	movw	r26, r24
     8b2:	ee e9       	ldi	r30, 0x9E	; 158
     8b4:	f4 e0       	ldi	r31, 0x04	; 4
     8b6:	e4 1b       	sub	r30, r20
     8b8:	f1 09       	sbc	r31, r1
     8ba:	09 94       	ijmp
     8bc:	09 90       	ld	r0, Y+
     8be:	0d 92       	st	X+, r0
     8c0:	09 90       	ld	r0, Y+
     8c2:	0d 92       	st	X+, r0
     8c4:	09 90       	ld	r0, Y+
     8c6:	0d 92       	st	X+, r0
     8c8:	09 90       	ld	r0, Y+
     8ca:	0d 92       	st	X+, r0
     8cc:	09 90       	ld	r0, Y+
     8ce:	0d 92       	st	X+, r0
     8d0:	09 90       	ld	r0, Y+
     8d2:	0d 92       	st	X+, r0
     8d4:	09 90       	ld	r0, Y+
     8d6:	0d 92       	st	X+, r0
     8d8:	09 90       	ld	r0, Y+
     8da:	0d 92       	st	X+, r0
     8dc:	09 90       	ld	r0, Y+
     8de:	0d 92       	st	X+, r0
     8e0:	09 90       	ld	r0, Y+
     8e2:	0d 92       	st	X+, r0
     8e4:	09 90       	ld	r0, Y+
     8e6:	0d 92       	st	X+, r0
     8e8:	09 90       	ld	r0, Y+
     8ea:	0d 92       	st	X+, r0
     8ec:	09 90       	ld	r0, Y+
     8ee:	0d 92       	st	X+, r0
     8f0:	09 90       	ld	r0, Y+
     8f2:	0d 92       	st	X+, r0
     8f4:	09 90       	ld	r0, Y+
     8f6:	0d 92       	st	X+, r0
     8f8:	09 90       	ld	r0, Y+
     8fa:	0d 92       	st	X+, r0
     8fc:	09 90       	ld	r0, Y+
     8fe:	0d 92       	st	X+, r0
     900:	09 90       	ld	r0, Y+
     902:	0d 92       	st	X+, r0
     904:	09 90       	ld	r0, Y+
     906:	0d 92       	st	X+, r0
     908:	09 90       	ld	r0, Y+
     90a:	0d 92       	st	X+, r0
     90c:	09 90       	ld	r0, Y+
     90e:	0d 92       	st	X+, r0
     910:	09 90       	ld	r0, Y+
     912:	0d 92       	st	X+, r0
     914:	09 90       	ld	r0, Y+
     916:	0d 92       	st	X+, r0
     918:	09 90       	ld	r0, Y+
     91a:	0d 92       	st	X+, r0
     91c:	09 90       	ld	r0, Y+
     91e:	0d 92       	st	X+, r0
     920:	09 90       	ld	r0, Y+
     922:	0d 92       	st	X+, r0
     924:	09 90       	ld	r0, Y+
     926:	0d 92       	st	X+, r0
     928:	09 90       	ld	r0, Y+
     92a:	0d 92       	st	X+, r0
     92c:	09 90       	ld	r0, Y+
     92e:	0d 92       	st	X+, r0
     930:	09 90       	ld	r0, Y+
     932:	0d 92       	st	X+, r0
     934:	09 90       	ld	r0, Y+
     936:	0d 92       	st	X+, r0
     938:	09 90       	ld	r0, Y+
     93a:	0d 92       	st	X+, r0
     93c:	df 91       	pop	r29
     93e:	cf 91       	pop	r28
     940:	08 95       	ret

00000942 <uECC_vli_rshift1>:
     942:	26 2f       	mov	r18, r22
     944:	06 2e       	mov	r0, r22
     946:	00 0c       	add	r0, r0
     948:	33 0b       	sbc	r19, r19
     94a:	21 50       	subi	r18, 0x01	; 1
     94c:	31 09       	sbc	r19, r1
     94e:	32 2f       	mov	r19, r18
     950:	33 0f       	add	r19, r19
     952:	23 0f       	add	r18, r19
     954:	dc 01       	movw	r26, r24
     956:	e2 e1       	ldi	r30, 0x12	; 18
     958:	f5 e0       	ldi	r31, 0x05	; 5
     95a:	e2 1b       	sub	r30, r18
     95c:	f1 09       	sbc	r31, r1
     95e:	a6 0f       	add	r26, r22
     960:	b1 1d       	adc	r27, r1
     962:	0e 90       	ld	r0, -X
     964:	06 94       	lsr	r0
     966:	0c 92       	st	X, r0
     968:	09 94       	ijmp
     96a:	0e 90       	ld	r0, -X
     96c:	07 94       	ror	r0
     96e:	0c 92       	st	X, r0
     970:	0e 90       	ld	r0, -X
     972:	07 94       	ror	r0
     974:	0c 92       	st	X, r0
     976:	0e 90       	ld	r0, -X
     978:	07 94       	ror	r0
     97a:	0c 92       	st	X, r0
     97c:	0e 90       	ld	r0, -X
     97e:	07 94       	ror	r0
     980:	0c 92       	st	X, r0
     982:	0e 90       	ld	r0, -X
     984:	07 94       	ror	r0
     986:	0c 92       	st	X, r0
     988:	0e 90       	ld	r0, -X
     98a:	07 94       	ror	r0
     98c:	0c 92       	st	X, r0
     98e:	0e 90       	ld	r0, -X
     990:	07 94       	ror	r0
     992:	0c 92       	st	X, r0
     994:	0e 90       	ld	r0, -X
     996:	07 94       	ror	r0
     998:	0c 92       	st	X, r0
     99a:	0e 90       	ld	r0, -X
     99c:	07 94       	ror	r0
     99e:	0c 92       	st	X, r0
     9a0:	0e 90       	ld	r0, -X
     9a2:	07 94       	ror	r0
     9a4:	0c 92       	st	X, r0
     9a6:	0e 90       	ld	r0, -X
     9a8:	07 94       	ror	r0
     9aa:	0c 92       	st	X, r0
     9ac:	0e 90       	ld	r0, -X
     9ae:	07 94       	ror	r0
     9b0:	0c 92       	st	X, r0
     9b2:	0e 90       	ld	r0, -X
     9b4:	07 94       	ror	r0
     9b6:	0c 92       	st	X, r0
     9b8:	0e 90       	ld	r0, -X
     9ba:	07 94       	ror	r0
     9bc:	0c 92       	st	X, r0
     9be:	0e 90       	ld	r0, -X
     9c0:	07 94       	ror	r0
     9c2:	0c 92       	st	X, r0
     9c4:	0e 90       	ld	r0, -X
     9c6:	07 94       	ror	r0
     9c8:	0c 92       	st	X, r0
     9ca:	0e 90       	ld	r0, -X
     9cc:	07 94       	ror	r0
     9ce:	0c 92       	st	X, r0
     9d0:	0e 90       	ld	r0, -X
     9d2:	07 94       	ror	r0
     9d4:	0c 92       	st	X, r0
     9d6:	0e 90       	ld	r0, -X
     9d8:	07 94       	ror	r0
     9da:	0c 92       	st	X, r0
     9dc:	0e 90       	ld	r0, -X
     9de:	07 94       	ror	r0
     9e0:	0c 92       	st	X, r0
     9e2:	0e 90       	ld	r0, -X
     9e4:	07 94       	ror	r0
     9e6:	0c 92       	st	X, r0
     9e8:	0e 90       	ld	r0, -X
     9ea:	07 94       	ror	r0
     9ec:	0c 92       	st	X, r0
     9ee:	0e 90       	ld	r0, -X
     9f0:	07 94       	ror	r0
     9f2:	0c 92       	st	X, r0
     9f4:	0e 90       	ld	r0, -X
     9f6:	07 94       	ror	r0
     9f8:	0c 92       	st	X, r0
     9fa:	0e 90       	ld	r0, -X
     9fc:	07 94       	ror	r0
     9fe:	0c 92       	st	X, r0
     a00:	0e 90       	ld	r0, -X
     a02:	07 94       	ror	r0
     a04:	0c 92       	st	X, r0
     a06:	0e 90       	ld	r0, -X
     a08:	07 94       	ror	r0
     a0a:	0c 92       	st	X, r0
     a0c:	0e 90       	ld	r0, -X
     a0e:	07 94       	ror	r0
     a10:	0c 92       	st	X, r0
     a12:	0e 90       	ld	r0, -X
     a14:	07 94       	ror	r0
     a16:	0c 92       	st	X, r0
     a18:	0e 90       	ld	r0, -X
     a1a:	07 94       	ror	r0
     a1c:	0c 92       	st	X, r0
     a1e:	0e 90       	ld	r0, -X
     a20:	07 94       	ror	r0
     a22:	0c 92       	st	X, r0
     a24:	08 95       	ret

00000a26 <uECC_vli_add>:
     a26:	cf 93       	push	r28
     a28:	df 93       	push	r29
     a2a:	22 0f       	add	r18, r18
     a2c:	db 01       	movw	r26, r22
     a2e:	ea 01       	movw	r28, r20
     a30:	ac 01       	movw	r20, r24
     a32:	ef e5       	ldi	r30, 0x5F	; 95
     a34:	f5 e0       	ldi	r31, 0x05	; 5
     a36:	e2 1b       	sub	r30, r18
     a38:	f1 09       	sbc	r31, r1
     a3a:	88 94       	clc
     a3c:	09 94       	ijmp
     a3e:	fa 01       	movw	r30, r20
     a40:	3e c0       	rjmp	.+124    	; 0xabe <add_89_32>
     a42:	fa 01       	movw	r30, r20
     a44:	40 c0       	rjmp	.+128    	; 0xac6 <add_89_31>
     a46:	fa 01       	movw	r30, r20
     a48:	42 c0       	rjmp	.+132    	; 0xace <add_89_30>
     a4a:	fa 01       	movw	r30, r20
     a4c:	44 c0       	rjmp	.+136    	; 0xad6 <add_89_29>
     a4e:	fa 01       	movw	r30, r20
     a50:	46 c0       	rjmp	.+140    	; 0xade <add_89_28>
     a52:	fa 01       	movw	r30, r20
     a54:	48 c0       	rjmp	.+144    	; 0xae6 <add_89_27>
     a56:	fa 01       	movw	r30, r20
     a58:	4a c0       	rjmp	.+148    	; 0xaee <add_89_26>
     a5a:	fa 01       	movw	r30, r20
     a5c:	4c c0       	rjmp	.+152    	; 0xaf6 <add_89_25>
     a5e:	fa 01       	movw	r30, r20
     a60:	4e c0       	rjmp	.+156    	; 0xafe <add_89_24>
     a62:	fa 01       	movw	r30, r20
     a64:	50 c0       	rjmp	.+160    	; 0xb06 <add_89_23>
     a66:	fa 01       	movw	r30, r20
     a68:	52 c0       	rjmp	.+164    	; 0xb0e <add_89_22>
     a6a:	fa 01       	movw	r30, r20
     a6c:	54 c0       	rjmp	.+168    	; 0xb16 <add_89_21>
     a6e:	fa 01       	movw	r30, r20
     a70:	56 c0       	rjmp	.+172    	; 0xb1e <add_89_20>
     a72:	fa 01       	movw	r30, r20
     a74:	58 c0       	rjmp	.+176    	; 0xb26 <add_89_19>
     a76:	fa 01       	movw	r30, r20
     a78:	5a c0       	rjmp	.+180    	; 0xb2e <add_89_18>
     a7a:	fa 01       	movw	r30, r20
     a7c:	5c c0       	rjmp	.+184    	; 0xb36 <add_89_17>
     a7e:	fa 01       	movw	r30, r20
     a80:	5e c0       	rjmp	.+188    	; 0xb3e <add_89_16>
     a82:	fa 01       	movw	r30, r20
     a84:	60 c0       	rjmp	.+192    	; 0xb46 <add_89_15>
     a86:	fa 01       	movw	r30, r20
     a88:	62 c0       	rjmp	.+196    	; 0xb4e <add_89_14>
     a8a:	fa 01       	movw	r30, r20
     a8c:	64 c0       	rjmp	.+200    	; 0xb56 <add_89_13>
     a8e:	fa 01       	movw	r30, r20
     a90:	66 c0       	rjmp	.+204    	; 0xb5e <add_89_12>
     a92:	fa 01       	movw	r30, r20
     a94:	68 c0       	rjmp	.+208    	; 0xb66 <add_89_11>
     a96:	fa 01       	movw	r30, r20
     a98:	6a c0       	rjmp	.+212    	; 0xb6e <add_89_10>
     a9a:	fa 01       	movw	r30, r20
     a9c:	6c c0       	rjmp	.+216    	; 0xb76 <add_89_9>
     a9e:	fa 01       	movw	r30, r20
     aa0:	6e c0       	rjmp	.+220    	; 0xb7e <add_89_8>
     aa2:	fa 01       	movw	r30, r20
     aa4:	70 c0       	rjmp	.+224    	; 0xb86 <add_89_7>
     aa6:	fa 01       	movw	r30, r20
     aa8:	72 c0       	rjmp	.+228    	; 0xb8e <add_89_6>
     aaa:	fa 01       	movw	r30, r20
     aac:	74 c0       	rjmp	.+232    	; 0xb96 <add_89_5>
     aae:	fa 01       	movw	r30, r20
     ab0:	76 c0       	rjmp	.+236    	; 0xb9e <add_89_4>
     ab2:	fa 01       	movw	r30, r20
     ab4:	78 c0       	rjmp	.+240    	; 0xba6 <add_89_3>
     ab6:	fa 01       	movw	r30, r20
     ab8:	7a c0       	rjmp	.+244    	; 0xbae <add_89_2>
     aba:	fa 01       	movw	r30, r20
     abc:	7c c0       	rjmp	.+248    	; 0xbb6 <add_89_1>

00000abe <add_89_32>:
     abe:	8d 91       	ld	r24, X+
     ac0:	99 91       	ld	r25, Y+
     ac2:	89 1f       	adc	r24, r25
     ac4:	81 93       	st	Z+, r24

00000ac6 <add_89_31>:
     ac6:	8d 91       	ld	r24, X+
     ac8:	99 91       	ld	r25, Y+
     aca:	89 1f       	adc	r24, r25
     acc:	81 93       	st	Z+, r24

00000ace <add_89_30>:
     ace:	8d 91       	ld	r24, X+
     ad0:	99 91       	ld	r25, Y+
     ad2:	89 1f       	adc	r24, r25
     ad4:	81 93       	st	Z+, r24

00000ad6 <add_89_29>:
     ad6:	8d 91       	ld	r24, X+
     ad8:	99 91       	ld	r25, Y+
     ada:	89 1f       	adc	r24, r25
     adc:	81 93       	st	Z+, r24

00000ade <add_89_28>:
     ade:	8d 91       	ld	r24, X+
     ae0:	99 91       	ld	r25, Y+
     ae2:	89 1f       	adc	r24, r25
     ae4:	81 93       	st	Z+, r24

00000ae6 <add_89_27>:
     ae6:	8d 91       	ld	r24, X+
     ae8:	99 91       	ld	r25, Y+
     aea:	89 1f       	adc	r24, r25
     aec:	81 93       	st	Z+, r24

00000aee <add_89_26>:
     aee:	8d 91       	ld	r24, X+
     af0:	99 91       	ld	r25, Y+
     af2:	89 1f       	adc	r24, r25
     af4:	81 93       	st	Z+, r24

00000af6 <add_89_25>:
     af6:	8d 91       	ld	r24, X+
     af8:	99 91       	ld	r25, Y+
     afa:	89 1f       	adc	r24, r25
     afc:	81 93       	st	Z+, r24

00000afe <add_89_24>:
     afe:	8d 91       	ld	r24, X+
     b00:	99 91       	ld	r25, Y+
     b02:	89 1f       	adc	r24, r25
     b04:	81 93       	st	Z+, r24

00000b06 <add_89_23>:
     b06:	8d 91       	ld	r24, X+
     b08:	99 91       	ld	r25, Y+
     b0a:	89 1f       	adc	r24, r25
     b0c:	81 93       	st	Z+, r24

00000b0e <add_89_22>:
     b0e:	8d 91       	ld	r24, X+
     b10:	99 91       	ld	r25, Y+
     b12:	89 1f       	adc	r24, r25
     b14:	81 93       	st	Z+, r24

00000b16 <add_89_21>:
     b16:	8d 91       	ld	r24, X+
     b18:	99 91       	ld	r25, Y+
     b1a:	89 1f       	adc	r24, r25
     b1c:	81 93       	st	Z+, r24

00000b1e <add_89_20>:
     b1e:	8d 91       	ld	r24, X+
     b20:	99 91       	ld	r25, Y+
     b22:	89 1f       	adc	r24, r25
     b24:	81 93       	st	Z+, r24

00000b26 <add_89_19>:
     b26:	8d 91       	ld	r24, X+
     b28:	99 91       	ld	r25, Y+
     b2a:	89 1f       	adc	r24, r25
     b2c:	81 93       	st	Z+, r24

00000b2e <add_89_18>:
     b2e:	8d 91       	ld	r24, X+
     b30:	99 91       	ld	r25, Y+
     b32:	89 1f       	adc	r24, r25
     b34:	81 93       	st	Z+, r24

00000b36 <add_89_17>:
     b36:	8d 91       	ld	r24, X+
     b38:	99 91       	ld	r25, Y+
     b3a:	89 1f       	adc	r24, r25
     b3c:	81 93       	st	Z+, r24

00000b3e <add_89_16>:
     b3e:	8d 91       	ld	r24, X+
     b40:	99 91       	ld	r25, Y+
     b42:	89 1f       	adc	r24, r25
     b44:	81 93       	st	Z+, r24

00000b46 <add_89_15>:
     b46:	8d 91       	ld	r24, X+
     b48:	99 91       	ld	r25, Y+
     b4a:	89 1f       	adc	r24, r25
     b4c:	81 93       	st	Z+, r24

00000b4e <add_89_14>:
     b4e:	8d 91       	ld	r24, X+
     b50:	99 91       	ld	r25, Y+
     b52:	89 1f       	adc	r24, r25
     b54:	81 93       	st	Z+, r24

00000b56 <add_89_13>:
     b56:	8d 91       	ld	r24, X+
     b58:	99 91       	ld	r25, Y+
     b5a:	89 1f       	adc	r24, r25
     b5c:	81 93       	st	Z+, r24

00000b5e <add_89_12>:
     b5e:	8d 91       	ld	r24, X+
     b60:	99 91       	ld	r25, Y+
     b62:	89 1f       	adc	r24, r25
     b64:	81 93       	st	Z+, r24

00000b66 <add_89_11>:
     b66:	8d 91       	ld	r24, X+
     b68:	99 91       	ld	r25, Y+
     b6a:	89 1f       	adc	r24, r25
     b6c:	81 93       	st	Z+, r24

00000b6e <add_89_10>:
     b6e:	8d 91       	ld	r24, X+
     b70:	99 91       	ld	r25, Y+
     b72:	89 1f       	adc	r24, r25
     b74:	81 93       	st	Z+, r24

00000b76 <add_89_9>:
     b76:	8d 91       	ld	r24, X+
     b78:	99 91       	ld	r25, Y+
     b7a:	89 1f       	adc	r24, r25
     b7c:	81 93       	st	Z+, r24

00000b7e <add_89_8>:
     b7e:	8d 91       	ld	r24, X+
     b80:	99 91       	ld	r25, Y+
     b82:	89 1f       	adc	r24, r25
     b84:	81 93       	st	Z+, r24

00000b86 <add_89_7>:
     b86:	8d 91       	ld	r24, X+
     b88:	99 91       	ld	r25, Y+
     b8a:	89 1f       	adc	r24, r25
     b8c:	81 93       	st	Z+, r24

00000b8e <add_89_6>:
     b8e:	8d 91       	ld	r24, X+
     b90:	99 91       	ld	r25, Y+
     b92:	89 1f       	adc	r24, r25
     b94:	81 93       	st	Z+, r24

00000b96 <add_89_5>:
     b96:	8d 91       	ld	r24, X+
     b98:	99 91       	ld	r25, Y+
     b9a:	89 1f       	adc	r24, r25
     b9c:	81 93       	st	Z+, r24

00000b9e <add_89_4>:
     b9e:	8d 91       	ld	r24, X+
     ba0:	99 91       	ld	r25, Y+
     ba2:	89 1f       	adc	r24, r25
     ba4:	81 93       	st	Z+, r24

00000ba6 <add_89_3>:
     ba6:	8d 91       	ld	r24, X+
     ba8:	99 91       	ld	r25, Y+
     baa:	89 1f       	adc	r24, r25
     bac:	81 93       	st	Z+, r24

00000bae <add_89_2>:
     bae:	8d 91       	ld	r24, X+
     bb0:	99 91       	ld	r25, Y+
     bb2:	89 1f       	adc	r24, r25
     bb4:	81 93       	st	Z+, r24

00000bb6 <add_89_1>:
     bb6:	8d 91       	ld	r24, X+
     bb8:	99 91       	ld	r25, Y+
     bba:	89 1f       	adc	r24, r25
     bbc:	81 93       	st	Z+, r24
     bbe:	81 2d       	mov	r24, r1
     bc0:	88 1f       	adc	r24, r24
     bc2:	df 91       	pop	r29
     bc4:	cf 91       	pop	r28
     bc6:	08 95       	ret

00000bc8 <uECC_vli_sub>:
     bc8:	cf 93       	push	r28
     bca:	df 93       	push	r29
     bcc:	22 0f       	add	r18, r18
     bce:	db 01       	movw	r26, r22
     bd0:	ea 01       	movw	r28, r20
     bd2:	ac 01       	movw	r20, r24
     bd4:	e0 e3       	ldi	r30, 0x30	; 48
     bd6:	f6 e0       	ldi	r31, 0x06	; 6
     bd8:	e2 1b       	sub	r30, r18
     bda:	f1 09       	sbc	r31, r1
     bdc:	88 94       	clc
     bde:	09 94       	ijmp
     be0:	fa 01       	movw	r30, r20
     be2:	3e c0       	rjmp	.+124    	; 0xc60 <sub_129_32>
     be4:	fa 01       	movw	r30, r20
     be6:	40 c0       	rjmp	.+128    	; 0xc68 <sub_129_31>
     be8:	fa 01       	movw	r30, r20
     bea:	42 c0       	rjmp	.+132    	; 0xc70 <sub_129_30>
     bec:	fa 01       	movw	r30, r20
     bee:	44 c0       	rjmp	.+136    	; 0xc78 <sub_129_29>
     bf0:	fa 01       	movw	r30, r20
     bf2:	46 c0       	rjmp	.+140    	; 0xc80 <sub_129_28>
     bf4:	fa 01       	movw	r30, r20
     bf6:	48 c0       	rjmp	.+144    	; 0xc88 <sub_129_27>
     bf8:	fa 01       	movw	r30, r20
     bfa:	4a c0       	rjmp	.+148    	; 0xc90 <sub_129_26>
     bfc:	fa 01       	movw	r30, r20
     bfe:	4c c0       	rjmp	.+152    	; 0xc98 <sub_129_25>
     c00:	fa 01       	movw	r30, r20
     c02:	4e c0       	rjmp	.+156    	; 0xca0 <sub_129_24>
     c04:	fa 01       	movw	r30, r20
     c06:	50 c0       	rjmp	.+160    	; 0xca8 <sub_129_23>
     c08:	fa 01       	movw	r30, r20
     c0a:	52 c0       	rjmp	.+164    	; 0xcb0 <sub_129_22>
     c0c:	fa 01       	movw	r30, r20
     c0e:	54 c0       	rjmp	.+168    	; 0xcb8 <sub_129_21>
     c10:	fa 01       	movw	r30, r20
     c12:	56 c0       	rjmp	.+172    	; 0xcc0 <sub_129_20>
     c14:	fa 01       	movw	r30, r20
     c16:	58 c0       	rjmp	.+176    	; 0xcc8 <sub_129_19>
     c18:	fa 01       	movw	r30, r20
     c1a:	5a c0       	rjmp	.+180    	; 0xcd0 <sub_129_18>
     c1c:	fa 01       	movw	r30, r20
     c1e:	5c c0       	rjmp	.+184    	; 0xcd8 <sub_129_17>
     c20:	fa 01       	movw	r30, r20
     c22:	5e c0       	rjmp	.+188    	; 0xce0 <sub_129_16>
     c24:	fa 01       	movw	r30, r20
     c26:	60 c0       	rjmp	.+192    	; 0xce8 <sub_129_15>
     c28:	fa 01       	movw	r30, r20
     c2a:	62 c0       	rjmp	.+196    	; 0xcf0 <sub_129_14>
     c2c:	fa 01       	movw	r30, r20
     c2e:	64 c0       	rjmp	.+200    	; 0xcf8 <sub_129_13>
     c30:	fa 01       	movw	r30, r20
     c32:	66 c0       	rjmp	.+204    	; 0xd00 <sub_129_12>
     c34:	fa 01       	movw	r30, r20
     c36:	68 c0       	rjmp	.+208    	; 0xd08 <sub_129_11>
     c38:	fa 01       	movw	r30, r20
     c3a:	6a c0       	rjmp	.+212    	; 0xd10 <sub_129_10>
     c3c:	fa 01       	movw	r30, r20
     c3e:	6c c0       	rjmp	.+216    	; 0xd18 <sub_129_9>
     c40:	fa 01       	movw	r30, r20
     c42:	6e c0       	rjmp	.+220    	; 0xd20 <sub_129_8>
     c44:	fa 01       	movw	r30, r20
     c46:	70 c0       	rjmp	.+224    	; 0xd28 <sub_129_7>
     c48:	fa 01       	movw	r30, r20
     c4a:	72 c0       	rjmp	.+228    	; 0xd30 <sub_129_6>
     c4c:	fa 01       	movw	r30, r20
     c4e:	74 c0       	rjmp	.+232    	; 0xd38 <sub_129_5>
     c50:	fa 01       	movw	r30, r20
     c52:	76 c0       	rjmp	.+236    	; 0xd40 <sub_129_4>
     c54:	fa 01       	movw	r30, r20
     c56:	78 c0       	rjmp	.+240    	; 0xd48 <sub_129_3>
     c58:	fa 01       	movw	r30, r20
     c5a:	7a c0       	rjmp	.+244    	; 0xd50 <sub_129_2>
     c5c:	fa 01       	movw	r30, r20
     c5e:	7c c0       	rjmp	.+248    	; 0xd58 <sub_129_1>

00000c60 <sub_129_32>:
     c60:	8d 91       	ld	r24, X+
     c62:	99 91       	ld	r25, Y+
     c64:	89 0b       	sbc	r24, r25
     c66:	81 93       	st	Z+, r24

00000c68 <sub_129_31>:
     c68:	8d 91       	ld	r24, X+
     c6a:	99 91       	ld	r25, Y+
     c6c:	89 0b       	sbc	r24, r25
     c6e:	81 93       	st	Z+, r24

00000c70 <sub_129_30>:
     c70:	8d 91       	ld	r24, X+
     c72:	99 91       	ld	r25, Y+
     c74:	89 0b       	sbc	r24, r25
     c76:	81 93       	st	Z+, r24

00000c78 <sub_129_29>:
     c78:	8d 91       	ld	r24, X+
     c7a:	99 91       	ld	r25, Y+
     c7c:	89 0b       	sbc	r24, r25
     c7e:	81 93       	st	Z+, r24

00000c80 <sub_129_28>:
     c80:	8d 91       	ld	r24, X+
     c82:	99 91       	ld	r25, Y+
     c84:	89 0b       	sbc	r24, r25
     c86:	81 93       	st	Z+, r24

00000c88 <sub_129_27>:
     c88:	8d 91       	ld	r24, X+
     c8a:	99 91       	ld	r25, Y+
     c8c:	89 0b       	sbc	r24, r25
     c8e:	81 93       	st	Z+, r24

00000c90 <sub_129_26>:
     c90:	8d 91       	ld	r24, X+
     c92:	99 91       	ld	r25, Y+
     c94:	89 0b       	sbc	r24, r25
     c96:	81 93       	st	Z+, r24

00000c98 <sub_129_25>:
     c98:	8d 91       	ld	r24, X+
     c9a:	99 91       	ld	r25, Y+
     c9c:	89 0b       	sbc	r24, r25
     c9e:	81 93       	st	Z+, r24

00000ca0 <sub_129_24>:
     ca0:	8d 91       	ld	r24, X+
     ca2:	99 91       	ld	r25, Y+
     ca4:	89 0b       	sbc	r24, r25
     ca6:	81 93       	st	Z+, r24

00000ca8 <sub_129_23>:
     ca8:	8d 91       	ld	r24, X+
     caa:	99 91       	ld	r25, Y+
     cac:	89 0b       	sbc	r24, r25
     cae:	81 93       	st	Z+, r24

00000cb0 <sub_129_22>:
     cb0:	8d 91       	ld	r24, X+
     cb2:	99 91       	ld	r25, Y+
     cb4:	89 0b       	sbc	r24, r25
     cb6:	81 93       	st	Z+, r24

00000cb8 <sub_129_21>:
     cb8:	8d 91       	ld	r24, X+
     cba:	99 91       	ld	r25, Y+
     cbc:	89 0b       	sbc	r24, r25
     cbe:	81 93       	st	Z+, r24

00000cc0 <sub_129_20>:
     cc0:	8d 91       	ld	r24, X+
     cc2:	99 91       	ld	r25, Y+
     cc4:	89 0b       	sbc	r24, r25
     cc6:	81 93       	st	Z+, r24

00000cc8 <sub_129_19>:
     cc8:	8d 91       	ld	r24, X+
     cca:	99 91       	ld	r25, Y+
     ccc:	89 0b       	sbc	r24, r25
     cce:	81 93       	st	Z+, r24

00000cd0 <sub_129_18>:
     cd0:	8d 91       	ld	r24, X+
     cd2:	99 91       	ld	r25, Y+
     cd4:	89 0b       	sbc	r24, r25
     cd6:	81 93       	st	Z+, r24

00000cd8 <sub_129_17>:
     cd8:	8d 91       	ld	r24, X+
     cda:	99 91       	ld	r25, Y+
     cdc:	89 0b       	sbc	r24, r25
     cde:	81 93       	st	Z+, r24

00000ce0 <sub_129_16>:
     ce0:	8d 91       	ld	r24, X+
     ce2:	99 91       	ld	r25, Y+
     ce4:	89 0b       	sbc	r24, r25
     ce6:	81 93       	st	Z+, r24

00000ce8 <sub_129_15>:
     ce8:	8d 91       	ld	r24, X+
     cea:	99 91       	ld	r25, Y+
     cec:	89 0b       	sbc	r24, r25
     cee:	81 93       	st	Z+, r24

00000cf0 <sub_129_14>:
     cf0:	8d 91       	ld	r24, X+
     cf2:	99 91       	ld	r25, Y+
     cf4:	89 0b       	sbc	r24, r25
     cf6:	81 93       	st	Z+, r24

00000cf8 <sub_129_13>:
     cf8:	8d 91       	ld	r24, X+
     cfa:	99 91       	ld	r25, Y+
     cfc:	89 0b       	sbc	r24, r25
     cfe:	81 93       	st	Z+, r24

00000d00 <sub_129_12>:
     d00:	8d 91       	ld	r24, X+
     d02:	99 91       	ld	r25, Y+
     d04:	89 0b       	sbc	r24, r25
     d06:	81 93       	st	Z+, r24

00000d08 <sub_129_11>:
     d08:	8d 91       	ld	r24, X+
     d0a:	99 91       	ld	r25, Y+
     d0c:	89 0b       	sbc	r24, r25
     d0e:	81 93       	st	Z+, r24

00000d10 <sub_129_10>:
     d10:	8d 91       	ld	r24, X+
     d12:	99 91       	ld	r25, Y+
     d14:	89 0b       	sbc	r24, r25
     d16:	81 93       	st	Z+, r24

00000d18 <sub_129_9>:
     d18:	8d 91       	ld	r24, X+
     d1a:	99 91       	ld	r25, Y+
     d1c:	89 0b       	sbc	r24, r25
     d1e:	81 93       	st	Z+, r24

00000d20 <sub_129_8>:
     d20:	8d 91       	ld	r24, X+
     d22:	99 91       	ld	r25, Y+
     d24:	89 0b       	sbc	r24, r25
     d26:	81 93       	st	Z+, r24

00000d28 <sub_129_7>:
     d28:	8d 91       	ld	r24, X+
     d2a:	99 91       	ld	r25, Y+
     d2c:	89 0b       	sbc	r24, r25
     d2e:	81 93       	st	Z+, r24

00000d30 <sub_129_6>:
     d30:	8d 91       	ld	r24, X+
     d32:	99 91       	ld	r25, Y+
     d34:	89 0b       	sbc	r24, r25
     d36:	81 93       	st	Z+, r24

00000d38 <sub_129_5>:
     d38:	8d 91       	ld	r24, X+
     d3a:	99 91       	ld	r25, Y+
     d3c:	89 0b       	sbc	r24, r25
     d3e:	81 93       	st	Z+, r24

00000d40 <sub_129_4>:
     d40:	8d 91       	ld	r24, X+
     d42:	99 91       	ld	r25, Y+
     d44:	89 0b       	sbc	r24, r25
     d46:	81 93       	st	Z+, r24

00000d48 <sub_129_3>:
     d48:	8d 91       	ld	r24, X+
     d4a:	99 91       	ld	r25, Y+
     d4c:	89 0b       	sbc	r24, r25
     d4e:	81 93       	st	Z+, r24

00000d50 <sub_129_2>:
     d50:	8d 91       	ld	r24, X+
     d52:	99 91       	ld	r25, Y+
     d54:	89 0b       	sbc	r24, r25
     d56:	81 93       	st	Z+, r24

00000d58 <sub_129_1>:
     d58:	8d 91       	ld	r24, X+
     d5a:	99 91       	ld	r25, Y+
     d5c:	89 0b       	sbc	r24, r25
     d5e:	81 93       	st	Z+, r24
     d60:	81 2d       	mov	r24, r1
     d62:	88 1f       	adc	r24, r24
     d64:	df 91       	pop	r29
     d66:	cf 91       	pop	r28
     d68:	08 95       	ret

00000d6a <uECC_vli_mult>:
     d6a:	cf 93       	push	r28
     d6c:	df 93       	push	r29
     d6e:	fc 01       	movw	r30, r24
     d70:	db 01       	movw	r26, r22
     d72:	ea 01       	movw	r28, r20
     d74:	90 e0       	ldi	r25, 0x00	; 0
     d76:	89 2f       	mov	r24, r25
     d78:	39 2f       	mov	r19, r25
     d7a:	49 2f       	mov	r20, r25
     d7c:	51 e0       	ldi	r21, 0x01	; 1
     d7e:	60 e0       	ldi	r22, 0x00	; 0
     d80:	c5 0f       	add	r28, r21
     d82:	d4 1f       	adc	r29, r20
     d84:	0d 90       	ld	r0, X+
     d86:	1a 90       	ld	r1, -Y
     d88:	01 9c       	mul	r0, r1
     d8a:	90 0d       	add	r25, r0
     d8c:	81 1d       	adc	r24, r1
     d8e:	34 1f       	adc	r19, r20
     d90:	63 95       	inc	r22
     d92:	65 17       	cp	r22, r21
     d94:	b8 f3       	brcs	.-18     	; 0xd84 <uECC_vli_mult+0x1a>
     d96:	a5 1b       	sub	r26, r21
     d98:	b4 0b       	sbc	r27, r20
     d9a:	91 93       	st	Z+, r25
     d9c:	98 2f       	mov	r25, r24
     d9e:	83 2f       	mov	r24, r19
     da0:	34 2f       	mov	r19, r20
     da2:	53 95       	inc	r21
     da4:	52 17       	cp	r21, r18
     da6:	58 f3       	brcs	.-42     	; 0xd7e <uECC_vli_mult+0x14>
     da8:	52 2f       	mov	r21, r18
     daa:	c2 0f       	add	r28, r18
     dac:	d4 1f       	adc	r29, r20
     dae:	60 e0       	ldi	r22, 0x00	; 0
     db0:	0d 90       	ld	r0, X+
     db2:	1a 90       	ld	r1, -Y
     db4:	01 9c       	mul	r0, r1
     db6:	90 0d       	add	r25, r0
     db8:	81 1d       	adc	r24, r1
     dba:	34 1f       	adc	r19, r20
     dbc:	63 95       	inc	r22
     dbe:	65 17       	cp	r22, r21
     dc0:	b8 f3       	brcs	.-18     	; 0xdb0 <uECC_vli_mult+0x46>
     dc2:	c5 0f       	add	r28, r21
     dc4:	d4 1f       	adc	r29, r20
     dc6:	91 93       	st	Z+, r25
     dc8:	98 2f       	mov	r25, r24
     dca:	83 2f       	mov	r24, r19
     dcc:	34 2f       	mov	r19, r20
     dce:	5a 95       	dec	r21
     dd0:	a5 1b       	sub	r26, r21
     dd2:	b4 0b       	sbc	r27, r20
     dd4:	54 17       	cp	r21, r20
     dd6:	59 f7       	brne	.-42     	; 0xdae <uECC_vli_mult+0x44>
     dd8:	91 93       	st	Z+, r25
     dda:	11 24       	eor	r1, r1
     ddc:	df 91       	pop	r29
     dde:	cf 91       	pop	r28
     de0:	08 95       	ret

00000de2 <uECC_vli_isZero>:
     de2:	16 16       	cp	r1, r22
     de4:	7c f4       	brge	.+30     	; 0xe04 <uECC_vli_isZero+0x22>
     de6:	fc 01       	movw	r30, r24
     de8:	61 50       	subi	r22, 0x01	; 1
     dea:	46 2f       	mov	r20, r22
     dec:	50 e0       	ldi	r21, 0x00	; 0
     dee:	4f 5f       	subi	r20, 0xFF	; 255
     df0:	5f 4f       	sbci	r21, 0xFF	; 255
     df2:	48 0f       	add	r20, r24
     df4:	59 1f       	adc	r21, r25
     df6:	90 e0       	ldi	r25, 0x00	; 0
     df8:	21 91       	ld	r18, Z+
     dfa:	92 2b       	or	r25, r18
     dfc:	e4 17       	cp	r30, r20
     dfe:	f5 07       	cpc	r31, r21
     e00:	d9 f7       	brne	.-10     	; 0xdf8 <uECC_vli_isZero+0x16>
     e02:	01 c0       	rjmp	.+2      	; 0xe06 <uECC_vli_isZero+0x24>
     e04:	90 e0       	ldi	r25, 0x00	; 0
     e06:	81 e0       	ldi	r24, 0x01	; 1
     e08:	91 11       	cpse	r25, r1
     e0a:	80 e0       	ldi	r24, 0x00	; 0
     e0c:	08 95       	ret

00000e0e <uECC_vli_testBit>:
     e0e:	9b 01       	movw	r18, r22
     e10:	35 95       	asr	r19
     e12:	27 95       	ror	r18
     e14:	35 95       	asr	r19
     e16:	27 95       	ror	r18
     e18:	35 95       	asr	r19
     e1a:	27 95       	ror	r18
     e1c:	82 0f       	add	r24, r18
     e1e:	93 1f       	adc	r25, r19
     e20:	67 70       	andi	r22, 0x07	; 7
     e22:	77 27       	eor	r23, r23
     e24:	21 e0       	ldi	r18, 0x01	; 1
     e26:	30 e0       	ldi	r19, 0x00	; 0
     e28:	02 c0       	rjmp	.+4      	; 0xe2e <uECC_vli_testBit+0x20>
     e2a:	22 0f       	add	r18, r18
     e2c:	33 1f       	adc	r19, r19
     e2e:	6a 95       	dec	r22
     e30:	e2 f7       	brpl	.-8      	; 0xe2a <uECC_vli_testBit+0x1c>
     e32:	fc 01       	movw	r30, r24
     e34:	80 81       	ld	r24, Z
     e36:	82 23       	and	r24, r18
     e38:	08 95       	ret

00000e3a <uECC_vli_numBits>:
     e3a:	9c 01       	movw	r18, r24
     e3c:	61 50       	subi	r22, 0x01	; 1
     e3e:	92 f0       	brmi	.+36     	; 0xe64 <uECC_vli_numBits+0x2a>
     e40:	fc 01       	movw	r30, r24
     e42:	e6 0f       	add	r30, r22
     e44:	f1 1d       	adc	r31, r1
     e46:	67 fd       	sbrc	r22, 7
     e48:	fa 95       	dec	r31
     e4a:	80 81       	ld	r24, Z
     e4c:	81 11       	cpse	r24, r1
     e4e:	0a c0       	rjmp	.+20     	; 0xe64 <uECC_vli_numBits+0x2a>
     e50:	61 50       	subi	r22, 0x01	; 1
     e52:	42 f0       	brmi	.+16     	; 0xe64 <uECC_vli_numBits+0x2a>
     e54:	f9 01       	movw	r30, r18
     e56:	e6 0f       	add	r30, r22
     e58:	f1 1d       	adc	r31, r1
     e5a:	67 fd       	sbrc	r22, 7
     e5c:	fa 95       	dec	r31
     e5e:	90 81       	ld	r25, Z
     e60:	99 23       	and	r25, r25
     e62:	b1 f3       	breq	.-20     	; 0xe50 <uECC_vli_numBits+0x16>
     e64:	6f 5f       	subi	r22, 0xFF	; 255
     e66:	e9 f0       	breq	.+58     	; 0xea2 <uECC_vli_numBits+0x68>
     e68:	26 0f       	add	r18, r22
     e6a:	31 1d       	adc	r19, r1
     e6c:	67 fd       	sbrc	r22, 7
     e6e:	3a 95       	dec	r19
     e70:	f9 01       	movw	r30, r18
     e72:	31 97       	sbiw	r30, 0x01	; 1
     e74:	80 81       	ld	r24, Z
     e76:	88 23       	and	r24, r24
     e78:	31 f0       	breq	.+12     	; 0xe86 <uECC_vli_numBits+0x4c>
     e7a:	20 e0       	ldi	r18, 0x00	; 0
     e7c:	86 95       	lsr	r24
     e7e:	2f 5f       	subi	r18, 0xFF	; 255
     e80:	81 11       	cpse	r24, r1
     e82:	fc cf       	rjmp	.-8      	; 0xe7c <uECC_vli_numBits+0x42>
     e84:	01 c0       	rjmp	.+2      	; 0xe88 <uECC_vli_numBits+0x4e>
     e86:	20 e0       	ldi	r18, 0x00	; 0
     e88:	86 2f       	mov	r24, r22
     e8a:	66 0f       	add	r22, r22
     e8c:	99 0b       	sbc	r25, r25
     e8e:	01 97       	sbiw	r24, 0x01	; 1
     e90:	88 0f       	add	r24, r24
     e92:	99 1f       	adc	r25, r25
     e94:	88 0f       	add	r24, r24
     e96:	99 1f       	adc	r25, r25
     e98:	88 0f       	add	r24, r24
     e9a:	99 1f       	adc	r25, r25
     e9c:	82 0f       	add	r24, r18
     e9e:	91 1d       	adc	r25, r1
     ea0:	08 95       	ret
     ea2:	80 e0       	ldi	r24, 0x00	; 0
     ea4:	90 e0       	ldi	r25, 0x00	; 0
     ea6:	08 95       	ret

00000ea8 <uECC_vli_cmp_unsafe>:
     ea8:	dc 01       	movw	r26, r24
     eaa:	41 50       	subi	r20, 0x01	; 1
     eac:	2a f1       	brmi	.+74     	; 0xef8 <uECC_vli_cmp_unsafe+0x50>
     eae:	84 2f       	mov	r24, r20
     eb0:	04 2e       	mov	r0, r20
     eb2:	00 0c       	add	r0, r0
     eb4:	99 0b       	sbc	r25, r25
     eb6:	fd 01       	movw	r30, r26
     eb8:	e8 0f       	add	r30, r24
     eba:	f9 1f       	adc	r31, r25
     ebc:	20 81       	ld	r18, Z
     ebe:	fb 01       	movw	r30, r22
     ec0:	e8 0f       	add	r30, r24
     ec2:	f9 1f       	adc	r31, r25
     ec4:	80 81       	ld	r24, Z
     ec6:	82 17       	cp	r24, r18
     ec8:	c8 f0       	brcs	.+50     	; 0xefc <uECC_vli_cmp_unsafe+0x54>
     eca:	28 17       	cp	r18, r24
     ecc:	88 f4       	brcc	.+34     	; 0xef0 <uECC_vli_cmp_unsafe+0x48>
     ece:	18 c0       	rjmp	.+48     	; 0xf00 <uECC_vli_cmp_unsafe+0x58>
     ed0:	24 2f       	mov	r18, r20
     ed2:	04 2e       	mov	r0, r20
     ed4:	00 0c       	add	r0, r0
     ed6:	33 0b       	sbc	r19, r19
     ed8:	fd 01       	movw	r30, r26
     eda:	e2 0f       	add	r30, r18
     edc:	f3 1f       	adc	r31, r19
     ede:	50 81       	ld	r21, Z
     ee0:	fb 01       	movw	r30, r22
     ee2:	e2 0f       	add	r30, r18
     ee4:	f3 1f       	adc	r31, r19
     ee6:	90 81       	ld	r25, Z
     ee8:	95 17       	cp	r25, r21
     eea:	60 f0       	brcs	.+24     	; 0xf04 <uECC_vli_cmp_unsafe+0x5c>
     eec:	59 17       	cp	r21, r25
     eee:	60 f0       	brcs	.+24     	; 0xf08 <uECC_vli_cmp_unsafe+0x60>
     ef0:	41 50       	subi	r20, 0x01	; 1
     ef2:	72 f7       	brpl	.-36     	; 0xed0 <uECC_vli_cmp_unsafe+0x28>
     ef4:	80 e0       	ldi	r24, 0x00	; 0
     ef6:	08 95       	ret
     ef8:	80 e0       	ldi	r24, 0x00	; 0
     efa:	08 95       	ret
     efc:	81 e0       	ldi	r24, 0x01	; 1
     efe:	08 95       	ret
     f00:	8f ef       	ldi	r24, 0xFF	; 255
     f02:	08 95       	ret
     f04:	81 e0       	ldi	r24, 0x01	; 1
     f06:	08 95       	ret
     f08:	8f ef       	ldi	r24, 0xFF	; 255
     f0a:	08 95       	ret

00000f0c <uECC_vli_cmp>:
     f0c:	0f 93       	push	r16
     f0e:	1f 93       	push	r17
     f10:	cf 93       	push	r28
     f12:	df 93       	push	r29
     f14:	cd b7       	in	r28, 0x3d	; 61
     f16:	de b7       	in	r29, 0x3e	; 62
     f18:	a0 97       	sbiw	r28, 0x20	; 32
     f1a:	0f b6       	in	r0, 0x3f	; 63
     f1c:	f8 94       	cli
     f1e:	de bf       	out	0x3e, r29	; 62
     f20:	0f be       	out	0x3f, r0	; 63
     f22:	cd bf       	out	0x3d, r28	; 61
     f24:	14 2f       	mov	r17, r20
     f26:	24 2f       	mov	r18, r20
     f28:	ab 01       	movw	r20, r22
     f2a:	bc 01       	movw	r22, r24
     f2c:	ce 01       	movw	r24, r28
     f2e:	01 96       	adiw	r24, 0x01	; 1
     f30:	4b de       	rcall	.-874    	; 0xbc8 <uECC_vli_sub>
     f32:	08 2f       	mov	r16, r24
     f34:	61 2f       	mov	r22, r17
     f36:	ce 01       	movw	r24, r28
     f38:	01 96       	adiw	r24, 0x01	; 1
     f3a:	53 df       	rcall	.-346    	; 0xde2 <uECC_vli_isZero>
     f3c:	91 e0       	ldi	r25, 0x01	; 1
     f3e:	81 11       	cpse	r24, r1
     f40:	90 e0       	ldi	r25, 0x00	; 0
     f42:	81 e0       	ldi	r24, 0x01	; 1
     f44:	01 11       	cpse	r16, r1
     f46:	01 c0       	rjmp	.+2      	; 0xf4a <uECC_vli_cmp+0x3e>
     f48:	80 e0       	ldi	r24, 0x00	; 0
     f4a:	88 0f       	add	r24, r24
     f4c:	98 1b       	sub	r25, r24
     f4e:	89 2f       	mov	r24, r25
     f50:	a0 96       	adiw	r28, 0x20	; 32
     f52:	0f b6       	in	r0, 0x3f	; 63
     f54:	f8 94       	cli
     f56:	de bf       	out	0x3e, r29	; 62
     f58:	0f be       	out	0x3f, r0	; 63
     f5a:	cd bf       	out	0x3d, r28	; 61
     f5c:	df 91       	pop	r29
     f5e:	cf 91       	pop	r28
     f60:	1f 91       	pop	r17
     f62:	0f 91       	pop	r16
     f64:	08 95       	ret

00000f66 <uECC_vli_modAdd>:
     f66:	ef 92       	push	r14
     f68:	ff 92       	push	r15
     f6a:	0f 93       	push	r16
     f6c:	cf 93       	push	r28
     f6e:	df 93       	push	r29
     f70:	ec 01       	movw	r28, r24
     f72:	79 01       	movw	r14, r18
     f74:	20 2f       	mov	r18, r16
     f76:	57 dd       	rcall	.-1362   	; 0xa26 <uECC_vli_add>
     f78:	81 11       	cpse	r24, r1
     f7a:	06 c0       	rjmp	.+12     	; 0xf88 <uECC_vli_modAdd+0x22>
     f7c:	40 2f       	mov	r20, r16
     f7e:	be 01       	movw	r22, r28
     f80:	c7 01       	movw	r24, r14
     f82:	92 df       	rcall	.-220    	; 0xea8 <uECC_vli_cmp_unsafe>
     f84:	81 30       	cpi	r24, 0x01	; 1
     f86:	29 f0       	breq	.+10     	; 0xf92 <uECC_vli_modAdd+0x2c>
     f88:	20 2f       	mov	r18, r16
     f8a:	a7 01       	movw	r20, r14
     f8c:	be 01       	movw	r22, r28
     f8e:	ce 01       	movw	r24, r28
     f90:	1b de       	rcall	.-970    	; 0xbc8 <uECC_vli_sub>
     f92:	df 91       	pop	r29
     f94:	cf 91       	pop	r28
     f96:	0f 91       	pop	r16
     f98:	ff 90       	pop	r15
     f9a:	ef 90       	pop	r14
     f9c:	08 95       	ret

00000f9e <uECC_vli_modSub>:
     f9e:	ef 92       	push	r14
     fa0:	ff 92       	push	r15
     fa2:	0f 93       	push	r16
     fa4:	cf 93       	push	r28
     fa6:	df 93       	push	r29
     fa8:	ec 01       	movw	r28, r24
     faa:	79 01       	movw	r14, r18
     fac:	20 2f       	mov	r18, r16
     fae:	0c de       	rcall	.-1000   	; 0xbc8 <uECC_vli_sub>
     fb0:	88 23       	and	r24, r24
     fb2:	29 f0       	breq	.+10     	; 0xfbe <uECC_vli_modSub+0x20>
     fb4:	20 2f       	mov	r18, r16
     fb6:	a7 01       	movw	r20, r14
     fb8:	be 01       	movw	r22, r28
     fba:	ce 01       	movw	r24, r28
     fbc:	34 dd       	rcall	.-1432   	; 0xa26 <uECC_vli_add>
     fbe:	df 91       	pop	r29
     fc0:	cf 91       	pop	r28
     fc2:	0f 91       	pop	r16
     fc4:	ff 90       	pop	r15
     fc6:	ef 90       	pop	r14
     fc8:	08 95       	ret

00000fca <uECC_vli_modMult>:
     fca:	2f 92       	push	r2
     fcc:	3f 92       	push	r3
     fce:	4f 92       	push	r4
     fd0:	5f 92       	push	r5
     fd2:	6f 92       	push	r6
     fd4:	7f 92       	push	r7
     fd6:	8f 92       	push	r8
     fd8:	9f 92       	push	r9
     fda:	af 92       	push	r10
     fdc:	bf 92       	push	r11
     fde:	cf 92       	push	r12
     fe0:	df 92       	push	r13
     fe2:	ef 92       	push	r14
     fe4:	ff 92       	push	r15
     fe6:	0f 93       	push	r16
     fe8:	1f 93       	push	r17
     fea:	cf 93       	push	r28
     fec:	df 93       	push	r29
     fee:	cd b7       	in	r28, 0x3d	; 61
     ff0:	de b7       	in	r29, 0x3e	; 62
     ff2:	cc 5c       	subi	r28, 0xCC	; 204
     ff4:	d1 09       	sbc	r29, r1
     ff6:	0f b6       	in	r0, 0x3f	; 63
     ff8:	f8 94       	cli
     ffa:	de bf       	out	0x3e, r29	; 62
     ffc:	0f be       	out	0x3f, r0	; 63
     ffe:	cd bf       	out	0x3d, r28	; 61
    1000:	c7 53       	subi	r28, 0x37	; 55
    1002:	df 4f       	sbci	r29, 0xFF	; 255
    1004:	99 83       	std	Y+1, r25	; 0x01
    1006:	88 83       	st	Y, r24
    1008:	c9 5c       	subi	r28, 0xC9	; 201
    100a:	d0 40       	sbci	r29, 0x00	; 0
    100c:	c2 2e       	mov	r12, r18
    100e:	d3 2e       	mov	r13, r19
    1010:	a0 2e       	mov	r10, r16
    1012:	20 2f       	mov	r18, r16
    1014:	8e 01       	movw	r16, r28
    1016:	0f 5f       	subi	r16, 0xFF	; 255
    1018:	1f 4f       	sbci	r17, 0xFF	; 255
    101a:	c8 01       	movw	r24, r16
    101c:	a6 de       	rcall	.-692    	; 0xd6a <uECC_vli_mult>
    101e:	ce 01       	movw	r24, r28
    1020:	8f 5b       	subi	r24, 0xBF	; 191
    1022:	9f 4f       	sbci	r25, 0xFF	; 255
    1024:	cf 53       	subi	r28, 0x3F	; 63
    1026:	df 4f       	sbci	r29, 0xFF	; 255
    1028:	99 83       	std	Y+1, r25	; 0x01
    102a:	88 83       	st	Y, r24
    102c:	c1 5c       	subi	r28, 0xC1	; 193
    102e:	d0 40       	sbci	r29, 0x00	; 0
    1030:	cd 53       	subi	r28, 0x3D	; 61
    1032:	df 4f       	sbci	r29, 0xFF	; 255
    1034:	19 83       	std	Y+1, r17	; 0x01
    1036:	08 83       	st	Y, r16
    1038:	c3 5c       	subi	r28, 0xC3	; 195
    103a:	d0 40       	sbci	r29, 0x00	; 0
    103c:	8a 2c       	mov	r8, r10
    103e:	0a 2c       	mov	r0, r10
    1040:	00 0c       	add	r0, r0
    1042:	99 08       	sbc	r9, r9
    1044:	6a 2d       	mov	r22, r10
    1046:	8c 2d       	mov	r24, r12
    1048:	9d 2d       	mov	r25, r13
    104a:	f7 de       	rcall	.-530    	; 0xe3a <uECC_vli_numBits>
    104c:	34 01       	movw	r6, r8
    104e:	66 0c       	add	r6, r6
    1050:	77 1c       	adc	r7, r7
    1052:	66 0c       	add	r6, r6
    1054:	77 1c       	adc	r7, r7
    1056:	66 0c       	add	r6, r6
    1058:	77 1c       	adc	r7, r7
    105a:	66 0c       	add	r6, r6
    105c:	77 1c       	adc	r7, r7
    105e:	68 1a       	sub	r6, r24
    1060:	79 0a       	sbc	r7, r25
    1062:	73 01       	movw	r14, r6
    1064:	1a f4       	brpl	.+6      	; 0x106c <uECC_vli_modMult+0xa2>
    1066:	27 e0       	ldi	r18, 0x07	; 7
    1068:	e2 0e       	add	r14, r18
    106a:	f1 1c       	adc	r15, r1
    106c:	f5 94       	asr	r15
    106e:	e7 94       	ror	r14
    1070:	f5 94       	asr	r15
    1072:	e7 94       	ror	r14
    1074:	f5 94       	asr	r15
    1076:	e7 94       	ror	r14
    1078:	c3 01       	movw	r24, r6
    107a:	87 70       	andi	r24, 0x07	; 7
    107c:	90 78       	andi	r25, 0x80	; 128
    107e:	99 23       	and	r25, r25
    1080:	24 f4       	brge	.+8      	; 0x108a <uECC_vli_modMult+0xc0>
    1082:	01 97       	sbiw	r24, 0x01	; 1
    1084:	88 6f       	ori	r24, 0xF8	; 248
    1086:	9f 6f       	ori	r25, 0xFF	; 255
    1088:	01 96       	adiw	r24, 0x01	; 1
    108a:	18 2f       	mov	r17, r24
    108c:	6e 2d       	mov	r22, r14
    108e:	ce 01       	movw	r24, r28
    1090:	8f 57       	subi	r24, 0x7F	; 127
    1092:	9f 4f       	sbci	r25, 0xFF	; 255
    1094:	e2 db       	rcall	.-2108   	; 0x85a <uECC_vli_clear>
    1096:	11 16       	cp	r1, r17
    1098:	c4 f5       	brge	.+112    	; 0x110a <__stack+0xb>
    109a:	aa 20       	and	r10, r10
    109c:	09 f4       	brne	.+2      	; 0x10a0 <uECC_vli_modMult+0xd6>
    109e:	41 c0       	rjmp	.+130    	; 0x1122 <__stack+0x23>
    10a0:	ac 2d       	mov	r26, r12
    10a2:	bd 2d       	mov	r27, r13
    10a4:	0e 2c       	mov	r0, r14
    10a6:	00 0c       	add	r0, r0
    10a8:	ff 08       	sbc	r15, r15
    10aa:	e1 e8       	ldi	r30, 0x81	; 129
    10ac:	f0 e0       	ldi	r31, 0x00	; 0
    10ae:	ec 0f       	add	r30, r28
    10b0:	fd 1f       	adc	r31, r29
    10b2:	ee 0d       	add	r30, r14
    10b4:	ff 1d       	adc	r31, r15
    10b6:	8f ef       	ldi	r24, 0xFF	; 255
    10b8:	8a 0d       	add	r24, r10
    10ba:	90 e0       	ldi	r25, 0x00	; 0
    10bc:	01 96       	adiw	r24, 0x01	; 1
    10be:	e8 0e       	add	r14, r24
    10c0:	f9 1e       	adc	r15, r25
    10c2:	41 e8       	ldi	r20, 0x81	; 129
    10c4:	50 e0       	ldi	r21, 0x00	; 0
    10c6:	4c 0f       	add	r20, r28
    10c8:	5d 1f       	adc	r21, r29
    10ca:	4e 0d       	add	r20, r14
    10cc:	5f 1d       	adc	r21, r15
    10ce:	00 e0       	ldi	r16, 0x00	; 0
    10d0:	68 e0       	ldi	r22, 0x08	; 8
    10d2:	70 e0       	ldi	r23, 0x00	; 0
    10d4:	61 1b       	sub	r22, r17
    10d6:	71 09       	sbc	r23, r1
    10d8:	17 fd       	sbrc	r17, 7
    10da:	73 95       	inc	r23
    10dc:	9d 91       	ld	r25, X+
    10de:	89 2f       	mov	r24, r25
    10e0:	90 e0       	ldi	r25, 0x00	; 0
    10e2:	9c 01       	movw	r18, r24
    10e4:	01 2e       	mov	r0, r17
    10e6:	02 c0       	rjmp	.+4      	; 0x10ec <uECC_vli_modMult+0x122>
    10e8:	22 0f       	add	r18, r18
    10ea:	33 1f       	adc	r19, r19
    10ec:	0a 94       	dec	r0
    10ee:	e2 f7       	brpl	.-8      	; 0x10e8 <uECC_vli_modMult+0x11e>
    10f0:	20 2b       	or	r18, r16
    10f2:	21 93       	st	Z+, r18
    10f4:	06 2e       	mov	r0, r22
    10f6:	02 c0       	rjmp	.+4      	; 0x10fc <uECC_vli_modMult+0x132>
    10f8:	95 95       	asr	r25
    10fa:	87 95       	ror	r24
    10fc:	0a 94       	dec	r0
    10fe:	e2 f7       	brpl	.-8      	; 0x10f8 <uECC_vli_modMult+0x12e>
    1100:	08 2f       	mov	r16, r24
    1102:	e4 17       	cp	r30, r20
    1104:	f5 07       	cpc	r31, r21
    1106:	51 f7       	brne	.-44     	; 0x10dc <uECC_vli_modMult+0x112>
    1108:	0c c0       	rjmp	.+24     	; 0x1122 <__stack+0x23>
    110a:	4a 2d       	mov	r20, r10
    110c:	6c 2d       	mov	r22, r12
    110e:	7d 2d       	mov	r23, r13
    1110:	81 e8       	ldi	r24, 0x81	; 129
    1112:	90 e0       	ldi	r25, 0x00	; 0
    1114:	8c 0f       	add	r24, r28
    1116:	9d 1f       	adc	r25, r29
    1118:	8e 0d       	add	r24, r14
    111a:	91 1d       	adc	r25, r1
    111c:	e7 fc       	sbrc	r14, 7
    111e:	9a 95       	dec	r25
    1120:	c3 db       	rcall	.-2170   	; 0x8a8 <uECC_vli_set>
    1122:	77 20       	and	r7, r7
    1124:	0c f4       	brge	.+2      	; 0x1128 <__stack+0x29>
    1126:	a6 c0       	rjmp	.+332    	; 0x1274 <__stack+0x175>
    1128:	84 01       	movw	r16, r8
    112a:	00 0f       	add	r16, r16
    112c:	11 1f       	adc	r17, r17
    112e:	bb 24       	eor	r11, r11
    1130:	b3 94       	inc	r11
    1132:	44 24       	eor	r4, r4
    1134:	43 94       	inc	r4
    1136:	51 2c       	mov	r5, r1
    1138:	7e 01       	movw	r14, r28
    113a:	31 e8       	ldi	r19, 0x81	; 129
    113c:	e3 0e       	add	r14, r19
    113e:	f1 1c       	adc	r15, r1
    1140:	c9 53       	subi	r28, 0x39	; 57
    1142:	df 4f       	sbci	r29, 0xFF	; 255
    1144:	e8 82       	st	Y, r14
    1146:	c7 5c       	subi	r28, 0xC7	; 199
    1148:	d0 40       	sbci	r29, 0x00	; 0
    114a:	c8 53       	subi	r28, 0x38	; 56
    114c:	df 4f       	sbci	r29, 0xFF	; 255
    114e:	f8 82       	st	Y, r15
    1150:	c8 5c       	subi	r28, 0xC8	; 200
    1152:	d0 40       	sbci	r29, 0x00	; 0
    1154:	dd 24       	eor	r13, r13
    1156:	d3 94       	inc	r13
    1158:	c1 2c       	mov	r12, r1
    115a:	c4 01       	movw	r24, r8
    115c:	01 97       	sbiw	r24, 0x01	; 1
    115e:	17 01       	movw	r2, r14
    1160:	28 0e       	add	r2, r24
    1162:	39 1e       	adc	r3, r25
    1164:	8e 0c       	add	r8, r14
    1166:	9f 1c       	adc	r9, r15
    1168:	c7 01       	movw	r24, r14
    116a:	8a 0d       	add	r24, r10
    116c:	91 1d       	adc	r25, r1
    116e:	a7 fc       	sbrc	r10, 7
    1170:	9a 95       	dec	r25
    1172:	cb 53       	subi	r28, 0x3B	; 59
    1174:	df 4f       	sbci	r29, 0xFF	; 255
    1176:	99 83       	std	Y+1, r25	; 0x01
    1178:	88 83       	st	Y, r24
    117a:	c5 5c       	subi	r28, 0xC5	; 197
    117c:	d0 40       	sbci	r29, 0x00	; 0
    117e:	57 c0       	rjmp	.+174    	; 0x122e <__stack+0x12f>
    1180:	e6 2f       	mov	r30, r22
    1182:	06 2e       	mov	r0, r22
    1184:	00 0c       	add	r0, r0
    1186:	ff 0b       	sbc	r31, r31
    1188:	da 01       	movw	r26, r20
    118a:	ae 0f       	add	r26, r30
    118c:	bf 1f       	adc	r27, r31
    118e:	bc 90       	ld	r11, X
    1190:	c5 53       	subi	r28, 0x35	; 53
    1192:	df 4f       	sbci	r29, 0xFF	; 255
    1194:	b8 82       	st	Y, r11
    1196:	cb 5c       	subi	r28, 0xCB	; 203
    1198:	d0 40       	sbci	r29, 0x00	; 0
    119a:	8e 0d       	add	r24, r14
    119c:	9f 1d       	adc	r25, r15
    119e:	dc 01       	movw	r26, r24
    11a0:	8c 91       	ld	r24, X
    11a2:	b8 1a       	sub	r11, r24
    11a4:	8b 2d       	mov	r24, r11
    11a6:	87 1b       	sub	r24, r23
    11a8:	c5 53       	subi	r28, 0x35	; 53
    11aa:	df 4f       	sbci	r29, 0xFF	; 255
    11ac:	b8 81       	ld	r27, Y
    11ae:	cb 5c       	subi	r28, 0xCB	; 203
    11b0:	d0 40       	sbci	r29, 0x00	; 0
    11b2:	b8 17       	cp	r27, r24
    11b4:	21 f0       	breq	.+8      	; 0x11be <__stack+0xbf>
    11b6:	7d 2d       	mov	r23, r13
    11b8:	b8 17       	cp	r27, r24
    11ba:	08 f0       	brcs	.+2      	; 0x11be <__stack+0xbf>
    11bc:	7c 2d       	mov	r23, r12
    11be:	e2 0f       	add	r30, r18
    11c0:	f3 1f       	adc	r31, r19
    11c2:	80 83       	st	Z, r24
    11c4:	6f 5f       	subi	r22, 0xFF	; 255
    11c6:	86 2f       	mov	r24, r22
    11c8:	06 2e       	mov	r0, r22
    11ca:	00 0c       	add	r0, r0
    11cc:	99 0b       	sbc	r25, r25
    11ce:	80 17       	cp	r24, r16
    11d0:	91 07       	cpc	r25, r17
    11d2:	b4 f2       	brlt	.-84     	; 0x1180 <__stack+0x81>
    11d4:	c4 53       	subi	r28, 0x34	; 52
    11d6:	df 4f       	sbci	r29, 0xFF	; 255
    11d8:	b8 80       	ld	r11, Y
    11da:	cc 5c       	subi	r28, 0xCC	; 204
    11dc:	d0 40       	sbci	r29, 0x00	; 0
    11de:	01 c0       	rjmp	.+2      	; 0x11e2 <__stack+0xe3>
    11e0:	70 e0       	ldi	r23, 0x00	; 0
    11e2:	81 e0       	ldi	r24, 0x01	; 1
    11e4:	b7 12       	cpse	r11, r23
    11e6:	80 e0       	ldi	r24, 0x00	; 0
    11e8:	b8 2e       	mov	r11, r24
    11ea:	6a 2d       	mov	r22, r10
    11ec:	c9 53       	subi	r28, 0x39	; 57
    11ee:	df 4f       	sbci	r29, 0xFF	; 255
    11f0:	88 81       	ld	r24, Y
    11f2:	c7 5c       	subi	r28, 0xC7	; 199
    11f4:	d0 40       	sbci	r29, 0x00	; 0
    11f6:	c8 53       	subi	r28, 0x38	; 56
    11f8:	df 4f       	sbci	r29, 0xFF	; 255
    11fa:	98 81       	ld	r25, Y
    11fc:	c8 5c       	subi	r28, 0xC8	; 200
    11fe:	d0 40       	sbci	r29, 0x00	; 0
    1200:	a0 db       	rcall	.-2240   	; 0x942 <uECC_vli_rshift1>
    1202:	f4 01       	movw	r30, r8
    1204:	80 81       	ld	r24, Z
    1206:	f0 e8       	ldi	r31, 0x80	; 128
    1208:	8f 9f       	mul	r24, r31
    120a:	c0 01       	movw	r24, r0
    120c:	11 24       	eor	r1, r1
    120e:	d1 01       	movw	r26, r2
    1210:	9c 91       	ld	r25, X
    1212:	89 2b       	or	r24, r25
    1214:	8c 93       	st	X, r24
    1216:	6a 2d       	mov	r22, r10
    1218:	cb 53       	subi	r28, 0x3B	; 59
    121a:	df 4f       	sbci	r29, 0xFF	; 255
    121c:	88 81       	ld	r24, Y
    121e:	99 81       	ldd	r25, Y+1	; 0x01
    1220:	c5 5c       	subi	r28, 0xC5	; 197
    1222:	d0 40       	sbci	r29, 0x00	; 0
    1224:	8e db       	rcall	.-2276   	; 0x942 <uECC_vli_rshift1>
    1226:	b1 e0       	ldi	r27, 0x01	; 1
    1228:	6b 1a       	sub	r6, r27
    122a:	71 08       	sbc	r7, r1
    122c:	28 f1       	brcs	.+74     	; 0x1278 <__stack+0x179>
    122e:	10 16       	cp	r1, r16
    1230:	11 06       	cpc	r1, r17
    1232:	b4 f6       	brge	.-84     	; 0x11e0 <__stack+0xe1>
    1234:	8b 2d       	mov	r24, r11
    1236:	90 e0       	ldi	r25, 0x00	; 0
    1238:	fc 01       	movw	r30, r24
    123a:	ee 0f       	add	r30, r30
    123c:	ff 1f       	adc	r31, r31
    123e:	21 ec       	ldi	r18, 0xC1	; 193
    1240:	30 e0       	ldi	r19, 0x00	; 0
    1242:	2c 0f       	add	r18, r28
    1244:	3d 1f       	adc	r19, r29
    1246:	e2 0f       	add	r30, r18
    1248:	f3 1f       	adc	r31, r19
    124a:	40 81       	ld	r20, Z
    124c:	51 81       	ldd	r21, Z+1	; 0x01
    124e:	f2 01       	movw	r30, r4
    1250:	e8 1b       	sub	r30, r24
    1252:	f9 0b       	sbc	r31, r25
    1254:	ee 0f       	add	r30, r30
    1256:	ff 1f       	adc	r31, r31
    1258:	e2 0f       	add	r30, r18
    125a:	f3 1f       	adc	r31, r19
    125c:	20 81       	ld	r18, Z
    125e:	31 81       	ldd	r19, Z+1	; 0x01
    1260:	70 e0       	ldi	r23, 0x00	; 0
    1262:	80 e0       	ldi	r24, 0x00	; 0
    1264:	90 e0       	ldi	r25, 0x00	; 0
    1266:	60 e0       	ldi	r22, 0x00	; 0
    1268:	c4 53       	subi	r28, 0x34	; 52
    126a:	df 4f       	sbci	r29, 0xFF	; 255
    126c:	b8 82       	st	Y, r11
    126e:	cc 5c       	subi	r28, 0xCC	; 204
    1270:	d0 40       	sbci	r29, 0x00	; 0
    1272:	86 cf       	rjmp	.-244    	; 0x1180 <__stack+0x81>
    1274:	bb 24       	eor	r11, r11
    1276:	b3 94       	inc	r11
    1278:	eb 2d       	mov	r30, r11
    127a:	f0 e0       	ldi	r31, 0x00	; 0
    127c:	ee 0f       	add	r30, r30
    127e:	ff 1f       	adc	r31, r31
    1280:	81 ec       	ldi	r24, 0xC1	; 193
    1282:	90 e0       	ldi	r25, 0x00	; 0
    1284:	8c 0f       	add	r24, r28
    1286:	9d 1f       	adc	r25, r29
    1288:	e8 0f       	add	r30, r24
    128a:	f9 1f       	adc	r31, r25
    128c:	60 81       	ld	r22, Z
    128e:	71 81       	ldd	r23, Z+1	; 0x01
    1290:	4a 2d       	mov	r20, r10
    1292:	c7 53       	subi	r28, 0x37	; 55
    1294:	df 4f       	sbci	r29, 0xFF	; 255
    1296:	88 81       	ld	r24, Y
    1298:	99 81       	ldd	r25, Y+1	; 0x01
    129a:	c9 5c       	subi	r28, 0xC9	; 201
    129c:	d0 40       	sbci	r29, 0x00	; 0
    129e:	04 db       	rcall	.-2552   	; 0x8a8 <uECC_vli_set>
    12a0:	c4 53       	subi	r28, 0x34	; 52
    12a2:	df 4f       	sbci	r29, 0xFF	; 255
    12a4:	0f b6       	in	r0, 0x3f	; 63
    12a6:	f8 94       	cli
    12a8:	de bf       	out	0x3e, r29	; 62
    12aa:	0f be       	out	0x3f, r0	; 63
    12ac:	cd bf       	out	0x3d, r28	; 61
    12ae:	df 91       	pop	r29
    12b0:	cf 91       	pop	r28
    12b2:	1f 91       	pop	r17
    12b4:	0f 91       	pop	r16
    12b6:	ff 90       	pop	r15
    12b8:	ef 90       	pop	r14
    12ba:	df 90       	pop	r13
    12bc:	cf 90       	pop	r12
    12be:	bf 90       	pop	r11
    12c0:	af 90       	pop	r10
    12c2:	9f 90       	pop	r9
    12c4:	8f 90       	pop	r8
    12c6:	7f 90       	pop	r7
    12c8:	6f 90       	pop	r6
    12ca:	5f 90       	pop	r5
    12cc:	4f 90       	pop	r4
    12ce:	3f 90       	pop	r3
    12d0:	2f 90       	pop	r2
    12d2:	08 95       	ret

000012d4 <uECC_vli_modMult_fast>:
    12d4:	ef 92       	push	r14
    12d6:	ff 92       	push	r15
    12d8:	0f 93       	push	r16
    12da:	1f 93       	push	r17
    12dc:	cf 93       	push	r28
    12de:	df 93       	push	r29
    12e0:	cd b7       	in	r28, 0x3d	; 61
    12e2:	de b7       	in	r29, 0x3e	; 62
    12e4:	c0 54       	subi	r28, 0x40	; 64
    12e6:	d1 09       	sbc	r29, r1
    12e8:	0f b6       	in	r0, 0x3f	; 63
    12ea:	f8 94       	cli
    12ec:	de bf       	out	0x3e, r29	; 62
    12ee:	0f be       	out	0x3f, r0	; 63
    12f0:	cd bf       	out	0x3d, r28	; 61
    12f2:	7c 01       	movw	r14, r24
    12f4:	89 01       	movw	r16, r18
    12f6:	f9 01       	movw	r30, r18
    12f8:	20 81       	ld	r18, Z
    12fa:	ce 01       	movw	r24, r28
    12fc:	01 96       	adiw	r24, 0x01	; 1
    12fe:	35 dd       	rcall	.-1430   	; 0xd6a <uECC_vli_mult>
    1300:	f8 01       	movw	r30, r16
    1302:	e6 55       	subi	r30, 0x56	; 86
    1304:	ff 4f       	sbci	r31, 0xFF	; 255
    1306:	01 90       	ld	r0, Z+
    1308:	f0 81       	ld	r31, Z
    130a:	e0 2d       	mov	r30, r0
    130c:	be 01       	movw	r22, r28
    130e:	6f 5f       	subi	r22, 0xFF	; 255
    1310:	7f 4f       	sbci	r23, 0xFF	; 255
    1312:	c7 01       	movw	r24, r14
    1314:	09 95       	icall
    1316:	c0 5c       	subi	r28, 0xC0	; 192
    1318:	df 4f       	sbci	r29, 0xFF	; 255
    131a:	0f b6       	in	r0, 0x3f	; 63
    131c:	f8 94       	cli
    131e:	de bf       	out	0x3e, r29	; 62
    1320:	0f be       	out	0x3f, r0	; 63
    1322:	cd bf       	out	0x3d, r28	; 61
    1324:	df 91       	pop	r29
    1326:	cf 91       	pop	r28
    1328:	1f 91       	pop	r17
    132a:	0f 91       	pop	r16
    132c:	ff 90       	pop	r15
    132e:	ef 90       	pop	r14
    1330:	08 95       	ret

00001332 <uECC_vli_modSquare_fast>:
    1332:	9a 01       	movw	r18, r20
    1334:	ab 01       	movw	r20, r22
    1336:	ce cf       	rjmp	.-100    	; 0x12d4 <uECC_vli_modMult_fast>
    1338:	08 95       	ret

0000133a <vli_modInv_update>:
    133a:	0f 93       	push	r16
    133c:	1f 93       	push	r17
    133e:	cf 93       	push	r28
    1340:	df 93       	push	r29
    1342:	8c 01       	movw	r16, r24
    1344:	c4 2f       	mov	r28, r20
    1346:	fc 01       	movw	r30, r24
    1348:	80 81       	ld	r24, Z
    134a:	80 ff       	sbrs	r24, 0
    134c:	15 c0       	rjmp	.+42     	; 0x1378 <vli_modInv_update+0x3e>
    134e:	24 2f       	mov	r18, r20
    1350:	ab 01       	movw	r20, r22
    1352:	b8 01       	movw	r22, r16
    1354:	c8 01       	movw	r24, r16
    1356:	67 db       	rcall	.-2354   	; 0xa26 <uECC_vli_add>
    1358:	d8 2f       	mov	r29, r24
    135a:	6c 2f       	mov	r22, r28
    135c:	c8 01       	movw	r24, r16
    135e:	f1 da       	rcall	.-2590   	; 0x942 <uECC_vli_rshift1>
    1360:	dd 23       	and	r29, r29
    1362:	69 f0       	breq	.+26     	; 0x137e <vli_modInv_update+0x44>
    1364:	ec 2f       	mov	r30, r28
    1366:	cc 0f       	add	r28, r28
    1368:	ff 0b       	sbc	r31, r31
    136a:	31 97       	sbiw	r30, 0x01	; 1
    136c:	e0 0f       	add	r30, r16
    136e:	f1 1f       	adc	r31, r17
    1370:	80 81       	ld	r24, Z
    1372:	80 68       	ori	r24, 0x80	; 128
    1374:	80 83       	st	Z, r24
    1376:	03 c0       	rjmp	.+6      	; 0x137e <vli_modInv_update+0x44>
    1378:	64 2f       	mov	r22, r20
    137a:	c8 01       	movw	r24, r16
    137c:	e2 da       	rcall	.-2620   	; 0x942 <uECC_vli_rshift1>
    137e:	df 91       	pop	r29
    1380:	cf 91       	pop	r28
    1382:	1f 91       	pop	r17
    1384:	0f 91       	pop	r16
    1386:	08 95       	ret

00001388 <uECC_vli_modInv>:
    1388:	af 92       	push	r10
    138a:	bf 92       	push	r11
    138c:	cf 92       	push	r12
    138e:	df 92       	push	r13
    1390:	ef 92       	push	r14
    1392:	ff 92       	push	r15
    1394:	1f 93       	push	r17
    1396:	cf 93       	push	r28
    1398:	df 93       	push	r29
    139a:	cd b7       	in	r28, 0x3d	; 61
    139c:	de b7       	in	r29, 0x3e	; 62
    139e:	c0 58       	subi	r28, 0x80	; 128
    13a0:	d1 09       	sbc	r29, r1
    13a2:	0f b6       	in	r0, 0x3f	; 63
    13a4:	f8 94       	cli
    13a6:	de bf       	out	0x3e, r29	; 62
    13a8:	0f be       	out	0x3f, r0	; 63
    13aa:	cd bf       	out	0x3d, r28	; 61
    13ac:	5c 01       	movw	r10, r24
    13ae:	6b 01       	movw	r12, r22
    13b0:	7a 01       	movw	r14, r20
    13b2:	12 2f       	mov	r17, r18
    13b4:	62 2f       	mov	r22, r18
    13b6:	c6 01       	movw	r24, r12
    13b8:	14 dd       	rcall	.-1496   	; 0xde2 <uECC_vli_isZero>
    13ba:	88 23       	and	r24, r24
    13bc:	21 f0       	breq	.+8      	; 0x13c6 <uECC_vli_modInv+0x3e>
    13be:	61 2f       	mov	r22, r17
    13c0:	c5 01       	movw	r24, r10
    13c2:	4b da       	rcall	.-2922   	; 0x85a <uECC_vli_clear>
    13c4:	a1 c0       	rjmp	.+322    	; 0x1508 <uECC_vli_modInv+0x180>
    13c6:	41 2f       	mov	r20, r17
    13c8:	b6 01       	movw	r22, r12
    13ca:	ce 01       	movw	r24, r28
    13cc:	01 96       	adiw	r24, 0x01	; 1
    13ce:	6c da       	rcall	.-2856   	; 0x8a8 <uECC_vli_set>
    13d0:	41 2f       	mov	r20, r17
    13d2:	b7 01       	movw	r22, r14
    13d4:	ce 01       	movw	r24, r28
    13d6:	81 96       	adiw	r24, 0x21	; 33
    13d8:	67 da       	rcall	.-2866   	; 0x8a8 <uECC_vli_set>
    13da:	61 2f       	mov	r22, r17
    13dc:	ce 01       	movw	r24, r28
    13de:	8f 5b       	subi	r24, 0xBF	; 191
    13e0:	9f 4f       	sbci	r25, 0xFF	; 255
    13e2:	3b da       	rcall	.-2954   	; 0x85a <uECC_vli_clear>
    13e4:	81 e0       	ldi	r24, 0x01	; 1
    13e6:	22 96       	adiw	r28, 0x02	; 2
    13e8:	8f af       	std	Y+63, r24	; 0x3f
    13ea:	22 97       	sbiw	r28, 0x02	; 2
    13ec:	61 2f       	mov	r22, r17
    13ee:	ce 01       	movw	r24, r28
    13f0:	8f 59       	subi	r24, 0x9F	; 159
    13f2:	9f 4f       	sbci	r25, 0xFF	; 255
    13f4:	32 da       	rcall	.-2972   	; 0x85a <uECC_vli_clear>
    13f6:	79 c0       	rjmp	.+242    	; 0x14ea <uECC_vli_modInv+0x162>
    13f8:	99 81       	ldd	r25, Y+1	; 0x01
    13fa:	90 fd       	sbrc	r25, 0
    13fc:	0b c0       	rjmp	.+22     	; 0x1414 <uECC_vli_modInv+0x8c>
    13fe:	61 2f       	mov	r22, r17
    1400:	ce 01       	movw	r24, r28
    1402:	01 96       	adiw	r24, 0x01	; 1
    1404:	9e da       	rcall	.-2756   	; 0x942 <uECC_vli_rshift1>
    1406:	41 2f       	mov	r20, r17
    1408:	b7 01       	movw	r22, r14
    140a:	ce 01       	movw	r24, r28
    140c:	8f 5b       	subi	r24, 0xBF	; 191
    140e:	9f 4f       	sbci	r25, 0xFF	; 255
    1410:	94 df       	rcall	.-216    	; 0x133a <vli_modInv_update>
    1412:	6b c0       	rjmp	.+214    	; 0x14ea <uECC_vli_modInv+0x162>
    1414:	99 a1       	ldd	r25, Y+33	; 0x21
    1416:	90 fd       	sbrc	r25, 0
    1418:	0b c0       	rjmp	.+22     	; 0x1430 <uECC_vli_modInv+0xa8>
    141a:	61 2f       	mov	r22, r17
    141c:	ce 01       	movw	r24, r28
    141e:	81 96       	adiw	r24, 0x21	; 33
    1420:	90 da       	rcall	.-2784   	; 0x942 <uECC_vli_rshift1>
    1422:	41 2f       	mov	r20, r17
    1424:	b7 01       	movw	r22, r14
    1426:	ce 01       	movw	r24, r28
    1428:	8f 59       	subi	r24, 0x9F	; 159
    142a:	9f 4f       	sbci	r25, 0xFF	; 255
    142c:	86 df       	rcall	.-244    	; 0x133a <vli_modInv_update>
    142e:	5d c0       	rjmp	.+186    	; 0x14ea <uECC_vli_modInv+0x162>
    1430:	18 16       	cp	r1, r24
    1432:	74 f5       	brge	.+92     	; 0x1490 <uECC_vli_modInv+0x108>
    1434:	21 2f       	mov	r18, r17
    1436:	ae 01       	movw	r20, r28
    1438:	4f 5d       	subi	r20, 0xDF	; 223
    143a:	5f 4f       	sbci	r21, 0xFF	; 255
    143c:	be 01       	movw	r22, r28
    143e:	6f 5f       	subi	r22, 0xFF	; 255
    1440:	7f 4f       	sbci	r23, 0xFF	; 255
    1442:	cb 01       	movw	r24, r22
    1444:	c1 db       	rcall	.-2174   	; 0xbc8 <uECC_vli_sub>
    1446:	61 2f       	mov	r22, r17
    1448:	ce 01       	movw	r24, r28
    144a:	01 96       	adiw	r24, 0x01	; 1
    144c:	7a da       	rcall	.-2828   	; 0x942 <uECC_vli_rshift1>
    144e:	41 2f       	mov	r20, r17
    1450:	be 01       	movw	r22, r28
    1452:	6f 59       	subi	r22, 0x9F	; 159
    1454:	7f 4f       	sbci	r23, 0xFF	; 255
    1456:	ce 01       	movw	r24, r28
    1458:	8f 5b       	subi	r24, 0xBF	; 191
    145a:	9f 4f       	sbci	r25, 0xFF	; 255
    145c:	25 dd       	rcall	.-1462   	; 0xea8 <uECC_vli_cmp_unsafe>
    145e:	88 23       	and	r24, r24
    1460:	3c f4       	brge	.+14     	; 0x1470 <uECC_vli_modInv+0xe8>
    1462:	21 2f       	mov	r18, r17
    1464:	a7 01       	movw	r20, r14
    1466:	be 01       	movw	r22, r28
    1468:	6f 5b       	subi	r22, 0xBF	; 191
    146a:	7f 4f       	sbci	r23, 0xFF	; 255
    146c:	cb 01       	movw	r24, r22
    146e:	db da       	rcall	.-2634   	; 0xa26 <uECC_vli_add>
    1470:	21 2f       	mov	r18, r17
    1472:	ae 01       	movw	r20, r28
    1474:	4f 59       	subi	r20, 0x9F	; 159
    1476:	5f 4f       	sbci	r21, 0xFF	; 255
    1478:	be 01       	movw	r22, r28
    147a:	6f 5b       	subi	r22, 0xBF	; 191
    147c:	7f 4f       	sbci	r23, 0xFF	; 255
    147e:	cb 01       	movw	r24, r22
    1480:	a3 db       	rcall	.-2234   	; 0xbc8 <uECC_vli_sub>
    1482:	41 2f       	mov	r20, r17
    1484:	b7 01       	movw	r22, r14
    1486:	ce 01       	movw	r24, r28
    1488:	8f 5b       	subi	r24, 0xBF	; 191
    148a:	9f 4f       	sbci	r25, 0xFF	; 255
    148c:	56 df       	rcall	.-340    	; 0x133a <vli_modInv_update>
    148e:	2d c0       	rjmp	.+90     	; 0x14ea <uECC_vli_modInv+0x162>
    1490:	21 2f       	mov	r18, r17
    1492:	ae 01       	movw	r20, r28
    1494:	4f 5f       	subi	r20, 0xFF	; 255
    1496:	5f 4f       	sbci	r21, 0xFF	; 255
    1498:	be 01       	movw	r22, r28
    149a:	6f 5d       	subi	r22, 0xDF	; 223
    149c:	7f 4f       	sbci	r23, 0xFF	; 255
    149e:	cb 01       	movw	r24, r22
    14a0:	93 db       	rcall	.-2266   	; 0xbc8 <uECC_vli_sub>
    14a2:	61 2f       	mov	r22, r17
    14a4:	ce 01       	movw	r24, r28
    14a6:	81 96       	adiw	r24, 0x21	; 33
    14a8:	4c da       	rcall	.-2920   	; 0x942 <uECC_vli_rshift1>
    14aa:	41 2f       	mov	r20, r17
    14ac:	be 01       	movw	r22, r28
    14ae:	6f 5b       	subi	r22, 0xBF	; 191
    14b0:	7f 4f       	sbci	r23, 0xFF	; 255
    14b2:	ce 01       	movw	r24, r28
    14b4:	8f 59       	subi	r24, 0x9F	; 159
    14b6:	9f 4f       	sbci	r25, 0xFF	; 255
    14b8:	f7 dc       	rcall	.-1554   	; 0xea8 <uECC_vli_cmp_unsafe>
    14ba:	88 23       	and	r24, r24
    14bc:	3c f4       	brge	.+14     	; 0x14cc <uECC_vli_modInv+0x144>
    14be:	21 2f       	mov	r18, r17
    14c0:	a7 01       	movw	r20, r14
    14c2:	be 01       	movw	r22, r28
    14c4:	6f 59       	subi	r22, 0x9F	; 159
    14c6:	7f 4f       	sbci	r23, 0xFF	; 255
    14c8:	cb 01       	movw	r24, r22
    14ca:	ad da       	rcall	.-2726   	; 0xa26 <uECC_vli_add>
    14cc:	21 2f       	mov	r18, r17
    14ce:	ae 01       	movw	r20, r28
    14d0:	4f 5b       	subi	r20, 0xBF	; 191
    14d2:	5f 4f       	sbci	r21, 0xFF	; 255
    14d4:	be 01       	movw	r22, r28
    14d6:	6f 59       	subi	r22, 0x9F	; 159
    14d8:	7f 4f       	sbci	r23, 0xFF	; 255
    14da:	cb 01       	movw	r24, r22
    14dc:	75 db       	rcall	.-2326   	; 0xbc8 <uECC_vli_sub>
    14de:	41 2f       	mov	r20, r17
    14e0:	b7 01       	movw	r22, r14
    14e2:	ce 01       	movw	r24, r28
    14e4:	8f 59       	subi	r24, 0x9F	; 159
    14e6:	9f 4f       	sbci	r25, 0xFF	; 255
    14e8:	28 df       	rcall	.-432    	; 0x133a <vli_modInv_update>
    14ea:	41 2f       	mov	r20, r17
    14ec:	be 01       	movw	r22, r28
    14ee:	6f 5d       	subi	r22, 0xDF	; 223
    14f0:	7f 4f       	sbci	r23, 0xFF	; 255
    14f2:	ce 01       	movw	r24, r28
    14f4:	01 96       	adiw	r24, 0x01	; 1
    14f6:	d8 dc       	rcall	.-1616   	; 0xea8 <uECC_vli_cmp_unsafe>
    14f8:	81 11       	cpse	r24, r1
    14fa:	7e cf       	rjmp	.-260    	; 0x13f8 <uECC_vli_modInv+0x70>
    14fc:	41 2f       	mov	r20, r17
    14fe:	be 01       	movw	r22, r28
    1500:	6f 5b       	subi	r22, 0xBF	; 191
    1502:	7f 4f       	sbci	r23, 0xFF	; 255
    1504:	c5 01       	movw	r24, r10
    1506:	d0 d9       	rcall	.-3168   	; 0x8a8 <uECC_vli_set>
    1508:	c0 58       	subi	r28, 0x80	; 128
    150a:	df 4f       	sbci	r29, 0xFF	; 255
    150c:	0f b6       	in	r0, 0x3f	; 63
    150e:	f8 94       	cli
    1510:	de bf       	out	0x3e, r29	; 62
    1512:	0f be       	out	0x3f, r0	; 63
    1514:	cd bf       	out	0x3d, r28	; 61
    1516:	df 91       	pop	r29
    1518:	cf 91       	pop	r28
    151a:	1f 91       	pop	r17
    151c:	ff 90       	pop	r15
    151e:	ef 90       	pop	r14
    1520:	df 90       	pop	r13
    1522:	cf 90       	pop	r12
    1524:	bf 90       	pop	r11
    1526:	af 90       	pop	r10
    1528:	08 95       	ret

0000152a <double_jacobian_default>:
    152a:	6f 92       	push	r6
    152c:	7f 92       	push	r7
    152e:	8f 92       	push	r8
    1530:	9f 92       	push	r9
    1532:	af 92       	push	r10
    1534:	bf 92       	push	r11
    1536:	cf 92       	push	r12
    1538:	df 92       	push	r13
    153a:	ef 92       	push	r14
    153c:	ff 92       	push	r15
    153e:	0f 93       	push	r16
    1540:	1f 93       	push	r17
    1542:	cf 93       	push	r28
    1544:	df 93       	push	r29
    1546:	cd b7       	in	r28, 0x3d	; 61
    1548:	de b7       	in	r29, 0x3e	; 62
    154a:	c0 54       	subi	r28, 0x40	; 64
    154c:	d1 09       	sbc	r29, r1
    154e:	0f b6       	in	r0, 0x3f	; 63
    1550:	f8 94       	cli
    1552:	de bf       	out	0x3e, r29	; 62
    1554:	0f be       	out	0x3f, r0	; 63
    1556:	cd bf       	out	0x3d, r28	; 61
    1558:	6c 01       	movw	r12, r24
    155a:	3b 01       	movw	r6, r22
    155c:	7a 01       	movw	r14, r20
    155e:	59 01       	movw	r10, r18
    1560:	f9 01       	movw	r30, r18
    1562:	10 81       	ld	r17, Z
    1564:	61 2f       	mov	r22, r17
    1566:	ca 01       	movw	r24, r20
    1568:	3c dc       	rcall	.-1928   	; 0xde2 <uECC_vli_isZero>
    156a:	81 11       	cpse	r24, r1
    156c:	96 c0       	rjmp	.+300    	; 0x169a <double_jacobian_default+0x170>
    156e:	a5 01       	movw	r20, r10
    1570:	b3 01       	movw	r22, r6
    1572:	ce 01       	movw	r24, r28
    1574:	01 96       	adiw	r24, 0x01	; 1
    1576:	dd de       	rcall	.-582    	; 0x1332 <uECC_vli_modSquare_fast>
    1578:	95 01       	movw	r18, r10
    157a:	ae 01       	movw	r20, r28
    157c:	4f 5f       	subi	r20, 0xFF	; 255
    157e:	5f 4f       	sbci	r21, 0xFF	; 255
    1580:	b6 01       	movw	r22, r12
    1582:	ce 01       	movw	r24, r28
    1584:	81 96       	adiw	r24, 0x21	; 33
    1586:	a6 de       	rcall	.-692    	; 0x12d4 <uECC_vli_modMult_fast>
    1588:	a5 01       	movw	r20, r10
    158a:	be 01       	movw	r22, r28
    158c:	6f 5f       	subi	r22, 0xFF	; 255
    158e:	7f 4f       	sbci	r23, 0xFF	; 255
    1590:	cb 01       	movw	r24, r22
    1592:	cf de       	rcall	.-610    	; 0x1332 <uECC_vli_modSquare_fast>
    1594:	95 01       	movw	r18, r10
    1596:	a7 01       	movw	r20, r14
    1598:	b3 01       	movw	r22, r6
    159a:	c3 01       	movw	r24, r6
    159c:	9b de       	rcall	.-714    	; 0x12d4 <uECC_vli_modMult_fast>
    159e:	a5 01       	movw	r20, r10
    15a0:	b7 01       	movw	r22, r14
    15a2:	c7 01       	movw	r24, r14
    15a4:	c6 de       	rcall	.-628    	; 0x1332 <uECC_vli_modSquare_fast>
    15a6:	45 01       	movw	r8, r10
    15a8:	f4 e0       	ldi	r31, 0x04	; 4
    15aa:	8f 0e       	add	r8, r31
    15ac:	91 1c       	adc	r9, r1
    15ae:	01 2f       	mov	r16, r17
    15b0:	94 01       	movw	r18, r8
    15b2:	a7 01       	movw	r20, r14
    15b4:	b6 01       	movw	r22, r12
    15b6:	c6 01       	movw	r24, r12
    15b8:	d6 dc       	rcall	.-1620   	; 0xf66 <uECC_vli_modAdd>
    15ba:	94 01       	movw	r18, r8
    15bc:	a7 01       	movw	r20, r14
    15be:	b7 01       	movw	r22, r14
    15c0:	c7 01       	movw	r24, r14
    15c2:	d1 dc       	rcall	.-1630   	; 0xf66 <uECC_vli_modAdd>
    15c4:	94 01       	movw	r18, r8
    15c6:	a7 01       	movw	r20, r14
    15c8:	b6 01       	movw	r22, r12
    15ca:	c7 01       	movw	r24, r14
    15cc:	e8 dc       	rcall	.-1584   	; 0xf9e <uECC_vli_modSub>
    15ce:	95 01       	movw	r18, r10
    15d0:	a7 01       	movw	r20, r14
    15d2:	b6 01       	movw	r22, r12
    15d4:	c6 01       	movw	r24, r12
    15d6:	7e de       	rcall	.-772    	; 0x12d4 <uECC_vli_modMult_fast>
    15d8:	94 01       	movw	r18, r8
    15da:	a6 01       	movw	r20, r12
    15dc:	b6 01       	movw	r22, r12
    15de:	c7 01       	movw	r24, r14
    15e0:	c2 dc       	rcall	.-1660   	; 0xf66 <uECC_vli_modAdd>
    15e2:	94 01       	movw	r18, r8
    15e4:	a7 01       	movw	r20, r14
    15e6:	b6 01       	movw	r22, r12
    15e8:	c6 01       	movw	r24, r12
    15ea:	bd dc       	rcall	.-1670   	; 0xf66 <uECC_vli_modAdd>
    15ec:	60 e0       	ldi	r22, 0x00	; 0
    15ee:	70 e0       	ldi	r23, 0x00	; 0
    15f0:	c6 01       	movw	r24, r12
    15f2:	0d dc       	rcall	.-2022   	; 0xe0e <uECC_vli_testBit>
    15f4:	88 23       	and	r24, r24
    15f6:	c1 f0       	breq	.+48     	; 0x1628 <double_jacobian_default+0xfe>
    15f8:	21 2f       	mov	r18, r17
    15fa:	a4 01       	movw	r20, r8
    15fc:	b6 01       	movw	r22, r12
    15fe:	c6 01       	movw	r24, r12
    1600:	12 da       	rcall	.-3036   	; 0xa26 <uECC_vli_add>
    1602:	08 2f       	mov	r16, r24
    1604:	61 2f       	mov	r22, r17
    1606:	c6 01       	movw	r24, r12
    1608:	9c d9       	rcall	.-3272   	; 0x942 <uECC_vli_rshift1>
    160a:	e1 2f       	mov	r30, r17
    160c:	01 2e       	mov	r0, r17
    160e:	00 0c       	add	r0, r0
    1610:	ff 0b       	sbc	r31, r31
    1612:	31 97       	sbiw	r30, 0x01	; 1
    1614:	ec 0d       	add	r30, r12
    1616:	fd 1d       	adc	r31, r13
    1618:	20 e8       	ldi	r18, 0x80	; 128
    161a:	02 9f       	mul	r16, r18
    161c:	c0 01       	movw	r24, r0
    161e:	11 24       	eor	r1, r1
    1620:	00 81       	ld	r16, Z
    1622:	08 2b       	or	r16, r24
    1624:	00 83       	st	Z, r16
    1626:	03 c0       	rjmp	.+6      	; 0x162e <double_jacobian_default+0x104>
    1628:	61 2f       	mov	r22, r17
    162a:	c6 01       	movw	r24, r12
    162c:	8a d9       	rcall	.-3308   	; 0x942 <uECC_vli_rshift1>
    162e:	a5 01       	movw	r20, r10
    1630:	b6 01       	movw	r22, r12
    1632:	c7 01       	movw	r24, r14
    1634:	7e de       	rcall	.-772    	; 0x1332 <uECC_vli_modSquare_fast>
    1636:	01 2f       	mov	r16, r17
    1638:	94 01       	movw	r18, r8
    163a:	ae 01       	movw	r20, r28
    163c:	4f 5d       	subi	r20, 0xDF	; 223
    163e:	5f 4f       	sbci	r21, 0xFF	; 255
    1640:	b7 01       	movw	r22, r14
    1642:	c7 01       	movw	r24, r14
    1644:	ac dc       	rcall	.-1704   	; 0xf9e <uECC_vli_modSub>
    1646:	94 01       	movw	r18, r8
    1648:	ae 01       	movw	r20, r28
    164a:	4f 5d       	subi	r20, 0xDF	; 223
    164c:	5f 4f       	sbci	r21, 0xFF	; 255
    164e:	b7 01       	movw	r22, r14
    1650:	c7 01       	movw	r24, r14
    1652:	a5 dc       	rcall	.-1718   	; 0xf9e <uECC_vli_modSub>
    1654:	94 01       	movw	r18, r8
    1656:	a7 01       	movw	r20, r14
    1658:	be 01       	movw	r22, r28
    165a:	6f 5d       	subi	r22, 0xDF	; 223
    165c:	7f 4f       	sbci	r23, 0xFF	; 255
    165e:	cb 01       	movw	r24, r22
    1660:	9e dc       	rcall	.-1732   	; 0xf9e <uECC_vli_modSub>
    1662:	95 01       	movw	r18, r10
    1664:	ae 01       	movw	r20, r28
    1666:	4f 5d       	subi	r20, 0xDF	; 223
    1668:	5f 4f       	sbci	r21, 0xFF	; 255
    166a:	b6 01       	movw	r22, r12
    166c:	c6 01       	movw	r24, r12
    166e:	32 de       	rcall	.-924    	; 0x12d4 <uECC_vli_modMult_fast>
    1670:	94 01       	movw	r18, r8
    1672:	ae 01       	movw	r20, r28
    1674:	4f 5f       	subi	r20, 0xFF	; 255
    1676:	5f 4f       	sbci	r21, 0xFF	; 255
    1678:	b6 01       	movw	r22, r12
    167a:	ca 01       	movw	r24, r20
    167c:	90 dc       	rcall	.-1760   	; 0xf9e <uECC_vli_modSub>
    167e:	41 2f       	mov	r20, r17
    1680:	b7 01       	movw	r22, r14
    1682:	c6 01       	movw	r24, r12
    1684:	11 d9       	rcall	.-3550   	; 0x8a8 <uECC_vli_set>
    1686:	41 2f       	mov	r20, r17
    1688:	b3 01       	movw	r22, r6
    168a:	c7 01       	movw	r24, r14
    168c:	0d d9       	rcall	.-3558   	; 0x8a8 <uECC_vli_set>
    168e:	41 2f       	mov	r20, r17
    1690:	be 01       	movw	r22, r28
    1692:	6f 5f       	subi	r22, 0xFF	; 255
    1694:	7f 4f       	sbci	r23, 0xFF	; 255
    1696:	c3 01       	movw	r24, r6
    1698:	07 d9       	rcall	.-3570   	; 0x8a8 <uECC_vli_set>
    169a:	c0 5c       	subi	r28, 0xC0	; 192
    169c:	df 4f       	sbci	r29, 0xFF	; 255
    169e:	0f b6       	in	r0, 0x3f	; 63
    16a0:	f8 94       	cli
    16a2:	de bf       	out	0x3e, r29	; 62
    16a4:	0f be       	out	0x3f, r0	; 63
    16a6:	cd bf       	out	0x3d, r28	; 61
    16a8:	df 91       	pop	r29
    16aa:	cf 91       	pop	r28
    16ac:	1f 91       	pop	r17
    16ae:	0f 91       	pop	r16
    16b0:	ff 90       	pop	r15
    16b2:	ef 90       	pop	r14
    16b4:	df 90       	pop	r13
    16b6:	cf 90       	pop	r12
    16b8:	bf 90       	pop	r11
    16ba:	af 90       	pop	r10
    16bc:	9f 90       	pop	r9
    16be:	8f 90       	pop	r8
    16c0:	7f 90       	pop	r7
    16c2:	6f 90       	pop	r6
    16c4:	08 95       	ret

000016c6 <x_side_default>:
    16c6:	6f 92       	push	r6
    16c8:	7f 92       	push	r7
    16ca:	8f 92       	push	r8
    16cc:	9f 92       	push	r9
    16ce:	af 92       	push	r10
    16d0:	bf 92       	push	r11
    16d2:	cf 92       	push	r12
    16d4:	df 92       	push	r13
    16d6:	ef 92       	push	r14
    16d8:	ff 92       	push	r15
    16da:	0f 93       	push	r16
    16dc:	1f 93       	push	r17
    16de:	cf 93       	push	r28
    16e0:	df 93       	push	r29
    16e2:	cd b7       	in	r28, 0x3d	; 61
    16e4:	de b7       	in	r29, 0x3e	; 62
    16e6:	a0 97       	sbiw	r28, 0x20	; 32
    16e8:	0f b6       	in	r0, 0x3f	; 63
    16ea:	f8 94       	cli
    16ec:	de bf       	out	0x3e, r29	; 62
    16ee:	0f be       	out	0x3f, r0	; 63
    16f0:	cd bf       	out	0x3d, r28	; 61
    16f2:	7c 01       	movw	r14, r24
    16f4:	4b 01       	movw	r8, r22
    16f6:	6a 01       	movw	r12, r20
    16f8:	ce 01       	movw	r24, r28
    16fa:	01 96       	adiw	r24, 0x01	; 1
    16fc:	3c 01       	movw	r6, r24
    16fe:	80 e2       	ldi	r24, 0x20	; 32
    1700:	f3 01       	movw	r30, r6
    1702:	11 92       	st	Z+, r1
    1704:	8a 95       	dec	r24
    1706:	e9 f7       	brne	.-6      	; 0x1702 <x_side_default+0x3c>
    1708:	83 e0       	ldi	r24, 0x03	; 3
    170a:	89 83       	std	Y+1, r24	; 0x01
    170c:	fa 01       	movw	r30, r20
    170e:	10 81       	ld	r17, Z
    1710:	c7 01       	movw	r24, r14
    1712:	0f de       	rcall	.-994    	; 0x1332 <uECC_vli_modSquare_fast>
    1714:	56 01       	movw	r10, r12
    1716:	f4 e0       	ldi	r31, 0x04	; 4
    1718:	af 0e       	add	r10, r31
    171a:	b1 1c       	adc	r11, r1
    171c:	01 2f       	mov	r16, r17
    171e:	95 01       	movw	r18, r10
    1720:	a3 01       	movw	r20, r6
    1722:	b7 01       	movw	r22, r14
    1724:	c7 01       	movw	r24, r14
    1726:	3b dc       	rcall	.-1930   	; 0xf9e <uECC_vli_modSub>
    1728:	96 01       	movw	r18, r12
    172a:	a4 01       	movw	r20, r8
    172c:	b7 01       	movw	r22, r14
    172e:	c7 01       	movw	r24, r14
    1730:	d1 dd       	rcall	.-1118   	; 0x12d4 <uECC_vli_modMult_fast>
    1732:	a6 01       	movw	r20, r12
    1734:	4c 57       	subi	r20, 0x7C	; 124
    1736:	5f 4f       	sbci	r21, 0xFF	; 255
    1738:	95 01       	movw	r18, r10
    173a:	b7 01       	movw	r22, r14
    173c:	c7 01       	movw	r24, r14
    173e:	13 dc       	rcall	.-2010   	; 0xf66 <uECC_vli_modAdd>
    1740:	a0 96       	adiw	r28, 0x20	; 32
    1742:	0f b6       	in	r0, 0x3f	; 63
    1744:	f8 94       	cli
    1746:	de bf       	out	0x3e, r29	; 62
    1748:	0f be       	out	0x3f, r0	; 63
    174a:	cd bf       	out	0x3d, r28	; 61
    174c:	df 91       	pop	r29
    174e:	cf 91       	pop	r28
    1750:	1f 91       	pop	r17
    1752:	0f 91       	pop	r16
    1754:	ff 90       	pop	r15
    1756:	ef 90       	pop	r14
    1758:	df 90       	pop	r13
    175a:	cf 90       	pop	r12
    175c:	bf 90       	pop	r11
    175e:	af 90       	pop	r10
    1760:	9f 90       	pop	r9
    1762:	8f 90       	pop	r8
    1764:	7f 90       	pop	r7
    1766:	6f 90       	pop	r6
    1768:	08 95       	ret

0000176a <mod_sqrt_default>:
    176a:	bf 92       	push	r11
    176c:	cf 92       	push	r12
    176e:	df 92       	push	r13
    1770:	ef 92       	push	r14
    1772:	ff 92       	push	r15
    1774:	0f 93       	push	r16
    1776:	1f 93       	push	r17
    1778:	cf 93       	push	r28
    177a:	df 93       	push	r29
    177c:	cd b7       	in	r28, 0x3d	; 61
    177e:	de b7       	in	r29, 0x3e	; 62
    1780:	c0 54       	subi	r28, 0x40	; 64
    1782:	d1 09       	sbc	r29, r1
    1784:	0f b6       	in	r0, 0x3f	; 63
    1786:	f8 94       	cli
    1788:	de bf       	out	0x3e, r29	; 62
    178a:	0f be       	out	0x3f, r0	; 63
    178c:	cd bf       	out	0x3d, r28	; 61
    178e:	6c 01       	movw	r12, r24
    1790:	7b 01       	movw	r14, r22
    1792:	90 e2       	ldi	r25, 0x20	; 32
    1794:	8e 01       	movw	r16, r28
    1796:	0f 5f       	subi	r16, 0xFF	; 255
    1798:	1f 4f       	sbci	r17, 0xFF	; 255
    179a:	d8 01       	movw	r26, r16
    179c:	e9 2f       	mov	r30, r25
    179e:	1d 92       	st	X+, r1
    17a0:	ea 95       	dec	r30
    17a2:	e9 f7       	brne	.-6      	; 0x179e <mod_sqrt_default+0x34>
    17a4:	81 e0       	ldi	r24, 0x01	; 1
    17a6:	89 83       	std	Y+1, r24	; 0x01
    17a8:	fe 01       	movw	r30, r28
    17aa:	b1 96       	adiw	r30, 0x21	; 33
    17ac:	df 01       	movw	r26, r30
    17ae:	1d 92       	st	X+, r1
    17b0:	9a 95       	dec	r25
    17b2:	e9 f7       	brne	.-6      	; 0x17ae <mod_sqrt_default+0x44>
    17b4:	89 a3       	std	Y+33, r24	; 0x21
    17b6:	fb 01       	movw	r30, r22
    17b8:	b0 80       	ld	r11, Z
    17ba:	6c 5f       	subi	r22, 0xFC	; 252
    17bc:	7f 4f       	sbci	r23, 0xFF	; 255
    17be:	2b 2d       	mov	r18, r11
    17c0:	a8 01       	movw	r20, r16
    17c2:	c8 01       	movw	r24, r16
    17c4:	30 d9       	rcall	.-3488   	; 0xa26 <uECC_vli_add>
    17c6:	6b 2d       	mov	r22, r11
    17c8:	c8 01       	movw	r24, r16
    17ca:	37 db       	rcall	.-2450   	; 0xe3a <uECC_vli_numBits>
    17cc:	8c 01       	movw	r16, r24
    17ce:	01 50       	subi	r16, 0x01	; 1
    17d0:	11 09       	sbc	r17, r1
    17d2:	02 30       	cpi	r16, 0x02	; 2
    17d4:	11 05       	cpc	r17, r1
    17d6:	c4 f0       	brlt	.+48     	; 0x1808 <mod_sqrt_default+0x9e>
    17d8:	a7 01       	movw	r20, r14
    17da:	be 01       	movw	r22, r28
    17dc:	6f 5d       	subi	r22, 0xDF	; 223
    17de:	7f 4f       	sbci	r23, 0xFF	; 255
    17e0:	cb 01       	movw	r24, r22
    17e2:	a7 dd       	rcall	.-1202   	; 0x1332 <uECC_vli_modSquare_fast>
    17e4:	b8 01       	movw	r22, r16
    17e6:	ce 01       	movw	r24, r28
    17e8:	01 96       	adiw	r24, 0x01	; 1
    17ea:	11 db       	rcall	.-2526   	; 0xe0e <uECC_vli_testBit>
    17ec:	88 23       	and	r24, r24
    17ee:	39 f0       	breq	.+14     	; 0x17fe <mod_sqrt_default+0x94>
    17f0:	97 01       	movw	r18, r14
    17f2:	a6 01       	movw	r20, r12
    17f4:	be 01       	movw	r22, r28
    17f6:	6f 5d       	subi	r22, 0xDF	; 223
    17f8:	7f 4f       	sbci	r23, 0xFF	; 255
    17fa:	cb 01       	movw	r24, r22
    17fc:	6b dd       	rcall	.-1322   	; 0x12d4 <uECC_vli_modMult_fast>
    17fe:	01 50       	subi	r16, 0x01	; 1
    1800:	11 09       	sbc	r17, r1
    1802:	01 30       	cpi	r16, 0x01	; 1
    1804:	11 05       	cpc	r17, r1
    1806:	41 f7       	brne	.-48     	; 0x17d8 <mod_sqrt_default+0x6e>
    1808:	4b 2d       	mov	r20, r11
    180a:	be 01       	movw	r22, r28
    180c:	6f 5d       	subi	r22, 0xDF	; 223
    180e:	7f 4f       	sbci	r23, 0xFF	; 255
    1810:	c6 01       	movw	r24, r12
    1812:	4a d8       	rcall	.-3948   	; 0x8a8 <uECC_vli_set>
    1814:	c0 5c       	subi	r28, 0xC0	; 192
    1816:	df 4f       	sbci	r29, 0xFF	; 255
    1818:	0f b6       	in	r0, 0x3f	; 63
    181a:	f8 94       	cli
    181c:	de bf       	out	0x3e, r29	; 62
    181e:	0f be       	out	0x3f, r0	; 63
    1820:	cd bf       	out	0x3d, r28	; 61
    1822:	df 91       	pop	r29
    1824:	cf 91       	pop	r28
    1826:	1f 91       	pop	r17
    1828:	0f 91       	pop	r16
    182a:	ff 90       	pop	r15
    182c:	ef 90       	pop	r14
    182e:	df 90       	pop	r13
    1830:	cf 90       	pop	r12
    1832:	bf 90       	pop	r11
    1834:	08 95       	ret

00001836 <vli_mmod_fast_secp256r1>:
    1836:	cf 92       	push	r12
    1838:	df 92       	push	r13
    183a:	ff 92       	push	r15
    183c:	0f 93       	push	r16
    183e:	1f 93       	push	r17
    1840:	cf 93       	push	r28
    1842:	df 93       	push	r29
    1844:	cd b7       	in	r28, 0x3d	; 61
    1846:	de b7       	in	r29, 0x3e	; 62
    1848:	a0 97       	sbiw	r28, 0x20	; 32
    184a:	0f b6       	in	r0, 0x3f	; 63
    184c:	f8 94       	cli
    184e:	de bf       	out	0x3e, r29	; 62
    1850:	0f be       	out	0x3f, r0	; 63
    1852:	cd bf       	out	0x3d, r28	; 61
    1854:	6c 01       	movw	r12, r24
    1856:	8b 01       	movw	r16, r22
    1858:	40 e2       	ldi	r20, 0x20	; 32
    185a:	26 d8       	rcall	.-4020   	; 0x8a8 <uECC_vli_set>
    185c:	1c 82       	std	Y+4, r1	; 0x04
    185e:	1b 82       	std	Y+3, r1	; 0x03
    1860:	1a 82       	std	Y+2, r1	; 0x02
    1862:	19 82       	std	Y+1, r1	; 0x01
    1864:	18 86       	std	Y+8, r1	; 0x08
    1866:	1f 82       	std	Y+7, r1	; 0x07
    1868:	1e 82       	std	Y+6, r1	; 0x06
    186a:	1d 82       	std	Y+5, r1	; 0x05
    186c:	1c 86       	std	Y+12, r1	; 0x0c
    186e:	1b 86       	std	Y+11, r1	; 0x0b
    1870:	1a 86       	std	Y+10, r1	; 0x0a
    1872:	19 86       	std	Y+9, r1	; 0x09
    1874:	f8 01       	movw	r30, r16
    1876:	84 a5       	ldd	r24, Z+44	; 0x2c
    1878:	8d 87       	std	Y+13, r24	; 0x0d
    187a:	85 a5       	ldd	r24, Z+45	; 0x2d
    187c:	8e 87       	std	Y+14, r24	; 0x0e
    187e:	86 a5       	ldd	r24, Z+46	; 0x2e
    1880:	8f 87       	std	Y+15, r24	; 0x0f
    1882:	87 a5       	ldd	r24, Z+47	; 0x2f
    1884:	88 8b       	std	Y+16, r24	; 0x10
    1886:	80 a9       	ldd	r24, Z+48	; 0x30
    1888:	89 8b       	std	Y+17, r24	; 0x11
    188a:	81 a9       	ldd	r24, Z+49	; 0x31
    188c:	8a 8b       	std	Y+18, r24	; 0x12
    188e:	82 a9       	ldd	r24, Z+50	; 0x32
    1890:	8b 8b       	std	Y+19, r24	; 0x13
    1892:	83 a9       	ldd	r24, Z+51	; 0x33
    1894:	8c 8b       	std	Y+20, r24	; 0x14
    1896:	84 a9       	ldd	r24, Z+52	; 0x34
    1898:	8d 8b       	std	Y+21, r24	; 0x15
    189a:	85 a9       	ldd	r24, Z+53	; 0x35
    189c:	8e 8b       	std	Y+22, r24	; 0x16
    189e:	86 a9       	ldd	r24, Z+54	; 0x36
    18a0:	8f 8b       	std	Y+23, r24	; 0x17
    18a2:	87 a9       	ldd	r24, Z+55	; 0x37
    18a4:	88 8f       	std	Y+24, r24	; 0x18
    18a6:	80 ad       	ldd	r24, Z+56	; 0x38
    18a8:	89 8f       	std	Y+25, r24	; 0x19
    18aa:	81 ad       	ldd	r24, Z+57	; 0x39
    18ac:	8a 8f       	std	Y+26, r24	; 0x1a
    18ae:	82 ad       	ldd	r24, Z+58	; 0x3a
    18b0:	8b 8f       	std	Y+27, r24	; 0x1b
    18b2:	83 ad       	ldd	r24, Z+59	; 0x3b
    18b4:	8c 8f       	std	Y+28, r24	; 0x1c
    18b6:	84 ad       	ldd	r24, Z+60	; 0x3c
    18b8:	8d 8f       	std	Y+29, r24	; 0x1d
    18ba:	85 ad       	ldd	r24, Z+61	; 0x3d
    18bc:	8e 8f       	std	Y+30, r24	; 0x1e
    18be:	86 ad       	ldd	r24, Z+62	; 0x3e
    18c0:	8f 8f       	std	Y+31, r24	; 0x1f
    18c2:	87 ad       	ldd	r24, Z+63	; 0x3f
    18c4:	88 a3       	std	Y+32, r24	; 0x20
    18c6:	20 e2       	ldi	r18, 0x20	; 32
    18c8:	ae 01       	movw	r20, r28
    18ca:	4f 5f       	subi	r20, 0xFF	; 255
    18cc:	5f 4f       	sbci	r21, 0xFF	; 255
    18ce:	ba 01       	movw	r22, r20
    18d0:	ca 01       	movw	r24, r20
    18d2:	a9 d8       	rcall	.-3758   	; 0xa26 <uECC_vli_add>
    18d4:	f8 2e       	mov	r15, r24
    18d6:	20 e2       	ldi	r18, 0x20	; 32
    18d8:	ae 01       	movw	r20, r28
    18da:	4f 5f       	subi	r20, 0xFF	; 255
    18dc:	5f 4f       	sbci	r21, 0xFF	; 255
    18de:	b6 01       	movw	r22, r12
    18e0:	c6 01       	movw	r24, r12
    18e2:	a1 d8       	rcall	.-3774   	; 0xa26 <uECC_vli_add>
    18e4:	f8 0e       	add	r15, r24
    18e6:	f8 01       	movw	r30, r16
    18e8:	80 a9       	ldd	r24, Z+48	; 0x30
    18ea:	8d 87       	std	Y+13, r24	; 0x0d
    18ec:	81 a9       	ldd	r24, Z+49	; 0x31
    18ee:	8e 87       	std	Y+14, r24	; 0x0e
    18f0:	82 a9       	ldd	r24, Z+50	; 0x32
    18f2:	8f 87       	std	Y+15, r24	; 0x0f
    18f4:	83 a9       	ldd	r24, Z+51	; 0x33
    18f6:	88 8b       	std	Y+16, r24	; 0x10
    18f8:	84 a9       	ldd	r24, Z+52	; 0x34
    18fa:	89 8b       	std	Y+17, r24	; 0x11
    18fc:	85 a9       	ldd	r24, Z+53	; 0x35
    18fe:	8a 8b       	std	Y+18, r24	; 0x12
    1900:	86 a9       	ldd	r24, Z+54	; 0x36
    1902:	8b 8b       	std	Y+19, r24	; 0x13
    1904:	87 a9       	ldd	r24, Z+55	; 0x37
    1906:	8c 8b       	std	Y+20, r24	; 0x14
    1908:	80 ad       	ldd	r24, Z+56	; 0x38
    190a:	8d 8b       	std	Y+21, r24	; 0x15
    190c:	81 ad       	ldd	r24, Z+57	; 0x39
    190e:	8e 8b       	std	Y+22, r24	; 0x16
    1910:	82 ad       	ldd	r24, Z+58	; 0x3a
    1912:	8f 8b       	std	Y+23, r24	; 0x17
    1914:	83 ad       	ldd	r24, Z+59	; 0x3b
    1916:	88 8f       	std	Y+24, r24	; 0x18
    1918:	84 ad       	ldd	r24, Z+60	; 0x3c
    191a:	89 8f       	std	Y+25, r24	; 0x19
    191c:	85 ad       	ldd	r24, Z+61	; 0x3d
    191e:	8a 8f       	std	Y+26, r24	; 0x1a
    1920:	86 ad       	ldd	r24, Z+62	; 0x3e
    1922:	8b 8f       	std	Y+27, r24	; 0x1b
    1924:	87 ad       	ldd	r24, Z+63	; 0x3f
    1926:	8c 8f       	std	Y+28, r24	; 0x1c
    1928:	18 a2       	std	Y+32, r1	; 0x20
    192a:	1f 8e       	std	Y+31, r1	; 0x1f
    192c:	1e 8e       	std	Y+30, r1	; 0x1e
    192e:	1d 8e       	std	Y+29, r1	; 0x1d
    1930:	20 e2       	ldi	r18, 0x20	; 32
    1932:	ae 01       	movw	r20, r28
    1934:	4f 5f       	subi	r20, 0xFF	; 255
    1936:	5f 4f       	sbci	r21, 0xFF	; 255
    1938:	ba 01       	movw	r22, r20
    193a:	ca 01       	movw	r24, r20
    193c:	74 d8       	rcall	.-3864   	; 0xa26 <uECC_vli_add>
    193e:	f8 0e       	add	r15, r24
    1940:	20 e2       	ldi	r18, 0x20	; 32
    1942:	ae 01       	movw	r20, r28
    1944:	4f 5f       	subi	r20, 0xFF	; 255
    1946:	5f 4f       	sbci	r21, 0xFF	; 255
    1948:	b6 01       	movw	r22, r12
    194a:	c6 01       	movw	r24, r12
    194c:	6c d8       	rcall	.-3880   	; 0xa26 <uECC_vli_add>
    194e:	f8 0e       	add	r15, r24
    1950:	f8 01       	movw	r30, r16
    1952:	80 a1       	ldd	r24, Z+32	; 0x20
    1954:	89 83       	std	Y+1, r24	; 0x01
    1956:	81 a1       	ldd	r24, Z+33	; 0x21
    1958:	8a 83       	std	Y+2, r24	; 0x02
    195a:	82 a1       	ldd	r24, Z+34	; 0x22
    195c:	8b 83       	std	Y+3, r24	; 0x03
    195e:	83 a1       	ldd	r24, Z+35	; 0x23
    1960:	8c 83       	std	Y+4, r24	; 0x04
    1962:	84 a1       	ldd	r24, Z+36	; 0x24
    1964:	8d 83       	std	Y+5, r24	; 0x05
    1966:	85 a1       	ldd	r24, Z+37	; 0x25
    1968:	8e 83       	std	Y+6, r24	; 0x06
    196a:	86 a1       	ldd	r24, Z+38	; 0x26
    196c:	8f 83       	std	Y+7, r24	; 0x07
    196e:	87 a1       	ldd	r24, Z+39	; 0x27
    1970:	88 87       	std	Y+8, r24	; 0x08
    1972:	80 a5       	ldd	r24, Z+40	; 0x28
    1974:	89 87       	std	Y+9, r24	; 0x09
    1976:	81 a5       	ldd	r24, Z+41	; 0x29
    1978:	8a 87       	std	Y+10, r24	; 0x0a
    197a:	82 a5       	ldd	r24, Z+42	; 0x2a
    197c:	8b 87       	std	Y+11, r24	; 0x0b
    197e:	83 a5       	ldd	r24, Z+43	; 0x2b
    1980:	8c 87       	std	Y+12, r24	; 0x0c
    1982:	18 8a       	std	Y+16, r1	; 0x10
    1984:	1f 86       	std	Y+15, r1	; 0x0f
    1986:	1e 86       	std	Y+14, r1	; 0x0e
    1988:	1d 86       	std	Y+13, r1	; 0x0d
    198a:	1c 8a       	std	Y+20, r1	; 0x14
    198c:	1b 8a       	std	Y+19, r1	; 0x13
    198e:	1a 8a       	std	Y+18, r1	; 0x12
    1990:	19 8a       	std	Y+17, r1	; 0x11
    1992:	18 8e       	std	Y+24, r1	; 0x18
    1994:	1f 8a       	std	Y+23, r1	; 0x17
    1996:	1e 8a       	std	Y+22, r1	; 0x16
    1998:	1d 8a       	std	Y+21, r1	; 0x15
    199a:	80 ad       	ldd	r24, Z+56	; 0x38
    199c:	89 8f       	std	Y+25, r24	; 0x19
    199e:	81 ad       	ldd	r24, Z+57	; 0x39
    19a0:	8a 8f       	std	Y+26, r24	; 0x1a
    19a2:	82 ad       	ldd	r24, Z+58	; 0x3a
    19a4:	8b 8f       	std	Y+27, r24	; 0x1b
    19a6:	83 ad       	ldd	r24, Z+59	; 0x3b
    19a8:	8c 8f       	std	Y+28, r24	; 0x1c
    19aa:	84 ad       	ldd	r24, Z+60	; 0x3c
    19ac:	8d 8f       	std	Y+29, r24	; 0x1d
    19ae:	85 ad       	ldd	r24, Z+61	; 0x3d
    19b0:	8e 8f       	std	Y+30, r24	; 0x1e
    19b2:	86 ad       	ldd	r24, Z+62	; 0x3e
    19b4:	8f 8f       	std	Y+31, r24	; 0x1f
    19b6:	87 ad       	ldd	r24, Z+63	; 0x3f
    19b8:	88 a3       	std	Y+32, r24	; 0x20
    19ba:	20 e2       	ldi	r18, 0x20	; 32
    19bc:	ae 01       	movw	r20, r28
    19be:	4f 5f       	subi	r20, 0xFF	; 255
    19c0:	5f 4f       	sbci	r21, 0xFF	; 255
    19c2:	b6 01       	movw	r22, r12
    19c4:	c6 01       	movw	r24, r12
    19c6:	2f d8       	rcall	.-4002   	; 0xa26 <uECC_vli_add>
    19c8:	f8 0e       	add	r15, r24
    19ca:	f8 01       	movw	r30, r16
    19cc:	84 a1       	ldd	r24, Z+36	; 0x24
    19ce:	89 83       	std	Y+1, r24	; 0x01
    19d0:	85 a1       	ldd	r24, Z+37	; 0x25
    19d2:	8a 83       	std	Y+2, r24	; 0x02
    19d4:	86 a1       	ldd	r24, Z+38	; 0x26
    19d6:	8b 83       	std	Y+3, r24	; 0x03
    19d8:	87 a1       	ldd	r24, Z+39	; 0x27
    19da:	8c 83       	std	Y+4, r24	; 0x04
    19dc:	80 a5       	ldd	r24, Z+40	; 0x28
    19de:	8d 83       	std	Y+5, r24	; 0x05
    19e0:	81 a5       	ldd	r24, Z+41	; 0x29
    19e2:	8e 83       	std	Y+6, r24	; 0x06
    19e4:	82 a5       	ldd	r24, Z+42	; 0x2a
    19e6:	8f 83       	std	Y+7, r24	; 0x07
    19e8:	83 a5       	ldd	r24, Z+43	; 0x2b
    19ea:	88 87       	std	Y+8, r24	; 0x08
    19ec:	84 a5       	ldd	r24, Z+44	; 0x2c
    19ee:	89 87       	std	Y+9, r24	; 0x09
    19f0:	85 a5       	ldd	r24, Z+45	; 0x2d
    19f2:	8a 87       	std	Y+10, r24	; 0x0a
    19f4:	86 a5       	ldd	r24, Z+46	; 0x2e
    19f6:	8b 87       	std	Y+11, r24	; 0x0b
    19f8:	87 a5       	ldd	r24, Z+47	; 0x2f
    19fa:	8c 87       	std	Y+12, r24	; 0x0c
    19fc:	34 a9       	ldd	r19, Z+52	; 0x34
    19fe:	3d 87       	std	Y+13, r19	; 0x0d
    1a00:	25 a9       	ldd	r18, Z+53	; 0x35
    1a02:	2e 87       	std	Y+14, r18	; 0x0e
    1a04:	96 a9       	ldd	r25, Z+54	; 0x36
    1a06:	9f 87       	std	Y+15, r25	; 0x0f
    1a08:	87 a9       	ldd	r24, Z+55	; 0x37
    1a0a:	88 8b       	std	Y+16, r24	; 0x10
    1a0c:	40 ad       	ldd	r20, Z+56	; 0x38
    1a0e:	49 8b       	std	Y+17, r20	; 0x11
    1a10:	41 ad       	ldd	r20, Z+57	; 0x39
    1a12:	4a 8b       	std	Y+18, r20	; 0x12
    1a14:	42 ad       	ldd	r20, Z+58	; 0x3a
    1a16:	4b 8b       	std	Y+19, r20	; 0x13
    1a18:	43 ad       	ldd	r20, Z+59	; 0x3b
    1a1a:	4c 8b       	std	Y+20, r20	; 0x14
    1a1c:	44 ad       	ldd	r20, Z+60	; 0x3c
    1a1e:	4d 8b       	std	Y+21, r20	; 0x15
    1a20:	45 ad       	ldd	r20, Z+61	; 0x3d
    1a22:	4e 8b       	std	Y+22, r20	; 0x16
    1a24:	46 ad       	ldd	r20, Z+62	; 0x3e
    1a26:	4f 8b       	std	Y+23, r20	; 0x17
    1a28:	47 ad       	ldd	r20, Z+63	; 0x3f
    1a2a:	48 8f       	std	Y+24, r20	; 0x18
    1a2c:	39 8f       	std	Y+25, r19	; 0x19
    1a2e:	2a 8f       	std	Y+26, r18	; 0x1a
    1a30:	9b 8f       	std	Y+27, r25	; 0x1b
    1a32:	8c 8f       	std	Y+28, r24	; 0x1c
    1a34:	80 a1       	ldd	r24, Z+32	; 0x20
    1a36:	8d 8f       	std	Y+29, r24	; 0x1d
    1a38:	81 a1       	ldd	r24, Z+33	; 0x21
    1a3a:	8e 8f       	std	Y+30, r24	; 0x1e
    1a3c:	82 a1       	ldd	r24, Z+34	; 0x22
    1a3e:	8f 8f       	std	Y+31, r24	; 0x1f
    1a40:	83 a1       	ldd	r24, Z+35	; 0x23
    1a42:	88 a3       	std	Y+32, r24	; 0x20
    1a44:	20 e2       	ldi	r18, 0x20	; 32
    1a46:	ae 01       	movw	r20, r28
    1a48:	4f 5f       	subi	r20, 0xFF	; 255
    1a4a:	5f 4f       	sbci	r21, 0xFF	; 255
    1a4c:	b6 01       	movw	r22, r12
    1a4e:	c6 01       	movw	r24, r12
    1a50:	0e 94 13 05 	call	0xa26	; 0xa26 <uECC_vli_add>
    1a54:	f8 0e       	add	r15, r24
    1a56:	f8 01       	movw	r30, r16
    1a58:	84 a5       	ldd	r24, Z+44	; 0x2c
    1a5a:	89 83       	std	Y+1, r24	; 0x01
    1a5c:	85 a5       	ldd	r24, Z+45	; 0x2d
    1a5e:	8a 83       	std	Y+2, r24	; 0x02
    1a60:	86 a5       	ldd	r24, Z+46	; 0x2e
    1a62:	8b 83       	std	Y+3, r24	; 0x03
    1a64:	87 a5       	ldd	r24, Z+47	; 0x2f
    1a66:	8c 83       	std	Y+4, r24	; 0x04
    1a68:	80 a9       	ldd	r24, Z+48	; 0x30
    1a6a:	8d 83       	std	Y+5, r24	; 0x05
    1a6c:	81 a9       	ldd	r24, Z+49	; 0x31
    1a6e:	8e 83       	std	Y+6, r24	; 0x06
    1a70:	82 a9       	ldd	r24, Z+50	; 0x32
    1a72:	8f 83       	std	Y+7, r24	; 0x07
    1a74:	83 a9       	ldd	r24, Z+51	; 0x33
    1a76:	88 87       	std	Y+8, r24	; 0x08
    1a78:	84 a9       	ldd	r24, Z+52	; 0x34
    1a7a:	89 87       	std	Y+9, r24	; 0x09
    1a7c:	85 a9       	ldd	r24, Z+53	; 0x35
    1a7e:	8a 87       	std	Y+10, r24	; 0x0a
    1a80:	86 a9       	ldd	r24, Z+54	; 0x36
    1a82:	8b 87       	std	Y+11, r24	; 0x0b
    1a84:	87 a9       	ldd	r24, Z+55	; 0x37
    1a86:	8c 87       	std	Y+12, r24	; 0x0c
    1a88:	18 8a       	std	Y+16, r1	; 0x10
    1a8a:	1f 86       	std	Y+15, r1	; 0x0f
    1a8c:	1e 86       	std	Y+14, r1	; 0x0e
    1a8e:	1d 86       	std	Y+13, r1	; 0x0d
    1a90:	1c 8a       	std	Y+20, r1	; 0x14
    1a92:	1b 8a       	std	Y+19, r1	; 0x13
    1a94:	1a 8a       	std	Y+18, r1	; 0x12
    1a96:	19 8a       	std	Y+17, r1	; 0x11
    1a98:	18 8e       	std	Y+24, r1	; 0x18
    1a9a:	1f 8a       	std	Y+23, r1	; 0x17
    1a9c:	1e 8a       	std	Y+22, r1	; 0x16
    1a9e:	1d 8a       	std	Y+21, r1	; 0x15
    1aa0:	80 a1       	ldd	r24, Z+32	; 0x20
    1aa2:	89 8f       	std	Y+25, r24	; 0x19
    1aa4:	81 a1       	ldd	r24, Z+33	; 0x21
    1aa6:	8a 8f       	std	Y+26, r24	; 0x1a
    1aa8:	82 a1       	ldd	r24, Z+34	; 0x22
    1aaa:	8b 8f       	std	Y+27, r24	; 0x1b
    1aac:	83 a1       	ldd	r24, Z+35	; 0x23
    1aae:	8c 8f       	std	Y+28, r24	; 0x1c
    1ab0:	80 a5       	ldd	r24, Z+40	; 0x28
    1ab2:	8d 8f       	std	Y+29, r24	; 0x1d
    1ab4:	81 a5       	ldd	r24, Z+41	; 0x29
    1ab6:	8e 8f       	std	Y+30, r24	; 0x1e
    1ab8:	82 a5       	ldd	r24, Z+42	; 0x2a
    1aba:	8f 8f       	std	Y+31, r24	; 0x1f
    1abc:	83 a5       	ldd	r24, Z+43	; 0x2b
    1abe:	88 a3       	std	Y+32, r24	; 0x20
    1ac0:	20 e2       	ldi	r18, 0x20	; 32
    1ac2:	ae 01       	movw	r20, r28
    1ac4:	4f 5f       	subi	r20, 0xFF	; 255
    1ac6:	5f 4f       	sbci	r21, 0xFF	; 255
    1ac8:	b6 01       	movw	r22, r12
    1aca:	c6 01       	movw	r24, r12
    1acc:	7d d8       	rcall	.-3846   	; 0xbc8 <uECC_vli_sub>
    1ace:	f8 1a       	sub	r15, r24
    1ad0:	f8 01       	movw	r30, r16
    1ad2:	80 a9       	ldd	r24, Z+48	; 0x30
    1ad4:	89 83       	std	Y+1, r24	; 0x01
    1ad6:	81 a9       	ldd	r24, Z+49	; 0x31
    1ad8:	8a 83       	std	Y+2, r24	; 0x02
    1ada:	82 a9       	ldd	r24, Z+50	; 0x32
    1adc:	8b 83       	std	Y+3, r24	; 0x03
    1ade:	83 a9       	ldd	r24, Z+51	; 0x33
    1ae0:	8c 83       	std	Y+4, r24	; 0x04
    1ae2:	84 a9       	ldd	r24, Z+52	; 0x34
    1ae4:	8d 83       	std	Y+5, r24	; 0x05
    1ae6:	85 a9       	ldd	r24, Z+53	; 0x35
    1ae8:	8e 83       	std	Y+6, r24	; 0x06
    1aea:	86 a9       	ldd	r24, Z+54	; 0x36
    1aec:	8f 83       	std	Y+7, r24	; 0x07
    1aee:	87 a9       	ldd	r24, Z+55	; 0x37
    1af0:	88 87       	std	Y+8, r24	; 0x08
    1af2:	80 ad       	ldd	r24, Z+56	; 0x38
    1af4:	89 87       	std	Y+9, r24	; 0x09
    1af6:	81 ad       	ldd	r24, Z+57	; 0x39
    1af8:	8a 87       	std	Y+10, r24	; 0x0a
    1afa:	82 ad       	ldd	r24, Z+58	; 0x3a
    1afc:	8b 87       	std	Y+11, r24	; 0x0b
    1afe:	83 ad       	ldd	r24, Z+59	; 0x3b
    1b00:	8c 87       	std	Y+12, r24	; 0x0c
    1b02:	84 ad       	ldd	r24, Z+60	; 0x3c
    1b04:	8d 87       	std	Y+13, r24	; 0x0d
    1b06:	85 ad       	ldd	r24, Z+61	; 0x3d
    1b08:	8e 87       	std	Y+14, r24	; 0x0e
    1b0a:	86 ad       	ldd	r24, Z+62	; 0x3e
    1b0c:	8f 87       	std	Y+15, r24	; 0x0f
    1b0e:	87 ad       	ldd	r24, Z+63	; 0x3f
    1b10:	88 8b       	std	Y+16, r24	; 0x10
    1b12:	1c 8a       	std	Y+20, r1	; 0x14
    1b14:	1b 8a       	std	Y+19, r1	; 0x13
    1b16:	1a 8a       	std	Y+18, r1	; 0x12
    1b18:	19 8a       	std	Y+17, r1	; 0x11
    1b1a:	18 8e       	std	Y+24, r1	; 0x18
    1b1c:	1f 8a       	std	Y+23, r1	; 0x17
    1b1e:	1e 8a       	std	Y+22, r1	; 0x16
    1b20:	1d 8a       	std	Y+21, r1	; 0x15
    1b22:	84 a1       	ldd	r24, Z+36	; 0x24
    1b24:	89 8f       	std	Y+25, r24	; 0x19
    1b26:	85 a1       	ldd	r24, Z+37	; 0x25
    1b28:	8a 8f       	std	Y+26, r24	; 0x1a
    1b2a:	86 a1       	ldd	r24, Z+38	; 0x26
    1b2c:	8b 8f       	std	Y+27, r24	; 0x1b
    1b2e:	87 a1       	ldd	r24, Z+39	; 0x27
    1b30:	8c 8f       	std	Y+28, r24	; 0x1c
    1b32:	84 a5       	ldd	r24, Z+44	; 0x2c
    1b34:	8d 8f       	std	Y+29, r24	; 0x1d
    1b36:	85 a5       	ldd	r24, Z+45	; 0x2d
    1b38:	8e 8f       	std	Y+30, r24	; 0x1e
    1b3a:	86 a5       	ldd	r24, Z+46	; 0x2e
    1b3c:	8f 8f       	std	Y+31, r24	; 0x1f
    1b3e:	87 a5       	ldd	r24, Z+47	; 0x2f
    1b40:	88 a3       	std	Y+32, r24	; 0x20
    1b42:	20 e2       	ldi	r18, 0x20	; 32
    1b44:	ae 01       	movw	r20, r28
    1b46:	4f 5f       	subi	r20, 0xFF	; 255
    1b48:	5f 4f       	sbci	r21, 0xFF	; 255
    1b4a:	b6 01       	movw	r22, r12
    1b4c:	c6 01       	movw	r24, r12
    1b4e:	3c d8       	rcall	.-3976   	; 0xbc8 <uECC_vli_sub>
    1b50:	f8 1a       	sub	r15, r24
    1b52:	f8 01       	movw	r30, r16
    1b54:	84 a9       	ldd	r24, Z+52	; 0x34
    1b56:	89 83       	std	Y+1, r24	; 0x01
    1b58:	85 a9       	ldd	r24, Z+53	; 0x35
    1b5a:	8a 83       	std	Y+2, r24	; 0x02
    1b5c:	86 a9       	ldd	r24, Z+54	; 0x36
    1b5e:	8b 83       	std	Y+3, r24	; 0x03
    1b60:	87 a9       	ldd	r24, Z+55	; 0x37
    1b62:	8c 83       	std	Y+4, r24	; 0x04
    1b64:	80 ad       	ldd	r24, Z+56	; 0x38
    1b66:	8d 83       	std	Y+5, r24	; 0x05
    1b68:	81 ad       	ldd	r24, Z+57	; 0x39
    1b6a:	8e 83       	std	Y+6, r24	; 0x06
    1b6c:	82 ad       	ldd	r24, Z+58	; 0x3a
    1b6e:	8f 83       	std	Y+7, r24	; 0x07
    1b70:	83 ad       	ldd	r24, Z+59	; 0x3b
    1b72:	88 87       	std	Y+8, r24	; 0x08
    1b74:	84 ad       	ldd	r24, Z+60	; 0x3c
    1b76:	89 87       	std	Y+9, r24	; 0x09
    1b78:	85 ad       	ldd	r24, Z+61	; 0x3d
    1b7a:	8a 87       	std	Y+10, r24	; 0x0a
    1b7c:	86 ad       	ldd	r24, Z+62	; 0x3e
    1b7e:	8b 87       	std	Y+11, r24	; 0x0b
    1b80:	87 ad       	ldd	r24, Z+63	; 0x3f
    1b82:	8c 87       	std	Y+12, r24	; 0x0c
    1b84:	80 a1       	ldd	r24, Z+32	; 0x20
    1b86:	8d 87       	std	Y+13, r24	; 0x0d
    1b88:	81 a1       	ldd	r24, Z+33	; 0x21
    1b8a:	8e 87       	std	Y+14, r24	; 0x0e
    1b8c:	82 a1       	ldd	r24, Z+34	; 0x22
    1b8e:	8f 87       	std	Y+15, r24	; 0x0f
    1b90:	83 a1       	ldd	r24, Z+35	; 0x23
    1b92:	88 8b       	std	Y+16, r24	; 0x10
    1b94:	84 a1       	ldd	r24, Z+36	; 0x24
    1b96:	89 8b       	std	Y+17, r24	; 0x11
    1b98:	85 a1       	ldd	r24, Z+37	; 0x25
    1b9a:	8a 8b       	std	Y+18, r24	; 0x12
    1b9c:	86 a1       	ldd	r24, Z+38	; 0x26
    1b9e:	8b 8b       	std	Y+19, r24	; 0x13
    1ba0:	87 a1       	ldd	r24, Z+39	; 0x27
    1ba2:	8c 8b       	std	Y+20, r24	; 0x14
    1ba4:	80 a5       	ldd	r24, Z+40	; 0x28
    1ba6:	8d 8b       	std	Y+21, r24	; 0x15
    1ba8:	81 a5       	ldd	r24, Z+41	; 0x29
    1baa:	8e 8b       	std	Y+22, r24	; 0x16
    1bac:	82 a5       	ldd	r24, Z+42	; 0x2a
    1bae:	8f 8b       	std	Y+23, r24	; 0x17
    1bb0:	83 a5       	ldd	r24, Z+43	; 0x2b
    1bb2:	88 8f       	std	Y+24, r24	; 0x18
    1bb4:	1c 8e       	std	Y+28, r1	; 0x1c
    1bb6:	1b 8e       	std	Y+27, r1	; 0x1b
    1bb8:	1a 8e       	std	Y+26, r1	; 0x1a
    1bba:	19 8e       	std	Y+25, r1	; 0x19
    1bbc:	80 a9       	ldd	r24, Z+48	; 0x30
    1bbe:	8d 8f       	std	Y+29, r24	; 0x1d
    1bc0:	81 a9       	ldd	r24, Z+49	; 0x31
    1bc2:	8e 8f       	std	Y+30, r24	; 0x1e
    1bc4:	82 a9       	ldd	r24, Z+50	; 0x32
    1bc6:	8f 8f       	std	Y+31, r24	; 0x1f
    1bc8:	83 a9       	ldd	r24, Z+51	; 0x33
    1bca:	88 a3       	std	Y+32, r24	; 0x20
    1bcc:	20 e2       	ldi	r18, 0x20	; 32
    1bce:	ae 01       	movw	r20, r28
    1bd0:	4f 5f       	subi	r20, 0xFF	; 255
    1bd2:	5f 4f       	sbci	r21, 0xFF	; 255
    1bd4:	b6 01       	movw	r22, r12
    1bd6:	c6 01       	movw	r24, r12
    1bd8:	0e 94 e4 05 	call	0xbc8	; 0xbc8 <uECC_vli_sub>
    1bdc:	f8 1a       	sub	r15, r24
    1bde:	f8 01       	movw	r30, r16
    1be0:	80 ad       	ldd	r24, Z+56	; 0x38
    1be2:	89 83       	std	Y+1, r24	; 0x01
    1be4:	81 ad       	ldd	r24, Z+57	; 0x39
    1be6:	8a 83       	std	Y+2, r24	; 0x02
    1be8:	82 ad       	ldd	r24, Z+58	; 0x3a
    1bea:	8b 83       	std	Y+3, r24	; 0x03
    1bec:	83 ad       	ldd	r24, Z+59	; 0x3b
    1bee:	8c 83       	std	Y+4, r24	; 0x04
    1bf0:	84 ad       	ldd	r24, Z+60	; 0x3c
    1bf2:	8d 83       	std	Y+5, r24	; 0x05
    1bf4:	85 ad       	ldd	r24, Z+61	; 0x3d
    1bf6:	8e 83       	std	Y+6, r24	; 0x06
    1bf8:	86 ad       	ldd	r24, Z+62	; 0x3e
    1bfa:	8f 83       	std	Y+7, r24	; 0x07
    1bfc:	87 ad       	ldd	r24, Z+63	; 0x3f
    1bfe:	88 87       	std	Y+8, r24	; 0x08
    1c00:	1c 86       	std	Y+12, r1	; 0x0c
    1c02:	1b 86       	std	Y+11, r1	; 0x0b
    1c04:	1a 86       	std	Y+10, r1	; 0x0a
    1c06:	19 86       	std	Y+9, r1	; 0x09
    1c08:	84 a1       	ldd	r24, Z+36	; 0x24
    1c0a:	8d 87       	std	Y+13, r24	; 0x0d
    1c0c:	85 a1       	ldd	r24, Z+37	; 0x25
    1c0e:	8e 87       	std	Y+14, r24	; 0x0e
    1c10:	86 a1       	ldd	r24, Z+38	; 0x26
    1c12:	8f 87       	std	Y+15, r24	; 0x0f
    1c14:	87 a1       	ldd	r24, Z+39	; 0x27
    1c16:	88 8b       	std	Y+16, r24	; 0x10
    1c18:	80 a5       	ldd	r24, Z+40	; 0x28
    1c1a:	89 8b       	std	Y+17, r24	; 0x11
    1c1c:	81 a5       	ldd	r24, Z+41	; 0x29
    1c1e:	8a 8b       	std	Y+18, r24	; 0x12
    1c20:	82 a5       	ldd	r24, Z+42	; 0x2a
    1c22:	8b 8b       	std	Y+19, r24	; 0x13
    1c24:	83 a5       	ldd	r24, Z+43	; 0x2b
    1c26:	8c 8b       	std	Y+20, r24	; 0x14
    1c28:	84 a5       	ldd	r24, Z+44	; 0x2c
    1c2a:	8d 8b       	std	Y+21, r24	; 0x15
    1c2c:	85 a5       	ldd	r24, Z+45	; 0x2d
    1c2e:	8e 8b       	std	Y+22, r24	; 0x16
    1c30:	86 a5       	ldd	r24, Z+46	; 0x2e
    1c32:	8f 8b       	std	Y+23, r24	; 0x17
    1c34:	87 a5       	ldd	r24, Z+47	; 0x2f
    1c36:	88 8f       	std	Y+24, r24	; 0x18
    1c38:	1c 8e       	std	Y+28, r1	; 0x1c
    1c3a:	1b 8e       	std	Y+27, r1	; 0x1b
    1c3c:	1a 8e       	std	Y+26, r1	; 0x1a
    1c3e:	19 8e       	std	Y+25, r1	; 0x19
    1c40:	84 a9       	ldd	r24, Z+52	; 0x34
    1c42:	8d 8f       	std	Y+29, r24	; 0x1d
    1c44:	85 a9       	ldd	r24, Z+53	; 0x35
    1c46:	8e 8f       	std	Y+30, r24	; 0x1e
    1c48:	86 a9       	ldd	r24, Z+54	; 0x36
    1c4a:	8f 8f       	std	Y+31, r24	; 0x1f
    1c4c:	87 a9       	ldd	r24, Z+55	; 0x37
    1c4e:	88 a3       	std	Y+32, r24	; 0x20
    1c50:	20 e2       	ldi	r18, 0x20	; 32
    1c52:	ae 01       	movw	r20, r28
    1c54:	4f 5f       	subi	r20, 0xFF	; 255
    1c56:	5f 4f       	sbci	r21, 0xFF	; 255
    1c58:	b6 01       	movw	r22, r12
    1c5a:	c6 01       	movw	r24, r12
    1c5c:	0e 94 e4 05 	call	0xbc8	; 0xbc8 <uECC_vli_sub>
    1c60:	1f 2d       	mov	r17, r15
    1c62:	18 1b       	sub	r17, r24
    1c64:	92 f4       	brpl	.+36     	; 0x1c8a <vli_mmod_fast_secp256r1+0x454>
    1c66:	20 e2       	ldi	r18, 0x20	; 32
    1c68:	4e e0       	ldi	r20, 0x0E	; 14
    1c6a:	51 e0       	ldi	r21, 0x01	; 1
    1c6c:	b6 01       	movw	r22, r12
    1c6e:	c6 01       	movw	r24, r12
    1c70:	0e 94 13 05 	call	0xa26	; 0xa26 <uECC_vli_add>
    1c74:	18 0f       	add	r17, r24
    1c76:	ba f3       	brmi	.-18     	; 0x1c66 <vli_mmod_fast_secp256r1+0x430>
    1c78:	11 c0       	rjmp	.+34     	; 0x1c9c <vli_mmod_fast_secp256r1+0x466>
    1c7a:	20 e2       	ldi	r18, 0x20	; 32
    1c7c:	4e e0       	ldi	r20, 0x0E	; 14
    1c7e:	51 e0       	ldi	r21, 0x01	; 1
    1c80:	b6 01       	movw	r22, r12
    1c82:	c6 01       	movw	r24, r12
    1c84:	0e 94 e4 05 	call	0xbc8	; 0xbc8 <uECC_vli_sub>
    1c88:	18 1b       	sub	r17, r24
    1c8a:	11 11       	cpse	r17, r1
    1c8c:	f6 cf       	rjmp	.-20     	; 0x1c7a <vli_mmod_fast_secp256r1+0x444>
    1c8e:	40 e2       	ldi	r20, 0x20	; 32
    1c90:	b6 01       	movw	r22, r12
    1c92:	8e e0       	ldi	r24, 0x0E	; 14
    1c94:	91 e0       	ldi	r25, 0x01	; 1
    1c96:	08 d9       	rcall	.-3568   	; 0xea8 <uECC_vli_cmp_unsafe>
    1c98:	81 30       	cpi	r24, 0x01	; 1
    1c9a:	79 f7       	brne	.-34     	; 0x1c7a <vli_mmod_fast_secp256r1+0x444>
    1c9c:	a0 96       	adiw	r28, 0x20	; 32
    1c9e:	0f b6       	in	r0, 0x3f	; 63
    1ca0:	f8 94       	cli
    1ca2:	de bf       	out	0x3e, r29	; 62
    1ca4:	0f be       	out	0x3f, r0	; 63
    1ca6:	cd bf       	out	0x3d, r28	; 61
    1ca8:	df 91       	pop	r29
    1caa:	cf 91       	pop	r28
    1cac:	1f 91       	pop	r17
    1cae:	0f 91       	pop	r16
    1cb0:	ff 90       	pop	r15
    1cb2:	df 90       	pop	r13
    1cb4:	cf 90       	pop	r12
    1cb6:	08 95       	ret

00001cb8 <apply_z>:
    1cb8:	af 92       	push	r10
    1cba:	bf 92       	push	r11
    1cbc:	cf 92       	push	r12
    1cbe:	df 92       	push	r13
    1cc0:	ef 92       	push	r14
    1cc2:	ff 92       	push	r15
    1cc4:	0f 93       	push	r16
    1cc6:	1f 93       	push	r17
    1cc8:	cf 93       	push	r28
    1cca:	df 93       	push	r29
    1ccc:	cd b7       	in	r28, 0x3d	; 61
    1cce:	de b7       	in	r29, 0x3e	; 62
    1cd0:	a0 97       	sbiw	r28, 0x20	; 32
    1cd2:	0f b6       	in	r0, 0x3f	; 63
    1cd4:	f8 94       	cli
    1cd6:	de bf       	out	0x3e, r29	; 62
    1cd8:	0f be       	out	0x3f, r0	; 63
    1cda:	cd bf       	out	0x3d, r28	; 61
    1cdc:	5c 01       	movw	r10, r24
    1cde:	7b 01       	movw	r14, r22
    1ce0:	6a 01       	movw	r12, r20
    1ce2:	89 01       	movw	r16, r18
    1ce4:	a9 01       	movw	r20, r18
    1ce6:	b6 01       	movw	r22, r12
    1ce8:	ce 01       	movw	r24, r28
    1cea:	01 96       	adiw	r24, 0x01	; 1
    1cec:	22 db       	rcall	.-2492   	; 0x1332 <uECC_vli_modSquare_fast>
    1cee:	98 01       	movw	r18, r16
    1cf0:	ae 01       	movw	r20, r28
    1cf2:	4f 5f       	subi	r20, 0xFF	; 255
    1cf4:	5f 4f       	sbci	r21, 0xFF	; 255
    1cf6:	b5 01       	movw	r22, r10
    1cf8:	c5 01       	movw	r24, r10
    1cfa:	ec da       	rcall	.-2600   	; 0x12d4 <uECC_vli_modMult_fast>
    1cfc:	98 01       	movw	r18, r16
    1cfe:	a6 01       	movw	r20, r12
    1d00:	be 01       	movw	r22, r28
    1d02:	6f 5f       	subi	r22, 0xFF	; 255
    1d04:	7f 4f       	sbci	r23, 0xFF	; 255
    1d06:	cb 01       	movw	r24, r22
    1d08:	e5 da       	rcall	.-2614   	; 0x12d4 <uECC_vli_modMult_fast>
    1d0a:	98 01       	movw	r18, r16
    1d0c:	ae 01       	movw	r20, r28
    1d0e:	4f 5f       	subi	r20, 0xFF	; 255
    1d10:	5f 4f       	sbci	r21, 0xFF	; 255
    1d12:	b7 01       	movw	r22, r14
    1d14:	c7 01       	movw	r24, r14
    1d16:	de da       	rcall	.-2628   	; 0x12d4 <uECC_vli_modMult_fast>
    1d18:	a0 96       	adiw	r28, 0x20	; 32
    1d1a:	0f b6       	in	r0, 0x3f	; 63
    1d1c:	f8 94       	cli
    1d1e:	de bf       	out	0x3e, r29	; 62
    1d20:	0f be       	out	0x3f, r0	; 63
    1d22:	cd bf       	out	0x3d, r28	; 61
    1d24:	df 91       	pop	r29
    1d26:	cf 91       	pop	r28
    1d28:	1f 91       	pop	r17
    1d2a:	0f 91       	pop	r16
    1d2c:	ff 90       	pop	r15
    1d2e:	ef 90       	pop	r14
    1d30:	df 90       	pop	r13
    1d32:	cf 90       	pop	r12
    1d34:	bf 90       	pop	r11
    1d36:	af 90       	pop	r10
    1d38:	08 95       	ret

00001d3a <XYcZ_add>:
    1d3a:	4f 92       	push	r4
    1d3c:	5f 92       	push	r5
    1d3e:	6f 92       	push	r6
    1d40:	7f 92       	push	r7
    1d42:	8f 92       	push	r8
    1d44:	9f 92       	push	r9
    1d46:	af 92       	push	r10
    1d48:	bf 92       	push	r11
    1d4a:	cf 92       	push	r12
    1d4c:	df 92       	push	r13
    1d4e:	ef 92       	push	r14
    1d50:	ff 92       	push	r15
    1d52:	0f 93       	push	r16
    1d54:	1f 93       	push	r17
    1d56:	cf 93       	push	r28
    1d58:	df 93       	push	r29
    1d5a:	cd b7       	in	r28, 0x3d	; 61
    1d5c:	de b7       	in	r29, 0x3e	; 62
    1d5e:	a0 97       	sbiw	r28, 0x20	; 32
    1d60:	0f b6       	in	r0, 0x3f	; 63
    1d62:	f8 94       	cli
    1d64:	de bf       	out	0x3e, r29	; 62
    1d66:	0f be       	out	0x3f, r0	; 63
    1d68:	cd bf       	out	0x3d, r28	; 61
    1d6a:	3c 01       	movw	r6, r24
    1d6c:	2b 01       	movw	r4, r22
    1d6e:	7a 01       	movw	r14, r20
    1d70:	59 01       	movw	r10, r18
    1d72:	68 01       	movw	r12, r16
    1d74:	f8 01       	movw	r30, r16
    1d76:	10 81       	ld	r17, Z
    1d78:	46 01       	movw	r8, r12
    1d7a:	f4 e0       	ldi	r31, 0x04	; 4
    1d7c:	8f 0e       	add	r8, r31
    1d7e:	91 1c       	adc	r9, r1
    1d80:	01 2f       	mov	r16, r17
    1d82:	94 01       	movw	r18, r8
    1d84:	ac 01       	movw	r20, r24
    1d86:	b7 01       	movw	r22, r14
    1d88:	ce 01       	movw	r24, r28
    1d8a:	01 96       	adiw	r24, 0x01	; 1
    1d8c:	08 d9       	rcall	.-3568   	; 0xf9e <uECC_vli_modSub>
    1d8e:	a6 01       	movw	r20, r12
    1d90:	be 01       	movw	r22, r28
    1d92:	6f 5f       	subi	r22, 0xFF	; 255
    1d94:	7f 4f       	sbci	r23, 0xFF	; 255
    1d96:	cb 01       	movw	r24, r22
    1d98:	cc da       	rcall	.-2664   	; 0x1332 <uECC_vli_modSquare_fast>
    1d9a:	96 01       	movw	r18, r12
    1d9c:	ae 01       	movw	r20, r28
    1d9e:	4f 5f       	subi	r20, 0xFF	; 255
    1da0:	5f 4f       	sbci	r21, 0xFF	; 255
    1da2:	b3 01       	movw	r22, r6
    1da4:	c3 01       	movw	r24, r6
    1da6:	96 da       	rcall	.-2772   	; 0x12d4 <uECC_vli_modMult_fast>
    1da8:	96 01       	movw	r18, r12
    1daa:	ae 01       	movw	r20, r28
    1dac:	4f 5f       	subi	r20, 0xFF	; 255
    1dae:	5f 4f       	sbci	r21, 0xFF	; 255
    1db0:	b7 01       	movw	r22, r14
    1db2:	c7 01       	movw	r24, r14
    1db4:	8f da       	rcall	.-2786   	; 0x12d4 <uECC_vli_modMult_fast>
    1db6:	94 01       	movw	r18, r8
    1db8:	a2 01       	movw	r20, r4
    1dba:	b5 01       	movw	r22, r10
    1dbc:	c5 01       	movw	r24, r10
    1dbe:	ef d8       	rcall	.-3618   	; 0xf9e <uECC_vli_modSub>
    1dc0:	a6 01       	movw	r20, r12
    1dc2:	b5 01       	movw	r22, r10
    1dc4:	ce 01       	movw	r24, r28
    1dc6:	01 96       	adiw	r24, 0x01	; 1
    1dc8:	b4 da       	rcall	.-2712   	; 0x1332 <uECC_vli_modSquare_fast>
    1dca:	94 01       	movw	r18, r8
    1dcc:	a3 01       	movw	r20, r6
    1dce:	be 01       	movw	r22, r28
    1dd0:	6f 5f       	subi	r22, 0xFF	; 255
    1dd2:	7f 4f       	sbci	r23, 0xFF	; 255
    1dd4:	cb 01       	movw	r24, r22
    1dd6:	e3 d8       	rcall	.-3642   	; 0xf9e <uECC_vli_modSub>
    1dd8:	94 01       	movw	r18, r8
    1dda:	a7 01       	movw	r20, r14
    1ddc:	be 01       	movw	r22, r28
    1dde:	6f 5f       	subi	r22, 0xFF	; 255
    1de0:	7f 4f       	sbci	r23, 0xFF	; 255
    1de2:	cb 01       	movw	r24, r22
    1de4:	dc d8       	rcall	.-3656   	; 0xf9e <uECC_vli_modSub>
    1de6:	94 01       	movw	r18, r8
    1de8:	a3 01       	movw	r20, r6
    1dea:	b7 01       	movw	r22, r14
    1dec:	c7 01       	movw	r24, r14
    1dee:	d7 d8       	rcall	.-3666   	; 0xf9e <uECC_vli_modSub>
    1df0:	96 01       	movw	r18, r12
    1df2:	a7 01       	movw	r20, r14
    1df4:	b2 01       	movw	r22, r4
    1df6:	c2 01       	movw	r24, r4
    1df8:	6d da       	rcall	.-2854   	; 0x12d4 <uECC_vli_modMult_fast>
    1dfa:	94 01       	movw	r18, r8
    1dfc:	ae 01       	movw	r20, r28
    1dfe:	4f 5f       	subi	r20, 0xFF	; 255
    1e00:	5f 4f       	sbci	r21, 0xFF	; 255
    1e02:	b3 01       	movw	r22, r6
    1e04:	c7 01       	movw	r24, r14
    1e06:	cb d8       	rcall	.-3690   	; 0xf9e <uECC_vli_modSub>
    1e08:	96 01       	movw	r18, r12
    1e0a:	a7 01       	movw	r20, r14
    1e0c:	b5 01       	movw	r22, r10
    1e0e:	c5 01       	movw	r24, r10
    1e10:	61 da       	rcall	.-2878   	; 0x12d4 <uECC_vli_modMult_fast>
    1e12:	94 01       	movw	r18, r8
    1e14:	a2 01       	movw	r20, r4
    1e16:	b5 01       	movw	r22, r10
    1e18:	c5 01       	movw	r24, r10
    1e1a:	c1 d8       	rcall	.-3710   	; 0xf9e <uECC_vli_modSub>
    1e1c:	41 2f       	mov	r20, r17
    1e1e:	be 01       	movw	r22, r28
    1e20:	6f 5f       	subi	r22, 0xFF	; 255
    1e22:	7f 4f       	sbci	r23, 0xFF	; 255
    1e24:	c7 01       	movw	r24, r14
    1e26:	0e 94 54 04 	call	0x8a8	; 0x8a8 <uECC_vli_set>
    1e2a:	a0 96       	adiw	r28, 0x20	; 32
    1e2c:	0f b6       	in	r0, 0x3f	; 63
    1e2e:	f8 94       	cli
    1e30:	de bf       	out	0x3e, r29	; 62
    1e32:	0f be       	out	0x3f, r0	; 63
    1e34:	cd bf       	out	0x3d, r28	; 61
    1e36:	df 91       	pop	r29
    1e38:	cf 91       	pop	r28
    1e3a:	1f 91       	pop	r17
    1e3c:	0f 91       	pop	r16
    1e3e:	ff 90       	pop	r15
    1e40:	ef 90       	pop	r14
    1e42:	df 90       	pop	r13
    1e44:	cf 90       	pop	r12
    1e46:	bf 90       	pop	r11
    1e48:	af 90       	pop	r10
    1e4a:	9f 90       	pop	r9
    1e4c:	8f 90       	pop	r8
    1e4e:	7f 90       	pop	r7
    1e50:	6f 90       	pop	r6
    1e52:	5f 90       	pop	r5
    1e54:	4f 90       	pop	r4
    1e56:	08 95       	ret

00001e58 <XYcZ_addC>:
    1e58:	4f 92       	push	r4
    1e5a:	5f 92       	push	r5
    1e5c:	6f 92       	push	r6
    1e5e:	7f 92       	push	r7
    1e60:	8f 92       	push	r8
    1e62:	9f 92       	push	r9
    1e64:	af 92       	push	r10
    1e66:	bf 92       	push	r11
    1e68:	cf 92       	push	r12
    1e6a:	df 92       	push	r13
    1e6c:	ef 92       	push	r14
    1e6e:	ff 92       	push	r15
    1e70:	0f 93       	push	r16
    1e72:	1f 93       	push	r17
    1e74:	cf 93       	push	r28
    1e76:	df 93       	push	r29
    1e78:	cd b7       	in	r28, 0x3d	; 61
    1e7a:	de b7       	in	r29, 0x3e	; 62
    1e7c:	c0 56       	subi	r28, 0x60	; 96
    1e7e:	d1 09       	sbc	r29, r1
    1e80:	0f b6       	in	r0, 0x3f	; 63
    1e82:	f8 94       	cli
    1e84:	de bf       	out	0x3e, r29	; 62
    1e86:	0f be       	out	0x3f, r0	; 63
    1e88:	cd bf       	out	0x3d, r28	; 61
    1e8a:	4c 01       	movw	r8, r24
    1e8c:	2b 01       	movw	r4, r22
    1e8e:	5a 01       	movw	r10, r20
    1e90:	39 01       	movw	r6, r18
    1e92:	68 01       	movw	r12, r16
    1e94:	f8 01       	movw	r30, r16
    1e96:	10 81       	ld	r17, Z
    1e98:	76 01       	movw	r14, r12
    1e9a:	f4 e0       	ldi	r31, 0x04	; 4
    1e9c:	ef 0e       	add	r14, r31
    1e9e:	f1 1c       	adc	r15, r1
    1ea0:	01 2f       	mov	r16, r17
    1ea2:	97 01       	movw	r18, r14
    1ea4:	ac 01       	movw	r20, r24
    1ea6:	b5 01       	movw	r22, r10
    1ea8:	ce 01       	movw	r24, r28
    1eaa:	01 96       	adiw	r24, 0x01	; 1
    1eac:	78 d8       	rcall	.-3856   	; 0xf9e <uECC_vli_modSub>
    1eae:	a6 01       	movw	r20, r12
    1eb0:	be 01       	movw	r22, r28
    1eb2:	6f 5f       	subi	r22, 0xFF	; 255
    1eb4:	7f 4f       	sbci	r23, 0xFF	; 255
    1eb6:	cb 01       	movw	r24, r22
    1eb8:	3c da       	rcall	.-2952   	; 0x1332 <uECC_vli_modSquare_fast>
    1eba:	96 01       	movw	r18, r12
    1ebc:	ae 01       	movw	r20, r28
    1ebe:	4f 5f       	subi	r20, 0xFF	; 255
    1ec0:	5f 4f       	sbci	r21, 0xFF	; 255
    1ec2:	b4 01       	movw	r22, r8
    1ec4:	c4 01       	movw	r24, r8
    1ec6:	06 da       	rcall	.-3060   	; 0x12d4 <uECC_vli_modMult_fast>
    1ec8:	96 01       	movw	r18, r12
    1eca:	ae 01       	movw	r20, r28
    1ecc:	4f 5f       	subi	r20, 0xFF	; 255
    1ece:	5f 4f       	sbci	r21, 0xFF	; 255
    1ed0:	b5 01       	movw	r22, r10
    1ed2:	c5 01       	movw	r24, r10
    1ed4:	ff d9       	rcall	.-3074   	; 0x12d4 <uECC_vli_modMult_fast>
    1ed6:	97 01       	movw	r18, r14
    1ed8:	a2 01       	movw	r20, r4
    1eda:	b3 01       	movw	r22, r6
    1edc:	ce 01       	movw	r24, r28
    1ede:	01 96       	adiw	r24, 0x01	; 1
    1ee0:	42 d8       	rcall	.-3964   	; 0xf66 <uECC_vli_modAdd>
    1ee2:	97 01       	movw	r18, r14
    1ee4:	a2 01       	movw	r20, r4
    1ee6:	b3 01       	movw	r22, r6
    1ee8:	c3 01       	movw	r24, r6
    1eea:	59 d8       	rcall	.-3918   	; 0xf9e <uECC_vli_modSub>
    1eec:	97 01       	movw	r18, r14
    1eee:	a4 01       	movw	r20, r8
    1ef0:	b5 01       	movw	r22, r10
    1ef2:	ce 01       	movw	r24, r28
    1ef4:	81 96       	adiw	r24, 0x21	; 33
    1ef6:	53 d8       	rcall	.-3930   	; 0xf9e <uECC_vli_modSub>
    1ef8:	96 01       	movw	r18, r12
    1efa:	ae 01       	movw	r20, r28
    1efc:	4f 5d       	subi	r20, 0xDF	; 223
    1efe:	5f 4f       	sbci	r21, 0xFF	; 255
    1f00:	b2 01       	movw	r22, r4
    1f02:	c2 01       	movw	r24, r4
    1f04:	e7 d9       	rcall	.-3122   	; 0x12d4 <uECC_vli_modMult_fast>
    1f06:	97 01       	movw	r18, r14
    1f08:	a5 01       	movw	r20, r10
    1f0a:	b4 01       	movw	r22, r8
    1f0c:	ce 01       	movw	r24, r28
    1f0e:	81 96       	adiw	r24, 0x21	; 33
    1f10:	2a d8       	rcall	.-4012   	; 0xf66 <uECC_vli_modAdd>
    1f12:	a6 01       	movw	r20, r12
    1f14:	b3 01       	movw	r22, r6
    1f16:	c5 01       	movw	r24, r10
    1f18:	0c da       	rcall	.-3048   	; 0x1332 <uECC_vli_modSquare_fast>
    1f1a:	97 01       	movw	r18, r14
    1f1c:	ae 01       	movw	r20, r28
    1f1e:	4f 5d       	subi	r20, 0xDF	; 223
    1f20:	5f 4f       	sbci	r21, 0xFF	; 255
    1f22:	b5 01       	movw	r22, r10
    1f24:	c5 01       	movw	r24, r10
    1f26:	3b d8       	rcall	.-3978   	; 0xf9e <uECC_vli_modSub>
    1f28:	97 01       	movw	r18, r14
    1f2a:	a5 01       	movw	r20, r10
    1f2c:	b4 01       	movw	r22, r8
    1f2e:	ce 01       	movw	r24, r28
    1f30:	8f 5b       	subi	r24, 0xBF	; 191
    1f32:	9f 4f       	sbci	r25, 0xFF	; 255
    1f34:	34 d8       	rcall	.-3992   	; 0xf9e <uECC_vli_modSub>
    1f36:	96 01       	movw	r18, r12
    1f38:	ae 01       	movw	r20, r28
    1f3a:	4f 5b       	subi	r20, 0xBF	; 191
    1f3c:	5f 4f       	sbci	r21, 0xFF	; 255
    1f3e:	b3 01       	movw	r22, r6
    1f40:	c3 01       	movw	r24, r6
    1f42:	c8 d9       	rcall	.-3184   	; 0x12d4 <uECC_vli_modMult_fast>
    1f44:	97 01       	movw	r18, r14
    1f46:	a2 01       	movw	r20, r4
    1f48:	b3 01       	movw	r22, r6
    1f4a:	c3 01       	movw	r24, r6
    1f4c:	28 d8       	rcall	.-4016   	; 0xf9e <uECC_vli_modSub>
    1f4e:	a6 01       	movw	r20, r12
    1f50:	be 01       	movw	r22, r28
    1f52:	6f 5f       	subi	r22, 0xFF	; 255
    1f54:	7f 4f       	sbci	r23, 0xFF	; 255
    1f56:	ce 01       	movw	r24, r28
    1f58:	8f 5b       	subi	r24, 0xBF	; 191
    1f5a:	9f 4f       	sbci	r25, 0xFF	; 255
    1f5c:	ea d9       	rcall	.-3116   	; 0x1332 <uECC_vli_modSquare_fast>
    1f5e:	97 01       	movw	r18, r14
    1f60:	ae 01       	movw	r20, r28
    1f62:	4f 5d       	subi	r20, 0xDF	; 223
    1f64:	5f 4f       	sbci	r21, 0xFF	; 255
    1f66:	be 01       	movw	r22, r28
    1f68:	6f 5b       	subi	r22, 0xBF	; 191
    1f6a:	7f 4f       	sbci	r23, 0xFF	; 255
    1f6c:	cb 01       	movw	r24, r22
    1f6e:	17 d8       	rcall	.-4050   	; 0xf9e <uECC_vli_modSub>
    1f70:	97 01       	movw	r18, r14
    1f72:	a4 01       	movw	r20, r8
    1f74:	be 01       	movw	r22, r28
    1f76:	6f 5b       	subi	r22, 0xBF	; 191
    1f78:	7f 4f       	sbci	r23, 0xFF	; 255
    1f7a:	ce 01       	movw	r24, r28
    1f7c:	81 96       	adiw	r24, 0x21	; 33
    1f7e:	0f d8       	rcall	.-4066   	; 0xf9e <uECC_vli_modSub>
    1f80:	96 01       	movw	r18, r12
    1f82:	ae 01       	movw	r20, r28
    1f84:	4f 5f       	subi	r20, 0xFF	; 255
    1f86:	5f 4f       	sbci	r21, 0xFF	; 255
    1f88:	be 01       	movw	r22, r28
    1f8a:	6f 5d       	subi	r22, 0xDF	; 223
    1f8c:	7f 4f       	sbci	r23, 0xFF	; 255
    1f8e:	cb 01       	movw	r24, r22
    1f90:	a1 d9       	rcall	.-3262   	; 0x12d4 <uECC_vli_modMult_fast>
    1f92:	97 01       	movw	r18, r14
    1f94:	a2 01       	movw	r20, r4
    1f96:	be 01       	movw	r22, r28
    1f98:	6f 5d       	subi	r22, 0xDF	; 223
    1f9a:	7f 4f       	sbci	r23, 0xFF	; 255
    1f9c:	c2 01       	movw	r24, r4
    1f9e:	0e 94 cf 07 	call	0xf9e	; 0xf9e <uECC_vli_modSub>
    1fa2:	41 2f       	mov	r20, r17
    1fa4:	be 01       	movw	r22, r28
    1fa6:	6f 5b       	subi	r22, 0xBF	; 191
    1fa8:	7f 4f       	sbci	r23, 0xFF	; 255
    1faa:	c4 01       	movw	r24, r8
    1fac:	0e 94 54 04 	call	0x8a8	; 0x8a8 <uECC_vli_set>
    1fb0:	c0 5a       	subi	r28, 0xA0	; 160
    1fb2:	df 4f       	sbci	r29, 0xFF	; 255
    1fb4:	0f b6       	in	r0, 0x3f	; 63
    1fb6:	f8 94       	cli
    1fb8:	de bf       	out	0x3e, r29	; 62
    1fba:	0f be       	out	0x3f, r0	; 63
    1fbc:	cd bf       	out	0x3d, r28	; 61
    1fbe:	df 91       	pop	r29
    1fc0:	cf 91       	pop	r28
    1fc2:	1f 91       	pop	r17
    1fc4:	0f 91       	pop	r16
    1fc6:	ff 90       	pop	r15
    1fc8:	ef 90       	pop	r14
    1fca:	df 90       	pop	r13
    1fcc:	cf 90       	pop	r12
    1fce:	bf 90       	pop	r11
    1fd0:	af 90       	pop	r10
    1fd2:	9f 90       	pop	r9
    1fd4:	8f 90       	pop	r8
    1fd6:	7f 90       	pop	r7
    1fd8:	6f 90       	pop	r6
    1fda:	5f 90       	pop	r5
    1fdc:	4f 90       	pop	r4
    1fde:	08 95       	ret

00001fe0 <EccPoint_mult>:
    1fe0:	2f 92       	push	r2
    1fe2:	3f 92       	push	r3
    1fe4:	4f 92       	push	r4
    1fe6:	5f 92       	push	r5
    1fe8:	6f 92       	push	r6
    1fea:	7f 92       	push	r7
    1fec:	8f 92       	push	r8
    1fee:	9f 92       	push	r9
    1ff0:	af 92       	push	r10
    1ff2:	bf 92       	push	r11
    1ff4:	cf 92       	push	r12
    1ff6:	df 92       	push	r13
    1ff8:	ef 92       	push	r14
    1ffa:	ff 92       	push	r15
    1ffc:	0f 93       	push	r16
    1ffe:	1f 93       	push	r17
    2000:	cf 93       	push	r28
    2002:	df 93       	push	r29
    2004:	cd b7       	in	r28, 0x3d	; 61
    2006:	de b7       	in	r29, 0x3e	; 62
    2008:	cb 5c       	subi	r28, 0xCB	; 203
    200a:	d1 09       	sbc	r29, r1
    200c:	0f b6       	in	r0, 0x3f	; 63
    200e:	f8 94       	cli
    2010:	de bf       	out	0x3e, r29	; 62
    2012:	0f be       	out	0x3f, r0	; 63
    2014:	cd bf       	out	0x3d, r28	; 61
    2016:	c6 53       	subi	r28, 0x36	; 54
    2018:	df 4f       	sbci	r29, 0xFF	; 255
    201a:	99 83       	std	Y+1, r25	; 0x01
    201c:	88 83       	st	Y, r24
    201e:	ca 5c       	subi	r28, 0xCA	; 202
    2020:	d0 40       	sbci	r29, 0x00	; 0
    2022:	cc 53       	subi	r28, 0x3C	; 60
    2024:	df 4f       	sbci	r29, 0xFF	; 255
    2026:	79 83       	std	Y+1, r23	; 0x01
    2028:	68 83       	st	Y, r22
    202a:	c4 5c       	subi	r28, 0xC4	; 196
    202c:	d0 40       	sbci	r29, 0x00	; 0
    202e:	cf 53       	subi	r28, 0x3F	; 63
    2030:	df 4f       	sbci	r29, 0xFF	; 255
    2032:	59 83       	std	Y+1, r21	; 0x01
    2034:	48 83       	st	Y, r20
    2036:	c1 5c       	subi	r28, 0xC1	; 193
    2038:	d0 40       	sbci	r29, 0x00	; 0
    203a:	69 01       	movw	r12, r18
    203c:	17 01       	movw	r2, r14
    203e:	f7 01       	movw	r30, r14
    2040:	f0 81       	ld	r31, Z
    2042:	cd 53       	subi	r28, 0x3D	; 61
    2044:	df 4f       	sbci	r29, 0xFF	; 255
    2046:	f8 83       	st	Y, r31
    2048:	c3 5c       	subi	r28, 0xC3	; 195
    204a:	d0 40       	sbci	r29, 0x00	; 0
    204c:	4f 2f       	mov	r20, r31
    204e:	ce 01       	movw	r24, r28
    2050:	81 96       	adiw	r24, 0x21	; 33
    2052:	0e 94 54 04 	call	0x8a8	; 0x8a8 <uECC_vli_set>
    2056:	cd 53       	subi	r28, 0x3D	; 61
    2058:	df 4f       	sbci	r29, 0xFF	; 255
    205a:	28 81       	ld	r18, Y
    205c:	c3 5c       	subi	r28, 0xC3	; 195
    205e:	d0 40       	sbci	r29, 0x00	; 0
    2060:	02 2e       	mov	r0, r18
    2062:	00 0c       	add	r0, r0
    2064:	33 0b       	sbc	r19, r19
    2066:	ca 53       	subi	r28, 0x3A	; 58
    2068:	df 4f       	sbci	r29, 0xFF	; 255
    206a:	39 83       	std	Y+1, r19	; 0x01
    206c:	28 83       	st	Y, r18
    206e:	c6 5c       	subi	r28, 0xC6	; 198
    2070:	d0 40       	sbci	r29, 0x00	; 0
    2072:	cc 53       	subi	r28, 0x3C	; 60
    2074:	df 4f       	sbci	r29, 0xFF	; 255
    2076:	88 81       	ld	r24, Y
    2078:	99 81       	ldd	r25, Y+1	; 0x01
    207a:	c4 5c       	subi	r28, 0xC4	; 196
    207c:	d0 40       	sbci	r29, 0x00	; 0
    207e:	82 0f       	add	r24, r18
    2080:	93 1f       	adc	r25, r19
    2082:	c8 53       	subi	r28, 0x38	; 56
    2084:	df 4f       	sbci	r29, 0xFF	; 255
    2086:	99 83       	std	Y+1, r25	; 0x01
    2088:	88 83       	st	Y, r24
    208a:	c8 5c       	subi	r28, 0xC8	; 200
    208c:	d0 40       	sbci	r29, 0x00	; 0
    208e:	cd 53       	subi	r28, 0x3D	; 61
    2090:	df 4f       	sbci	r29, 0xFF	; 255
    2092:	48 81       	ld	r20, Y
    2094:	c3 5c       	subi	r28, 0xC3	; 195
    2096:	d0 40       	sbci	r29, 0x00	; 0
    2098:	bc 01       	movw	r22, r24
    209a:	ce 01       	movw	r24, r28
    209c:	8f 59       	subi	r24, 0x9F	; 159
    209e:	9f 4f       	sbci	r25, 0xFF	; 255
    20a0:	0e 94 54 04 	call	0x8a8	; 0x8a8 <uECC_vli_set>
    20a4:	f7 01       	movw	r30, r14
    20a6:	b0 80       	ld	r11, Z
    20a8:	c1 14       	cp	r12, r1
    20aa:	d1 04       	cpc	r13, r1
    20ac:	41 f0       	breq	.+16     	; 0x20be <EccPoint_mult+0xde>
    20ae:	4b 2d       	mov	r20, r11
    20b0:	b6 01       	movw	r22, r12
    20b2:	ce 01       	movw	r24, r28
    20b4:	8f 55       	subi	r24, 0x5F	; 95
    20b6:	9f 4f       	sbci	r25, 0xFF	; 255
    20b8:	0e 94 54 04 	call	0x8a8	; 0x8a8 <uECC_vli_set>
    20bc:	0c c0       	rjmp	.+24     	; 0x20d6 <EccPoint_mult+0xf6>
    20be:	6b 2d       	mov	r22, r11
    20c0:	ce 01       	movw	r24, r28
    20c2:	8f 55       	subi	r24, 0x5F	; 95
    20c4:	9f 4f       	sbci	r25, 0xFF	; 255
    20c6:	0e 94 2d 04 	call	0x85a	; 0x85a <uECC_vli_clear>
    20ca:	81 e0       	ldi	r24, 0x01	; 1
    20cc:	cf 55       	subi	r28, 0x5F	; 95
    20ce:	df 4f       	sbci	r29, 0xFF	; 255
    20d0:	88 83       	st	Y, r24
    20d2:	c1 5a       	subi	r28, 0xA1	; 161
    20d4:	d0 40       	sbci	r29, 0x00	; 0
    20d6:	4b 2d       	mov	r20, r11
    20d8:	be 01       	movw	r22, r28
    20da:	6f 5d       	subi	r22, 0xDF	; 223
    20dc:	7f 4f       	sbci	r23, 0xFF	; 255
    20de:	ce 01       	movw	r24, r28
    20e0:	01 96       	adiw	r24, 0x01	; 1
    20e2:	0e 94 54 04 	call	0x8a8	; 0x8a8 <uECC_vli_set>
    20e6:	0f 2e       	mov	r0, r31
    20e8:	f1 e4       	ldi	r31, 0x41	; 65
    20ea:	ef 2e       	mov	r14, r31
    20ec:	f1 2c       	mov	r15, r1
    20ee:	f0 2d       	mov	r31, r0
    20f0:	ec 0e       	add	r14, r28
    20f2:	fd 1e       	adc	r15, r29
    20f4:	f0 e2       	ldi	r31, 0x20	; 32
    20f6:	ef 0e       	add	r14, r31
    20f8:	f1 1c       	adc	r15, r1
    20fa:	4b 2d       	mov	r20, r11
    20fc:	b7 01       	movw	r22, r14
    20fe:	ce 01       	movw	r24, r28
    2100:	8f 5b       	subi	r24, 0xBF	; 191
    2102:	9f 4f       	sbci	r25, 0xFF	; 255
    2104:	0e 94 54 04 	call	0x8a8	; 0x8a8 <uECC_vli_set>
    2108:	91 01       	movw	r18, r2
    210a:	ae 01       	movw	r20, r28
    210c:	4f 55       	subi	r20, 0x5F	; 95
    210e:	5f 4f       	sbci	r21, 0xFF	; 255
    2110:	b7 01       	movw	r22, r14
    2112:	ce 01       	movw	r24, r28
    2114:	81 96       	adiw	r24, 0x21	; 33
    2116:	d0 dd       	rcall	.-1120   	; 0x1cb8 <apply_z>
    2118:	f1 01       	movw	r30, r2
    211a:	ec 55       	subi	r30, 0x5C	; 92
    211c:	ff 4f       	sbci	r31, 0xFF	; 255
    211e:	01 90       	ld	r0, Z+
    2120:	f0 81       	ld	r31, Z
    2122:	e0 2d       	mov	r30, r0
    2124:	91 01       	movw	r18, r2
    2126:	ae 01       	movw	r20, r28
    2128:	4f 55       	subi	r20, 0x5F	; 95
    212a:	5f 4f       	sbci	r21, 0xFF	; 255
    212c:	b7 01       	movw	r22, r14
    212e:	ce 01       	movw	r24, r28
    2130:	81 96       	adiw	r24, 0x21	; 33
    2132:	09 95       	icall
    2134:	91 01       	movw	r18, r2
    2136:	ae 01       	movw	r20, r28
    2138:	4f 55       	subi	r20, 0x5F	; 95
    213a:	5f 4f       	sbci	r21, 0xFF	; 255
    213c:	be 01       	movw	r22, r28
    213e:	6f 5b       	subi	r22, 0xBF	; 191
    2140:	7f 4f       	sbci	r23, 0xFF	; 255
    2142:	ce 01       	movw	r24, r28
    2144:	01 96       	adiw	r24, 0x01	; 1
    2146:	b8 dd       	rcall	.-1168   	; 0x1cb8 <apply_z>
    2148:	58 01       	movw	r10, r16
    214a:	22 e0       	ldi	r18, 0x02	; 2
    214c:	a2 1a       	sub	r10, r18
    214e:	b1 08       	sbc	r11, r1
    2150:	1a 14       	cp	r1, r10
    2152:	1b 04       	cpc	r1, r11
    2154:	0c f0       	brlt	.+2      	; 0x2158 <EccPoint_mult+0x178>
    2156:	53 c0       	rjmp	.+166    	; 0x21fe <EccPoint_mult+0x21e>
    2158:	44 24       	eor	r4, r4
    215a:	43 94       	inc	r4
    215c:	51 2c       	mov	r5, r1
    215e:	b5 01       	movw	r22, r10
    2160:	cf 53       	subi	r28, 0x3F	; 63
    2162:	df 4f       	sbci	r29, 0xFF	; 255
    2164:	88 81       	ld	r24, Y
    2166:	99 81       	ldd	r25, Y+1	; 0x01
    2168:	c1 5c       	subi	r28, 0xC1	; 193
    216a:	d0 40       	sbci	r29, 0x00	; 0
    216c:	0e 94 07 07 	call	0xe0e	; 0xe0e <uECC_vli_testBit>
    2170:	92 01       	movw	r18, r4
    2172:	88 23       	and	r24, r24
    2174:	11 f0       	breq	.+4      	; 0x217a <EccPoint_mult+0x19a>
    2176:	20 e0       	ldi	r18, 0x00	; 0
    2178:	30 e0       	ldi	r19, 0x00	; 0
    217a:	39 01       	movw	r6, r18
    217c:	66 0c       	add	r6, r6
    217e:	77 1c       	adc	r7, r7
    2180:	66 0c       	add	r6, r6
    2182:	77 1c       	adc	r7, r7
    2184:	66 0c       	add	r6, r6
    2186:	77 1c       	adc	r7, r7
    2188:	66 0c       	add	r6, r6
    218a:	77 1c       	adc	r7, r7
    218c:	66 0c       	add	r6, r6
    218e:	77 1c       	adc	r7, r7
    2190:	0f 2e       	mov	r0, r31
    2192:	f1 e4       	ldi	r31, 0x41	; 65
    2194:	cf 2e       	mov	r12, r31
    2196:	d1 2c       	mov	r13, r1
    2198:	f0 2d       	mov	r31, r0
    219a:	cc 0e       	add	r12, r28
    219c:	dd 1e       	adc	r13, r29
    219e:	c6 0c       	add	r12, r6
    21a0:	d7 1c       	adc	r13, r7
    21a2:	81 e0       	ldi	r24, 0x01	; 1
    21a4:	90 e0       	ldi	r25, 0x00	; 0
    21a6:	8c 0f       	add	r24, r28
    21a8:	9d 1f       	adc	r25, r29
    21aa:	68 0e       	add	r6, r24
    21ac:	79 1e       	adc	r7, r25
    21ae:	72 01       	movw	r14, r4
    21b0:	e2 1a       	sub	r14, r18
    21b2:	f3 0a       	sbc	r15, r19
    21b4:	ee 0c       	add	r14, r14
    21b6:	ff 1c       	adc	r15, r15
    21b8:	ee 0c       	add	r14, r14
    21ba:	ff 1c       	adc	r15, r15
    21bc:	ee 0c       	add	r14, r14
    21be:	ff 1c       	adc	r15, r15
    21c0:	ee 0c       	add	r14, r14
    21c2:	ff 1c       	adc	r15, r15
    21c4:	ee 0c       	add	r14, r14
    21c6:	ff 1c       	adc	r15, r15
    21c8:	0f 2e       	mov	r0, r31
    21ca:	f1 e4       	ldi	r31, 0x41	; 65
    21cc:	8f 2e       	mov	r8, r31
    21ce:	91 2c       	mov	r9, r1
    21d0:	f0 2d       	mov	r31, r0
    21d2:	8c 0e       	add	r8, r28
    21d4:	9d 1e       	adc	r9, r29
    21d6:	8e 0c       	add	r8, r14
    21d8:	9f 1c       	adc	r9, r15
    21da:	e8 0e       	add	r14, r24
    21dc:	f9 1e       	adc	r15, r25
    21de:	81 01       	movw	r16, r2
    21e0:	96 01       	movw	r18, r12
    21e2:	a3 01       	movw	r20, r6
    21e4:	b4 01       	movw	r22, r8
    21e6:	c7 01       	movw	r24, r14
    21e8:	37 de       	rcall	.-914    	; 0x1e58 <XYcZ_addC>
    21ea:	94 01       	movw	r18, r8
    21ec:	a7 01       	movw	r20, r14
    21ee:	b6 01       	movw	r22, r12
    21f0:	c3 01       	movw	r24, r6
    21f2:	a3 dd       	rcall	.-1210   	; 0x1d3a <XYcZ_add>
    21f4:	91 e0       	ldi	r25, 0x01	; 1
    21f6:	a9 1a       	sub	r10, r25
    21f8:	b1 08       	sbc	r11, r1
    21fa:	09 f0       	breq	.+2      	; 0x21fe <EccPoint_mult+0x21e>
    21fc:	b0 cf       	rjmp	.-160    	; 0x215e <EccPoint_mult+0x17e>
    21fe:	60 e0       	ldi	r22, 0x00	; 0
    2200:	70 e0       	ldi	r23, 0x00	; 0
    2202:	cf 53       	subi	r28, 0x3F	; 63
    2204:	df 4f       	sbci	r29, 0xFF	; 255
    2206:	88 81       	ld	r24, Y
    2208:	99 81       	ldd	r25, Y+1	; 0x01
    220a:	c1 5c       	subi	r28, 0xC1	; 193
    220c:	d0 40       	sbci	r29, 0x00	; 0
    220e:	0e 94 07 07 	call	0xe0e	; 0xe0e <uECC_vli_testBit>
    2212:	21 e0       	ldi	r18, 0x01	; 1
    2214:	30 e0       	ldi	r19, 0x00	; 0
    2216:	88 23       	and	r24, r24
    2218:	11 f0       	breq	.+4      	; 0x221e <EccPoint_mult+0x23e>
    221a:	20 e0       	ldi	r18, 0x00	; 0
    221c:	30 e0       	ldi	r19, 0x00	; 0
    221e:	69 01       	movw	r12, r18
    2220:	cc 0c       	add	r12, r12
    2222:	dd 1c       	adc	r13, r13
    2224:	cc 0c       	add	r12, r12
    2226:	dd 1c       	adc	r13, r13
    2228:	cc 0c       	add	r12, r12
    222a:	dd 1c       	adc	r13, r13
    222c:	cc 0c       	add	r12, r12
    222e:	dd 1c       	adc	r13, r13
    2230:	cc 0c       	add	r12, r12
    2232:	dd 1c       	adc	r13, r13
    2234:	0f 2e       	mov	r0, r31
    2236:	f1 e4       	ldi	r31, 0x41	; 65
    2238:	8f 2e       	mov	r8, r31
    223a:	91 2c       	mov	r9, r1
    223c:	f0 2d       	mov	r31, r0
    223e:	8c 0e       	add	r8, r28
    2240:	9d 1e       	adc	r9, r29
    2242:	8c 0c       	add	r8, r12
    2244:	9d 1c       	adc	r9, r13
    2246:	e1 e0       	ldi	r30, 0x01	; 1
    2248:	f0 e0       	ldi	r31, 0x00	; 0
    224a:	ec 0f       	add	r30, r28
    224c:	fd 1f       	adc	r31, r29
    224e:	ce 0e       	add	r12, r30
    2250:	df 1e       	adc	r13, r31
    2252:	81 e0       	ldi	r24, 0x01	; 1
    2254:	90 e0       	ldi	r25, 0x00	; 0
    2256:	7c 01       	movw	r14, r24
    2258:	e2 1a       	sub	r14, r18
    225a:	f3 0a       	sbc	r15, r19
    225c:	ee 0c       	add	r14, r14
    225e:	ff 1c       	adc	r15, r15
    2260:	ee 0c       	add	r14, r14
    2262:	ff 1c       	adc	r15, r15
    2264:	ee 0c       	add	r14, r14
    2266:	ff 1c       	adc	r15, r15
    2268:	ee 0c       	add	r14, r14
    226a:	ff 1c       	adc	r15, r15
    226c:	ee 0c       	add	r14, r14
    226e:	ff 1c       	adc	r15, r15
    2270:	0f 2e       	mov	r0, r31
    2272:	f1 e4       	ldi	r31, 0x41	; 65
    2274:	af 2e       	mov	r10, r31
    2276:	b1 2c       	mov	r11, r1
    2278:	f0 2d       	mov	r31, r0
    227a:	ac 0e       	add	r10, r28
    227c:	bd 1e       	adc	r11, r29
    227e:	ae 0c       	add	r10, r14
    2280:	bf 1c       	adc	r11, r15
    2282:	ee 0e       	add	r14, r30
    2284:	ff 1e       	adc	r15, r31
    2286:	81 01       	movw	r16, r2
    2288:	94 01       	movw	r18, r8
    228a:	a6 01       	movw	r20, r12
    228c:	b5 01       	movw	r22, r10
    228e:	c7 01       	movw	r24, r14
    2290:	e3 dd       	rcall	.-1082   	; 0x1e58 <XYcZ_addC>
    2292:	31 01       	movw	r6, r2
    2294:	f4 e0       	ldi	r31, 0x04	; 4
    2296:	6f 0e       	add	r6, r31
    2298:	71 1c       	adc	r7, r1
    229a:	cd 53       	subi	r28, 0x3D	; 61
    229c:	df 4f       	sbci	r29, 0xFF	; 255
    229e:	08 81       	ld	r16, Y
    22a0:	c3 5c       	subi	r28, 0xC3	; 195
    22a2:	d0 40       	sbci	r29, 0x00	; 0
    22a4:	93 01       	movw	r18, r6
    22a6:	ae 01       	movw	r20, r28
    22a8:	4f 5f       	subi	r20, 0xFF	; 255
    22aa:	5f 4f       	sbci	r21, 0xFF	; 255
    22ac:	be 01       	movw	r22, r28
    22ae:	6f 5d       	subi	r22, 0xDF	; 223
    22b0:	7f 4f       	sbci	r23, 0xFF	; 255
    22b2:	ce 01       	movw	r24, r28
    22b4:	8f 57       	subi	r24, 0x7F	; 127
    22b6:	9f 4f       	sbci	r25, 0xFF	; 255
    22b8:	0e 94 cf 07 	call	0xf9e	; 0xf9e <uECC_vli_modSub>
    22bc:	91 01       	movw	r18, r2
    22be:	a5 01       	movw	r20, r10
    22c0:	be 01       	movw	r22, r28
    22c2:	6f 57       	subi	r22, 0x7F	; 127
    22c4:	7f 4f       	sbci	r23, 0xFF	; 255
    22c6:	cb 01       	movw	r24, r22
    22c8:	05 d8       	rcall	.-4086   	; 0x12d4 <uECC_vli_modMult_fast>
    22ca:	91 01       	movw	r18, r2
    22cc:	cc 53       	subi	r28, 0x3C	; 60
    22ce:	df 4f       	sbci	r29, 0xFF	; 255
    22d0:	48 81       	ld	r20, Y
    22d2:	59 81       	ldd	r21, Y+1	; 0x01
    22d4:	c4 5c       	subi	r28, 0xC4	; 196
    22d6:	d0 40       	sbci	r29, 0x00	; 0
    22d8:	be 01       	movw	r22, r28
    22da:	6f 57       	subi	r22, 0x7F	; 127
    22dc:	7f 4f       	sbci	r23, 0xFF	; 255
    22de:	cb 01       	movw	r24, r22
    22e0:	0e 94 6a 09 	call	0x12d4	; 0x12d4 <uECC_vli_modMult_fast>
    22e4:	cd 53       	subi	r28, 0x3D	; 61
    22e6:	df 4f       	sbci	r29, 0xFF	; 255
    22e8:	28 81       	ld	r18, Y
    22ea:	c3 5c       	subi	r28, 0xC3	; 195
    22ec:	d0 40       	sbci	r29, 0x00	; 0
    22ee:	a3 01       	movw	r20, r6
    22f0:	be 01       	movw	r22, r28
    22f2:	6f 57       	subi	r22, 0x7F	; 127
    22f4:	7f 4f       	sbci	r23, 0xFF	; 255
    22f6:	cb 01       	movw	r24, r22
    22f8:	47 d8       	rcall	.-3954   	; 0x1388 <uECC_vli_modInv>
    22fa:	91 01       	movw	r18, r2
    22fc:	c8 53       	subi	r28, 0x38	; 56
    22fe:	df 4f       	sbci	r29, 0xFF	; 255
    2300:	48 81       	ld	r20, Y
    2302:	59 81       	ldd	r21, Y+1	; 0x01
    2304:	c8 5c       	subi	r28, 0xC8	; 200
    2306:	d0 40       	sbci	r29, 0x00	; 0
    2308:	be 01       	movw	r22, r28
    230a:	6f 57       	subi	r22, 0x7F	; 127
    230c:	7f 4f       	sbci	r23, 0xFF	; 255
    230e:	cb 01       	movw	r24, r22
    2310:	0e 94 6a 09 	call	0x12d4	; 0x12d4 <uECC_vli_modMult_fast>
    2314:	91 01       	movw	r18, r2
    2316:	a7 01       	movw	r20, r14
    2318:	be 01       	movw	r22, r28
    231a:	6f 57       	subi	r22, 0x7F	; 127
    231c:	7f 4f       	sbci	r23, 0xFF	; 255
    231e:	cb 01       	movw	r24, r22
    2320:	0e 94 6a 09 	call	0x12d4	; 0x12d4 <uECC_vli_modMult_fast>
    2324:	81 01       	movw	r16, r2
    2326:	95 01       	movw	r18, r10
    2328:	a7 01       	movw	r20, r14
    232a:	b4 01       	movw	r22, r8
    232c:	c6 01       	movw	r24, r12
    232e:	05 dd       	rcall	.-1526   	; 0x1d3a <XYcZ_add>
    2330:	91 01       	movw	r18, r2
    2332:	ae 01       	movw	r20, r28
    2334:	4f 57       	subi	r20, 0x7F	; 127
    2336:	5f 4f       	sbci	r21, 0xFF	; 255
    2338:	be 01       	movw	r22, r28
    233a:	6f 5b       	subi	r22, 0xBF	; 191
    233c:	7f 4f       	sbci	r23, 0xFF	; 255
    233e:	ce 01       	movw	r24, r28
    2340:	01 96       	adiw	r24, 0x01	; 1
    2342:	ba dc       	rcall	.-1676   	; 0x1cb8 <apply_z>
    2344:	cd 53       	subi	r28, 0x3D	; 61
    2346:	df 4f       	sbci	r29, 0xFF	; 255
    2348:	48 81       	ld	r20, Y
    234a:	c3 5c       	subi	r28, 0xC3	; 195
    234c:	d0 40       	sbci	r29, 0x00	; 0
    234e:	be 01       	movw	r22, r28
    2350:	6f 5f       	subi	r22, 0xFF	; 255
    2352:	7f 4f       	sbci	r23, 0xFF	; 255
    2354:	c6 53       	subi	r28, 0x36	; 54
    2356:	df 4f       	sbci	r29, 0xFF	; 255
    2358:	88 81       	ld	r24, Y
    235a:	99 81       	ldd	r25, Y+1	; 0x01
    235c:	ca 5c       	subi	r28, 0xCA	; 202
    235e:	d0 40       	sbci	r29, 0x00	; 0
    2360:	0e 94 54 04 	call	0x8a8	; 0x8a8 <uECC_vli_set>
    2364:	cd 53       	subi	r28, 0x3D	; 61
    2366:	df 4f       	sbci	r29, 0xFF	; 255
    2368:	48 81       	ld	r20, Y
    236a:	c3 5c       	subi	r28, 0xC3	; 195
    236c:	d0 40       	sbci	r29, 0x00	; 0
    236e:	be 01       	movw	r22, r28
    2370:	6f 5b       	subi	r22, 0xBF	; 191
    2372:	7f 4f       	sbci	r23, 0xFF	; 255
    2374:	c6 53       	subi	r28, 0x36	; 54
    2376:	df 4f       	sbci	r29, 0xFF	; 255
    2378:	88 81       	ld	r24, Y
    237a:	99 81       	ldd	r25, Y+1	; 0x01
    237c:	ca 5c       	subi	r28, 0xCA	; 202
    237e:	d0 40       	sbci	r29, 0x00	; 0
    2380:	ca 53       	subi	r28, 0x3A	; 58
    2382:	df 4f       	sbci	r29, 0xFF	; 255
    2384:	28 81       	ld	r18, Y
    2386:	39 81       	ldd	r19, Y+1	; 0x01
    2388:	c6 5c       	subi	r28, 0xC6	; 198
    238a:	d0 40       	sbci	r29, 0x00	; 0
    238c:	82 0f       	add	r24, r18
    238e:	93 1f       	adc	r25, r19
    2390:	0e 94 54 04 	call	0x8a8	; 0x8a8 <uECC_vli_set>
    2394:	c5 53       	subi	r28, 0x35	; 53
    2396:	df 4f       	sbci	r29, 0xFF	; 255
    2398:	0f b6       	in	r0, 0x3f	; 63
    239a:	f8 94       	cli
    239c:	de bf       	out	0x3e, r29	; 62
    239e:	0f be       	out	0x3f, r0	; 63
    23a0:	cd bf       	out	0x3d, r28	; 61
    23a2:	df 91       	pop	r29
    23a4:	cf 91       	pop	r28
    23a6:	1f 91       	pop	r17
    23a8:	0f 91       	pop	r16
    23aa:	ff 90       	pop	r15
    23ac:	ef 90       	pop	r14
    23ae:	df 90       	pop	r13
    23b0:	cf 90       	pop	r12
    23b2:	bf 90       	pop	r11
    23b4:	af 90       	pop	r10
    23b6:	9f 90       	pop	r9
    23b8:	8f 90       	pop	r8
    23ba:	7f 90       	pop	r7
    23bc:	6f 90       	pop	r6
    23be:	5f 90       	pop	r5
    23c0:	4f 90       	pop	r4
    23c2:	3f 90       	pop	r3
    23c4:	2f 90       	pop	r2
    23c6:	08 95       	ret

000023c8 <regularize_k>:
    23c8:	af 92       	push	r10
    23ca:	bf 92       	push	r11
    23cc:	cf 92       	push	r12
    23ce:	df 92       	push	r13
    23d0:	ef 92       	push	r14
    23d2:	ff 92       	push	r15
    23d4:	0f 93       	push	r16
    23d6:	1f 93       	push	r17
    23d8:	cf 93       	push	r28
    23da:	df 93       	push	r29
    23dc:	7b 01       	movw	r14, r22
    23de:	5a 01       	movw	r10, r20
    23e0:	f9 01       	movw	r30, r18
    23e2:	c2 80       	ldd	r12, Z+2	; 0x02
    23e4:	d3 80       	ldd	r13, Z+3	; 0x03
    23e6:	a6 01       	movw	r20, r12
    23e8:	49 5f       	subi	r20, 0xF9	; 249
    23ea:	5f 4f       	sbci	r21, 0xFF	; 255
    23ec:	ea 01       	movw	r28, r20
    23ee:	dd 23       	and	r29, r29
    23f0:	0c f4       	brge	.+2      	; 0x23f4 <regularize_k+0x2c>
    23f2:	27 96       	adiw	r28, 0x07	; 7
    23f4:	d5 95       	asr	r29
    23f6:	c7 95       	ror	r28
    23f8:	d5 95       	asr	r29
    23fa:	c7 95       	ror	r28
    23fc:	d5 95       	asr	r29
    23fe:	c7 95       	ror	r28
    2400:	89 01       	movw	r16, r18
    2402:	0c 5d       	subi	r16, 0xDC	; 220
    2404:	1f 4f       	sbci	r17, 0xFF	; 255
    2406:	2c 2f       	mov	r18, r28
    2408:	a8 01       	movw	r20, r16
    240a:	bc 01       	movw	r22, r24
    240c:	c7 01       	movw	r24, r14
    240e:	0e 94 13 05 	call	0xa26	; 0xa26 <uECC_vli_add>
    2412:	81 11       	cpse	r24, r1
    2414:	11 c0       	rjmp	.+34     	; 0x2438 <regularize_k+0x70>
    2416:	28 e0       	ldi	r18, 0x08	; 8
    2418:	c2 02       	muls	r28, r18
    241a:	c0 01       	movw	r24, r0
    241c:	11 24       	eor	r1, r1
    241e:	c8 16       	cp	r12, r24
    2420:	d9 06       	cpc	r13, r25
    2422:	6c f4       	brge	.+26     	; 0x243e <regularize_k+0x76>
    2424:	b6 01       	movw	r22, r12
    2426:	c7 01       	movw	r24, r14
    2428:	0e 94 07 07 	call	0xe0e	; 0xe0e <uECC_vli_testBit>
    242c:	91 e0       	ldi	r25, 0x01	; 1
    242e:	81 11       	cpse	r24, r1
    2430:	01 c0       	rjmp	.+2      	; 0x2434 <regularize_k+0x6c>
    2432:	90 e0       	ldi	r25, 0x00	; 0
    2434:	d9 2e       	mov	r13, r25
    2436:	04 c0       	rjmp	.+8      	; 0x2440 <regularize_k+0x78>
    2438:	dd 24       	eor	r13, r13
    243a:	d3 94       	inc	r13
    243c:	01 c0       	rjmp	.+2      	; 0x2440 <regularize_k+0x78>
    243e:	d1 2c       	mov	r13, r1
    2440:	2c 2f       	mov	r18, r28
    2442:	a8 01       	movw	r20, r16
    2444:	b7 01       	movw	r22, r14
    2446:	c5 01       	movw	r24, r10
    2448:	0e 94 13 05 	call	0xa26	; 0xa26 <uECC_vli_add>
    244c:	8d 2d       	mov	r24, r13
    244e:	df 91       	pop	r29
    2450:	cf 91       	pop	r28
    2452:	1f 91       	pop	r17
    2454:	0f 91       	pop	r16
    2456:	ff 90       	pop	r15
    2458:	ef 90       	pop	r14
    245a:	df 90       	pop	r13
    245c:	cf 90       	pop	r12
    245e:	bf 90       	pop	r11
    2460:	af 90       	pop	r10
    2462:	08 95       	ret

00002464 <EccPoint_compute_public_key>:
    2464:	af 92       	push	r10
    2466:	bf 92       	push	r11
    2468:	cf 92       	push	r12
    246a:	df 92       	push	r13
    246c:	ef 92       	push	r14
    246e:	ff 92       	push	r15
    2470:	0f 93       	push	r16
    2472:	1f 93       	push	r17
    2474:	cf 93       	push	r28
    2476:	df 93       	push	r29
    2478:	cd b7       	in	r28, 0x3d	; 61
    247a:	de b7       	in	r29, 0x3e	; 62
    247c:	c4 54       	subi	r28, 0x44	; 68
    247e:	d1 09       	sbc	r29, r1
    2480:	0f b6       	in	r0, 0x3f	; 63
    2482:	f8 94       	cli
    2484:	de bf       	out	0x3e, r29	; 62
    2486:	0f be       	out	0x3f, r0	; 63
    2488:	cd bf       	out	0x3d, r28	; 61
    248a:	5c 01       	movw	r10, r24
    248c:	cb 01       	movw	r24, r22
    248e:	6a 01       	movw	r12, r20
    2490:	7e 01       	movw	r14, r28
    2492:	21 e4       	ldi	r18, 0x41	; 65
    2494:	e2 0e       	add	r14, r18
    2496:	f1 1c       	adc	r15, r1
    2498:	be 01       	movw	r22, r28
    249a:	6f 5f       	subi	r22, 0xFF	; 255
    249c:	7f 4f       	sbci	r23, 0xFF	; 255
    249e:	f7 01       	movw	r30, r14
    24a0:	71 83       	std	Z+1, r23	; 0x01
    24a2:	60 83       	st	Z, r22
    24a4:	ae 01       	movw	r20, r28
    24a6:	4f 5d       	subi	r20, 0xDF	; 223
    24a8:	5f 4f       	sbci	r21, 0xFF	; 255
    24aa:	53 83       	std	Z+3, r21	; 0x03
    24ac:	42 83       	std	Z+2, r20	; 0x02
    24ae:	96 01       	movw	r18, r12
    24b0:	8b df       	rcall	.-234    	; 0x23c8 <regularize_k>
    24b2:	f6 01       	movw	r30, r12
    24b4:	02 81       	ldd	r16, Z+2	; 0x02
    24b6:	13 81       	ldd	r17, Z+3	; 0x03
    24b8:	0f 5f       	subi	r16, 0xFF	; 255
    24ba:	1f 4f       	sbci	r17, 0xFF	; 255
    24bc:	f7 01       	movw	r30, r14
    24be:	21 e0       	ldi	r18, 0x01	; 1
    24c0:	30 e0       	ldi	r19, 0x00	; 0
    24c2:	88 23       	and	r24, r24
    24c4:	11 f0       	breq	.+4      	; 0x24ca <EccPoint_compute_public_key+0x66>
    24c6:	20 e0       	ldi	r18, 0x00	; 0
    24c8:	30 e0       	ldi	r19, 0x00	; 0
    24ca:	22 0f       	add	r18, r18
    24cc:	33 1f       	adc	r19, r19
    24ce:	e2 0f       	add	r30, r18
    24d0:	f3 1f       	adc	r31, r19
    24d2:	40 81       	ld	r20, Z
    24d4:	51 81       	ldd	r21, Z+1	; 0x01
    24d6:	b6 01       	movw	r22, r12
    24d8:	6c 5b       	subi	r22, 0xBC	; 188
    24da:	7f 4f       	sbci	r23, 0xFF	; 255
    24dc:	76 01       	movw	r14, r12
    24de:	20 e0       	ldi	r18, 0x00	; 0
    24e0:	30 e0       	ldi	r19, 0x00	; 0
    24e2:	c5 01       	movw	r24, r10
    24e4:	7d dd       	rcall	.-1286   	; 0x1fe0 <EccPoint_mult>
    24e6:	f6 01       	movw	r30, r12
    24e8:	60 81       	ld	r22, Z
    24ea:	66 0f       	add	r22, r22
    24ec:	c5 01       	movw	r24, r10
    24ee:	0e 94 f1 06 	call	0xde2	; 0xde2 <uECC_vli_isZero>
    24f2:	91 e0       	ldi	r25, 0x01	; 1
    24f4:	81 11       	cpse	r24, r1
    24f6:	90 e0       	ldi	r25, 0x00	; 0
    24f8:	89 2f       	mov	r24, r25
    24fa:	cc 5b       	subi	r28, 0xBC	; 188
    24fc:	df 4f       	sbci	r29, 0xFF	; 255
    24fe:	0f b6       	in	r0, 0x3f	; 63
    2500:	f8 94       	cli
    2502:	de bf       	out	0x3e, r29	; 62
    2504:	0f be       	out	0x3f, r0	; 63
    2506:	cd bf       	out	0x3d, r28	; 61
    2508:	df 91       	pop	r29
    250a:	cf 91       	pop	r28
    250c:	1f 91       	pop	r17
    250e:	0f 91       	pop	r16
    2510:	ff 90       	pop	r15
    2512:	ef 90       	pop	r14
    2514:	df 90       	pop	r13
    2516:	cf 90       	pop	r12
    2518:	bf 90       	pop	r11
    251a:	af 90       	pop	r10
    251c:	08 95       	ret

0000251e <uECC_vli_nativeToBytes>:
    251e:	cf 93       	push	r28
    2520:	df 93       	push	r29
    2522:	dc 01       	movw	r26, r24
    2524:	16 16       	cp	r1, r22
    2526:	17 06       	cpc	r1, r23
    2528:	cc f4       	brge	.+50     	; 0x255c <uECC_vli_nativeToBytes+0x3e>
    252a:	20 e0       	ldi	r18, 0x00	; 0
    252c:	30 e0       	ldi	r19, 0x00	; 0
    252e:	90 e0       	ldi	r25, 0x00	; 0
    2530:	eb 01       	movw	r28, r22
    2532:	21 97       	sbiw	r28, 0x01	; 1
    2534:	fe 01       	movw	r30, r28
    2536:	e2 1b       	sub	r30, r18
    2538:	f3 0b       	sbc	r31, r19
    253a:	e4 0f       	add	r30, r20
    253c:	f5 1f       	adc	r31, r21
    253e:	20 81       	ld	r18, Z
    2540:	fd 01       	movw	r30, r26
    2542:	e9 0f       	add	r30, r25
    2544:	f1 1d       	adc	r31, r1
    2546:	97 fd       	sbrc	r25, 7
    2548:	fa 95       	dec	r31
    254a:	20 83       	st	Z, r18
    254c:	9f 5f       	subi	r25, 0xFF	; 255
    254e:	29 2f       	mov	r18, r25
    2550:	09 2e       	mov	r0, r25
    2552:	00 0c       	add	r0, r0
    2554:	33 0b       	sbc	r19, r19
    2556:	26 17       	cp	r18, r22
    2558:	37 07       	cpc	r19, r23
    255a:	64 f3       	brlt	.-40     	; 0x2534 <uECC_vli_nativeToBytes+0x16>
    255c:	df 91       	pop	r29
    255e:	cf 91       	pop	r28
    2560:	08 95       	ret

00002562 <uECC_generate_random_int>:
    2562:	9f 92       	push	r9
    2564:	af 92       	push	r10
    2566:	bf 92       	push	r11
    2568:	cf 92       	push	r12
    256a:	df 92       	push	r13
    256c:	ef 92       	push	r14
    256e:	ff 92       	push	r15
    2570:	0f 93       	push	r16
    2572:	1f 93       	push	r17
    2574:	cf 93       	push	r28
    2576:	df 93       	push	r29
    2578:	8c 01       	movw	r16, r24
    257a:	5b 01       	movw	r10, r22
    257c:	d4 2f       	mov	r29, r20
    257e:	64 2f       	mov	r22, r20
    2580:	c5 01       	movw	r24, r10
    2582:	0e 94 1d 07 	call	0xe3a	; 0xe3a <uECC_vli_numBits>
    2586:	20 91 54 05 	lds	r18, 0x0554	; 0x800554 <__data_end>
    258a:	30 91 55 05 	lds	r19, 0x0555	; 0x800555 <__data_end+0x1>
    258e:	23 2b       	or	r18, r19
    2590:	c1 f1       	breq	.+112    	; 0x2602 <uECC_generate_random_int+0xa0>
    2592:	48 e0       	ldi	r20, 0x08	; 8
    2594:	d4 02       	muls	r29, r20
    2596:	90 01       	movw	r18, r0
    2598:	11 24       	eor	r1, r1
    259a:	28 1b       	sub	r18, r24
    259c:	39 0b       	sbc	r19, r25
    259e:	8f ef       	ldi	r24, 0xFF	; 255
    25a0:	90 e0       	ldi	r25, 0x00	; 0
    25a2:	02 c0       	rjmp	.+4      	; 0x25a8 <uECC_generate_random_int+0x46>
    25a4:	95 95       	asr	r25
    25a6:	87 95       	ror	r24
    25a8:	2a 95       	dec	r18
    25aa:	e2 f7       	brpl	.-8      	; 0x25a4 <uECC_generate_random_int+0x42>
    25ac:	98 2e       	mov	r9, r24
    25ae:	c0 e4       	ldi	r28, 0x40	; 64
    25b0:	cd 2e       	mov	r12, r29
    25b2:	0d 2e       	mov	r0, r29
    25b4:	00 0c       	add	r0, r0
    25b6:	dd 08       	sbc	r13, r13
    25b8:	76 01       	movw	r14, r12
    25ba:	81 e0       	ldi	r24, 0x01	; 1
    25bc:	e8 1a       	sub	r14, r24
    25be:	f1 08       	sbc	r15, r1
    25c0:	e0 0e       	add	r14, r16
    25c2:	f1 1e       	adc	r15, r17
    25c4:	e0 91 54 05 	lds	r30, 0x0554	; 0x800554 <__data_end>
    25c8:	f0 91 55 05 	lds	r31, 0x0555	; 0x800555 <__data_end+0x1>
    25cc:	b6 01       	movw	r22, r12
    25ce:	c8 01       	movw	r24, r16
    25d0:	09 95       	icall
    25d2:	00 97       	sbiw	r24, 0x00	; 0
    25d4:	d9 f0       	breq	.+54     	; 0x260c <uECC_generate_random_int+0xaa>
    25d6:	f7 01       	movw	r30, r14
    25d8:	80 81       	ld	r24, Z
    25da:	89 21       	and	r24, r9
    25dc:	80 83       	st	Z, r24
    25de:	6d 2f       	mov	r22, r29
    25e0:	c8 01       	movw	r24, r16
    25e2:	0e 94 f1 06 	call	0xde2	; 0xde2 <uECC_vli_isZero>
    25e6:	81 11       	cpse	r24, r1
    25e8:	07 c0       	rjmp	.+14     	; 0x25f8 <uECC_generate_random_int+0x96>
    25ea:	4d 2f       	mov	r20, r29
    25ec:	b8 01       	movw	r22, r16
    25ee:	c5 01       	movw	r24, r10
    25f0:	0e 94 86 07 	call	0xf0c	; 0xf0c <uECC_vli_cmp>
    25f4:	81 30       	cpi	r24, 0x01	; 1
    25f6:	41 f0       	breq	.+16     	; 0x2608 <uECC_generate_random_int+0xa6>
    25f8:	c1 50       	subi	r28, 0x01	; 1
    25fa:	21 f7       	brne	.-56     	; 0x25c4 <uECC_generate_random_int+0x62>
    25fc:	80 e0       	ldi	r24, 0x00	; 0
    25fe:	90 e0       	ldi	r25, 0x00	; 0
    2600:	05 c0       	rjmp	.+10     	; 0x260c <uECC_generate_random_int+0xaa>
    2602:	80 e0       	ldi	r24, 0x00	; 0
    2604:	90 e0       	ldi	r25, 0x00	; 0
    2606:	02 c0       	rjmp	.+4      	; 0x260c <uECC_generate_random_int+0xaa>
    2608:	81 e0       	ldi	r24, 0x01	; 1
    260a:	90 e0       	ldi	r25, 0x00	; 0
    260c:	df 91       	pop	r29
    260e:	cf 91       	pop	r28
    2610:	1f 91       	pop	r17
    2612:	0f 91       	pop	r16
    2614:	ff 90       	pop	r15
    2616:	ef 90       	pop	r14
    2618:	df 90       	pop	r13
    261a:	cf 90       	pop	r12
    261c:	bf 90       	pop	r11
    261e:	af 90       	pop	r10
    2620:	9f 90       	pop	r9
    2622:	08 95       	ret

00002624 <bits2int>:
    2624:	8f 92       	push	r8
    2626:	9f 92       	push	r9
    2628:	af 92       	push	r10
    262a:	bf 92       	push	r11
    262c:	cf 92       	push	r12
    262e:	df 92       	push	r13
    2630:	ef 92       	push	r14
    2632:	ff 92       	push	r15
    2634:	0f 93       	push	r16
    2636:	1f 93       	push	r17
    2638:	cf 93       	push	r28
    263a:	df 93       	push	r29
    263c:	8c 01       	movw	r16, r24
    263e:	4b 01       	movw	r8, r22
    2640:	79 01       	movw	r14, r18
    2642:	f9 01       	movw	r30, r18
    2644:	82 81       	ldd	r24, Z+2	; 0x02
    2646:	93 81       	ldd	r25, Z+3	; 0x03
    2648:	07 96       	adiw	r24, 0x07	; 7
    264a:	ec 01       	movw	r28, r24
    264c:	0a f4       	brpl	.+2      	; 0x2650 <bits2int+0x2c>
    264e:	27 96       	adiw	r28, 0x07	; 7
    2650:	d5 95       	asr	r29
    2652:	c7 95       	ror	r28
    2654:	d5 95       	asr	r29
    2656:	c7 95       	ror	r28
    2658:	d5 95       	asr	r29
    265a:	c7 95       	ror	r28
    265c:	cc 2e       	mov	r12, r28
    265e:	dd 2e       	mov	r13, r29
    2660:	56 01       	movw	r10, r12
    2662:	4c 15       	cp	r20, r12
    2664:	5d 05       	cpc	r21, r13
    2666:	08 f4       	brcc	.+2      	; 0x266a <bits2int+0x46>
    2668:	5a 01       	movw	r10, r20
    266a:	6c 2f       	mov	r22, r28
    266c:	c8 01       	movw	r24, r16
    266e:	0e 94 2d 04 	call	0x85a	; 0x85a <uECC_vli_clear>
    2672:	a4 01       	movw	r20, r8
    2674:	b5 01       	movw	r22, r10
    2676:	c8 01       	movw	r24, r16
    2678:	52 df       	rcall	.-348    	; 0x251e <uECC_vli_nativeToBytes>
    267a:	aa 0c       	add	r10, r10
    267c:	bb 1c       	adc	r11, r11
    267e:	aa 0c       	add	r10, r10
    2680:	bb 1c       	adc	r11, r11
    2682:	aa 0c       	add	r10, r10
    2684:	bb 1c       	adc	r11, r11
    2686:	f7 01       	movw	r30, r14
    2688:	82 81       	ldd	r24, Z+2	; 0x02
    268a:	93 81       	ldd	r25, Z+3	; 0x03
    268c:	8a 15       	cp	r24, r10
    268e:	9b 05       	cpc	r25, r11
    2690:	a0 f5       	brcc	.+104    	; 0x26fa <bits2int+0xd6>
    2692:	b5 01       	movw	r22, r10
    2694:	68 1b       	sub	r22, r24
    2696:	79 0b       	sbc	r23, r25
    2698:	f8 01       	movw	r30, r16
    269a:	ec 0d       	add	r30, r12
    269c:	fd 1d       	adc	r31, r13
    269e:	0e 17       	cp	r16, r30
    26a0:	1f 07       	cpc	r17, r31
    26a2:	d8 f4       	brcc	.+54     	; 0x26da <bits2int+0xb6>
    26a4:	d8 01       	movw	r26, r16
    26a6:	d1 2c       	mov	r13, r1
    26a8:	48 e0       	ldi	r20, 0x08	; 8
    26aa:	50 e0       	ldi	r21, 0x00	; 0
    26ac:	46 1b       	sub	r20, r22
    26ae:	57 0b       	sbc	r21, r23
    26b0:	92 91       	ld	r25, -Z
    26b2:	29 2f       	mov	r18, r25
    26b4:	30 e0       	ldi	r19, 0x00	; 0
    26b6:	c9 01       	movw	r24, r18
    26b8:	06 2e       	mov	r0, r22
    26ba:	02 c0       	rjmp	.+4      	; 0x26c0 <bits2int+0x9c>
    26bc:	95 95       	asr	r25
    26be:	87 95       	ror	r24
    26c0:	0a 94       	dec	r0
    26c2:	e2 f7       	brpl	.-8      	; 0x26bc <bits2int+0x98>
    26c4:	8d 29       	or	r24, r13
    26c6:	80 83       	st	Z, r24
    26c8:	04 2e       	mov	r0, r20
    26ca:	01 c0       	rjmp	.+2      	; 0x26ce <bits2int+0xaa>
    26cc:	22 0f       	add	r18, r18
    26ce:	0a 94       	dec	r0
    26d0:	ea f7       	brpl	.-6      	; 0x26cc <bits2int+0xa8>
    26d2:	d2 2e       	mov	r13, r18
    26d4:	ae 17       	cp	r26, r30
    26d6:	bf 07       	cpc	r27, r31
    26d8:	59 f7       	brne	.-42     	; 0x26b0 <bits2int+0x8c>
    26da:	f4 e2       	ldi	r31, 0x24	; 36
    26dc:	ef 0e       	add	r14, r31
    26de:	f1 1c       	adc	r15, r1
    26e0:	4c 2f       	mov	r20, r28
    26e2:	b8 01       	movw	r22, r16
    26e4:	c7 01       	movw	r24, r14
    26e6:	0e 94 54 07 	call	0xea8	; 0xea8 <uECC_vli_cmp_unsafe>
    26ea:	81 30       	cpi	r24, 0x01	; 1
    26ec:	31 f0       	breq	.+12     	; 0x26fa <bits2int+0xd6>
    26ee:	2c 2f       	mov	r18, r28
    26f0:	a7 01       	movw	r20, r14
    26f2:	b8 01       	movw	r22, r16
    26f4:	c8 01       	movw	r24, r16
    26f6:	0e 94 e4 05 	call	0xbc8	; 0xbc8 <uECC_vli_sub>
    26fa:	df 91       	pop	r29
    26fc:	cf 91       	pop	r28
    26fe:	1f 91       	pop	r17
    2700:	0f 91       	pop	r16
    2702:	ff 90       	pop	r15
    2704:	ef 90       	pop	r14
    2706:	df 90       	pop	r13
    2708:	cf 90       	pop	r12
    270a:	bf 90       	pop	r11
    270c:	af 90       	pop	r10
    270e:	9f 90       	pop	r9
    2710:	8f 90       	pop	r8
    2712:	08 95       	ret

00002714 <uECC_set_rng>:
    2714:	90 93 55 05 	sts	0x0555, r25	; 0x800555 <__data_end+0x1>
    2718:	80 93 54 05 	sts	0x0554, r24	; 0x800554 <__data_end>
    271c:	08 95       	ret

0000271e <uECC_secp256r1>:
    271e:	8a e0       	ldi	r24, 0x0A	; 10
    2720:	91 e0       	ldi	r25, 0x01	; 1
    2722:	08 95       	ret

00002724 <uECC_make_key>:
    2724:	9f 92       	push	r9
    2726:	af 92       	push	r10
    2728:	bf 92       	push	r11
    272a:	cf 92       	push	r12
    272c:	df 92       	push	r13
    272e:	ef 92       	push	r14
    2730:	ff 92       	push	r15
    2732:	0f 93       	push	r16
    2734:	1f 93       	push	r17
    2736:	cf 93       	push	r28
    2738:	df 93       	push	r29
    273a:	cd b7       	in	r28, 0x3d	; 61
    273c:	de b7       	in	r29, 0x3e	; 62
    273e:	c0 56       	subi	r28, 0x60	; 96
    2740:	d1 09       	sbc	r29, r1
    2742:	0f b6       	in	r0, 0x3f	; 63
    2744:	f8 94       	cli
    2746:	de bf       	out	0x3e, r29	; 62
    2748:	0f be       	out	0x3f, r0	; 63
    274a:	cd bf       	out	0x3d, r28	; 61
    274c:	6c 01       	movw	r12, r24
    274e:	5b 01       	movw	r10, r22
    2750:	8a 01       	movw	r16, r20
    2752:	68 94       	set
    2754:	99 24       	eor	r9, r9
    2756:	96 f8       	bld	r9, 6
    2758:	7a 01       	movw	r14, r20
    275a:	84 e2       	ldi	r24, 0x24	; 36
    275c:	e8 0e       	add	r14, r24
    275e:	f1 1c       	adc	r15, r1
    2760:	f8 01       	movw	r30, r16
    2762:	82 81       	ldd	r24, Z+2	; 0x02
    2764:	93 81       	ldd	r25, Z+3	; 0x03
    2766:	07 96       	adiw	r24, 0x07	; 7
    2768:	ac 01       	movw	r20, r24
    276a:	12 f4       	brpl	.+4      	; 0x2770 <uECC_make_key+0x4c>
    276c:	49 5f       	subi	r20, 0xF9	; 249
    276e:	5f 4f       	sbci	r21, 0xFF	; 255
    2770:	55 95       	asr	r21
    2772:	47 95       	ror	r20
    2774:	55 95       	asr	r21
    2776:	47 95       	ror	r20
    2778:	55 95       	asr	r21
    277a:	47 95       	ror	r20
    277c:	b7 01       	movw	r22, r14
    277e:	ce 01       	movw	r24, r28
    2780:	01 96       	adiw	r24, 0x01	; 1
    2782:	ef de       	rcall	.-546    	; 0x2562 <uECC_generate_random_int>
    2784:	00 97       	sbiw	r24, 0x00	; 0
    2786:	09 f4       	brne	.+2      	; 0x278a <uECC_make_key+0x66>
    2788:	40 c0       	rjmp	.+128    	; 0x280a <uECC_make_key+0xe6>
    278a:	a8 01       	movw	r20, r16
    278c:	be 01       	movw	r22, r28
    278e:	6f 5f       	subi	r22, 0xFF	; 255
    2790:	7f 4f       	sbci	r23, 0xFF	; 255
    2792:	ce 01       	movw	r24, r28
    2794:	81 96       	adiw	r24, 0x21	; 33
    2796:	66 de       	rcall	.-820    	; 0x2464 <EccPoint_compute_public_key>
    2798:	88 23       	and	r24, r24
    279a:	91 f1       	breq	.+100    	; 0x2800 <uECC_make_key+0xdc>
    279c:	f8 01       	movw	r30, r16
    279e:	82 81       	ldd	r24, Z+2	; 0x02
    27a0:	93 81       	ldd	r25, Z+3	; 0x03
    27a2:	07 96       	adiw	r24, 0x07	; 7
    27a4:	bc 01       	movw	r22, r24
    27a6:	12 f4       	brpl	.+4      	; 0x27ac <uECC_make_key+0x88>
    27a8:	69 5f       	subi	r22, 0xF9	; 249
    27aa:	7f 4f       	sbci	r23, 0xFF	; 255
    27ac:	75 95       	asr	r23
    27ae:	67 95       	ror	r22
    27b0:	75 95       	asr	r23
    27b2:	67 95       	ror	r22
    27b4:	75 95       	asr	r23
    27b6:	67 95       	ror	r22
    27b8:	ae 01       	movw	r20, r28
    27ba:	4f 5f       	subi	r20, 0xFF	; 255
    27bc:	5f 4f       	sbci	r21, 0xFF	; 255
    27be:	c5 01       	movw	r24, r10
    27c0:	ae de       	rcall	.-676    	; 0x251e <uECC_vli_nativeToBytes>
    27c2:	f8 01       	movw	r30, r16
    27c4:	61 81       	ldd	r22, Z+1	; 0x01
    27c6:	06 2e       	mov	r0, r22
    27c8:	00 0c       	add	r0, r0
    27ca:	77 0b       	sbc	r23, r23
    27cc:	ae 01       	movw	r20, r28
    27ce:	4f 5d       	subi	r20, 0xDF	; 223
    27d0:	5f 4f       	sbci	r21, 0xFF	; 255
    27d2:	c6 01       	movw	r24, r12
    27d4:	a4 de       	rcall	.-696    	; 0x251e <uECC_vli_nativeToBytes>
    27d6:	f8 01       	movw	r30, r16
    27d8:	81 81       	ldd	r24, Z+1	; 0x01
    27da:	90 81       	ld	r25, Z
    27dc:	41 e2       	ldi	r20, 0x21	; 33
    27de:	50 e0       	ldi	r21, 0x00	; 0
    27e0:	4c 0f       	add	r20, r28
    27e2:	5d 1f       	adc	r21, r29
    27e4:	49 0f       	add	r20, r25
    27e6:	51 1d       	adc	r21, r1
    27e8:	97 fd       	sbrc	r25, 7
    27ea:	5a 95       	dec	r21
    27ec:	08 2e       	mov	r0, r24
    27ee:	00 0c       	add	r0, r0
    27f0:	99 0b       	sbc	r25, r25
    27f2:	bc 01       	movw	r22, r24
    27f4:	8c 0d       	add	r24, r12
    27f6:	9d 1d       	adc	r25, r13
    27f8:	92 de       	rcall	.-732    	; 0x251e <uECC_vli_nativeToBytes>
    27fa:	81 e0       	ldi	r24, 0x01	; 1
    27fc:	90 e0       	ldi	r25, 0x00	; 0
    27fe:	05 c0       	rjmp	.+10     	; 0x280a <uECC_make_key+0xe6>
    2800:	9a 94       	dec	r9
    2802:	91 10       	cpse	r9, r1
    2804:	ad cf       	rjmp	.-166    	; 0x2760 <uECC_make_key+0x3c>
    2806:	80 e0       	ldi	r24, 0x00	; 0
    2808:	90 e0       	ldi	r25, 0x00	; 0
    280a:	c0 5a       	subi	r28, 0xA0	; 160
    280c:	df 4f       	sbci	r29, 0xFF	; 255
    280e:	0f b6       	in	r0, 0x3f	; 63
    2810:	f8 94       	cli
    2812:	de bf       	out	0x3e, r29	; 62
    2814:	0f be       	out	0x3f, r0	; 63
    2816:	cd bf       	out	0x3d, r28	; 61
    2818:	df 91       	pop	r29
    281a:	cf 91       	pop	r28
    281c:	1f 91       	pop	r17
    281e:	0f 91       	pop	r16
    2820:	ff 90       	pop	r15
    2822:	ef 90       	pop	r14
    2824:	df 90       	pop	r13
    2826:	cf 90       	pop	r12
    2828:	bf 90       	pop	r11
    282a:	af 90       	pop	r10
    282c:	9f 90       	pop	r9
    282e:	08 95       	ret

00002830 <uECC_shared_secret>:
    2830:	6f 92       	push	r6
    2832:	7f 92       	push	r7
    2834:	8f 92       	push	r8
    2836:	9f 92       	push	r9
    2838:	af 92       	push	r10
    283a:	bf 92       	push	r11
    283c:	cf 92       	push	r12
    283e:	df 92       	push	r13
    2840:	ef 92       	push	r14
    2842:	ff 92       	push	r15
    2844:	0f 93       	push	r16
    2846:	1f 93       	push	r17
    2848:	cf 93       	push	r28
    284a:	df 93       	push	r29
    284c:	cd b7       	in	r28, 0x3d	; 61
    284e:	de b7       	in	r29, 0x3e	; 62
    2850:	c4 58       	subi	r28, 0x84	; 132
    2852:	d1 09       	sbc	r29, r1
    2854:	0f b6       	in	r0, 0x3f	; 63
    2856:	f8 94       	cli
    2858:	de bf       	out	0x3e, r29	; 62
    285a:	0f be       	out	0x3f, r0	; 63
    285c:	cd bf       	out	0x3d, r28	; 61
    285e:	8c 01       	movw	r16, r24
    2860:	4a 01       	movw	r8, r20
    2862:	69 01       	movw	r12, r18
    2864:	ce 01       	movw	r24, r28
    2866:	8f 5b       	subi	r24, 0xBF	; 191
    2868:	9f 4f       	sbci	r25, 0xFF	; 255
    286a:	cf 57       	subi	r28, 0x7F	; 127
    286c:	df 4f       	sbci	r29, 0xFF	; 255
    286e:	99 83       	std	Y+1, r25	; 0x01
    2870:	88 83       	st	Y, r24
    2872:	c1 58       	subi	r28, 0x81	; 129
    2874:	d0 40       	sbci	r29, 0x00	; 0
    2876:	80 96       	adiw	r24, 0x20	; 32
    2878:	cd 57       	subi	r28, 0x7D	; 125
    287a:	df 4f       	sbci	r29, 0xFF	; 255
    287c:	99 83       	std	Y+1, r25	; 0x01
    287e:	88 83       	st	Y, r24
    2880:	c3 58       	subi	r28, 0x83	; 131
    2882:	d0 40       	sbci	r29, 0x00	; 0
    2884:	f9 01       	movw	r30, r18
    2886:	f0 80       	ld	r15, Z
    2888:	a1 80       	ldd	r10, Z+1	; 0x01
    288a:	22 81       	ldd	r18, Z+2	; 0x02
    288c:	33 81       	ldd	r19, Z+3	; 0x03
    288e:	29 5f       	subi	r18, 0xF9	; 249
    2890:	3f 4f       	sbci	r19, 0xFF	; 255
    2892:	c9 01       	movw	r24, r18
    2894:	99 23       	and	r25, r25
    2896:	0c f4       	brge	.+2      	; 0x289a <uECC_shared_secret+0x6a>
    2898:	07 96       	adiw	r24, 0x07	; 7
    289a:	95 95       	asr	r25
    289c:	87 95       	ror	r24
    289e:	95 95       	asr	r25
    28a0:	87 95       	ror	r24
    28a2:	95 95       	asr	r25
    28a4:	87 95       	ror	r24
    28a6:	ab 01       	movw	r20, r22
    28a8:	bc 01       	movw	r22, r24
    28aa:	ce 01       	movw	r24, r28
    28ac:	8f 5b       	subi	r24, 0xBF	; 191
    28ae:	9f 4f       	sbci	r25, 0xFF	; 255
    28b0:	36 de       	rcall	.-916    	; 0x251e <uECC_vli_nativeToBytes>
    28b2:	0a 2c       	mov	r0, r10
    28b4:	00 0c       	add	r0, r0
    28b6:	bb 08       	sbc	r11, r11
    28b8:	a8 01       	movw	r20, r16
    28ba:	b5 01       	movw	r22, r10
    28bc:	ce 01       	movw	r24, r28
    28be:	01 96       	adiw	r24, 0x01	; 1
    28c0:	2e de       	rcall	.-932    	; 0x251e <uECC_vli_nativeToBytes>
    28c2:	a8 01       	movw	r20, r16
    28c4:	4a 0d       	add	r20, r10
    28c6:	5b 1d       	adc	r21, r11
    28c8:	b5 01       	movw	r22, r10
    28ca:	81 e0       	ldi	r24, 0x01	; 1
    28cc:	90 e0       	ldi	r25, 0x00	; 0
    28ce:	8c 0f       	add	r24, r28
    28d0:	9d 1f       	adc	r25, r29
    28d2:	8f 0d       	add	r24, r15
    28d4:	91 1d       	adc	r25, r1
    28d6:	f7 fc       	sbrc	r15, 7
    28d8:	9a 95       	dec	r25
    28da:	21 de       	rcall	.-958    	; 0x251e <uECC_vli_nativeToBytes>
    28dc:	96 01       	movw	r18, r12
    28de:	ae 01       	movw	r20, r28
    28e0:	4f 59       	subi	r20, 0x9F	; 159
    28e2:	5f 4f       	sbci	r21, 0xFF	; 255
    28e4:	be 01       	movw	r22, r28
    28e6:	6f 5b       	subi	r22, 0xBF	; 191
    28e8:	7f 4f       	sbci	r23, 0xFF	; 255
    28ea:	cb 01       	movw	r24, r22
    28ec:	6d dd       	rcall	.-1318   	; 0x23c8 <regularize_k>
    28ee:	18 2f       	mov	r17, r24
    28f0:	80 91 54 05 	lds	r24, 0x0554	; 0x800554 <__data_end>
    28f4:	90 91 55 05 	lds	r25, 0x0555	; 0x800555 <__data_end+0x1>
    28f8:	89 2b       	or	r24, r25
    28fa:	a9 f0       	breq	.+42     	; 0x2926 <uECC_shared_secret+0xf6>
    28fc:	e1 2f       	mov	r30, r17
    28fe:	f0 e0       	ldi	r31, 0x00	; 0
    2900:	ee 0f       	add	r30, r30
    2902:	ff 1f       	adc	r31, r31
    2904:	81 e8       	ldi	r24, 0x81	; 129
    2906:	90 e0       	ldi	r25, 0x00	; 0
    2908:	8c 0f       	add	r24, r28
    290a:	9d 1f       	adc	r25, r29
    290c:	e8 0f       	add	r30, r24
    290e:	f9 1f       	adc	r31, r25
    2910:	60 80       	ld	r6, Z
    2912:	71 80       	ldd	r7, Z+1	; 0x01
    2914:	4f 2d       	mov	r20, r15
    2916:	b6 01       	movw	r22, r12
    2918:	6c 5f       	subi	r22, 0xFC	; 252
    291a:	7f 4f       	sbci	r23, 0xFF	; 255
    291c:	c3 01       	movw	r24, r6
    291e:	21 de       	rcall	.-958    	; 0x2562 <uECC_generate_random_int>
    2920:	00 97       	sbiw	r24, 0x00	; 0
    2922:	19 f4       	brne	.+6      	; 0x292a <uECC_shared_secret+0xfa>
    2924:	32 c0       	rjmp	.+100    	; 0x298a <uECC_shared_secret+0x15a>
    2926:	61 2c       	mov	r6, r1
    2928:	71 2c       	mov	r7, r1
    292a:	f6 01       	movw	r30, r12
    292c:	22 81       	ldd	r18, Z+2	; 0x02
    292e:	33 81       	ldd	r19, Z+3	; 0x03
    2930:	2f 5f       	subi	r18, 0xFF	; 255
    2932:	3f 4f       	sbci	r19, 0xFF	; 255
    2934:	81 e0       	ldi	r24, 0x01	; 1
    2936:	90 e0       	ldi	r25, 0x00	; 0
    2938:	11 23       	and	r17, r17
    293a:	11 f0       	breq	.+4      	; 0x2940 <uECC_shared_secret+0x110>
    293c:	80 e0       	ldi	r24, 0x00	; 0
    293e:	90 e0       	ldi	r25, 0x00	; 0
    2940:	88 0f       	add	r24, r24
    2942:	99 1f       	adc	r25, r25
    2944:	e1 e8       	ldi	r30, 0x81	; 129
    2946:	f0 e0       	ldi	r31, 0x00	; 0
    2948:	ec 0f       	add	r30, r28
    294a:	fd 1f       	adc	r31, r29
    294c:	e8 0f       	add	r30, r24
    294e:	f9 1f       	adc	r31, r25
    2950:	40 81       	ld	r20, Z
    2952:	51 81       	ldd	r21, Z+1	; 0x01
    2954:	76 01       	movw	r14, r12
    2956:	89 01       	movw	r16, r18
    2958:	93 01       	movw	r18, r6
    295a:	be 01       	movw	r22, r28
    295c:	6f 5f       	subi	r22, 0xFF	; 255
    295e:	7f 4f       	sbci	r23, 0xFF	; 255
    2960:	cb 01       	movw	r24, r22
    2962:	3e db       	rcall	.-2436   	; 0x1fe0 <EccPoint_mult>
    2964:	ae 01       	movw	r20, r28
    2966:	4f 5f       	subi	r20, 0xFF	; 255
    2968:	5f 4f       	sbci	r21, 0xFF	; 255
    296a:	b5 01       	movw	r22, r10
    296c:	c4 01       	movw	r24, r8
    296e:	d7 dd       	rcall	.-1106   	; 0x251e <uECC_vli_nativeToBytes>
    2970:	f6 01       	movw	r30, r12
    2972:	60 81       	ld	r22, Z
    2974:	66 0f       	add	r22, r22
    2976:	ce 01       	movw	r24, r28
    2978:	01 96       	adiw	r24, 0x01	; 1
    297a:	0e 94 f1 06 	call	0xde2	; 0xde2 <uECC_vli_isZero>
    297e:	31 e0       	ldi	r19, 0x01	; 1
    2980:	20 e0       	ldi	r18, 0x00	; 0
    2982:	81 11       	cpse	r24, r1
    2984:	30 e0       	ldi	r19, 0x00	; 0
    2986:	83 2f       	mov	r24, r19
    2988:	92 2f       	mov	r25, r18
    298a:	cc 57       	subi	r28, 0x7C	; 124
    298c:	df 4f       	sbci	r29, 0xFF	; 255
    298e:	0f b6       	in	r0, 0x3f	; 63
    2990:	f8 94       	cli
    2992:	de bf       	out	0x3e, r29	; 62
    2994:	0f be       	out	0x3f, r0	; 63
    2996:	cd bf       	out	0x3d, r28	; 61
    2998:	df 91       	pop	r29
    299a:	cf 91       	pop	r28
    299c:	1f 91       	pop	r17
    299e:	0f 91       	pop	r16
    29a0:	ff 90       	pop	r15
    29a2:	ef 90       	pop	r14
    29a4:	df 90       	pop	r13
    29a6:	cf 90       	pop	r12
    29a8:	bf 90       	pop	r11
    29aa:	af 90       	pop	r10
    29ac:	9f 90       	pop	r9
    29ae:	8f 90       	pop	r8
    29b0:	7f 90       	pop	r7
    29b2:	6f 90       	pop	r6
    29b4:	08 95       	ret

000029b6 <uECC_verify>:

int uECC_verify(const uint8_t *public_key,
                const uint8_t *message_hash,
                unsigned hash_size,
                const uint8_t *signature,
                uECC_Curve curve) {
    29b6:	2f 92       	push	r2
    29b8:	3f 92       	push	r3
    29ba:	4f 92       	push	r4
    29bc:	5f 92       	push	r5
    29be:	6f 92       	push	r6
    29c0:	7f 92       	push	r7
    29c2:	8f 92       	push	r8
    29c4:	9f 92       	push	r9
    29c6:	af 92       	push	r10
    29c8:	bf 92       	push	r11
    29ca:	cf 92       	push	r12
    29cc:	df 92       	push	r13
    29ce:	ef 92       	push	r14
    29d0:	ff 92       	push	r15
    29d2:	0f 93       	push	r16
    29d4:	1f 93       	push	r17
    29d6:	cf 93       	push	r28
    29d8:	df 93       	push	r29
    29da:	cd b7       	in	r28, 0x3d	; 61
    29dc:	de b7       	in	r29, 0x3e	; 62
    29de:	cc 5c       	subi	r28, 0xCC	; 204
    29e0:	d1 40       	sbci	r29, 0x01	; 1
    29e2:	0f b6       	in	r0, 0x3f	; 63
    29e4:	f8 94       	cli
    29e6:	de bf       	out	0x3e, r29	; 62
    29e8:	0f be       	out	0x3f, r0	; 63
    29ea:	cd bf       	out	0x3d, r28	; 61
    29ec:	4c 01       	movw	r8, r24
    29ee:	c7 53       	subi	r28, 0x37	; 55
    29f0:	de 4f       	sbci	r29, 0xFE	; 254
    29f2:	79 83       	std	Y+1, r23	; 0x01
    29f4:	68 83       	st	Y, r22
    29f6:	c9 5c       	subi	r28, 0xC9	; 201
    29f8:	d1 40       	sbci	r29, 0x01	; 1
    29fa:	c5 53       	subi	r28, 0x35	; 53
    29fc:	de 4f       	sbci	r29, 0xFE	; 254
    29fe:	59 83       	std	Y+1, r21	; 0x01
    2a00:	48 83       	st	Y, r20
    2a02:	cb 5c       	subi	r28, 0xCB	; 203
    2a04:	d1 40       	sbci	r29, 0x01	; 1
    2a06:	59 01       	movw	r10, r18
    2a08:	78 01       	movw	r14, r16
    uECC_word_t *_public = (uECC_word_t *)public_key;
#else
    uECC_word_t _public[uECC_MAX_WORDS * 2];
#endif    
    uECC_word_t r[uECC_MAX_WORDS], s[uECC_MAX_WORDS];
    wordcount_t num_words = curve->num_words;
    2a0a:	d8 01       	movw	r26, r16
    2a0c:	3c 90       	ld	r3, X
    wordcount_t num_n_words = BITS_TO_WORDS(curve->num_n_bits);
    2a0e:	12 96       	adiw	r26, 0x02	; 2
    2a10:	8d 91       	ld	r24, X+
    2a12:	9c 91       	ld	r25, X
    2a14:	13 97       	sbiw	r26, 0x03	; 3
    2a16:	07 96       	adiw	r24, 0x07	; 7
    2a18:	6c 01       	movw	r12, r24
    2a1a:	1a f4       	brpl	.+6      	; 0x2a22 <uECC_verify+0x6c>
    2a1c:	b7 e0       	ldi	r27, 0x07	; 7
    2a1e:	cb 0e       	add	r12, r27
    2a20:	d1 1c       	adc	r13, r1
    2a22:	d5 94       	asr	r13
    2a24:	c7 94       	ror	r12
    2a26:	d5 94       	asr	r13
    2a28:	c7 94       	ror	r12
    2a2a:	d5 94       	asr	r13
    2a2c:	c7 94       	ror	r12

    rx[num_n_words - 1] = 0;
    2a2e:	0c 2d       	mov	r16, r12
    2a30:	0c 2c       	mov	r0, r12
    2a32:	00 0c       	add	r0, r0
    2a34:	11 0b       	sbc	r17, r17
    2a36:	01 50       	subi	r16, 0x01	; 1
    2a38:	11 09       	sbc	r17, r1
    2a3a:	e1 ea       	ldi	r30, 0xA1	; 161
    2a3c:	f0 e0       	ldi	r31, 0x00	; 0
    2a3e:	ec 0f       	add	r30, r28
    2a40:	fd 1f       	adc	r31, r29
    2a42:	e0 0f       	add	r30, r16
    2a44:	f1 1f       	adc	r31, r17
    2a46:	10 82       	st	Z, r1
    r[num_n_words - 1] = 0;
    2a48:	e9 e8       	ldi	r30, 0x89	; 137
    2a4a:	f1 e0       	ldi	r31, 0x01	; 1
    2a4c:	ec 0f       	add	r30, r28
    2a4e:	fd 1f       	adc	r31, r29
    2a50:	e0 0f       	add	r30, r16
    2a52:	f1 1f       	adc	r31, r17
    2a54:	10 82       	st	Z, r1
    s[num_n_words - 1] = 0;
    2a56:	e9 ea       	ldi	r30, 0xA9	; 169
    2a58:	f1 e0       	ldi	r31, 0x01	; 1
    2a5a:	ec 0f       	add	r30, r28
    2a5c:	fd 1f       	adc	r31, r29
    2a5e:	e0 0f       	add	r30, r16
    2a60:	f1 1f       	adc	r31, r17
    2a62:	10 82       	st	Z, r1
}

uECC_VLI_API void uECC_vli_bytesToNative(uint8_t *native,
                                         const uint8_t *bytes,
                                         int num_bytes) {
    uECC_vli_nativeToBytes(native, num_bytes, bytes);
    2a64:	f7 01       	movw	r30, r14
    2a66:	61 81       	ldd	r22, Z+1	; 0x01
    2a68:	06 2e       	mov	r0, r22
    2a6a:	00 0c       	add	r0, r0
    2a6c:	77 0b       	sbc	r23, r23
    2a6e:	a4 01       	movw	r20, r8
    2a70:	ce 01       	movw	r24, r28
    2a72:	87 5b       	subi	r24, 0xB7	; 183
    2a74:	9e 4f       	sbci	r25, 0xFE	; 254
    2a76:	53 dd       	rcall	.-1370   	; 0x251e <uECC_vli_nativeToBytes>
    bcopy((uint8_t *) r, signature, curve->num_bytes);
    bcopy((uint8_t *) s, signature + curve->num_bytes, curve->num_bytes);
#else
    uECC_vli_bytesToNative(_public, public_key, curve->num_bytes);
    uECC_vli_bytesToNative(
        _public + num_words, public_key + curve->num_bytes, curve->num_bytes);
    2a78:	d7 01       	movw	r26, r14
    2a7a:	11 96       	adiw	r26, 0x01	; 1
    2a7c:	6c 91       	ld	r22, X
#if uECC_VLI_NATIVE_LITTLE_ENDIAN
    bcopy((uint8_t *) r, signature, curve->num_bytes);
    bcopy((uint8_t *) s, signature + curve->num_bytes, curve->num_bytes);
#else
    uECC_vli_bytesToNative(_public, public_key, curve->num_bytes);
    uECC_vli_bytesToNative(
    2a7e:	63 2c       	mov	r6, r3
    2a80:	03 2c       	mov	r0, r3
    2a82:	00 0c       	add	r0, r0
    2a84:	77 08       	sbc	r7, r7
    2a86:	0f 2e       	mov	r0, r31
    2a88:	f9 e4       	ldi	r31, 0x49	; 73
    2a8a:	4f 2e       	mov	r4, r31
    2a8c:	55 24       	eor	r5, r5
    2a8e:	53 94       	inc	r5
    2a90:	f0 2d       	mov	r31, r0
    2a92:	4c 0e       	add	r4, r28
    2a94:	5d 1e       	adc	r5, r29
    2a96:	46 0c       	add	r4, r6
    2a98:	57 1c       	adc	r5, r7
}

uECC_VLI_API void uECC_vli_bytesToNative(uint8_t *native,
                                         const uint8_t *bytes,
                                         int num_bytes) {
    uECC_vli_nativeToBytes(native, num_bytes, bytes);
    2a9a:	06 2e       	mov	r0, r22
    2a9c:	00 0c       	add	r0, r0
    2a9e:	77 0b       	sbc	r23, r23
    2aa0:	a4 01       	movw	r20, r8
    2aa2:	46 0f       	add	r20, r22
    2aa4:	57 1f       	adc	r21, r23
    2aa6:	c2 01       	movw	r24, r4
    2aa8:	3a dd       	rcall	.-1420   	; 0x251e <uECC_vli_nativeToBytes>
    2aaa:	f7 01       	movw	r30, r14
    2aac:	61 81       	ldd	r22, Z+1	; 0x01
    2aae:	06 2e       	mov	r0, r22
    2ab0:	00 0c       	add	r0, r0
    2ab2:	77 0b       	sbc	r23, r23
    2ab4:	a5 01       	movw	r20, r10
    2ab6:	ce 01       	movw	r24, r28
    2ab8:	87 57       	subi	r24, 0x77	; 119
    2aba:	9e 4f       	sbci	r25, 0xFE	; 254
    2abc:	30 dd       	rcall	.-1440   	; 0x251e <uECC_vli_nativeToBytes>
#else
    uECC_vli_bytesToNative(_public, public_key, curve->num_bytes);
    uECC_vli_bytesToNative(
        _public + num_words, public_key + curve->num_bytes, curve->num_bytes);
    uECC_vli_bytesToNative(r, signature, curve->num_bytes);
    uECC_vli_bytesToNative(s, signature + curve->num_bytes, curve->num_bytes);
    2abe:	d7 01       	movw	r26, r14
    2ac0:	11 96       	adiw	r26, 0x01	; 1
    2ac2:	6c 91       	ld	r22, X
}

uECC_VLI_API void uECC_vli_bytesToNative(uint8_t *native,
                                         const uint8_t *bytes,
                                         int num_bytes) {
    uECC_vli_nativeToBytes(native, num_bytes, bytes);
    2ac4:	06 2e       	mov	r0, r22
    2ac6:	00 0c       	add	r0, r0
    2ac8:	77 0b       	sbc	r23, r23
    2aca:	a5 01       	movw	r20, r10
    2acc:	46 0f       	add	r20, r22
    2ace:	57 1f       	adc	r21, r23
    2ad0:	ce 01       	movw	r24, r28
    2ad2:	87 55       	subi	r24, 0x57	; 87
    2ad4:	9e 4f       	sbci	r25, 0xFE	; 254
    2ad6:	23 dd       	rcall	.-1466   	; 0x251e <uECC_vli_nativeToBytes>
    uECC_vli_bytesToNative(r, signature, curve->num_bytes);
    uECC_vli_bytesToNative(s, signature + curve->num_bytes, curve->num_bytes);
#endif

    /* r, s must not be 0. */
    if (uECC_vli_isZero(r, num_words) || uECC_vli_isZero(s, num_words)) {
    2ad8:	63 2d       	mov	r22, r3
    2ada:	ce 01       	movw	r24, r28
    2adc:	87 57       	subi	r24, 0x77	; 119
    2ade:	9e 4f       	sbci	r25, 0xFE	; 254
    2ae0:	0e 94 f1 06 	call	0xde2	; 0xde2 <uECC_vli_isZero>
    2ae4:	81 11       	cpse	r24, r1
    2ae6:	02 c2       	rjmp	.+1028   	; 0x2eec <uECC_verify+0x536>
    2ae8:	63 2d       	mov	r22, r3
    2aea:	ce 01       	movw	r24, r28
    2aec:	87 55       	subi	r24, 0x57	; 87
    2aee:	9e 4f       	sbci	r25, 0xFE	; 254
    2af0:	0e 94 f1 06 	call	0xde2	; 0xde2 <uECC_vli_isZero>
    2af4:	81 11       	cpse	r24, r1
    2af6:	fd c1       	rjmp	.+1018   	; 0x2ef2 <uECC_verify+0x53c>
        return 0;
    }

    /* r, s must be < n. */
    if (uECC_vli_cmp_unsafe(curve->n, r, num_n_words) != 1 ||
    2af8:	47 01       	movw	r8, r14
    2afa:	b4 e2       	ldi	r27, 0x24	; 36
    2afc:	8b 0e       	add	r8, r27
    2afe:	91 1c       	adc	r9, r1
    2b00:	4c 2d       	mov	r20, r12
    2b02:	be 01       	movw	r22, r28
    2b04:	67 57       	subi	r22, 0x77	; 119
    2b06:	7e 4f       	sbci	r23, 0xFE	; 254
    2b08:	c4 01       	movw	r24, r8
    2b0a:	0e 94 54 07 	call	0xea8	; 0xea8 <uECC_vli_cmp_unsafe>
    2b0e:	81 30       	cpi	r24, 0x01	; 1
    2b10:	09 f0       	breq	.+2      	; 0x2b14 <uECC_verify+0x15e>
    2b12:	f2 c1       	rjmp	.+996    	; 0x2ef8 <uECC_verify+0x542>
            uECC_vli_cmp_unsafe(curve->n, s, num_n_words) != 1) {
    2b14:	4c 2d       	mov	r20, r12
    2b16:	be 01       	movw	r22, r28
    2b18:	67 55       	subi	r22, 0x57	; 87
    2b1a:	7e 4f       	sbci	r23, 0xFE	; 254
    2b1c:	c4 01       	movw	r24, r8
    2b1e:	0e 94 54 07 	call	0xea8	; 0xea8 <uECC_vli_cmp_unsafe>
    if (uECC_vli_isZero(r, num_words) || uECC_vli_isZero(s, num_words)) {
        return 0;
    }

    /* r, s must be < n. */
    if (uECC_vli_cmp_unsafe(curve->n, r, num_n_words) != 1 ||
    2b22:	81 30       	cpi	r24, 0x01	; 1
    2b24:	09 f0       	breq	.+2      	; 0x2b28 <uECC_verify+0x172>
    2b26:	eb c1       	rjmp	.+982    	; 0x2efe <uECC_verify+0x548>
            uECC_vli_cmp_unsafe(curve->n, s, num_n_words) != 1) {
        return 0;
    }

    /* Calculate u1 and u2. */
    uECC_vli_modInv(z, s, curve->n, num_n_words); /* z = 1/s */
    2b28:	2c 2d       	mov	r18, r12
    2b2a:	a4 01       	movw	r20, r8
    2b2c:	be 01       	movw	r22, r28
    2b2e:	67 55       	subi	r22, 0x57	; 87
    2b30:	7e 4f       	sbci	r23, 0xFE	; 254
    2b32:	ce 01       	movw	r24, r28
    2b34:	8f 5b       	subi	r24, 0xBF	; 191
    2b36:	9f 4f       	sbci	r25, 0xFF	; 255
    2b38:	0e 94 c4 09 	call	0x1388	; 0x1388 <uECC_vli_modInv>
    u1[num_n_words - 1] = 0;
    2b3c:	e1 e0       	ldi	r30, 0x01	; 1
    2b3e:	f0 e0       	ldi	r31, 0x00	; 0
    2b40:	ec 0f       	add	r30, r28
    2b42:	fd 1f       	adc	r31, r29
    2b44:	e0 0f       	add	r30, r16
    2b46:	f1 1f       	adc	r31, r17
    2b48:	10 82       	st	Z, r1
    bits2int(u1, message_hash, hash_size, curve);
    2b4a:	97 01       	movw	r18, r14
    2b4c:	c5 53       	subi	r28, 0x35	; 53
    2b4e:	de 4f       	sbci	r29, 0xFE	; 254
    2b50:	48 81       	ld	r20, Y
    2b52:	59 81       	ldd	r21, Y+1	; 0x01
    2b54:	cb 5c       	subi	r28, 0xCB	; 203
    2b56:	d1 40       	sbci	r29, 0x01	; 1
    2b58:	c7 53       	subi	r28, 0x37	; 55
    2b5a:	de 4f       	sbci	r29, 0xFE	; 254
    2b5c:	68 81       	ld	r22, Y
    2b5e:	79 81       	ldd	r23, Y+1	; 0x01
    2b60:	c9 5c       	subi	r28, 0xC9	; 201
    2b62:	d1 40       	sbci	r29, 0x01	; 1
    2b64:	ce 01       	movw	r24, r28
    2b66:	01 96       	adiw	r24, 0x01	; 1
    2b68:	5d dd       	rcall	.-1350   	; 0x2624 <bits2int>
    uECC_vli_modMult(u1, u1, z, curve->n, num_n_words); /* u1 = e/s */
    2b6a:	0c 2d       	mov	r16, r12
    2b6c:	94 01       	movw	r18, r8
    2b6e:	ae 01       	movw	r20, r28
    2b70:	4f 5b       	subi	r20, 0xBF	; 191
    2b72:	5f 4f       	sbci	r21, 0xFF	; 255
    2b74:	be 01       	movw	r22, r28
    2b76:	6f 5f       	subi	r22, 0xFF	; 255
    2b78:	7f 4f       	sbci	r23, 0xFF	; 255
    2b7a:	cb 01       	movw	r24, r22
    2b7c:	0e 94 e5 07 	call	0xfca	; 0xfca <uECC_vli_modMult>
    uECC_vli_modMult(u2, r, z, curve->n, num_n_words); /* u2 = r/s */
    2b80:	94 01       	movw	r18, r8
    2b82:	ae 01       	movw	r20, r28
    2b84:	4f 5b       	subi	r20, 0xBF	; 191
    2b86:	5f 4f       	sbci	r21, 0xFF	; 255
    2b88:	be 01       	movw	r22, r28
    2b8a:	67 57       	subi	r22, 0x77	; 119
    2b8c:	7e 4f       	sbci	r23, 0xFE	; 254
    2b8e:	ce 01       	movw	r24, r28
    2b90:	81 96       	adiw	r24, 0x21	; 33
    2b92:	0e 94 e5 07 	call	0xfca	; 0xfca <uECC_vli_modMult>

    /* Calculate sum = G + Q. */
    uECC_vli_set(sum, _public, num_words);
    2b96:	5e 01       	movw	r10, r28
    2b98:	e1 e6       	ldi	r30, 0x61	; 97
    2b9a:	ae 0e       	add	r10, r30
    2b9c:	b1 1c       	adc	r11, r1
    2b9e:	43 2d       	mov	r20, r3
    2ba0:	be 01       	movw	r22, r28
    2ba2:	67 5b       	subi	r22, 0xB7	; 183
    2ba4:	7e 4f       	sbci	r23, 0xFE	; 254
    2ba6:	c5 01       	movw	r24, r10
    2ba8:	0e 94 54 04 	call	0x8a8	; 0x8a8 <uECC_vli_set>
    uECC_vli_set(sum + num_words, _public + num_words, num_words);
    2bac:	c5 01       	movw	r24, r10
    2bae:	86 0d       	add	r24, r6
    2bb0:	97 1d       	adc	r25, r7
    2bb2:	c5 53       	subi	r28, 0x35	; 53
    2bb4:	de 4f       	sbci	r29, 0xFE	; 254
    2bb6:	99 83       	std	Y+1, r25	; 0x01
    2bb8:	88 83       	st	Y, r24
    2bba:	cb 5c       	subi	r28, 0xCB	; 203
    2bbc:	d1 40       	sbci	r29, 0x01	; 1
    2bbe:	43 2d       	mov	r20, r3
    2bc0:	b2 01       	movw	r22, r4
    2bc2:	0e 94 54 04 	call	0x8a8	; 0x8a8 <uECC_vli_set>
    uECC_vli_set(tx, curve->G, num_words);
    2bc6:	43 2d       	mov	r20, r3
    2bc8:	27 01       	movw	r4, r14
    2bca:	94 e4       	ldi	r25, 0x44	; 68
    2bcc:	49 0e       	add	r4, r25
    2bce:	51 1c       	adc	r5, r1
    2bd0:	b2 01       	movw	r22, r4
    2bd2:	ce 01       	movw	r24, r28
    2bd4:	8f 51       	subi	r24, 0x1F	; 31
    2bd6:	9f 4f       	sbci	r25, 0xFF	; 255
    2bd8:	0e 94 54 04 	call	0x8a8	; 0x8a8 <uECC_vli_set>
    uECC_vli_set(ty, curve->G + num_words, num_words);
    2bdc:	b2 01       	movw	r22, r4
    2bde:	66 0d       	add	r22, r6
    2be0:	77 1d       	adc	r23, r7
    2be2:	43 2d       	mov	r20, r3
    2be4:	ce 01       	movw	r24, r28
    2be6:	8f 5f       	subi	r24, 0xFF	; 255
    2be8:	9e 4f       	sbci	r25, 0xFE	; 254
    2bea:	0e 94 54 04 	call	0x8a8	; 0x8a8 <uECC_vli_set>
    uECC_vli_modSub(z, sum, tx, curve->p, num_words); /* z = x2 - x1 */
    2bee:	d7 01       	movw	r26, r14
    2bf0:	14 96       	adiw	r26, 0x04	; 4
    2bf2:	c7 53       	subi	r28, 0x37	; 55
    2bf4:	de 4f       	sbci	r29, 0xFE	; 254
    2bf6:	b9 83       	std	Y+1, r27	; 0x01
    2bf8:	a8 83       	st	Y, r26
    2bfa:	c9 5c       	subi	r28, 0xC9	; 201
    2bfc:	d1 40       	sbci	r29, 0x01	; 1
    2bfe:	03 2d       	mov	r16, r3
    2c00:	9d 01       	movw	r18, r26
    2c02:	ae 01       	movw	r20, r28
    2c04:	4f 51       	subi	r20, 0x1F	; 31
    2c06:	5f 4f       	sbci	r21, 0xFF	; 255
    2c08:	b5 01       	movw	r22, r10
    2c0a:	ce 01       	movw	r24, r28
    2c0c:	8f 5b       	subi	r24, 0xBF	; 191
    2c0e:	9f 4f       	sbci	r25, 0xFF	; 255
    2c10:	0e 94 cf 07 	call	0xf9e	; 0xf9e <uECC_vli_modSub>
    XYcZ_add(tx, ty, sum, sum + num_words, curve);
    2c14:	87 01       	movw	r16, r14
    2c16:	c5 53       	subi	r28, 0x35	; 53
    2c18:	de 4f       	sbci	r29, 0xFE	; 254
    2c1a:	28 81       	ld	r18, Y
    2c1c:	39 81       	ldd	r19, Y+1	; 0x01
    2c1e:	cb 5c       	subi	r28, 0xCB	; 203
    2c20:	d1 40       	sbci	r29, 0x01	; 1
    2c22:	a5 01       	movw	r20, r10
    2c24:	be 01       	movw	r22, r28
    2c26:	6f 5f       	subi	r22, 0xFF	; 255
    2c28:	7e 4f       	sbci	r23, 0xFE	; 254
    2c2a:	ce 01       	movw	r24, r28
    2c2c:	8f 51       	subi	r24, 0x1F	; 31
    2c2e:	9f 4f       	sbci	r25, 0xFF	; 255
    2c30:	84 d8       	rcall	.-3832   	; 0x1d3a <XYcZ_add>
    uECC_vli_modInv(z, z, curve->p, num_words); /* z = 1/z */
    2c32:	23 2d       	mov	r18, r3
    2c34:	c7 53       	subi	r28, 0x37	; 55
    2c36:	de 4f       	sbci	r29, 0xFE	; 254
    2c38:	48 81       	ld	r20, Y
    2c3a:	59 81       	ldd	r21, Y+1	; 0x01
    2c3c:	c9 5c       	subi	r28, 0xC9	; 201
    2c3e:	d1 40       	sbci	r29, 0x01	; 1
    2c40:	be 01       	movw	r22, r28
    2c42:	6f 5b       	subi	r22, 0xBF	; 191
    2c44:	7f 4f       	sbci	r23, 0xFF	; 255
    2c46:	cb 01       	movw	r24, r22
    2c48:	0e 94 c4 09 	call	0x1388	; 0x1388 <uECC_vli_modInv>
    apply_z(sum, sum + num_words, z, curve);
    2c4c:	97 01       	movw	r18, r14
    2c4e:	ae 01       	movw	r20, r28
    2c50:	4f 5b       	subi	r20, 0xBF	; 191
    2c52:	5f 4f       	sbci	r21, 0xFF	; 255
    2c54:	c5 53       	subi	r28, 0x35	; 53
    2c56:	de 4f       	sbci	r29, 0xFE	; 254
    2c58:	68 81       	ld	r22, Y
    2c5a:	79 81       	ldd	r23, Y+1	; 0x01
    2c5c:	cb 5c       	subi	r28, 0xCB	; 203
    2c5e:	d1 40       	sbci	r29, 0x01	; 1
    2c60:	c5 01       	movw	r24, r10
    2c62:	2a d8       	rcall	.-4012   	; 0x1cb8 <apply_z>

    /* Use Shamir's trick to calculate u1*G + u2*Q */
    points[0] = 0;
    2c64:	cf 5b       	subi	r28, 0xBF	; 191
    2c66:	de 4f       	sbci	r29, 0xFE	; 254
    2c68:	19 82       	std	Y+1, r1	; 0x01
    2c6a:	18 82       	st	Y, r1
    2c6c:	c1 54       	subi	r28, 0x41	; 65
    2c6e:	d1 40       	sbci	r29, 0x01	; 1
    points[1] = curve->G;
    2c70:	cd 5b       	subi	r28, 0xBD	; 189
    2c72:	de 4f       	sbci	r29, 0xFE	; 254
    2c74:	59 82       	std	Y+1, r5	; 0x01
    2c76:	48 82       	st	Y, r4
    2c78:	c3 54       	subi	r28, 0x43	; 67
    2c7a:	d1 40       	sbci	r29, 0x01	; 1
    points[2] = _public;
    2c7c:	e9 e4       	ldi	r30, 0x49	; 73
    2c7e:	f1 e0       	ldi	r31, 0x01	; 1
    2c80:	ec 0f       	add	r30, r28
    2c82:	fd 1f       	adc	r31, r29
    2c84:	cb 5b       	subi	r28, 0xBB	; 187
    2c86:	de 4f       	sbci	r29, 0xFE	; 254
    2c88:	f9 83       	std	Y+1, r31	; 0x01
    2c8a:	e8 83       	st	Y, r30
    2c8c:	c5 54       	subi	r28, 0x45	; 69
    2c8e:	d1 40       	sbci	r29, 0x01	; 1
    points[3] = sum;
    2c90:	c9 5b       	subi	r28, 0xB9	; 185
    2c92:	de 4f       	sbci	r29, 0xFE	; 254
    2c94:	b9 82       	std	Y+1, r11	; 0x01
    2c96:	a8 82       	st	Y, r10
    2c98:	c7 54       	subi	r28, 0x47	; 71
    2c9a:	d1 40       	sbci	r29, 0x01	; 1
    num_bits = smax(uECC_vli_numBits(u1, num_n_words),
    2c9c:	6c 2d       	mov	r22, r12
    2c9e:	ce 01       	movw	r24, r28
    2ca0:	81 96       	adiw	r24, 0x21	; 33
    2ca2:	0e 94 1d 07 	call	0xe3a	; 0xe3a <uECC_vli_numBits>
    2ca6:	08 2f       	mov	r16, r24
    2ca8:	19 2f       	mov	r17, r25
    2caa:	6c 2d       	mov	r22, r12
    2cac:	ce 01       	movw	r24, r28
    2cae:	01 96       	adiw	r24, 0x01	; 1
    2cb0:	0e 94 1d 07 	call	0xe3a	; 0xe3a <uECC_vli_numBits>
    }
    return 0;
}

static bitcount_t smax(bitcount_t a, bitcount_t b) {
    return (a > b ? a : b);
    2cb4:	a0 2e       	mov	r10, r16
    2cb6:	b1 2e       	mov	r11, r17
    2cb8:	a8 16       	cp	r10, r24
    2cba:	b9 06       	cpc	r11, r25
    2cbc:	0c f4       	brge	.+2      	; 0x2cc0 <uECC_verify+0x30a>
    2cbe:	5c 01       	movw	r10, r24
    points[2] = _public;
    points[3] = sum;
    num_bits = smax(uECC_vli_numBits(u1, num_n_words),
                    uECC_vli_numBits(u2, num_n_words));

    point = points[(!!uECC_vli_testBit(u1, num_bits - 1)) |
    2cc0:	85 01       	movw	r16, r10
    2cc2:	01 50       	subi	r16, 0x01	; 1
    2cc4:	11 09       	sbc	r17, r1
    2cc6:	b8 01       	movw	r22, r16
    2cc8:	ce 01       	movw	r24, r28
    2cca:	01 96       	adiw	r24, 0x01	; 1
    2ccc:	0e 94 07 07 	call	0xe0e	; 0xe0e <uECC_vli_testBit>
    2cd0:	21 e0       	ldi	r18, 0x01	; 1
    2cd2:	90 e0       	ldi	r25, 0x00	; 0
    2cd4:	81 11       	cpse	r24, r1
    2cd6:	01 c0       	rjmp	.+2      	; 0x2cda <uECC_verify+0x324>
    2cd8:	20 e0       	ldi	r18, 0x00	; 0
    2cda:	42 2e       	mov	r4, r18
    2cdc:	59 2e       	mov	r5, r25
                   ((!!uECC_vli_testBit(u2, num_bits - 1)) << 1)];
    2cde:	b8 01       	movw	r22, r16
    2ce0:	ce 01       	movw	r24, r28
    2ce2:	81 96       	adiw	r24, 0x21	; 33
    2ce4:	0e 94 07 07 	call	0xe0e	; 0xe0e <uECC_vli_testBit>
    2ce8:	81 11       	cpse	r24, r1
    2cea:	03 c0       	rjmp	.+6      	; 0x2cf2 <uECC_verify+0x33c>
    2cec:	e0 e0       	ldi	r30, 0x00	; 0
    2cee:	f0 e0       	ldi	r31, 0x00	; 0
    2cf0:	02 c0       	rjmp	.+4      	; 0x2cf6 <uECC_verify+0x340>
    2cf2:	e2 e0       	ldi	r30, 0x02	; 2
    2cf4:	f0 e0       	ldi	r31, 0x00	; 0
    points[2] = _public;
    points[3] = sum;
    num_bits = smax(uECC_vli_numBits(u1, num_n_words),
                    uECC_vli_numBits(u2, num_n_words));

    point = points[(!!uECC_vli_testBit(u1, num_bits - 1)) |
    2cf6:	e4 29       	or	r30, r4
    2cf8:	f5 29       	or	r31, r5
    2cfa:	ee 0f       	add	r30, r30
    2cfc:	ff 1f       	adc	r31, r31
    2cfe:	81 e4       	ldi	r24, 0x41	; 65
    2d00:	91 e0       	ldi	r25, 0x01	; 1
    2d02:	8c 0f       	add	r24, r28
    2d04:	9d 1f       	adc	r25, r29
    2d06:	e8 0f       	add	r30, r24
    2d08:	f9 1f       	adc	r31, r25
    2d0a:	00 81       	ld	r16, Z
    2d0c:	11 81       	ldd	r17, Z+1	; 0x01
                   ((!!uECC_vli_testBit(u2, num_bits - 1)) << 1)];
    uECC_vli_set(rx, point, num_words);
    2d0e:	43 2d       	mov	r20, r3
    2d10:	b8 01       	movw	r22, r16
    2d12:	ce 01       	movw	r24, r28
    2d14:	8f 55       	subi	r24, 0x5F	; 95
    2d16:	9f 4f       	sbci	r25, 0xFF	; 255
    2d18:	0e 94 54 04 	call	0x8a8	; 0x8a8 <uECC_vli_set>
    uECC_vli_set(ry, point + num_words, num_words);
    2d1c:	b8 01       	movw	r22, r16
    2d1e:	66 0d       	add	r22, r6
    2d20:	77 1d       	adc	r23, r7
    2d22:	43 2d       	mov	r20, r3
    2d24:	ce 01       	movw	r24, r28
    2d26:	8f 53       	subi	r24, 0x3F	; 63
    2d28:	9f 4f       	sbci	r25, 0xFF	; 255
    2d2a:	0e 94 54 04 	call	0x8a8	; 0x8a8 <uECC_vli_set>
    uECC_vli_clear(z, num_words);
    2d2e:	63 2d       	mov	r22, r3
    2d30:	ce 01       	movw	r24, r28
    2d32:	8f 5b       	subi	r24, 0xBF	; 191
    2d34:	9f 4f       	sbci	r25, 0xFF	; 255
    2d36:	0e 94 2d 04 	call	0x85a	; 0x85a <uECC_vli_clear>
    z[0] = 1;
    2d3a:	81 e0       	ldi	r24, 0x01	; 1
    2d3c:	22 96       	adiw	r28, 0x02	; 2
    2d3e:	8f af       	std	Y+63, r24	; 0x3f
    2d40:	22 97       	sbiw	r28, 0x02	; 2

    for (i = num_bits - 2; i >= 0; --i) {
    2d42:	92 e0       	ldi	r25, 0x02	; 2
    2d44:	a9 1a       	sub	r10, r25
    2d46:	b1 08       	sbc	r11, r1
    2d48:	0a f4       	brpl	.+2      	; 0x2d4c <uECC_verify+0x396>
    2d4a:	83 c0       	rjmp	.+262    	; 0x2e52 <uECC_verify+0x49c>
        uECC_word_t index;
        curve->double_jacobian(rx, ry, z, curve);
    2d4c:	27 01       	movw	r4, r14
    2d4e:	a4 ea       	ldi	r26, 0xA4	; 164
    2d50:	4a 0e       	add	r4, r26
    2d52:	51 1c       	adc	r5, r1

        index = (!!uECC_vli_testBit(u1, i)) | ((!!uECC_vli_testBit(u2, i)) << 1);
    2d54:	21 2c       	mov	r2, r1
    uECC_vli_clear(z, num_words);
    z[0] = 1;

    for (i = num_bits - 2; i >= 0; --i) {
        uECC_word_t index;
        curve->double_jacobian(rx, ry, z, curve);
    2d56:	d2 01       	movw	r26, r4
    2d58:	ed 91       	ld	r30, X+
    2d5a:	fc 91       	ld	r31, X
    2d5c:	97 01       	movw	r18, r14
    2d5e:	ae 01       	movw	r20, r28
    2d60:	4f 5b       	subi	r20, 0xBF	; 191
    2d62:	5f 4f       	sbci	r21, 0xFF	; 255
    2d64:	be 01       	movw	r22, r28
    2d66:	6f 53       	subi	r22, 0x3F	; 63
    2d68:	7f 4f       	sbci	r23, 0xFF	; 255
    2d6a:	ce 01       	movw	r24, r28
    2d6c:	8f 55       	subi	r24, 0x5F	; 95
    2d6e:	9f 4f       	sbci	r25, 0xFF	; 255
    2d70:	09 95       	icall

        index = (!!uECC_vli_testBit(u1, i)) | ((!!uECC_vli_testBit(u2, i)) << 1);
    2d72:	b5 01       	movw	r22, r10
    2d74:	ce 01       	movw	r24, r28
    2d76:	01 96       	adiw	r24, 0x01	; 1
    2d78:	0e 94 07 07 	call	0xe0e	; 0xe0e <uECC_vli_testBit>
    2d7c:	11 e0       	ldi	r17, 0x01	; 1
    2d7e:	81 11       	cpse	r24, r1
    2d80:	01 c0       	rjmp	.+2      	; 0x2d84 <uECC_verify+0x3ce>
    2d82:	12 2d       	mov	r17, r2
    2d84:	b5 01       	movw	r22, r10
    2d86:	ce 01       	movw	r24, r28
    2d88:	81 96       	adiw	r24, 0x21	; 33
    2d8a:	0e 94 07 07 	call	0xe0e	; 0xe0e <uECC_vli_testBit>
    2d8e:	81 11       	cpse	r24, r1
    2d90:	02 c0       	rjmp	.+4      	; 0x2d96 <uECC_verify+0x3e0>
    2d92:	e2 2d       	mov	r30, r2
    2d94:	01 c0       	rjmp	.+2      	; 0x2d98 <uECC_verify+0x3e2>
    2d96:	e2 e0       	ldi	r30, 0x02	; 2
        point = points[index];
    2d98:	1e 2b       	or	r17, r30
    2d9a:	e1 2f       	mov	r30, r17
    2d9c:	f0 e0       	ldi	r31, 0x00	; 0
    2d9e:	ee 0f       	add	r30, r30
    2da0:	ff 1f       	adc	r31, r31
    2da2:	81 e4       	ldi	r24, 0x41	; 65
    2da4:	91 e0       	ldi	r25, 0x01	; 1
    2da6:	8c 0f       	add	r24, r28
    2da8:	9d 1f       	adc	r25, r29
    2daa:	e8 0f       	add	r30, r24
    2dac:	f9 1f       	adc	r31, r25
    2dae:	00 81       	ld	r16, Z
    2db0:	11 81       	ldd	r17, Z+1	; 0x01
        if (point) {
    2db2:	01 15       	cp	r16, r1
    2db4:	11 05       	cpc	r17, r1
    2db6:	09 f4       	brne	.+2      	; 0x2dba <uECC_verify+0x404>
    2db8:	47 c0       	rjmp	.+142    	; 0x2e48 <uECC_verify+0x492>
            uECC_vli_set(tx, point, num_words);
    2dba:	43 2d       	mov	r20, r3
    2dbc:	b8 01       	movw	r22, r16
    2dbe:	ce 01       	movw	r24, r28
    2dc0:	8f 51       	subi	r24, 0x1F	; 31
    2dc2:	9f 4f       	sbci	r25, 0xFF	; 255
    2dc4:	0e 94 54 04 	call	0x8a8	; 0x8a8 <uECC_vli_set>
            uECC_vli_set(ty, point + num_words, num_words);
    2dc8:	b8 01       	movw	r22, r16
    2dca:	66 0d       	add	r22, r6
    2dcc:	77 1d       	adc	r23, r7
    2dce:	43 2d       	mov	r20, r3
    2dd0:	ce 01       	movw	r24, r28
    2dd2:	8f 5f       	subi	r24, 0xFF	; 255
    2dd4:	9e 4f       	sbci	r25, 0xFE	; 254
    2dd6:	0e 94 54 04 	call	0x8a8	; 0x8a8 <uECC_vli_set>
            apply_z(tx, ty, z, curve);
    2dda:	97 01       	movw	r18, r14
    2ddc:	ae 01       	movw	r20, r28
    2dde:	4f 5b       	subi	r20, 0xBF	; 191
    2de0:	5f 4f       	sbci	r21, 0xFF	; 255
    2de2:	be 01       	movw	r22, r28
    2de4:	6f 5f       	subi	r22, 0xFF	; 255
    2de6:	7e 4f       	sbci	r23, 0xFE	; 254
    2de8:	ce 01       	movw	r24, r28
    2dea:	8f 51       	subi	r24, 0x1F	; 31
    2dec:	9f 4f       	sbci	r25, 0xFF	; 255
    2dee:	0e 94 5c 0e 	call	0x1cb8	; 0x1cb8 <apply_z>
            uECC_vli_modSub(tz, rx, tx, curve->p, num_words); /* Z = x2 - x1 */
    2df2:	03 2d       	mov	r16, r3
    2df4:	c7 53       	subi	r28, 0x37	; 55
    2df6:	de 4f       	sbci	r29, 0xFE	; 254
    2df8:	28 81       	ld	r18, Y
    2dfa:	39 81       	ldd	r19, Y+1	; 0x01
    2dfc:	c9 5c       	subi	r28, 0xC9	; 201
    2dfe:	d1 40       	sbci	r29, 0x01	; 1
    2e00:	ae 01       	movw	r20, r28
    2e02:	4f 51       	subi	r20, 0x1F	; 31
    2e04:	5f 4f       	sbci	r21, 0xFF	; 255
    2e06:	be 01       	movw	r22, r28
    2e08:	6f 55       	subi	r22, 0x5F	; 95
    2e0a:	7f 4f       	sbci	r23, 0xFF	; 255
    2e0c:	ce 01       	movw	r24, r28
    2e0e:	8f 5d       	subi	r24, 0xDF	; 223
    2e10:	9e 4f       	sbci	r25, 0xFE	; 254
    2e12:	0e 94 cf 07 	call	0xf9e	; 0xf9e <uECC_vli_modSub>
            XYcZ_add(tx, ty, rx, ry, curve);
    2e16:	87 01       	movw	r16, r14
    2e18:	9e 01       	movw	r18, r28
    2e1a:	2f 53       	subi	r18, 0x3F	; 63
    2e1c:	3f 4f       	sbci	r19, 0xFF	; 255
    2e1e:	ae 01       	movw	r20, r28
    2e20:	4f 55       	subi	r20, 0x5F	; 95
    2e22:	5f 4f       	sbci	r21, 0xFF	; 255
    2e24:	be 01       	movw	r22, r28
    2e26:	6f 5f       	subi	r22, 0xFF	; 255
    2e28:	7e 4f       	sbci	r23, 0xFE	; 254
    2e2a:	ce 01       	movw	r24, r28
    2e2c:	8f 51       	subi	r24, 0x1F	; 31
    2e2e:	9f 4f       	sbci	r25, 0xFF	; 255
    2e30:	0e 94 9d 0e 	call	0x1d3a	; 0x1d3a <XYcZ_add>
            uECC_vli_modMult_fast(z, z, tz, curve);
    2e34:	97 01       	movw	r18, r14
    2e36:	ae 01       	movw	r20, r28
    2e38:	4f 5d       	subi	r20, 0xDF	; 223
    2e3a:	5e 4f       	sbci	r21, 0xFE	; 254
    2e3c:	be 01       	movw	r22, r28
    2e3e:	6f 5b       	subi	r22, 0xBF	; 191
    2e40:	7f 4f       	sbci	r23, 0xFF	; 255
    2e42:	cb 01       	movw	r24, r22
    2e44:	0e 94 6a 09 	call	0x12d4	; 0x12d4 <uECC_vli_modMult_fast>
    uECC_vli_set(rx, point, num_words);
    uECC_vli_set(ry, point + num_words, num_words);
    uECC_vli_clear(z, num_words);
    z[0] = 1;

    for (i = num_bits - 2; i >= 0; --i) {
    2e48:	91 e0       	ldi	r25, 0x01	; 1
    2e4a:	a9 1a       	sub	r10, r25
    2e4c:	b1 08       	sbc	r11, r1
    2e4e:	08 f0       	brcs	.+2      	; 0x2e52 <uECC_verify+0x49c>
    2e50:	82 cf       	rjmp	.-252    	; 0x2d56 <uECC_verify+0x3a0>
            XYcZ_add(tx, ty, rx, ry, curve);
            uECC_vli_modMult_fast(z, z, tz, curve);
        }
    }

    uECC_vli_modInv(z, z, curve->p, num_words); /* Z = 1/Z */
    2e52:	23 2d       	mov	r18, r3
    2e54:	c7 53       	subi	r28, 0x37	; 55
    2e56:	de 4f       	sbci	r29, 0xFE	; 254
    2e58:	48 81       	ld	r20, Y
    2e5a:	59 81       	ldd	r21, Y+1	; 0x01
    2e5c:	c9 5c       	subi	r28, 0xC9	; 201
    2e5e:	d1 40       	sbci	r29, 0x01	; 1
    2e60:	be 01       	movw	r22, r28
    2e62:	6f 5b       	subi	r22, 0xBF	; 191
    2e64:	7f 4f       	sbci	r23, 0xFF	; 255
    2e66:	cb 01       	movw	r24, r22
    2e68:	0e 94 c4 09 	call	0x1388	; 0x1388 <uECC_vli_modInv>
    apply_z(rx, ry, z, curve);
    2e6c:	97 01       	movw	r18, r14
    2e6e:	ae 01       	movw	r20, r28
    2e70:	4f 5b       	subi	r20, 0xBF	; 191
    2e72:	5f 4f       	sbci	r21, 0xFF	; 255
    2e74:	be 01       	movw	r22, r28
    2e76:	6f 53       	subi	r22, 0x3F	; 63
    2e78:	7f 4f       	sbci	r23, 0xFF	; 255
    2e7a:	ce 01       	movw	r24, r28
    2e7c:	8f 55       	subi	r24, 0x5F	; 95
    2e7e:	9f 4f       	sbci	r25, 0xFF	; 255
    2e80:	0e 94 5c 0e 	call	0x1cb8	; 0x1cb8 <apply_z>

    /* v = x1 (mod n) */
    if (uECC_vli_cmp_unsafe(curve->n, rx, num_n_words) != 1) {
    2e84:	4c 2d       	mov	r20, r12
    2e86:	be 01       	movw	r22, r28
    2e88:	6f 55       	subi	r22, 0x5F	; 95
    2e8a:	7f 4f       	sbci	r23, 0xFF	; 255
    2e8c:	c4 01       	movw	r24, r8
    2e8e:	0e 94 54 07 	call	0xea8	; 0xea8 <uECC_vli_cmp_unsafe>
    2e92:	81 30       	cpi	r24, 0x01	; 1
    2e94:	41 f0       	breq	.+16     	; 0x2ea6 <uECC_verify+0x4f0>
        uECC_vli_sub(rx, rx, curve->n, num_n_words);
    2e96:	2c 2d       	mov	r18, r12
    2e98:	a4 01       	movw	r20, r8
    2e9a:	be 01       	movw	r22, r28
    2e9c:	6f 55       	subi	r22, 0x5F	; 95
    2e9e:	7f 4f       	sbci	r23, 0xFF	; 255
    2ea0:	cb 01       	movw	r24, r22
    2ea2:	0e 94 e4 05 	call	0xbc8	; 0xbc8 <uECC_vli_sub>
uECC_VLI_API uECC_word_t uECC_vli_equal(const uECC_word_t *left,
                                        const uECC_word_t *right,
                                        wordcount_t num_words) {
    uECC_word_t diff = 0;
    wordcount_t i;
    for (i = num_words - 1; i >= 0; --i) {
    2ea6:	3a 94       	dec	r3
    2ea8:	33 20       	and	r3, r3
    2eaa:	cc f0       	brlt	.+50     	; 0x2ede <uECC_verify+0x528>
    2eac:	20 e0       	ldi	r18, 0x00	; 0
        diff |= (left[i] ^ right[i]);
    2eae:	83 2d       	mov	r24, r3
    2eb0:	03 2c       	mov	r0, r3
    2eb2:	00 0c       	add	r0, r0
    2eb4:	99 0b       	sbc	r25, r25
    2eb6:	e1 ea       	ldi	r30, 0xA1	; 161
    2eb8:	f0 e0       	ldi	r31, 0x00	; 0
    2eba:	ec 0f       	add	r30, r28
    2ebc:	fd 1f       	adc	r31, r29
    2ebe:	e8 0f       	add	r30, r24
    2ec0:	f9 1f       	adc	r31, r25
    2ec2:	a9 e8       	ldi	r26, 0x89	; 137
    2ec4:	b1 e0       	ldi	r27, 0x01	; 1
    2ec6:	ac 0f       	add	r26, r28
    2ec8:	bd 1f       	adc	r27, r29
    2eca:	a8 0f       	add	r26, r24
    2ecc:	b9 1f       	adc	r27, r25
    2ece:	30 81       	ld	r19, Z
    2ed0:	8c 91       	ld	r24, X
    2ed2:	83 27       	eor	r24, r19
    2ed4:	28 2b       	or	r18, r24
    2ed6:	3a 94       	dec	r3
uECC_VLI_API uECC_word_t uECC_vli_equal(const uECC_word_t *left,
                                        const uECC_word_t *right,
                                        wordcount_t num_words) {
    uECC_word_t diff = 0;
    wordcount_t i;
    for (i = num_words - 1; i >= 0; --i) {
    2ed8:	33 20       	and	r3, r3
    2eda:	4c f7       	brge	.-46     	; 0x2eae <uECC_verify+0x4f8>
    2edc:	01 c0       	rjmp	.+2      	; 0x2ee0 <uECC_verify+0x52a>
/* Constant-time comparison function - secure way to compare long integers */
/* Returns one if left == right, zero otherwise. */
uECC_VLI_API uECC_word_t uECC_vli_equal(const uECC_word_t *left,
                                        const uECC_word_t *right,
                                        wordcount_t num_words) {
    uECC_word_t diff = 0;
    2ede:	20 e0       	ldi	r18, 0x00	; 0
    if (uECC_vli_cmp_unsafe(curve->n, rx, num_n_words) != 1) {
        uECC_vli_sub(rx, rx, curve->n, num_n_words);
    }

    /* Accept only if v == r. */
    return (int)(uECC_vli_equal(rx, r, num_words));
    2ee0:	81 e0       	ldi	r24, 0x01	; 1
    2ee2:	90 e0       	ldi	r25, 0x00	; 0
    2ee4:	22 23       	and	r18, r18
    2ee6:	69 f0       	breq	.+26     	; 0x2f02 <uECC_verify+0x54c>
    2ee8:	80 e0       	ldi	r24, 0x00	; 0
    2eea:	0b c0       	rjmp	.+22     	; 0x2f02 <uECC_verify+0x54c>
    uECC_vli_bytesToNative(s, signature + curve->num_bytes, curve->num_bytes);
#endif

    /* r, s must not be 0. */
    if (uECC_vli_isZero(r, num_words) || uECC_vli_isZero(s, num_words)) {
        return 0;
    2eec:	80 e0       	ldi	r24, 0x00	; 0
    2eee:	90 e0       	ldi	r25, 0x00	; 0
    2ef0:	08 c0       	rjmp	.+16     	; 0x2f02 <uECC_verify+0x54c>
    2ef2:	80 e0       	ldi	r24, 0x00	; 0
    2ef4:	90 e0       	ldi	r25, 0x00	; 0
    2ef6:	05 c0       	rjmp	.+10     	; 0x2f02 <uECC_verify+0x54c>
    }

    /* r, s must be < n. */
    if (uECC_vli_cmp_unsafe(curve->n, r, num_n_words) != 1 ||
            uECC_vli_cmp_unsafe(curve->n, s, num_n_words) != 1) {
        return 0;
    2ef8:	80 e0       	ldi	r24, 0x00	; 0
    2efa:	90 e0       	ldi	r25, 0x00	; 0
    2efc:	02 c0       	rjmp	.+4      	; 0x2f02 <uECC_verify+0x54c>
    2efe:	80 e0       	ldi	r24, 0x00	; 0
    2f00:	90 e0       	ldi	r25, 0x00	; 0
        uECC_vli_sub(rx, rx, curve->n, num_n_words);
    }

    /* Accept only if v == r. */
    return (int)(uECC_vli_equal(rx, r, num_words));
}
    2f02:	c4 53       	subi	r28, 0x34	; 52
    2f04:	de 4f       	sbci	r29, 0xFE	; 254
    2f06:	0f b6       	in	r0, 0x3f	; 63
    2f08:	f8 94       	cli
    2f0a:	de bf       	out	0x3e, r29	; 62
    2f0c:	0f be       	out	0x3f, r0	; 63
    2f0e:	cd bf       	out	0x3d, r28	; 61
    2f10:	df 91       	pop	r29
    2f12:	cf 91       	pop	r28
    2f14:	1f 91       	pop	r17
    2f16:	0f 91       	pop	r16
    2f18:	ff 90       	pop	r15
    2f1a:	ef 90       	pop	r14
    2f1c:	df 90       	pop	r13
    2f1e:	cf 90       	pop	r12
    2f20:	bf 90       	pop	r11
    2f22:	af 90       	pop	r10
    2f24:	9f 90       	pop	r9
    2f26:	8f 90       	pop	r8
    2f28:	7f 90       	pop	r7
    2f2a:	6f 90       	pop	r6
    2f2c:	5f 90       	pop	r5
    2f2e:	4f 90       	pop	r4
    2f30:	3f 90       	pop	r3
    2f32:	2f 90       	pop	r2
    2f34:	08 95       	ret

00002f36 <bytes_to_hex>:
#include <avr/io.h>
#include "hexconv.h"


void bytes_to_hex(const uint8_t *src, uint8_t intlen, char *dest)
{
    2f36:	cf 93       	push	r28
    2f38:	df 93       	push	r29
	static const unsigned char table[] = "0123456789abcdef";

	for (; intlen > 0; intlen--)
    2f3a:	66 23       	and	r22, r22
    2f3c:	c9 f0       	breq	.+50     	; 0x2f70 <bytes_to_hex+0x3a>
    2f3e:	c4 2f       	mov	r28, r20
    2f40:	d5 2f       	mov	r29, r21
    2f42:	28 2f       	mov	r18, r24
    2f44:	39 2f       	mov	r19, r25
	{
		unsigned char c = *src++;
    2f46:	d9 01       	movw	r26, r18
    2f48:	ed 91       	ld	r30, X+
    2f4a:	9d 01       	movw	r18, r26
		*dest++ = table[c >> 4];
    2f4c:	ae 2f       	mov	r26, r30
    2f4e:	a2 95       	swap	r26
    2f50:	af 70       	andi	r26, 0x0F	; 15
    2f52:	b0 e0       	ldi	r27, 0x00	; 0
    2f54:	aa 54       	subi	r26, 0x4A	; 74
    2f56:	be 4f       	sbci	r27, 0xFE	; 254
    2f58:	8c 91       	ld	r24, X
    2f5a:	88 83       	st	Y, r24
		*dest++ = table[c & 0x0f];
    2f5c:	ef 70       	andi	r30, 0x0F	; 15
    2f5e:	f0 e0       	ldi	r31, 0x00	; 0
    2f60:	ea 54       	subi	r30, 0x4A	; 74
    2f62:	fe 4f       	sbci	r31, 0xFE	; 254
    2f64:	80 81       	ld	r24, Z
    2f66:	89 83       	std	Y+1, r24	; 0x01

void bytes_to_hex(const uint8_t *src, uint8_t intlen, char *dest)
{
	static const unsigned char table[] = "0123456789abcdef";

	for (; intlen > 0; intlen--)
    2f68:	61 50       	subi	r22, 0x01	; 1
    2f6a:	22 96       	adiw	r28, 0x02	; 2
    2f6c:	61 11       	cpse	r22, r1
    2f6e:	eb cf       	rjmp	.-42     	; 0x2f46 <bytes_to_hex+0x10>
	{
		unsigned char c = *src++;
		*dest++ = table[c >> 4];
		*dest++ = table[c & 0x0f];
	}
}
    2f70:	df 91       	pop	r29
    2f72:	cf 91       	pop	r28
    2f74:	08 95       	ret

00002f76 <hex_to_bytes>:

void hex_to_bytes(char* src, uint8_t slength, uint8_t dest[slength/2]) {
    2f76:	ff 92       	push	r15
    2f78:	0f 93       	push	r16
    2f7a:	1f 93       	push	r17
    2f7c:	cf 93       	push	r28
    2f7e:	df 93       	push	r29
    2f80:	f8 2e       	mov	r15, r24
    2f82:	09 2f       	mov	r16, r25
    2f84:	16 2f       	mov	r17, r22
    2f86:	ea 01       	movw	r28, r20
	memset(dest, 0, slength/2);
    2f88:	46 2f       	mov	r20, r22
    2f8a:	46 95       	lsr	r20
    2f8c:	50 e0       	ldi	r21, 0x00	; 0
    2f8e:	60 e0       	ldi	r22, 0x00	; 0
    2f90:	70 e0       	ldi	r23, 0x00	; 0
    2f92:	ce 01       	movw	r24, r28
    2f94:	0e 94 a6 2d 	call	0x5b4c	; 0x5b4c <memset>
	uint8_t index = 0;
	while (index < slength) {
    2f98:	11 23       	and	r17, r17
    2f9a:	09 f4       	brne	.+2      	; 0x2f9e <hex_to_bytes+0x28>
    2f9c:	3f c0       	rjmp	.+126    	; 0x301c <hex_to_bytes+0xa6>
    2f9e:	ef 2d       	mov	r30, r15
    2fa0:	f0 2f       	mov	r31, r16
    2fa2:	20 e0       	ldi	r18, 0x00	; 0
    2fa4:	30 e0       	ldi	r19, 0x00	; 0
		char c = src[index];
		int value = 0;
    2fa6:	70 e0       	ldi	r23, 0x00	; 0
    2fa8:	60 e0       	ldi	r22, 0x00	; 0
    2faa:	42 2f       	mov	r20, r18

void hex_to_bytes(char* src, uint8_t slength, uint8_t dest[slength/2]) {
	memset(dest, 0, slength/2);
	uint8_t index = 0;
	while (index < slength) {
		char c = src[index];
    2fac:	81 91       	ld	r24, Z+
    2fae:	2f 5f       	subi	r18, 0xFF	; 255
    2fb0:	3f 4f       	sbci	r19, 0xFF	; 255
		int value = 0;
		if(c >= '0' && c <= '9')
    2fb2:	90 ed       	ldi	r25, 0xD0	; 208
    2fb4:	98 0f       	add	r25, r24
    2fb6:	9a 30       	cpi	r25, 0x0A	; 10
    2fb8:	18 f4       	brcc	.+6      	; 0x2fc0 <hex_to_bytes+0x4a>
		value = (c - '0');
    2fba:	90 e0       	ldi	r25, 0x00	; 0
    2fbc:	c0 97       	sbiw	r24, 0x30	; 48
    2fbe:	11 c0       	rjmp	.+34     	; 0x2fe2 <hex_to_bytes+0x6c>
		else if (c >= 'A' && c <= 'F')
    2fc0:	9f eb       	ldi	r25, 0xBF	; 191
    2fc2:	98 0f       	add	r25, r24
    2fc4:	96 30       	cpi	r25, 0x06	; 6
    2fc6:	18 f4       	brcc	.+6      	; 0x2fce <hex_to_bytes+0x58>
		value = (10 + (c - 'A'));
    2fc8:	90 e0       	ldi	r25, 0x00	; 0
    2fca:	c7 97       	sbiw	r24, 0x37	; 55
    2fcc:	0a c0       	rjmp	.+20     	; 0x2fe2 <hex_to_bytes+0x6c>
		else if (c >= 'a' && c <= 'f')
    2fce:	9f e9       	ldi	r25, 0x9F	; 159
    2fd0:	98 0f       	add	r25, r24
    2fd2:	96 30       	cpi	r25, 0x06	; 6
    2fd4:	20 f4       	brcc	.+8      	; 0x2fde <hex_to_bytes+0x68>
		value = (10 + (c - 'a'));
    2fd6:	90 e0       	ldi	r25, 0x00	; 0
    2fd8:	87 55       	subi	r24, 0x57	; 87
    2fda:	91 09       	sbc	r25, r1
    2fdc:	02 c0       	rjmp	.+4      	; 0x2fe2 <hex_to_bytes+0x6c>
void hex_to_bytes(char* src, uint8_t slength, uint8_t dest[slength/2]) {
	memset(dest, 0, slength/2);
	uint8_t index = 0;
	while (index < slength) {
		char c = src[index];
		int value = 0;
    2fde:	87 2f       	mov	r24, r23
    2fe0:	96 2f       	mov	r25, r22
		else if (c >= 'A' && c <= 'F')
		value = (10 + (c - 'A'));
		else if (c >= 'a' && c <= 'f')
		value = (10 + (c - 'a'));

		dest[(index/2)] += value << (((index + 1) % 2) * 4);
    2fe2:	46 95       	lsr	r20
    2fe4:	de 01       	movw	r26, r28
    2fe6:	a4 0f       	add	r26, r20
    2fe8:	b1 1d       	adc	r27, r1
    2fea:	a9 01       	movw	r20, r18
    2fec:	41 70       	andi	r20, 0x01	; 1
    2fee:	50 78       	andi	r21, 0x80	; 128
    2ff0:	55 23       	and	r21, r21
    2ff2:	34 f4       	brge	.+12     	; 0x3000 <hex_to_bytes+0x8a>
    2ff4:	41 50       	subi	r20, 0x01	; 1
    2ff6:	51 09       	sbc	r21, r1
    2ff8:	4e 6f       	ori	r20, 0xFE	; 254
    2ffa:	5f 6f       	ori	r21, 0xFF	; 255
    2ffc:	4f 5f       	subi	r20, 0xFF	; 255
    2ffe:	5f 4f       	sbci	r21, 0xFF	; 255
    3000:	44 0f       	add	r20, r20
    3002:	55 1f       	adc	r21, r21
    3004:	44 0f       	add	r20, r20
    3006:	55 1f       	adc	r21, r21
    3008:	02 c0       	rjmp	.+4      	; 0x300e <hex_to_bytes+0x98>
    300a:	88 0f       	add	r24, r24
    300c:	99 1f       	adc	r25, r25
    300e:	4a 95       	dec	r20
    3010:	e2 f7       	brpl	.-8      	; 0x300a <hex_to_bytes+0x94>
    3012:	9c 91       	ld	r25, X
    3014:	89 0f       	add	r24, r25
    3016:	8c 93       	st	X, r24
}

void hex_to_bytes(char* src, uint8_t slength, uint8_t dest[slength/2]) {
	memset(dest, 0, slength/2);
	uint8_t index = 0;
	while (index < slength) {
    3018:	21 17       	cp	r18, r17
    301a:	38 f2       	brcs	.-114    	; 0x2faa <hex_to_bytes+0x34>

		dest[(index/2)] += value << (((index + 1) % 2) * 4);

		index++;
	}
}
    301c:	df 91       	pop	r29
    301e:	cf 91       	pop	r28
    3020:	1f 91       	pop	r17
    3022:	0f 91       	pop	r16
    3024:	ff 90       	pop	r15
    3026:	08 95       	ret

00003028 <get_public_key>:
	}
	return 1;
}

static void get_public_key(uint8_t role, uint8_t public[64]){
	switch (role)
    3028:	82 30       	cpi	r24, 0x02	; 2
    302a:	79 f0       	breq	.+30     	; 0x304a <get_public_key+0x22>
    302c:	18 f4       	brcc	.+6      	; 0x3034 <get_public_key+0xc>
    302e:	81 30       	cpi	r24, 0x01	; 1
    3030:	31 f0       	breq	.+12     	; 0x303e <get_public_key+0x16>
    3032:	08 95       	ret
    3034:	84 30       	cpi	r24, 0x04	; 4
    3036:	79 f0       	breq	.+30     	; 0x3056 <get_public_key+0x2e>
    3038:	88 30       	cpi	r24, 0x08	; 8
    303a:	99 f0       	breq	.+38     	; 0x3062 <get_public_key+0x3a>
    303c:	08 95       	ret
	{
		case OWNER_ROLE :
		hex_to_bytes(public_key1_hex, 128, public);
    303e:	ab 01       	movw	r20, r22
    3040:	60 e8       	ldi	r22, 0x80	; 128
    3042:	8f eb       	ldi	r24, 0xBF	; 191
    3044:	94 e0       	ldi	r25, 0x04	; 4
    3046:	97 cf       	rjmp	.-210    	; 0x2f76 <hex_to_bytes>
		break;
    3048:	08 95       	ret
		case REPAIRSHOP_ROLE :
		hex_to_bytes(public_key2_hex, 128, public);
    304a:	ab 01       	movw	r20, r22
    304c:	60 e8       	ldi	r22, 0x80	; 128
    304e:	8f e3       	ldi	r24, 0x3F	; 63
    3050:	94 e0       	ldi	r25, 0x04	; 4
    3052:	91 cf       	rjmp	.-222    	; 0x2f76 <hex_to_bytes>
		break;
    3054:	08 95       	ret
		case POLICEMAN_ROLE :
		hex_to_bytes(public_key3_hex, 128, public);
    3056:	ab 01       	movw	r20, r22
    3058:	60 e8       	ldi	r22, 0x80	; 128
    305a:	8f eb       	ldi	r24, 0xBF	; 191
    305c:	93 e0       	ldi	r25, 0x03	; 3
    305e:	8b cf       	rjmp	.-234    	; 0x2f76 <hex_to_bytes>
		break;
    3060:	08 95       	ret
		case TESTER_ROLE :
		hex_to_bytes(public_key4_hex, 128, public);
    3062:	ab 01       	movw	r20, r22
    3064:	60 e8       	ldi	r22, 0x80	; 128
    3066:	8f e3       	ldi	r24, 0x3F	; 63
    3068:	93 e0       	ldi	r25, 0x03	; 3
    306a:	85 cf       	rjmp	.-246    	; 0x2f76 <hex_to_bytes>
    306c:	08 95       	ret

0000306e <RNG>:
	//EICRB = 1 << ISC40 | 1 << ISC41 | 1 << ISC50 | 1 << ISC51 | 1 << ISC60 | 1 << ISC61 | 1 << ISC70 | 1 << ISC71; // set interrupt on falling edge.
	EIMSK = 1 << INT4 | 1 << INT5 | 1 << INT6 | 1 << INT7;
	
}

static int RNG(uint8_t *dest, unsigned size) {
    306e:	ff 92       	push	r15
    3070:	0f 93       	push	r16
    3072:	1f 93       	push	r17
    3074:	cf 93       	push	r28
    3076:	df 93       	push	r29
    3078:	ec 01       	movw	r28, r24
    307a:	8b 01       	movw	r16, r22
	while(size){
    307c:	67 2b       	or	r22, r23
    307e:	51 f0       	breq	.+20     	; 0x3094 <RNG+0x26>
		uint8_t val = (uint8_t) rand() + rand();
    3080:	0e 94 68 2d 	call	0x5ad0	; 0x5ad0 <rand>
    3084:	f8 2e       	mov	r15, r24
    3086:	0e 94 68 2d 	call	0x5ad0	; 0x5ad0 <rand>
		*dest = val;
    308a:	8f 0d       	add	r24, r15
    308c:	89 93       	st	Y+, r24
		++dest;
		--size;
    308e:	01 50       	subi	r16, 0x01	; 1
    3090:	11 09       	sbc	r17, r1
	EIMSK = 1 << INT4 | 1 << INT5 | 1 << INT6 | 1 << INT7;
	
}

static int RNG(uint8_t *dest, unsigned size) {
	while(size){
    3092:	b1 f7       	brne	.-20     	; 0x3080 <RNG+0x12>
		*dest = val;
		++dest;
		--size;
	}
	return 1;
}
    3094:	81 e0       	ldi	r24, 0x01	; 1
    3096:	90 e0       	ldi	r25, 0x00	; 0
    3098:	df 91       	pop	r29
    309a:	cf 91       	pop	r28
    309c:	1f 91       	pop	r17
    309e:	0f 91       	pop	r16
    30a0:	ff 90       	pop	r15
    30a2:	08 95       	ret

000030a4 <__vector_8>:


volatile state_t state = IDLE_S;
volatile event_t event = NULL_E;

ISR(INT7_vect){
    30a4:	1f 92       	push	r1
    30a6:	0f 92       	push	r0
    30a8:	0f b6       	in	r0, 0x3f	; 63
    30aa:	0f 92       	push	r0
    30ac:	11 24       	eor	r1, r1
    30ae:	0b b6       	in	r0, 0x3b	; 59
    30b0:	0f 92       	push	r0
    30b2:	2f 93       	push	r18
    30b4:	3f 93       	push	r19
    30b6:	4f 93       	push	r20
    30b8:	5f 93       	push	r21
    30ba:	6f 93       	push	r22
    30bc:	7f 93       	push	r23
    30be:	8f 93       	push	r24
    30c0:	9f 93       	push	r25
    30c2:	af 93       	push	r26
    30c4:	bf 93       	push	r27
    30c6:	ef 93       	push	r30
    30c8:	ff 93       	push	r31
	EIMSK &= ~(1 << INT7);
    30ca:	ef 98       	cbi	0x1d, 7	; 29
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    30cc:	2f ef       	ldi	r18, 0xFF	; 255
    30ce:	84 e3       	ldi	r24, 0x34	; 52
    30d0:	9c e0       	ldi	r25, 0x0C	; 12
    30d2:	21 50       	subi	r18, 0x01	; 1
    30d4:	80 40       	sbci	r24, 0x00	; 0
    30d6:	90 40       	sbci	r25, 0x00	; 0
    30d8:	e1 f7       	brne	.-8      	; 0x30d2 <__vector_8+0x2e>
    30da:	00 c0       	rjmp	.+0      	; 0x30dc <__vector_8+0x38>
    30dc:	00 00       	nop
	_delay_ms(500);
	switch(auth_protocol){
    30de:	80 91 56 05 	lds	r24, 0x0556	; 0x800556 <auth_protocol>
    30e2:	88 23       	and	r24, r24
    30e4:	19 f0       	breq	.+6      	; 0x30ec <__vector_8+0x48>
    30e6:	81 30       	cpi	r24, 0x01	; 1
    30e8:	49 f0       	breq	.+18     	; 0x30fc <__vector_8+0x58>
    30ea:	0e c0       	rjmp	.+28     	; 0x3108 <__vector_8+0x64>
		case SINGLE :
		auth_protocol = SESSION;
    30ec:	81 e0       	ldi	r24, 0x01	; 1
    30ee:	80 93 56 05 	sts	0x0556, r24	; 0x800556 <auth_protocol>
		uart_puts("Switched to session Authentication protocol.");
    30f2:	87 ec       	ldi	r24, 0xC7	; 199
    30f4:	91 e0       	ldi	r25, 0x01	; 1
    30f6:	0e 94 3c 2b 	call	0x5678	; 0x5678 <uart_puts>
		break;
    30fa:	06 c0       	rjmp	.+12     	; 0x3108 <__vector_8+0x64>
		case SESSION :
		auth_protocol = SINGLE;
    30fc:	10 92 56 05 	sts	0x0556, r1	; 0x800556 <auth_protocol>
		uart_puts("Switched to single Authentication protocol.");
    3100:	84 ef       	ldi	r24, 0xF4	; 244
    3102:	91 e0       	ldi	r25, 0x01	; 1
    3104:	0e 94 3c 2b 	call	0x5678	; 0x5678 <uart_puts>
		break;
	}
	EIMSK |= 1 << INT7;
    3108:	ef 9a       	sbi	0x1d, 7	; 29
}
    310a:	ff 91       	pop	r31
    310c:	ef 91       	pop	r30
    310e:	bf 91       	pop	r27
    3110:	af 91       	pop	r26
    3112:	9f 91       	pop	r25
    3114:	8f 91       	pop	r24
    3116:	7f 91       	pop	r23
    3118:	6f 91       	pop	r22
    311a:	5f 91       	pop	r21
    311c:	4f 91       	pop	r20
    311e:	3f 91       	pop	r19
    3120:	2f 91       	pop	r18
    3122:	0f 90       	pop	r0
    3124:	0b be       	out	0x3b, r0	; 59
    3126:	0f 90       	pop	r0
    3128:	0f be       	out	0x3f, r0	; 63
    312a:	0f 90       	pop	r0
    312c:	1f 90       	pop	r1
    312e:	18 95       	reti

00003130 <buttons_init>:


void buttons_init(){
	DDRE = 0x00;
    3130:	1d b8       	out	0x0d, r1	; 13
	PORTE = 1 << PE4 | 1 << PE5 | 1 << PE6 | 1 << PE7;
    3132:	80 ef       	ldi	r24, 0xF0	; 240
    3134:	8e b9       	out	0x0e, r24	; 14
	EICRB = 0x00;
    3136:	10 92 6a 00 	sts	0x006A, r1	; 0x80006a <__TEXT_REGION_LENGTH__+0x7e006a>
	//EICRB = 1 << ISC40 | 1 << ISC41 | 1 << ISC50 | 1 << ISC51 | 1 << ISC60 | 1 << ISC61 | 1 << ISC70 | 1 << ISC71; // set interrupt on falling edge.
	EIMSK = 1 << INT4 | 1 << INT5 | 1 << INT6 | 1 << INT7;
    313a:	8d bb       	out	0x1d, r24	; 29
    313c:	08 95       	ret

0000313e <verify_signature>:
	}
}



int verify_signature(uint8_t challenge[64], uint8_t signature[64], permissions_t role){
    313e:	af 92       	push	r10
    3140:	bf 92       	push	r11
    3142:	df 92       	push	r13
    3144:	ef 92       	push	r14
    3146:	ff 92       	push	r15
    3148:	0f 93       	push	r16
    314a:	1f 93       	push	r17
    314c:	cf 93       	push	r28
    314e:	df 93       	push	r29
    3150:	cd b7       	in	r28, 0x3d	; 61
    3152:	de b7       	in	r29, 0x3e	; 62
    3154:	c0 58       	subi	r28, 0x80	; 128
    3156:	d1 09       	sbc	r29, r1
    3158:	0f b6       	in	r0, 0x3f	; 63
    315a:	f8 94       	cli
    315c:	de bf       	out	0x3e, r29	; 62
    315e:	0f be       	out	0x3f, r0	; 63
    3160:	cd bf       	out	0x3d, r28	; 61
    3162:	5c 01       	movw	r10, r24
    3164:	7b 01       	movw	r14, r22
    3166:	d4 2e       	mov	r13, r20
	const struct uECC_Curve_t * curve = uECC_secp256r1();
    3168:	da da       	rcall	.-2636   	; 0x271e <uECC_secp256r1>
    316a:	8c 01       	movw	r16, r24
	int result;
	uint8_t hash[64];
	sha512(hash, challenge,512);
    316c:	20 e0       	ldi	r18, 0x00	; 0
    316e:	32 e0       	ldi	r19, 0x02	; 2
    3170:	40 e0       	ldi	r20, 0x00	; 0
    3172:	50 e0       	ldi	r21, 0x00	; 0
    3174:	b5 01       	movw	r22, r10
    3176:	ce 01       	movw	r24, r28
    3178:	01 96       	adiw	r24, 0x01	; 1
    317a:	0e 94 ba 2a 	call	0x5574	; 0x5574 <sha512>
	uint8_t public[64];
	get_public_key(role, public);
    317e:	be 01       	movw	r22, r28
    3180:	6f 5b       	subi	r22, 0xBF	; 191
    3182:	7f 4f       	sbci	r23, 0xFF	; 255
    3184:	8d 2d       	mov	r24, r13
    3186:	50 df       	rcall	.-352    	; 0x3028 <get_public_key>
	result = uECC_verify(public, hash, 64, signature, curve);
    3188:	97 01       	movw	r18, r14
    318a:	40 e4       	ldi	r20, 0x40	; 64
    318c:	50 e0       	ldi	r21, 0x00	; 0
    318e:	be 01       	movw	r22, r28
    3190:	6f 5f       	subi	r22, 0xFF	; 255
    3192:	7f 4f       	sbci	r23, 0xFF	; 255
    3194:	ce 01       	movw	r24, r28
    3196:	8f 5b       	subi	r24, 0xBF	; 191
    3198:	9f 4f       	sbci	r25, 0xFF	; 255
    319a:	0d dc       	rcall	.-2022   	; 0x29b6 <uECC_verify>
	return result;
}
    319c:	c0 58       	subi	r28, 0x80	; 128
    319e:	df 4f       	sbci	r29, 0xFF	; 255
    31a0:	0f b6       	in	r0, 0x3f	; 63
    31a2:	f8 94       	cli
    31a4:	de bf       	out	0x3e, r29	; 62
    31a6:	0f be       	out	0x3f, r0	; 63
    31a8:	cd bf       	out	0x3d, r28	; 61
    31aa:	df 91       	pop	r29
    31ac:	cf 91       	pop	r28
    31ae:	1f 91       	pop	r17
    31b0:	0f 91       	pop	r16
    31b2:	ff 90       	pop	r15
    31b4:	ef 90       	pop	r14
    31b6:	df 90       	pop	r13
    31b8:	bf 90       	pop	r11
    31ba:	af 90       	pop	r10
    31bc:	08 95       	ret

000031be <forward_message>:
	}
	return result;
	
}

void forward_message(can_msg_t msg, can_id_t id){
    31be:	ef 92       	push	r14
    31c0:	ff 92       	push	r15
    31c2:	0f 93       	push	r16
    31c4:	1f 93       	push	r17
    31c6:	cf 93       	push	r28
    31c8:	df 93       	push	r29
    31ca:	cd b7       	in	r28, 0x3d	; 61
    31cc:	de b7       	in	r29, 0x3e	; 62
    31ce:	64 97       	sbiw	r28, 0x14	; 20
    31d0:	0f b6       	in	r0, 0x3f	; 63
    31d2:	f8 94       	cli
    31d4:	de bf       	out	0x3e, r29	; 62
    31d6:	0f be       	out	0x3f, r0	; 63
    31d8:	cd bf       	out	0x3d, r28	; 61
    31da:	7c 01       	movw	r14, r24
    31dc:	8b 01       	movw	r16, r22
	char idl[2];
	char idh[2];
	bytes_to_hex(id, 1, idl);
    31de:	ae 01       	movw	r20, r28
    31e0:	4f 5f       	subi	r20, 0xFF	; 255
    31e2:	5f 4f       	sbci	r21, 0xFF	; 255
    31e4:	61 e0       	ldi	r22, 0x01	; 1
    31e6:	c8 01       	movw	r24, r16
    31e8:	a6 de       	rcall	.-692    	; 0x2f36 <bytes_to_hex>
	id++;
	bytes_to_hex(id, 1, idh);
    31ea:	ae 01       	movw	r20, r28
    31ec:	4d 5f       	subi	r20, 0xFD	; 253
    31ee:	5f 4f       	sbci	r21, 0xFF	; 255
    31f0:	61 e0       	ldi	r22, 0x01	; 1
    31f2:	c8 01       	movw	r24, r16
    31f4:	01 96       	adiw	r24, 0x01	; 1
    31f6:	9f de       	rcall	.-706    	; 0x2f36 <bytes_to_hex>
	uart_puts("---MESSAGE FORWARDED ONTO NETWORK---");
    31f8:	80 e2       	ldi	r24, 0x20	; 32
    31fa:	92 e0       	ldi	r25, 0x02	; 2
    31fc:	0e 94 3c 2b 	call	0x5678	; 0x5678 <uart_puts>
	uart_puts("IDL:");
    3200:	85 e4       	ldi	r24, 0x45	; 69
    3202:	92 e0       	ldi	r25, 0x02	; 2
    3204:	0e 94 3c 2b 	call	0x5678	; 0x5678 <uart_puts>
	uart_putd(idl,2);
    3208:	62 e0       	ldi	r22, 0x02	; 2
    320a:	ce 01       	movw	r24, r28
    320c:	01 96       	adiw	r24, 0x01	; 1
    320e:	0e 94 7e 2b 	call	0x56fc	; 0x56fc <uart_putd>
	uart_puts("IDH:");
    3212:	8a e4       	ldi	r24, 0x4A	; 74
    3214:	92 e0       	ldi	r25, 0x02	; 2
    3216:	0e 94 3c 2b 	call	0x5678	; 0x5678 <uart_puts>
	uart_putd(idh,2);
    321a:	62 e0       	ldi	r22, 0x02	; 2
    321c:	ce 01       	movw	r24, r28
    321e:	03 96       	adiw	r24, 0x03	; 3
    3220:	0e 94 7e 2b 	call	0x56fc	; 0x56fc <uart_putd>
	char msghex[16];
	bytes_to_hex(msg, 8, msghex);
    3224:	ae 01       	movw	r20, r28
    3226:	4b 5f       	subi	r20, 0xFB	; 251
    3228:	5f 4f       	sbci	r21, 0xFF	; 255
    322a:	68 e0       	ldi	r22, 0x08	; 8
    322c:	c7 01       	movw	r24, r14
    322e:	83 de       	rcall	.-762    	; 0x2f36 <bytes_to_hex>
	uart_puts("MESSAGE:");
    3230:	8f e4       	ldi	r24, 0x4F	; 79
    3232:	92 e0       	ldi	r25, 0x02	; 2
    3234:	0e 94 3c 2b 	call	0x5678	; 0x5678 <uart_puts>
	uart_putd(msghex, 16);
    3238:	60 e1       	ldi	r22, 0x10	; 16
    323a:	ce 01       	movw	r24, r28
    323c:	05 96       	adiw	r24, 0x05	; 5
    323e:	0e 94 7e 2b 	call	0x56fc	; 0x56fc <uart_putd>
	uart_puts("------------------------------------");
    3242:	88 e5       	ldi	r24, 0x58	; 88
    3244:	92 e0       	ldi	r25, 0x02	; 2
    3246:	0e 94 3c 2b 	call	0x5678	; 0x5678 <uart_puts>
}
    324a:	64 96       	adiw	r28, 0x14	; 20
    324c:	0f b6       	in	r0, 0x3f	; 63
    324e:	f8 94       	cli
    3250:	de bf       	out	0x3e, r29	; 62
    3252:	0f be       	out	0x3f, r0	; 63
    3254:	cd bf       	out	0x3d, r28	; 61
    3256:	df 91       	pop	r29
    3258:	cf 91       	pop	r28
    325a:	1f 91       	pop	r17
    325c:	0f 91       	pop	r16
    325e:	ff 90       	pop	r15
    3260:	ef 90       	pop	r14
    3262:	08 95       	ret

00003264 <single_authentication>:
	result = uECC_verify(public, hash, 64, signature, curve);
	return result;
}

int single_authentication(permissions_t role)
{	
    3264:	0f 93       	push	r16
    3266:	1f 93       	push	r17
    3268:	cf 93       	push	r28
    326a:	df 93       	push	r29
    326c:	cd b7       	in	r28, 0x3d	; 61
    326e:	de b7       	in	r29, 0x3e	; 62
    3270:	cb 58       	subi	r28, 0x8B	; 139
    3272:	d1 09       	sbc	r29, r1
    3274:	0f b6       	in	r0, 0x3f	; 63
    3276:	f8 94       	cli
    3278:	de bf       	out	0x3e, r29	; 62
    327a:	0f be       	out	0x3f, r0	; 63
    327c:	cd bf       	out	0x3d, r28	; 61
    327e:	18 2f       	mov	r17, r24
	//Start Protocol by sending random challenge.
	volatile uint8_t result;
	uart_puts("authentication started");
    3280:	8d e7       	ldi	r24, 0x7D	; 125
    3282:	92 e0       	ldi	r25, 0x02	; 2
    3284:	0e 94 3c 2b 	call	0x5678	; 0x5678 <uart_puts>
	can_buff_512_t challenge;
	RNG(challenge, 64);
    3288:	60 e4       	ldi	r22, 0x40	; 64
    328a:	70 e0       	ldi	r23, 0x00	; 0
    328c:	ce 01       	movw	r24, r28
    328e:	02 96       	adiw	r24, 0x02	; 2
    3290:	ee de       	rcall	.-548    	; 0x306e <RNG>
	can_send_frame_buffer(challenge , 8);
    3292:	68 e0       	ldi	r22, 0x08	; 8
    3294:	ce 01       	movw	r24, r28
    3296:	02 96       	adiw	r24, 0x02	; 2
    3298:	0e 94 95 03 	call	0x72a	; 0x72a <can_send_frame_buffer>
	uart_puts("challenge sent");
    329c:	84 e9       	ldi	r24, 0x94	; 148
    329e:	92 e0       	ldi	r25, 0x02	; 2
    32a0:	0e 94 3c 2b 	call	0x5678	; 0x5678 <uart_puts>
	
	//Wait for Signature.
	uint8_t signature[64];
	can_receive_frame_buffer(signature, 8);
    32a4:	68 e0       	ldi	r22, 0x08	; 8
    32a6:	ce 01       	movw	r24, r28
    32a8:	8e 5b       	subi	r24, 0xBE	; 190
    32aa:	9f 4f       	sbci	r25, 0xFF	; 255
    32ac:	0e 94 bc 03 	call	0x778	; 0x778 <can_receive_frame_buffer>
	
	//Verify Signature.
	result = verify_signature(challenge, signature, role);
    32b0:	41 2f       	mov	r20, r17
    32b2:	be 01       	movw	r22, r28
    32b4:	6e 5b       	subi	r22, 0xBE	; 190
    32b6:	7f 4f       	sbci	r23, 0xFF	; 255
    32b8:	ce 01       	movw	r24, r28
    32ba:	02 96       	adiw	r24, 0x02	; 2
    32bc:	40 df       	rcall	.-384    	; 0x313e <verify_signature>
    32be:	89 83       	std	Y+1, r24	; 0x01
	if(result==1) {
    32c0:	89 81       	ldd	r24, Y+1	; 0x01
    32c2:	81 30       	cpi	r24, 0x01	; 1
    32c4:	21 f5       	brne	.+72     	; 0x330e <single_authentication+0xaa>
		uart_puts("signature is valid!");
    32c6:	83 ea       	ldi	r24, 0xA3	; 163
    32c8:	92 e0       	ldi	r25, 0x02	; 2
    32ca:	0e 94 3c 2b 	call	0x5678	; 0x5678 <uart_puts>
		can_send_message(0, 0x00, ack_pos);
    32ce:	43 e3       	ldi	r20, 0x33	; 51
    32d0:	53 e0       	ldi	r21, 0x03	; 3
    32d2:	60 e0       	ldi	r22, 0x00	; 0
    32d4:	70 e0       	ldi	r23, 0x00	; 0
    32d6:	80 e0       	ldi	r24, 0x00	; 0
    32d8:	0e 94 33 03 	call	0x666	; 0x666 <can_send_message>
		return 1;
	}
	
	//Receive Message to forward.
	can_msg_t message;
	can_receive_message(0, default_id, 0x00, message);
    32dc:	9e 01       	movw	r18, r28
    32de:	2e 57       	subi	r18, 0x7E	; 126
    32e0:	3f 4f       	sbci	r19, 0xFF	; 255
    32e2:	40 e0       	ldi	r20, 0x00	; 0
    32e4:	50 e0       	ldi	r21, 0x00	; 0
    32e6:	6d e3       	ldi	r22, 0x3D	; 61
    32e8:	73 e0       	ldi	r23, 0x03	; 3
    32ea:	80 e0       	ldi	r24, 0x00	; 0
    32ec:	0e 94 55 03 	call	0x6aa	; 0x6aa <can_receive_message>
	can_id_t id;
	can_get_id(0, id);
    32f0:	be 01       	movw	r22, r28
    32f2:	66 57       	subi	r22, 0x76	; 118
    32f4:	7f 4f       	sbci	r23, 0xFF	; 255
    32f6:	80 e0       	ldi	r24, 0x00	; 0
    32f8:	0e 94 cf 02 	call	0x59e	; 0x59e <can_get_id>
	
	//Check Permission of message.
	if (check_permission(id, role) == 0){
    32fc:	61 2f       	mov	r22, r17
    32fe:	ce 01       	movw	r24, r28
    3300:	86 57       	subi	r24, 0x76	; 118
    3302:	9f 4f       	sbci	r25, 0xFF	; 255
    3304:	b6 d1       	rcall	.+876    	; 0x3672 <check_permission>
    3306:	8c 01       	movw	r16, r24
    3308:	89 2b       	or	r24, r25
    330a:	79 f0       	breq	.+30     	; 0x332a <single_authentication+0xc6>
    330c:	21 c0       	rjmp	.+66     	; 0x3350 <single_authentication+0xec>
	result = verify_signature(challenge, signature, role);
	if(result==1) {
		uart_puts("signature is valid!");
		can_send_message(0, 0x00, ack_pos);
	}else{
		uart_puts("signature is false!");
    330e:	87 eb       	ldi	r24, 0xB7	; 183
    3310:	92 e0       	ldi	r25, 0x02	; 2
    3312:	0e 94 3c 2b 	call	0x5678	; 0x5678 <uart_puts>
		can_send_message(0, 0x00, ack_neg);
    3316:	4b e2       	ldi	r20, 0x2B	; 43
    3318:	53 e0       	ldi	r21, 0x03	; 3
    331a:	60 e0       	ldi	r22, 0x00	; 0
    331c:	70 e0       	ldi	r23, 0x00	; 0
    331e:	80 e0       	ldi	r24, 0x00	; 0
    3320:	0e 94 33 03 	call	0x666	; 0x666 <can_send_message>
		return 1;
    3324:	01 e0       	ldi	r16, 0x01	; 1
    3326:	10 e0       	ldi	r17, 0x00	; 0
    3328:	20 c0       	rjmp	.+64     	; 0x336a <single_authentication+0x106>
	can_id_t id;
	can_get_id(0, id);
	
	//Check Permission of message.
	if (check_permission(id, role) == 0){
		uart_puts("Permission Ok");
    332a:	8b ec       	ldi	r24, 0xCB	; 203
    332c:	92 e0       	ldi	r25, 0x02	; 2
    332e:	0e 94 3c 2b 	call	0x5678	; 0x5678 <uart_puts>
		can_send_message(0, 0x00, ack_pos);
    3332:	43 e3       	ldi	r20, 0x33	; 51
    3334:	53 e0       	ldi	r21, 0x03	; 3
    3336:	60 e0       	ldi	r22, 0x00	; 0
    3338:	70 e0       	ldi	r23, 0x00	; 0
    333a:	80 e0       	ldi	r24, 0x00	; 0
    333c:	0e 94 33 03 	call	0x666	; 0x666 <can_send_message>
		can_send_message(0, 0x00, ack_neg);
		return -2;
	}
	
	//Forward the message to the internal vehicle network.
	forward_message(message, id);
    3340:	be 01       	movw	r22, r28
    3342:	66 57       	subi	r22, 0x76	; 118
    3344:	7f 4f       	sbci	r23, 0xFF	; 255
    3346:	ce 01       	movw	r24, r28
    3348:	8e 57       	subi	r24, 0x7E	; 126
    334a:	9f 4f       	sbci	r25, 0xFF	; 255
    334c:	38 df       	rcall	.-400    	; 0x31be <forward_message>
	
	return 0;
    334e:	0d c0       	rjmp	.+26     	; 0x336a <single_authentication+0x106>
	//Check Permission of message.
	if (check_permission(id, role) == 0){
		uart_puts("Permission Ok");
		can_send_message(0, 0x00, ack_pos);
	}else{
		uart_puts("Permission Failed");
    3350:	89 ed       	ldi	r24, 0xD9	; 217
    3352:	92 e0       	ldi	r25, 0x02	; 2
    3354:	0e 94 3c 2b 	call	0x5678	; 0x5678 <uart_puts>
		can_send_message(0, 0x00, ack_neg);
    3358:	4b e2       	ldi	r20, 0x2B	; 43
    335a:	53 e0       	ldi	r21, 0x03	; 3
    335c:	60 e0       	ldi	r22, 0x00	; 0
    335e:	70 e0       	ldi	r23, 0x00	; 0
    3360:	80 e0       	ldi	r24, 0x00	; 0
    3362:	0e 94 33 03 	call	0x666	; 0x666 <can_send_message>
		return -2;
    3366:	0e ef       	ldi	r16, 0xFE	; 254
    3368:	1f ef       	ldi	r17, 0xFF	; 255
	
	//Forward the message to the internal vehicle network.
	forward_message(message, id);
	
	return 0;
}
    336a:	c8 01       	movw	r24, r16
    336c:	c5 57       	subi	r28, 0x75	; 117
    336e:	df 4f       	sbci	r29, 0xFF	; 255
    3370:	0f b6       	in	r0, 0x3f	; 63
    3372:	f8 94       	cli
    3374:	de bf       	out	0x3e, r29	; 62
    3376:	0f be       	out	0x3f, r0	; 63
    3378:	cd bf       	out	0x3d, r28	; 61
    337a:	df 91       	pop	r29
    337c:	cf 91       	pop	r28
    337e:	1f 91       	pop	r17
    3380:	0f 91       	pop	r16
    3382:	08 95       	ret

00003384 <session_authentication>:

int session_authentication(permissions_t role){
    3384:	cf 93       	push	r28
    3386:	df 93       	push	r29
    3388:	cd b7       	in	r28, 0x3d	; 61
    338a:	de b7       	in	r29, 0x3e	; 62
    338c:	cb 51       	subi	r28, 0x1B	; 27
    338e:	d1 40       	sbci	r29, 0x01	; 1
    3390:	0f b6       	in	r0, 0x3f	; 63
    3392:	f8 94       	cli
    3394:	de bf       	out	0x3e, r29	; 62
    3396:	0f be       	out	0x3f, r0	; 63
    3398:	cd bf       	out	0x3d, r28	; 61
    339a:	d8 2e       	mov	r13, r24
	
	//Start protocol by calculating new private/public key pair for shared secret establishment.
	volatile uint8_t result;
	uart_puts("authentication started");
    339c:	8d e7       	ldi	r24, 0x7D	; 125
    339e:	92 e0       	ldi	r25, 0x02	; 2
    33a0:	0e 94 3c 2b 	call	0x5678	; 0x5678 <uart_puts>
	uECC_set_rng(RNG);
    33a4:	87 e3       	ldi	r24, 0x37	; 55
    33a6:	98 e1       	ldi	r25, 0x18	; 24
    33a8:	b5 d9       	rcall	.-3222   	; 0x2714 <uECC_set_rng>
	volatile uint8_t private2[32];
	volatile uint8_t public2[64];
	const struct uECC_Curve_t * curve = uECC_secp256r1();
    33aa:	b9 d9       	rcall	.-3214   	; 0x271e <uECC_secp256r1>
    33ac:	8c 01       	movw	r16, r24
    33ae:	ac 01       	movw	r20, r24
	result = uECC_make_key(public2, private2, curve);
    33b0:	be 01       	movw	r22, r28
    33b2:	6e 5f       	subi	r22, 0xFE	; 254
    33b4:	7f 4f       	sbci	r23, 0xFF	; 255
    33b6:	ce 01       	movw	r24, r28
    33b8:	82 96       	adiw	r24, 0x22	; 34
    33ba:	b4 d9       	rcall	.-3224   	; 0x2724 <uECC_make_key>
    33bc:	89 83       	std	Y+1, r24	; 0x01
    33be:	be 01       	movw	r22, r28
	uint8_t secret_unhashed[32];
	uint8_t public[64];
	get_public_key(role, public);
    33c0:	6e 57       	subi	r22, 0x7E	; 126
    33c2:	7f 4f       	sbci	r23, 0xFF	; 255
    33c4:	8d 2d       	mov	r24, r13
    33c6:	30 de       	rcall	.-928    	; 0x3028 <get_public_key>
    33c8:	98 01       	movw	r18, r16
	result = uECC_shared_secret(public, private2, secret_unhashed, curve);
    33ca:	ae 01       	movw	r20, r28
    33cc:	4e 59       	subi	r20, 0x9E	; 158
    33ce:	5f 4f       	sbci	r21, 0xFF	; 255
    33d0:	be 01       	movw	r22, r28
    33d2:	6e 5f       	subi	r22, 0xFE	; 254
    33d4:	7f 4f       	sbci	r23, 0xFF	; 255
    33d6:	ce 01       	movw	r24, r28
    33d8:	8e 57       	subi	r24, 0x7E	; 126
    33da:	9f 4f       	sbci	r25, 0xFF	; 255
    33dc:	29 da       	rcall	.-2990   	; 0x2830 <uECC_shared_secret>
    33de:	89 83       	std	Y+1, r24	; 0x01
    33e0:	20 e0       	ldi	r18, 0x00	; 0
	uint8_t secret[32];
	uint32_t len = 256;
	sha256(secret, secret_unhashed, len);
    33e2:	31 e0       	ldi	r19, 0x01	; 1
    33e4:	40 e0       	ldi	r20, 0x00	; 0
    33e6:	50 e0       	ldi	r21, 0x00	; 0
    33e8:	be 01       	movw	r22, r28
    33ea:	6e 59       	subi	r22, 0x9E	; 158
    33ec:	7f 4f       	sbci	r23, 0xFF	; 255
    33ee:	ce 01       	movw	r24, r28
    33f0:	8e 53       	subi	r24, 0x3E	; 62
    33f2:	9f 4f       	sbci	r25, 0xFF	; 255
    33f4:	71 d2       	rcall	.+1250   	; 0x38d8 <sha256>
    33f6:	68 e0       	ldi	r22, 0x08	; 8
	
	//Send new public key.
	can_send_frame_buffer(public2, 8);
    33f8:	ce 01       	movw	r24, r28
    33fa:	82 96       	adiw	r24, 0x22	; 34
    33fc:	0e 94 95 03 	call	0x72a	; 0x72a <can_send_frame_buffer>
    3400:	8b ee       	ldi	r24, 0xEB	; 235
	uart_puts("secret established");
    3402:	92 e0       	ldi	r25, 0x02	; 2
    3404:	0e 94 3c 2b 	call	0x5678	; 0x5678 <uart_puts>
    3408:	9e 01       	movw	r18, r28
	while(1){
		can_id_t id;
		can_msg_t message;
		
		// Receive the message that the tester wants to send to the network.
		can_receive_message(0, default_id, zero_mask, message);
    340a:	2e 5e       	subi	r18, 0xEE	; 238
    340c:	3e 4f       	sbci	r19, 0xFE	; 254
    340e:	4b e3       	ldi	r20, 0x3B	; 59
    3410:	53 e0       	ldi	r21, 0x03	; 3
    3412:	6d e3       	ldi	r22, 0x3D	; 61
    3414:	73 e0       	ldi	r23, 0x03	; 3
    3416:	80 e0       	ldi	r24, 0x00	; 0
    3418:	0e 94 55 03 	call	0x6aa	; 0x6aa <can_receive_message>
    341c:	be 01       	movw	r22, r28
		can_get_id(0, id);
    341e:	66 5e       	subi	r22, 0xE6	; 230
    3420:	7e 4f       	sbci	r23, 0xFE	; 254
    3422:	80 e0       	ldi	r24, 0x00	; 0
    3424:	0e 94 cf 02 	call	0x59e	; 0x59e <can_get_id>
		
		//Check the Permission.
		if(check_permission(id, role) == 0){
    3428:	6d 2d       	mov	r22, r13
    342a:	ce 01       	movw	r24, r28
    342c:	86 5e       	subi	r24, 0xE6	; 230
    342e:	9e 4f       	sbci	r25, 0xFE	; 254
    3430:	20 d1       	rcall	.+576    	; 0x3672 <check_permission>
    3432:	89 2b       	or	r24, r25
    3434:	79 f5       	brne	.+94     	; 0x3494 <session_authentication+0x110>
    3436:	8b ec       	ldi	r24, 0xCB	; 203
			uart_puts("Permission Ok");
    3438:	92 e0       	ldi	r25, 0x02	; 2
    343a:	0e 94 3c 2b 	call	0x5678	; 0x5678 <uart_puts>
    343e:	43 e3       	ldi	r20, 0x33	; 51
			can_send_message(0, default_id, ack_pos);
    3440:	53 e0       	ldi	r21, 0x03	; 3
    3442:	6d e3       	ldi	r22, 0x3D	; 61
    3444:	73 e0       	ldi	r23, 0x03	; 3
    3446:	80 e0       	ldi	r24, 0x00	; 0
    3448:	0e 94 33 03 	call	0x666	; 0x666 <can_send_message>
    344c:	62 e0       	ldi	r22, 0x02	; 2
		
		// Acknowledge permission.
		uint8_t mac[16];
		
		// Receive the MAC of the message
		can_receive_frame_buffer(mac,2);
    344e:	ce 01       	movw	r24, r28
    3450:	8e 5f       	subi	r24, 0xFE	; 254
    3452:	9e 4f       	sbci	r25, 0xFE	; 254
    3454:	0e 94 bc 03 	call	0x778	; 0x778 <can_receive_frame_buffer>
    3458:	10 e4       	ldi	r17, 0x40	; 64
		uint8_t mac2[32];
		uint16_t klen = 256;
		uint32_t msglen = 64;
		hmac_sha256(mac2, secret, klen ,message , msglen);
    345a:	e1 2e       	mov	r14, r17
    345c:	f1 2c       	mov	r15, r1
    345e:	00 e0       	ldi	r16, 0x00	; 0
    3460:	10 e0       	ldi	r17, 0x00	; 0
    3462:	9e 01       	movw	r18, r28
    3464:	2e 5e       	subi	r18, 0xEE	; 238
    3466:	3e 4f       	sbci	r19, 0xFE	; 254
    3468:	40 e0       	ldi	r20, 0x00	; 0
    346a:	51 e0       	ldi	r21, 0x01	; 1
    346c:	be 01       	movw	r22, r28
    346e:	6e 53       	subi	r22, 0x3E	; 62
    3470:	7f 4f       	sbci	r23, 0xFF	; 255
    3472:	ce 01       	movw	r24, r28
    3474:	8e 51       	subi	r24, 0x1E	; 30
    3476:	9f 4f       	sbci	r25, 0xFF	; 255
    3478:	17 d1       	rcall	.+558    	; 0x36a8 <hmac_sha256>
    347a:	40 e1       	ldi	r20, 0x10	; 16
		
		//Check the MAC.
		if(memcmp(mac, mac2, 16) == 0){
    347c:	50 e0       	ldi	r21, 0x00	; 0
    347e:	be 01       	movw	r22, r28
    3480:	6e 51       	subi	r22, 0x1E	; 30
    3482:	7f 4f       	sbci	r23, 0xFF	; 255
    3484:	ce 01       	movw	r24, r28
    3486:	8e 5f       	subi	r24, 0xFE	; 254
    3488:	9e 4f       	sbci	r25, 0xFE	; 254
    348a:	0e 94 7f 2d 	call	0x5afe	; 0x5afe <memcmp>
    348e:	89 2b       	or	r24, r25
    3490:	69 f0       	breq	.+26     	; 0x34ac <session_authentication+0x128>
    3492:	1f c0       	rjmp	.+62     	; 0x34d2 <session_authentication+0x14e>
    3494:	89 ed       	ldi	r24, 0xD9	; 217
		//Check the Permission.
		if(check_permission(id, role) == 0){
			uart_puts("Permission Ok");
			can_send_message(0, default_id, ack_pos);
		}else{
			uart_puts("Permission Failed");
    3496:	92 e0       	ldi	r25, 0x02	; 2
    3498:	0e 94 3c 2b 	call	0x5678	; 0x5678 <uart_puts>
    349c:	4b e2       	ldi	r20, 0x2B	; 43
			can_send_message(0, default_id, ack_neg);
    349e:	53 e0       	ldi	r21, 0x03	; 3
    34a0:	6d e3       	ldi	r22, 0x3D	; 61
    34a2:	73 e0       	ldi	r23, 0x03	; 3
    34a4:	80 e0       	ldi	r24, 0x00	; 0
    34a6:	0e 94 33 03 	call	0x666	; 0x666 <can_send_message>
    34aa:	ae cf       	rjmp	.-164    	; 0x3408 <session_authentication+0x84>
			continue;
    34ac:	8e ef       	ldi	r24, 0xFE	; 254
		uint32_t msglen = 64;
		hmac_sha256(mac2, secret, klen ,message , msglen);
		
		//Check the MAC.
		if(memcmp(mac, mac2, 16) == 0){
			uart_puts("Authentication Ok");
    34ae:	92 e0       	ldi	r25, 0x02	; 2
    34b0:	0e 94 3c 2b 	call	0x5678	; 0x5678 <uart_puts>
    34b4:	43 e3       	ldi	r20, 0x33	; 51
			can_send_message(0, default_id, ack_pos);
    34b6:	53 e0       	ldi	r21, 0x03	; 3
    34b8:	6d e3       	ldi	r22, 0x3D	; 61
    34ba:	73 e0       	ldi	r23, 0x03	; 3
    34bc:	80 e0       	ldi	r24, 0x00	; 0
    34be:	0e 94 33 03 	call	0x666	; 0x666 <can_send_message>
			can_send_message(0, default_id, ack_neg);
			continue;
		}
		
		//Forward the message to the internal vehicle network.
		forward_message(message, id);
    34c2:	be 01       	movw	r22, r28
    34c4:	66 5e       	subi	r22, 0xE6	; 230
    34c6:	7e 4f       	sbci	r23, 0xFE	; 254
    34c8:	ce 01       	movw	r24, r28
    34ca:	8e 5e       	subi	r24, 0xEE	; 238
    34cc:	9e 4f       	sbci	r25, 0xFE	; 254
    34ce:	77 de       	rcall	.-786    	; 0x31be <forward_message>
    34d0:	9b cf       	rjmp	.-202    	; 0x3408 <session_authentication+0x84>
    34d2:	80 e1       	ldi	r24, 0x10	; 16
		//Check the MAC.
		if(memcmp(mac, mac2, 16) == 0){
			uart_puts("Authentication Ok");
			can_send_message(0, default_id, ack_pos);
		}else{
			uart_puts("Authentication Failed");
    34d4:	93 e0       	ldi	r25, 0x03	; 3
    34d6:	0e 94 3c 2b 	call	0x5678	; 0x5678 <uart_puts>
    34da:	4b e2       	ldi	r20, 0x2B	; 43
			can_send_message(0, default_id, ack_neg);
    34dc:	53 e0       	ldi	r21, 0x03	; 3
    34de:	6d e3       	ldi	r22, 0x3D	; 61
    34e0:	73 e0       	ldi	r23, 0x03	; 3
    34e2:	80 e0       	ldi	r24, 0x00	; 0
    34e4:	0e 94 33 03 	call	0x666	; 0x666 <can_send_message>
    34e8:	8f cf       	rjmp	.-226    	; 0x3408 <session_authentication+0x84>

000034ea <main>:
			continue;
    34ea:	cf 93       	push	r28
	uart_puts("------------------------------------");
}


 int main()
 {
    34ec:	df 93       	push	r29
    34ee:	cd b7       	in	r28, 0x3d	; 61
    34f0:	de b7       	in	r29, 0x3e	; 62
    34f2:	28 97       	sbiw	r28, 0x08	; 8
    34f4:	0f b6       	in	r0, 0x3f	; 63
    34f6:	f8 94       	cli
    34f8:	de bf       	out	0x3e, r29	; 62
    34fa:	0f be       	out	0x3f, r0	; 63
    34fc:	cd bf       	out	0x3d, r28	; 61
	uart_init();
    34fe:	0e 94 30 2b 	call	0x5660	; 0x5660 <uart_init>
	buttons_init();
    3502:	16 de       	rcall	.-980    	; 0x3130 <buttons_init>
	can_init();
    3504:	0e 94 62 02 	call	0x4c4	; 0x4c4 <can_init>
	init_permissions_table();
    3508:	69 d0       	rcall	.+210    	; 0x35dc <init_permissions_table>
	uart_puts("idle");
    350a:	86 e2       	ldi	r24, 0x26	; 38
    350c:	93 e0       	ldi	r25, 0x03	; 3
    350e:	0e 94 3c 2b 	call	0x5678	; 0x5678 <uart_puts>
	can_msg_t init;
	while(1){
		can_receive_message(0, default_id, zero_mask, init);
    3512:	9e 01       	movw	r18, r28
    3514:	2f 5f       	subi	r18, 0xFF	; 255
    3516:	3f 4f       	sbci	r19, 0xFF	; 255
    3518:	4b e3       	ldi	r20, 0x3B	; 59
    351a:	53 e0       	ldi	r21, 0x03	; 3
    351c:	6d e3       	ldi	r22, 0x3D	; 61
    351e:	73 e0       	ldi	r23, 0x03	; 3
    3520:	80 e0       	ldi	r24, 0x00	; 0
    3522:	0e 94 55 03 	call	0x6aa	; 0x6aa <can_receive_message>
		if(auth_protocol == SINGLE){
    3526:	80 91 56 05 	lds	r24, 0x0556	; 0x800556 <auth_protocol>
    352a:	88 23       	and	r24, r24
			single_authentication(init[0]);
			return 0;
		}else{
			session_authentication(init[0]);
    352c:	11 f0       	breq	.+4      	; 0x3532 <main+0x48>
    352e:	89 81       	ldd	r24, Y+1	; 0x01
	uart_puts("idle");
	can_msg_t init;
	while(1){
		can_receive_message(0, default_id, zero_mask, init);
		if(auth_protocol == SINGLE){
			single_authentication(init[0]);
    3530:	29 df       	rcall	.-430    	; 0x3384 <session_authentication>
    3532:	89 81       	ldd	r24, Y+1	; 0x01
    3534:	97 de       	rcall	.-722    	; 0x3264 <single_authentication>
		}else{
			session_authentication(init[0]);
			return 0;
		}
	}
 }
    3536:	80 e0       	ldi	r24, 0x00	; 0
    3538:	90 e0       	ldi	r25, 0x00	; 0
    353a:	28 96       	adiw	r28, 0x08	; 8
    353c:	0f b6       	in	r0, 0x3f	; 63
    353e:	f8 94       	cli
    3540:	de bf       	out	0x3e, r29	; 62
    3542:	0f be       	out	0x3f, r0	; 63
    3544:	cd bf       	out	0x3d, r28	; 61
    3546:	df 91       	pop	r29
    3548:	cf 91       	pop	r28
    354a:	08 95       	ret

0000354c <add_entry>:
	hex_to_bytes(hex, 4, id);
	add_entry(id, permissions);
	return 0;
}

int add_entry(can_id_t id, permissions_t permissions){
    354c:	1f 93       	push	r17
    354e:	cf 93       	push	r28
    3550:	df 93       	push	r29
    3552:	ec 01       	movw	r28, r24
    3554:	16 2f       	mov	r17, r22
	entry_t *new_entry; 
	new_entry = malloc(sizeof(entry_t));
    3556:	85 e0       	ldi	r24, 0x05	; 5
    3558:	90 e0       	ldi	r25, 0x00	; 0
    355a:	0e 94 00 2c 	call	0x5800	; 0x5800 <malloc>
    355e:	dc 01       	movw	r26, r24
	new_entry->permissions = permissions;
    3560:	12 96       	adiw	r26, 0x02	; 2
    3562:	1c 93       	st	X, r17
    3564:	12 97       	sbiw	r26, 0x02	; 2
	new_entry->successor = NULL;
    3566:	14 96       	adiw	r26, 0x04	; 4
    3568:	1c 92       	st	X, r1
    356a:	1e 92       	st	-X, r1
    356c:	13 97       	sbiw	r26, 0x03	; 3
	memcpy(new_entry->id, id, sizeof(can_id_t));
    356e:	88 81       	ld	r24, Y
    3570:	99 81       	ldd	r25, Y+1	; 0x01
    3572:	11 96       	adiw	r26, 0x01	; 1
    3574:	9c 93       	st	X, r25
    3576:	8e 93       	st	-X, r24
	entry_t *curr = permission_table->head;
    3578:	c0 91 57 05 	lds	r28, 0x0557	; 0x800557 <permission_table>
    357c:	d0 91 58 05 	lds	r29, 0x0558	; 0x800558 <permission_table+0x1>
    3580:	e8 81       	ld	r30, Y
    3582:	f9 81       	ldd	r31, Y+1	; 0x01
	if(curr != NULL){
    3584:	30 97       	sbiw	r30, 0x00	; 0
    3586:	11 f4       	brne	.+4      	; 0x358c <add_entry+0x40>
    3588:	09 c0       	rjmp	.+18     	; 0x359c <add_entry+0x50>
		while(curr->successor != NULL){
			curr = curr->successor;
    358a:	f9 01       	movw	r30, r18
	new_entry->permissions = permissions;
	new_entry->successor = NULL;
	memcpy(new_entry->id, id, sizeof(can_id_t));
	entry_t *curr = permission_table->head;
	if(curr != NULL){
		while(curr->successor != NULL){
    358c:	23 81       	ldd	r18, Z+3	; 0x03
    358e:	34 81       	ldd	r19, Z+4	; 0x04
    3590:	21 15       	cp	r18, r1
    3592:	31 05       	cpc	r19, r1
    3594:	d1 f7       	brne	.-12     	; 0x358a <add_entry+0x3e>
			curr = curr->successor;
		}
		curr->successor = new_entry;
    3596:	b4 83       	std	Z+4, r27	; 0x04
    3598:	a3 83       	std	Z+3, r26	; 0x03
    359a:	02 c0       	rjmp	.+4      	; 0x35a0 <add_entry+0x54>
	}else{
		permission_table->head = new_entry;
    359c:	b9 83       	std	Y+1, r27	; 0x01
    359e:	a8 83       	st	Y, r26
	}
	return 0;
}
    35a0:	80 e0       	ldi	r24, 0x00	; 0
    35a2:	90 e0       	ldi	r25, 0x00	; 0
    35a4:	df 91       	pop	r29
    35a6:	cf 91       	pop	r28
    35a8:	1f 91       	pop	r17
    35aa:	08 95       	ret

000035ac <add_entry_hex>:
	add_entry_hex("e007", permissions);
	add_entry_hex("2607", permissions);
	add_entry_hex("3007", permissions);
}

int add_entry_hex(char *hex, permissions_t permissions){
    35ac:	1f 93       	push	r17
    35ae:	cf 93       	push	r28
    35b0:	df 93       	push	r29
    35b2:	00 d0       	rcall	.+0      	; 0x35b4 <add_entry_hex+0x8>
    35b4:	cd b7       	in	r28, 0x3d	; 61
    35b6:	de b7       	in	r29, 0x3e	; 62
    35b8:	16 2f       	mov	r17, r22
	can_id_t id;
	hex_to_bytes(hex, 4, id);
    35ba:	ae 01       	movw	r20, r28
    35bc:	4f 5f       	subi	r20, 0xFF	; 255
    35be:	5f 4f       	sbci	r21, 0xFF	; 255
    35c0:	64 e0       	ldi	r22, 0x04	; 4
    35c2:	d9 dc       	rcall	.-1614   	; 0x2f76 <hex_to_bytes>
	add_entry(id, permissions);
    35c4:	61 2f       	mov	r22, r17
    35c6:	ce 01       	movw	r24, r28
    35c8:	01 96       	adiw	r24, 0x01	; 1
    35ca:	c0 df       	rcall	.-128    	; 0x354c <add_entry>
	return 0;
}
    35cc:	80 e0       	ldi	r24, 0x00	; 0
    35ce:	90 e0       	ldi	r25, 0x00	; 0
    35d0:	0f 90       	pop	r0
    35d2:	0f 90       	pop	r0
    35d4:	df 91       	pop	r29
    35d6:	cf 91       	pop	r28
    35d8:	1f 91       	pop	r17
    35da:	08 95       	ret

000035dc <init_permissions_table>:
#include <string.h>

permission_table_t *permission_table; 

void init_permissions_table(){
	permission_table = malloc(sizeof(permission_table_t));
    35dc:	82 e0       	ldi	r24, 0x02	; 2
    35de:	90 e0       	ldi	r25, 0x00	; 0
    35e0:	0e 94 00 2c 	call	0x5800	; 0x5800 <malloc>
    35e4:	90 93 58 05 	sts	0x0558, r25	; 0x800558 <permission_table+0x1>
    35e8:	80 93 57 05 	sts	0x0557, r24	; 0x800557 <permission_table>
	permission_table->head = NULL;
    35ec:	fc 01       	movw	r30, r24
    35ee:	11 82       	std	Z+1, r1	; 0x01
    35f0:	10 82       	st	Z, r1
	permissions_t permissions = 0b00001111;
	add_entry_hex("b107", permissions);
    35f2:	6f e0       	ldi	r22, 0x0F	; 15
    35f4:	8f e3       	ldi	r24, 0x3F	; 63
    35f6:	95 e0       	ldi	r25, 0x05	; 5
    35f8:	d9 df       	rcall	.-78     	; 0x35ac <add_entry_hex>
	add_entry_hex("e007", permissions);
    35fa:	6f e0       	ldi	r22, 0x0F	; 15
    35fc:	84 e4       	ldi	r24, 0x44	; 68
    35fe:	95 e0       	ldi	r25, 0x05	; 5
    3600:	d5 df       	rcall	.-86     	; 0x35ac <add_entry_hex>
	add_entry_hex("2607", permissions);
    3602:	6f e0       	ldi	r22, 0x0F	; 15
    3604:	89 e4       	ldi	r24, 0x49	; 73
    3606:	95 e0       	ldi	r25, 0x05	; 5
    3608:	d1 df       	rcall	.-94     	; 0x35ac <add_entry_hex>
	add_entry_hex("3007", permissions);
    360a:	6f e0       	ldi	r22, 0x0F	; 15
    360c:	8e e4       	ldi	r24, 0x4E	; 78
    360e:	95 e0       	ldi	r25, 0x05	; 5
    3610:	cd cf       	rjmp	.-102    	; 0x35ac <add_entry_hex>
    3612:	08 95       	ret

00003614 <entrycmp>:
	}
	return 0;
}

int entrycmp(entry_t *entry, can_id_t msg_id){
	return memcmp(entry->id, msg_id, 2);
    3614:	42 e0       	ldi	r20, 0x02	; 2
    3616:	50 e0       	ldi	r21, 0x00	; 0
    3618:	0c 94 7f 2d 	jmp	0x5afe	; 0x5afe <memcmp>
}
    361c:	08 95       	ret

0000361e <find_entry_permissions>:

int find_entry_permissions(can_id_t msg_id, permissions_t *dest){
    361e:	ef 92       	push	r14
    3620:	ff 92       	push	r15
    3622:	0f 93       	push	r16
    3624:	1f 93       	push	r17
    3626:	cf 93       	push	r28
    3628:	df 93       	push	r29
    362a:	8c 01       	movw	r16, r24
    362c:	7b 01       	movw	r14, r22
	entry_t *curr = permission_table->head;
    362e:	e0 91 57 05 	lds	r30, 0x0557	; 0x800557 <permission_table>
    3632:	f0 91 58 05 	lds	r31, 0x0558	; 0x800558 <permission_table+0x1>
    3636:	c0 81       	ld	r28, Z
    3638:	d1 81       	ldd	r29, Z+1	; 0x01
	while(curr != NULL){
    363a:	20 97       	sbiw	r28, 0x00	; 0
    363c:	89 f0       	breq	.+34     	; 0x3660 <find_entry_permissions+0x42>
		if(entrycmp(curr, msg_id) == 0){
    363e:	b8 01       	movw	r22, r16
    3640:	ce 01       	movw	r24, r28
    3642:	e8 df       	rcall	.-48     	; 0x3614 <entrycmp>
    3644:	00 97       	sbiw	r24, 0x00	; 0
    3646:	21 f4       	brne	.+8      	; 0x3650 <find_entry_permissions+0x32>
			*dest = curr->permissions;
    3648:	2a 81       	ldd	r18, Y+2	; 0x02
    364a:	f7 01       	movw	r30, r14
    364c:	20 83       	st	Z, r18
			return 0;
    364e:	0a c0       	rjmp	.+20     	; 0x3664 <find_entry_permissions+0x46>
		}else{
			curr = curr->successor;
    3650:	0b 80       	ldd	r0, Y+3	; 0x03
    3652:	dc 81       	ldd	r29, Y+4	; 0x04
    3654:	c0 2d       	mov	r28, r0
	return memcmp(entry->id, msg_id, 2);
}

int find_entry_permissions(can_id_t msg_id, permissions_t *dest){
	entry_t *curr = permission_table->head;
	while(curr != NULL){
    3656:	20 97       	sbiw	r28, 0x00	; 0
    3658:	91 f7       	brne	.-28     	; 0x363e <find_entry_permissions+0x20>
			return 0;
		}else{
			curr = curr->successor;
		}
	}
	return 1;
    365a:	81 e0       	ldi	r24, 0x01	; 1
    365c:	90 e0       	ldi	r25, 0x00	; 0
    365e:	02 c0       	rjmp	.+4      	; 0x3664 <find_entry_permissions+0x46>
    3660:	81 e0       	ldi	r24, 0x01	; 1
    3662:	90 e0       	ldi	r25, 0x00	; 0
}
    3664:	df 91       	pop	r29
    3666:	cf 91       	pop	r28
    3668:	1f 91       	pop	r17
    366a:	0f 91       	pop	r16
    366c:	ff 90       	pop	r15
    366e:	ef 90       	pop	r14
    3670:	08 95       	ret

00003672 <check_permission>:

int check_permission(can_id_t msg_id, permissions_t role){
    3672:	1f 93       	push	r17
    3674:	cf 93       	push	r28
    3676:	df 93       	push	r29
    3678:	1f 92       	push	r1
    367a:	cd b7       	in	r28, 0x3d	; 61
    367c:	de b7       	in	r29, 0x3e	; 62
    367e:	16 2f       	mov	r17, r22
	volatile permissions_t permissions;
	if(find_entry_permissions(msg_id, &permissions)) return 1;
    3680:	be 01       	movw	r22, r28
    3682:	6f 5f       	subi	r22, 0xFF	; 255
    3684:	7f 4f       	sbci	r23, 0xFF	; 255
    3686:	cb df       	rcall	.-106    	; 0x361e <find_entry_permissions>
    3688:	00 97       	sbiw	r24, 0x00	; 0
    368a:	39 f4       	brne	.+14     	; 0x369a <check_permission+0x28>
	if((permissions & role) == role) return 0; 
    368c:	29 81       	ldd	r18, Y+1	; 0x01
    368e:	21 23       	and	r18, r17
    3690:	12 17       	cp	r17, r18
    3692:	29 f0       	breq	.+10     	; 0x369e <check_permission+0x2c>
	return 2;
    3694:	82 e0       	ldi	r24, 0x02	; 2
    3696:	90 e0       	ldi	r25, 0x00	; 0
    3698:	02 c0       	rjmp	.+4      	; 0x369e <check_permission+0x2c>
	return 1;
}

int check_permission(can_id_t msg_id, permissions_t role){
	volatile permissions_t permissions;
	if(find_entry_permissions(msg_id, &permissions)) return 1;
    369a:	81 e0       	ldi	r24, 0x01	; 1
    369c:	90 e0       	ldi	r25, 0x00	; 0
	if((permissions & role) == role) return 0; 
	return 2;
    369e:	0f 90       	pop	r0
    36a0:	df 91       	pop	r29
    36a2:	cf 91       	pop	r28
    36a4:	1f 91       	pop	r17
    36a6:	08 95       	ret

000036a8 <hmac_sha256>:

/*
 * keylength in bits!
 * message length in bits!
 */
void hmac_sha256(void *dest, const void *key, uint16_t keylength_b, const void *msg, uint32_t msglength_b){ /* a one-shot*/
    36a8:	2f 92       	push	r2
    36aa:	3f 92       	push	r3
    36ac:	4f 92       	push	r4
    36ae:	5f 92       	push	r5
    36b0:	6f 92       	push	r6
    36b2:	7f 92       	push	r7
    36b4:	8f 92       	push	r8
    36b6:	9f 92       	push	r9
    36b8:	af 92       	push	r10
    36ba:	bf 92       	push	r11
    36bc:	cf 92       	push	r12
    36be:	df 92       	push	r13
    36c0:	ef 92       	push	r14
    36c2:	ff 92       	push	r15
    36c4:	0f 93       	push	r16
    36c6:	1f 93       	push	r17
    36c8:	cf 93       	push	r28
    36ca:	df 93       	push	r29
    36cc:	cd b7       	in	r28, 0x3d	; 61
    36ce:	de b7       	in	r29, 0x3e	; 62
    36d0:	c8 56       	subi	r28, 0x68	; 104
    36d2:	d1 09       	sbc	r29, r1
    36d4:	0f b6       	in	r0, 0x3f	; 63
    36d6:	f8 94       	cli
    36d8:	de bf       	out	0x3e, r29	; 62
    36da:	0f be       	out	0x3f, r0	; 63
    36dc:	cd bf       	out	0x3d, r28	; 61
    36de:	1c 01       	movw	r2, r24
    36e0:	49 01       	movw	r8, r18
    36e2:	a9 96       	adiw	r28, 0x29	; 41
    36e4:	ec ae       	std	Y+60, r14	; 0x3c
    36e6:	fd ae       	std	Y+61, r15	; 0x3d
    36e8:	0e af       	std	Y+62, r16	; 0x3e
    36ea:	1f af       	std	Y+63, r17	; 0x3f
    36ec:	a9 97       	sbiw	r28, 0x29	; 41
	sha256_ctx_t s;
	uint8_t i;
	uint8_t buffer[HMAC_SHA256_BLOCK_BYTES];
	
	memset(buffer, 0, HMAC_SHA256_BLOCK_BYTES);
    36ee:	fe 01       	movw	r30, r28
    36f0:	b5 96       	adiw	r30, 0x25	; 37
    36f2:	80 e4       	ldi	r24, 0x40	; 64
    36f4:	df 01       	movw	r26, r30
    36f6:	1d 92       	st	X+, r1
    36f8:	8a 95       	dec	r24
    36fa:	e9 f7       	brne	.-6      	; 0x36f6 <hmac_sha256+0x4e>
	
	/* if key is larger than a block we have to hash it*/
	if (keylength_b > SHA256_BLOCK_BITS){
    36fc:	41 30       	cpi	r20, 0x01	; 1
    36fe:	b2 e0       	ldi	r27, 0x02	; 2
    3700:	5b 07       	cpc	r21, r27
    3702:	30 f0       	brcs	.+12     	; 0x3710 <hmac_sha256+0x68>
		sha256((void*)buffer, key, keylength_b);
    3704:	9a 01       	movw	r18, r20
    3706:	40 e0       	ldi	r20, 0x00	; 0
    3708:	50 e0       	ldi	r21, 0x00	; 0
    370a:	cf 01       	movw	r24, r30
    370c:	e5 d0       	rcall	.+458    	; 0x38d8 <sha256>
    370e:	96 c0       	rjmp	.+300    	; 0x383c <hmac_sha256+0x194>
	} else {
		memcpy(buffer, key, (keylength_b+7)/8);
    3710:	49 5f       	subi	r20, 0xF9	; 249
    3712:	5f 4f       	sbci	r21, 0xFF	; 255
    3714:	56 95       	lsr	r21
    3716:	47 95       	ror	r20
    3718:	56 95       	lsr	r21
    371a:	47 95       	ror	r20
    371c:	56 95       	lsr	r21
    371e:	47 95       	ror	r20
    3720:	ce 01       	movw	r24, r28
    3722:	85 96       	adiw	r24, 0x25	; 37
    3724:	0e 94 8c 2d 	call	0x5b18	; 0x5b18 <memcpy>
    3728:	89 c0       	rjmp	.+274    	; 0x383c <hmac_sha256+0x194>
	}
	
	for (i=0; i<SHA256_BLOCK_BYTES; ++i){
		buffer[i] ^= IPAD;
    372a:	80 81       	ld	r24, Z
    372c:	89 27       	eor	r24, r25
    372e:	81 93       	st	Z+, r24
		sha256((void*)buffer, key, keylength_b);
	} else {
		memcpy(buffer, key, (keylength_b+7)/8);
	}
	
	for (i=0; i<SHA256_BLOCK_BYTES; ++i){
    3730:	ec 15       	cp	r30, r12
    3732:	fd 05       	cpc	r31, r13
    3734:	d1 f7       	brne	.-12     	; 0x372a <hmac_sha256+0x82>
		buffer[i] ^= IPAD;
	}
	sha256_init(&s);
    3736:	ce 01       	movw	r24, r28
    3738:	01 96       	adiw	r24, 0x01	; 1
    373a:	a4 d0       	rcall	.+328    	; 0x3884 <sha256_init>
	sha256_nextBlock(&s, buffer);
    373c:	be 01       	movw	r22, r28
    373e:	6b 5d       	subi	r22, 0xDB	; 219
    3740:	7f 4f       	sbci	r23, 0xFF	; 255
    3742:	ce 01       	movw	r24, r28
    3744:	01 96       	adiw	r24, 0x01	; 1
    3746:	aa d0       	rcall	.+340    	; 0x389c <sha256_nextBlock>
	while (msglength_b >= HMAC_SHA256_BLOCK_BITS){
    3748:	a9 96       	adiw	r28, 0x29	; 41
    374a:	8c ad       	ldd	r24, Y+60	; 0x3c
    374c:	9d ad       	ldd	r25, Y+61	; 0x3d
    374e:	ae ad       	ldd	r26, Y+62	; 0x3e
    3750:	bf ad       	ldd	r27, Y+63	; 0x3f
    3752:	a9 97       	sbiw	r28, 0x29	; 41
    3754:	81 15       	cp	r24, r1
    3756:	e2 e0       	ldi	r30, 0x02	; 2
    3758:	9e 07       	cpc	r25, r30
    375a:	a1 05       	cpc	r26, r1
    375c:	b1 05       	cpc	r27, r1
    375e:	08 f4       	brcc	.+2      	; 0x3762 <hmac_sha256+0xba>
    3760:	41 c0       	rjmp	.+130    	; 0x37e4 <hmac_sha256+0x13c>
    3762:	2c 01       	movw	r4, r24
    3764:	3d 01       	movw	r6, r26
    3766:	54 01       	movw	r10, r8
		sha256_nextBlock(&s, msg);
    3768:	b5 01       	movw	r22, r10
    376a:	ce 01       	movw	r24, r28
    376c:	01 96       	adiw	r24, 0x01	; 1
    376e:	96 d0       	rcall	.+300    	; 0x389c <sha256_nextBlock>
		msg = (uint8_t*)msg + HMAC_SHA256_BLOCK_BYTES;
    3770:	f0 e4       	ldi	r31, 0x40	; 64
    3772:	af 0e       	add	r10, r31
    3774:	b1 1c       	adc	r11, r1
		msglength_b -=  HMAC_SHA256_BLOCK_BITS;
    3776:	22 e0       	ldi	r18, 0x02	; 2
    3778:	52 1a       	sub	r5, r18
    377a:	61 08       	sbc	r6, r1
    377c:	71 08       	sbc	r7, r1
	for (i=0; i<SHA256_BLOCK_BYTES; ++i){
		buffer[i] ^= IPAD;
	}
	sha256_init(&s);
	sha256_nextBlock(&s, buffer);
	while (msglength_b >= HMAC_SHA256_BLOCK_BITS){
    377e:	41 14       	cp	r4, r1
    3780:	82 e0       	ldi	r24, 0x02	; 2
    3782:	58 06       	cpc	r5, r24
    3784:	61 04       	cpc	r6, r1
    3786:	71 04       	cpc	r7, r1
    3788:	78 f7       	brcc	.-34     	; 0x3768 <hmac_sha256+0xc0>
    378a:	a9 96       	adiw	r28, 0x29	; 41
    378c:	8c ad       	ldd	r24, Y+60	; 0x3c
    378e:	9d ad       	ldd	r25, Y+61	; 0x3d
    3790:	ae ad       	ldd	r26, Y+62	; 0x3e
    3792:	bf ad       	ldd	r27, Y+63	; 0x3f
    3794:	a9 97       	sbiw	r28, 0x29	; 41
    3796:	92 50       	subi	r25, 0x02	; 2
    3798:	a1 09       	sbc	r26, r1
    379a:	b1 09       	sbc	r27, r1
    379c:	07 2e       	mov	r0, r23
    379e:	79 e0       	ldi	r23, 0x09	; 9
    37a0:	b6 95       	lsr	r27
    37a2:	a7 95       	ror	r26
    37a4:	97 95       	ror	r25
    37a6:	87 95       	ror	r24
    37a8:	7a 95       	dec	r23
    37aa:	d1 f7       	brne	.-12     	; 0x37a0 <hmac_sha256+0xf8>
    37ac:	70 2d       	mov	r23, r0
    37ae:	01 96       	adiw	r24, 0x01	; 1
    37b0:	00 24       	eor	r0, r0
    37b2:	96 95       	lsr	r25
    37b4:	87 95       	ror	r24
    37b6:	07 94       	ror	r0
    37b8:	96 95       	lsr	r25
    37ba:	87 95       	ror	r24
    37bc:	07 94       	ror	r0
    37be:	98 2f       	mov	r25, r24
    37c0:	80 2d       	mov	r24, r0
    37c2:	88 0e       	add	r8, r24
    37c4:	99 1e       	adc	r9, r25
    37c6:	a9 96       	adiw	r28, 0x29	; 41
    37c8:	8c ad       	ldd	r24, Y+60	; 0x3c
    37ca:	9d ad       	ldd	r25, Y+61	; 0x3d
    37cc:	ae ad       	ldd	r26, Y+62	; 0x3e
    37ce:	bf ad       	ldd	r27, Y+63	; 0x3f
    37d0:	a9 97       	sbiw	r28, 0x29	; 41
    37d2:	91 70       	andi	r25, 0x01	; 1
    37d4:	aa 27       	eor	r26, r26
    37d6:	bb 27       	eor	r27, r27
    37d8:	a9 96       	adiw	r28, 0x29	; 41
    37da:	8c af       	std	Y+60, r24	; 0x3c
    37dc:	9d af       	std	Y+61, r25	; 0x3d
    37de:	ae af       	std	Y+62, r26	; 0x3e
    37e0:	bf af       	std	Y+63, r27	; 0x3f
    37e2:	a9 97       	sbiw	r28, 0x29	; 41
		sha256_nextBlock(&s, msg);
		msg = (uint8_t*)msg + HMAC_SHA256_BLOCK_BYTES;
		msglength_b -=  HMAC_SHA256_BLOCK_BITS;
	}
	sha256_lastBlock(&s, msg, msglength_b);
    37e4:	a7 96       	adiw	r28, 0x27	; 39
    37e6:	4e ad       	ldd	r20, Y+62	; 0x3e
    37e8:	5f ad       	ldd	r21, Y+63	; 0x3f
    37ea:	a7 97       	sbiw	r28, 0x27	; 39
    37ec:	b4 01       	movw	r22, r8
    37ee:	ce 01       	movw	r24, r28
    37f0:	01 96       	adiw	r24, 0x01	; 1
    37f2:	57 d0       	rcall	.+174    	; 0x38a2 <sha256_lastBlock>
	/* since buffer still contains key xor ipad we can do ... */
	for (i=0; i<HMAC_SHA256_BLOCK_BYTES; ++i){
		buffer[i] ^= IPAD ^ OPAD;
    37f4:	9a e6       	ldi	r25, 0x6A	; 106
    37f6:	d8 01       	movw	r26, r16
    37f8:	8c 91       	ld	r24, X
    37fa:	89 27       	eor	r24, r25
    37fc:	f8 01       	movw	r30, r16
    37fe:	81 93       	st	Z+, r24
    3800:	8f 01       	movw	r16, r30
		msg = (uint8_t*)msg + HMAC_SHA256_BLOCK_BYTES;
		msglength_b -=  HMAC_SHA256_BLOCK_BITS;
	}
	sha256_lastBlock(&s, msg, msglength_b);
	/* since buffer still contains key xor ipad we can do ... */
	for (i=0; i<HMAC_SHA256_BLOCK_BYTES; ++i){
    3802:	ec 15       	cp	r30, r12
    3804:	fd 05       	cpc	r31, r13
		buffer[i] ^= IPAD ^ OPAD;
	}
	sha256_ctx2hash(dest, &s); /* save inner hash temporary to dest */
    3806:	b9 f7       	brne	.-18     	; 0x37f6 <hmac_sha256+0x14e>
    3808:	be 01       	movw	r22, r28
    380a:	6f 5f       	subi	r22, 0xFF	; 255
    380c:	7f 4f       	sbci	r23, 0xFF	; 255
    380e:	c1 01       	movw	r24, r2
	sha256_init(&s);
    3810:	4b d0       	rcall	.+150    	; 0x38a8 <sha256_ctx2hash>
    3812:	ce 01       	movw	r24, r28
    3814:	01 96       	adiw	r24, 0x01	; 1
	sha256_nextBlock(&s, buffer);
    3816:	36 d0       	rcall	.+108    	; 0x3884 <sha256_init>
    3818:	be 01       	movw	r22, r28
    381a:	6b 5d       	subi	r22, 0xDB	; 219
    381c:	7f 4f       	sbci	r23, 0xFF	; 255
    381e:	ce 01       	movw	r24, r28
    3820:	01 96       	adiw	r24, 0x01	; 1
	sha256_lastBlock(&s, dest, SHA256_HASH_BITS);
    3822:	3c d0       	rcall	.+120    	; 0x389c <sha256_nextBlock>
    3824:	40 e0       	ldi	r20, 0x00	; 0
    3826:	51 e0       	ldi	r21, 0x01	; 1
    3828:	b1 01       	movw	r22, r2
    382a:	ce 01       	movw	r24, r28
    382c:	01 96       	adiw	r24, 0x01	; 1
	sha256_ctx2hash(dest, &s);
    382e:	39 d0       	rcall	.+114    	; 0x38a2 <sha256_lastBlock>
    3830:	be 01       	movw	r22, r28
    3832:	6f 5f       	subi	r22, 0xFF	; 255
    3834:	7f 4f       	sbci	r23, 0xFF	; 255
    3836:	c1 01       	movw	r24, r2
    3838:	37 d0       	rcall	.+110    	; 0x38a8 <sha256_ctx2hash>
}
    383a:	0a c0       	rjmp	.+20     	; 0x3850 <hmac_sha256+0x1a8>
    383c:	8e 01       	movw	r16, r28
    383e:	0b 5d       	subi	r16, 0xDB	; 219
    3840:	1f 4f       	sbci	r17, 0xFF	; 255
    3842:	6e 01       	movw	r12, r28
    3844:	f5 e6       	ldi	r31, 0x65	; 101
    3846:	cf 0e       	add	r12, r31
    3848:	d1 1c       	adc	r13, r1

/*
 * keylength in bits!
 * message length in bits!
 */
void hmac_sha256(void *dest, const void *key, uint16_t keylength_b, const void *msg, uint32_t msglength_b){ /* a one-shot*/
    384a:	f8 01       	movw	r30, r16
	} else {
		memcpy(buffer, key, (keylength_b+7)/8);
	}
	
	for (i=0; i<SHA256_BLOCK_BYTES; ++i){
		buffer[i] ^= IPAD;
    384c:	96 e3       	ldi	r25, 0x36	; 54
    384e:	6d cf       	rjmp	.-294    	; 0x372a <hmac_sha256+0x82>
	sha256_ctx2hash(dest, &s); /* save inner hash temporary to dest */
	sha256_init(&s);
	sha256_nextBlock(&s, buffer);
	sha256_lastBlock(&s, dest, SHA256_HASH_BITS);
	sha256_ctx2hash(dest, &s);
}
    3850:	c8 59       	subi	r28, 0x98	; 152
    3852:	df 4f       	sbci	r29, 0xFF	; 255
    3854:	0f b6       	in	r0, 0x3f	; 63
    3856:	f8 94       	cli
    3858:	de bf       	out	0x3e, r29	; 62
    385a:	0f be       	out	0x3f, r0	; 63
    385c:	cd bf       	out	0x3d, r28	; 61
    385e:	df 91       	pop	r29
    3860:	cf 91       	pop	r28
    3862:	1f 91       	pop	r17
    3864:	0f 91       	pop	r16
    3866:	ff 90       	pop	r15
    3868:	ef 90       	pop	r14
    386a:	df 90       	pop	r13
    386c:	cf 90       	pop	r12
    386e:	bf 90       	pop	r11
    3870:	af 90       	pop	r10
    3872:	9f 90       	pop	r9
    3874:	8f 90       	pop	r8
    3876:	7f 90       	pop	r7
    3878:	6f 90       	pop	r6
    387a:	5f 90       	pop	r5
    387c:	4f 90       	pop	r4
    387e:	3f 90       	pop	r3
    3880:	2f 90       	pop	r2
    3882:	08 95       	ret

00003884 <sha256_init>:
 * \c sh256_init c initialises the given sha256 context for hashing
 * @param state pointer to a sha256 context
 * @return none
 */
void sha256_init(sha256_ctx_t *state){
	state->length=0;
    3884:	fc 01       	movw	r30, r24
    3886:	10 a2       	std	Z+32, r1	; 0x20
    3888:	11 a2       	std	Z+33, r1	; 0x21
    388a:	12 a2       	std	Z+34, r1	; 0x22
    388c:	13 a2       	std	Z+35, r1	; 0x23
	memcpy_P(state->h, sha256_init_vector, 8*4);
    388e:	40 e2       	ldi	r20, 0x20	; 32
    3890:	50 e0       	ldi	r21, 0x00	; 0
    3892:	64 e9       	ldi	r22, 0x94	; 148
    3894:	70 e0       	ldi	r23, 0x00	; 0
    3896:	0c 94 76 2d 	jmp	0x5aec	; 0x5aec <memcpy_P>
    389a:	08 95       	ret

0000389c <sha256_nextBlock>:
}

/*************************************************************************/
void sha256_nextBlock (sha256_ctx_t *state, const void *block){
	sha2_small_common_nextBlock(state, block);
    389c:	0c 94 ad 26 	jmp	0x4d5a	; 0x4d5a <sha2_small_common_nextBlock>
    38a0:	08 95       	ret

000038a2 <sha256_lastBlock>:
}

/*************************************************************************/
void sha256_lastBlock (sha256_ctx_t *state, const void *block, uint16_t length_b){
	sha2_small_common_lastBlock(state, block, length_b);
    38a2:	0c 94 bd 29 	jmp	0x537a	; 0x537a <sha2_small_common_lastBlock>
    38a6:	08 95       	ret

000038a8 <sha256_ctx2hash>:



/*************************************************************************/

void sha256_ctx2hash(void *dest, const sha256_ctx_t *state){
    38a8:	cf 93       	push	r28
    38aa:	df 93       	push	r29
    38ac:	ac 01       	movw	r20, r24
    38ae:	ec 01       	movw	r28, r24
    38b0:	a0 96       	adiw	r28, 0x20	; 32
    38b2:	fa 01       	movw	r30, r20
#if defined LITTLE_ENDIAN
	uint8_t i, j, *s=(uint8_t*)(state->h);
	i=8;
	do{
		j=3;
    38b4:	93 e0       	ldi	r25, 0x03	; 3
		do{
			*((uint8_t*)dest) = s[j];
    38b6:	db 01       	movw	r26, r22
    38b8:	a9 0f       	add	r26, r25
    38ba:	b1 1d       	adc	r27, r1
    38bc:	2c 91       	ld	r18, X
    38be:	21 93       	st	Z+, r18
			dest = (uint8_t*)dest + 1;
		}while(j--);
    38c0:	91 50       	subi	r25, 0x01	; 1
    38c2:	c8 f7       	brcc	.-14     	; 0x38b6 <sha256_ctx2hash+0xe>
    38c4:	4c 5f       	subi	r20, 0xFC	; 252
    38c6:	5f 4f       	sbci	r21, 0xFF	; 255
		s += 4;
    38c8:	6c 5f       	subi	r22, 0xFC	; 252
    38ca:	7f 4f       	sbci	r23, 0xFF	; 255
	}while(--i);
    38cc:	4c 17       	cp	r20, r28
    38ce:	5d 07       	cpc	r21, r29
    38d0:	81 f7       	brne	.-32     	; 0x38b2 <sha256_ctx2hash+0xa>
#elif BIG_ENDIAN
	memcpy(dest, state->h, 32);
#else
# error unsupported endian type!
#endif
}
    38d2:	df 91       	pop	r29
    38d4:	cf 91       	pop	r28
    38d6:	08 95       	ret

000038d8 <sha256>:
/*************************************************************************/

/*
 * length in bits!
 */
void sha256(void *dest, const void *msg, uint32_t length_b){ /* length could be choosen longer but this is for µC */
    38d8:	4f 92       	push	r4
    38da:	5f 92       	push	r5
    38dc:	6f 92       	push	r6
    38de:	7f 92       	push	r7
    38e0:	8f 92       	push	r8
    38e2:	9f 92       	push	r9
    38e4:	af 92       	push	r10
    38e6:	bf 92       	push	r11
    38e8:	cf 92       	push	r12
    38ea:	df 92       	push	r13
    38ec:	ef 92       	push	r14
    38ee:	ff 92       	push	r15
    38f0:	0f 93       	push	r16
    38f2:	1f 93       	push	r17
    38f4:	cf 93       	push	r28
    38f6:	df 93       	push	r29
    38f8:	cd b7       	in	r28, 0x3d	; 61
    38fa:	de b7       	in	r29, 0x3e	; 62
    38fc:	a4 97       	sbiw	r28, 0x24	; 36
    38fe:	0f b6       	in	r0, 0x3f	; 63
    3900:	f8 94       	cli
    3902:	de bf       	out	0x3e, r29	; 62
    3904:	0f be       	out	0x3f, r0	; 63
    3906:	cd bf       	out	0x3d, r28	; 61
    3908:	4c 01       	movw	r8, r24
    390a:	5b 01       	movw	r10, r22
    390c:	69 01       	movw	r12, r18
    390e:	7a 01       	movw	r14, r20
	sha256_ctx_t s;
	sha256_init(&s);
    3910:	ce 01       	movw	r24, r28
    3912:	01 96       	adiw	r24, 0x01	; 1
    3914:	b7 df       	rcall	.-146    	; 0x3884 <sha256_init>
	while(length_b >= SHA256_BLOCK_BITS){
    3916:	c1 14       	cp	r12, r1
    3918:	82 e0       	ldi	r24, 0x02	; 2
    391a:	d8 06       	cpc	r13, r24
    391c:	e1 04       	cpc	r14, r1
    391e:	f1 04       	cpc	r15, r1
    3920:	90 f1       	brcs	.+100    	; 0x3986 <sha256+0xae>
    3922:	26 01       	movw	r4, r12
    3924:	37 01       	movw	r6, r14
    3926:	85 01       	movw	r16, r10
	memcpy_P(state->h, sha256_init_vector, 8*4);
}

/*************************************************************************/
void sha256_nextBlock (sha256_ctx_t *state, const void *block){
	sha2_small_common_nextBlock(state, block);
    3928:	b8 01       	movw	r22, r16
    392a:	ce 01       	movw	r24, r28
    392c:	01 96       	adiw	r24, 0x01	; 1
    392e:	0e 94 ad 26 	call	0x4d5a	; 0x4d5a <sha2_small_common_nextBlock>
void sha256(void *dest, const void *msg, uint32_t length_b){ /* length could be choosen longer but this is for µC */
	sha256_ctx_t s;
	sha256_init(&s);
	while(length_b >= SHA256_BLOCK_BITS){
		sha256_nextBlock(&s, msg);
		msg = (uint8_t*)msg + SHA256_BLOCK_BITS/8;
    3932:	00 5c       	subi	r16, 0xC0	; 192
    3934:	1f 4f       	sbci	r17, 0xFF	; 255
		length_b -= SHA256_BLOCK_BITS;
    3936:	82 e0       	ldi	r24, 0x02	; 2
    3938:	58 1a       	sub	r5, r24
    393a:	61 08       	sbc	r6, r1
    393c:	71 08       	sbc	r7, r1
 * length in bits!
 */
void sha256(void *dest, const void *msg, uint32_t length_b){ /* length could be choosen longer but this is for µC */
	sha256_ctx_t s;
	sha256_init(&s);
	while(length_b >= SHA256_BLOCK_BITS){
    393e:	41 14       	cp	r4, r1
    3940:	82 e0       	ldi	r24, 0x02	; 2
    3942:	58 06       	cpc	r5, r24
    3944:	61 04       	cpc	r6, r1
    3946:	71 04       	cpc	r7, r1
    3948:	78 f7       	brcc	.-34     	; 0x3928 <sha256+0x50>
    394a:	d7 01       	movw	r26, r14
    394c:	c6 01       	movw	r24, r12
    394e:	92 50       	subi	r25, 0x02	; 2
    3950:	a1 09       	sbc	r26, r1
    3952:	b1 09       	sbc	r27, r1
    3954:	07 2e       	mov	r0, r23
    3956:	79 e0       	ldi	r23, 0x09	; 9
    3958:	b6 95       	lsr	r27
    395a:	a7 95       	ror	r26
    395c:	97 95       	ror	r25
    395e:	87 95       	ror	r24
    3960:	7a 95       	dec	r23
    3962:	d1 f7       	brne	.-12     	; 0x3958 <sha256+0x80>
    3964:	70 2d       	mov	r23, r0
    3966:	01 96       	adiw	r24, 0x01	; 1
    3968:	00 24       	eor	r0, r0
    396a:	96 95       	lsr	r25
    396c:	87 95       	ror	r24
    396e:	07 94       	ror	r0
    3970:	96 95       	lsr	r25
    3972:	87 95       	ror	r24
    3974:	07 94       	ror	r0
    3976:	98 2f       	mov	r25, r24
    3978:	80 2d       	mov	r24, r0
    397a:	a8 0e       	add	r10, r24
    397c:	b9 1e       	adc	r11, r25
    397e:	81 e0       	ldi	r24, 0x01	; 1
    3980:	d8 22       	and	r13, r24
    3982:	ee 24       	eor	r14, r14
    3984:	ff 24       	eor	r15, r15
	sha2_small_common_nextBlock(state, block);
}

/*************************************************************************/
void sha256_lastBlock (sha256_ctx_t *state, const void *block, uint16_t length_b){
	sha2_small_common_lastBlock(state, block, length_b);
    3986:	a6 01       	movw	r20, r12
    3988:	b5 01       	movw	r22, r10
    398a:	ce 01       	movw	r24, r28
    398c:	01 96       	adiw	r24, 0x01	; 1
    398e:	0e 94 bd 29 	call	0x537a	; 0x537a <sha2_small_common_lastBlock>
		sha256_nextBlock(&s, msg);
		msg = (uint8_t*)msg + SHA256_BLOCK_BITS/8;
		length_b -= SHA256_BLOCK_BITS;
	}
	sha256_lastBlock(&s, msg, length_b);
	sha256_ctx2hash(dest,&s);
    3992:	be 01       	movw	r22, r28
    3994:	6f 5f       	subi	r22, 0xFF	; 255
    3996:	7f 4f       	sbci	r23, 0xFF	; 255
    3998:	c4 01       	movw	r24, r8
    399a:	86 df       	rcall	.-244    	; 0x38a8 <sha256_ctx2hash>
}
    399c:	a4 96       	adiw	r28, 0x24	; 36
    399e:	0f b6       	in	r0, 0x3f	; 63
    39a0:	f8 94       	cli
    39a2:	de bf       	out	0x3e, r29	; 62
    39a4:	0f be       	out	0x3f, r0	; 63
    39a6:	cd bf       	out	0x3d, r28	; 61
    39a8:	df 91       	pop	r29
    39aa:	cf 91       	pop	r28
    39ac:	1f 91       	pop	r17
    39ae:	0f 91       	pop	r16
    39b0:	ff 90       	pop	r15
    39b2:	ef 90       	pop	r14
    39b4:	df 90       	pop	r13
    39b6:	cf 90       	pop	r12
    39b8:	bf 90       	pop	r11
    39ba:	af 90       	pop	r10
    39bc:	9f 90       	pop	r9
    39be:	8f 90       	pop	r8
    39c0:	7f 90       	pop	r7
    39c2:	6f 90       	pop	r6
    39c4:	5f 90       	pop	r5
    39c6:	4f 90       	pop	r4
    39c8:	08 95       	ret

000039ca <sha2_large_common_nextBlock>:
#define SIGMA_0(x) (rotr64((x), 28) ^ rotl64((x), 30) ^ rotl64((x), 25))
#define SIGMA_1(x) (rotr64((x), 14) ^ rotr64((x), 18) ^ rotl64((x), 23))
#define SIGMA_a(x) (rotr64((x),  1) ^ rotr64((x),  8) ^ ((x)>>7))
#define SIGMA_b(x) (rotr64((x), 19) ^ rotl64((x),  3) ^ ((x)>>6))

void sha2_large_common_nextBlock(sha2_large_common_ctx_t *ctx, const void *block){
    39ca:	2f 92       	push	r2
    39cc:	3f 92       	push	r3
    39ce:	4f 92       	push	r4
    39d0:	5f 92       	push	r5
    39d2:	6f 92       	push	r6
    39d4:	7f 92       	push	r7
    39d6:	8f 92       	push	r8
    39d8:	9f 92       	push	r9
    39da:	af 92       	push	r10
    39dc:	bf 92       	push	r11
    39de:	cf 92       	push	r12
    39e0:	df 92       	push	r13
    39e2:	ef 92       	push	r14
    39e4:	ff 92       	push	r15
    39e6:	0f 93       	push	r16
    39e8:	1f 93       	push	r17
    39ea:	cf 93       	push	r28
    39ec:	df 93       	push	r29
    39ee:	cd b7       	in	r28, 0x3d	; 61
    39f0:	de b7       	in	r29, 0x3e	; 62
    39f2:	ca 5e       	subi	r28, 0xEA	; 234
    39f4:	d1 09       	sbc	r29, r1
    39f6:	0f b6       	in	r0, 0x3f	; 63
    39f8:	f8 94       	cli
    39fa:	de bf       	out	0x3e, r29	; 62
    39fc:	0f be       	out	0x3f, r0	; 63
    39fe:	cd bf       	out	0x3d, r28	; 61
    3a00:	c7 51       	subi	r28, 0x17	; 23
    3a02:	df 4f       	sbci	r29, 0xFF	; 255
    3a04:	99 83       	std	Y+1, r25	; 0x01
    3a06:	88 83       	st	Y, r24
    3a08:	c9 5e       	subi	r28, 0xE9	; 233
    3a0a:	d0 40       	sbci	r29, 0x00	; 0
    3a0c:	ce 01       	movw	r24, r28
    3a0e:	01 96       	adiw	r24, 0x01	; 1
    3a10:	c5 52       	subi	r28, 0x25	; 37
    3a12:	df 4f       	sbci	r29, 0xFF	; 255
    3a14:	99 83       	std	Y+1, r25	; 0x01
    3a16:	88 83       	st	Y, r24
    3a18:	cb 5d       	subi	r28, 0xDB	; 219
    3a1a:	d0 40       	sbci	r29, 0x00	; 0
    3a1c:	fe 01       	movw	r30, r28
    3a1e:	ef 57       	subi	r30, 0x7F	; 127
    3a20:	ff 4f       	sbci	r31, 0xFF	; 255
    3a22:	c7 53       	subi	r28, 0x37	; 55
    3a24:	df 4f       	sbci	r29, 0xFF	; 255
    3a26:	f9 83       	std	Y+1, r31	; 0x01
    3a28:	e8 83       	st	Y, r30
    3a2a:	c9 5c       	subi	r28, 0xC9	; 201
    3a2c:	d0 40       	sbci	r29, 0x00	; 0
    3a2e:	2c 01       	movw	r4, r24
};


static const
uint64_t change_endian64(uint64_t x){
	uint64_t r=0;
    3a30:	c9 51       	subi	r28, 0x19	; 25
    3a32:	df 4f       	sbci	r29, 0xFF	; 255
    3a34:	79 83       	std	Y+1, r23	; 0x01
    3a36:	68 83       	st	Y, r22
    3a38:	c7 5e       	subi	r28, 0xE7	; 231
    3a3a:	d0 40       	sbci	r29, 0x00	; 0
	uint64_t t1, t2;
	const uint64_t *k=sha2_large_common_const;
	uint8_t i;
	i=16;
	do{
		w[16-i] = change_endian64(*((const uint64_t*)block));
    3a3c:	c9 51       	subi	r28, 0x19	; 25
    3a3e:	df 4f       	sbci	r29, 0xFF	; 255
    3a40:	a8 81       	ld	r26, Y
    3a42:	b9 81       	ldd	r27, Y+1	; 0x01
    3a44:	c7 5e       	subi	r28, 0xE7	; 231
    3a46:	d0 40       	sbci	r29, 0x00	; 0
    3a48:	bc 91       	ld	r27, X
    3a4a:	c5 53       	subi	r28, 0x35	; 53
    3a4c:	df 4f       	sbci	r29, 0xFF	; 255
    3a4e:	b8 83       	st	Y, r27
    3a50:	cb 5c       	subi	r28, 0xCB	; 203
    3a52:	d0 40       	sbci	r29, 0x00	; 0
    3a54:	c9 51       	subi	r28, 0x19	; 25
    3a56:	df 4f       	sbci	r29, 0xFF	; 255
    3a58:	e8 81       	ld	r30, Y
    3a5a:	f9 81       	ldd	r31, Y+1	; 0x01
    3a5c:	c7 5e       	subi	r28, 0xE7	; 231
    3a5e:	d0 40       	sbci	r29, 0x00	; 0
    3a60:	71 80       	ldd	r7, Z+1	; 0x01
    3a62:	82 80       	ldd	r8, Z+2	; 0x02
    3a64:	93 80       	ldd	r9, Z+3	; 0x03
    3a66:	a4 80       	ldd	r10, Z+4	; 0x04
    3a68:	b5 80       	ldd	r11, Z+5	; 0x05
    3a6a:	a6 81       	ldd	r26, Z+6	; 0x06
    3a6c:	b7 81       	ldd	r27, Z+7	; 0x07
    3a6e:	38 96       	adiw	r30, 0x08	; 8
    3a70:	c9 51       	subi	r28, 0x19	; 25
    3a72:	df 4f       	sbci	r29, 0xFF	; 255
    3a74:	f9 83       	std	Y+1, r31	; 0x01
    3a76:	e8 83       	st	Y, r30
    3a78:	c7 5e       	subi	r28, 0xE7	; 231
    3a7a:	d0 40       	sbci	r29, 0x00	; 0
    3a7c:	68 94       	set
    3a7e:	66 24       	eor	r6, r6
    3a80:	63 f8       	bld	r6, 3
};


static const
uint64_t change_endian64(uint64_t x){
	uint64_t r=0;
    3a82:	c1 2c       	mov	r12, r1
    3a84:	d1 2c       	mov	r13, r1
    3a86:	e1 2c       	mov	r14, r1
    3a88:	f1 2c       	mov	r15, r1
    3a8a:	10 e0       	ldi	r17, 0x00	; 0
    3a8c:	f0 e0       	ldi	r31, 0x00	; 0
    3a8e:	21 2c       	mov	r2, r1
    3a90:	31 2c       	mov	r3, r1
	uint8_t i=8;
	do{
		r <<= 8;
    3a92:	2c 2d       	mov	r18, r12
    3a94:	3d 2d       	mov	r19, r13
    3a96:	4e 2d       	mov	r20, r14
    3a98:	5f 2d       	mov	r21, r15
    3a9a:	61 2f       	mov	r22, r17
    3a9c:	7f 2f       	mov	r23, r31
    3a9e:	82 2d       	mov	r24, r2
    3aa0:	93 2d       	mov	r25, r3
    3aa2:	08 e0       	ldi	r16, 0x08	; 8
    3aa4:	0e 94 a5 2b 	call	0x574a	; 0x574a <__ashldi3>
		r |= 0xff&x;
    3aa8:	c5 53       	subi	r28, 0x35	; 53
    3aaa:	df 4f       	sbci	r29, 0xFF	; 255
    3aac:	c8 80       	ld	r12, Y
    3aae:	cb 5c       	subi	r28, 0xCB	; 203
    3ab0:	d0 40       	sbci	r29, 0x00	; 0
    3ab2:	c2 2a       	or	r12, r18
    3ab4:	d3 2e       	mov	r13, r19
    3ab6:	e4 2e       	mov	r14, r20
    3ab8:	f5 2e       	mov	r15, r21
    3aba:	16 2f       	mov	r17, r22
    3abc:	f7 2f       	mov	r31, r23
    3abe:	28 2e       	mov	r2, r24
    3ac0:	39 2e       	mov	r3, r25
		x >>=8;
    3ac2:	c5 53       	subi	r28, 0x35	; 53
    3ac4:	df 4f       	sbci	r29, 0xFF	; 255
    3ac6:	28 81       	ld	r18, Y
    3ac8:	cb 5c       	subi	r28, 0xCB	; 203
    3aca:	d0 40       	sbci	r29, 0x00	; 0
    3acc:	37 2d       	mov	r19, r7
    3ace:	48 2d       	mov	r20, r8
    3ad0:	59 2d       	mov	r21, r9
    3ad2:	6a 2d       	mov	r22, r10
    3ad4:	7b 2d       	mov	r23, r11
    3ad6:	8a 2f       	mov	r24, r26
    3ad8:	9b 2f       	mov	r25, r27
    3ada:	0e 94 c0 2b 	call	0x5780	; 0x5780 <__lshrdi3>
    3ade:	c5 53       	subi	r28, 0x35	; 53
    3ae0:	df 4f       	sbci	r29, 0xFF	; 255
    3ae2:	28 83       	st	Y, r18
    3ae4:	cb 5c       	subi	r28, 0xCB	; 203
    3ae6:	d0 40       	sbci	r29, 0x00	; 0
    3ae8:	73 2e       	mov	r7, r19
    3aea:	84 2e       	mov	r8, r20
    3aec:	95 2e       	mov	r9, r21
    3aee:	a6 2e       	mov	r10, r22
    3af0:	b7 2e       	mov	r11, r23
    3af2:	a8 2f       	mov	r26, r24
    3af4:	b9 2f       	mov	r27, r25
    3af6:	6a 94       	dec	r6
	}while(--i);
    3af8:	61 10       	cpse	r6, r1
    3afa:	cb cf       	rjmp	.-106    	; 0x3a92 <sha2_large_common_nextBlock+0xc8>
	uint64_t t1, t2;
	const uint64_t *k=sha2_large_common_const;
	uint8_t i;
	i=16;
	do{
		w[16-i] = change_endian64(*((const uint64_t*)block));
    3afc:	d2 01       	movw	r26, r4
    3afe:	cc 92       	st	X, r12
    3b00:	11 96       	adiw	r26, 0x01	; 1
    3b02:	dc 92       	st	X, r13
    3b04:	11 97       	sbiw	r26, 0x01	; 1
    3b06:	12 96       	adiw	r26, 0x02	; 2
    3b08:	ec 92       	st	X, r14
    3b0a:	12 97       	sbiw	r26, 0x02	; 2
    3b0c:	13 96       	adiw	r26, 0x03	; 3
    3b0e:	fc 92       	st	X, r15
    3b10:	13 97       	sbiw	r26, 0x03	; 3
    3b12:	14 96       	adiw	r26, 0x04	; 4
    3b14:	1c 93       	st	X, r17
    3b16:	14 97       	sbiw	r26, 0x04	; 4
    3b18:	15 96       	adiw	r26, 0x05	; 5
    3b1a:	fc 93       	st	X, r31
    3b1c:	15 97       	sbiw	r26, 0x05	; 5
    3b1e:	16 96       	adiw	r26, 0x06	; 6
    3b20:	2c 92       	st	X, r2
    3b22:	16 97       	sbiw	r26, 0x06	; 6
    3b24:	17 96       	adiw	r26, 0x07	; 7
    3b26:	3c 92       	st	X, r3
    3b28:	b8 e0       	ldi	r27, 0x08	; 8
    3b2a:	4b 0e       	add	r4, r27
    3b2c:	51 1c       	adc	r5, r1
		block = (uint8_t*)block + 8;
	}while(--i);
    3b2e:	c7 53       	subi	r28, 0x37	; 55
    3b30:	df 4f       	sbci	r29, 0xFF	; 255
    3b32:	e8 81       	ld	r30, Y
    3b34:	f9 81       	ldd	r31, Y+1	; 0x01
    3b36:	c9 5c       	subi	r28, 0xC9	; 201
    3b38:	d0 40       	sbci	r29, 0x00	; 0
    3b3a:	e4 15       	cp	r30, r4
    3b3c:	f5 05       	cpc	r31, r5
    3b3e:	09 f0       	breq	.+2      	; 0x3b42 <sha2_large_common_nextBlock+0x178>
    3b40:	7d cf       	rjmp	.-262    	; 0x3a3c <sha2_large_common_nextBlock+0x72>
	memcpy(a, ctx->h, 8*8);
    3b42:	80 e4       	ldi	r24, 0x40	; 64
    3b44:	c7 51       	subi	r28, 0x17	; 23
    3b46:	df 4f       	sbci	r29, 0xFF	; 255
    3b48:	e8 81       	ld	r30, Y
    3b4a:	f9 81       	ldd	r31, Y+1	; 0x01
    3b4c:	c9 5e       	subi	r28, 0xE9	; 233
    3b4e:	d0 40       	sbci	r29, 0x00	; 0
    3b50:	de 01       	movw	r26, r28
    3b52:	af 57       	subi	r26, 0x7F	; 127
    3b54:	bf 4f       	sbci	r27, 0xFF	; 255
    3b56:	01 90       	ld	r0, Z+
    3b58:	0d 92       	st	X+, r0
    3b5a:	8a 95       	dec	r24
    3b5c:	e1 f7       	brne	.-8      	; 0x3b56 <sha2_large_common_nextBlock+0x18c>
    3b5e:	84 eb       	ldi	r24, 0xB4	; 180
    3b60:	90 e0       	ldi	r25, 0x00	; 0
    3b62:	cf 52       	subi	r28, 0x2F	; 47
    3b64:	df 4f       	sbci	r29, 0xFF	; 255
    3b66:	99 83       	std	Y+1, r25	; 0x01
    3b68:	88 83       	st	Y, r24
    3b6a:	c1 5d       	subi	r28, 0xD1	; 209
    3b6c:	d0 40       	sbci	r29, 0x00	; 0
	for(i=0; i<80; ++i){
    3b6e:	c0 53       	subi	r28, 0x30	; 48
    3b70:	df 4f       	sbci	r29, 0xFF	; 255
    3b72:	18 82       	st	Y, r1
    3b74:	c0 5d       	subi	r28, 0xD0	; 208
    3b76:	d0 40       	sbci	r29, 0x00	; 0
			memmove(&(w[0]), &(w[1]), 15*8);
			w[15] = wx;
		}
		t1 = a[7] + SIGMA_1(a[4]) + CH(a[4], a[5], a[6]) + pgm_read_uint64_t_P(k++) + wx;
		t2 = SIGMA_0(a[0]) + MAJ(a[0], a[1], a[2]);
		memmove(&(a[1]), &(a[0]), 7*8);
    3b78:	a1 e8       	ldi	r26, 0x81	; 129
    3b7a:	b0 e0       	ldi	r27, 0x00	; 0
    3b7c:	ac 0f       	add	r26, r28
    3b7e:	bd 1f       	adc	r27, r29
    3b80:	18 96       	adiw	r26, 0x08	; 8
    3b82:	c9 51       	subi	r28, 0x19	; 25
    3b84:	df 4f       	sbci	r29, 0xFF	; 255
    3b86:	b9 83       	std	Y+1, r27	; 0x01
    3b88:	a8 83       	st	Y, r26
    3b8a:	c7 5e       	subi	r28, 0xE7	; 231
    3b8c:	d0 40       	sbci	r29, 0x00	; 0
		w[16-i] = change_endian64(*((const uint64_t*)block));
		block = (uint8_t*)block + 8;
	}while(--i);
	memcpy(a, ctx->h, 8*8);
	for(i=0; i<80; ++i){
		if(i<16){
    3b8e:	c0 53       	subi	r28, 0x30	; 48
    3b90:	df 4f       	sbci	r29, 0xFF	; 255
    3b92:	b8 81       	ld	r27, Y
    3b94:	c0 5d       	subi	r28, 0xD0	; 208
    3b96:	d0 40       	sbci	r29, 0x00	; 0
    3b98:	b0 31       	cpi	r27, 0x10	; 16
    3b9a:	08 f0       	brcs	.+2      	; 0x3b9e <sha2_large_common_nextBlock+0x1d4>
    3b9c:	60 c0       	rjmp	.+192    	; 0x3c5e <sha2_large_common_nextBlock+0x294>
			wx=w[i];
    3b9e:	c5 52       	subi	r28, 0x25	; 37
    3ba0:	df 4f       	sbci	r29, 0xFF	; 255
    3ba2:	e8 81       	ld	r30, Y
    3ba4:	f9 81       	ldd	r31, Y+1	; 0x01
    3ba6:	cb 5d       	subi	r28, 0xDB	; 219
    3ba8:	d0 40       	sbci	r29, 0x00	; 0
    3baa:	f0 81       	ld	r31, Z
    3bac:	c5 53       	subi	r28, 0x35	; 53
    3bae:	df 4f       	sbci	r29, 0xFF	; 255
    3bb0:	f8 83       	st	Y, r31
    3bb2:	cb 5c       	subi	r28, 0xCB	; 203
    3bb4:	d0 40       	sbci	r29, 0x00	; 0
    3bb6:	c5 52       	subi	r28, 0x25	; 37
    3bb8:	df 4f       	sbci	r29, 0xFF	; 255
    3bba:	a8 81       	ld	r26, Y
    3bbc:	b9 81       	ldd	r27, Y+1	; 0x01
    3bbe:	cb 5d       	subi	r28, 0xDB	; 219
    3bc0:	d0 40       	sbci	r29, 0x00	; 0
    3bc2:	11 96       	adiw	r26, 0x01	; 1
    3bc4:	bc 91       	ld	r27, X
    3bc6:	c4 53       	subi	r28, 0x34	; 52
    3bc8:	df 4f       	sbci	r29, 0xFF	; 255
    3bca:	b8 83       	st	Y, r27
    3bcc:	cc 5c       	subi	r28, 0xCC	; 204
    3bce:	d0 40       	sbci	r29, 0x00	; 0
    3bd0:	c5 52       	subi	r28, 0x25	; 37
    3bd2:	df 4f       	sbci	r29, 0xFF	; 255
    3bd4:	e8 81       	ld	r30, Y
    3bd6:	f9 81       	ldd	r31, Y+1	; 0x01
    3bd8:	cb 5d       	subi	r28, 0xDB	; 219
    3bda:	d0 40       	sbci	r29, 0x00	; 0
    3bdc:	f2 81       	ldd	r31, Z+2	; 0x02
    3bde:	c3 53       	subi	r28, 0x33	; 51
    3be0:	df 4f       	sbci	r29, 0xFF	; 255
    3be2:	f8 83       	st	Y, r31
    3be4:	cd 5c       	subi	r28, 0xCD	; 205
    3be6:	d0 40       	sbci	r29, 0x00	; 0
    3be8:	c5 52       	subi	r28, 0x25	; 37
    3bea:	df 4f       	sbci	r29, 0xFF	; 255
    3bec:	a8 81       	ld	r26, Y
    3bee:	b9 81       	ldd	r27, Y+1	; 0x01
    3bf0:	cb 5d       	subi	r28, 0xDB	; 219
    3bf2:	d0 40       	sbci	r29, 0x00	; 0
    3bf4:	13 96       	adiw	r26, 0x03	; 3
    3bf6:	bc 91       	ld	r27, X
    3bf8:	c2 53       	subi	r28, 0x32	; 50
    3bfa:	df 4f       	sbci	r29, 0xFF	; 255
    3bfc:	b8 83       	st	Y, r27
    3bfe:	ce 5c       	subi	r28, 0xCE	; 206
    3c00:	d0 40       	sbci	r29, 0x00	; 0
    3c02:	c5 52       	subi	r28, 0x25	; 37
    3c04:	df 4f       	sbci	r29, 0xFF	; 255
    3c06:	e8 81       	ld	r30, Y
    3c08:	f9 81       	ldd	r31, Y+1	; 0x01
    3c0a:	cb 5d       	subi	r28, 0xDB	; 219
    3c0c:	d0 40       	sbci	r29, 0x00	; 0
    3c0e:	f4 81       	ldd	r31, Z+4	; 0x04
    3c10:	c1 53       	subi	r28, 0x31	; 49
    3c12:	df 4f       	sbci	r29, 0xFF	; 255
    3c14:	f8 83       	st	Y, r31
    3c16:	cf 5c       	subi	r28, 0xCF	; 207
    3c18:	d0 40       	sbci	r29, 0x00	; 0
    3c1a:	c5 52       	subi	r28, 0x25	; 37
    3c1c:	df 4f       	sbci	r29, 0xFF	; 255
    3c1e:	a8 81       	ld	r26, Y
    3c20:	b9 81       	ldd	r27, Y+1	; 0x01
    3c22:	cb 5d       	subi	r28, 0xDB	; 219
    3c24:	d0 40       	sbci	r29, 0x00	; 0
    3c26:	15 96       	adiw	r26, 0x05	; 5
    3c28:	bc 91       	ld	r27, X
    3c2a:	cd 52       	subi	r28, 0x2D	; 45
    3c2c:	df 4f       	sbci	r29, 0xFF	; 255
    3c2e:	b8 83       	st	Y, r27
    3c30:	c3 5d       	subi	r28, 0xD3	; 211
    3c32:	d0 40       	sbci	r29, 0x00	; 0
    3c34:	c5 52       	subi	r28, 0x25	; 37
    3c36:	df 4f       	sbci	r29, 0xFF	; 255
    3c38:	e8 81       	ld	r30, Y
    3c3a:	f9 81       	ldd	r31, Y+1	; 0x01
    3c3c:	cb 5d       	subi	r28, 0xDB	; 219
    3c3e:	d0 40       	sbci	r29, 0x00	; 0
    3c40:	f6 81       	ldd	r31, Z+6	; 0x06
    3c42:	cc 52       	subi	r28, 0x2C	; 44
    3c44:	df 4f       	sbci	r29, 0xFF	; 255
    3c46:	f8 83       	st	Y, r31
    3c48:	c4 5d       	subi	r28, 0xD4	; 212
    3c4a:	d0 40       	sbci	r29, 0x00	; 0
    3c4c:	c5 52       	subi	r28, 0x25	; 37
    3c4e:	df 4f       	sbci	r29, 0xFF	; 255
    3c50:	a8 81       	ld	r26, Y
    3c52:	b9 81       	ldd	r27, Y+1	; 0x01
    3c54:	cb 5d       	subi	r28, 0xDB	; 219
    3c56:	d0 40       	sbci	r29, 0x00	; 0
    3c58:	17 96       	adiw	r26, 0x07	; 7
    3c5a:	4c 90       	ld	r4, X
    3c5c:	db c1       	rjmp	.+950    	; 0x4014 <sha2_large_common_nextBlock+0x64a>
		}else{
			wx = SIGMA_b(w[14]) + w[9] + SIGMA_a(w[1]) + w[0];
    3c5e:	e2 96       	adiw	r28, 0x32	; 50
    3c60:	5f ac       	ldd	r5, Y+63	; 0x3f
    3c62:	e2 97       	sbiw	r28, 0x32	; 50
    3c64:	e3 96       	adiw	r28, 0x33	; 51
    3c66:	6f ac       	ldd	r6, Y+63	; 0x3f
    3c68:	e3 97       	sbiw	r28, 0x33	; 51
    3c6a:	e4 96       	adiw	r28, 0x34	; 52
    3c6c:	7f ac       	ldd	r7, Y+63	; 0x3f
    3c6e:	e4 97       	sbiw	r28, 0x34	; 52
    3c70:	e5 96       	adiw	r28, 0x35	; 53
    3c72:	8f ac       	ldd	r8, Y+63	; 0x3f
    3c74:	e5 97       	sbiw	r28, 0x35	; 53
    3c76:	e6 96       	adiw	r28, 0x36	; 54
    3c78:	9f ac       	ldd	r9, Y+63	; 0x3f
    3c7a:	e6 97       	sbiw	r28, 0x36	; 54
    3c7c:	e7 96       	adiw	r28, 0x37	; 55
    3c7e:	bf ad       	ldd	r27, Y+63	; 0x3f
    3c80:	e7 97       	sbiw	r28, 0x37	; 55
    3c82:	e8 96       	adiw	r28, 0x38	; 56
    3c84:	af ad       	ldd	r26, Y+63	; 0x3f
    3c86:	e8 97       	sbiw	r28, 0x38	; 56
    3c88:	e9 96       	adiw	r28, 0x39	; 57
    3c8a:	ff ad       	ldd	r31, Y+63	; 0x3f
    3c8c:	e9 97       	sbiw	r28, 0x39	; 57
    3c8e:	e9 85       	ldd	r30, Y+9	; 0x09
    3c90:	c5 53       	subi	r28, 0x35	; 53
    3c92:	df 4f       	sbci	r29, 0xFF	; 255
    3c94:	e8 83       	st	Y, r30
    3c96:	cb 5c       	subi	r28, 0xCB	; 203
    3c98:	d0 40       	sbci	r29, 0x00	; 0
    3c9a:	ea 85       	ldd	r30, Y+10	; 0x0a
    3c9c:	c4 53       	subi	r28, 0x34	; 52
    3c9e:	df 4f       	sbci	r29, 0xFF	; 255
    3ca0:	e8 83       	st	Y, r30
    3ca2:	cc 5c       	subi	r28, 0xCC	; 204
    3ca4:	d0 40       	sbci	r29, 0x00	; 0
    3ca6:	eb 85       	ldd	r30, Y+11	; 0x0b
    3ca8:	c3 53       	subi	r28, 0x33	; 51
    3caa:	df 4f       	sbci	r29, 0xFF	; 255
    3cac:	e8 83       	st	Y, r30
    3cae:	cd 5c       	subi	r28, 0xCD	; 205
    3cb0:	d0 40       	sbci	r29, 0x00	; 0
    3cb2:	ec 85       	ldd	r30, Y+12	; 0x0c
    3cb4:	c2 53       	subi	r28, 0x32	; 50
    3cb6:	df 4f       	sbci	r29, 0xFF	; 255
    3cb8:	e8 83       	st	Y, r30
    3cba:	ce 5c       	subi	r28, 0xCE	; 206
    3cbc:	d0 40       	sbci	r29, 0x00	; 0
    3cbe:	ed 85       	ldd	r30, Y+13	; 0x0d
    3cc0:	c1 53       	subi	r28, 0x31	; 49
    3cc2:	df 4f       	sbci	r29, 0xFF	; 255
    3cc4:	e8 83       	st	Y, r30
    3cc6:	cf 5c       	subi	r28, 0xCF	; 207
    3cc8:	d0 40       	sbci	r29, 0x00	; 0
    3cca:	2e 84       	ldd	r2, Y+14	; 0x0e
    3ccc:	3f 84       	ldd	r3, Y+15	; 0x0f
    3cce:	48 88       	ldd	r4, Y+16	; 0x10
    3cd0:	2a 96       	adiw	r28, 0x0a	; 10
    3cd2:	2f ad       	ldd	r18, Y+63	; 0x3f
    3cd4:	2a 97       	sbiw	r28, 0x0a	; 10
    3cd6:	2b 96       	adiw	r28, 0x0b	; 11
    3cd8:	3f ad       	ldd	r19, Y+63	; 0x3f
    3cda:	2b 97       	sbiw	r28, 0x0b	; 11
    3cdc:	2c 96       	adiw	r28, 0x0c	; 12
    3cde:	4f ad       	ldd	r20, Y+63	; 0x3f
    3ce0:	2c 97       	sbiw	r28, 0x0c	; 12
    3ce2:	2d 96       	adiw	r28, 0x0d	; 13
    3ce4:	5f ad       	ldd	r21, Y+63	; 0x3f
    3ce6:	2d 97       	sbiw	r28, 0x0d	; 13
    3ce8:	2e 96       	adiw	r28, 0x0e	; 14
    3cea:	6f ad       	ldd	r22, Y+63	; 0x3f
    3cec:	2e 97       	sbiw	r28, 0x0e	; 14
    3cee:	2f 96       	adiw	r28, 0x0f	; 15
    3cf0:	7f ad       	ldd	r23, Y+63	; 0x3f
    3cf2:	2f 97       	sbiw	r28, 0x0f	; 15
    3cf4:	60 96       	adiw	r28, 0x10	; 16
    3cf6:	8f ad       	ldd	r24, Y+63	; 0x3f
    3cf8:	60 97       	sbiw	r28, 0x10	; 16
    3cfa:	61 96       	adiw	r28, 0x11	; 17
    3cfc:	9f ad       	ldd	r25, Y+63	; 0x3f
    3cfe:	61 97       	sbiw	r28, 0x11	; 17
    3d00:	a9 80       	ldd	r10, Y+1	; 0x01
    3d02:	ba 80       	ldd	r11, Y+2	; 0x02
    3d04:	cb 80       	ldd	r12, Y+3	; 0x03
    3d06:	dc 80       	ldd	r13, Y+4	; 0x04
    3d08:	ed 80       	ldd	r14, Y+5	; 0x05
    3d0a:	fe 80       	ldd	r15, Y+6	; 0x06
    3d0c:	0f 81       	ldd	r16, Y+7	; 0x07
    3d0e:	18 85       	ldd	r17, Y+8	; 0x08
    3d10:	0e 94 f7 2b 	call	0x57ee	; 0x57ee <__adddi3>
    3d14:	cd 52       	subi	r28, 0x2D	; 45
    3d16:	df 4f       	sbci	r29, 0xFF	; 255
    3d18:	28 83       	st	Y, r18
    3d1a:	c3 5d       	subi	r28, 0xD3	; 211
    3d1c:	d0 40       	sbci	r29, 0x00	; 0
    3d1e:	cc 52       	subi	r28, 0x2C	; 44
    3d20:	df 4f       	sbci	r29, 0xFF	; 255
    3d22:	38 83       	st	Y, r19
    3d24:	c4 5d       	subi	r28, 0xD4	; 212
    3d26:	d0 40       	sbci	r29, 0x00	; 0
    3d28:	cb 52       	subi	r28, 0x2B	; 43
    3d2a:	df 4f       	sbci	r29, 0xFF	; 255
    3d2c:	48 83       	st	Y, r20
    3d2e:	c5 5d       	subi	r28, 0xD5	; 213
    3d30:	d0 40       	sbci	r29, 0x00	; 0
    3d32:	ca 52       	subi	r28, 0x2A	; 42
    3d34:	df 4f       	sbci	r29, 0xFF	; 255
    3d36:	58 83       	st	Y, r21
    3d38:	c6 5d       	subi	r28, 0xD6	; 214
    3d3a:	d0 40       	sbci	r29, 0x00	; 0
    3d3c:	c9 52       	subi	r28, 0x29	; 41
    3d3e:	df 4f       	sbci	r29, 0xFF	; 255
    3d40:	68 83       	st	Y, r22
    3d42:	c7 5d       	subi	r28, 0xD7	; 215
    3d44:	d0 40       	sbci	r29, 0x00	; 0
    3d46:	c8 52       	subi	r28, 0x28	; 40
    3d48:	df 4f       	sbci	r29, 0xFF	; 255
    3d4a:	78 83       	st	Y, r23
    3d4c:	c8 5d       	subi	r28, 0xD8	; 216
    3d4e:	d0 40       	sbci	r29, 0x00	; 0
    3d50:	c7 52       	subi	r28, 0x27	; 39
    3d52:	df 4f       	sbci	r29, 0xFF	; 255
    3d54:	88 83       	st	Y, r24
    3d56:	c9 5d       	subi	r28, 0xD9	; 217
    3d58:	d0 40       	sbci	r29, 0x00	; 0
    3d5a:	c6 52       	subi	r28, 0x26	; 38
    3d5c:	df 4f       	sbci	r29, 0xFF	; 255
    3d5e:	98 83       	st	Y, r25
    3d60:	ca 5d       	subi	r28, 0xDA	; 218
    3d62:	d0 40       	sbci	r29, 0x00	; 0
    3d64:	25 2d       	mov	r18, r5
    3d66:	36 2d       	mov	r19, r6
    3d68:	47 2d       	mov	r20, r7
    3d6a:	58 2d       	mov	r21, r8
    3d6c:	69 2d       	mov	r22, r9
    3d6e:	7b 2f       	mov	r23, r27
    3d70:	8a 2f       	mov	r24, r26
    3d72:	9f 2f       	mov	r25, r31
    3d74:	03 e0       	ldi	r16, 0x03	; 3
    3d76:	0e 94 dc 2b 	call	0x57b8	; 0x57b8 <__rotldi3>
    3d7a:	a2 2e       	mov	r10, r18
    3d7c:	b3 2e       	mov	r11, r19
    3d7e:	c4 2e       	mov	r12, r20
    3d80:	d5 2e       	mov	r13, r21
    3d82:	e6 2e       	mov	r14, r22
    3d84:	f7 2e       	mov	r15, r23
    3d86:	e8 2f       	mov	r30, r24
    3d88:	19 2f       	mov	r17, r25
    3d8a:	25 2d       	mov	r18, r5
    3d8c:	36 2d       	mov	r19, r6
    3d8e:	47 2d       	mov	r20, r7
    3d90:	58 2d       	mov	r21, r8
    3d92:	69 2d       	mov	r22, r9
    3d94:	7b 2f       	mov	r23, r27
    3d96:	8a 2f       	mov	r24, r26
    3d98:	9f 2f       	mov	r25, r31
    3d9a:	0d e2       	ldi	r16, 0x2D	; 45
    3d9c:	0e 94 dc 2b 	call	0x57b8	; 0x57b8 <__rotldi3>
    3da0:	a2 26       	eor	r10, r18
    3da2:	b3 26       	eor	r11, r19
    3da4:	c4 26       	eor	r12, r20
    3da6:	d5 26       	eor	r13, r21
    3da8:	e6 26       	eor	r14, r22
    3daa:	f7 26       	eor	r15, r23
    3dac:	e8 27       	eor	r30, r24
    3dae:	19 27       	eor	r17, r25
    3db0:	25 2d       	mov	r18, r5
    3db2:	36 2d       	mov	r19, r6
    3db4:	47 2d       	mov	r20, r7
    3db6:	58 2d       	mov	r21, r8
    3db8:	69 2d       	mov	r22, r9
    3dba:	7b 2f       	mov	r23, r27
    3dbc:	8a 2f       	mov	r24, r26
    3dbe:	9f 2f       	mov	r25, r31
    3dc0:	06 e0       	ldi	r16, 0x06	; 6
    3dc2:	0e 94 c0 2b 	call	0x5780	; 0x5780 <__lshrdi3>
    3dc6:	a2 26       	eor	r10, r18
    3dc8:	b3 26       	eor	r11, r19
    3dca:	c4 26       	eor	r12, r20
    3dcc:	d5 26       	eor	r13, r21
    3dce:	e6 26       	eor	r14, r22
    3dd0:	f7 26       	eor	r15, r23
    3dd2:	0e 2f       	mov	r16, r30
    3dd4:	08 27       	eor	r16, r24
    3dd6:	19 27       	eor	r17, r25
    3dd8:	cd 52       	subi	r28, 0x2D	; 45
    3dda:	df 4f       	sbci	r29, 0xFF	; 255
    3ddc:	28 81       	ld	r18, Y
    3dde:	c3 5d       	subi	r28, 0xD3	; 211
    3de0:	d0 40       	sbci	r29, 0x00	; 0
    3de2:	cc 52       	subi	r28, 0x2C	; 44
    3de4:	df 4f       	sbci	r29, 0xFF	; 255
    3de6:	38 81       	ld	r19, Y
    3de8:	c4 5d       	subi	r28, 0xD4	; 212
    3dea:	d0 40       	sbci	r29, 0x00	; 0
    3dec:	cb 52       	subi	r28, 0x2B	; 43
    3dee:	df 4f       	sbci	r29, 0xFF	; 255
    3df0:	48 81       	ld	r20, Y
    3df2:	c5 5d       	subi	r28, 0xD5	; 213
    3df4:	d0 40       	sbci	r29, 0x00	; 0
    3df6:	ca 52       	subi	r28, 0x2A	; 42
    3df8:	df 4f       	sbci	r29, 0xFF	; 255
    3dfa:	58 81       	ld	r21, Y
    3dfc:	c6 5d       	subi	r28, 0xD6	; 214
    3dfe:	d0 40       	sbci	r29, 0x00	; 0
    3e00:	c9 52       	subi	r28, 0x29	; 41
    3e02:	df 4f       	sbci	r29, 0xFF	; 255
    3e04:	68 81       	ld	r22, Y
    3e06:	c7 5d       	subi	r28, 0xD7	; 215
    3e08:	d0 40       	sbci	r29, 0x00	; 0
    3e0a:	c8 52       	subi	r28, 0x28	; 40
    3e0c:	df 4f       	sbci	r29, 0xFF	; 255
    3e0e:	78 81       	ld	r23, Y
    3e10:	c8 5d       	subi	r28, 0xD8	; 216
    3e12:	d0 40       	sbci	r29, 0x00	; 0
    3e14:	c7 52       	subi	r28, 0x27	; 39
    3e16:	df 4f       	sbci	r29, 0xFF	; 255
    3e18:	88 81       	ld	r24, Y
    3e1a:	c9 5d       	subi	r28, 0xD9	; 217
    3e1c:	d0 40       	sbci	r29, 0x00	; 0
    3e1e:	c6 52       	subi	r28, 0x26	; 38
    3e20:	df 4f       	sbci	r29, 0xFF	; 255
    3e22:	98 81       	ld	r25, Y
    3e24:	ca 5d       	subi	r28, 0xDA	; 218
    3e26:	d0 40       	sbci	r29, 0x00	; 0
    3e28:	0e 94 f7 2b 	call	0x57ee	; 0x57ee <__adddi3>
    3e2c:	62 2e       	mov	r6, r18
    3e2e:	73 2e       	mov	r7, r19
    3e30:	84 2e       	mov	r8, r20
    3e32:	95 2e       	mov	r9, r21
    3e34:	b6 2f       	mov	r27, r22
    3e36:	a7 2f       	mov	r26, r23
    3e38:	f8 2f       	mov	r31, r24
    3e3a:	e9 2f       	mov	r30, r25
    3e3c:	c5 53       	subi	r28, 0x35	; 53
    3e3e:	df 4f       	sbci	r29, 0xFF	; 255
    3e40:	28 81       	ld	r18, Y
    3e42:	cb 5c       	subi	r28, 0xCB	; 203
    3e44:	d0 40       	sbci	r29, 0x00	; 0
    3e46:	c4 53       	subi	r28, 0x34	; 52
    3e48:	df 4f       	sbci	r29, 0xFF	; 255
    3e4a:	38 81       	ld	r19, Y
    3e4c:	cc 5c       	subi	r28, 0xCC	; 204
    3e4e:	d0 40       	sbci	r29, 0x00	; 0
    3e50:	c3 53       	subi	r28, 0x33	; 51
    3e52:	df 4f       	sbci	r29, 0xFF	; 255
    3e54:	48 81       	ld	r20, Y
    3e56:	cd 5c       	subi	r28, 0xCD	; 205
    3e58:	d0 40       	sbci	r29, 0x00	; 0
    3e5a:	c2 53       	subi	r28, 0x32	; 50
    3e5c:	df 4f       	sbci	r29, 0xFF	; 255
    3e5e:	58 81       	ld	r21, Y
    3e60:	ce 5c       	subi	r28, 0xCE	; 206
    3e62:	d0 40       	sbci	r29, 0x00	; 0
    3e64:	c1 53       	subi	r28, 0x31	; 49
    3e66:	df 4f       	sbci	r29, 0xFF	; 255
    3e68:	68 81       	ld	r22, Y
    3e6a:	cf 5c       	subi	r28, 0xCF	; 207
    3e6c:	d0 40       	sbci	r29, 0x00	; 0
    3e6e:	72 2d       	mov	r23, r2
    3e70:	83 2d       	mov	r24, r3
    3e72:	94 2d       	mov	r25, r4
    3e74:	08 e3       	ldi	r16, 0x38	; 56
    3e76:	0e 94 dc 2b 	call	0x57b8	; 0x57b8 <__rotldi3>
    3e7a:	a2 2e       	mov	r10, r18
    3e7c:	b3 2e       	mov	r11, r19
    3e7e:	c4 2e       	mov	r12, r20
    3e80:	d5 2e       	mov	r13, r21
    3e82:	e6 2e       	mov	r14, r22
    3e84:	f7 2e       	mov	r15, r23
    3e86:	58 2e       	mov	r5, r24
    3e88:	19 2f       	mov	r17, r25
    3e8a:	c5 53       	subi	r28, 0x35	; 53
    3e8c:	df 4f       	sbci	r29, 0xFF	; 255
    3e8e:	28 81       	ld	r18, Y
    3e90:	cb 5c       	subi	r28, 0xCB	; 203
    3e92:	d0 40       	sbci	r29, 0x00	; 0
    3e94:	c4 53       	subi	r28, 0x34	; 52
    3e96:	df 4f       	sbci	r29, 0xFF	; 255
    3e98:	38 81       	ld	r19, Y
    3e9a:	cc 5c       	subi	r28, 0xCC	; 204
    3e9c:	d0 40       	sbci	r29, 0x00	; 0
    3e9e:	c3 53       	subi	r28, 0x33	; 51
    3ea0:	df 4f       	sbci	r29, 0xFF	; 255
    3ea2:	48 81       	ld	r20, Y
    3ea4:	cd 5c       	subi	r28, 0xCD	; 205
    3ea6:	d0 40       	sbci	r29, 0x00	; 0
    3ea8:	c2 53       	subi	r28, 0x32	; 50
    3eaa:	df 4f       	sbci	r29, 0xFF	; 255
    3eac:	58 81       	ld	r21, Y
    3eae:	ce 5c       	subi	r28, 0xCE	; 206
    3eb0:	d0 40       	sbci	r29, 0x00	; 0
    3eb2:	c1 53       	subi	r28, 0x31	; 49
    3eb4:	df 4f       	sbci	r29, 0xFF	; 255
    3eb6:	68 81       	ld	r22, Y
    3eb8:	cf 5c       	subi	r28, 0xCF	; 207
    3eba:	d0 40       	sbci	r29, 0x00	; 0
    3ebc:	72 2d       	mov	r23, r2
    3ebe:	83 2d       	mov	r24, r3
    3ec0:	94 2d       	mov	r25, r4
    3ec2:	0f e3       	ldi	r16, 0x3F	; 63
    3ec4:	0e 94 dc 2b 	call	0x57b8	; 0x57b8 <__rotldi3>
    3ec8:	a2 26       	eor	r10, r18
    3eca:	b3 26       	eor	r11, r19
    3ecc:	c4 26       	eor	r12, r20
    3ece:	d5 26       	eor	r13, r21
    3ed0:	e6 26       	eor	r14, r22
    3ed2:	f7 26       	eor	r15, r23
    3ed4:	58 26       	eor	r5, r24
    3ed6:	19 27       	eor	r17, r25
    3ed8:	c5 53       	subi	r28, 0x35	; 53
    3eda:	df 4f       	sbci	r29, 0xFF	; 255
    3edc:	28 81       	ld	r18, Y
    3ede:	cb 5c       	subi	r28, 0xCB	; 203
    3ee0:	d0 40       	sbci	r29, 0x00	; 0
    3ee2:	c4 53       	subi	r28, 0x34	; 52
    3ee4:	df 4f       	sbci	r29, 0xFF	; 255
    3ee6:	38 81       	ld	r19, Y
    3ee8:	cc 5c       	subi	r28, 0xCC	; 204
    3eea:	d0 40       	sbci	r29, 0x00	; 0
    3eec:	c3 53       	subi	r28, 0x33	; 51
    3eee:	df 4f       	sbci	r29, 0xFF	; 255
    3ef0:	48 81       	ld	r20, Y
    3ef2:	cd 5c       	subi	r28, 0xCD	; 205
    3ef4:	d0 40       	sbci	r29, 0x00	; 0
    3ef6:	c2 53       	subi	r28, 0x32	; 50
    3ef8:	df 4f       	sbci	r29, 0xFF	; 255
    3efa:	58 81       	ld	r21, Y
    3efc:	ce 5c       	subi	r28, 0xCE	; 206
    3efe:	d0 40       	sbci	r29, 0x00	; 0
    3f00:	c1 53       	subi	r28, 0x31	; 49
    3f02:	df 4f       	sbci	r29, 0xFF	; 255
    3f04:	68 81       	ld	r22, Y
    3f06:	cf 5c       	subi	r28, 0xCF	; 207
    3f08:	d0 40       	sbci	r29, 0x00	; 0
    3f0a:	72 2d       	mov	r23, r2
    3f0c:	83 2d       	mov	r24, r3
    3f0e:	94 2d       	mov	r25, r4
    3f10:	07 e0       	ldi	r16, 0x07	; 7
    3f12:	0e 94 c0 2b 	call	0x5780	; 0x5780 <__lshrdi3>
    3f16:	a2 26       	eor	r10, r18
    3f18:	b3 26       	eor	r11, r19
    3f1a:	c4 26       	eor	r12, r20
    3f1c:	d5 26       	eor	r13, r21
    3f1e:	e6 26       	eor	r14, r22
    3f20:	f7 26       	eor	r15, r23
    3f22:	05 2d       	mov	r16, r5
    3f24:	08 27       	eor	r16, r24
    3f26:	19 27       	eor	r17, r25
    3f28:	26 2d       	mov	r18, r6
    3f2a:	37 2d       	mov	r19, r7
    3f2c:	48 2d       	mov	r20, r8
    3f2e:	59 2d       	mov	r21, r9
    3f30:	6b 2f       	mov	r22, r27
    3f32:	7a 2f       	mov	r23, r26
    3f34:	8f 2f       	mov	r24, r31
    3f36:	9e 2f       	mov	r25, r30
    3f38:	0e 94 f7 2b 	call	0x57ee	; 0x57ee <__adddi3>
    3f3c:	c5 53       	subi	r28, 0x35	; 53
    3f3e:	df 4f       	sbci	r29, 0xFF	; 255
    3f40:	28 83       	st	Y, r18
    3f42:	cb 5c       	subi	r28, 0xCB	; 203
    3f44:	d0 40       	sbci	r29, 0x00	; 0
    3f46:	c4 53       	subi	r28, 0x34	; 52
    3f48:	df 4f       	sbci	r29, 0xFF	; 255
    3f4a:	38 83       	st	Y, r19
    3f4c:	cc 5c       	subi	r28, 0xCC	; 204
    3f4e:	d0 40       	sbci	r29, 0x00	; 0
    3f50:	c3 53       	subi	r28, 0x33	; 51
    3f52:	df 4f       	sbci	r29, 0xFF	; 255
    3f54:	48 83       	st	Y, r20
    3f56:	cd 5c       	subi	r28, 0xCD	; 205
    3f58:	d0 40       	sbci	r29, 0x00	; 0
    3f5a:	c2 53       	subi	r28, 0x32	; 50
    3f5c:	df 4f       	sbci	r29, 0xFF	; 255
    3f5e:	58 83       	st	Y, r21
    3f60:	ce 5c       	subi	r28, 0xCE	; 206
    3f62:	d0 40       	sbci	r29, 0x00	; 0
    3f64:	c1 53       	subi	r28, 0x31	; 49
    3f66:	df 4f       	sbci	r29, 0xFF	; 255
    3f68:	68 83       	st	Y, r22
    3f6a:	cf 5c       	subi	r28, 0xCF	; 207
    3f6c:	d0 40       	sbci	r29, 0x00	; 0
    3f6e:	cd 52       	subi	r28, 0x2D	; 45
    3f70:	df 4f       	sbci	r29, 0xFF	; 255
    3f72:	78 83       	st	Y, r23
    3f74:	c3 5d       	subi	r28, 0xD3	; 211
    3f76:	d0 40       	sbci	r29, 0x00	; 0
    3f78:	cc 52       	subi	r28, 0x2C	; 44
    3f7a:	df 4f       	sbci	r29, 0xFF	; 255
    3f7c:	88 83       	st	Y, r24
    3f7e:	c4 5d       	subi	r28, 0xD4	; 212
    3f80:	d0 40       	sbci	r29, 0x00	; 0
    3f82:	49 2e       	mov	r4, r25
			memmove(&(w[0]), &(w[1]), 15*8);
    3f84:	48 e7       	ldi	r20, 0x78	; 120
    3f86:	50 e0       	ldi	r21, 0x00	; 0
    3f88:	be 01       	movw	r22, r28
    3f8a:	67 5f       	subi	r22, 0xF7	; 247
    3f8c:	7f 4f       	sbci	r23, 0xFF	; 255
    3f8e:	ce 01       	movw	r24, r28
    3f90:	01 96       	adiw	r24, 0x01	; 1
    3f92:	0e 94 95 2d 	call	0x5b2a	; 0x5b2a <memmove>
			w[15] = wx;
    3f96:	c5 53       	subi	r28, 0x35	; 53
    3f98:	df 4f       	sbci	r29, 0xFF	; 255
    3f9a:	f8 81       	ld	r31, Y
    3f9c:	cb 5c       	subi	r28, 0xCB	; 203
    3f9e:	d0 40       	sbci	r29, 0x00	; 0
    3fa0:	ea 96       	adiw	r28, 0x3a	; 58
    3fa2:	ff af       	std	Y+63, r31	; 0x3f
    3fa4:	ea 97       	sbiw	r28, 0x3a	; 58
    3fa6:	c4 53       	subi	r28, 0x34	; 52
    3fa8:	df 4f       	sbci	r29, 0xFF	; 255
    3faa:	18 81       	ld	r17, Y
    3fac:	cc 5c       	subi	r28, 0xCC	; 204
    3fae:	d0 40       	sbci	r29, 0x00	; 0
    3fb0:	eb 96       	adiw	r28, 0x3b	; 59
    3fb2:	1f af       	std	Y+63, r17	; 0x3f
    3fb4:	eb 97       	sbiw	r28, 0x3b	; 59
    3fb6:	c3 53       	subi	r28, 0x33	; 51
    3fb8:	df 4f       	sbci	r29, 0xFF	; 255
    3fba:	88 81       	ld	r24, Y
    3fbc:	cd 5c       	subi	r28, 0xCD	; 205
    3fbe:	d0 40       	sbci	r29, 0x00	; 0
    3fc0:	ec 96       	adiw	r28, 0x3c	; 60
    3fc2:	8f af       	std	Y+63, r24	; 0x3f
    3fc4:	ec 97       	sbiw	r28, 0x3c	; 60
    3fc6:	c2 53       	subi	r28, 0x32	; 50
    3fc8:	df 4f       	sbci	r29, 0xFF	; 255
    3fca:	98 81       	ld	r25, Y
    3fcc:	ce 5c       	subi	r28, 0xCE	; 206
    3fce:	d0 40       	sbci	r29, 0x00	; 0
    3fd0:	ed 96       	adiw	r28, 0x3d	; 61
    3fd2:	9f af       	std	Y+63, r25	; 0x3f
    3fd4:	ed 97       	sbiw	r28, 0x3d	; 61
    3fd6:	c1 53       	subi	r28, 0x31	; 49
    3fd8:	df 4f       	sbci	r29, 0xFF	; 255
    3fda:	a8 81       	ld	r26, Y
    3fdc:	cf 5c       	subi	r28, 0xCF	; 207
    3fde:	d0 40       	sbci	r29, 0x00	; 0
    3fe0:	ee 96       	adiw	r28, 0x3e	; 62
    3fe2:	af af       	std	Y+63, r26	; 0x3f
    3fe4:	ee 97       	sbiw	r28, 0x3e	; 62
    3fe6:	cd 52       	subi	r28, 0x2D	; 45
    3fe8:	df 4f       	sbci	r29, 0xFF	; 255
    3fea:	b8 81       	ld	r27, Y
    3fec:	c3 5d       	subi	r28, 0xD3	; 211
    3fee:	d0 40       	sbci	r29, 0x00	; 0
    3ff0:	ef 96       	adiw	r28, 0x3f	; 63
    3ff2:	bf af       	std	Y+63, r27	; 0x3f
    3ff4:	ef 97       	sbiw	r28, 0x3f	; 63
    3ff6:	cc 52       	subi	r28, 0x2C	; 44
    3ff8:	df 4f       	sbci	r29, 0xFF	; 255
    3ffa:	e8 81       	ld	r30, Y
    3ffc:	c4 5d       	subi	r28, 0xD4	; 212
    3ffe:	d0 40       	sbci	r29, 0x00	; 0
    4000:	c1 58       	subi	r28, 0x81	; 129
    4002:	df 4f       	sbci	r29, 0xFF	; 255
    4004:	e8 83       	st	Y, r30
    4006:	cf 57       	subi	r28, 0x7F	; 127
    4008:	d0 40       	sbci	r29, 0x00	; 0
    400a:	c0 58       	subi	r28, 0x80	; 128
    400c:	df 4f       	sbci	r29, 0xFF	; 255
    400e:	48 82       	st	Y, r4
    4010:	c0 58       	subi	r28, 0x80	; 128
    4012:	d0 40       	sbci	r29, 0x00	; 0
		}
		t1 = a[7] + SIGMA_1(a[4]) + CH(a[4], a[5], a[6]) + pgm_read_uint64_t_P(k++) + wx;
    4014:	c7 54       	subi	r28, 0x47	; 71
    4016:	df 4f       	sbci	r29, 0xFF	; 255
    4018:	18 81       	ld	r17, Y
    401a:	c9 5b       	subi	r28, 0xB9	; 185
    401c:	d0 40       	sbci	r29, 0x00	; 0
    401e:	cb 52       	subi	r28, 0x2B	; 43
    4020:	df 4f       	sbci	r29, 0xFF	; 255
    4022:	18 83       	st	Y, r17
    4024:	c5 5d       	subi	r28, 0xD5	; 213
    4026:	d0 40       	sbci	r29, 0x00	; 0
    4028:	c6 54       	subi	r28, 0x46	; 70
    402a:	df 4f       	sbci	r29, 0xFF	; 255
    402c:	a8 81       	ld	r26, Y
    402e:	ca 5b       	subi	r28, 0xBA	; 186
    4030:	d0 40       	sbci	r29, 0x00	; 0
    4032:	ca 52       	subi	r28, 0x2A	; 42
    4034:	df 4f       	sbci	r29, 0xFF	; 255
    4036:	a8 83       	st	Y, r26
    4038:	c6 5d       	subi	r28, 0xD6	; 214
    403a:	d0 40       	sbci	r29, 0x00	; 0
    403c:	c5 54       	subi	r28, 0x45	; 69
    403e:	df 4f       	sbci	r29, 0xFF	; 255
    4040:	b8 81       	ld	r27, Y
    4042:	cb 5b       	subi	r28, 0xBB	; 187
    4044:	d0 40       	sbci	r29, 0x00	; 0
    4046:	c9 52       	subi	r28, 0x29	; 41
    4048:	df 4f       	sbci	r29, 0xFF	; 255
    404a:	b8 83       	st	Y, r27
    404c:	c7 5d       	subi	r28, 0xD7	; 215
    404e:	d0 40       	sbci	r29, 0x00	; 0
    4050:	c4 54       	subi	r28, 0x44	; 68
    4052:	df 4f       	sbci	r29, 0xFF	; 255
    4054:	18 81       	ld	r17, Y
    4056:	cc 5b       	subi	r28, 0xBC	; 188
    4058:	d0 40       	sbci	r29, 0x00	; 0
    405a:	c8 52       	subi	r28, 0x28	; 40
    405c:	df 4f       	sbci	r29, 0xFF	; 255
    405e:	18 83       	st	Y, r17
    4060:	c8 5d       	subi	r28, 0xD8	; 216
    4062:	d0 40       	sbci	r29, 0x00	; 0
    4064:	c3 54       	subi	r28, 0x43	; 67
    4066:	df 4f       	sbci	r29, 0xFF	; 255
    4068:	a8 81       	ld	r26, Y
    406a:	cd 5b       	subi	r28, 0xBD	; 189
    406c:	d0 40       	sbci	r29, 0x00	; 0
    406e:	c7 52       	subi	r28, 0x27	; 39
    4070:	df 4f       	sbci	r29, 0xFF	; 255
    4072:	a8 83       	st	Y, r26
    4074:	c9 5d       	subi	r28, 0xD9	; 217
    4076:	d0 40       	sbci	r29, 0x00	; 0
    4078:	c2 54       	subi	r28, 0x42	; 66
    407a:	df 4f       	sbci	r29, 0xFF	; 255
    407c:	b8 81       	ld	r27, Y
    407e:	ce 5b       	subi	r28, 0xBE	; 190
    4080:	d0 40       	sbci	r29, 0x00	; 0
    4082:	c6 52       	subi	r28, 0x26	; 38
    4084:	df 4f       	sbci	r29, 0xFF	; 255
    4086:	b8 83       	st	Y, r27
    4088:	ca 5d       	subi	r28, 0xDA	; 218
    408a:	d0 40       	sbci	r29, 0x00	; 0
    408c:	c1 54       	subi	r28, 0x41	; 65
    408e:	df 4f       	sbci	r29, 0xFF	; 255
    4090:	18 81       	ld	r17, Y
    4092:	cf 5b       	subi	r28, 0xBF	; 191
    4094:	d0 40       	sbci	r29, 0x00	; 0
    4096:	c3 52       	subi	r28, 0x23	; 35
    4098:	df 4f       	sbci	r29, 0xFF	; 255
    409a:	18 83       	st	Y, r17
    409c:	cd 5d       	subi	r28, 0xDD	; 221
    409e:	d0 40       	sbci	r29, 0x00	; 0
    40a0:	c0 54       	subi	r28, 0x40	; 64
    40a2:	df 4f       	sbci	r29, 0xFF	; 255
    40a4:	a8 81       	ld	r26, Y
    40a6:	c0 5c       	subi	r28, 0xC0	; 192
    40a8:	d0 40       	sbci	r29, 0x00	; 0
    40aa:	c2 52       	subi	r28, 0x22	; 34
    40ac:	df 4f       	sbci	r29, 0xFF	; 255
    40ae:	a8 83       	st	Y, r26
    40b0:	ce 5d       	subi	r28, 0xDE	; 222
    40b2:	d0 40       	sbci	r29, 0x00	; 0
    40b4:	cf 55       	subi	r28, 0x5F	; 95
    40b6:	df 4f       	sbci	r29, 0xFF	; 255
    40b8:	98 80       	ld	r9, Y
    40ba:	c1 5a       	subi	r28, 0xA1	; 161
    40bc:	d0 40       	sbci	r29, 0x00	; 0
    40be:	ce 55       	subi	r28, 0x5E	; 94
    40c0:	df 4f       	sbci	r29, 0xFF	; 255
    40c2:	b8 80       	ld	r11, Y
    40c4:	c2 5a       	subi	r28, 0xA2	; 162
    40c6:	d0 40       	sbci	r29, 0x00	; 0
    40c8:	cd 55       	subi	r28, 0x5D	; 93
    40ca:	df 4f       	sbci	r29, 0xFF	; 255
    40cc:	c8 80       	ld	r12, Y
    40ce:	c3 5a       	subi	r28, 0xA3	; 163
    40d0:	d0 40       	sbci	r29, 0x00	; 0
    40d2:	cc 55       	subi	r28, 0x5C	; 92
    40d4:	df 4f       	sbci	r29, 0xFF	; 255
    40d6:	d8 80       	ld	r13, Y
    40d8:	c4 5a       	subi	r28, 0xA4	; 164
    40da:	d0 40       	sbci	r29, 0x00	; 0
    40dc:	cb 55       	subi	r28, 0x5B	; 91
    40de:	df 4f       	sbci	r29, 0xFF	; 255
    40e0:	f8 80       	ld	r15, Y
    40e2:	c5 5a       	subi	r28, 0xA5	; 165
    40e4:	d0 40       	sbci	r29, 0x00	; 0
    40e6:	ca 55       	subi	r28, 0x5A	; 90
    40e8:	df 4f       	sbci	r29, 0xFF	; 255
    40ea:	18 81       	ld	r17, Y
    40ec:	c6 5a       	subi	r28, 0xA6	; 166
    40ee:	d0 40       	sbci	r29, 0x00	; 0
    40f0:	c9 55       	subi	r28, 0x59	; 89
    40f2:	df 4f       	sbci	r29, 0xFF	; 255
    40f4:	b8 81       	ld	r27, Y
    40f6:	c7 5a       	subi	r28, 0xA7	; 167
    40f8:	d0 40       	sbci	r29, 0x00	; 0
    40fa:	c8 55       	subi	r28, 0x58	; 88
    40fc:	df 4f       	sbci	r29, 0xFF	; 255
    40fe:	a8 81       	ld	r26, Y
    4100:	c8 5a       	subi	r28, 0xA8	; 168
    4102:	d0 40       	sbci	r29, 0x00	; 0
    4104:	79 2d       	mov	r23, r9
    4106:	70 95       	com	r23
    4108:	6b 2d       	mov	r22, r11
    410a:	60 95       	com	r22
    410c:	5c 2d       	mov	r21, r12
    410e:	50 95       	com	r21
    4110:	4d 2d       	mov	r20, r13
    4112:	40 95       	com	r20
    4114:	3f 2d       	mov	r19, r15
    4116:	30 95       	com	r19
    4118:	21 2f       	mov	r18, r17
    411a:	20 95       	com	r18
    411c:	9b 2f       	mov	r25, r27
    411e:	90 95       	com	r25
    4120:	8a 2f       	mov	r24, r26
    4122:	80 95       	com	r24
    4124:	cf 54       	subi	r28, 0x4F	; 79
    4126:	df 4f       	sbci	r29, 0xFF	; 255
    4128:	68 80       	ld	r6, Y
    412a:	c1 5b       	subi	r28, 0xB1	; 177
    412c:	d0 40       	sbci	r29, 0x00	; 0
    412e:	67 22       	and	r6, r23
    4130:	ce 54       	subi	r28, 0x4E	; 78
    4132:	df 4f       	sbci	r29, 0xFF	; 255
    4134:	88 80       	ld	r8, Y
    4136:	c2 5b       	subi	r28, 0xB2	; 178
    4138:	d0 40       	sbci	r29, 0x00	; 0
    413a:	86 22       	and	r8, r22
    413c:	cd 54       	subi	r28, 0x4D	; 77
    413e:	df 4f       	sbci	r29, 0xFF	; 255
    4140:	e8 80       	ld	r14, Y
    4142:	c3 5b       	subi	r28, 0xB3	; 179
    4144:	d0 40       	sbci	r29, 0x00	; 0
    4146:	e5 22       	and	r14, r21
    4148:	cc 54       	subi	r28, 0x4C	; 76
    414a:	df 4f       	sbci	r29, 0xFF	; 255
    414c:	f8 81       	ld	r31, Y
    414e:	c4 5b       	subi	r28, 0xB4	; 180
    4150:	d0 40       	sbci	r29, 0x00	; 0
    4152:	f4 23       	and	r31, r20
    4154:	cb 54       	subi	r28, 0x4B	; 75
    4156:	df 4f       	sbci	r29, 0xFF	; 255
    4158:	78 81       	ld	r23, Y
    415a:	c5 5b       	subi	r28, 0xB5	; 181
    415c:	d0 40       	sbci	r29, 0x00	; 0
    415e:	73 23       	and	r23, r19
    4160:	ca 54       	subi	r28, 0x4A	; 74
    4162:	df 4f       	sbci	r29, 0xFF	; 255
    4164:	58 81       	ld	r21, Y
    4166:	c6 5b       	subi	r28, 0xB6	; 182
    4168:	d0 40       	sbci	r29, 0x00	; 0
    416a:	52 23       	and	r21, r18
    416c:	c9 54       	subi	r28, 0x49	; 73
    416e:	df 4f       	sbci	r29, 0xFF	; 255
    4170:	38 81       	ld	r19, Y
    4172:	c7 5b       	subi	r28, 0xB7	; 183
    4174:	d0 40       	sbci	r29, 0x00	; 0
    4176:	39 23       	and	r19, r25
    4178:	c8 54       	subi	r28, 0x48	; 72
    417a:	df 4f       	sbci	r29, 0xFF	; 255
    417c:	98 81       	ld	r25, Y
    417e:	c8 5b       	subi	r28, 0xB8	; 184
    4180:	d0 40       	sbci	r29, 0x00	; 0
    4182:	98 23       	and	r25, r24
    4184:	c7 55       	subi	r28, 0x57	; 87
    4186:	df 4f       	sbci	r29, 0xFF	; 255
    4188:	78 80       	ld	r7, Y
    418a:	c9 5a       	subi	r28, 0xA9	; 169
    418c:	d0 40       	sbci	r29, 0x00	; 0
    418e:	79 20       	and	r7, r9
    4190:	c6 55       	subi	r28, 0x56	; 86
    4192:	df 4f       	sbci	r29, 0xFF	; 255
    4194:	a8 80       	ld	r10, Y
    4196:	ca 5a       	subi	r28, 0xAA	; 170
    4198:	d0 40       	sbci	r29, 0x00	; 0
    419a:	ab 20       	and	r10, r11
    419c:	c5 55       	subi	r28, 0x55	; 85
    419e:	df 4f       	sbci	r29, 0xFF	; 255
    41a0:	08 81       	ld	r16, Y
    41a2:	cb 5a       	subi	r28, 0xAB	; 171
    41a4:	d0 40       	sbci	r29, 0x00	; 0
    41a6:	0c 21       	and	r16, r12
    41a8:	c4 55       	subi	r28, 0x54	; 84
    41aa:	df 4f       	sbci	r29, 0xFF	; 255
    41ac:	e8 81       	ld	r30, Y
    41ae:	cc 5a       	subi	r28, 0xAC	; 172
    41b0:	d0 40       	sbci	r29, 0x00	; 0
    41b2:	ed 21       	and	r30, r13
    41b4:	c3 55       	subi	r28, 0x53	; 83
    41b6:	df 4f       	sbci	r29, 0xFF	; 255
    41b8:	68 81       	ld	r22, Y
    41ba:	cd 5a       	subi	r28, 0xAD	; 173
    41bc:	d0 40       	sbci	r29, 0x00	; 0
    41be:	6f 21       	and	r22, r15
    41c0:	c2 55       	subi	r28, 0x52	; 82
    41c2:	df 4f       	sbci	r29, 0xFF	; 255
    41c4:	48 81       	ld	r20, Y
    41c6:	ce 5a       	subi	r28, 0xAE	; 174
    41c8:	d0 40       	sbci	r29, 0x00	; 0
    41ca:	41 23       	and	r20, r17
    41cc:	c1 55       	subi	r28, 0x51	; 81
    41ce:	df 4f       	sbci	r29, 0xFF	; 255
    41d0:	28 81       	ld	r18, Y
    41d2:	cf 5a       	subi	r28, 0xAF	; 175
    41d4:	d0 40       	sbci	r29, 0x00	; 0
    41d6:	2b 23       	and	r18, r27
    41d8:	c0 55       	subi	r28, 0x50	; 80
    41da:	df 4f       	sbci	r29, 0xFF	; 255
    41dc:	88 81       	ld	r24, Y
    41de:	c0 5b       	subi	r28, 0xB0	; 176
    41e0:	d0 40       	sbci	r29, 0x00	; 0
    41e2:	8a 23       	and	r24, r26
    41e4:	67 24       	eor	r6, r7
    41e6:	c1 52       	subi	r28, 0x21	; 33
    41e8:	df 4f       	sbci	r29, 0xFF	; 255
    41ea:	68 82       	st	Y, r6
    41ec:	cf 5d       	subi	r28, 0xDF	; 223
    41ee:	d0 40       	sbci	r29, 0x00	; 0
    41f0:	8a 24       	eor	r8, r10
    41f2:	c0 52       	subi	r28, 0x20	; 32
    41f4:	df 4f       	sbci	r29, 0xFF	; 255
    41f6:	88 82       	st	Y, r8
    41f8:	c0 5e       	subi	r28, 0xE0	; 224
    41fa:	d0 40       	sbci	r29, 0x00	; 0
    41fc:	e0 26       	eor	r14, r16
    41fe:	cf 51       	subi	r28, 0x1F	; 31
    4200:	df 4f       	sbci	r29, 0xFF	; 255
    4202:	e8 82       	st	Y, r14
    4204:	c1 5e       	subi	r28, 0xE1	; 225
    4206:	d0 40       	sbci	r29, 0x00	; 0
    4208:	fe 27       	eor	r31, r30
    420a:	ce 51       	subi	r28, 0x1E	; 30
    420c:	df 4f       	sbci	r29, 0xFF	; 255
    420e:	f8 83       	st	Y, r31
    4210:	c2 5e       	subi	r28, 0xE2	; 226
    4212:	d0 40       	sbci	r29, 0x00	; 0
    4214:	76 27       	eor	r23, r22
    4216:	cd 51       	subi	r28, 0x1D	; 29
    4218:	df 4f       	sbci	r29, 0xFF	; 255
    421a:	78 83       	st	Y, r23
    421c:	c3 5e       	subi	r28, 0xE3	; 227
    421e:	d0 40       	sbci	r29, 0x00	; 0
    4220:	54 27       	eor	r21, r20
    4222:	cc 51       	subi	r28, 0x1C	; 28
    4224:	df 4f       	sbci	r29, 0xFF	; 255
    4226:	58 83       	st	Y, r21
    4228:	c4 5e       	subi	r28, 0xE4	; 228
    422a:	d0 40       	sbci	r29, 0x00	; 0
    422c:	32 27       	eor	r19, r18
    422e:	cb 51       	subi	r28, 0x1B	; 27
    4230:	df 4f       	sbci	r29, 0xFF	; 255
    4232:	38 83       	st	Y, r19
    4234:	c5 5e       	subi	r28, 0xE5	; 229
    4236:	d0 40       	sbci	r29, 0x00	; 0
    4238:	98 27       	eor	r25, r24
    423a:	ca 51       	subi	r28, 0x1A	; 26
    423c:	df 4f       	sbci	r29, 0xFF	; 255
    423e:	98 83       	st	Y, r25
    4240:	c6 5e       	subi	r28, 0xE6	; 230
    4242:	d0 40       	sbci	r29, 0x00	; 0
uint64_t pgm_read_uint64_t_P(const uint64_t * p){
	union {
		uint64_t v64;
		uint32_t v32[2];
	} ret;
	ret.v32[0] = pgm_read_dword(p);
    4244:	cf 52       	subi	r28, 0x2F	; 47
    4246:	df 4f       	sbci	r29, 0xFF	; 255
    4248:	e8 81       	ld	r30, Y
    424a:	f9 81       	ldd	r31, Y+1	; 0x01
    424c:	c1 5d       	subi	r28, 0xD1	; 209
    424e:	d0 40       	sbci	r29, 0x00	; 0
    4250:	45 91       	lpm	r20, Z+
    4252:	55 91       	lpm	r21, Z+
    4254:	65 91       	lpm	r22, Z+
    4256:	74 91       	lpm	r23, Z
    4258:	a4 2e       	mov	r10, r20
    425a:	cf 53       	subi	r28, 0x3F	; 63
    425c:	df 4f       	sbci	r29, 0xFF	; 255
    425e:	48 83       	st	Y, r20
    4260:	59 83       	std	Y+1, r21	; 0x01
    4262:	6a 83       	std	Y+2, r22	; 0x02
    4264:	7b 83       	std	Y+3, r23	; 0x03
    4266:	c1 5c       	subi	r28, 0xC1	; 193
    4268:	d0 40       	sbci	r29, 0x00	; 0
	ret.v32[1] = pgm_read_dword((uint8_t*)p + 4);
    426a:	cf 52       	subi	r28, 0x2F	; 47
    426c:	df 4f       	sbci	r29, 0xFF	; 255
    426e:	e8 81       	ld	r30, Y
    4270:	f9 81       	ldd	r31, Y+1	; 0x01
    4272:	c1 5d       	subi	r28, 0xD1	; 209
    4274:	d0 40       	sbci	r29, 0x00	; 0
    4276:	34 96       	adiw	r30, 0x04	; 4
    4278:	45 91       	lpm	r20, Z+
    427a:	55 91       	lpm	r21, Z+
    427c:	65 91       	lpm	r22, Z+
    427e:	74 91       	lpm	r23, Z
    4280:	e4 2e       	mov	r14, r20
    4282:	cb 53       	subi	r28, 0x3B	; 59
    4284:	df 4f       	sbci	r29, 0xFF	; 255
    4286:	48 83       	st	Y, r20
    4288:	59 83       	std	Y+1, r21	; 0x01
    428a:	6a 83       	std	Y+2, r22	; 0x02
    428c:	7b 83       	std	Y+3, r23	; 0x03
    428e:	c5 5c       	subi	r28, 0xC5	; 197
    4290:	d0 40       	sbci	r29, 0x00	; 0
    4292:	29 2d       	mov	r18, r9
    4294:	3b 2d       	mov	r19, r11
    4296:	4c 2d       	mov	r20, r12
    4298:	5d 2d       	mov	r21, r13
    429a:	6f 2d       	mov	r22, r15
    429c:	71 2f       	mov	r23, r17
    429e:	8b 2f       	mov	r24, r27
    42a0:	9a 2f       	mov	r25, r26
    42a2:	0e e2       	ldi	r16, 0x2E	; 46
    42a4:	0e 94 dc 2b 	call	0x57b8	; 0x57b8 <__rotldi3>
    42a8:	22 2e       	mov	r2, r18
    42aa:	33 2e       	mov	r3, r19
    42ac:	54 2e       	mov	r5, r20
    42ae:	65 2e       	mov	r6, r21
    42b0:	76 2e       	mov	r7, r22
    42b2:	87 2e       	mov	r8, r23
    42b4:	f8 2f       	mov	r31, r24
    42b6:	e9 2f       	mov	r30, r25
    42b8:	29 2d       	mov	r18, r9
    42ba:	3b 2d       	mov	r19, r11
    42bc:	4c 2d       	mov	r20, r12
    42be:	5d 2d       	mov	r21, r13
    42c0:	6f 2d       	mov	r22, r15
    42c2:	71 2f       	mov	r23, r17
    42c4:	8b 2f       	mov	r24, r27
    42c6:	9a 2f       	mov	r25, r26
    42c8:	02 e3       	ldi	r16, 0x32	; 50
    42ca:	0e 94 dc 2b 	call	0x57b8	; 0x57b8 <__rotldi3>
    42ce:	22 26       	eor	r2, r18
    42d0:	33 26       	eor	r3, r19
    42d2:	54 26       	eor	r5, r20
    42d4:	65 26       	eor	r6, r21
    42d6:	76 26       	eor	r7, r22
    42d8:	87 26       	eor	r8, r23
    42da:	f8 27       	eor	r31, r24
    42dc:	e9 27       	eor	r30, r25
    42de:	29 2d       	mov	r18, r9
    42e0:	3b 2d       	mov	r19, r11
    42e2:	4c 2d       	mov	r20, r12
    42e4:	5d 2d       	mov	r21, r13
    42e6:	6f 2d       	mov	r22, r15
    42e8:	71 2f       	mov	r23, r17
    42ea:	8b 2f       	mov	r24, r27
    42ec:	9a 2f       	mov	r25, r26
    42ee:	07 e1       	ldi	r16, 0x17	; 23
    42f0:	0e 94 dc 2b 	call	0x57b8	; 0x57b8 <__rotldi3>
    42f4:	22 26       	eor	r2, r18
    42f6:	33 26       	eor	r3, r19
    42f8:	54 26       	eor	r5, r20
    42fa:	65 26       	eor	r6, r21
    42fc:	76 26       	eor	r7, r22
    42fe:	87 26       	eor	r8, r23
    4300:	f8 27       	eor	r31, r24
    4302:	e9 27       	eor	r30, r25
    4304:	cb 52       	subi	r28, 0x2B	; 43
    4306:	df 4f       	sbci	r29, 0xFF	; 255
    4308:	28 81       	ld	r18, Y
    430a:	c5 5d       	subi	r28, 0xD5	; 213
    430c:	d0 40       	sbci	r29, 0x00	; 0
    430e:	ca 52       	subi	r28, 0x2A	; 42
    4310:	df 4f       	sbci	r29, 0xFF	; 255
    4312:	38 81       	ld	r19, Y
    4314:	c6 5d       	subi	r28, 0xD6	; 214
    4316:	d0 40       	sbci	r29, 0x00	; 0
    4318:	c9 52       	subi	r28, 0x29	; 41
    431a:	df 4f       	sbci	r29, 0xFF	; 255
    431c:	48 81       	ld	r20, Y
    431e:	c7 5d       	subi	r28, 0xD7	; 215
    4320:	d0 40       	sbci	r29, 0x00	; 0
    4322:	c8 52       	subi	r28, 0x28	; 40
    4324:	df 4f       	sbci	r29, 0xFF	; 255
    4326:	58 81       	ld	r21, Y
    4328:	c8 5d       	subi	r28, 0xD8	; 216
    432a:	d0 40       	sbci	r29, 0x00	; 0
    432c:	c7 52       	subi	r28, 0x27	; 39
    432e:	df 4f       	sbci	r29, 0xFF	; 255
    4330:	68 81       	ld	r22, Y
    4332:	c9 5d       	subi	r28, 0xD9	; 217
    4334:	d0 40       	sbci	r29, 0x00	; 0
    4336:	c6 52       	subi	r28, 0x26	; 38
    4338:	df 4f       	sbci	r29, 0xFF	; 255
    433a:	78 81       	ld	r23, Y
    433c:	ca 5d       	subi	r28, 0xDA	; 218
    433e:	d0 40       	sbci	r29, 0x00	; 0
    4340:	c3 52       	subi	r28, 0x23	; 35
    4342:	df 4f       	sbci	r29, 0xFF	; 255
    4344:	88 81       	ld	r24, Y
    4346:	cd 5d       	subi	r28, 0xDD	; 221
    4348:	d0 40       	sbci	r29, 0x00	; 0
    434a:	c2 52       	subi	r28, 0x22	; 34
    434c:	df 4f       	sbci	r29, 0xFF	; 255
    434e:	98 81       	ld	r25, Y
    4350:	ce 5d       	subi	r28, 0xDE	; 222
    4352:	d0 40       	sbci	r29, 0x00	; 0
    4354:	ce 53       	subi	r28, 0x3E	; 62
    4356:	df 4f       	sbci	r29, 0xFF	; 255
    4358:	b8 80       	ld	r11, Y
    435a:	c2 5c       	subi	r28, 0xC2	; 194
    435c:	d0 40       	sbci	r29, 0x00	; 0
    435e:	cd 53       	subi	r28, 0x3D	; 61
    4360:	df 4f       	sbci	r29, 0xFF	; 255
    4362:	c8 80       	ld	r12, Y
    4364:	c3 5c       	subi	r28, 0xC3	; 195
    4366:	d0 40       	sbci	r29, 0x00	; 0
    4368:	cc 53       	subi	r28, 0x3C	; 60
    436a:	df 4f       	sbci	r29, 0xFF	; 255
    436c:	d8 80       	ld	r13, Y
    436e:	c4 5c       	subi	r28, 0xC4	; 196
    4370:	d0 40       	sbci	r29, 0x00	; 0
    4372:	ca 53       	subi	r28, 0x3A	; 58
    4374:	df 4f       	sbci	r29, 0xFF	; 255
    4376:	f8 80       	ld	r15, Y
    4378:	c6 5c       	subi	r28, 0xC6	; 198
    437a:	d0 40       	sbci	r29, 0x00	; 0
    437c:	c9 53       	subi	r28, 0x39	; 57
    437e:	df 4f       	sbci	r29, 0xFF	; 255
    4380:	08 81       	ld	r16, Y
    4382:	c7 5c       	subi	r28, 0xC7	; 199
    4384:	d0 40       	sbci	r29, 0x00	; 0
    4386:	c8 53       	subi	r28, 0x38	; 56
    4388:	df 4f       	sbci	r29, 0xFF	; 255
    438a:	18 81       	ld	r17, Y
    438c:	c8 5c       	subi	r28, 0xC8	; 200
    438e:	d0 40       	sbci	r29, 0x00	; 0
    4390:	0e 94 f7 2b 	call	0x57ee	; 0x57ee <__adddi3>
    4394:	a2 2e       	mov	r10, r18
    4396:	b3 2e       	mov	r11, r19
    4398:	c4 2e       	mov	r12, r20
    439a:	d5 2e       	mov	r13, r21
    439c:	e6 2e       	mov	r14, r22
    439e:	f7 2e       	mov	r15, r23
    43a0:	08 2f       	mov	r16, r24
    43a2:	19 2f       	mov	r17, r25
    43a4:	22 2d       	mov	r18, r2
    43a6:	33 2d       	mov	r19, r3
    43a8:	45 2d       	mov	r20, r5
    43aa:	56 2d       	mov	r21, r6
    43ac:	67 2d       	mov	r22, r7
    43ae:	78 2d       	mov	r23, r8
    43b0:	8f 2f       	mov	r24, r31
    43b2:	9e 2f       	mov	r25, r30
    43b4:	0e 94 f7 2b 	call	0x57ee	; 0x57ee <__adddi3>
		}else{
			wx = SIGMA_b(w[14]) + w[9] + SIGMA_a(w[1]) + w[0];
			memmove(&(w[0]), &(w[1]), 15*8);
			w[15] = wx;
		}
		t1 = a[7] + SIGMA_1(a[4]) + CH(a[4], a[5], a[6]) + pgm_read_uint64_t_P(k++) + wx;
    43b8:	c1 52       	subi	r28, 0x21	; 33
    43ba:	df 4f       	sbci	r29, 0xFF	; 255
    43bc:	a8 80       	ld	r10, Y
    43be:	cf 5d       	subi	r28, 0xDF	; 223
    43c0:	d0 40       	sbci	r29, 0x00	; 0
    43c2:	c0 52       	subi	r28, 0x20	; 32
    43c4:	df 4f       	sbci	r29, 0xFF	; 255
    43c6:	b8 80       	ld	r11, Y
    43c8:	c0 5e       	subi	r28, 0xE0	; 224
    43ca:	d0 40       	sbci	r29, 0x00	; 0
    43cc:	cf 51       	subi	r28, 0x1F	; 31
    43ce:	df 4f       	sbci	r29, 0xFF	; 255
    43d0:	c8 80       	ld	r12, Y
    43d2:	c1 5e       	subi	r28, 0xE1	; 225
    43d4:	d0 40       	sbci	r29, 0x00	; 0
    43d6:	ce 51       	subi	r28, 0x1E	; 30
    43d8:	df 4f       	sbci	r29, 0xFF	; 255
    43da:	d8 80       	ld	r13, Y
    43dc:	c2 5e       	subi	r28, 0xE2	; 226
    43de:	d0 40       	sbci	r29, 0x00	; 0
    43e0:	cd 51       	subi	r28, 0x1D	; 29
    43e2:	df 4f       	sbci	r29, 0xFF	; 255
    43e4:	e8 80       	ld	r14, Y
    43e6:	c3 5e       	subi	r28, 0xE3	; 227
    43e8:	d0 40       	sbci	r29, 0x00	; 0
    43ea:	cc 51       	subi	r28, 0x1C	; 28
    43ec:	df 4f       	sbci	r29, 0xFF	; 255
    43ee:	f8 80       	ld	r15, Y
    43f0:	c4 5e       	subi	r28, 0xE4	; 228
    43f2:	d0 40       	sbci	r29, 0x00	; 0
    43f4:	cb 51       	subi	r28, 0x1B	; 27
    43f6:	df 4f       	sbci	r29, 0xFF	; 255
    43f8:	08 81       	ld	r16, Y
    43fa:	c5 5e       	subi	r28, 0xE5	; 229
    43fc:	d0 40       	sbci	r29, 0x00	; 0
    43fe:	ca 51       	subi	r28, 0x1A	; 26
    4400:	df 4f       	sbci	r29, 0xFF	; 255
    4402:	18 81       	ld	r17, Y
    4404:	c6 5e       	subi	r28, 0xE6	; 230
    4406:	d0 40       	sbci	r29, 0x00	; 0
    4408:	0e 94 f7 2b 	call	0x57ee	; 0x57ee <__adddi3>
    440c:	c5 53       	subi	r28, 0x35	; 53
    440e:	df 4f       	sbci	r29, 0xFF	; 255
    4410:	a8 80       	ld	r10, Y
    4412:	cb 5c       	subi	r28, 0xCB	; 203
    4414:	d0 40       	sbci	r29, 0x00	; 0
    4416:	c4 53       	subi	r28, 0x34	; 52
    4418:	df 4f       	sbci	r29, 0xFF	; 255
    441a:	b8 80       	ld	r11, Y
    441c:	cc 5c       	subi	r28, 0xCC	; 204
    441e:	d0 40       	sbci	r29, 0x00	; 0
    4420:	c3 53       	subi	r28, 0x33	; 51
    4422:	df 4f       	sbci	r29, 0xFF	; 255
    4424:	c8 80       	ld	r12, Y
    4426:	cd 5c       	subi	r28, 0xCD	; 205
    4428:	d0 40       	sbci	r29, 0x00	; 0
    442a:	c2 53       	subi	r28, 0x32	; 50
    442c:	df 4f       	sbci	r29, 0xFF	; 255
    442e:	d8 80       	ld	r13, Y
    4430:	ce 5c       	subi	r28, 0xCE	; 206
    4432:	d0 40       	sbci	r29, 0x00	; 0
    4434:	c1 53       	subi	r28, 0x31	; 49
    4436:	df 4f       	sbci	r29, 0xFF	; 255
    4438:	e8 80       	ld	r14, Y
    443a:	cf 5c       	subi	r28, 0xCF	; 207
    443c:	d0 40       	sbci	r29, 0x00	; 0
    443e:	cd 52       	subi	r28, 0x2D	; 45
    4440:	df 4f       	sbci	r29, 0xFF	; 255
    4442:	f8 80       	ld	r15, Y
    4444:	c3 5d       	subi	r28, 0xD3	; 211
    4446:	d0 40       	sbci	r29, 0x00	; 0
    4448:	cc 52       	subi	r28, 0x2C	; 44
    444a:	df 4f       	sbci	r29, 0xFF	; 255
    444c:	08 81       	ld	r16, Y
    444e:	c4 5d       	subi	r28, 0xD4	; 212
    4450:	d0 40       	sbci	r29, 0x00	; 0
    4452:	14 2d       	mov	r17, r4
    4454:	0e 94 f7 2b 	call	0x57ee	; 0x57ee <__adddi3>
    4458:	c5 53       	subi	r28, 0x35	; 53
    445a:	df 4f       	sbci	r29, 0xFF	; 255
    445c:	28 83       	st	Y, r18
    445e:	cb 5c       	subi	r28, 0xCB	; 203
    4460:	d0 40       	sbci	r29, 0x00	; 0
    4462:	c4 53       	subi	r28, 0x34	; 52
    4464:	df 4f       	sbci	r29, 0xFF	; 255
    4466:	38 83       	st	Y, r19
    4468:	cc 5c       	subi	r28, 0xCC	; 204
    446a:	d0 40       	sbci	r29, 0x00	; 0
    446c:	c3 53       	subi	r28, 0x33	; 51
    446e:	df 4f       	sbci	r29, 0xFF	; 255
    4470:	48 83       	st	Y, r20
    4472:	cd 5c       	subi	r28, 0xCD	; 205
    4474:	d0 40       	sbci	r29, 0x00	; 0
    4476:	c2 53       	subi	r28, 0x32	; 50
    4478:	df 4f       	sbci	r29, 0xFF	; 255
    447a:	58 83       	st	Y, r21
    447c:	ce 5c       	subi	r28, 0xCE	; 206
    447e:	d0 40       	sbci	r29, 0x00	; 0
    4480:	c1 53       	subi	r28, 0x31	; 49
    4482:	df 4f       	sbci	r29, 0xFF	; 255
    4484:	68 83       	st	Y, r22
    4486:	cf 5c       	subi	r28, 0xCF	; 207
    4488:	d0 40       	sbci	r29, 0x00	; 0
    448a:	cd 52       	subi	r28, 0x2D	; 45
    448c:	df 4f       	sbci	r29, 0xFF	; 255
    448e:	78 83       	st	Y, r23
    4490:	c3 5d       	subi	r28, 0xD3	; 211
    4492:	d0 40       	sbci	r29, 0x00	; 0
    4494:	cc 52       	subi	r28, 0x2C	; 44
    4496:	df 4f       	sbci	r29, 0xFF	; 255
    4498:	88 83       	st	Y, r24
    449a:	c4 5d       	subi	r28, 0xD4	; 212
    449c:	d0 40       	sbci	r29, 0x00	; 0
    449e:	cb 52       	subi	r28, 0x2B	; 43
    44a0:	df 4f       	sbci	r29, 0xFF	; 255
    44a2:	98 83       	st	Y, r25
    44a4:	c5 5d       	subi	r28, 0xD5	; 213
    44a6:	d0 40       	sbci	r29, 0x00	; 0
		t2 = SIGMA_0(a[0]) + MAJ(a[0], a[1], a[2]);
    44a8:	cf 57       	subi	r28, 0x7F	; 127
    44aa:	df 4f       	sbci	r29, 0xFF	; 255
    44ac:	a8 80       	ld	r10, Y
    44ae:	c1 58       	subi	r28, 0x81	; 129
    44b0:	d0 40       	sbci	r29, 0x00	; 0
    44b2:	ce 57       	subi	r28, 0x7E	; 126
    44b4:	df 4f       	sbci	r29, 0xFF	; 255
    44b6:	b8 80       	ld	r11, Y
    44b8:	c2 58       	subi	r28, 0x82	; 130
    44ba:	d0 40       	sbci	r29, 0x00	; 0
    44bc:	cd 57       	subi	r28, 0x7D	; 125
    44be:	df 4f       	sbci	r29, 0xFF	; 255
    44c0:	78 80       	ld	r7, Y
    44c2:	c3 58       	subi	r28, 0x83	; 131
    44c4:	d0 40       	sbci	r29, 0x00	; 0
    44c6:	cc 57       	subi	r28, 0x7C	; 124
    44c8:	df 4f       	sbci	r29, 0xFF	; 255
    44ca:	68 80       	ld	r6, Y
    44cc:	c4 58       	subi	r28, 0x84	; 132
    44ce:	d0 40       	sbci	r29, 0x00	; 0
    44d0:	cb 57       	subi	r28, 0x7B	; 123
    44d2:	df 4f       	sbci	r29, 0xFF	; 255
    44d4:	58 80       	ld	r5, Y
    44d6:	c5 58       	subi	r28, 0x85	; 133
    44d8:	d0 40       	sbci	r29, 0x00	; 0
    44da:	ca 57       	subi	r28, 0x7A	; 122
    44dc:	df 4f       	sbci	r29, 0xFF	; 255
    44de:	48 80       	ld	r4, Y
    44e0:	c6 58       	subi	r28, 0x86	; 134
    44e2:	d0 40       	sbci	r29, 0x00	; 0
    44e4:	c9 57       	subi	r28, 0x79	; 121
    44e6:	df 4f       	sbci	r29, 0xFF	; 255
    44e8:	38 80       	ld	r3, Y
    44ea:	c7 58       	subi	r28, 0x87	; 135
    44ec:	d0 40       	sbci	r29, 0x00	; 0
    44ee:	c8 57       	subi	r28, 0x78	; 120
    44f0:	df 4f       	sbci	r29, 0xFF	; 255
    44f2:	28 80       	ld	r2, Y
    44f4:	c8 58       	subi	r28, 0x88	; 136
    44f6:	d0 40       	sbci	r29, 0x00	; 0
    44f8:	c7 57       	subi	r28, 0x77	; 119
    44fa:	df 4f       	sbci	r29, 0xFF	; 255
    44fc:	18 81       	ld	r17, Y
    44fe:	c9 58       	subi	r28, 0x89	; 137
    4500:	d0 40       	sbci	r29, 0x00	; 0
    4502:	ca 52       	subi	r28, 0x2A	; 42
    4504:	df 4f       	sbci	r29, 0xFF	; 255
    4506:	18 83       	st	Y, r17
    4508:	c6 5d       	subi	r28, 0xD6	; 214
    450a:	d0 40       	sbci	r29, 0x00	; 0
    450c:	c6 57       	subi	r28, 0x76	; 118
    450e:	df 4f       	sbci	r29, 0xFF	; 255
    4510:	18 81       	ld	r17, Y
    4512:	ca 58       	subi	r28, 0x8A	; 138
    4514:	d0 40       	sbci	r29, 0x00	; 0
    4516:	c9 52       	subi	r28, 0x29	; 41
    4518:	df 4f       	sbci	r29, 0xFF	; 255
    451a:	18 83       	st	Y, r17
    451c:	c7 5d       	subi	r28, 0xD7	; 215
    451e:	d0 40       	sbci	r29, 0x00	; 0
    4520:	c5 57       	subi	r28, 0x75	; 117
    4522:	df 4f       	sbci	r29, 0xFF	; 255
    4524:	18 81       	ld	r17, Y
    4526:	cb 58       	subi	r28, 0x8B	; 139
    4528:	d0 40       	sbci	r29, 0x00	; 0
    452a:	c8 52       	subi	r28, 0x28	; 40
    452c:	df 4f       	sbci	r29, 0xFF	; 255
    452e:	18 83       	st	Y, r17
    4530:	c8 5d       	subi	r28, 0xD8	; 216
    4532:	d0 40       	sbci	r29, 0x00	; 0
    4534:	c4 57       	subi	r28, 0x74	; 116
    4536:	df 4f       	sbci	r29, 0xFF	; 255
    4538:	18 81       	ld	r17, Y
    453a:	cc 58       	subi	r28, 0x8C	; 140
    453c:	d0 40       	sbci	r29, 0x00	; 0
    453e:	c7 52       	subi	r28, 0x27	; 39
    4540:	df 4f       	sbci	r29, 0xFF	; 255
    4542:	18 83       	st	Y, r17
    4544:	c9 5d       	subi	r28, 0xD9	; 217
    4546:	d0 40       	sbci	r29, 0x00	; 0
    4548:	c3 57       	subi	r28, 0x73	; 115
    454a:	df 4f       	sbci	r29, 0xFF	; 255
    454c:	18 81       	ld	r17, Y
    454e:	cd 58       	subi	r28, 0x8D	; 141
    4550:	d0 40       	sbci	r29, 0x00	; 0
    4552:	c6 52       	subi	r28, 0x26	; 38
    4554:	df 4f       	sbci	r29, 0xFF	; 255
    4556:	18 83       	st	Y, r17
    4558:	ca 5d       	subi	r28, 0xDA	; 218
    455a:	d0 40       	sbci	r29, 0x00	; 0
    455c:	c2 57       	subi	r28, 0x72	; 114
    455e:	df 4f       	sbci	r29, 0xFF	; 255
    4560:	18 81       	ld	r17, Y
    4562:	ce 58       	subi	r28, 0x8E	; 142
    4564:	d0 40       	sbci	r29, 0x00	; 0
    4566:	c3 52       	subi	r28, 0x23	; 35
    4568:	df 4f       	sbci	r29, 0xFF	; 255
    456a:	18 83       	st	Y, r17
    456c:	cd 5d       	subi	r28, 0xDD	; 221
    456e:	d0 40       	sbci	r29, 0x00	; 0
    4570:	c1 57       	subi	r28, 0x71	; 113
    4572:	df 4f       	sbci	r29, 0xFF	; 255
    4574:	18 81       	ld	r17, Y
    4576:	cf 58       	subi	r28, 0x8F	; 143
    4578:	d0 40       	sbci	r29, 0x00	; 0
    457a:	c2 52       	subi	r28, 0x22	; 34
    457c:	df 4f       	sbci	r29, 0xFF	; 255
    457e:	18 83       	st	Y, r17
    4580:	ce 5d       	subi	r28, 0xDE	; 222
    4582:	d0 40       	sbci	r29, 0x00	; 0
    4584:	c0 57       	subi	r28, 0x70	; 112
    4586:	df 4f       	sbci	r29, 0xFF	; 255
    4588:	88 80       	ld	r8, Y
    458a:	c0 59       	subi	r28, 0x90	; 144
    458c:	d0 40       	sbci	r29, 0x00	; 0
    458e:	cf 56       	subi	r28, 0x6F	; 111
    4590:	df 4f       	sbci	r29, 0xFF	; 255
    4592:	18 81       	ld	r17, Y
    4594:	c1 59       	subi	r28, 0x91	; 145
    4596:	d0 40       	sbci	r29, 0x00	; 0
    4598:	c1 52       	subi	r28, 0x21	; 33
    459a:	df 4f       	sbci	r29, 0xFF	; 255
    459c:	18 83       	st	Y, r17
    459e:	cf 5d       	subi	r28, 0xDF	; 223
    45a0:	d0 40       	sbci	r29, 0x00	; 0
    45a2:	ce 56       	subi	r28, 0x6E	; 110
    45a4:	df 4f       	sbci	r29, 0xFF	; 255
    45a6:	18 81       	ld	r17, Y
    45a8:	c2 59       	subi	r28, 0x92	; 146
    45aa:	d0 40       	sbci	r29, 0x00	; 0
    45ac:	c0 52       	subi	r28, 0x20	; 32
    45ae:	df 4f       	sbci	r29, 0xFF	; 255
    45b0:	18 83       	st	Y, r17
    45b2:	c0 5e       	subi	r28, 0xE0	; 224
    45b4:	d0 40       	sbci	r29, 0x00	; 0
    45b6:	cd 56       	subi	r28, 0x6D	; 109
    45b8:	df 4f       	sbci	r29, 0xFF	; 255
    45ba:	18 81       	ld	r17, Y
    45bc:	c3 59       	subi	r28, 0x93	; 147
    45be:	d0 40       	sbci	r29, 0x00	; 0
    45c0:	cf 51       	subi	r28, 0x1F	; 31
    45c2:	df 4f       	sbci	r29, 0xFF	; 255
    45c4:	18 83       	st	Y, r17
    45c6:	c1 5e       	subi	r28, 0xE1	; 225
    45c8:	d0 40       	sbci	r29, 0x00	; 0
    45ca:	cc 56       	subi	r28, 0x6C	; 108
    45cc:	df 4f       	sbci	r29, 0xFF	; 255
    45ce:	18 81       	ld	r17, Y
    45d0:	c4 59       	subi	r28, 0x94	; 148
    45d2:	d0 40       	sbci	r29, 0x00	; 0
    45d4:	ce 51       	subi	r28, 0x1E	; 30
    45d6:	df 4f       	sbci	r29, 0xFF	; 255
    45d8:	18 83       	st	Y, r17
    45da:	c2 5e       	subi	r28, 0xE2	; 226
    45dc:	d0 40       	sbci	r29, 0x00	; 0
    45de:	cb 56       	subi	r28, 0x6B	; 107
    45e0:	df 4f       	sbci	r29, 0xFF	; 255
    45e2:	18 81       	ld	r17, Y
    45e4:	c5 59       	subi	r28, 0x95	; 149
    45e6:	d0 40       	sbci	r29, 0x00	; 0
    45e8:	cd 51       	subi	r28, 0x1D	; 29
    45ea:	df 4f       	sbci	r29, 0xFF	; 255
    45ec:	18 83       	st	Y, r17
    45ee:	c3 5e       	subi	r28, 0xE3	; 227
    45f0:	d0 40       	sbci	r29, 0x00	; 0
    45f2:	ca 56       	subi	r28, 0x6A	; 106
    45f4:	df 4f       	sbci	r29, 0xFF	; 255
    45f6:	18 81       	ld	r17, Y
    45f8:	c6 59       	subi	r28, 0x96	; 150
    45fa:	d0 40       	sbci	r29, 0x00	; 0
    45fc:	cc 51       	subi	r28, 0x1C	; 28
    45fe:	df 4f       	sbci	r29, 0xFF	; 255
    4600:	18 83       	st	Y, r17
    4602:	c4 5e       	subi	r28, 0xE4	; 228
    4604:	d0 40       	sbci	r29, 0x00	; 0
    4606:	c9 56       	subi	r28, 0x69	; 105
    4608:	df 4f       	sbci	r29, 0xFF	; 255
    460a:	18 81       	ld	r17, Y
    460c:	c7 59       	subi	r28, 0x97	; 151
    460e:	d0 40       	sbci	r29, 0x00	; 0
    4610:	cb 51       	subi	r28, 0x1B	; 27
    4612:	df 4f       	sbci	r29, 0xFF	; 255
    4614:	18 83       	st	Y, r17
    4616:	c5 5e       	subi	r28, 0xE5	; 229
    4618:	d0 40       	sbci	r29, 0x00	; 0
    461a:	c8 56       	subi	r28, 0x68	; 104
    461c:	df 4f       	sbci	r29, 0xFF	; 255
    461e:	98 80       	ld	r9, Y
    4620:	c8 59       	subi	r28, 0x98	; 152
    4622:	d0 40       	sbci	r29, 0x00	; 0
		memmove(&(a[1]), &(a[0]), 7*8);
    4624:	48 e3       	ldi	r20, 0x38	; 56
    4626:	50 e0       	ldi	r21, 0x00	; 0
    4628:	be 01       	movw	r22, r28
    462a:	6f 57       	subi	r22, 0x7F	; 127
    462c:	7f 4f       	sbci	r23, 0xFF	; 255
    462e:	c9 51       	subi	r28, 0x19	; 25
    4630:	df 4f       	sbci	r29, 0xFF	; 255
    4632:	88 81       	ld	r24, Y
    4634:	99 81       	ldd	r25, Y+1	; 0x01
    4636:	c7 5e       	subi	r28, 0xE7	; 231
    4638:	d0 40       	sbci	r29, 0x00	; 0
    463a:	0e 94 95 2d 	call	0x5b2a	; 0x5b2a <memmove>
		a[0] = t1 + t2;
    463e:	2a 2d       	mov	r18, r10
    4640:	3b 2d       	mov	r19, r11
    4642:	47 2d       	mov	r20, r7
    4644:	56 2d       	mov	r21, r6
    4646:	65 2d       	mov	r22, r5
    4648:	74 2d       	mov	r23, r4
    464a:	83 2d       	mov	r24, r3
    464c:	92 2d       	mov	r25, r2
    464e:	0e e1       	ldi	r16, 0x1E	; 30
    4650:	0e 94 dc 2b 	call	0x57b8	; 0x57b8 <__rotldi3>
    4654:	d2 2e       	mov	r13, r18
    4656:	e3 2e       	mov	r14, r19
    4658:	f4 2e       	mov	r15, r20
    465a:	15 2f       	mov	r17, r21
    465c:	b6 2f       	mov	r27, r22
    465e:	e7 2f       	mov	r30, r23
    4660:	a8 2f       	mov	r26, r24
    4662:	f9 2f       	mov	r31, r25
    4664:	2a 2d       	mov	r18, r10
    4666:	3b 2d       	mov	r19, r11
    4668:	47 2d       	mov	r20, r7
    466a:	56 2d       	mov	r21, r6
    466c:	65 2d       	mov	r22, r5
    466e:	74 2d       	mov	r23, r4
    4670:	83 2d       	mov	r24, r3
    4672:	92 2d       	mov	r25, r2
    4674:	04 e2       	ldi	r16, 0x24	; 36
    4676:	0e 94 dc 2b 	call	0x57b8	; 0x57b8 <__rotldi3>
    467a:	d2 26       	eor	r13, r18
    467c:	e3 26       	eor	r14, r19
    467e:	f4 26       	eor	r15, r20
    4680:	15 27       	eor	r17, r21
    4682:	b6 27       	eor	r27, r22
    4684:	e7 27       	eor	r30, r23
    4686:	a8 27       	eor	r26, r24
    4688:	f9 27       	eor	r31, r25
    468a:	2a 2d       	mov	r18, r10
    468c:	3b 2d       	mov	r19, r11
    468e:	47 2d       	mov	r20, r7
    4690:	56 2d       	mov	r21, r6
    4692:	65 2d       	mov	r22, r5
    4694:	74 2d       	mov	r23, r4
    4696:	83 2d       	mov	r24, r3
    4698:	92 2d       	mov	r25, r2
    469a:	09 e1       	ldi	r16, 0x19	; 25
    469c:	0e 94 dc 2b 	call	0x57b8	; 0x57b8 <__rotldi3>
    46a0:	2d 25       	eor	r18, r13
    46a2:	3e 25       	eor	r19, r14
    46a4:	4f 25       	eor	r20, r15
    46a6:	51 27       	eor	r21, r17
    46a8:	6b 27       	eor	r22, r27
    46aa:	7e 27       	eor	r23, r30
    46ac:	c1 52       	subi	r28, 0x21	; 33
    46ae:	df 4f       	sbci	r29, 0xFF	; 255
    46b0:	b8 81       	ld	r27, Y
    46b2:	cf 5d       	subi	r28, 0xDF	; 223
    46b4:	d0 40       	sbci	r29, 0x00	; 0
    46b6:	ca 52       	subi	r28, 0x2A	; 42
    46b8:	df 4f       	sbci	r29, 0xFF	; 255
    46ba:	18 81       	ld	r17, Y
    46bc:	c6 5d       	subi	r28, 0xD6	; 214
    46be:	d0 40       	sbci	r29, 0x00	; 0
    46c0:	b1 27       	eor	r27, r17
    46c2:	c0 52       	subi	r28, 0x20	; 32
    46c4:	df 4f       	sbci	r29, 0xFF	; 255
    46c6:	e8 81       	ld	r30, Y
    46c8:	c0 5e       	subi	r28, 0xE0	; 224
    46ca:	d0 40       	sbci	r29, 0x00	; 0
    46cc:	c9 52       	subi	r28, 0x29	; 41
    46ce:	df 4f       	sbci	r29, 0xFF	; 255
    46d0:	18 81       	ld	r17, Y
    46d2:	c7 5d       	subi	r28, 0xD7	; 215
    46d4:	d0 40       	sbci	r29, 0x00	; 0
    46d6:	e1 27       	eor	r30, r17
    46d8:	cf 51       	subi	r28, 0x1F	; 31
    46da:	df 4f       	sbci	r29, 0xFF	; 255
    46dc:	c8 80       	ld	r12, Y
    46de:	c1 5e       	subi	r28, 0xE1	; 225
    46e0:	d0 40       	sbci	r29, 0x00	; 0
    46e2:	c8 52       	subi	r28, 0x28	; 40
    46e4:	df 4f       	sbci	r29, 0xFF	; 255
    46e6:	18 81       	ld	r17, Y
    46e8:	c8 5d       	subi	r28, 0xD8	; 216
    46ea:	d0 40       	sbci	r29, 0x00	; 0
    46ec:	c1 26       	eor	r12, r17
    46ee:	ce 51       	subi	r28, 0x1E	; 30
    46f0:	df 4f       	sbci	r29, 0xFF	; 255
    46f2:	d8 80       	ld	r13, Y
    46f4:	c2 5e       	subi	r28, 0xE2	; 226
    46f6:	d0 40       	sbci	r29, 0x00	; 0
    46f8:	c7 52       	subi	r28, 0x27	; 39
    46fa:	df 4f       	sbci	r29, 0xFF	; 255
    46fc:	18 81       	ld	r17, Y
    46fe:	c9 5d       	subi	r28, 0xD9	; 217
    4700:	d0 40       	sbci	r29, 0x00	; 0
    4702:	d1 26       	eor	r13, r17
    4704:	cd 51       	subi	r28, 0x1D	; 29
    4706:	df 4f       	sbci	r29, 0xFF	; 255
    4708:	e8 80       	ld	r14, Y
    470a:	c3 5e       	subi	r28, 0xE3	; 227
    470c:	d0 40       	sbci	r29, 0x00	; 0
    470e:	c6 52       	subi	r28, 0x26	; 38
    4710:	df 4f       	sbci	r29, 0xFF	; 255
    4712:	18 81       	ld	r17, Y
    4714:	ca 5d       	subi	r28, 0xDA	; 218
    4716:	d0 40       	sbci	r29, 0x00	; 0
    4718:	e1 26       	eor	r14, r17
    471a:	cc 51       	subi	r28, 0x1C	; 28
    471c:	df 4f       	sbci	r29, 0xFF	; 255
    471e:	f8 80       	ld	r15, Y
    4720:	c4 5e       	subi	r28, 0xE4	; 228
    4722:	d0 40       	sbci	r29, 0x00	; 0
    4724:	c3 52       	subi	r28, 0x23	; 35
    4726:	df 4f       	sbci	r29, 0xFF	; 255
    4728:	18 81       	ld	r17, Y
    472a:	cd 5d       	subi	r28, 0xDD	; 221
    472c:	d0 40       	sbci	r29, 0x00	; 0
    472e:	f1 26       	eor	r15, r17
    4730:	cb 51       	subi	r28, 0x1B	; 27
    4732:	df 4f       	sbci	r29, 0xFF	; 255
    4734:	08 81       	ld	r16, Y
    4736:	c5 5e       	subi	r28, 0xE5	; 229
    4738:	d0 40       	sbci	r29, 0x00	; 0
    473a:	c2 52       	subi	r28, 0x22	; 34
    473c:	df 4f       	sbci	r29, 0xFF	; 255
    473e:	18 81       	ld	r17, Y
    4740:	ce 5d       	subi	r28, 0xDE	; 222
    4742:	d0 40       	sbci	r29, 0x00	; 0
    4744:	01 27       	eor	r16, r17
    4746:	19 2d       	mov	r17, r9
    4748:	18 25       	eor	r17, r8
    474a:	ab 22       	and	r10, r27
    474c:	be 22       	and	r11, r30
    474e:	c7 20       	and	r12, r7
    4750:	d6 20       	and	r13, r6
    4752:	e5 20       	and	r14, r5
    4754:	f4 20       	and	r15, r4
    4756:	03 21       	and	r16, r3
    4758:	12 21       	and	r17, r2
    475a:	ca 52       	subi	r28, 0x2A	; 42
    475c:	df 4f       	sbci	r29, 0xFF	; 255
    475e:	e8 81       	ld	r30, Y
    4760:	c6 5d       	subi	r28, 0xD6	; 214
    4762:	d0 40       	sbci	r29, 0x00	; 0
    4764:	c1 52       	subi	r28, 0x21	; 33
    4766:	df 4f       	sbci	r29, 0xFF	; 255
    4768:	b8 81       	ld	r27, Y
    476a:	cf 5d       	subi	r28, 0xDF	; 223
    476c:	d0 40       	sbci	r29, 0x00	; 0
    476e:	eb 23       	and	r30, r27
    4770:	c9 52       	subi	r28, 0x29	; 41
    4772:	df 4f       	sbci	r29, 0xFF	; 255
    4774:	28 80       	ld	r2, Y
    4776:	c7 5d       	subi	r28, 0xD7	; 215
    4778:	d0 40       	sbci	r29, 0x00	; 0
    477a:	c0 52       	subi	r28, 0x20	; 32
    477c:	df 4f       	sbci	r29, 0xFF	; 255
    477e:	b8 81       	ld	r27, Y
    4780:	c0 5e       	subi	r28, 0xE0	; 224
    4782:	d0 40       	sbci	r29, 0x00	; 0
    4784:	2b 22       	and	r2, r27
    4786:	c8 52       	subi	r28, 0x28	; 40
    4788:	df 4f       	sbci	r29, 0xFF	; 255
    478a:	38 80       	ld	r3, Y
    478c:	c8 5d       	subi	r28, 0xD8	; 216
    478e:	d0 40       	sbci	r29, 0x00	; 0
    4790:	cf 51       	subi	r28, 0x1F	; 31
    4792:	df 4f       	sbci	r29, 0xFF	; 255
    4794:	b8 81       	ld	r27, Y
    4796:	c1 5e       	subi	r28, 0xE1	; 225
    4798:	d0 40       	sbci	r29, 0x00	; 0
    479a:	3b 22       	and	r3, r27
    479c:	c7 52       	subi	r28, 0x27	; 39
    479e:	df 4f       	sbci	r29, 0xFF	; 255
    47a0:	48 80       	ld	r4, Y
    47a2:	c9 5d       	subi	r28, 0xD9	; 217
    47a4:	d0 40       	sbci	r29, 0x00	; 0
    47a6:	ce 51       	subi	r28, 0x1E	; 30
    47a8:	df 4f       	sbci	r29, 0xFF	; 255
    47aa:	b8 81       	ld	r27, Y
    47ac:	c2 5e       	subi	r28, 0xE2	; 226
    47ae:	d0 40       	sbci	r29, 0x00	; 0
    47b0:	4b 22       	and	r4, r27
    47b2:	c6 52       	subi	r28, 0x26	; 38
    47b4:	df 4f       	sbci	r29, 0xFF	; 255
    47b6:	58 80       	ld	r5, Y
    47b8:	ca 5d       	subi	r28, 0xDA	; 218
    47ba:	d0 40       	sbci	r29, 0x00	; 0
    47bc:	cd 51       	subi	r28, 0x1D	; 29
    47be:	df 4f       	sbci	r29, 0xFF	; 255
    47c0:	b8 81       	ld	r27, Y
    47c2:	c3 5e       	subi	r28, 0xE3	; 227
    47c4:	d0 40       	sbci	r29, 0x00	; 0
    47c6:	5b 22       	and	r5, r27
    47c8:	c3 52       	subi	r28, 0x23	; 35
    47ca:	df 4f       	sbci	r29, 0xFF	; 255
    47cc:	68 80       	ld	r6, Y
    47ce:	cd 5d       	subi	r28, 0xDD	; 221
    47d0:	d0 40       	sbci	r29, 0x00	; 0
    47d2:	cc 51       	subi	r28, 0x1C	; 28
    47d4:	df 4f       	sbci	r29, 0xFF	; 255
    47d6:	b8 81       	ld	r27, Y
    47d8:	c4 5e       	subi	r28, 0xE4	; 228
    47da:	d0 40       	sbci	r29, 0x00	; 0
    47dc:	6b 22       	and	r6, r27
    47de:	c2 52       	subi	r28, 0x22	; 34
    47e0:	df 4f       	sbci	r29, 0xFF	; 255
    47e2:	78 80       	ld	r7, Y
    47e4:	ce 5d       	subi	r28, 0xDE	; 222
    47e6:	d0 40       	sbci	r29, 0x00	; 0
    47e8:	cb 51       	subi	r28, 0x1B	; 27
    47ea:	df 4f       	sbci	r29, 0xFF	; 255
    47ec:	b8 81       	ld	r27, Y
    47ee:	c5 5e       	subi	r28, 0xE5	; 229
    47f0:	d0 40       	sbci	r29, 0x00	; 0
    47f2:	7b 22       	and	r7, r27
    47f4:	b8 2d       	mov	r27, r8
    47f6:	b9 21       	and	r27, r9
    47f8:	ae 26       	eor	r10, r30
    47fa:	b2 24       	eor	r11, r2
    47fc:	c3 24       	eor	r12, r3
    47fe:	d4 24       	eor	r13, r4
    4800:	e5 24       	eor	r14, r5
    4802:	f6 24       	eor	r15, r6
    4804:	07 25       	eor	r16, r7
    4806:	1b 27       	eor	r17, r27
    4808:	8a 27       	eor	r24, r26
    480a:	9f 27       	eor	r25, r31
    480c:	f0 d7       	rcall	.+4064   	; 0x57ee <__adddi3>
    480e:	c5 53       	subi	r28, 0x35	; 53
    4810:	df 4f       	sbci	r29, 0xFF	; 255
    4812:	a8 80       	ld	r10, Y
    4814:	cb 5c       	subi	r28, 0xCB	; 203
    4816:	d0 40       	sbci	r29, 0x00	; 0
    4818:	c4 53       	subi	r28, 0x34	; 52
    481a:	df 4f       	sbci	r29, 0xFF	; 255
    481c:	b8 80       	ld	r11, Y
    481e:	cc 5c       	subi	r28, 0xCC	; 204
    4820:	d0 40       	sbci	r29, 0x00	; 0
    4822:	c3 53       	subi	r28, 0x33	; 51
    4824:	df 4f       	sbci	r29, 0xFF	; 255
    4826:	c8 80       	ld	r12, Y
    4828:	cd 5c       	subi	r28, 0xCD	; 205
    482a:	d0 40       	sbci	r29, 0x00	; 0
    482c:	c2 53       	subi	r28, 0x32	; 50
    482e:	df 4f       	sbci	r29, 0xFF	; 255
    4830:	d8 80       	ld	r13, Y
    4832:	ce 5c       	subi	r28, 0xCE	; 206
    4834:	d0 40       	sbci	r29, 0x00	; 0
    4836:	c1 53       	subi	r28, 0x31	; 49
    4838:	df 4f       	sbci	r29, 0xFF	; 255
    483a:	e8 80       	ld	r14, Y
    483c:	cf 5c       	subi	r28, 0xCF	; 207
    483e:	d0 40       	sbci	r29, 0x00	; 0
    4840:	cd 52       	subi	r28, 0x2D	; 45
    4842:	df 4f       	sbci	r29, 0xFF	; 255
    4844:	f8 80       	ld	r15, Y
    4846:	c3 5d       	subi	r28, 0xD3	; 211
    4848:	d0 40       	sbci	r29, 0x00	; 0
    484a:	cc 52       	subi	r28, 0x2C	; 44
    484c:	df 4f       	sbci	r29, 0xFF	; 255
    484e:	08 81       	ld	r16, Y
    4850:	c4 5d       	subi	r28, 0xD4	; 212
    4852:	d0 40       	sbci	r29, 0x00	; 0
    4854:	cb 52       	subi	r28, 0x2B	; 43
    4856:	df 4f       	sbci	r29, 0xFF	; 255
    4858:	18 81       	ld	r17, Y
    485a:	c5 5d       	subi	r28, 0xD5	; 213
    485c:	d0 40       	sbci	r29, 0x00	; 0
    485e:	c7 d7       	rcall	.+3982   	; 0x57ee <__adddi3>
    4860:	cf 57       	subi	r28, 0x7F	; 127
    4862:	df 4f       	sbci	r29, 0xFF	; 255
    4864:	28 83       	st	Y, r18
    4866:	c1 58       	subi	r28, 0x81	; 129
    4868:	d0 40       	sbci	r29, 0x00	; 0
    486a:	ce 57       	subi	r28, 0x7E	; 126
    486c:	df 4f       	sbci	r29, 0xFF	; 255
    486e:	38 83       	st	Y, r19
    4870:	c2 58       	subi	r28, 0x82	; 130
    4872:	d0 40       	sbci	r29, 0x00	; 0
    4874:	cd 57       	subi	r28, 0x7D	; 125
    4876:	df 4f       	sbci	r29, 0xFF	; 255
    4878:	48 83       	st	Y, r20
    487a:	c3 58       	subi	r28, 0x83	; 131
    487c:	d0 40       	sbci	r29, 0x00	; 0
    487e:	cc 57       	subi	r28, 0x7C	; 124
    4880:	df 4f       	sbci	r29, 0xFF	; 255
    4882:	58 83       	st	Y, r21
    4884:	c4 58       	subi	r28, 0x84	; 132
    4886:	d0 40       	sbci	r29, 0x00	; 0
    4888:	cb 57       	subi	r28, 0x7B	; 123
    488a:	df 4f       	sbci	r29, 0xFF	; 255
    488c:	68 83       	st	Y, r22
    488e:	c5 58       	subi	r28, 0x85	; 133
    4890:	d0 40       	sbci	r29, 0x00	; 0
    4892:	ca 57       	subi	r28, 0x7A	; 122
    4894:	df 4f       	sbci	r29, 0xFF	; 255
    4896:	78 83       	st	Y, r23
    4898:	c6 58       	subi	r28, 0x86	; 134
    489a:	d0 40       	sbci	r29, 0x00	; 0
    489c:	c9 57       	subi	r28, 0x79	; 121
    489e:	df 4f       	sbci	r29, 0xFF	; 255
    48a0:	88 83       	st	Y, r24
    48a2:	c7 58       	subi	r28, 0x87	; 135
    48a4:	d0 40       	sbci	r29, 0x00	; 0
    48a6:	c8 57       	subi	r28, 0x78	; 120
    48a8:	df 4f       	sbci	r29, 0xFF	; 255
    48aa:	98 83       	st	Y, r25
    48ac:	c8 58       	subi	r28, 0x88	; 136
    48ae:	d0 40       	sbci	r29, 0x00	; 0
		a[4] += t1;
    48b0:	2a 2d       	mov	r18, r10
    48b2:	3b 2d       	mov	r19, r11
    48b4:	4c 2d       	mov	r20, r12
    48b6:	5d 2d       	mov	r21, r13
    48b8:	6e 2d       	mov	r22, r14
    48ba:	7f 2d       	mov	r23, r15
    48bc:	80 2f       	mov	r24, r16
    48be:	91 2f       	mov	r25, r17
    48c0:	cf 55       	subi	r28, 0x5F	; 95
    48c2:	df 4f       	sbci	r29, 0xFF	; 255
    48c4:	a8 80       	ld	r10, Y
    48c6:	c1 5a       	subi	r28, 0xA1	; 161
    48c8:	d0 40       	sbci	r29, 0x00	; 0
    48ca:	ce 55       	subi	r28, 0x5E	; 94
    48cc:	df 4f       	sbci	r29, 0xFF	; 255
    48ce:	b8 80       	ld	r11, Y
    48d0:	c2 5a       	subi	r28, 0xA2	; 162
    48d2:	d0 40       	sbci	r29, 0x00	; 0
    48d4:	cd 55       	subi	r28, 0x5D	; 93
    48d6:	df 4f       	sbci	r29, 0xFF	; 255
    48d8:	c8 80       	ld	r12, Y
    48da:	c3 5a       	subi	r28, 0xA3	; 163
    48dc:	d0 40       	sbci	r29, 0x00	; 0
    48de:	cc 55       	subi	r28, 0x5C	; 92
    48e0:	df 4f       	sbci	r29, 0xFF	; 255
    48e2:	d8 80       	ld	r13, Y
    48e4:	c4 5a       	subi	r28, 0xA4	; 164
    48e6:	d0 40       	sbci	r29, 0x00	; 0
    48e8:	cb 55       	subi	r28, 0x5B	; 91
    48ea:	df 4f       	sbci	r29, 0xFF	; 255
    48ec:	e8 80       	ld	r14, Y
    48ee:	c5 5a       	subi	r28, 0xA5	; 165
    48f0:	d0 40       	sbci	r29, 0x00	; 0
    48f2:	ca 55       	subi	r28, 0x5A	; 90
    48f4:	df 4f       	sbci	r29, 0xFF	; 255
    48f6:	f8 80       	ld	r15, Y
    48f8:	c6 5a       	subi	r28, 0xA6	; 166
    48fa:	d0 40       	sbci	r29, 0x00	; 0
    48fc:	c9 55       	subi	r28, 0x59	; 89
    48fe:	df 4f       	sbci	r29, 0xFF	; 255
    4900:	08 81       	ld	r16, Y
    4902:	c7 5a       	subi	r28, 0xA7	; 167
    4904:	d0 40       	sbci	r29, 0x00	; 0
    4906:	c8 55       	subi	r28, 0x58	; 88
    4908:	df 4f       	sbci	r29, 0xFF	; 255
    490a:	18 81       	ld	r17, Y
    490c:	c8 5a       	subi	r28, 0xA8	; 168
    490e:	d0 40       	sbci	r29, 0x00	; 0
    4910:	6e d7       	rcall	.+3804   	; 0x57ee <__adddi3>
    4912:	cf 55       	subi	r28, 0x5F	; 95
    4914:	df 4f       	sbci	r29, 0xFF	; 255
    4916:	28 83       	st	Y, r18
    4918:	c1 5a       	subi	r28, 0xA1	; 161
    491a:	d0 40       	sbci	r29, 0x00	; 0
    491c:	ce 55       	subi	r28, 0x5E	; 94
    491e:	df 4f       	sbci	r29, 0xFF	; 255
    4920:	38 83       	st	Y, r19
    4922:	c2 5a       	subi	r28, 0xA2	; 162
    4924:	d0 40       	sbci	r29, 0x00	; 0
    4926:	cd 55       	subi	r28, 0x5D	; 93
    4928:	df 4f       	sbci	r29, 0xFF	; 255
    492a:	48 83       	st	Y, r20
    492c:	c3 5a       	subi	r28, 0xA3	; 163
    492e:	d0 40       	sbci	r29, 0x00	; 0
    4930:	cc 55       	subi	r28, 0x5C	; 92
    4932:	df 4f       	sbci	r29, 0xFF	; 255
    4934:	58 83       	st	Y, r21
    4936:	c4 5a       	subi	r28, 0xA4	; 164
    4938:	d0 40       	sbci	r29, 0x00	; 0
    493a:	cb 55       	subi	r28, 0x5B	; 91
    493c:	df 4f       	sbci	r29, 0xFF	; 255
    493e:	68 83       	st	Y, r22
    4940:	c5 5a       	subi	r28, 0xA5	; 165
    4942:	d0 40       	sbci	r29, 0x00	; 0
    4944:	ca 55       	subi	r28, 0x5A	; 90
    4946:	df 4f       	sbci	r29, 0xFF	; 255
    4948:	78 83       	st	Y, r23
    494a:	c6 5a       	subi	r28, 0xA6	; 166
    494c:	d0 40       	sbci	r29, 0x00	; 0
    494e:	c9 55       	subi	r28, 0x59	; 89
    4950:	df 4f       	sbci	r29, 0xFF	; 255
    4952:	88 83       	st	Y, r24
    4954:	c7 5a       	subi	r28, 0xA7	; 167
    4956:	d0 40       	sbci	r29, 0x00	; 0
    4958:	c8 55       	subi	r28, 0x58	; 88
    495a:	df 4f       	sbci	r29, 0xFF	; 255
    495c:	98 83       	st	Y, r25
    495e:	c8 5a       	subi	r28, 0xA8	; 168
    4960:	d0 40       	sbci	r29, 0x00	; 0
	do{
		w[16-i] = change_endian64(*((const uint64_t*)block));
		block = (uint8_t*)block + 8;
	}while(--i);
	memcpy(a, ctx->h, 8*8);
	for(i=0; i<80; ++i){
    4962:	c0 53       	subi	r28, 0x30	; 48
    4964:	df 4f       	sbci	r29, 0xFF	; 255
    4966:	e8 81       	ld	r30, Y
    4968:	c0 5d       	subi	r28, 0xD0	; 208
    496a:	d0 40       	sbci	r29, 0x00	; 0
    496c:	ef 5f       	subi	r30, 0xFF	; 255
    496e:	c0 53       	subi	r28, 0x30	; 48
    4970:	df 4f       	sbci	r29, 0xFF	; 255
    4972:	e8 83       	st	Y, r30
    4974:	c0 5d       	subi	r28, 0xD0	; 208
    4976:	d0 40       	sbci	r29, 0x00	; 0
    4978:	c5 52       	subi	r28, 0x25	; 37
    497a:	df 4f       	sbci	r29, 0xFF	; 255
    497c:	88 81       	ld	r24, Y
    497e:	99 81       	ldd	r25, Y+1	; 0x01
    4980:	cb 5d       	subi	r28, 0xDB	; 219
    4982:	d0 40       	sbci	r29, 0x00	; 0
    4984:	08 96       	adiw	r24, 0x08	; 8
    4986:	c5 52       	subi	r28, 0x25	; 37
    4988:	df 4f       	sbci	r29, 0xFF	; 255
    498a:	99 83       	std	Y+1, r25	; 0x01
    498c:	88 83       	st	Y, r24
    498e:	cb 5d       	subi	r28, 0xDB	; 219
    4990:	d0 40       	sbci	r29, 0x00	; 0
    4992:	cf 52       	subi	r28, 0x2F	; 47
    4994:	df 4f       	sbci	r29, 0xFF	; 255
    4996:	a8 81       	ld	r26, Y
    4998:	b9 81       	ldd	r27, Y+1	; 0x01
    499a:	c1 5d       	subi	r28, 0xD1	; 209
    499c:	d0 40       	sbci	r29, 0x00	; 0
    499e:	18 96       	adiw	r26, 0x08	; 8
    49a0:	cf 52       	subi	r28, 0x2F	; 47
    49a2:	df 4f       	sbci	r29, 0xFF	; 255
    49a4:	b9 83       	std	Y+1, r27	; 0x01
    49a6:	a8 83       	st	Y, r26
    49a8:	c1 5d       	subi	r28, 0xD1	; 209
    49aa:	d0 40       	sbci	r29, 0x00	; 0
    49ac:	e0 35       	cpi	r30, 0x50	; 80
    49ae:	09 f0       	breq	.+2      	; 0x49b2 <sha2_large_common_nextBlock+0xfe8>
    49b0:	ee c8       	rjmp	.-3620   	; 0x3b8e <sha2_large_common_nextBlock+0x1c4>
    49b2:	0f 2e       	mov	r0, r31
    49b4:	f7 e0       	ldi	r31, 0x07	; 7
    49b6:	9f 2e       	mov	r9, r31
    49b8:	f0 2d       	mov	r31, r0
		a[0] = t1 + t2;
		a[4] += t1;
	}
	i=7;
	do{
		ctx->h[i] += a[i];
    49ba:	79 2c       	mov	r7, r9
    49bc:	c7 51       	subi	r28, 0x17	; 23
    49be:	df 4f       	sbci	r29, 0xFF	; 255
    49c0:	88 80       	ld	r8, Y
    49c2:	99 80       	ldd	r9, Y+1	; 0x01
    49c4:	c9 5e       	subi	r28, 0xE9	; 233
    49c6:	d0 40       	sbci	r29, 0x00	; 0
    49c8:	a7 2d       	mov	r26, r7
    49ca:	b0 e0       	ldi	r27, 0x00	; 0
    49cc:	aa 0f       	add	r26, r26
    49ce:	bb 1f       	adc	r27, r27
    49d0:	aa 0f       	add	r26, r26
    49d2:	bb 1f       	adc	r27, r27
    49d4:	aa 0f       	add	r26, r26
    49d6:	bb 1f       	adc	r27, r27
    49d8:	f4 01       	movw	r30, r8
    49da:	ea 0f       	add	r30, r26
    49dc:	fb 1f       	adc	r31, r27
    49de:	81 e8       	ldi	r24, 0x81	; 129
    49e0:	90 e0       	ldi	r25, 0x00	; 0
    49e2:	8c 0f       	add	r24, r28
    49e4:	9d 1f       	adc	r25, r29
    49e6:	a8 0f       	add	r26, r24
    49e8:	b9 1f       	adc	r27, r25
    49ea:	20 81       	ld	r18, Z
    49ec:	31 81       	ldd	r19, Z+1	; 0x01
    49ee:	42 81       	ldd	r20, Z+2	; 0x02
    49f0:	53 81       	ldd	r21, Z+3	; 0x03
    49f2:	64 81       	ldd	r22, Z+4	; 0x04
    49f4:	75 81       	ldd	r23, Z+5	; 0x05
    49f6:	86 81       	ldd	r24, Z+6	; 0x06
    49f8:	97 81       	ldd	r25, Z+7	; 0x07
    49fa:	ac 90       	ld	r10, X
    49fc:	11 96       	adiw	r26, 0x01	; 1
    49fe:	bc 90       	ld	r11, X
    4a00:	11 97       	sbiw	r26, 0x01	; 1
    4a02:	12 96       	adiw	r26, 0x02	; 2
    4a04:	cc 90       	ld	r12, X
    4a06:	12 97       	sbiw	r26, 0x02	; 2
    4a08:	13 96       	adiw	r26, 0x03	; 3
    4a0a:	dc 90       	ld	r13, X
    4a0c:	13 97       	sbiw	r26, 0x03	; 3
    4a0e:	14 96       	adiw	r26, 0x04	; 4
    4a10:	ec 90       	ld	r14, X
    4a12:	14 97       	sbiw	r26, 0x04	; 4
    4a14:	15 96       	adiw	r26, 0x05	; 5
    4a16:	fc 90       	ld	r15, X
    4a18:	15 97       	sbiw	r26, 0x05	; 5
    4a1a:	16 96       	adiw	r26, 0x06	; 6
    4a1c:	0c 91       	ld	r16, X
    4a1e:	16 97       	sbiw	r26, 0x06	; 6
    4a20:	17 96       	adiw	r26, 0x07	; 7
    4a22:	1c 91       	ld	r17, X
    4a24:	e4 d6       	rcall	.+3528   	; 0x57ee <__adddi3>
    4a26:	20 83       	st	Z, r18
    4a28:	31 83       	std	Z+1, r19	; 0x01
    4a2a:	42 83       	std	Z+2, r20	; 0x02
    4a2c:	53 83       	std	Z+3, r21	; 0x03
    4a2e:	64 83       	std	Z+4, r22	; 0x04
    4a30:	75 83       	std	Z+5, r23	; 0x05
    4a32:	86 83       	std	Z+6, r24	; 0x06
    4a34:	97 83       	std	Z+7, r25	; 0x07
	}while(i--);
    4a36:	7a 94       	dec	r7
    4a38:	9f ef       	ldi	r25, 0xFF	; 255
    4a3a:	79 12       	cpse	r7, r25
    4a3c:	c5 cf       	rjmp	.-118    	; 0x49c8 <sha2_large_common_nextBlock+0xffe>
	ctx->length += 1;
    4a3e:	c7 51       	subi	r28, 0x17	; 23
    4a40:	df 4f       	sbci	r29, 0xFF	; 255
    4a42:	e8 81       	ld	r30, Y
    4a44:	f9 81       	ldd	r31, Y+1	; 0x01
    4a46:	c9 5e       	subi	r28, 0xE9	; 233
    4a48:	d0 40       	sbci	r29, 0x00	; 0
    4a4a:	e0 5c       	subi	r30, 0xC0	; 192
    4a4c:	ff 4f       	sbci	r31, 0xFF	; 255
    4a4e:	80 81       	ld	r24, Z
    4a50:	91 81       	ldd	r25, Z+1	; 0x01
    4a52:	a2 81       	ldd	r26, Z+2	; 0x02
    4a54:	b3 81       	ldd	r27, Z+3	; 0x03
    4a56:	01 96       	adiw	r24, 0x01	; 1
    4a58:	a1 1d       	adc	r26, r1
    4a5a:	b1 1d       	adc	r27, r1
    4a5c:	80 83       	st	Z, r24
    4a5e:	91 83       	std	Z+1, r25	; 0x01
    4a60:	a2 83       	std	Z+2, r26	; 0x02
    4a62:	b3 83       	std	Z+3, r27	; 0x03
}
    4a64:	c6 51       	subi	r28, 0x16	; 22
    4a66:	df 4f       	sbci	r29, 0xFF	; 255
    4a68:	0f b6       	in	r0, 0x3f	; 63
    4a6a:	f8 94       	cli
    4a6c:	de bf       	out	0x3e, r29	; 62
    4a6e:	0f be       	out	0x3f, r0	; 63
    4a70:	cd bf       	out	0x3d, r28	; 61
    4a72:	df 91       	pop	r29
    4a74:	cf 91       	pop	r28
    4a76:	1f 91       	pop	r17
    4a78:	0f 91       	pop	r16
    4a7a:	ff 90       	pop	r15
    4a7c:	ef 90       	pop	r14
    4a7e:	df 90       	pop	r13
    4a80:	cf 90       	pop	r12
    4a82:	bf 90       	pop	r11
    4a84:	af 90       	pop	r10
    4a86:	9f 90       	pop	r9
    4a88:	8f 90       	pop	r8
    4a8a:	7f 90       	pop	r7
    4a8c:	6f 90       	pop	r6
    4a8e:	5f 90       	pop	r5
    4a90:	4f 90       	pop	r4
    4a92:	3f 90       	pop	r3
    4a94:	2f 90       	pop	r2
    4a96:	08 95       	ret

00004a98 <sha2_large_common_lastBlock>:

void sha2_large_common_lastBlock(sha2_large_common_ctx_t *ctx, const void *block, uint16_t length_b){
    4a98:	2f 92       	push	r2
    4a9a:	3f 92       	push	r3
    4a9c:	4f 92       	push	r4
    4a9e:	5f 92       	push	r5
    4aa0:	6f 92       	push	r6
    4aa2:	7f 92       	push	r7
    4aa4:	8f 92       	push	r8
    4aa6:	9f 92       	push	r9
    4aa8:	af 92       	push	r10
    4aaa:	bf 92       	push	r11
    4aac:	cf 92       	push	r12
    4aae:	df 92       	push	r13
    4ab0:	ef 92       	push	r14
    4ab2:	ff 92       	push	r15
    4ab4:	0f 93       	push	r16
    4ab6:	1f 93       	push	r17
    4ab8:	cf 93       	push	r28
    4aba:	df 93       	push	r29
    4abc:	cd b7       	in	r28, 0x3d	; 61
    4abe:	de b7       	in	r29, 0x3e	; 62
    4ac0:	cc 58       	subi	r28, 0x8C	; 140
    4ac2:	d1 09       	sbc	r29, r1
    4ac4:	0f b6       	in	r0, 0x3f	; 63
    4ac6:	f8 94       	cli
    4ac8:	de bf       	out	0x3e, r29	; 62
    4aca:	0f be       	out	0x3f, r0	; 63
    4acc:	cd bf       	out	0x3d, r28	; 61
    4ace:	cf 57       	subi	r28, 0x7F	; 127
    4ad0:	df 4f       	sbci	r29, 0xFF	; 255
    4ad2:	99 83       	std	Y+1, r25	; 0x01
    4ad4:	88 83       	st	Y, r24
    4ad6:	c1 58       	subi	r28, 0x81	; 129
    4ad8:	d0 40       	sbci	r29, 0x00	; 0
    4ada:	c5 57       	subi	r28, 0x75	; 117
    4adc:	df 4f       	sbci	r29, 0xFF	; 255
    4ade:	79 83       	std	Y+1, r23	; 0x01
    4ae0:	68 83       	st	Y, r22
    4ae2:	cb 58       	subi	r28, 0x8B	; 139
    4ae4:	d0 40       	sbci	r29, 0x00	; 0
    4ae6:	4a 01       	movw	r8, r20
	while(length_b >= 1024){
    4ae8:	41 15       	cp	r20, r1
    4aea:	24 e0       	ldi	r18, 0x04	; 4
    4aec:	52 07       	cpc	r21, r18
    4aee:	78 f1       	brcs	.+94     	; 0x4b4e <sha2_large_common_lastBlock+0xb6>
    4af0:	7a 01       	movw	r14, r20
    4af2:	8b 01       	movw	r16, r22
		sha2_large_common_nextBlock(ctx, block);
    4af4:	b8 01       	movw	r22, r16
    4af6:	cf 57       	subi	r28, 0x7F	; 127
    4af8:	df 4f       	sbci	r29, 0xFF	; 255
    4afa:	88 81       	ld	r24, Y
    4afc:	99 81       	ldd	r25, Y+1	; 0x01
    4afe:	c1 58       	subi	r28, 0x81	; 129
    4b00:	d0 40       	sbci	r29, 0x00	; 0
    4b02:	0e 94 e5 1c 	call	0x39ca	; 0x39ca <sha2_large_common_nextBlock>
		block = (uint8_t*)block + 1024/8;
    4b06:	00 58       	subi	r16, 0x80	; 128
    4b08:	1f 4f       	sbci	r17, 0xFF	; 255
		length_b -= 1024;
    4b0a:	34 e0       	ldi	r19, 0x04	; 4
    4b0c:	f3 1a       	sub	r15, r19
	}while(i--);
	ctx->length += 1;
}

void sha2_large_common_lastBlock(sha2_large_common_ctx_t *ctx, const void *block, uint16_t length_b){
	while(length_b >= 1024){
    4b0e:	e1 14       	cp	r14, r1
    4b10:	84 e0       	ldi	r24, 0x04	; 4
    4b12:	f8 06       	cpc	r15, r24
    4b14:	78 f7       	brcc	.-34     	; 0x4af4 <sha2_large_common_lastBlock+0x5c>
    4b16:	c4 01       	movw	r24, r8
    4b18:	94 50       	subi	r25, 0x04	; 4
    4b1a:	89 2f       	mov	r24, r25
    4b1c:	99 27       	eor	r25, r25
    4b1e:	86 95       	lsr	r24
    4b20:	86 95       	lsr	r24
    4b22:	01 96       	adiw	r24, 0x01	; 1
    4b24:	96 95       	lsr	r25
    4b26:	98 2f       	mov	r25, r24
    4b28:	88 27       	eor	r24, r24
    4b2a:	97 95       	ror	r25
    4b2c:	87 95       	ror	r24
    4b2e:	c5 57       	subi	r28, 0x75	; 117
    4b30:	df 4f       	sbci	r29, 0xFF	; 255
    4b32:	e8 81       	ld	r30, Y
    4b34:	f9 81       	ldd	r31, Y+1	; 0x01
    4b36:	cb 58       	subi	r28, 0x8B	; 139
    4b38:	d0 40       	sbci	r29, 0x00	; 0
    4b3a:	e8 0f       	add	r30, r24
    4b3c:	f9 1f       	adc	r31, r25
    4b3e:	c5 57       	subi	r28, 0x75	; 117
    4b40:	df 4f       	sbci	r29, 0xFF	; 255
    4b42:	f9 83       	std	Y+1, r31	; 0x01
    4b44:	e8 83       	st	Y, r30
    4b46:	cb 58       	subi	r28, 0x8B	; 139
    4b48:	d0 40       	sbci	r29, 0x00	; 0
    4b4a:	f3 e0       	ldi	r31, 0x03	; 3
    4b4c:	9f 22       	and	r9, r31
		block = (uint8_t*)block + 1024/8;
		length_b -= 1024;
	}
	uint8_t buffer[1024/8];
	uint64_t len;
	len = ((uint64_t)ctx->length)*1024LL + length_b;
    4b4e:	cf 57       	subi	r28, 0x7F	; 127
    4b50:	df 4f       	sbci	r29, 0xFF	; 255
    4b52:	e8 81       	ld	r30, Y
    4b54:	f9 81       	ldd	r31, Y+1	; 0x01
    4b56:	c1 58       	subi	r28, 0x81	; 129
    4b58:	d0 40       	sbci	r29, 0x00	; 0
    4b5a:	e0 5c       	subi	r30, 0xC0	; 192
    4b5c:	ff 4f       	sbci	r31, 0xFF	; 255
    4b5e:	80 81       	ld	r24, Z
    4b60:	91 81       	ldd	r25, Z+1	; 0x01
    4b62:	a2 81       	ldd	r26, Z+2	; 0x02
    4b64:	b3 81       	ldd	r27, Z+3	; 0x03
    4b66:	5c 01       	movw	r10, r24
    4b68:	6d 01       	movw	r12, r26
    4b6a:	28 2f       	mov	r18, r24
    4b6c:	3b 2d       	mov	r19, r11
    4b6e:	4c 2d       	mov	r20, r12
    4b70:	5d 2d       	mov	r21, r13
    4b72:	60 e0       	ldi	r22, 0x00	; 0
    4b74:	70 e0       	ldi	r23, 0x00	; 0
    4b76:	80 e0       	ldi	r24, 0x00	; 0
    4b78:	90 e0       	ldi	r25, 0x00	; 0
    4b7a:	0a e0       	ldi	r16, 0x0A	; 10
    4b7c:	e6 d5       	rcall	.+3020   	; 0x574a <__ashldi3>
    4b7e:	54 01       	movw	r10, r8
    4b80:	c1 2c       	mov	r12, r1
    4b82:	d1 2c       	mov	r13, r1
    4b84:	e1 2c       	mov	r14, r1
    4b86:	f1 2c       	mov	r15, r1
    4b88:	87 01       	movw	r16, r14
    4b8a:	cd 57       	subi	r28, 0x7D	; 125
    4b8c:	df 4f       	sbci	r29, 0xFF	; 255
    4b8e:	88 82       	st	Y, r8
    4b90:	c3 58       	subi	r28, 0x83	; 131
    4b92:	d0 40       	sbci	r29, 0x00	; 0
    4b94:	cc 57       	subi	r28, 0x7C	; 124
    4b96:	df 4f       	sbci	r29, 0xFF	; 255
    4b98:	b8 82       	st	Y, r11
    4b9a:	c4 58       	subi	r28, 0x84	; 132
    4b9c:	d0 40       	sbci	r29, 0x00	; 0
    4b9e:	cb 57       	subi	r28, 0x7B	; 123
    4ba0:	df 4f       	sbci	r29, 0xFF	; 255
    4ba2:	c8 82       	st	Y, r12
    4ba4:	c5 58       	subi	r28, 0x85	; 133
    4ba6:	d0 40       	sbci	r29, 0x00	; 0
    4ba8:	ca 57       	subi	r28, 0x7A	; 122
    4baa:	df 4f       	sbci	r29, 0xFF	; 255
    4bac:	d8 82       	st	Y, r13
    4bae:	c6 58       	subi	r28, 0x86	; 134
    4bb0:	d0 40       	sbci	r29, 0x00	; 0
    4bb2:	c9 57       	subi	r28, 0x79	; 121
    4bb4:	df 4f       	sbci	r29, 0xFF	; 255
    4bb6:	e8 82       	st	Y, r14
    4bb8:	c7 58       	subi	r28, 0x87	; 135
    4bba:	d0 40       	sbci	r29, 0x00	; 0
    4bbc:	c8 57       	subi	r28, 0x78	; 120
    4bbe:	df 4f       	sbci	r29, 0xFF	; 255
    4bc0:	f8 82       	st	Y, r15
    4bc2:	c8 58       	subi	r28, 0x88	; 136
    4bc4:	d0 40       	sbci	r29, 0x00	; 0
    4bc6:	c7 57       	subi	r28, 0x77	; 119
    4bc8:	df 4f       	sbci	r29, 0xFF	; 255
    4bca:	08 83       	st	Y, r16
    4bcc:	c9 58       	subi	r28, 0x89	; 137
    4bce:	d0 40       	sbci	r29, 0x00	; 0
    4bd0:	c6 57       	subi	r28, 0x76	; 118
    4bd2:	df 4f       	sbci	r29, 0xFF	; 255
    4bd4:	18 83       	st	Y, r17
    4bd6:	ca 58       	subi	r28, 0x8A	; 138
    4bd8:	d0 40       	sbci	r29, 0x00	; 0
    4bda:	c1 2c       	mov	r12, r1
    4bdc:	d1 2c       	mov	r13, r1
    4bde:	e1 2c       	mov	r14, r1
    4be0:	f1 2c       	mov	r15, r1
    4be2:	00 e0       	ldi	r16, 0x00	; 0
    4be4:	10 e0       	ldi	r17, 0x00	; 0
    4be6:	03 d6       	rcall	.+3078   	; 0x57ee <__adddi3>
    4be8:	e2 2f       	mov	r30, r18
    4bea:	a3 2e       	mov	r10, r19
    4bec:	b4 2e       	mov	r11, r20
    4bee:	b5 2f       	mov	r27, r21
    4bf0:	a6 2f       	mov	r26, r22
    4bf2:	f7 2f       	mov	r31, r23
    4bf4:	28 2e       	mov	r2, r24
    4bf6:	39 2e       	mov	r3, r25
    4bf8:	68 94       	set
    4bfa:	44 24       	eor	r4, r4
    4bfc:	43 f8       	bld	r4, 3
};


static const
uint64_t change_endian64(uint64_t x){
	uint64_t r=0;
    4bfe:	71 2c       	mov	r7, r1
    4c00:	51 2c       	mov	r5, r1
    4c02:	61 2c       	mov	r6, r1
	uint8_t i=8;
	do{
		r <<= 8;
    4c04:	27 2d       	mov	r18, r7
    4c06:	3c 2d       	mov	r19, r12
    4c08:	4d 2d       	mov	r20, r13
    4c0a:	5e 2d       	mov	r21, r14
    4c0c:	6f 2d       	mov	r22, r15
    4c0e:	71 2f       	mov	r23, r17
    4c10:	85 2d       	mov	r24, r5
    4c12:	96 2d       	mov	r25, r6
    4c14:	08 e0       	ldi	r16, 0x08	; 8
    4c16:	99 d5       	rcall	.+2866   	; 0x574a <__ashldi3>
		r |= 0xff&x;
    4c18:	7e 2e       	mov	r7, r30
    4c1a:	72 2a       	or	r7, r18
    4c1c:	c3 2e       	mov	r12, r19
    4c1e:	d4 2e       	mov	r13, r20
    4c20:	e5 2e       	mov	r14, r21
    4c22:	f6 2e       	mov	r15, r22
    4c24:	17 2f       	mov	r17, r23
    4c26:	58 2e       	mov	r5, r24
    4c28:	69 2e       	mov	r6, r25
		x >>=8;
    4c2a:	2e 2f       	mov	r18, r30
    4c2c:	3a 2d       	mov	r19, r10
    4c2e:	4b 2d       	mov	r20, r11
    4c30:	5b 2f       	mov	r21, r27
    4c32:	6a 2f       	mov	r22, r26
    4c34:	7f 2f       	mov	r23, r31
    4c36:	82 2d       	mov	r24, r2
    4c38:	93 2d       	mov	r25, r3
    4c3a:	a2 d5       	rcall	.+2884   	; 0x5780 <__lshrdi3>
    4c3c:	e2 2f       	mov	r30, r18
    4c3e:	a3 2e       	mov	r10, r19
    4c40:	b4 2e       	mov	r11, r20
    4c42:	b5 2f       	mov	r27, r21
    4c44:	a6 2f       	mov	r26, r22
    4c46:	f7 2f       	mov	r31, r23
    4c48:	28 2e       	mov	r2, r24
    4c4a:	39 2e       	mov	r3, r25
    4c4c:	4a 94       	dec	r4
	}while(--i);
    4c4e:	41 10       	cpse	r4, r1
    4c50:	d9 cf       	rjmp	.-78     	; 0x4c04 <sha2_large_common_lastBlock+0x16c>
	}
	uint8_t buffer[1024/8];
	uint64_t len;
	len = ((uint64_t)ctx->length)*1024LL + length_b;
	len = change_endian64(len);
	memset(buffer, 0, 1024/8);
    4c52:	9e 01       	movw	r18, r28
    4c54:	2f 5f       	subi	r18, 0xFF	; 255
    4c56:	3f 4f       	sbci	r19, 0xFF	; 255
    4c58:	59 01       	movw	r10, r18
    4c5a:	80 e8       	ldi	r24, 0x80	; 128
    4c5c:	f9 01       	movw	r30, r18
    4c5e:	11 92       	st	Z+, r1
    4c60:	8a 95       	dec	r24
    4c62:	e9 f7       	brne	.-6      	; 0x4c5e <sha2_large_common_lastBlock+0x1c6>
	memcpy(buffer, block, (length_b+7)/8);
    4c64:	a4 01       	movw	r20, r8
    4c66:	49 5f       	subi	r20, 0xF9	; 249
    4c68:	5f 4f       	sbci	r21, 0xFF	; 255
    4c6a:	56 95       	lsr	r21
    4c6c:	47 95       	ror	r20
    4c6e:	56 95       	lsr	r21
    4c70:	47 95       	ror	r20
    4c72:	56 95       	lsr	r21
    4c74:	47 95       	ror	r20
    4c76:	c5 57       	subi	r28, 0x75	; 117
    4c78:	df 4f       	sbci	r29, 0xFF	; 255
    4c7a:	68 81       	ld	r22, Y
    4c7c:	79 81       	ldd	r23, Y+1	; 0x01
    4c7e:	cb 58       	subi	r28, 0x8B	; 139
    4c80:	d0 40       	sbci	r29, 0x00	; 0
    4c82:	c9 01       	movw	r24, r18
    4c84:	49 d7       	rcall	.+3730   	; 0x5b18 <memcpy>
	buffer[length_b/8] |= 0x80>>(length_b%8);
    4c86:	f4 01       	movw	r30, r8
    4c88:	f6 95       	lsr	r31
    4c8a:	e7 95       	ror	r30
    4c8c:	f6 95       	lsr	r31
    4c8e:	e7 95       	ror	r30
    4c90:	f6 95       	lsr	r31
    4c92:	e7 95       	ror	r30
    4c94:	ea 0d       	add	r30, r10
    4c96:	fb 1d       	adc	r31, r11
    4c98:	94 01       	movw	r18, r8
    4c9a:	27 70       	andi	r18, 0x07	; 7
    4c9c:	33 27       	eor	r19, r19
    4c9e:	80 e8       	ldi	r24, 0x80	; 128
    4ca0:	90 e0       	ldi	r25, 0x00	; 0
    4ca2:	02 c0       	rjmp	.+4      	; 0x4ca8 <sha2_large_common_lastBlock+0x210>
    4ca4:	95 95       	asr	r25
    4ca6:	87 95       	ror	r24
    4ca8:	2a 95       	dec	r18
    4caa:	e2 f7       	brpl	.-8      	; 0x4ca4 <sha2_large_common_lastBlock+0x20c>
    4cac:	90 81       	ld	r25, Z
    4cae:	89 2b       	or	r24, r25
    4cb0:	80 83       	st	Z, r24
	if(length_b>1024-128-1){
    4cb2:	f0 e8       	ldi	r31, 0x80	; 128
    4cb4:	8f 16       	cp	r8, r31
    4cb6:	f3 e0       	ldi	r31, 0x03	; 3
    4cb8:	9f 06       	cpc	r9, r31
    4cba:	70 f0       	brcs	.+28     	; 0x4cd8 <sha2_large_common_lastBlock+0x240>
		/* length goes into the next block */
		sha2_large_common_nextBlock(ctx, buffer);
    4cbc:	b5 01       	movw	r22, r10
    4cbe:	cf 57       	subi	r28, 0x7F	; 127
    4cc0:	df 4f       	sbci	r29, 0xFF	; 255
    4cc2:	88 81       	ld	r24, Y
    4cc4:	99 81       	ldd	r25, Y+1	; 0x01
    4cc6:	c1 58       	subi	r28, 0x81	; 129
    4cc8:	d0 40       	sbci	r29, 0x00	; 0
    4cca:	0e 94 e5 1c 	call	0x39ca	; 0x39ca <sha2_large_common_nextBlock>
		memset(buffer, 0, 120);
    4cce:	88 e7       	ldi	r24, 0x78	; 120
    4cd0:	f5 01       	movw	r30, r10
    4cd2:	11 92       	st	Z+, r1
    4cd4:	8a 95       	dec	r24
    4cd6:	e9 f7       	brne	.-6      	; 0x4cd2 <sha2_large_common_lastBlock+0x23a>
	}
	memcpy(&(buffer[128-8]), &len, 8);
    4cd8:	ea 96       	adiw	r28, 0x3a	; 58
    4cda:	7f ae       	std	Y+63, r7	; 0x3f
    4cdc:	ea 97       	sbiw	r28, 0x3a	; 58
    4cde:	eb 96       	adiw	r28, 0x3b	; 59
    4ce0:	cf ae       	std	Y+63, r12	; 0x3f
    4ce2:	eb 97       	sbiw	r28, 0x3b	; 59
    4ce4:	ec 96       	adiw	r28, 0x3c	; 60
    4ce6:	df ae       	std	Y+63, r13	; 0x3f
    4ce8:	ec 97       	sbiw	r28, 0x3c	; 60
    4cea:	ed 96       	adiw	r28, 0x3d	; 61
    4cec:	ef ae       	std	Y+63, r14	; 0x3f
    4cee:	ed 97       	sbiw	r28, 0x3d	; 61
    4cf0:	ee 96       	adiw	r28, 0x3e	; 62
    4cf2:	ff ae       	std	Y+63, r15	; 0x3f
    4cf4:	ee 97       	sbiw	r28, 0x3e	; 62
    4cf6:	ef 96       	adiw	r28, 0x3f	; 63
    4cf8:	1f af       	std	Y+63, r17	; 0x3f
    4cfa:	ef 97       	sbiw	r28, 0x3f	; 63
    4cfc:	c1 58       	subi	r28, 0x81	; 129
    4cfe:	df 4f       	sbci	r29, 0xFF	; 255
    4d00:	58 82       	st	Y, r5
    4d02:	cf 57       	subi	r28, 0x7F	; 127
    4d04:	d0 40       	sbci	r29, 0x00	; 0
    4d06:	c0 58       	subi	r28, 0x80	; 128
    4d08:	df 4f       	sbci	r29, 0xFF	; 255
    4d0a:	68 82       	st	Y, r6
    4d0c:	c0 58       	subi	r28, 0x80	; 128
    4d0e:	d0 40       	sbci	r29, 0x00	; 0
	sha2_large_common_nextBlock(ctx, buffer);
    4d10:	be 01       	movw	r22, r28
    4d12:	6f 5f       	subi	r22, 0xFF	; 255
    4d14:	7f 4f       	sbci	r23, 0xFF	; 255
    4d16:	cf 57       	subi	r28, 0x7F	; 127
    4d18:	df 4f       	sbci	r29, 0xFF	; 255
    4d1a:	88 81       	ld	r24, Y
    4d1c:	99 81       	ldd	r25, Y+1	; 0x01
    4d1e:	c1 58       	subi	r28, 0x81	; 129
    4d20:	d0 40       	sbci	r29, 0x00	; 0
    4d22:	0e 94 e5 1c 	call	0x39ca	; 0x39ca <sha2_large_common_nextBlock>
}
    4d26:	c4 57       	subi	r28, 0x74	; 116
    4d28:	df 4f       	sbci	r29, 0xFF	; 255
    4d2a:	0f b6       	in	r0, 0x3f	; 63
    4d2c:	f8 94       	cli
    4d2e:	de bf       	out	0x3e, r29	; 62
    4d30:	0f be       	out	0x3f, r0	; 63
    4d32:	cd bf       	out	0x3d, r28	; 61
    4d34:	df 91       	pop	r29
    4d36:	cf 91       	pop	r28
    4d38:	1f 91       	pop	r17
    4d3a:	0f 91       	pop	r16
    4d3c:	ff 90       	pop	r15
    4d3e:	ef 90       	pop	r14
    4d40:	df 90       	pop	r13
    4d42:	cf 90       	pop	r12
    4d44:	bf 90       	pop	r11
    4d46:	af 90       	pop	r10
    4d48:	9f 90       	pop	r9
    4d4a:	8f 90       	pop	r8
    4d4c:	7f 90       	pop	r7
    4d4e:	6f 90       	pop	r6
    4d50:	5f 90       	pop	r5
    4d52:	4f 90       	pop	r4
    4d54:	3f 90       	pop	r3
    4d56:	2f 90       	pop	r2
    4d58:	08 95       	ret

00004d5a <sha2_small_common_nextBlock>:


/**
 * block must be, 512, Bit = 64, Byte, long !!!
 */
void sha2_small_common_nextBlock (sha2_small_common_ctx_t *state, const void *block){
    4d5a:	2f 92       	push	r2
    4d5c:	3f 92       	push	r3
    4d5e:	4f 92       	push	r4
    4d60:	5f 92       	push	r5
    4d62:	6f 92       	push	r6
    4d64:	7f 92       	push	r7
    4d66:	8f 92       	push	r8
    4d68:	9f 92       	push	r9
    4d6a:	af 92       	push	r10
    4d6c:	bf 92       	push	r11
    4d6e:	cf 92       	push	r12
    4d70:	df 92       	push	r13
    4d72:	ef 92       	push	r14
    4d74:	ff 92       	push	r15
    4d76:	0f 93       	push	r16
    4d78:	1f 93       	push	r17
    4d7a:	cf 93       	push	r28
    4d7c:	df 93       	push	r29
    4d7e:	cd b7       	in	r28, 0x3d	; 61
    4d80:	de b7       	in	r29, 0x3e	; 62
    4d82:	cb 56       	subi	r28, 0x6B	; 107
    4d84:	d1 09       	sbc	r29, r1
    4d86:	0f b6       	in	r0, 0x3f	; 63
    4d88:	f8 94       	cli
    4d8a:	de bf       	out	0x3e, r29	; 62
    4d8c:	0f be       	out	0x3f, r0	; 63
    4d8e:	cd bf       	out	0x3d, r28	; 61
    4d90:	ac 96       	adiw	r28, 0x2c	; 44
    4d92:	9f af       	std	Y+63, r25	; 0x3f
    4d94:	8e af       	std	Y+62, r24	; 0x3e
    4d96:	ac 97       	sbiw	r28, 0x2c	; 44
    4d98:	9e 01       	movw	r18, r28
    4d9a:	2f 5f       	subi	r18, 0xFF	; 255
    4d9c:	3f 4f       	sbci	r19, 0xFF	; 255
    4d9e:	a8 96       	adiw	r28, 0x28	; 40
    4da0:	3f af       	std	Y+63, r19	; 0x3f
    4da2:	2e af       	std	Y+62, r18	; 0x3e
    4da4:	a8 97       	sbiw	r28, 0x28	; 40
    4da6:	20 5c       	subi	r18, 0xC0	; 192
    4da8:	3f 4f       	sbci	r19, 0xFF	; 255
    4daa:	a8 96       	adiw	r28, 0x28	; 40
    4dac:	ee ad       	ldd	r30, Y+62	; 0x3e
    4dae:	ff ad       	ldd	r31, Y+63	; 0x3f
    4db0:	a8 97       	sbiw	r28, 0x28	; 40
    4db2:	af 01       	movw	r20, r30
	uint32_t a[8],t1,t2;

	/* init w */
#if defined LITTLE_ENDIAN
	for (i=0; i<16; ++i){
		w[i]= change_endian32(((uint32_t*)block)[i]);
    4db4:	fb 01       	movw	r30, r22
    4db6:	81 91       	ld	r24, Z+
    4db8:	91 91       	ld	r25, Z+
    4dba:	a1 91       	ld	r26, Z+
    4dbc:	b1 91       	ld	r27, Z+
    4dbe:	bf 01       	movw	r22, r30
    4dc0:	b8 2e       	mov	r11, r24
    4dc2:	aa 24       	eor	r10, r10
    4dc4:	99 24       	eor	r9, r9
    4dc6:	88 24       	eor	r8, r8
    4dc8:	cb 2e       	mov	r12, r27
    4dca:	dd 24       	eor	r13, r13
    4dcc:	ee 24       	eor	r14, r14
    4dce:	ff 24       	eor	r15, r15
    4dd0:	c8 28       	or	r12, r8
    4dd2:	d9 28       	or	r13, r9
    4dd4:	ea 28       	or	r14, r10
    4dd6:	fb 28       	or	r15, r11
    4dd8:	4c 01       	movw	r8, r24
    4dda:	5d 01       	movw	r10, r26
    4ddc:	88 24       	eor	r8, r8
    4dde:	aa 24       	eor	r10, r10
    4de0:	bb 24       	eor	r11, r11
    4de2:	ba 2c       	mov	r11, r10
    4de4:	a9 2c       	mov	r10, r9
    4de6:	98 2c       	mov	r9, r8
    4de8:	88 24       	eor	r8, r8
    4dea:	c8 28       	or	r12, r8
    4dec:	d9 28       	or	r13, r9
    4dee:	ea 28       	or	r14, r10
    4df0:	fb 28       	or	r15, r11
    4df2:	88 27       	eor	r24, r24
    4df4:	99 27       	eor	r25, r25
    4df6:	bb 27       	eor	r27, r27
    4df8:	89 2f       	mov	r24, r25
    4dfa:	9a 2f       	mov	r25, r26
    4dfc:	ab 2f       	mov	r26, r27
    4dfe:	bb 27       	eor	r27, r27
    4e00:	8c 29       	or	r24, r12
    4e02:	9d 29       	or	r25, r13
    4e04:	ae 29       	or	r26, r14
    4e06:	bf 29       	or	r27, r15
    4e08:	fa 01       	movw	r30, r20
    4e0a:	81 93       	st	Z+, r24
    4e0c:	91 93       	st	Z+, r25
    4e0e:	a1 93       	st	Z+, r26
    4e10:	b1 93       	st	Z+, r27
    4e12:	af 01       	movw	r20, r30
	uint8_t  i;
	uint32_t a[8],t1,t2;

	/* init w */
#if defined LITTLE_ENDIAN
	for (i=0; i<16; ++i){
    4e14:	e2 17       	cp	r30, r18
    4e16:	f3 07       	cpc	r31, r19
    4e18:	69 f6       	brne	.-102    	; 0x4db4 <sha2_small_common_nextBlock+0x5a>
	for (i=16; i<64; ++i){
		w[i] = SIGMA_b(w[i-2]) + w[i-7] + SIGMA_a(w[i-15]) + w[i-16];
	}
*/
/* init working variables */
	memcpy((void*)a,(void*)(state->h), 8*4);
    4e1a:	80 e2       	ldi	r24, 0x20	; 32
    4e1c:	ac 96       	adiw	r28, 0x2c	; 44
    4e1e:	ee ad       	ldd	r30, Y+62	; 0x3e
    4e20:	ff ad       	ldd	r31, Y+63	; 0x3f
    4e22:	ac 97       	sbiw	r28, 0x2c	; 44
    4e24:	de 01       	movw	r26, r28
    4e26:	af 5b       	subi	r26, 0xBF	; 191
    4e28:	bf 4f       	sbci	r27, 0xFF	; 255
    4e2a:	01 90       	ld	r0, Z+
    4e2c:	0d 92       	st	X+, r0
    4e2e:	8a 95       	dec	r24
    4e30:	e1 f7       	brne	.-8      	; 0x4e2a <sha2_small_common_nextBlock+0xd0>
    4e32:	0f 2e       	mov	r0, r31
    4e34:	f4 e3       	ldi	r31, 0x34	; 52
    4e36:	2f 2e       	mov	r2, r31
    4e38:	f3 e0       	ldi	r31, 0x03	; 3
    4e3a:	3f 2e       	mov	r3, r31
    4e3c:	f0 2d       	mov	r31, r0

/* do the, fun stuff, */
	for (i=0; i<64; ++i){
    4e3e:	a6 96       	adiw	r28, 0x26	; 38
    4e40:	1f ae       	std	Y+63, r1	; 0x3f
    4e42:	a6 97       	sbiw	r28, 0x26	; 38
			memmove(&(w[0]), &(w[1]), 15*4);
			w[15] = wx;
		}
		t1 = a[7] + SIGMA_1(a[4]) + CH(a[4],a[5],a[6]) + pgm_read_dword(&k[i]) + wx;
		t2 = SIGMA_0(a[0]) + MAJ(a[0],a[1],a[2]);
		memmove(&(a[1]), &(a[0]), 7*4); 	/* a[7]=a[6]; a[6]=a[5]; a[5]=a[4]; a[4]=a[3]; a[3]=a[2]; a[2]=a[1]; a[1]=a[0]; */
    4e44:	21 e4       	ldi	r18, 0x41	; 65
    4e46:	30 e0       	ldi	r19, 0x00	; 0
    4e48:	2c 0f       	add	r18, r28
    4e4a:	3d 1f       	adc	r19, r29
    4e4c:	2c 5f       	subi	r18, 0xFC	; 252
    4e4e:	3f 4f       	sbci	r19, 0xFF	; 255
    4e50:	aa 96       	adiw	r28, 0x2a	; 42
    4e52:	3f af       	std	Y+63, r19	; 0x3f
    4e54:	2e af       	std	Y+62, r18	; 0x3e
    4e56:	aa 97       	sbiw	r28, 0x2a	; 42
/* init working variables */
	memcpy((void*)a,(void*)(state->h), 8*4);

/* do the, fun stuff, */
	for (i=0; i<64; ++i){
		if(i<16){
    4e58:	a6 96       	adiw	r28, 0x26	; 38
    4e5a:	3f ad       	ldd	r19, Y+63	; 0x3f
    4e5c:	a6 97       	sbiw	r28, 0x26	; 38
    4e5e:	30 31       	cpi	r19, 0x10	; 16
    4e60:	48 f4       	brcc	.+18     	; 0x4e74 <sha2_small_common_nextBlock+0x11a>
			wx = w[i];
    4e62:	a8 96       	adiw	r28, 0x28	; 40
    4e64:	ae ad       	ldd	r26, Y+62	; 0x3e
    4e66:	bf ad       	ldd	r27, Y+63	; 0x3f
    4e68:	a8 97       	sbiw	r28, 0x28	; 40
    4e6a:	cd 90       	ld	r12, X+
    4e6c:	dd 90       	ld	r13, X+
    4e6e:	ed 90       	ld	r14, X+
    4e70:	fc 90       	ld	r15, X
    4e72:	b8 c0       	rjmp	.+368    	; 0x4fe4 <sha2_small_common_nextBlock+0x28a>
		}else{
			wx = SIGMA_b(w[14]) + w[9] + SIGMA_a(w[1]) + w[0];
    4e74:	89 ad       	ldd	r24, Y+57	; 0x39
    4e76:	9a ad       	ldd	r25, Y+58	; 0x3a
    4e78:	ab ad       	ldd	r26, Y+59	; 0x3b
    4e7a:	bc ad       	ldd	r27, Y+60	; 0x3c
    4e7c:	8d 80       	ldd	r8, Y+5	; 0x05
    4e7e:	9e 80       	ldd	r9, Y+6	; 0x06
    4e80:	af 80       	ldd	r10, Y+7	; 0x07
    4e82:	b8 84       	ldd	r11, Y+8	; 0x08
    4e84:	6c 01       	movw	r12, r24
    4e86:	7d 01       	movw	r14, r26
    4e88:	0b 2e       	mov	r0, r27
    4e8a:	bd e0       	ldi	r27, 0x0D	; 13
    4e8c:	cc 0c       	add	r12, r12
    4e8e:	dd 1c       	adc	r13, r13
    4e90:	ee 1c       	adc	r14, r14
    4e92:	ff 1c       	adc	r15, r15
    4e94:	ba 95       	dec	r27
    4e96:	d1 f7       	brne	.-12     	; 0x4e8c <sha2_small_common_nextBlock+0x132>
    4e98:	b0 2d       	mov	r27, r0
    4e9a:	ac 01       	movw	r20, r24
    4e9c:	bd 01       	movw	r22, r26
    4e9e:	03 2e       	mov	r0, r19
    4ea0:	33 e1       	ldi	r19, 0x13	; 19
    4ea2:	76 95       	lsr	r23
    4ea4:	67 95       	ror	r22
    4ea6:	57 95       	ror	r21
    4ea8:	47 95       	ror	r20
    4eaa:	3a 95       	dec	r19
    4eac:	d1 f7       	brne	.-12     	; 0x4ea2 <sha2_small_common_nextBlock+0x148>
    4eae:	30 2d       	mov	r19, r0
    4eb0:	97 01       	movw	r18, r14
    4eb2:	86 01       	movw	r16, r12
    4eb4:	04 2b       	or	r16, r20
    4eb6:	15 2b       	or	r17, r21
    4eb8:	26 2b       	or	r18, r22
    4eba:	37 2b       	or	r19, r23
    4ebc:	6c 01       	movw	r12, r24
    4ebe:	7d 01       	movw	r14, r26
    4ec0:	0b 2e       	mov	r0, r27
    4ec2:	bf e0       	ldi	r27, 0x0F	; 15
    4ec4:	cc 0c       	add	r12, r12
    4ec6:	dd 1c       	adc	r13, r13
    4ec8:	ee 1c       	adc	r14, r14
    4eca:	ff 1c       	adc	r15, r15
    4ecc:	ba 95       	dec	r27
    4ece:	d1 f7       	brne	.-12     	; 0x4ec4 <sha2_small_common_nextBlock+0x16a>
    4ed0:	b0 2d       	mov	r27, r0
    4ed2:	ac 01       	movw	r20, r24
    4ed4:	bd 01       	movw	r22, r26
    4ed6:	03 2e       	mov	r0, r19
    4ed8:	31 e1       	ldi	r19, 0x11	; 17
    4eda:	76 95       	lsr	r23
    4edc:	67 95       	ror	r22
    4ede:	57 95       	ror	r21
    4ee0:	47 95       	ror	r20
    4ee2:	3a 95       	dec	r19
    4ee4:	d1 f7       	brne	.-12     	; 0x4eda <sha2_small_common_nextBlock+0x180>
    4ee6:	30 2d       	mov	r19, r0
    4ee8:	4c 29       	or	r20, r12
    4eea:	5d 29       	or	r21, r13
    4eec:	6e 29       	or	r22, r14
    4eee:	7f 29       	or	r23, r15
    4ef0:	68 01       	movw	r12, r16
    4ef2:	79 01       	movw	r14, r18
    4ef4:	c4 26       	eor	r12, r20
    4ef6:	d5 26       	eor	r13, r21
    4ef8:	e6 26       	eor	r14, r22
    4efa:	f7 26       	eor	r15, r23
    4efc:	07 2e       	mov	r0, r23
    4efe:	7a e0       	ldi	r23, 0x0A	; 10
    4f00:	b6 95       	lsr	r27
    4f02:	a7 95       	ror	r26
    4f04:	97 95       	ror	r25
    4f06:	87 95       	ror	r24
    4f08:	7a 95       	dec	r23
    4f0a:	d1 f7       	brne	.-12     	; 0x4f00 <sha2_small_common_nextBlock+0x1a6>
    4f0c:	70 2d       	mov	r23, r0
    4f0e:	8c 25       	eor	r24, r12
    4f10:	9d 25       	eor	r25, r13
    4f12:	ae 25       	eor	r26, r14
    4f14:	bf 25       	eor	r27, r15
    4f16:	cd a0       	ldd	r12, Y+37	; 0x25
    4f18:	de a0       	ldd	r13, Y+38	; 0x26
    4f1a:	ef a0       	ldd	r14, Y+39	; 0x27
    4f1c:	f8 a4       	ldd	r15, Y+40	; 0x28
    4f1e:	49 81       	ldd	r20, Y+1	; 0x01
    4f20:	5a 81       	ldd	r21, Y+2	; 0x02
    4f22:	6b 81       	ldd	r22, Y+3	; 0x03
    4f24:	7c 81       	ldd	r23, Y+4	; 0x04
    4f26:	c4 0e       	add	r12, r20
    4f28:	d5 1e       	adc	r13, r21
    4f2a:	e6 1e       	adc	r14, r22
    4f2c:	f7 1e       	adc	r15, r23
    4f2e:	8c 0d       	add	r24, r12
    4f30:	9d 1d       	adc	r25, r13
    4f32:	ae 1d       	adc	r26, r14
    4f34:	bf 1d       	adc	r27, r15
    4f36:	75 01       	movw	r14, r10
    4f38:	64 01       	movw	r12, r8
    4f3a:	0b 2e       	mov	r0, r27
    4f3c:	be e0       	ldi	r27, 0x0E	; 14
    4f3e:	cc 0c       	add	r12, r12
    4f40:	dd 1c       	adc	r13, r13
    4f42:	ee 1c       	adc	r14, r14
    4f44:	ff 1c       	adc	r15, r15
    4f46:	ba 95       	dec	r27
    4f48:	d1 f7       	brne	.-12     	; 0x4f3e <sha2_small_common_nextBlock+0x1e4>
    4f4a:	b0 2d       	mov	r27, r0
    4f4c:	b5 01       	movw	r22, r10
    4f4e:	a4 01       	movw	r20, r8
    4f50:	03 2e       	mov	r0, r19
    4f52:	32 e1       	ldi	r19, 0x12	; 18
    4f54:	76 95       	lsr	r23
    4f56:	67 95       	ror	r22
    4f58:	57 95       	ror	r21
    4f5a:	47 95       	ror	r20
    4f5c:	3a 95       	dec	r19
    4f5e:	d1 f7       	brne	.-12     	; 0x4f54 <sha2_small_common_nextBlock+0x1fa>
    4f60:	30 2d       	mov	r19, r0
    4f62:	c4 2a       	or	r12, r20
    4f64:	d5 2a       	or	r13, r21
    4f66:	e6 2a       	or	r14, r22
    4f68:	f7 2a       	or	r15, r23
    4f6a:	b5 01       	movw	r22, r10
    4f6c:	a4 01       	movw	r20, r8
    4f6e:	68 94       	set
    4f70:	16 f8       	bld	r1, 6
    4f72:	76 95       	lsr	r23
    4f74:	67 95       	ror	r22
    4f76:	57 95       	ror	r21
    4f78:	47 95       	ror	r20
    4f7a:	16 94       	lsr	r1
    4f7c:	d1 f7       	brne	.-12     	; 0x4f72 <sha2_small_common_nextBlock+0x218>
    4f7e:	95 01       	movw	r18, r10
    4f80:	84 01       	movw	r16, r8
    4f82:	0f 2e       	mov	r0, r31
    4f84:	f9 e1       	ldi	r31, 0x19	; 25
    4f86:	00 0f       	add	r16, r16
    4f88:	11 1f       	adc	r17, r17
    4f8a:	22 1f       	adc	r18, r18
    4f8c:	33 1f       	adc	r19, r19
    4f8e:	fa 95       	dec	r31
    4f90:	d1 f7       	brne	.-12     	; 0x4f86 <sha2_small_common_nextBlock+0x22c>
    4f92:	f0 2d       	mov	r31, r0
    4f94:	40 2b       	or	r20, r16
    4f96:	51 2b       	or	r21, r17
    4f98:	62 2b       	or	r22, r18
    4f9a:	73 2b       	or	r23, r19
    4f9c:	c4 26       	eor	r12, r20
    4f9e:	d5 26       	eor	r13, r21
    4fa0:	e6 26       	eor	r14, r22
    4fa2:	f7 26       	eor	r15, r23
    4fa4:	68 94       	set
    4fa6:	12 f8       	bld	r1, 2
    4fa8:	b6 94       	lsr	r11
    4faa:	a7 94       	ror	r10
    4fac:	97 94       	ror	r9
    4fae:	87 94       	ror	r8
    4fb0:	16 94       	lsr	r1
    4fb2:	d1 f7       	brne	.-12     	; 0x4fa8 <sha2_small_common_nextBlock+0x24e>
    4fb4:	8c 24       	eor	r8, r12
    4fb6:	9d 24       	eor	r9, r13
    4fb8:	ae 24       	eor	r10, r14
    4fba:	bf 24       	eor	r11, r15
    4fbc:	6c 01       	movw	r12, r24
    4fbe:	7d 01       	movw	r14, r26
    4fc0:	c8 0c       	add	r12, r8
    4fc2:	d9 1c       	adc	r13, r9
    4fc4:	ea 1c       	adc	r14, r10
    4fc6:	fb 1c       	adc	r15, r11
			memmove(&(w[0]), &(w[1]), 15*4);
    4fc8:	4c e3       	ldi	r20, 0x3C	; 60
    4fca:	50 e0       	ldi	r21, 0x00	; 0
    4fcc:	be 01       	movw	r22, r28
    4fce:	6b 5f       	subi	r22, 0xFB	; 251
    4fd0:	7f 4f       	sbci	r23, 0xFF	; 255
    4fd2:	ce 01       	movw	r24, r28
    4fd4:	01 96       	adiw	r24, 0x01	; 1
    4fd6:	a9 d5       	rcall	.+2898   	; 0x5b2a <memmove>
			w[15] = wx;
    4fd8:	21 96       	adiw	r28, 0x01	; 1
    4fda:	cc ae       	std	Y+60, r12	; 0x3c
    4fdc:	dd ae       	std	Y+61, r13	; 0x3d
    4fde:	ee ae       	std	Y+62, r14	; 0x3e
    4fe0:	ff ae       	std	Y+63, r15	; 0x3f
    4fe2:	21 97       	sbiw	r28, 0x01	; 1
		}
		t1 = a[7] + SIGMA_1(a[4]) + CH(a[4],a[5],a[6]) + pgm_read_dword(&k[i]) + wx;
    4fe4:	65 96       	adiw	r28, 0x15	; 21
    4fe6:	8c ad       	ldd	r24, Y+60	; 0x3c
    4fe8:	9d ad       	ldd	r25, Y+61	; 0x3d
    4fea:	ae ad       	ldd	r26, Y+62	; 0x3e
    4fec:	bf ad       	ldd	r27, Y+63	; 0x3f
    4fee:	65 97       	sbiw	r28, 0x15	; 21
    4ff0:	f1 01       	movw	r30, r2
    4ff2:	25 91       	lpm	r18, Z+
    4ff4:	35 91       	lpm	r19, Z+
    4ff6:	45 91       	lpm	r20, Z+
    4ff8:	54 91       	lpm	r21, Z
    4ffa:	a5 96       	adiw	r28, 0x25	; 37
    4ffc:	2c af       	std	Y+60, r18	; 0x3c
    4ffe:	3d af       	std	Y+61, r19	; 0x3d
    5000:	4e af       	std	Y+62, r20	; 0x3e
    5002:	5f af       	std	Y+63, r21	; 0x3f
    5004:	a5 97       	sbiw	r28, 0x25	; 37
    5006:	4c 01       	movw	r8, r24
    5008:	5d 01       	movw	r10, r26
    500a:	80 94       	com	r8
    500c:	90 94       	com	r9
    500e:	a0 94       	com	r10
    5010:	b0 94       	com	r11
    5012:	6d 96       	adiw	r28, 0x1d	; 29
    5014:	4c ad       	ldd	r20, Y+60	; 0x3c
    5016:	5d ad       	ldd	r21, Y+61	; 0x3d
    5018:	6e ad       	ldd	r22, Y+62	; 0x3e
    501a:	7f ad       	ldd	r23, Y+63	; 0x3f
    501c:	6d 97       	sbiw	r28, 0x1d	; 29
    501e:	84 22       	and	r8, r20
    5020:	95 22       	and	r9, r21
    5022:	a6 22       	and	r10, r22
    5024:	b7 22       	and	r11, r23
    5026:	69 96       	adiw	r28, 0x19	; 25
    5028:	4c ad       	ldd	r20, Y+60	; 0x3c
    502a:	5d ad       	ldd	r21, Y+61	; 0x3d
    502c:	6e ad       	ldd	r22, Y+62	; 0x3e
    502e:	7f ad       	ldd	r23, Y+63	; 0x3f
    5030:	69 97       	sbiw	r28, 0x19	; 25
    5032:	8c 01       	movw	r16, r24
    5034:	9d 01       	movw	r18, r26
    5036:	04 23       	and	r16, r20
    5038:	15 23       	and	r17, r21
    503a:	26 23       	and	r18, r22
    503c:	37 23       	and	r19, r23
    503e:	b5 01       	movw	r22, r10
    5040:	a4 01       	movw	r20, r8
    5042:	40 27       	eor	r20, r16
    5044:	51 27       	eor	r21, r17
    5046:	62 27       	eor	r22, r18
    5048:	73 27       	eor	r23, r19
    504a:	4c 01       	movw	r8, r24
    504c:	5d 01       	movw	r10, r26
    504e:	07 2e       	mov	r0, r23
    5050:	7b e0       	ldi	r23, 0x0B	; 11
    5052:	b6 94       	lsr	r11
    5054:	a7 94       	ror	r10
    5056:	97 94       	ror	r9
    5058:	87 94       	ror	r8
    505a:	7a 95       	dec	r23
    505c:	d1 f7       	brne	.-12     	; 0x5052 <sha2_small_common_nextBlock+0x2f8>
    505e:	70 2d       	mov	r23, r0
    5060:	8c 01       	movw	r16, r24
    5062:	9d 01       	movw	r18, r26
    5064:	0f 2e       	mov	r0, r31
    5066:	f5 e1       	ldi	r31, 0x15	; 21
    5068:	00 0f       	add	r16, r16
    506a:	11 1f       	adc	r17, r17
    506c:	22 1f       	adc	r18, r18
    506e:	33 1f       	adc	r19, r19
    5070:	fa 95       	dec	r31
    5072:	d1 f7       	brne	.-12     	; 0x5068 <sha2_small_common_nextBlock+0x30e>
    5074:	f0 2d       	mov	r31, r0
    5076:	80 2a       	or	r8, r16
    5078:	91 2a       	or	r9, r17
    507a:	a2 2a       	or	r10, r18
    507c:	b3 2a       	or	r11, r19
    507e:	2c 01       	movw	r4, r24
    5080:	3d 01       	movw	r6, r26
    5082:	68 94       	set
    5084:	15 f8       	bld	r1, 5
    5086:	76 94       	lsr	r7
    5088:	67 94       	ror	r6
    508a:	57 94       	ror	r5
    508c:	47 94       	ror	r4
    508e:	16 94       	lsr	r1
    5090:	d1 f7       	brne	.-12     	; 0x5086 <sha2_small_common_nextBlock+0x32c>
    5092:	8c 01       	movw	r16, r24
    5094:	9d 01       	movw	r18, r26
    5096:	0f 2e       	mov	r0, r31
    5098:	fa e1       	ldi	r31, 0x1A	; 26
    509a:	00 0f       	add	r16, r16
    509c:	11 1f       	adc	r17, r17
    509e:	22 1f       	adc	r18, r18
    50a0:	33 1f       	adc	r19, r19
    50a2:	fa 95       	dec	r31
    50a4:	d1 f7       	brne	.-12     	; 0x509a <sha2_small_common_nextBlock+0x340>
    50a6:	f0 2d       	mov	r31, r0
    50a8:	04 29       	or	r16, r4
    50aa:	15 29       	or	r17, r5
    50ac:	26 29       	or	r18, r6
    50ae:	37 29       	or	r19, r7
    50b0:	08 25       	eor	r16, r8
    50b2:	19 25       	eor	r17, r9
    50b4:	2a 25       	eor	r18, r10
    50b6:	3b 25       	eor	r19, r11
    50b8:	4c 01       	movw	r8, r24
    50ba:	5d 01       	movw	r10, r26
    50bc:	88 0c       	add	r8, r8
    50be:	99 1c       	adc	r9, r9
    50c0:	aa 1c       	adc	r10, r10
    50c2:	bb 1c       	adc	r11, r11
    50c4:	88 0c       	add	r8, r8
    50c6:	99 1c       	adc	r9, r9
    50c8:	aa 1c       	adc	r10, r10
    50ca:	bb 1c       	adc	r11, r11
    50cc:	88 0c       	add	r8, r8
    50ce:	99 1c       	adc	r9, r9
    50d0:	aa 1c       	adc	r10, r10
    50d2:	bb 1c       	adc	r11, r11
    50d4:	88 0c       	add	r8, r8
    50d6:	99 1c       	adc	r9, r9
    50d8:	aa 1c       	adc	r10, r10
    50da:	bb 1c       	adc	r11, r11
    50dc:	88 0c       	add	r8, r8
    50de:	99 1c       	adc	r9, r9
    50e0:	aa 1c       	adc	r10, r10
    50e2:	bb 1c       	adc	r11, r11
    50e4:	88 0c       	add	r8, r8
    50e6:	99 1c       	adc	r9, r9
    50e8:	aa 1c       	adc	r10, r10
    50ea:	bb 1c       	adc	r11, r11
    50ec:	88 0c       	add	r8, r8
    50ee:	99 1c       	adc	r9, r9
    50f0:	aa 1c       	adc	r10, r10
    50f2:	bb 1c       	adc	r11, r11
    50f4:	07 2e       	mov	r0, r23
    50f6:	79 e1       	ldi	r23, 0x19	; 25
    50f8:	b6 95       	lsr	r27
    50fa:	a7 95       	ror	r26
    50fc:	97 95       	ror	r25
    50fe:	87 95       	ror	r24
    5100:	7a 95       	dec	r23
    5102:	d1 f7       	brne	.-12     	; 0x50f8 <sha2_small_common_nextBlock+0x39e>
    5104:	70 2d       	mov	r23, r0
    5106:	88 29       	or	r24, r8
    5108:	99 29       	or	r25, r9
    510a:	aa 29       	or	r26, r10
    510c:	bb 29       	or	r27, r11
    510e:	08 27       	eor	r16, r24
    5110:	19 27       	eor	r17, r25
    5112:	2a 27       	eor	r18, r26
    5114:	3b 27       	eor	r19, r27
    5116:	40 0f       	add	r20, r16
    5118:	51 1f       	adc	r21, r17
    511a:	62 1f       	adc	r22, r18
    511c:	73 1f       	adc	r23, r19
    511e:	a1 96       	adiw	r28, 0x21	; 33
    5120:	0c ad       	ldd	r16, Y+60	; 0x3c
    5122:	1d ad       	ldd	r17, Y+61	; 0x3d
    5124:	2e ad       	ldd	r18, Y+62	; 0x3e
    5126:	3f ad       	ldd	r19, Y+63	; 0x3f
    5128:	a1 97       	sbiw	r28, 0x21	; 33
    512a:	40 0f       	add	r20, r16
    512c:	51 1f       	adc	r21, r17
    512e:	62 1f       	adc	r22, r18
    5130:	73 1f       	adc	r23, r19
    5132:	c4 0e       	add	r12, r20
    5134:	d5 1e       	adc	r13, r21
    5136:	e6 1e       	adc	r14, r22
    5138:	f7 1e       	adc	r15, r23
    513a:	a5 96       	adiw	r28, 0x25	; 37
    513c:	8c ad       	ldd	r24, Y+60	; 0x3c
    513e:	9d ad       	ldd	r25, Y+61	; 0x3d
    5140:	ae ad       	ldd	r26, Y+62	; 0x3e
    5142:	bf ad       	ldd	r27, Y+63	; 0x3f
    5144:	a5 97       	sbiw	r28, 0x25	; 37
    5146:	8c 0d       	add	r24, r12
    5148:	9d 1d       	adc	r25, r13
    514a:	ae 1d       	adc	r26, r14
    514c:	bf 1d       	adc	r27, r15
    514e:	a5 96       	adiw	r28, 0x25	; 37
    5150:	8c af       	std	Y+60, r24	; 0x3c
    5152:	9d af       	std	Y+61, r25	; 0x3d
    5154:	ae af       	std	Y+62, r26	; 0x3e
    5156:	bf af       	std	Y+63, r27	; 0x3f
    5158:	a5 97       	sbiw	r28, 0x25	; 37
		t2 = SIGMA_0(a[0]) + MAJ(a[0],a[1],a[2]);
    515a:	25 96       	adiw	r28, 0x05	; 5
    515c:	8c ac       	ldd	r8, Y+60	; 0x3c
    515e:	9d ac       	ldd	r9, Y+61	; 0x3d
    5160:	ae ac       	ldd	r10, Y+62	; 0x3e
    5162:	bf ac       	ldd	r11, Y+63	; 0x3f
    5164:	25 97       	sbiw	r28, 0x05	; 5
    5166:	29 96       	adiw	r28, 0x09	; 9
    5168:	4c ac       	ldd	r4, Y+60	; 0x3c
    516a:	5d ac       	ldd	r5, Y+61	; 0x3d
    516c:	6e ac       	ldd	r6, Y+62	; 0x3e
    516e:	7f ac       	ldd	r7, Y+63	; 0x3f
    5170:	29 97       	sbiw	r28, 0x09	; 9
    5172:	2d 96       	adiw	r28, 0x0d	; 13
    5174:	cc ac       	ldd	r12, Y+60	; 0x3c
    5176:	dd ac       	ldd	r13, Y+61	; 0x3d
    5178:	ee ac       	ldd	r14, Y+62	; 0x3e
    517a:	ff ac       	ldd	r15, Y+63	; 0x3f
    517c:	2d 97       	sbiw	r28, 0x0d	; 13
		memmove(&(a[1]), &(a[0]), 7*4); 	/* a[7]=a[6]; a[6]=a[5]; a[5]=a[4]; a[4]=a[3]; a[3]=a[2]; a[2]=a[1]; a[1]=a[0]; */
    517e:	4c e1       	ldi	r20, 0x1C	; 28
    5180:	50 e0       	ldi	r21, 0x00	; 0
    5182:	be 01       	movw	r22, r28
    5184:	6f 5b       	subi	r22, 0xBF	; 191
    5186:	7f 4f       	sbci	r23, 0xFF	; 255
    5188:	aa 96       	adiw	r28, 0x2a	; 42
    518a:	8e ad       	ldd	r24, Y+62	; 0x3e
    518c:	9f ad       	ldd	r25, Y+63	; 0x3f
    518e:	aa 97       	sbiw	r28, 0x2a	; 42
    5190:	cc d4       	rcall	.+2456   	; 0x5b2a <memmove>
		a[4] += t1;
    5192:	65 96       	adiw	r28, 0x15	; 21
    5194:	8c ad       	ldd	r24, Y+60	; 0x3c
    5196:	9d ad       	ldd	r25, Y+61	; 0x3d
    5198:	ae ad       	ldd	r26, Y+62	; 0x3e
    519a:	bf ad       	ldd	r27, Y+63	; 0x3f
    519c:	65 97       	sbiw	r28, 0x15	; 21
    519e:	a5 96       	adiw	r28, 0x25	; 37
    51a0:	2c ad       	ldd	r18, Y+60	; 0x3c
    51a2:	3d ad       	ldd	r19, Y+61	; 0x3d
    51a4:	4e ad       	ldd	r20, Y+62	; 0x3e
    51a6:	5f ad       	ldd	r21, Y+63	; 0x3f
    51a8:	a5 97       	sbiw	r28, 0x25	; 37
    51aa:	82 0f       	add	r24, r18
    51ac:	93 1f       	adc	r25, r19
    51ae:	a4 1f       	adc	r26, r20
    51b0:	b5 1f       	adc	r27, r21
    51b2:	65 96       	adiw	r28, 0x15	; 21
    51b4:	8c af       	std	Y+60, r24	; 0x3c
    51b6:	9d af       	std	Y+61, r25	; 0x3d
    51b8:	ae af       	std	Y+62, r26	; 0x3e
    51ba:	bf af       	std	Y+63, r27	; 0x3f
    51bc:	65 97       	sbiw	r28, 0x15	; 21
		a[0] = t1 + t2;
    51be:	b5 01       	movw	r22, r10
    51c0:	a4 01       	movw	r20, r8
    51c2:	03 2e       	mov	r0, r19
    51c4:	3d e0       	ldi	r19, 0x0D	; 13
    51c6:	76 95       	lsr	r23
    51c8:	67 95       	ror	r22
    51ca:	57 95       	ror	r21
    51cc:	47 95       	ror	r20
    51ce:	3a 95       	dec	r19
    51d0:	d1 f7       	brne	.-12     	; 0x51c6 <sha2_small_common_nextBlock+0x46c>
    51d2:	30 2d       	mov	r19, r0
    51d4:	d5 01       	movw	r26, r10
    51d6:	c4 01       	movw	r24, r8
    51d8:	07 2e       	mov	r0, r23
    51da:	73 e1       	ldi	r23, 0x13	; 19
    51dc:	88 0f       	add	r24, r24
    51de:	99 1f       	adc	r25, r25
    51e0:	aa 1f       	adc	r26, r26
    51e2:	bb 1f       	adc	r27, r27
    51e4:	7a 95       	dec	r23
    51e6:	d1 f7       	brne	.-12     	; 0x51dc <sha2_small_common_nextBlock+0x482>
    51e8:	70 2d       	mov	r23, r0
    51ea:	84 2b       	or	r24, r20
    51ec:	95 2b       	or	r25, r21
    51ee:	a6 2b       	or	r26, r22
    51f0:	b7 2b       	or	r27, r23
    51f2:	b5 01       	movw	r22, r10
    51f4:	a4 01       	movw	r20, r8
    51f6:	76 95       	lsr	r23
    51f8:	67 95       	ror	r22
    51fa:	57 95       	ror	r21
    51fc:	47 95       	ror	r20
    51fe:	76 95       	lsr	r23
    5200:	67 95       	ror	r22
    5202:	57 95       	ror	r21
    5204:	47 95       	ror	r20
    5206:	95 01       	movw	r18, r10
    5208:	84 01       	movw	r16, r8
    520a:	0f 2e       	mov	r0, r31
    520c:	fe e1       	ldi	r31, 0x1E	; 30
    520e:	00 0f       	add	r16, r16
    5210:	11 1f       	adc	r17, r17
    5212:	22 1f       	adc	r18, r18
    5214:	33 1f       	adc	r19, r19
    5216:	fa 95       	dec	r31
    5218:	d1 f7       	brne	.-12     	; 0x520e <sha2_small_common_nextBlock+0x4b4>
    521a:	f0 2d       	mov	r31, r0
    521c:	40 2b       	or	r20, r16
    521e:	51 2b       	or	r21, r17
    5220:	62 2b       	or	r22, r18
    5222:	73 2b       	or	r23, r19
    5224:	48 27       	eor	r20, r24
    5226:	59 27       	eor	r21, r25
    5228:	6a 27       	eor	r22, r26
    522a:	7b 27       	eor	r23, r27
    522c:	95 01       	movw	r18, r10
    522e:	84 01       	movw	r16, r8
    5230:	0f 2e       	mov	r0, r31
    5232:	fa e0       	ldi	r31, 0x0A	; 10
    5234:	00 0f       	add	r16, r16
    5236:	11 1f       	adc	r17, r17
    5238:	22 1f       	adc	r18, r18
    523a:	33 1f       	adc	r19, r19
    523c:	fa 95       	dec	r31
    523e:	d1 f7       	brne	.-12     	; 0x5234 <sha2_small_common_nextBlock+0x4da>
    5240:	f0 2d       	mov	r31, r0
    5242:	d5 01       	movw	r26, r10
    5244:	c4 01       	movw	r24, r8
    5246:	07 2e       	mov	r0, r23
    5248:	76 e1       	ldi	r23, 0x16	; 22
    524a:	b6 95       	lsr	r27
    524c:	a7 95       	ror	r26
    524e:	97 95       	ror	r25
    5250:	87 95       	ror	r24
    5252:	7a 95       	dec	r23
    5254:	d1 f7       	brne	.-12     	; 0x524a <sha2_small_common_nextBlock+0x4f0>
    5256:	70 2d       	mov	r23, r0
    5258:	80 2b       	or	r24, r16
    525a:	91 2b       	or	r25, r17
    525c:	a2 2b       	or	r26, r18
    525e:	b3 2b       	or	r27, r19
    5260:	48 27       	eor	r20, r24
    5262:	59 27       	eor	r21, r25
    5264:	6a 27       	eor	r22, r26
    5266:	7b 27       	eor	r23, r27
    5268:	97 01       	movw	r18, r14
    526a:	86 01       	movw	r16, r12
    526c:	04 25       	eor	r16, r4
    526e:	15 25       	eor	r17, r5
    5270:	26 25       	eor	r18, r6
    5272:	37 25       	eor	r19, r7
    5274:	80 22       	and	r8, r16
    5276:	91 22       	and	r9, r17
    5278:	a2 22       	and	r10, r18
    527a:	b3 22       	and	r11, r19
    527c:	c4 20       	and	r12, r4
    527e:	d5 20       	and	r13, r5
    5280:	e6 20       	and	r14, r6
    5282:	f7 20       	and	r15, r7
    5284:	95 01       	movw	r18, r10
    5286:	84 01       	movw	r16, r8
    5288:	0c 25       	eor	r16, r12
    528a:	1d 25       	eor	r17, r13
    528c:	2e 25       	eor	r18, r14
    528e:	3f 25       	eor	r19, r15
    5290:	40 0f       	add	r20, r16
    5292:	51 1f       	adc	r21, r17
    5294:	62 1f       	adc	r22, r18
    5296:	73 1f       	adc	r23, r19
    5298:	a5 96       	adiw	r28, 0x25	; 37
    529a:	8c ad       	ldd	r24, Y+60	; 0x3c
    529c:	9d ad       	ldd	r25, Y+61	; 0x3d
    529e:	ae ad       	ldd	r26, Y+62	; 0x3e
    52a0:	bf ad       	ldd	r27, Y+63	; 0x3f
    52a2:	a5 97       	sbiw	r28, 0x25	; 37
    52a4:	48 0f       	add	r20, r24
    52a6:	59 1f       	adc	r21, r25
    52a8:	6a 1f       	adc	r22, r26
    52aa:	7b 1f       	adc	r23, r27
    52ac:	25 96       	adiw	r28, 0x05	; 5
    52ae:	4c af       	std	Y+60, r20	; 0x3c
    52b0:	5d af       	std	Y+61, r21	; 0x3d
    52b2:	6e af       	std	Y+62, r22	; 0x3e
    52b4:	7f af       	std	Y+63, r23	; 0x3f
    52b6:	25 97       	sbiw	r28, 0x05	; 5
*/
/* init working variables */
	memcpy((void*)a,(void*)(state->h), 8*4);

/* do the, fun stuff, */
	for (i=0; i<64; ++i){
    52b8:	a6 96       	adiw	r28, 0x26	; 38
    52ba:	9f ad       	ldd	r25, Y+63	; 0x3f
    52bc:	a6 97       	sbiw	r28, 0x26	; 38
    52be:	9f 5f       	subi	r25, 0xFF	; 255
    52c0:	a6 96       	adiw	r28, 0x26	; 38
    52c2:	9f af       	std	Y+63, r25	; 0x3f
    52c4:	a6 97       	sbiw	r28, 0x26	; 38
    52c6:	a4 e0       	ldi	r26, 0x04	; 4
    52c8:	2a 0e       	add	r2, r26
    52ca:	31 1c       	adc	r3, r1
    52cc:	a8 96       	adiw	r28, 0x28	; 40
    52ce:	ee ad       	ldd	r30, Y+62	; 0x3e
    52d0:	ff ad       	ldd	r31, Y+63	; 0x3f
    52d2:	a8 97       	sbiw	r28, 0x28	; 40
    52d4:	34 96       	adiw	r30, 0x04	; 4
    52d6:	a8 96       	adiw	r28, 0x28	; 40
    52d8:	ff af       	std	Y+63, r31	; 0x3f
    52da:	ee af       	std	Y+62, r30	; 0x3e
    52dc:	a8 97       	sbiw	r28, 0x28	; 40
    52de:	90 34       	cpi	r25, 0x40	; 64
    52e0:	09 f0       	breq	.+2      	; 0x52e4 <sha2_small_common_nextBlock+0x58a>
    52e2:	ba cd       	rjmp	.-1164   	; 0x4e58 <sha2_small_common_nextBlock+0xfe>
    52e4:	fe 01       	movw	r30, r28
    52e6:	ef 5b       	subi	r30, 0xBF	; 191
    52e8:	ff 4f       	sbci	r31, 0xFF	; 255
    52ea:	ac 96       	adiw	r28, 0x2c	; 44
    52ec:	2e ad       	ldd	r18, Y+62	; 0x3e
    52ee:	3f ad       	ldd	r19, Y+63	; 0x3f
    52f0:	ac 97       	sbiw	r28, 0x2c	; 44
    52f2:	af 01       	movw	r20, r30
    52f4:	40 5e       	subi	r20, 0xE0	; 224
    52f6:	5f 4f       	sbci	r21, 0xFF	; 255
    52f8:	bf 01       	movw	r22, r30
		a[0] = t1 + t2;
	}

/* update, the, state, */
	for (i=0; i<8; ++i){
		state->h[i] += a[i];
    52fa:	fb 01       	movw	r30, r22
    52fc:	81 91       	ld	r24, Z+
    52fe:	91 91       	ld	r25, Z+
    5300:	a1 91       	ld	r26, Z+
    5302:	b1 91       	ld	r27, Z+
    5304:	bf 01       	movw	r22, r30
    5306:	f9 01       	movw	r30, r18
    5308:	c0 80       	ld	r12, Z
    530a:	d1 80       	ldd	r13, Z+1	; 0x01
    530c:	e2 80       	ldd	r14, Z+2	; 0x02
    530e:	f3 80       	ldd	r15, Z+3	; 0x03
    5310:	8c 0d       	add	r24, r12
    5312:	9d 1d       	adc	r25, r13
    5314:	ae 1d       	adc	r26, r14
    5316:	bf 1d       	adc	r27, r15
    5318:	81 93       	st	Z+, r24
    531a:	91 93       	st	Z+, r25
    531c:	a1 93       	st	Z+, r26
    531e:	b1 93       	st	Z+, r27
    5320:	9f 01       	movw	r18, r30
		a[4] += t1;
		a[0] = t1 + t2;
	}

/* update, the, state, */
	for (i=0; i<8; ++i){
    5322:	64 17       	cp	r22, r20
    5324:	75 07       	cpc	r23, r21
    5326:	49 f7       	brne	.-46     	; 0x52fa <sha2_small_common_nextBlock+0x5a0>
		state->h[i] += a[i];
	}
	state->length += 1;
    5328:	ac 96       	adiw	r28, 0x2c	; 44
    532a:	ee ad       	ldd	r30, Y+62	; 0x3e
    532c:	ff ad       	ldd	r31, Y+63	; 0x3f
    532e:	ac 97       	sbiw	r28, 0x2c	; 44
    5330:	80 a1       	ldd	r24, Z+32	; 0x20
    5332:	91 a1       	ldd	r25, Z+33	; 0x21
    5334:	a2 a1       	ldd	r26, Z+34	; 0x22
    5336:	b3 a1       	ldd	r27, Z+35	; 0x23
    5338:	01 96       	adiw	r24, 0x01	; 1
    533a:	a1 1d       	adc	r26, r1
    533c:	b1 1d       	adc	r27, r1
    533e:	80 a3       	std	Z+32, r24	; 0x20
    5340:	91 a3       	std	Z+33, r25	; 0x21
    5342:	a2 a3       	std	Z+34, r26	; 0x22
    5344:	b3 a3       	std	Z+35, r27	; 0x23
}
    5346:	c5 59       	subi	r28, 0x95	; 149
    5348:	df 4f       	sbci	r29, 0xFF	; 255
    534a:	0f b6       	in	r0, 0x3f	; 63
    534c:	f8 94       	cli
    534e:	de bf       	out	0x3e, r29	; 62
    5350:	0f be       	out	0x3f, r0	; 63
    5352:	cd bf       	out	0x3d, r28	; 61
    5354:	df 91       	pop	r29
    5356:	cf 91       	pop	r28
    5358:	1f 91       	pop	r17
    535a:	0f 91       	pop	r16
    535c:	ff 90       	pop	r15
    535e:	ef 90       	pop	r14
    5360:	df 90       	pop	r13
    5362:	cf 90       	pop	r12
    5364:	bf 90       	pop	r11
    5366:	af 90       	pop	r10
    5368:	9f 90       	pop	r9
    536a:	8f 90       	pop	r8
    536c:	7f 90       	pop	r7
    536e:	6f 90       	pop	r6
    5370:	5f 90       	pop	r5
    5372:	4f 90       	pop	r4
    5374:	3f 90       	pop	r3
    5376:	2f 90       	pop	r2
    5378:	08 95       	ret

0000537a <sha2_small_common_lastBlock>:


void sha2_small_common_lastBlock(sha2_small_common_ctx_t *state, const void *block, uint16_t length_b){
    537a:	8f 92       	push	r8
    537c:	9f 92       	push	r9
    537e:	af 92       	push	r10
    5380:	bf 92       	push	r11
    5382:	cf 92       	push	r12
    5384:	df 92       	push	r13
    5386:	ef 92       	push	r14
    5388:	ff 92       	push	r15
    538a:	0f 93       	push	r16
    538c:	1f 93       	push	r17
    538e:	cf 93       	push	r28
    5390:	df 93       	push	r29
    5392:	cd b7       	in	r28, 0x3d	; 61
    5394:	de b7       	in	r29, 0x3e	; 62
    5396:	c8 54       	subi	r28, 0x48	; 72
    5398:	d1 09       	sbc	r29, r1
    539a:	0f b6       	in	r0, 0x3f	; 63
    539c:	f8 94       	cli
    539e:	de bf       	out	0x3e, r29	; 62
    53a0:	0f be       	out	0x3f, r0	; 63
    53a2:	cd bf       	out	0x3d, r28	; 61
    53a4:	8c 01       	movw	r16, r24
    53a6:	4b 01       	movw	r8, r22
    53a8:	5a 01       	movw	r10, r20
	uint8_t lb[512/8]; /* local block */
	uint64_t len;
	while(length_b>=512){
    53aa:	41 15       	cp	r20, r1
    53ac:	62 e0       	ldi	r22, 0x02	; 2
    53ae:	56 07       	cpc	r21, r22
    53b0:	28 f1       	brcs	.+74     	; 0x53fc <sha2_small_common_lastBlock+0x82>
    53b2:	6a 01       	movw	r12, r20
    53b4:	74 01       	movw	r14, r8
		sha2_small_common_nextBlock(state, block);
    53b6:	b7 01       	movw	r22, r14
    53b8:	c8 01       	movw	r24, r16
    53ba:	cf dc       	rcall	.-1634   	; 0x4d5a <sha2_small_common_nextBlock>
		length_b -= 512;
    53bc:	72 e0       	ldi	r23, 0x02	; 2
    53be:	d7 1a       	sub	r13, r23
		block = (uint8_t*)block+64;
    53c0:	80 e4       	ldi	r24, 0x40	; 64
    53c2:	e8 0e       	add	r14, r24
    53c4:	f1 1c       	adc	r15, r1


void sha2_small_common_lastBlock(sha2_small_common_ctx_t *state, const void *block, uint16_t length_b){
	uint8_t lb[512/8]; /* local block */
	uint64_t len;
	while(length_b>=512){
    53c6:	c1 14       	cp	r12, r1
    53c8:	92 e0       	ldi	r25, 0x02	; 2
    53ca:	d9 06       	cpc	r13, r25
    53cc:	a0 f7       	brcc	.-24     	; 0x53b6 <sha2_small_common_lastBlock+0x3c>
    53ce:	75 01       	movw	r14, r10
    53d0:	e1 e0       	ldi	r30, 0x01	; 1
    53d2:	fe 22       	and	r15, r30
    53d4:	f2 e0       	ldi	r31, 0x02	; 2
    53d6:	bf 1a       	sub	r11, r31
    53d8:	ab 2c       	mov	r10, r11
    53da:	bb 24       	eor	r11, r11
    53dc:	a6 94       	lsr	r10
    53de:	6f ef       	ldi	r22, 0xFF	; 255
    53e0:	a6 1a       	sub	r10, r22
    53e2:	b6 0a       	sbc	r11, r22
    53e4:	00 24       	eor	r0, r0
    53e6:	b6 94       	lsr	r11
    53e8:	a7 94       	ror	r10
    53ea:	07 94       	ror	r0
    53ec:	b6 94       	lsr	r11
    53ee:	a7 94       	ror	r10
    53f0:	07 94       	ror	r0
    53f2:	ba 2c       	mov	r11, r10
    53f4:	a0 2c       	mov	r10, r0
    53f6:	8a 0c       	add	r8, r10
    53f8:	9b 1c       	adc	r9, r11
    53fa:	01 c0       	rjmp	.+2      	; 0x53fe <sha2_small_common_lastBlock+0x84>
    53fc:	7a 01       	movw	r14, r20
		sha2_small_common_nextBlock(state, block);
		length_b -= 512;
		block = (uint8_t*)block+64;
	}
	len = state->length*512 + length_b;
    53fe:	f8 01       	movw	r30, r16
    5400:	80 a1       	ldd	r24, Z+32	; 0x20
    5402:	91 a1       	ldd	r25, Z+33	; 0x21
    5404:	a2 a1       	ldd	r26, Z+34	; 0x22
    5406:	b3 a1       	ldd	r27, Z+35	; 0x23
    5408:	07 2e       	mov	r0, r23
    540a:	79 e0       	ldi	r23, 0x09	; 9
    540c:	88 0f       	add	r24, r24
    540e:	99 1f       	adc	r25, r25
    5410:	aa 1f       	adc	r26, r26
    5412:	bb 1f       	adc	r27, r27
    5414:	7a 95       	dec	r23
    5416:	d1 f7       	brne	.-12     	; 0x540c <sha2_small_common_lastBlock+0x92>
    5418:	70 2d       	mov	r23, r0
    541a:	8e 0d       	add	r24, r14
    541c:	9f 1d       	adc	r25, r15
    541e:	a1 1d       	adc	r26, r1
    5420:	b1 1d       	adc	r27, r1
    5422:	9c 01       	movw	r18, r24
    5424:	ad 01       	movw	r20, r26
    5426:	22 96       	adiw	r28, 0x02	; 2
    5428:	2f af       	std	Y+63, r18	; 0x3f
    542a:	22 97       	sbiw	r28, 0x02	; 2
    542c:	23 96       	adiw	r28, 0x03	; 3
    542e:	3f af       	std	Y+63, r19	; 0x3f
    5430:	23 97       	sbiw	r28, 0x03	; 3
    5432:	24 96       	adiw	r28, 0x04	; 4
    5434:	4f af       	std	Y+63, r20	; 0x3f
    5436:	24 97       	sbiw	r28, 0x04	; 4
    5438:	25 96       	adiw	r28, 0x05	; 5
    543a:	5f af       	std	Y+63, r21	; 0x3f
    543c:	25 97       	sbiw	r28, 0x05	; 5
    543e:	26 96       	adiw	r28, 0x06	; 6
    5440:	1f ae       	std	Y+63, r1	; 0x3f
    5442:	26 97       	sbiw	r28, 0x06	; 6
    5444:	27 96       	adiw	r28, 0x07	; 7
    5446:	1f ae       	std	Y+63, r1	; 0x3f
    5448:	27 97       	sbiw	r28, 0x07	; 7
    544a:	28 96       	adiw	r28, 0x08	; 8
    544c:	1f ae       	std	Y+63, r1	; 0x3f
    544e:	28 97       	sbiw	r28, 0x08	; 8
    5450:	29 96       	adiw	r28, 0x09	; 9
    5452:	1f ae       	std	Y+63, r1	; 0x3f
    5454:	29 97       	sbiw	r28, 0x09	; 9
	memset(lb, 0, 64);
    5456:	be 01       	movw	r22, r28
    5458:	6f 5f       	subi	r22, 0xFF	; 255
    545a:	7f 4f       	sbci	r23, 0xFF	; 255
    545c:	6b 01       	movw	r12, r22
    545e:	80 e4       	ldi	r24, 0x40	; 64
    5460:	fb 01       	movw	r30, r22
    5462:	11 92       	st	Z+, r1
    5464:	8a 95       	dec	r24
    5466:	e9 f7       	brne	.-6      	; 0x5462 <sha2_small_common_lastBlock+0xe8>
	memcpy(lb, block, (length_b+7)/8);
    5468:	a7 01       	movw	r20, r14
    546a:	49 5f       	subi	r20, 0xF9	; 249
    546c:	5f 4f       	sbci	r21, 0xFF	; 255
    546e:	56 95       	lsr	r21
    5470:	47 95       	ror	r20
    5472:	56 95       	lsr	r21
    5474:	47 95       	ror	r20
    5476:	56 95       	lsr	r21
    5478:	47 95       	ror	r20
    547a:	b4 01       	movw	r22, r8
    547c:	c6 01       	movw	r24, r12
    547e:	4c d3       	rcall	.+1688   	; 0x5b18 <memcpy>

	/* set the final one bit */
	lb[length_b/8] |= 0x80>>(length_b & 0x7);
    5480:	f7 01       	movw	r30, r14
    5482:	f6 95       	lsr	r31
    5484:	e7 95       	ror	r30
    5486:	f6 95       	lsr	r31
    5488:	e7 95       	ror	r30
    548a:	f6 95       	lsr	r31
    548c:	e7 95       	ror	r30
    548e:	ec 0d       	add	r30, r12
    5490:	fd 1d       	adc	r31, r13
    5492:	c7 01       	movw	r24, r14
    5494:	87 70       	andi	r24, 0x07	; 7
    5496:	99 27       	eor	r25, r25
    5498:	20 e8       	ldi	r18, 0x80	; 128
    549a:	30 e0       	ldi	r19, 0x00	; 0
    549c:	02 c0       	rjmp	.+4      	; 0x54a2 <sha2_small_common_lastBlock+0x128>
    549e:	35 95       	asr	r19
    54a0:	27 95       	ror	r18
    54a2:	8a 95       	dec	r24
    54a4:	e2 f7       	brpl	.-8      	; 0x549e <sha2_small_common_lastBlock+0x124>
    54a6:	80 81       	ld	r24, Z
    54a8:	28 2b       	or	r18, r24
    54aa:	20 83       	st	Z, r18
	/* pad with zeros */
	if (length_b>=512-64){ /* not enouth space for 64bit length value */
    54ac:	f0 ec       	ldi	r31, 0xC0	; 192
    54ae:	ef 16       	cp	r14, r31
    54b0:	f1 e0       	ldi	r31, 0x01	; 1
    54b2:	ff 06       	cpc	r15, r31
    54b4:	40 f0       	brcs	.+16     	; 0x54c6 <sha2_small_common_lastBlock+0x14c>
		sha2_small_common_nextBlock(state, lb);
    54b6:	b6 01       	movw	r22, r12
    54b8:	c8 01       	movw	r24, r16
    54ba:	4f dc       	rcall	.-1890   	; 0x4d5a <sha2_small_common_nextBlock>
		memset(lb, 0, 64);
    54bc:	80 e4       	ldi	r24, 0x40	; 64
    54be:	f6 01       	movw	r30, r12
    54c0:	11 92       	st	Z+, r1
    54c2:	8a 95       	dec	r24
    54c4:	e9 f7       	brne	.-6      	; 0x54c0 <sha2_small_common_lastBlock+0x146>


void sha2_small_common_lastBlock(sha2_small_common_ctx_t *state, const void *block, uint16_t length_b){
	uint8_t lb[512/8]; /* local block */
	uint64_t len;
	while(length_b>=512){
    54c6:	27 e0       	ldi	r18, 0x07	; 7
#if defined LITTLE_ENDIAN
	 	/* this is now rolled up */
	uint8_t i;
	i=7;
	do{
		lb[63-i] = ((uint8_t*)&len)[i];
    54c8:	4f e3       	ldi	r20, 0x3F	; 63
    54ca:	50 e0       	ldi	r21, 0x00	; 0
    54cc:	82 2f       	mov	r24, r18
    54ce:	90 e0       	ldi	r25, 0x00	; 0
    54d0:	fa 01       	movw	r30, r20
    54d2:	e8 1b       	sub	r30, r24
    54d4:	f9 0b       	sbc	r31, r25
    54d6:	61 e0       	ldi	r22, 0x01	; 1
    54d8:	70 e0       	ldi	r23, 0x00	; 0
    54da:	6c 0f       	add	r22, r28
    54dc:	7d 1f       	adc	r23, r29
    54de:	e6 0f       	add	r30, r22
    54e0:	f7 1f       	adc	r31, r23
    54e2:	a1 e4       	ldi	r26, 0x41	; 65
    54e4:	b0 e0       	ldi	r27, 0x00	; 0
    54e6:	ac 0f       	add	r26, r28
    54e8:	bd 1f       	adc	r27, r29
    54ea:	a8 0f       	add	r26, r24
    54ec:	b9 1f       	adc	r27, r25
    54ee:	8c 91       	ld	r24, X
    54f0:	80 83       	st	Z, r24
	}while(i--);
    54f2:	21 50       	subi	r18, 0x01	; 1
    54f4:	58 f7       	brcc	.-42     	; 0x54cc <sha2_small_common_lastBlock+0x152>
#elif defined BIG_ENDIAN
	*((uint64_t)&(lb[56])) = len;
#endif
	sha2_small_common_nextBlock(state, lb);
    54f6:	be 01       	movw	r22, r28
    54f8:	6f 5f       	subi	r22, 0xFF	; 255
    54fa:	7f 4f       	sbci	r23, 0xFF	; 255
    54fc:	c8 01       	movw	r24, r16
    54fe:	2d dc       	rcall	.-1958   	; 0x4d5a <sha2_small_common_nextBlock>
}
    5500:	c8 5b       	subi	r28, 0xB8	; 184
    5502:	df 4f       	sbci	r29, 0xFF	; 255
    5504:	0f b6       	in	r0, 0x3f	; 63
    5506:	f8 94       	cli
    5508:	de bf       	out	0x3e, r29	; 62
    550a:	0f be       	out	0x3f, r0	; 63
    550c:	cd bf       	out	0x3d, r28	; 61
    550e:	df 91       	pop	r29
    5510:	cf 91       	pop	r28
    5512:	1f 91       	pop	r17
    5514:	0f 91       	pop	r16
    5516:	ff 90       	pop	r15
    5518:	ef 90       	pop	r14
    551a:	df 90       	pop	r13
    551c:	cf 90       	pop	r12
    551e:	bf 90       	pop	r11
    5520:	af 90       	pop	r10
    5522:	9f 90       	pop	r9
    5524:	8f 90       	pop	r8
    5526:	08 95       	ret

00005528 <sha512_init>:
0x510e527fade682d1LL, 0x9b05688c2b3e6c1fLL, 0x1f83d9abfb41bd6bLL, 0x5be0cd19137e2179LL
};


void sha512_init(sha512_ctx_t *ctx){
	ctx->length = 0;
    5528:	fc 01       	movw	r30, r24
    552a:	e0 5c       	subi	r30, 0xC0	; 192
    552c:	ff 4f       	sbci	r31, 0xFF	; 255
    552e:	10 82       	st	Z, r1
    5530:	11 82       	std	Z+1, r1	; 0x01
    5532:	12 82       	std	Z+2, r1	; 0x02
    5534:	13 82       	std	Z+3, r1	; 0x03
	memcpy_P(ctx->h, sha512_init_values, 8*8);
    5536:	40 e4       	ldi	r20, 0x40	; 64
    5538:	50 e0       	ldi	r21, 0x00	; 0
    553a:	64 e3       	ldi	r22, 0x34	; 52
    553c:	74 e0       	ldi	r23, 0x04	; 4
    553e:	d6 c2       	rjmp	.+1452   	; 0x5aec <memcpy_P>
    5540:	08 95       	ret

00005542 <sha512_ctx2hash>:
}

void sha512_ctx2hash(void *dest, const sha512_ctx_t *ctx){
    5542:	cf 93       	push	r28
    5544:	df 93       	push	r29
    5546:	ac 01       	movw	r20, r24
    5548:	ec 01       	movw	r28, r24
    554a:	c0 5c       	subi	r28, 0xC0	; 192
    554c:	df 4f       	sbci	r29, 0xFF	; 255
    554e:	fa 01       	movw	r30, r20
	uint8_t i=8, j, *s = (uint8_t*)(ctx->h);
	do{
		j=7;
    5550:	97 e0       	ldi	r25, 0x07	; 7
		do{
			*((uint8_t*)dest) = s[j];
    5552:	db 01       	movw	r26, r22
    5554:	a9 0f       	add	r26, r25
    5556:	b1 1d       	adc	r27, r1
    5558:	2c 91       	ld	r18, X
    555a:	21 93       	st	Z+, r18
			dest = (uint8_t*)dest + 1;
		}while(j--);
    555c:	91 50       	subi	r25, 0x01	; 1
    555e:	c8 f7       	brcc	.-14     	; 0x5552 <sha512_ctx2hash+0x10>
    5560:	48 5f       	subi	r20, 0xF8	; 248
    5562:	5f 4f       	sbci	r21, 0xFF	; 255
		s += 8;
    5564:	68 5f       	subi	r22, 0xF8	; 248
    5566:	7f 4f       	sbci	r23, 0xFF	; 255
	}while(--i);
    5568:	4c 17       	cp	r20, r28
    556a:	5d 07       	cpc	r21, r29
    556c:	81 f7       	brne	.-32     	; 0x554e <sha512_ctx2hash+0xc>
}
    556e:	df 91       	pop	r29
    5570:	cf 91       	pop	r28
    5572:	08 95       	ret

00005574 <sha512>:


void sha512(void *dest, const void *msg, uint32_t length_b){
    5574:	4f 92       	push	r4
    5576:	5f 92       	push	r5
    5578:	6f 92       	push	r6
    557a:	7f 92       	push	r7
    557c:	8f 92       	push	r8
    557e:	9f 92       	push	r9
    5580:	af 92       	push	r10
    5582:	bf 92       	push	r11
    5584:	cf 92       	push	r12
    5586:	df 92       	push	r13
    5588:	ef 92       	push	r14
    558a:	ff 92       	push	r15
    558c:	0f 93       	push	r16
    558e:	1f 93       	push	r17
    5590:	cf 93       	push	r28
    5592:	df 93       	push	r29
    5594:	cd b7       	in	r28, 0x3d	; 61
    5596:	de b7       	in	r29, 0x3e	; 62
    5598:	c4 54       	subi	r28, 0x44	; 68
    559a:	d1 09       	sbc	r29, r1
    559c:	0f b6       	in	r0, 0x3f	; 63
    559e:	f8 94       	cli
    55a0:	de bf       	out	0x3e, r29	; 62
    55a2:	0f be       	out	0x3f, r0	; 63
    55a4:	cd bf       	out	0x3d, r28	; 61
    55a6:	4c 01       	movw	r8, r24
    55a8:	5b 01       	movw	r10, r22
    55aa:	69 01       	movw	r12, r18
    55ac:	7a 01       	movw	r14, r20
	sha512_ctx_t ctx;
	sha512_init(&ctx);
    55ae:	ce 01       	movw	r24, r28
    55b0:	01 96       	adiw	r24, 0x01	; 1
    55b2:	ba df       	rcall	.-140    	; 0x5528 <sha512_init>
	while(length_b >= 1024){
    55b4:	c1 14       	cp	r12, r1
    55b6:	84 e0       	ldi	r24, 0x04	; 4
    55b8:	d8 06       	cpc	r13, r24
    55ba:	e1 04       	cpc	r14, r1
    55bc:	f1 04       	cpc	r15, r1
    55be:	70 f1       	brcs	.+92     	; 0x561c <sha512+0xa8>
    55c0:	26 01       	movw	r4, r12
    55c2:	37 01       	movw	r6, r14
    55c4:	85 01       	movw	r16, r10
#include "sha2_large_common.h"
#include "sha512.h"


void sha512_nextBlock (sha512_ctx_t *ctx, const void *block){
	sha2_large_common_nextBlock(ctx, block);
    55c6:	b8 01       	movw	r22, r16
    55c8:	ce 01       	movw	r24, r28
    55ca:	01 96       	adiw	r24, 0x01	; 1
    55cc:	0e 94 e5 1c 	call	0x39ca	; 0x39ca <sha2_large_common_nextBlock>
void sha512(void *dest, const void *msg, uint32_t length_b){
	sha512_ctx_t ctx;
	sha512_init(&ctx);
	while(length_b >= 1024){
		sha512_nextBlock(&ctx, msg);
		msg = (uint8_t*)msg + 1024/8;
    55d0:	00 58       	subi	r16, 0x80	; 128
    55d2:	1f 4f       	sbci	r17, 0xFF	; 255
		length_b -= 1024;
    55d4:	84 e0       	ldi	r24, 0x04	; 4
    55d6:	58 1a       	sub	r5, r24
    55d8:	61 08       	sbc	r6, r1
    55da:	71 08       	sbc	r7, r1


void sha512(void *dest, const void *msg, uint32_t length_b){
	sha512_ctx_t ctx;
	sha512_init(&ctx);
	while(length_b >= 1024){
    55dc:	41 14       	cp	r4, r1
    55de:	84 e0       	ldi	r24, 0x04	; 4
    55e0:	58 06       	cpc	r5, r24
    55e2:	61 04       	cpc	r6, r1
    55e4:	71 04       	cpc	r7, r1
    55e6:	78 f7       	brcc	.-34     	; 0x55c6 <sha512+0x52>
    55e8:	d7 01       	movw	r26, r14
    55ea:	c6 01       	movw	r24, r12
    55ec:	94 50       	subi	r25, 0x04	; 4
    55ee:	a1 09       	sbc	r26, r1
    55f0:	b1 09       	sbc	r27, r1
    55f2:	07 2e       	mov	r0, r23
    55f4:	7a e0       	ldi	r23, 0x0A	; 10
    55f6:	b6 95       	lsr	r27
    55f8:	a7 95       	ror	r26
    55fa:	97 95       	ror	r25
    55fc:	87 95       	ror	r24
    55fe:	7a 95       	dec	r23
    5600:	d1 f7       	brne	.-12     	; 0x55f6 <sha512+0x82>
    5602:	70 2d       	mov	r23, r0
    5604:	01 96       	adiw	r24, 0x01	; 1
    5606:	96 95       	lsr	r25
    5608:	98 2f       	mov	r25, r24
    560a:	88 27       	eor	r24, r24
    560c:	97 95       	ror	r25
    560e:	87 95       	ror	r24
    5610:	a8 0e       	add	r10, r24
    5612:	b9 1e       	adc	r11, r25
    5614:	83 e0       	ldi	r24, 0x03	; 3
    5616:	d8 22       	and	r13, r24
    5618:	ee 24       	eor	r14, r14
    561a:	ff 24       	eor	r15, r15
void sha512_nextBlock (sha512_ctx_t *ctx, const void *block){
	sha2_large_common_nextBlock(ctx, block);
}

void sha512_lastBlock(sha512_ctx_t *ctx, const void *block, uint16_t length_b){
	sha2_large_common_lastBlock(ctx, block, length_b);
    561c:	a6 01       	movw	r20, r12
    561e:	b5 01       	movw	r22, r10
    5620:	ce 01       	movw	r24, r28
    5622:	01 96       	adiw	r24, 0x01	; 1
    5624:	39 da       	rcall	.-2958   	; 0x4a98 <sha2_large_common_lastBlock>
		sha512_nextBlock(&ctx, msg);
		msg = (uint8_t*)msg + 1024/8;
		length_b -= 1024;
	}
	sha512_lastBlock(&ctx, msg, length_b);
	sha512_ctx2hash(dest, &ctx);
    5626:	be 01       	movw	r22, r28
    5628:	6f 5f       	subi	r22, 0xFF	; 255
    562a:	7f 4f       	sbci	r23, 0xFF	; 255
    562c:	c4 01       	movw	r24, r8
    562e:	89 df       	rcall	.-238    	; 0x5542 <sha512_ctx2hash>
}
    5630:	cc 5b       	subi	r28, 0xBC	; 188
    5632:	df 4f       	sbci	r29, 0xFF	; 255
    5634:	0f b6       	in	r0, 0x3f	; 63
    5636:	f8 94       	cli
    5638:	de bf       	out	0x3e, r29	; 62
    563a:	0f be       	out	0x3f, r0	; 63
    563c:	cd bf       	out	0x3d, r28	; 61
    563e:	df 91       	pop	r29
    5640:	cf 91       	pop	r28
    5642:	1f 91       	pop	r17
    5644:	0f 91       	pop	r16
    5646:	ff 90       	pop	r15
    5648:	ef 90       	pop	r14
    564a:	df 90       	pop	r13
    564c:	cf 90       	pop	r12
    564e:	bf 90       	pop	r11
    5650:	af 90       	pop	r10
    5652:	9f 90       	pop	r9
    5654:	8f 90       	pop	r8
    5656:	7f 90       	pop	r7
    5658:	6f 90       	pop	r6
    565a:	5f 90       	pop	r5
    565c:	4f 90       	pop	r4
    565e:	08 95       	ret

00005660 <uart_init>:
#include <avr/io.h>
#include <string.h>
#include "uart_f.h"

void uart_init(){
	UBRR0H = (BAUD_PRESCALE >> 8); // Load upper 8-bits of the baud rate value into the high byte of the UBRR register
    5660:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
	UBRR0L = BAUD_PRESCALE; // Load lower 8-bits of the baud rate value into the low byte of the UBRR register
    5664:	83 e3       	ldi	r24, 0x33	; 51
    5666:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
	UCSR0C = (0<<UMSEL0) | (0<<UPM0) | (1<<USBS0) | (3<<UCSZ0);
    566a:	8e e0       	ldi	r24, 0x0E	; 14
    566c:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>
	UCSR0B = (1<<RXEN0) | (1<<TXEN0);
    5670:	88 e1       	ldi	r24, 0x18	; 24
    5672:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
    5676:	08 95       	ret

00005678 <uart_puts>:
}

void uart_puts(char* s){
    5678:	0f 93       	push	r16
    567a:	1f 93       	push	r17
    567c:	cf 93       	push	r28
    567e:	df 93       	push	r29
    5680:	1f 92       	push	r1
    5682:	cd b7       	in	r28, 0x3d	; 61
    5684:	de b7       	in	r29, 0x3e	; 62
    5686:	bc 01       	movw	r22, r24
	volatile uint8_t i;
	int len = strlen(s);
    5688:	fc 01       	movw	r30, r24
    568a:	01 90       	ld	r0, Z+
    568c:	00 20       	and	r0, r0
    568e:	e9 f7       	brne	.-6      	; 0x568a <uart_puts+0x12>
    5690:	31 97       	sbiw	r30, 0x01	; 1
    5692:	af 01       	movw	r20, r30
    5694:	48 1b       	sub	r20, r24
    5696:	59 0b       	sbc	r21, r25
	for (i = 0; i < len; i++){
    5698:	19 82       	std	Y+1, r1	; 0x01
    569a:	89 81       	ldd	r24, Y+1	; 0x01
    569c:	90 e0       	ldi	r25, 0x00	; 0
    569e:	84 17       	cp	r24, r20
    56a0:	95 07       	cpc	r25, r21
    56a2:	b4 f4       	brge	.+44     	; 0x56d0 <uart_puts+0x58>
		while(!( UCSR0A & 0X20));
    56a4:	e0 ec       	ldi	r30, 0xC0	; 192
    56a6:	f0 e0       	ldi	r31, 0x00	; 0
		UDR0=s[i];
    56a8:	06 ec       	ldi	r16, 0xC6	; 198
    56aa:	10 e0       	ldi	r17, 0x00	; 0

void uart_puts(char* s){
	volatile uint8_t i;
	int len = strlen(s);
	for (i = 0; i < len; i++){
		while(!( UCSR0A & 0X20));
    56ac:	90 81       	ld	r25, Z
    56ae:	95 ff       	sbrs	r25, 5
    56b0:	fd cf       	rjmp	.-6      	; 0x56ac <uart_puts+0x34>
		UDR0=s[i];
    56b2:	89 81       	ldd	r24, Y+1	; 0x01
    56b4:	db 01       	movw	r26, r22
    56b6:	a8 0f       	add	r26, r24
    56b8:	b1 1d       	adc	r27, r1
    56ba:	9c 91       	ld	r25, X
    56bc:	d8 01       	movw	r26, r16
    56be:	9c 93       	st	X, r25
}

void uart_puts(char* s){
	volatile uint8_t i;
	int len = strlen(s);
	for (i = 0; i < len; i++){
    56c0:	99 81       	ldd	r25, Y+1	; 0x01
    56c2:	9f 5f       	subi	r25, 0xFF	; 255
    56c4:	99 83       	std	Y+1, r25	; 0x01
    56c6:	29 81       	ldd	r18, Y+1	; 0x01
    56c8:	30 e0       	ldi	r19, 0x00	; 0
    56ca:	24 17       	cp	r18, r20
    56cc:	35 07       	cpc	r19, r21
    56ce:	74 f3       	brlt	.-36     	; 0x56ac <uart_puts+0x34>
		while(!( UCSR0A & 0X20));
		UDR0=s[i];
	}
	while(!( UCSR0A & 0X20));
    56d0:	e0 ec       	ldi	r30, 0xC0	; 192
    56d2:	f0 e0       	ldi	r31, 0x00	; 0
    56d4:	80 81       	ld	r24, Z
    56d6:	85 ff       	sbrs	r24, 5
    56d8:	fd cf       	rjmp	.-6      	; 0x56d4 <uart_puts+0x5c>
	UDR0 = 13;
    56da:	8d e0       	ldi	r24, 0x0D	; 13
    56dc:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
	while(!( UCSR0A & 0X20));
    56e0:	e0 ec       	ldi	r30, 0xC0	; 192
    56e2:	f0 e0       	ldi	r31, 0x00	; 0
    56e4:	80 81       	ld	r24, Z
    56e6:	85 ff       	sbrs	r24, 5
    56e8:	fd cf       	rjmp	.-6      	; 0x56e4 <uart_puts+0x6c>
	UDR0 = 10;
    56ea:	8a e0       	ldi	r24, 0x0A	; 10
    56ec:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
}
    56f0:	0f 90       	pop	r0
    56f2:	df 91       	pop	r29
    56f4:	cf 91       	pop	r28
    56f6:	1f 91       	pop	r17
    56f8:	0f 91       	pop	r16
    56fa:	08 95       	ret

000056fc <uart_putd>:

void uart_putd(char* s, uint8_t len){
    56fc:	cf 93       	push	r28
    56fe:	df 93       	push	r29
	int i;
	for (i = 0; i < len; i++){
    5700:	66 23       	and	r22, r22
    5702:	81 f0       	breq	.+32     	; 0x5724 <uart_putd+0x28>
    5704:	dc 01       	movw	r26, r24
    5706:	9c 01       	movw	r18, r24
    5708:	26 0f       	add	r18, r22
    570a:	31 1d       	adc	r19, r1
		while(!( UCSR0A & 0X20));
    570c:	e0 ec       	ldi	r30, 0xC0	; 192
    570e:	f0 e0       	ldi	r31, 0x00	; 0
		UDR0=s[i];
    5710:	c6 ec       	ldi	r28, 0xC6	; 198
    5712:	d0 e0       	ldi	r29, 0x00	; 0
}

void uart_putd(char* s, uint8_t len){
	int i;
	for (i = 0; i < len; i++){
		while(!( UCSR0A & 0X20));
    5714:	90 81       	ld	r25, Z
    5716:	95 ff       	sbrs	r25, 5
    5718:	fd cf       	rjmp	.-6      	; 0x5714 <uart_putd+0x18>
		UDR0=s[i];
    571a:	9d 91       	ld	r25, X+
    571c:	98 83       	st	Y, r25
	UDR0 = 10;
}

void uart_putd(char* s, uint8_t len){
	int i;
	for (i = 0; i < len; i++){
    571e:	a2 17       	cp	r26, r18
    5720:	b3 07       	cpc	r27, r19
    5722:	c1 f7       	brne	.-16     	; 0x5714 <uart_putd+0x18>
		while(!( UCSR0A & 0X20));
		UDR0=s[i];
	}
	while(!( UCSR0A & 0X20));
    5724:	e0 ec       	ldi	r30, 0xC0	; 192
    5726:	f0 e0       	ldi	r31, 0x00	; 0
    5728:	80 81       	ld	r24, Z
    572a:	85 ff       	sbrs	r24, 5
    572c:	fd cf       	rjmp	.-6      	; 0x5728 <uart_putd+0x2c>
	UDR0 = 13;
    572e:	8d e0       	ldi	r24, 0x0D	; 13
    5730:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
	while(!( UCSR0A & 0X20));
    5734:	e0 ec       	ldi	r30, 0xC0	; 192
    5736:	f0 e0       	ldi	r31, 0x00	; 0
    5738:	80 81       	ld	r24, Z
    573a:	85 ff       	sbrs	r24, 5
    573c:	fd cf       	rjmp	.-6      	; 0x5738 <uart_putd+0x3c>
	UDR0 = 10;
    573e:	8a e0       	ldi	r24, 0x0A	; 10
    5740:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
}
    5744:	df 91       	pop	r29
    5746:	cf 91       	pop	r28
    5748:	08 95       	ret

0000574a <__ashldi3>:
    574a:	0f 93       	push	r16
    574c:	08 30       	cpi	r16, 0x08	; 8
    574e:	90 f0       	brcs	.+36     	; 0x5774 <__ashldi3+0x2a>
    5750:	98 2f       	mov	r25, r24
    5752:	87 2f       	mov	r24, r23
    5754:	76 2f       	mov	r23, r22
    5756:	65 2f       	mov	r22, r21
    5758:	54 2f       	mov	r21, r20
    575a:	43 2f       	mov	r20, r19
    575c:	32 2f       	mov	r19, r18
    575e:	22 27       	eor	r18, r18
    5760:	08 50       	subi	r16, 0x08	; 8
    5762:	f4 cf       	rjmp	.-24     	; 0x574c <__ashldi3+0x2>
    5764:	22 0f       	add	r18, r18
    5766:	33 1f       	adc	r19, r19
    5768:	44 1f       	adc	r20, r20
    576a:	55 1f       	adc	r21, r21
    576c:	66 1f       	adc	r22, r22
    576e:	77 1f       	adc	r23, r23
    5770:	88 1f       	adc	r24, r24
    5772:	99 1f       	adc	r25, r25
    5774:	0a 95       	dec	r16
    5776:	b2 f7       	brpl	.-20     	; 0x5764 <__ashldi3+0x1a>
    5778:	0f 91       	pop	r16
    577a:	08 95       	ret

0000577c <__ashrdi3>:
    577c:	97 fb       	bst	r25, 7
    577e:	10 f8       	bld	r1, 0

00005780 <__lshrdi3>:
    5780:	16 94       	lsr	r1
    5782:	00 08       	sbc	r0, r0
    5784:	0f 93       	push	r16
    5786:	08 30       	cpi	r16, 0x08	; 8
    5788:	98 f0       	brcs	.+38     	; 0x57b0 <__lshrdi3+0x30>
    578a:	08 50       	subi	r16, 0x08	; 8
    578c:	23 2f       	mov	r18, r19
    578e:	34 2f       	mov	r19, r20
    5790:	45 2f       	mov	r20, r21
    5792:	56 2f       	mov	r21, r22
    5794:	67 2f       	mov	r22, r23
    5796:	78 2f       	mov	r23, r24
    5798:	89 2f       	mov	r24, r25
    579a:	90 2d       	mov	r25, r0
    579c:	f4 cf       	rjmp	.-24     	; 0x5786 <__lshrdi3+0x6>
    579e:	05 94       	asr	r0
    57a0:	97 95       	ror	r25
    57a2:	87 95       	ror	r24
    57a4:	77 95       	ror	r23
    57a6:	67 95       	ror	r22
    57a8:	57 95       	ror	r21
    57aa:	47 95       	ror	r20
    57ac:	37 95       	ror	r19
    57ae:	27 95       	ror	r18
    57b0:	0a 95       	dec	r16
    57b2:	aa f7       	brpl	.-22     	; 0x579e <__lshrdi3+0x1e>
    57b4:	0f 91       	pop	r16
    57b6:	08 95       	ret

000057b8 <__rotldi3>:
    57b8:	0f 93       	push	r16
    57ba:	08 30       	cpi	r16, 0x08	; 8
    57bc:	a0 f0       	brcs	.+40     	; 0x57e6 <__rotldi3+0x2e>
    57be:	08 50       	subi	r16, 0x08	; 8
    57c0:	09 2e       	mov	r0, r25
    57c2:	98 2f       	mov	r25, r24
    57c4:	87 2f       	mov	r24, r23
    57c6:	76 2f       	mov	r23, r22
    57c8:	65 2f       	mov	r22, r21
    57ca:	54 2f       	mov	r21, r20
    57cc:	43 2f       	mov	r20, r19
    57ce:	32 2f       	mov	r19, r18
    57d0:	20 2d       	mov	r18, r0
    57d2:	f3 cf       	rjmp	.-26     	; 0x57ba <__rotldi3+0x2>
    57d4:	22 0f       	add	r18, r18
    57d6:	33 1f       	adc	r19, r19
    57d8:	44 1f       	adc	r20, r20
    57da:	55 1f       	adc	r21, r21
    57dc:	66 1f       	adc	r22, r22
    57de:	77 1f       	adc	r23, r23
    57e0:	88 1f       	adc	r24, r24
    57e2:	99 1f       	adc	r25, r25
    57e4:	21 1d       	adc	r18, r1
    57e6:	0a 95       	dec	r16
    57e8:	aa f7       	brpl	.-22     	; 0x57d4 <__rotldi3+0x1c>
    57ea:	0f 91       	pop	r16
    57ec:	08 95       	ret

000057ee <__adddi3>:
    57ee:	2a 0d       	add	r18, r10
    57f0:	3b 1d       	adc	r19, r11
    57f2:	4c 1d       	adc	r20, r12
    57f4:	5d 1d       	adc	r21, r13
    57f6:	6e 1d       	adc	r22, r14
    57f8:	7f 1d       	adc	r23, r15
    57fa:	80 1f       	adc	r24, r16
    57fc:	91 1f       	adc	r25, r17
    57fe:	08 95       	ret

00005800 <malloc>:
    5800:	0f 93       	push	r16
    5802:	1f 93       	push	r17
    5804:	cf 93       	push	r28
    5806:	df 93       	push	r29
    5808:	82 30       	cpi	r24, 0x02	; 2
    580a:	91 05       	cpc	r25, r1
    580c:	10 f4       	brcc	.+4      	; 0x5812 <malloc+0x12>
    580e:	82 e0       	ldi	r24, 0x02	; 2
    5810:	90 e0       	ldi	r25, 0x00	; 0
    5812:	e0 91 5b 05 	lds	r30, 0x055B	; 0x80055b <__flp>
    5816:	f0 91 5c 05 	lds	r31, 0x055C	; 0x80055c <__flp+0x1>
    581a:	20 e0       	ldi	r18, 0x00	; 0
    581c:	30 e0       	ldi	r19, 0x00	; 0
    581e:	a0 e0       	ldi	r26, 0x00	; 0
    5820:	b0 e0       	ldi	r27, 0x00	; 0
    5822:	30 97       	sbiw	r30, 0x00	; 0
    5824:	19 f1       	breq	.+70     	; 0x586c <malloc+0x6c>
    5826:	40 81       	ld	r20, Z
    5828:	51 81       	ldd	r21, Z+1	; 0x01
    582a:	02 81       	ldd	r16, Z+2	; 0x02
    582c:	13 81       	ldd	r17, Z+3	; 0x03
    582e:	48 17       	cp	r20, r24
    5830:	59 07       	cpc	r21, r25
    5832:	c8 f0       	brcs	.+50     	; 0x5866 <malloc+0x66>
    5834:	84 17       	cp	r24, r20
    5836:	95 07       	cpc	r25, r21
    5838:	69 f4       	brne	.+26     	; 0x5854 <malloc+0x54>
    583a:	10 97       	sbiw	r26, 0x00	; 0
    583c:	31 f0       	breq	.+12     	; 0x584a <malloc+0x4a>
    583e:	12 96       	adiw	r26, 0x02	; 2
    5840:	0c 93       	st	X, r16
    5842:	12 97       	sbiw	r26, 0x02	; 2
    5844:	13 96       	adiw	r26, 0x03	; 3
    5846:	1c 93       	st	X, r17
    5848:	27 c0       	rjmp	.+78     	; 0x5898 <malloc+0x98>
    584a:	00 93 5b 05 	sts	0x055B, r16	; 0x80055b <__flp>
    584e:	10 93 5c 05 	sts	0x055C, r17	; 0x80055c <__flp+0x1>
    5852:	22 c0       	rjmp	.+68     	; 0x5898 <malloc+0x98>
    5854:	21 15       	cp	r18, r1
    5856:	31 05       	cpc	r19, r1
    5858:	19 f0       	breq	.+6      	; 0x5860 <malloc+0x60>
    585a:	42 17       	cp	r20, r18
    585c:	53 07       	cpc	r21, r19
    585e:	18 f4       	brcc	.+6      	; 0x5866 <malloc+0x66>
    5860:	9a 01       	movw	r18, r20
    5862:	bd 01       	movw	r22, r26
    5864:	ef 01       	movw	r28, r30
    5866:	df 01       	movw	r26, r30
    5868:	f8 01       	movw	r30, r16
    586a:	db cf       	rjmp	.-74     	; 0x5822 <malloc+0x22>
    586c:	21 15       	cp	r18, r1
    586e:	31 05       	cpc	r19, r1
    5870:	f9 f0       	breq	.+62     	; 0x58b0 <malloc+0xb0>
    5872:	28 1b       	sub	r18, r24
    5874:	39 0b       	sbc	r19, r25
    5876:	24 30       	cpi	r18, 0x04	; 4
    5878:	31 05       	cpc	r19, r1
    587a:	80 f4       	brcc	.+32     	; 0x589c <malloc+0x9c>
    587c:	8a 81       	ldd	r24, Y+2	; 0x02
    587e:	9b 81       	ldd	r25, Y+3	; 0x03
    5880:	61 15       	cp	r22, r1
    5882:	71 05       	cpc	r23, r1
    5884:	21 f0       	breq	.+8      	; 0x588e <malloc+0x8e>
    5886:	fb 01       	movw	r30, r22
    5888:	93 83       	std	Z+3, r25	; 0x03
    588a:	82 83       	std	Z+2, r24	; 0x02
    588c:	04 c0       	rjmp	.+8      	; 0x5896 <malloc+0x96>
    588e:	90 93 5c 05 	sts	0x055C, r25	; 0x80055c <__flp+0x1>
    5892:	80 93 5b 05 	sts	0x055B, r24	; 0x80055b <__flp>
    5896:	fe 01       	movw	r30, r28
    5898:	32 96       	adiw	r30, 0x02	; 2
    589a:	44 c0       	rjmp	.+136    	; 0x5924 <malloc+0x124>
    589c:	fe 01       	movw	r30, r28
    589e:	e2 0f       	add	r30, r18
    58a0:	f3 1f       	adc	r31, r19
    58a2:	81 93       	st	Z+, r24
    58a4:	91 93       	st	Z+, r25
    58a6:	22 50       	subi	r18, 0x02	; 2
    58a8:	31 09       	sbc	r19, r1
    58aa:	39 83       	std	Y+1, r19	; 0x01
    58ac:	28 83       	st	Y, r18
    58ae:	3a c0       	rjmp	.+116    	; 0x5924 <malloc+0x124>
    58b0:	20 91 59 05 	lds	r18, 0x0559	; 0x800559 <__brkval>
    58b4:	30 91 5a 05 	lds	r19, 0x055A	; 0x80055a <__brkval+0x1>
    58b8:	23 2b       	or	r18, r19
    58ba:	41 f4       	brne	.+16     	; 0x58cc <malloc+0xcc>
    58bc:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__malloc_heap_start>
    58c0:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <__malloc_heap_start+0x1>
    58c4:	30 93 5a 05 	sts	0x055A, r19	; 0x80055a <__brkval+0x1>
    58c8:	20 93 59 05 	sts	0x0559, r18	; 0x800559 <__brkval>
    58cc:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__data_start>
    58d0:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__data_start+0x1>
    58d4:	21 15       	cp	r18, r1
    58d6:	31 05       	cpc	r19, r1
    58d8:	41 f4       	brne	.+16     	; 0x58ea <malloc+0xea>
    58da:	2d b7       	in	r18, 0x3d	; 61
    58dc:	3e b7       	in	r19, 0x3e	; 62
    58de:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
    58e2:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
    58e6:	24 1b       	sub	r18, r20
    58e8:	35 0b       	sbc	r19, r21
    58ea:	e0 91 59 05 	lds	r30, 0x0559	; 0x800559 <__brkval>
    58ee:	f0 91 5a 05 	lds	r31, 0x055A	; 0x80055a <__brkval+0x1>
    58f2:	e2 17       	cp	r30, r18
    58f4:	f3 07       	cpc	r31, r19
    58f6:	a0 f4       	brcc	.+40     	; 0x5920 <malloc+0x120>
    58f8:	2e 1b       	sub	r18, r30
    58fa:	3f 0b       	sbc	r19, r31
    58fc:	28 17       	cp	r18, r24
    58fe:	39 07       	cpc	r19, r25
    5900:	78 f0       	brcs	.+30     	; 0x5920 <malloc+0x120>
    5902:	ac 01       	movw	r20, r24
    5904:	4e 5f       	subi	r20, 0xFE	; 254
    5906:	5f 4f       	sbci	r21, 0xFF	; 255
    5908:	24 17       	cp	r18, r20
    590a:	35 07       	cpc	r19, r21
    590c:	48 f0       	brcs	.+18     	; 0x5920 <malloc+0x120>
    590e:	4e 0f       	add	r20, r30
    5910:	5f 1f       	adc	r21, r31
    5912:	50 93 5a 05 	sts	0x055A, r21	; 0x80055a <__brkval+0x1>
    5916:	40 93 59 05 	sts	0x0559, r20	; 0x800559 <__brkval>
    591a:	81 93       	st	Z+, r24
    591c:	91 93       	st	Z+, r25
    591e:	02 c0       	rjmp	.+4      	; 0x5924 <malloc+0x124>
    5920:	e0 e0       	ldi	r30, 0x00	; 0
    5922:	f0 e0       	ldi	r31, 0x00	; 0
    5924:	cf 01       	movw	r24, r30
    5926:	df 91       	pop	r29
    5928:	cf 91       	pop	r28
    592a:	1f 91       	pop	r17
    592c:	0f 91       	pop	r16
    592e:	08 95       	ret

00005930 <free>:
    5930:	cf 93       	push	r28
    5932:	df 93       	push	r29
    5934:	00 97       	sbiw	r24, 0x00	; 0
    5936:	09 f4       	brne	.+2      	; 0x593a <free+0xa>
    5938:	81 c0       	rjmp	.+258    	; 0x5a3c <free+0x10c>
    593a:	fc 01       	movw	r30, r24
    593c:	32 97       	sbiw	r30, 0x02	; 2
    593e:	13 82       	std	Z+3, r1	; 0x03
    5940:	12 82       	std	Z+2, r1	; 0x02
    5942:	a0 91 5b 05 	lds	r26, 0x055B	; 0x80055b <__flp>
    5946:	b0 91 5c 05 	lds	r27, 0x055C	; 0x80055c <__flp+0x1>
    594a:	10 97       	sbiw	r26, 0x00	; 0
    594c:	81 f4       	brne	.+32     	; 0x596e <free+0x3e>
    594e:	20 81       	ld	r18, Z
    5950:	31 81       	ldd	r19, Z+1	; 0x01
    5952:	82 0f       	add	r24, r18
    5954:	93 1f       	adc	r25, r19
    5956:	20 91 59 05 	lds	r18, 0x0559	; 0x800559 <__brkval>
    595a:	30 91 5a 05 	lds	r19, 0x055A	; 0x80055a <__brkval+0x1>
    595e:	28 17       	cp	r18, r24
    5960:	39 07       	cpc	r19, r25
    5962:	51 f5       	brne	.+84     	; 0x59b8 <free+0x88>
    5964:	f0 93 5a 05 	sts	0x055A, r31	; 0x80055a <__brkval+0x1>
    5968:	e0 93 59 05 	sts	0x0559, r30	; 0x800559 <__brkval>
    596c:	67 c0       	rjmp	.+206    	; 0x5a3c <free+0x10c>
    596e:	ed 01       	movw	r28, r26
    5970:	20 e0       	ldi	r18, 0x00	; 0
    5972:	30 e0       	ldi	r19, 0x00	; 0
    5974:	ce 17       	cp	r28, r30
    5976:	df 07       	cpc	r29, r31
    5978:	40 f4       	brcc	.+16     	; 0x598a <free+0x5a>
    597a:	4a 81       	ldd	r20, Y+2	; 0x02
    597c:	5b 81       	ldd	r21, Y+3	; 0x03
    597e:	9e 01       	movw	r18, r28
    5980:	41 15       	cp	r20, r1
    5982:	51 05       	cpc	r21, r1
    5984:	f1 f0       	breq	.+60     	; 0x59c2 <free+0x92>
    5986:	ea 01       	movw	r28, r20
    5988:	f5 cf       	rjmp	.-22     	; 0x5974 <free+0x44>
    598a:	d3 83       	std	Z+3, r29	; 0x03
    598c:	c2 83       	std	Z+2, r28	; 0x02
    598e:	40 81       	ld	r20, Z
    5990:	51 81       	ldd	r21, Z+1	; 0x01
    5992:	84 0f       	add	r24, r20
    5994:	95 1f       	adc	r25, r21
    5996:	c8 17       	cp	r28, r24
    5998:	d9 07       	cpc	r29, r25
    599a:	59 f4       	brne	.+22     	; 0x59b2 <free+0x82>
    599c:	88 81       	ld	r24, Y
    599e:	99 81       	ldd	r25, Y+1	; 0x01
    59a0:	84 0f       	add	r24, r20
    59a2:	95 1f       	adc	r25, r21
    59a4:	02 96       	adiw	r24, 0x02	; 2
    59a6:	91 83       	std	Z+1, r25	; 0x01
    59a8:	80 83       	st	Z, r24
    59aa:	8a 81       	ldd	r24, Y+2	; 0x02
    59ac:	9b 81       	ldd	r25, Y+3	; 0x03
    59ae:	93 83       	std	Z+3, r25	; 0x03
    59b0:	82 83       	std	Z+2, r24	; 0x02
    59b2:	21 15       	cp	r18, r1
    59b4:	31 05       	cpc	r19, r1
    59b6:	29 f4       	brne	.+10     	; 0x59c2 <free+0x92>
    59b8:	f0 93 5c 05 	sts	0x055C, r31	; 0x80055c <__flp+0x1>
    59bc:	e0 93 5b 05 	sts	0x055B, r30	; 0x80055b <__flp>
    59c0:	3d c0       	rjmp	.+122    	; 0x5a3c <free+0x10c>
    59c2:	e9 01       	movw	r28, r18
    59c4:	fb 83       	std	Y+3, r31	; 0x03
    59c6:	ea 83       	std	Y+2, r30	; 0x02
    59c8:	49 91       	ld	r20, Y+
    59ca:	59 91       	ld	r21, Y+
    59cc:	c4 0f       	add	r28, r20
    59ce:	d5 1f       	adc	r29, r21
    59d0:	ec 17       	cp	r30, r28
    59d2:	fd 07       	cpc	r31, r29
    59d4:	61 f4       	brne	.+24     	; 0x59ee <free+0xbe>
    59d6:	80 81       	ld	r24, Z
    59d8:	91 81       	ldd	r25, Z+1	; 0x01
    59da:	84 0f       	add	r24, r20
    59dc:	95 1f       	adc	r25, r21
    59de:	02 96       	adiw	r24, 0x02	; 2
    59e0:	e9 01       	movw	r28, r18
    59e2:	99 83       	std	Y+1, r25	; 0x01
    59e4:	88 83       	st	Y, r24
    59e6:	82 81       	ldd	r24, Z+2	; 0x02
    59e8:	93 81       	ldd	r25, Z+3	; 0x03
    59ea:	9b 83       	std	Y+3, r25	; 0x03
    59ec:	8a 83       	std	Y+2, r24	; 0x02
    59ee:	e0 e0       	ldi	r30, 0x00	; 0
    59f0:	f0 e0       	ldi	r31, 0x00	; 0
    59f2:	12 96       	adiw	r26, 0x02	; 2
    59f4:	8d 91       	ld	r24, X+
    59f6:	9c 91       	ld	r25, X
    59f8:	13 97       	sbiw	r26, 0x03	; 3
    59fa:	00 97       	sbiw	r24, 0x00	; 0
    59fc:	19 f0       	breq	.+6      	; 0x5a04 <free+0xd4>
    59fe:	fd 01       	movw	r30, r26
    5a00:	dc 01       	movw	r26, r24
    5a02:	f7 cf       	rjmp	.-18     	; 0x59f2 <free+0xc2>
    5a04:	8d 91       	ld	r24, X+
    5a06:	9c 91       	ld	r25, X
    5a08:	11 97       	sbiw	r26, 0x01	; 1
    5a0a:	9d 01       	movw	r18, r26
    5a0c:	2e 5f       	subi	r18, 0xFE	; 254
    5a0e:	3f 4f       	sbci	r19, 0xFF	; 255
    5a10:	82 0f       	add	r24, r18
    5a12:	93 1f       	adc	r25, r19
    5a14:	20 91 59 05 	lds	r18, 0x0559	; 0x800559 <__brkval>
    5a18:	30 91 5a 05 	lds	r19, 0x055A	; 0x80055a <__brkval+0x1>
    5a1c:	28 17       	cp	r18, r24
    5a1e:	39 07       	cpc	r19, r25
    5a20:	69 f4       	brne	.+26     	; 0x5a3c <free+0x10c>
    5a22:	30 97       	sbiw	r30, 0x00	; 0
    5a24:	29 f4       	brne	.+10     	; 0x5a30 <free+0x100>
    5a26:	10 92 5c 05 	sts	0x055C, r1	; 0x80055c <__flp+0x1>
    5a2a:	10 92 5b 05 	sts	0x055B, r1	; 0x80055b <__flp>
    5a2e:	02 c0       	rjmp	.+4      	; 0x5a34 <free+0x104>
    5a30:	13 82       	std	Z+3, r1	; 0x03
    5a32:	12 82       	std	Z+2, r1	; 0x02
    5a34:	b0 93 5a 05 	sts	0x055A, r27	; 0x80055a <__brkval+0x1>
    5a38:	a0 93 59 05 	sts	0x0559, r26	; 0x800559 <__brkval>
    5a3c:	df 91       	pop	r29
    5a3e:	cf 91       	pop	r28
    5a40:	08 95       	ret

00005a42 <do_rand>:
    5a42:	8f 92       	push	r8
    5a44:	9f 92       	push	r9
    5a46:	af 92       	push	r10
    5a48:	bf 92       	push	r11
    5a4a:	cf 92       	push	r12
    5a4c:	df 92       	push	r13
    5a4e:	ef 92       	push	r14
    5a50:	ff 92       	push	r15
    5a52:	cf 93       	push	r28
    5a54:	df 93       	push	r29
    5a56:	ec 01       	movw	r28, r24
    5a58:	68 81       	ld	r22, Y
    5a5a:	79 81       	ldd	r23, Y+1	; 0x01
    5a5c:	8a 81       	ldd	r24, Y+2	; 0x02
    5a5e:	9b 81       	ldd	r25, Y+3	; 0x03
    5a60:	61 15       	cp	r22, r1
    5a62:	71 05       	cpc	r23, r1
    5a64:	81 05       	cpc	r24, r1
    5a66:	91 05       	cpc	r25, r1
    5a68:	21 f4       	brne	.+8      	; 0x5a72 <do_rand+0x30>
    5a6a:	64 e2       	ldi	r22, 0x24	; 36
    5a6c:	79 ed       	ldi	r23, 0xD9	; 217
    5a6e:	8b e5       	ldi	r24, 0x5B	; 91
    5a70:	97 e0       	ldi	r25, 0x07	; 7
    5a72:	2d e1       	ldi	r18, 0x1D	; 29
    5a74:	33 ef       	ldi	r19, 0xF3	; 243
    5a76:	41 e0       	ldi	r20, 0x01	; 1
    5a78:	50 e0       	ldi	r21, 0x00	; 0
    5a7a:	6f d0       	rcall	.+222    	; 0x5b5a <__divmodsi4>
    5a7c:	49 01       	movw	r8, r18
    5a7e:	5a 01       	movw	r10, r20
    5a80:	9b 01       	movw	r18, r22
    5a82:	ac 01       	movw	r20, r24
    5a84:	a7 ea       	ldi	r26, 0xA7	; 167
    5a86:	b1 e4       	ldi	r27, 0x41	; 65
    5a88:	84 d0       	rcall	.+264    	; 0x5b92 <__muluhisi3>
    5a8a:	6b 01       	movw	r12, r22
    5a8c:	7c 01       	movw	r14, r24
    5a8e:	ac ee       	ldi	r26, 0xEC	; 236
    5a90:	b4 ef       	ldi	r27, 0xF4	; 244
    5a92:	a5 01       	movw	r20, r10
    5a94:	94 01       	movw	r18, r8
    5a96:	89 d0       	rcall	.+274    	; 0x5baa <__mulohisi3>
    5a98:	dc 01       	movw	r26, r24
    5a9a:	cb 01       	movw	r24, r22
    5a9c:	8c 0d       	add	r24, r12
    5a9e:	9d 1d       	adc	r25, r13
    5aa0:	ae 1d       	adc	r26, r14
    5aa2:	bf 1d       	adc	r27, r15
    5aa4:	b7 ff       	sbrs	r27, 7
    5aa6:	03 c0       	rjmp	.+6      	; 0x5aae <do_rand+0x6c>
    5aa8:	01 97       	sbiw	r24, 0x01	; 1
    5aaa:	a1 09       	sbc	r26, r1
    5aac:	b0 48       	sbci	r27, 0x80	; 128
    5aae:	88 83       	st	Y, r24
    5ab0:	99 83       	std	Y+1, r25	; 0x01
    5ab2:	aa 83       	std	Y+2, r26	; 0x02
    5ab4:	bb 83       	std	Y+3, r27	; 0x03
    5ab6:	9f 77       	andi	r25, 0x7F	; 127
    5ab8:	df 91       	pop	r29
    5aba:	cf 91       	pop	r28
    5abc:	ff 90       	pop	r15
    5abe:	ef 90       	pop	r14
    5ac0:	df 90       	pop	r13
    5ac2:	cf 90       	pop	r12
    5ac4:	bf 90       	pop	r11
    5ac6:	af 90       	pop	r10
    5ac8:	9f 90       	pop	r9
    5aca:	8f 90       	pop	r8
    5acc:	08 95       	ret

00005ace <rand_r>:
    5ace:	b9 cf       	rjmp	.-142    	; 0x5a42 <do_rand>

00005ad0 <rand>:
    5ad0:	86 e0       	ldi	r24, 0x06	; 6
    5ad2:	91 e0       	ldi	r25, 0x01	; 1
    5ad4:	b6 cf       	rjmp	.-148    	; 0x5a42 <do_rand>

00005ad6 <srand>:
    5ad6:	a0 e0       	ldi	r26, 0x00	; 0
    5ad8:	b0 e0       	ldi	r27, 0x00	; 0
    5ada:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <next>
    5ade:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <next+0x1>
    5ae2:	a0 93 08 01 	sts	0x0108, r26	; 0x800108 <next+0x2>
    5ae6:	b0 93 09 01 	sts	0x0109, r27	; 0x800109 <next+0x3>
    5aea:	08 95       	ret

00005aec <memcpy_P>:
    5aec:	fb 01       	movw	r30, r22
    5aee:	dc 01       	movw	r26, r24
    5af0:	02 c0       	rjmp	.+4      	; 0x5af6 <memcpy_P+0xa>
    5af2:	05 90       	lpm	r0, Z+
    5af4:	0d 92       	st	X+, r0
    5af6:	41 50       	subi	r20, 0x01	; 1
    5af8:	50 40       	sbci	r21, 0x00	; 0
    5afa:	d8 f7       	brcc	.-10     	; 0x5af2 <memcpy_P+0x6>
    5afc:	08 95       	ret

00005afe <memcmp>:
    5afe:	fb 01       	movw	r30, r22
    5b00:	dc 01       	movw	r26, r24
    5b02:	04 c0       	rjmp	.+8      	; 0x5b0c <memcmp+0xe>
    5b04:	8d 91       	ld	r24, X+
    5b06:	01 90       	ld	r0, Z+
    5b08:	80 19       	sub	r24, r0
    5b0a:	21 f4       	brne	.+8      	; 0x5b14 <memcmp+0x16>
    5b0c:	41 50       	subi	r20, 0x01	; 1
    5b0e:	50 40       	sbci	r21, 0x00	; 0
    5b10:	c8 f7       	brcc	.-14     	; 0x5b04 <memcmp+0x6>
    5b12:	88 1b       	sub	r24, r24
    5b14:	99 0b       	sbc	r25, r25
    5b16:	08 95       	ret

00005b18 <memcpy>:
    5b18:	fb 01       	movw	r30, r22
    5b1a:	dc 01       	movw	r26, r24
    5b1c:	02 c0       	rjmp	.+4      	; 0x5b22 <memcpy+0xa>
    5b1e:	01 90       	ld	r0, Z+
    5b20:	0d 92       	st	X+, r0
    5b22:	41 50       	subi	r20, 0x01	; 1
    5b24:	50 40       	sbci	r21, 0x00	; 0
    5b26:	d8 f7       	brcc	.-10     	; 0x5b1e <memcpy+0x6>
    5b28:	08 95       	ret

00005b2a <memmove>:
    5b2a:	68 17       	cp	r22, r24
    5b2c:	79 07       	cpc	r23, r25
    5b2e:	68 f4       	brcc	.+26     	; 0x5b4a <memmove+0x20>
    5b30:	fb 01       	movw	r30, r22
    5b32:	dc 01       	movw	r26, r24
    5b34:	e4 0f       	add	r30, r20
    5b36:	f5 1f       	adc	r31, r21
    5b38:	a4 0f       	add	r26, r20
    5b3a:	b5 1f       	adc	r27, r21
    5b3c:	02 c0       	rjmp	.+4      	; 0x5b42 <memmove+0x18>
    5b3e:	02 90       	ld	r0, -Z
    5b40:	0e 92       	st	-X, r0
    5b42:	41 50       	subi	r20, 0x01	; 1
    5b44:	50 40       	sbci	r21, 0x00	; 0
    5b46:	d8 f7       	brcc	.-10     	; 0x5b3e <memmove+0x14>
    5b48:	08 95       	ret
    5b4a:	e6 cf       	rjmp	.-52     	; 0x5b18 <memcpy>

00005b4c <memset>:
    5b4c:	dc 01       	movw	r26, r24
    5b4e:	01 c0       	rjmp	.+2      	; 0x5b52 <memset+0x6>
    5b50:	6d 93       	st	X+, r22
    5b52:	41 50       	subi	r20, 0x01	; 1
    5b54:	50 40       	sbci	r21, 0x00	; 0
    5b56:	e0 f7       	brcc	.-8      	; 0x5b50 <memset+0x4>
    5b58:	08 95       	ret

00005b5a <__divmodsi4>:
    5b5a:	05 2e       	mov	r0, r21
    5b5c:	97 fb       	bst	r25, 7
    5b5e:	16 f4       	brtc	.+4      	; 0x5b64 <__divmodsi4+0xa>
    5b60:	00 94       	com	r0
    5b62:	0f d0       	rcall	.+30     	; 0x5b82 <__negsi2>
    5b64:	57 fd       	sbrc	r21, 7
    5b66:	05 d0       	rcall	.+10     	; 0x5b72 <__divmodsi4_neg2>
    5b68:	24 d0       	rcall	.+72     	; 0x5bb2 <__udivmodsi4>
    5b6a:	07 fc       	sbrc	r0, 7
    5b6c:	02 d0       	rcall	.+4      	; 0x5b72 <__divmodsi4_neg2>
    5b6e:	46 f4       	brtc	.+16     	; 0x5b80 <__divmodsi4_exit>
    5b70:	08 c0       	rjmp	.+16     	; 0x5b82 <__negsi2>

00005b72 <__divmodsi4_neg2>:
    5b72:	50 95       	com	r21
    5b74:	40 95       	com	r20
    5b76:	30 95       	com	r19
    5b78:	21 95       	neg	r18
    5b7a:	3f 4f       	sbci	r19, 0xFF	; 255
    5b7c:	4f 4f       	sbci	r20, 0xFF	; 255
    5b7e:	5f 4f       	sbci	r21, 0xFF	; 255

00005b80 <__divmodsi4_exit>:
    5b80:	08 95       	ret

00005b82 <__negsi2>:
    5b82:	90 95       	com	r25
    5b84:	80 95       	com	r24
    5b86:	70 95       	com	r23
    5b88:	61 95       	neg	r22
    5b8a:	7f 4f       	sbci	r23, 0xFF	; 255
    5b8c:	8f 4f       	sbci	r24, 0xFF	; 255
    5b8e:	9f 4f       	sbci	r25, 0xFF	; 255
    5b90:	08 95       	ret

00005b92 <__muluhisi3>:
    5b92:	31 d0       	rcall	.+98     	; 0x5bf6 <__umulhisi3>
    5b94:	a5 9f       	mul	r26, r21
    5b96:	90 0d       	add	r25, r0
    5b98:	b4 9f       	mul	r27, r20
    5b9a:	90 0d       	add	r25, r0
    5b9c:	a4 9f       	mul	r26, r20
    5b9e:	80 0d       	add	r24, r0
    5ba0:	91 1d       	adc	r25, r1
    5ba2:	11 24       	eor	r1, r1
    5ba4:	08 95       	ret

00005ba6 <__mulshisi3>:
    5ba6:	b7 ff       	sbrs	r27, 7
    5ba8:	f4 cf       	rjmp	.-24     	; 0x5b92 <__muluhisi3>

00005baa <__mulohisi3>:
    5baa:	f3 df       	rcall	.-26     	; 0x5b92 <__muluhisi3>
    5bac:	82 1b       	sub	r24, r18
    5bae:	93 0b       	sbc	r25, r19
    5bb0:	08 95       	ret

00005bb2 <__udivmodsi4>:
    5bb2:	a1 e2       	ldi	r26, 0x21	; 33
    5bb4:	1a 2e       	mov	r1, r26
    5bb6:	aa 1b       	sub	r26, r26
    5bb8:	bb 1b       	sub	r27, r27
    5bba:	fd 01       	movw	r30, r26
    5bbc:	0d c0       	rjmp	.+26     	; 0x5bd8 <__udivmodsi4_ep>

00005bbe <__udivmodsi4_loop>:
    5bbe:	aa 1f       	adc	r26, r26
    5bc0:	bb 1f       	adc	r27, r27
    5bc2:	ee 1f       	adc	r30, r30
    5bc4:	ff 1f       	adc	r31, r31
    5bc6:	a2 17       	cp	r26, r18
    5bc8:	b3 07       	cpc	r27, r19
    5bca:	e4 07       	cpc	r30, r20
    5bcc:	f5 07       	cpc	r31, r21
    5bce:	20 f0       	brcs	.+8      	; 0x5bd8 <__udivmodsi4_ep>
    5bd0:	a2 1b       	sub	r26, r18
    5bd2:	b3 0b       	sbc	r27, r19
    5bd4:	e4 0b       	sbc	r30, r20
    5bd6:	f5 0b       	sbc	r31, r21

00005bd8 <__udivmodsi4_ep>:
    5bd8:	66 1f       	adc	r22, r22
    5bda:	77 1f       	adc	r23, r23
    5bdc:	88 1f       	adc	r24, r24
    5bde:	99 1f       	adc	r25, r25
    5be0:	1a 94       	dec	r1
    5be2:	69 f7       	brne	.-38     	; 0x5bbe <__udivmodsi4_loop>
    5be4:	60 95       	com	r22
    5be6:	70 95       	com	r23
    5be8:	80 95       	com	r24
    5bea:	90 95       	com	r25
    5bec:	9b 01       	movw	r18, r22
    5bee:	ac 01       	movw	r20, r24
    5bf0:	bd 01       	movw	r22, r26
    5bf2:	cf 01       	movw	r24, r30
    5bf4:	08 95       	ret

00005bf6 <__umulhisi3>:
    5bf6:	a2 9f       	mul	r26, r18
    5bf8:	b0 01       	movw	r22, r0
    5bfa:	b3 9f       	mul	r27, r19
    5bfc:	c0 01       	movw	r24, r0
    5bfe:	a3 9f       	mul	r26, r19
    5c00:	70 0d       	add	r23, r0
    5c02:	81 1d       	adc	r24, r1
    5c04:	11 24       	eor	r1, r1
    5c06:	91 1d       	adc	r25, r1
    5c08:	b2 9f       	mul	r27, r18
    5c0a:	70 0d       	add	r23, r0
    5c0c:	81 1d       	adc	r24, r1
    5c0e:	11 24       	eor	r1, r1
    5c10:	91 1d       	adc	r25, r1
    5c12:	08 95       	ret

00005c14 <_exit>:
    5c14:	f8 94       	cli

00005c16 <__stop_program>:
    5c16:	ff cf       	rjmp	.-2      	; 0x5c16 <__stop_program>
