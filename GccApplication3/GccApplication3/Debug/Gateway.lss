
Gateway.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000001ae  00800100  00003548  000035dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00003548  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000008  008002ae  008002ae  0000378a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000378a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000037bc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000420  00000000  00000000  000037fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000a104  00000000  00000000  00003c1c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000196d  00000000  00000000  0000dd20  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00002d21  00000000  00000000  0000f68d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000013f8  00000000  00000000  000123b0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00001202  00000000  00000000  000137a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000732a  00000000  00000000  000149aa  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000003f0  00000000  00000000  0001bcd4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	d9 c0       	rjmp	.+434    	; 0x1b4 <__ctors_end>
       2:	00 00       	nop
       4:	f6 c0       	rjmp	.+492    	; 0x1f2 <__bad_interrupt>
       6:	00 00       	nop
       8:	f4 c0       	rjmp	.+488    	; 0x1f2 <__bad_interrupt>
       a:	00 00       	nop
       c:	f2 c0       	rjmp	.+484    	; 0x1f2 <__bad_interrupt>
       e:	00 00       	nop
      10:	f0 c0       	rjmp	.+480    	; 0x1f2 <__bad_interrupt>
      12:	00 00       	nop
      14:	ee c0       	rjmp	.+476    	; 0x1f2 <__bad_interrupt>
      16:	00 00       	nop
      18:	ec c0       	rjmp	.+472    	; 0x1f2 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	ea c0       	rjmp	.+468    	; 0x1f2 <__bad_interrupt>
      1e:	00 00       	nop
      20:	e8 c0       	rjmp	.+464    	; 0x1f2 <__bad_interrupt>
      22:	00 00       	nop
      24:	e6 c0       	rjmp	.+460    	; 0x1f2 <__bad_interrupt>
      26:	00 00       	nop
      28:	e4 c0       	rjmp	.+456    	; 0x1f2 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	e2 c0       	rjmp	.+452    	; 0x1f2 <__bad_interrupt>
      2e:	00 00       	nop
      30:	e0 c0       	rjmp	.+448    	; 0x1f2 <__bad_interrupt>
      32:	00 00       	nop
      34:	de c0       	rjmp	.+444    	; 0x1f2 <__bad_interrupt>
      36:	00 00       	nop
      38:	dc c0       	rjmp	.+440    	; 0x1f2 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	da c0       	rjmp	.+436    	; 0x1f2 <__bad_interrupt>
      3e:	00 00       	nop
      40:	d8 c0       	rjmp	.+432    	; 0x1f2 <__bad_interrupt>
      42:	00 00       	nop
      44:	d6 c0       	rjmp	.+428    	; 0x1f2 <__bad_interrupt>
      46:	00 00       	nop
      48:	d4 c0       	rjmp	.+424    	; 0x1f2 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	d2 c0       	rjmp	.+420    	; 0x1f2 <__bad_interrupt>
      4e:	00 00       	nop
      50:	d0 c0       	rjmp	.+416    	; 0x1f2 <__bad_interrupt>
      52:	00 00       	nop
      54:	ce c0       	rjmp	.+412    	; 0x1f2 <__bad_interrupt>
      56:	00 00       	nop
      58:	cc c0       	rjmp	.+408    	; 0x1f2 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	ca c0       	rjmp	.+404    	; 0x1f2 <__bad_interrupt>
      5e:	00 00       	nop
      60:	c8 c0       	rjmp	.+400    	; 0x1f2 <__bad_interrupt>
      62:	00 00       	nop
      64:	c6 c0       	rjmp	.+396    	; 0x1f2 <__bad_interrupt>
      66:	00 00       	nop
      68:	c4 c0       	rjmp	.+392    	; 0x1f2 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	c2 c0       	rjmp	.+388    	; 0x1f2 <__bad_interrupt>
      6e:	00 00       	nop
      70:	c0 c0       	rjmp	.+384    	; 0x1f2 <__bad_interrupt>
      72:	00 00       	nop
      74:	be c0       	rjmp	.+380    	; 0x1f2 <__bad_interrupt>
      76:	00 00       	nop
      78:	bc c0       	rjmp	.+376    	; 0x1f2 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	ba c0       	rjmp	.+372    	; 0x1f2 <__bad_interrupt>
      7e:	00 00       	nop
      80:	b8 c0       	rjmp	.+368    	; 0x1f2 <__bad_interrupt>
      82:	00 00       	nop
      84:	b6 c0       	rjmp	.+364    	; 0x1f2 <__bad_interrupt>
      86:	00 00       	nop
      88:	b4 c0       	rjmp	.+360    	; 0x1f2 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	b2 c0       	rjmp	.+356    	; 0x1f2 <__bad_interrupt>
      8e:	00 00       	nop
      90:	b0 c0       	rjmp	.+352    	; 0x1f2 <__bad_interrupt>
	...

00000094 <__trampolines_end>:
      94:	67 e6       	ldi	r22, 0x67	; 103
      96:	09 6a       	ori	r16, 0xA9	; 169
      98:	85 ae       	std	Z+61, r8	; 0x3d
      9a:	67 bb       	out	0x17, r22	; 23
      9c:	72 f3       	brmi	.-36     	; 0x7a <__SREG__+0x3b>
      9e:	6e 3c       	cpi	r22, 0xCE	; 206
      a0:	3a f5       	brpl	.+78     	; 0xf0 <k+0x3c>
      a2:	4f a5       	ldd	r20, Y+47	; 0x2f
      a4:	7f 52       	subi	r23, 0x2F	; 47
      a6:	0e 51       	subi	r16, 0x1E	; 30
      a8:	8c 68       	ori	r24, 0x8C	; 140
      aa:	05 9b       	sbis	0x00, 5	; 0
      ac:	ab d9       	rcall	.-3242   	; 0xfffff404 <__eeprom_end+0xff7ef404>
      ae:	83 1f       	adc	r24, r19
      b0:	19 cd       	rjmp	.-1486   	; 0xfffffae4 <__eeprom_end+0xff7efae4>
      b2:	e0 5b       	subi	r30, 0xB0	; 176

000000b4 <k>:
      b4:	98 2f 8a 42 91 44 37 71 cf fb c0 b5 a5 db b5 e9     ./.B.D7q........
      c4:	5b c2 56 39 f1 11 f1 59 a4 82 3f 92 d5 5e 1c ab     [.V9...Y..?..^..
      d4:	98 aa 07 d8 01 5b 83 12 be 85 31 24 c3 7d 0c 55     .....[....1$.}.U
      e4:	74 5d be 72 fe b1 de 80 a7 06 dc 9b 74 f1 9b c1     t].r........t...
      f4:	c1 69 9b e4 86 47 be ef c6 9d c1 0f cc a1 0c 24     .i...G.........$
     104:	6f 2c e9 2d aa 84 74 4a dc a9 b0 5c da 88 f9 76     o,.-..tJ...\...v
     114:	52 51 3e 98 6d c6 31 a8 c8 27 03 b0 c7 7f 59 bf     RQ>.m.1..'....Y.
     124:	f3 0b e0 c6 47 91 a7 d5 51 63 ca 06 67 29 29 14     ....G...Qc..g)).
     134:	85 0a b7 27 38 21 1b 2e fc 6d 2c 4d 13 0d 38 53     ...'8!...m,M..8S
     144:	54 73 0a 65 bb 0a 6a 76 2e c9 c2 81 85 2c 72 92     Ts.e..jv.....,r.
     154:	a1 e8 bf a2 4b 66 1a a8 70 8b 4b c2 a3 51 6c c7     ....Kf..p.K..Ql.
     164:	19 e8 92 d1 24 06 99 d6 85 35 0e f4 70 a0 6a 10     ....$....5..p.j.
     174:	16 c1 a4 19 08 6c 37 1e 4c 77 48 27 b5 bc b0 34     .....l7.LwH'...4
     184:	b3 0c 1c 39 4a aa d8 4e 4f ca 9c 5b f3 6f 2e 68     ...9J..NO..[.o.h
     194:	ee 82 8f 74 6f 63 a5 78 14 78 c8 84 08 02 c7 8c     ...toc.x.x......
     1a4:	fa ff be 90 eb 6c 50 a4 f7 a3 f9 be f2 78 71 c6     .....lP......xq.

000001b4 <__ctors_end>:
     1b4:	11 24       	eor	r1, r1
     1b6:	1f be       	out	0x3f, r1	; 63
     1b8:	cf ef       	ldi	r28, 0xFF	; 255
     1ba:	d0 e1       	ldi	r29, 0x10	; 16
     1bc:	de bf       	out	0x3e, r29	; 62
     1be:	cd bf       	out	0x3d, r28	; 61

000001c0 <__do_copy_data>:
     1c0:	12 e0       	ldi	r17, 0x02	; 2
     1c2:	a0 e0       	ldi	r26, 0x00	; 0
     1c4:	b1 e0       	ldi	r27, 0x01	; 1
     1c6:	e8 e4       	ldi	r30, 0x48	; 72
     1c8:	f5 e3       	ldi	r31, 0x35	; 53
     1ca:	00 e0       	ldi	r16, 0x00	; 0
     1cc:	0b bf       	out	0x3b, r16	; 59
     1ce:	02 c0       	rjmp	.+4      	; 0x1d4 <__do_copy_data+0x14>
     1d0:	07 90       	elpm	r0, Z+
     1d2:	0d 92       	st	X+, r0
     1d4:	ae 3a       	cpi	r26, 0xAE	; 174
     1d6:	b1 07       	cpc	r27, r17
     1d8:	d9 f7       	brne	.-10     	; 0x1d0 <__do_copy_data+0x10>

000001da <__do_clear_bss>:
     1da:	22 e0       	ldi	r18, 0x02	; 2
     1dc:	ae ea       	ldi	r26, 0xAE	; 174
     1de:	b2 e0       	ldi	r27, 0x02	; 2
     1e0:	01 c0       	rjmp	.+2      	; 0x1e4 <.do_clear_bss_start>

000001e2 <.do_clear_bss_loop>:
     1e2:	1d 92       	st	X+, r1

000001e4 <.do_clear_bss_start>:
     1e4:	a6 3b       	cpi	r26, 0xB6	; 182
     1e6:	b2 07       	cpc	r27, r18
     1e8:	e1 f7       	brne	.-8      	; 0x1e2 <.do_clear_bss_loop>
     1ea:	0e 94 07 12 	call	0x240e	; 0x240e <main>
     1ee:	0c 94 a2 1a 	jmp	0x3544	; 0x3544 <_exit>

000001f2 <__bad_interrupt>:
     1f2:	06 cf       	rjmp	.-500    	; 0x0 <__vectors>

000001f4 <can_init>:
void can_init_mask (uint8_t mask){
	CANIDM1 = mask << 5;
	CANIDM2 = mask >> 3;
	// RTRMSK = 0 : We don't use remote frames ever.
	// IDEMSK = 0 : we don't use the extended format.
	CANIDM4 = (0 << RTRMSK) | (0 << IDEMSK);
     1f4:	cf 93       	push	r28
     1f6:	df 93       	push	r29
     1f8:	f8 94       	cli
     1fa:	81 e0       	ldi	r24, 0x01	; 1
     1fc:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
     200:	84 e3       	ldi	r24, 0x34	; 52
     202:	80 93 db 00 	sts	0x00DB, r24	; 0x8000db <__TEXT_REGION_LENGTH__+0x7e00db>
     206:	10 92 da 00 	sts	0x00DA, r1	; 0x8000da <__TEXT_REGION_LENGTH__+0x7e00da>
     20a:	80 e0       	ldi	r24, 0x00	; 0
     20c:	cd ee       	ldi	r28, 0xED	; 237
     20e:	d0 e0       	ldi	r29, 0x00	; 0
     210:	af ee       	ldi	r26, 0xEF	; 239
     212:	b0 e0       	ldi	r27, 0x00	; 0
     214:	ee ee       	ldi	r30, 0xEE	; 238
     216:	f0 e0       	ldi	r31, 0x00	; 0
     218:	98 2f       	mov	r25, r24
     21a:	92 95       	swap	r25
     21c:	90 7f       	andi	r25, 0xF0	; 240
     21e:	98 83       	st	Y, r25
     220:	1c 92       	st	X, r1
     222:	10 82       	st	Z, r1
     224:	8f 5f       	subi	r24, 0xFF	; 255
     226:	8f 30       	cpi	r24, 0x0F	; 15
     228:	b9 f7       	brne	.-18     	; 0x218 <can_init+0x24>
     22a:	86 e0       	ldi	r24, 0x06	; 6
     22c:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
     230:	8c e0       	ldi	r24, 0x0C	; 12
     232:	80 93 e3 00 	sts	0x00E3, r24	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7e00e3>
     236:	87 e3       	ldi	r24, 0x37	; 55
     238:	80 93 e4 00 	sts	0x00E4, r24	; 0x8000e4 <__TEXT_REGION_LENGTH__+0x7e00e4>
     23c:	10 92 e5 00 	sts	0x00E5, r1	; 0x8000e5 <__TEXT_REGION_LENGTH__+0x7e00e5>
     240:	82 e0       	ldi	r24, 0x02	; 2
     242:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
     246:	78 94       	sei
     248:	df 91       	pop	r29
     24a:	cf 91       	pop	r28
     24c:	08 95       	ret

0000024e <can_get_message>:
     24e:	fb 01       	movw	r30, r22
     250:	82 95       	swap	r24
     252:	80 7f       	andi	r24, 0xF0	; 240
     254:	80 93 ed 00 	sts	0x00ED, r24	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7e00ed>
     258:	9b 01       	movw	r18, r22
     25a:	28 5f       	subi	r18, 0xF8	; 248
     25c:	3f 4f       	sbci	r19, 0xFF	; 255
     25e:	aa ef       	ldi	r26, 0xFA	; 250
     260:	b0 e0       	ldi	r27, 0x00	; 0
     262:	8c 91       	ld	r24, X
     264:	81 93       	st	Z+, r24
     266:	2e 17       	cp	r18, r30
     268:	3f 07       	cpc	r19, r31
     26a:	d9 f7       	brne	.-10     	; 0x262 <can_get_message+0x14>
     26c:	08 95       	ret

0000026e <can_get_frame_buffer>:
     26e:	0f 93       	push	r16
     270:	1f 93       	push	r17
     272:	cf 93       	push	r28
     274:	8c 01       	movw	r16, r24
     276:	c0 e0       	ldi	r28, 0x00	; 0
     278:	b8 01       	movw	r22, r16
     27a:	8c 2f       	mov	r24, r28
     27c:	e8 df       	rcall	.-48     	; 0x24e <can_get_message>
     27e:	08 5f       	subi	r16, 0xF8	; 248
     280:	1f 4f       	sbci	r17, 0xFF	; 255
     282:	cf 5f       	subi	r28, 0xFF	; 255
     284:	c8 30       	cpi	r28, 0x08	; 8
     286:	c1 f7       	brne	.-16     	; 0x278 <can_get_frame_buffer+0xa>
     288:	cf 91       	pop	r28
     28a:	1f 91       	pop	r17
     28c:	0f 91       	pop	r16
     28e:	08 95       	ret

00000290 <can_get_id>:
     290:	82 95       	swap	r24
     292:	80 7f       	andi	r24, 0xF0	; 240
     294:	80 93 ed 00 	sts	0x00ED, r24	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7e00ed>
     298:	90 91 f2 00 	lds	r25, 0x00F2	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7e00f2>
     29c:	e3 ef       	ldi	r30, 0xF3	; 243
     29e:	f0 e0       	ldi	r31, 0x00	; 0
     2a0:	80 81       	ld	r24, Z
     2a2:	92 95       	swap	r25
     2a4:	96 95       	lsr	r25
     2a6:	97 70       	andi	r25, 0x07	; 7
     2a8:	88 0f       	add	r24, r24
     2aa:	88 0f       	add	r24, r24
     2ac:	88 0f       	add	r24, r24
     2ae:	89 2b       	or	r24, r25
     2b0:	db 01       	movw	r26, r22
     2b2:	8c 93       	st	X, r24
     2b4:	80 81       	ld	r24, Z
     2b6:	82 95       	swap	r24
     2b8:	86 95       	lsr	r24
     2ba:	87 70       	andi	r24, 0x07	; 7
     2bc:	11 96       	adiw	r26, 0x01	; 1
     2be:	8c 93       	st	X, r24
     2c0:	08 95       	ret

000002c2 <can_init_id>:
     2c2:	fc 01       	movw	r30, r24
     2c4:	80 81       	ld	r24, Z
     2c6:	82 95       	swap	r24
     2c8:	88 0f       	add	r24, r24
     2ca:	80 7e       	andi	r24, 0xE0	; 224
     2cc:	80 93 f2 00 	sts	0x00F2, r24	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7e00f2>
     2d0:	20 81       	ld	r18, Z
     2d2:	26 95       	lsr	r18
     2d4:	26 95       	lsr	r18
     2d6:	26 95       	lsr	r18
     2d8:	91 81       	ldd	r25, Z+1	; 0x01
     2da:	30 e2       	ldi	r19, 0x20	; 32
     2dc:	93 9f       	mul	r25, r19
     2de:	c0 01       	movw	r24, r0
     2e0:	11 24       	eor	r1, r1
     2e2:	82 2b       	or	r24, r18
     2e4:	80 93 f3 00 	sts	0x00F3, r24	; 0x8000f3 <__TEXT_REGION_LENGTH__+0x7e00f3>
     2e8:	10 92 f0 00 	sts	0x00F0, r1	; 0x8000f0 <__TEXT_REGION_LENGTH__+0x7e00f0>
     2ec:	08 95       	ret

000002ee <can_init_mask_def>:
     2ee:	8f ef       	ldi	r24, 0xFF	; 255
     2f0:	80 93 f7 00 	sts	0x00F7, r24	; 0x8000f7 <__TEXT_REGION_LENGTH__+0x7e00f7>
     2f4:	80 93 f6 00 	sts	0x00F6, r24	; 0x8000f6 <__TEXT_REGION_LENGTH__+0x7e00f6>
     2f8:	10 92 f4 00 	sts	0x00F4, r1	; 0x8000f4 <__TEXT_REGION_LENGTH__+0x7e00f4>
     2fc:	08 95       	ret

000002fe <can_init_message>:
}

void can_init_message( uint8_t *message ){
     2fe:	fc 01       	movw	r30, r24
     300:	9c 01       	movw	r18, r24
     302:	28 5f       	subi	r18, 0xF8	; 248
     304:	3f 4f       	sbci	r19, 0xFF	; 255
	uint8_t j;
	for(j=0; j<8; j++){
		CANMSG = *message;
     306:	aa ef       	ldi	r26, 0xFA	; 250
     308:	b0 e0       	ldi	r27, 0x00	; 0
     30a:	81 91       	ld	r24, Z+
     30c:	8c 93       	st	X, r24
	CANIDM4 = (0 << RTRMSK) | (0 << IDEMSK);
}

void can_init_message( uint8_t *message ){
	uint8_t j;
	for(j=0; j<8; j++){
     30e:	2e 17       	cp	r18, r30
     310:	3f 07       	cpc	r19, r31
     312:	d9 f7       	brne	.-10     	; 0x30a <can_init_message+0xc>
		CANMSG = *message;
		message++;
	}
}
     314:	08 95       	ret

00000316 <can_send_message>:

int can_send_message( uint8_t mobnr , can_id_t id, can_msg_t message ){
     316:	cf 93       	push	r28
     318:	df 93       	push	r29
     31a:	ea 01       	movw	r28, r20
	//select mob.
	CANPAGE = (mobnr << 4);
     31c:	82 95       	swap	r24
     31e:	80 7f       	andi	r24, 0xF0	; 240
     320:	80 93 ed 00 	sts	0x00ED, r24	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7e00ed>
	//copy ID.
	can_init_id(id);
     324:	cb 01       	movw	r24, r22
     326:	cd df       	rcall	.-102    	; 0x2c2 <can_init_id>
	//copy message.
	can_init_message(message);
     328:	ce 01       	movw	r24, r28
     32a:	e9 df       	rcall	.-46     	; 0x2fe <can_init_message>
	//enable transmission.
	CANCDMOB = (1 << CONMOB0) | (1 << DLC3);
     32c:	88 e4       	ldi	r24, 0x48	; 72
     32e:	80 93 ef 00 	sts	0x00EF, r24	; 0x8000ef <__TEXT_REGION_LENGTH__+0x7e00ef>
	//wait for transmission.
	while(CANSTMOB != (1 << TXOK));
     332:	ee ee       	ldi	r30, 0xEE	; 238
     334:	f0 e0       	ldi	r31, 0x00	; 0
     336:	80 81       	ld	r24, Z
     338:	80 34       	cpi	r24, 0x40	; 64
     33a:	e9 f7       	brne	.-6      	; 0x336 <can_send_message+0x20>
	//reset mob.
	CANSTMOB = 0x00;
     33c:	10 92 ee 00 	sts	0x00EE, r1	; 0x8000ee <__TEXT_REGION_LENGTH__+0x7e00ee>
	CANCDMOB = 0x00;
     340:	10 92 ef 00 	sts	0x00EF, r1	; 0x8000ef <__TEXT_REGION_LENGTH__+0x7e00ef>
	return 0;
}
     344:	80 e0       	ldi	r24, 0x00	; 0
     346:	90 e0       	ldi	r25, 0x00	; 0
     348:	df 91       	pop	r29
     34a:	cf 91       	pop	r28
     34c:	08 95       	ret

0000034e <can_receive_message>:

int can_receive_message( uint8_t mobnr, can_id_t id, uint8_t mask, can_msg_t message){
     34e:	0f 93       	push	r16
     350:	1f 93       	push	r17
     352:	cf 93       	push	r28
     354:	c8 2f       	mov	r28, r24
     356:	cb 01       	movw	r24, r22
     358:	89 01       	movw	r16, r18
	CANPAGE = (mobnr << 4);
     35a:	2c 2f       	mov	r18, r28
     35c:	22 95       	swap	r18
     35e:	20 7f       	andi	r18, 0xF0	; 240
     360:	20 93 ed 00 	sts	0x00ED, r18	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7e00ed>
	CANIE2 = (1 << mobnr);
     364:	21 e0       	ldi	r18, 0x01	; 1
     366:	30 e0       	ldi	r19, 0x00	; 0
     368:	0c 2e       	mov	r0, r28
     36a:	02 c0       	rjmp	.+4      	; 0x370 <can_receive_message+0x22>
     36c:	22 0f       	add	r18, r18
     36e:	33 1f       	adc	r19, r19
     370:	0a 94       	dec	r0
     372:	e2 f7       	brpl	.-8      	; 0x36c <can_receive_message+0x1e>
     374:	20 93 de 00 	sts	0x00DE, r18	; 0x8000de <__TEXT_REGION_LENGTH__+0x7e00de>
	can_init_id(id);
     378:	a4 df       	rcall	.-184    	; 0x2c2 <can_init_id>
	can_init_mask_def();
     37a:	b9 df       	rcall	.-142    	; 0x2ee <can_init_mask_def>
     37c:	88 e8       	ldi	r24, 0x88	; 136
	//CAN standard rev 2.0 A (identifiers length = 11 bits)
	CANCDMOB = (1 << CONMOB1) | (1 << DLC3); //enable reception and data length code = 8 bytes
     37e:	80 93 ef 00 	sts	0x00EF, r24	; 0x8000ef <__TEXT_REGION_LENGTH__+0x7e00ef>
     382:	ea ed       	ldi	r30, 0xDA	; 218
	//wait for interrupt
	while((CANGIT & INTR_MASK) != (1 << CANIT));
     384:	f0 e0       	ldi	r31, 0x00	; 0
     386:	80 81       	ld	r24, Z
     388:	88 23       	and	r24, r24
     38a:	ec f7       	brge	.-6      	; 0x386 <can_receive_message+0x38>
     38c:	80 91 ee 00 	lds	r24, 0x00EE	; 0x8000ee <__TEXT_REGION_LENGTH__+0x7e00ee>
	//check if it is the right interrupt.
	if((CANSTMOB & RXOK_MASK) != (1 << RXOK)) return 1;
     390:	85 ff       	sbrs	r24, 5
     392:	10 c0       	rjmp	.+32     	; 0x3b4 <can_receive_message+0x66>
     394:	10 92 ee 00 	sts	0x00EE, r1	; 0x8000ee <__TEXT_REGION_LENGTH__+0x7e00ee>
	//reset mob.
	CANSTMOB = 0x00;
     398:	10 92 ef 00 	sts	0x00EF, r1	; 0x8000ef <__TEXT_REGION_LENGTH__+0x7e00ef>
	CANCDMOB = 0x00;
     39c:	10 92 de 00 	sts	0x00DE, r1	; 0x8000de <__TEXT_REGION_LENGTH__+0x7e00de>
	//reset interrupt enable
	CANIE2 = 0x00;
     3a0:	ea ed       	ldi	r30, 0xDA	; 218
	//reset interrupt register.
	CANGIT = CANGIT;
     3a2:	f0 e0       	ldi	r31, 0x00	; 0
     3a4:	80 81       	ld	r24, Z
     3a6:	80 83       	st	Z, r24
     3a8:	b8 01       	movw	r22, r16
	//retrieve message.
	can_get_message(mobnr, message);
     3aa:	8c 2f       	mov	r24, r28
     3ac:	50 df       	rcall	.-352    	; 0x24e <can_get_message>
     3ae:	80 e0       	ldi	r24, 0x00	; 0
	return 0;
     3b0:	90 e0       	ldi	r25, 0x00	; 0
     3b2:	02 c0       	rjmp	.+4      	; 0x3b8 <can_receive_message+0x6a>
     3b4:	81 e0       	ldi	r24, 0x01	; 1
	//CAN standard rev 2.0 A (identifiers length = 11 bits)
	CANCDMOB = (1 << CONMOB1) | (1 << DLC3); //enable reception and data length code = 8 bytes
	//wait for interrupt
	while((CANGIT & INTR_MASK) != (1 << CANIT));
	//check if it is the right interrupt.
	if((CANSTMOB & RXOK_MASK) != (1 << RXOK)) return 1;
     3b6:	90 e0       	ldi	r25, 0x00	; 0
     3b8:	cf 91       	pop	r28
	//reset interrupt register.
	CANGIT = CANGIT;
	//retrieve message.
	can_get_message(mobnr, message);
	return 0;
}
     3ba:	1f 91       	pop	r17
     3bc:	0f 91       	pop	r16
     3be:	08 95       	ret

000003c0 <can_send_frame_buffer>:
     3c0:	0f 93       	push	r16

int can_send_frame_buffer( uint8_t *message, uint8_t buff_len ){
     3c2:	1f 93       	push	r17
     3c4:	cf 93       	push	r28
     3c6:	df 93       	push	r29
     3c8:	8c 01       	movw	r16, r24
     3ca:	c0 e0       	ldi	r28, 0x00	; 0
     3cc:	d0 e0       	ldi	r29, 0x00	; 0
	uint8_t j = buff_len;
	for(j=0; j<8; j++){
		can_send_message(j,j,message);
     3ce:	a8 01       	movw	r20, r16
     3d0:	be 01       	movw	r22, r28
     3d2:	8c 2f       	mov	r24, r28
     3d4:	a0 df       	rcall	.-192    	; 0x316 <can_send_message>
		message = message + 8;
     3d6:	08 5f       	subi	r16, 0xF8	; 248
     3d8:	1f 4f       	sbci	r17, 0xFF	; 255
     3da:	21 96       	adiw	r28, 0x01	; 1
	return 0;
}

int can_send_frame_buffer( uint8_t *message, uint8_t buff_len ){
	uint8_t j = buff_len;
	for(j=0; j<8; j++){
     3dc:	c8 30       	cpi	r28, 0x08	; 8
     3de:	d1 05       	cpc	r29, r1
     3e0:	b1 f7       	brne	.-20     	; 0x3ce <can_send_frame_buffer+0xe>
		can_send_message(j,j,message);
		message = message + 8;
	}
	return 0;
}
     3e2:	80 e0       	ldi	r24, 0x00	; 0
     3e4:	90 e0       	ldi	r25, 0x00	; 0
     3e6:	df 91       	pop	r29
     3e8:	cf 91       	pop	r28
     3ea:	1f 91       	pop	r17
     3ec:	0f 91       	pop	r16
     3ee:	08 95       	ret

000003f0 <can_receive_frame_buffer>:

int can_receive_frame_buffer( uint8_t *message , uint8_t buff_len){
     3f0:	8f 92       	push	r8
     3f2:	9f 92       	push	r9
     3f4:	af 92       	push	r10
     3f6:	bf 92       	push	r11
     3f8:	cf 92       	push	r12
     3fa:	df 92       	push	r13
     3fc:	ef 92       	push	r14
     3fe:	1f 93       	push	r17
     400:	cf 93       	push	r28
     402:	df 93       	push	r29
     404:	4c 01       	movw	r8, r24
     406:	e6 2e       	mov	r14, r22
	//Enable buffer receive interrupt.
	CANGIE |= (1 << ENBX);
     408:	eb ed       	ldi	r30, 0xDB	; 219
     40a:	f0 e0       	ldi	r31, 0x00	; 0
     40c:	80 81       	ld	r24, Z
     40e:	84 60       	ori	r24, 0x04	; 4
     410:	80 83       	st	Z, r24
     412:	c0 e0       	ldi	r28, 0x00	; 0
     414:	d0 e0       	ldi	r29, 0x00	; 0
	uint8_t j = buff_len;
	for(j=0; j<8; j++){
		CANPAGE = (j << 4);
     416:	0f 2e       	mov	r0, r31
     418:	fd ee       	ldi	r31, 0xED	; 237
     41a:	af 2e       	mov	r10, r31
     41c:	b1 2c       	mov	r11, r1
     41e:	f0 2d       	mov	r31, r0
		can_init_id(j);
		// Mask = 255
		can_init_mask_def();
		//set mob in buffer receive mode.
		CANCDMOB = (1 << CONMOB0) | (1 << CONMOB1) | (1 << DLC3);
     420:	0f 2e       	mov	r0, r31
     422:	ff ee       	ldi	r31, 0xEF	; 239
     424:	cf 2e       	mov	r12, r31
     426:	d1 2c       	mov	r13, r1
     428:	f0 2d       	mov	r31, r0
     42a:	18 ec       	ldi	r17, 0xC8	; 200
int can_receive_frame_buffer( uint8_t *message , uint8_t buff_len){
	//Enable buffer receive interrupt.
	CANGIE |= (1 << ENBX);
	uint8_t j = buff_len;
	for(j=0; j<8; j++){
		CANPAGE = (j << 4);
     42c:	8c 2f       	mov	r24, r28
     42e:	82 95       	swap	r24
     430:	80 7f       	andi	r24, 0xF0	; 240
     432:	f5 01       	movw	r30, r10
     434:	80 83       	st	Z, r24
		can_init_id(j);
     436:	ce 01       	movw	r24, r28
     438:	44 df       	rcall	.-376    	; 0x2c2 <can_init_id>
		// Mask = 255
		can_init_mask_def();
     43a:	59 df       	rcall	.-334    	; 0x2ee <can_init_mask_def>
     43c:	f6 01       	movw	r30, r12
		//set mob in buffer receive mode.
		CANCDMOB = (1 << CONMOB0) | (1 << CONMOB1) | (1 << DLC3);
     43e:	10 83       	st	Z, r17
     440:	21 96       	adiw	r28, 0x01	; 1
     442:	c8 30       	cpi	r28, 0x08	; 8

int can_receive_frame_buffer( uint8_t *message , uint8_t buff_len){
	//Enable buffer receive interrupt.
	CANGIE |= (1 << ENBX);
	uint8_t j = buff_len;
	for(j=0; j<8; j++){
     444:	d1 05       	cpc	r29, r1
     446:	91 f7       	brne	.-28     	; 0x42c <__LOCK_REGION_LENGTH__+0x2c>
     448:	ea ed       	ldi	r30, 0xDA	; 218
		can_init_mask_def();
		//set mob in buffer receive mode.
		CANCDMOB = (1 << CONMOB0) | (1 << CONMOB1) | (1 << DLC3);
	}
	//wait for interrupt.
	while((CANGIT & INTR_MASK) != (1 << CANIT));
     44a:	f0 e0       	ldi	r31, 0x00	; 0
     44c:	80 81       	ld	r24, Z
     44e:	88 23       	and	r24, r24
     450:	ec f7       	brge	.-6      	; 0x44c <__LOCK_REGION_LENGTH__+0x4c>
     452:	80 91 da 00 	lds	r24, 0x00DA	; 0x8000da <__TEXT_REGION_LENGTH__+0x7e00da>
	//Check if interrupt is the right one (BXOK).
	if((CANGIT & BXOK_MASK) != (1 << BXOK)) return 1;
     456:	84 ff       	sbrs	r24, 4
     458:	1a c0       	rjmp	.+52     	; 0x48e <__LOCK_REGION_LENGTH__+0x8e>
     45a:	80 e0       	ldi	r24, 0x00	; 0
     45c:	cd ee       	ldi	r28, 0xED	; 237
	//reset mob RXOK flags
	for(j=0; j<8; j++){
		CANPAGE = (j << 4);
     45e:	d0 e0       	ldi	r29, 0x00	; 0
     460:	af ee       	ldi	r26, 0xEF	; 239
		CANCDMOB = 0x00;
     462:	b0 e0       	ldi	r27, 0x00	; 0
     464:	ee ee       	ldi	r30, 0xEE	; 238
		CANSTMOB = 0x00;
     466:	f0 e0       	ldi	r31, 0x00	; 0
     468:	98 2f       	mov	r25, r24
	while((CANGIT & INTR_MASK) != (1 << CANIT));
	//Check if interrupt is the right one (BXOK).
	if((CANGIT & BXOK_MASK) != (1 << BXOK)) return 1;
	//reset mob RXOK flags
	for(j=0; j<8; j++){
		CANPAGE = (j << 4);
     46a:	92 95       	swap	r25
     46c:	90 7f       	andi	r25, 0xF0	; 240
     46e:	98 83       	st	Y, r25
     470:	1c 92       	st	X, r1
		CANCDMOB = 0x00;
     472:	10 82       	st	Z, r1
		CANSTMOB = 0x00;
     474:	8f 5f       	subi	r24, 0xFF	; 255
	//wait for interrupt.
	while((CANGIT & INTR_MASK) != (1 << CANIT));
	//Check if interrupt is the right one (BXOK).
	if((CANGIT & BXOK_MASK) != (1 << BXOK)) return 1;
	//reset mob RXOK flags
	for(j=0; j<8; j++){
     476:	88 30       	cpi	r24, 0x08	; 8
     478:	b9 f7       	brne	.-18     	; 0x468 <__LOCK_REGION_LENGTH__+0x68>
     47a:	ea ed       	ldi	r30, 0xDA	; 218
		CANPAGE = (j << 4);
		CANCDMOB = 0x00;
		CANSTMOB = 0x00;
	}
	//Reset interrupt register.
	CANGIT = CANGIT;
     47c:	f0 e0       	ldi	r31, 0x00	; 0
     47e:	80 81       	ld	r24, Z
     480:	80 83       	st	Z, r24
     482:	6e 2d       	mov	r22, r14
	//retrieve message.
	can_get_frame_buffer(message, buff_len);
     484:	c4 01       	movw	r24, r8
     486:	f3 de       	rcall	.-538    	; 0x26e <can_get_frame_buffer>
     488:	80 e0       	ldi	r24, 0x00	; 0
	return 0;
     48a:	90 e0       	ldi	r25, 0x00	; 0
     48c:	02 c0       	rjmp	.+4      	; 0x492 <__LOCK_REGION_LENGTH__+0x92>
     48e:	81 e0       	ldi	r24, 0x01	; 1
		CANCDMOB = (1 << CONMOB0) | (1 << CONMOB1) | (1 << DLC3);
	}
	//wait for interrupt.
	while((CANGIT & INTR_MASK) != (1 << CANIT));
	//Check if interrupt is the right one (BXOK).
	if((CANGIT & BXOK_MASK) != (1 << BXOK)) return 1;
     490:	90 e0       	ldi	r25, 0x00	; 0
     492:	df 91       	pop	r29
	//Reset interrupt register.
	CANGIT = CANGIT;
	//retrieve message.
	can_get_frame_buffer(message, buff_len);
	return 0;
}
     494:	cf 91       	pop	r28
     496:	1f 91       	pop	r17
     498:	ef 90       	pop	r14
     49a:	df 90       	pop	r13
     49c:	cf 90       	pop	r12
     49e:	bf 90       	pop	r11
     4a0:	af 90       	pop	r10
     4a2:	9f 90       	pop	r9
     4a4:	8f 90       	pop	r8
     4a6:	08 95       	ret

000004a8 <uECC_vli_clear>:
     4a8:	dc 01       	movw	r26, r24
#if (uECC_OPTIMIZATION_LEVEL > 0)
    &vli_mmod_fast_secp256k1
#endif
};

uECC_Curve uECC_secp256k1(void) { return &curve_secp256k1; }
     4aa:	ea e7       	ldi	r30, 0x7A	; 122
     4ac:	f2 e0       	ldi	r31, 0x02	; 2
     4ae:	e6 1b       	sub	r30, r22
     4b0:	f1 09       	sbc	r31, r1
     4b2:	09 94       	ijmp
     4b4:	1d 92       	st	X+, r1
     4b6:	1d 92       	st	X+, r1
     4b8:	1d 92       	st	X+, r1
     4ba:	1d 92       	st	X+, r1
     4bc:	1d 92       	st	X+, r1
     4be:	1d 92       	st	X+, r1
     4c0:	1d 92       	st	X+, r1
     4c2:	1d 92       	st	X+, r1
     4c4:	1d 92       	st	X+, r1
     4c6:	1d 92       	st	X+, r1
     4c8:	1d 92       	st	X+, r1
     4ca:	1d 92       	st	X+, r1
     4cc:	1d 92       	st	X+, r1
     4ce:	1d 92       	st	X+, r1
     4d0:	1d 92       	st	X+, r1
     4d2:	1d 92       	st	X+, r1
     4d4:	1d 92       	st	X+, r1
     4d6:	1d 92       	st	X+, r1
     4d8:	1d 92       	st	X+, r1
     4da:	1d 92       	st	X+, r1
     4dc:	1d 92       	st	X+, r1
     4de:	1d 92       	st	X+, r1
     4e0:	1d 92       	st	X+, r1
     4e2:	1d 92       	st	X+, r1
     4e4:	1d 92       	st	X+, r1
     4e6:	1d 92       	st	X+, r1
     4e8:	1d 92       	st	X+, r1
     4ea:	1d 92       	st	X+, r1
     4ec:	1d 92       	st	X+, r1
     4ee:	1d 92       	st	X+, r1
     4f0:	1d 92       	st	X+, r1
     4f2:	1d 92       	st	X+, r1
     4f4:	08 95       	ret

000004f6 <uECC_vli_set>:
     4f6:	cf 93       	push	r28
     4f8:	df 93       	push	r29
     4fa:	44 0f       	add	r20, r20
     4fc:	eb 01       	movw	r28, r22
     4fe:	dc 01       	movw	r26, r24
     500:	e5 ec       	ldi	r30, 0xC5	; 197
     502:	f2 e0       	ldi	r31, 0x02	; 2
     504:	e4 1b       	sub	r30, r20
     506:	f1 09       	sbc	r31, r1
     508:	09 94       	ijmp
     50a:	09 90       	ld	r0, Y+
     50c:	0d 92       	st	X+, r0
     50e:	09 90       	ld	r0, Y+
     510:	0d 92       	st	X+, r0
     512:	09 90       	ld	r0, Y+
     514:	0d 92       	st	X+, r0
     516:	09 90       	ld	r0, Y+
     518:	0d 92       	st	X+, r0
     51a:	09 90       	ld	r0, Y+
     51c:	0d 92       	st	X+, r0
     51e:	09 90       	ld	r0, Y+
     520:	0d 92       	st	X+, r0
     522:	09 90       	ld	r0, Y+
     524:	0d 92       	st	X+, r0
     526:	09 90       	ld	r0, Y+
     528:	0d 92       	st	X+, r0
     52a:	09 90       	ld	r0, Y+
     52c:	0d 92       	st	X+, r0
     52e:	09 90       	ld	r0, Y+
     530:	0d 92       	st	X+, r0
     532:	09 90       	ld	r0, Y+
     534:	0d 92       	st	X+, r0
     536:	09 90       	ld	r0, Y+
     538:	0d 92       	st	X+, r0
     53a:	09 90       	ld	r0, Y+
     53c:	0d 92       	st	X+, r0
     53e:	09 90       	ld	r0, Y+
     540:	0d 92       	st	X+, r0
     542:	09 90       	ld	r0, Y+
     544:	0d 92       	st	X+, r0
     546:	09 90       	ld	r0, Y+
     548:	0d 92       	st	X+, r0
     54a:	09 90       	ld	r0, Y+
     54c:	0d 92       	st	X+, r0
     54e:	09 90       	ld	r0, Y+
     550:	0d 92       	st	X+, r0
     552:	09 90       	ld	r0, Y+
     554:	0d 92       	st	X+, r0
     556:	09 90       	ld	r0, Y+
     558:	0d 92       	st	X+, r0
     55a:	09 90       	ld	r0, Y+
     55c:	0d 92       	st	X+, r0
     55e:	09 90       	ld	r0, Y+
     560:	0d 92       	st	X+, r0
     562:	09 90       	ld	r0, Y+
     564:	0d 92       	st	X+, r0
     566:	09 90       	ld	r0, Y+
     568:	0d 92       	st	X+, r0
     56a:	09 90       	ld	r0, Y+
     56c:	0d 92       	st	X+, r0
     56e:	09 90       	ld	r0, Y+
     570:	0d 92       	st	X+, r0
     572:	09 90       	ld	r0, Y+
     574:	0d 92       	st	X+, r0
     576:	09 90       	ld	r0, Y+
     578:	0d 92       	st	X+, r0
     57a:	09 90       	ld	r0, Y+
     57c:	0d 92       	st	X+, r0
     57e:	09 90       	ld	r0, Y+
     580:	0d 92       	st	X+, r0
     582:	09 90       	ld	r0, Y+
     584:	0d 92       	st	X+, r0
     586:	09 90       	ld	r0, Y+
     588:	0d 92       	st	X+, r0
     58a:	df 91       	pop	r29
     58c:	cf 91       	pop	r28
     58e:	08 95       	ret

00000590 <uECC_vli_rshift1>:
     590:	26 2f       	mov	r18, r22
     592:	06 2e       	mov	r0, r22
     594:	00 0c       	add	r0, r0
     596:	33 0b       	sbc	r19, r19
     598:	21 50       	subi	r18, 0x01	; 1
     59a:	31 09       	sbc	r19, r1
     59c:	32 2f       	mov	r19, r18
     59e:	33 0f       	add	r19, r19
     5a0:	23 0f       	add	r18, r19
     5a2:	dc 01       	movw	r26, r24
     5a4:	e9 e3       	ldi	r30, 0x39	; 57
     5a6:	f3 e0       	ldi	r31, 0x03	; 3
     5a8:	e2 1b       	sub	r30, r18
     5aa:	f1 09       	sbc	r31, r1
     5ac:	a6 0f       	add	r26, r22
     5ae:	b1 1d       	adc	r27, r1
     5b0:	0e 90       	ld	r0, -X
     5b2:	06 94       	lsr	r0
     5b4:	0c 92       	st	X, r0
     5b6:	09 94       	ijmp
     5b8:	0e 90       	ld	r0, -X
     5ba:	07 94       	ror	r0
     5bc:	0c 92       	st	X, r0
     5be:	0e 90       	ld	r0, -X
     5c0:	07 94       	ror	r0
     5c2:	0c 92       	st	X, r0
     5c4:	0e 90       	ld	r0, -X
     5c6:	07 94       	ror	r0
     5c8:	0c 92       	st	X, r0
     5ca:	0e 90       	ld	r0, -X
     5cc:	07 94       	ror	r0
     5ce:	0c 92       	st	X, r0
     5d0:	0e 90       	ld	r0, -X
     5d2:	07 94       	ror	r0
     5d4:	0c 92       	st	X, r0
     5d6:	0e 90       	ld	r0, -X
     5d8:	07 94       	ror	r0
     5da:	0c 92       	st	X, r0
     5dc:	0e 90       	ld	r0, -X
     5de:	07 94       	ror	r0
     5e0:	0c 92       	st	X, r0
     5e2:	0e 90       	ld	r0, -X
     5e4:	07 94       	ror	r0
     5e6:	0c 92       	st	X, r0
     5e8:	0e 90       	ld	r0, -X
     5ea:	07 94       	ror	r0
     5ec:	0c 92       	st	X, r0
     5ee:	0e 90       	ld	r0, -X
     5f0:	07 94       	ror	r0
     5f2:	0c 92       	st	X, r0
     5f4:	0e 90       	ld	r0, -X
     5f6:	07 94       	ror	r0
     5f8:	0c 92       	st	X, r0
     5fa:	0e 90       	ld	r0, -X
     5fc:	07 94       	ror	r0
     5fe:	0c 92       	st	X, r0
     600:	0e 90       	ld	r0, -X
     602:	07 94       	ror	r0
     604:	0c 92       	st	X, r0
     606:	0e 90       	ld	r0, -X
     608:	07 94       	ror	r0
     60a:	0c 92       	st	X, r0
     60c:	0e 90       	ld	r0, -X
     60e:	07 94       	ror	r0
     610:	0c 92       	st	X, r0
     612:	0e 90       	ld	r0, -X
     614:	07 94       	ror	r0
     616:	0c 92       	st	X, r0
     618:	0e 90       	ld	r0, -X
     61a:	07 94       	ror	r0
     61c:	0c 92       	st	X, r0
     61e:	0e 90       	ld	r0, -X
     620:	07 94       	ror	r0
     622:	0c 92       	st	X, r0
     624:	0e 90       	ld	r0, -X
     626:	07 94       	ror	r0
     628:	0c 92       	st	X, r0
     62a:	0e 90       	ld	r0, -X
     62c:	07 94       	ror	r0
     62e:	0c 92       	st	X, r0
     630:	0e 90       	ld	r0, -X
     632:	07 94       	ror	r0
     634:	0c 92       	st	X, r0
     636:	0e 90       	ld	r0, -X
     638:	07 94       	ror	r0
     63a:	0c 92       	st	X, r0
     63c:	0e 90       	ld	r0, -X
     63e:	07 94       	ror	r0
     640:	0c 92       	st	X, r0
     642:	0e 90       	ld	r0, -X
     644:	07 94       	ror	r0
     646:	0c 92       	st	X, r0
     648:	0e 90       	ld	r0, -X
     64a:	07 94       	ror	r0
     64c:	0c 92       	st	X, r0
     64e:	0e 90       	ld	r0, -X
     650:	07 94       	ror	r0
     652:	0c 92       	st	X, r0
     654:	0e 90       	ld	r0, -X
     656:	07 94       	ror	r0
     658:	0c 92       	st	X, r0
     65a:	0e 90       	ld	r0, -X
     65c:	07 94       	ror	r0
     65e:	0c 92       	st	X, r0
     660:	0e 90       	ld	r0, -X
     662:	07 94       	ror	r0
     664:	0c 92       	st	X, r0
     666:	0e 90       	ld	r0, -X
     668:	07 94       	ror	r0
     66a:	0c 92       	st	X, r0
     66c:	0e 90       	ld	r0, -X
     66e:	07 94       	ror	r0
     670:	0c 92       	st	X, r0
     672:	08 95       	ret

00000674 <uECC_vli_add>:
     674:	cf 93       	push	r28
     676:	df 93       	push	r29
     678:	22 0f       	add	r18, r18
     67a:	db 01       	movw	r26, r22
     67c:	ea 01       	movw	r28, r20
     67e:	ac 01       	movw	r20, r24
     680:	e6 e8       	ldi	r30, 0x86	; 134
     682:	f3 e0       	ldi	r31, 0x03	; 3
     684:	e2 1b       	sub	r30, r18
     686:	f1 09       	sbc	r31, r1
     688:	88 94       	clc
     68a:	09 94       	ijmp
     68c:	fa 01       	movw	r30, r20
     68e:	3e c0       	rjmp	.+124    	; 0x70c <add_89_32>
     690:	fa 01       	movw	r30, r20
     692:	40 c0       	rjmp	.+128    	; 0x714 <add_89_31>
     694:	fa 01       	movw	r30, r20
     696:	42 c0       	rjmp	.+132    	; 0x71c <add_89_30>
     698:	fa 01       	movw	r30, r20
     69a:	44 c0       	rjmp	.+136    	; 0x724 <add_89_29>
     69c:	fa 01       	movw	r30, r20
     69e:	46 c0       	rjmp	.+140    	; 0x72c <add_89_28>
     6a0:	fa 01       	movw	r30, r20
     6a2:	48 c0       	rjmp	.+144    	; 0x734 <add_89_27>
     6a4:	fa 01       	movw	r30, r20
     6a6:	4a c0       	rjmp	.+148    	; 0x73c <add_89_26>
     6a8:	fa 01       	movw	r30, r20
     6aa:	4c c0       	rjmp	.+152    	; 0x744 <add_89_25>
     6ac:	fa 01       	movw	r30, r20
     6ae:	4e c0       	rjmp	.+156    	; 0x74c <add_89_24>
     6b0:	fa 01       	movw	r30, r20
     6b2:	50 c0       	rjmp	.+160    	; 0x754 <add_89_23>
     6b4:	fa 01       	movw	r30, r20
     6b6:	52 c0       	rjmp	.+164    	; 0x75c <add_89_22>
     6b8:	fa 01       	movw	r30, r20
     6ba:	54 c0       	rjmp	.+168    	; 0x764 <add_89_21>
     6bc:	fa 01       	movw	r30, r20
     6be:	56 c0       	rjmp	.+172    	; 0x76c <add_89_20>
     6c0:	fa 01       	movw	r30, r20
     6c2:	58 c0       	rjmp	.+176    	; 0x774 <add_89_19>
     6c4:	fa 01       	movw	r30, r20
     6c6:	5a c0       	rjmp	.+180    	; 0x77c <add_89_18>
     6c8:	fa 01       	movw	r30, r20
     6ca:	5c c0       	rjmp	.+184    	; 0x784 <add_89_17>
     6cc:	fa 01       	movw	r30, r20
     6ce:	5e c0       	rjmp	.+188    	; 0x78c <add_89_16>
     6d0:	fa 01       	movw	r30, r20
     6d2:	60 c0       	rjmp	.+192    	; 0x794 <add_89_15>
     6d4:	fa 01       	movw	r30, r20
     6d6:	62 c0       	rjmp	.+196    	; 0x79c <add_89_14>
     6d8:	fa 01       	movw	r30, r20
     6da:	64 c0       	rjmp	.+200    	; 0x7a4 <add_89_13>
     6dc:	fa 01       	movw	r30, r20
     6de:	66 c0       	rjmp	.+204    	; 0x7ac <add_89_12>
     6e0:	fa 01       	movw	r30, r20
     6e2:	68 c0       	rjmp	.+208    	; 0x7b4 <add_89_11>
     6e4:	fa 01       	movw	r30, r20
     6e6:	6a c0       	rjmp	.+212    	; 0x7bc <add_89_10>
     6e8:	fa 01       	movw	r30, r20
     6ea:	6c c0       	rjmp	.+216    	; 0x7c4 <add_89_9>
     6ec:	fa 01       	movw	r30, r20
     6ee:	6e c0       	rjmp	.+220    	; 0x7cc <add_89_8>
     6f0:	fa 01       	movw	r30, r20
     6f2:	70 c0       	rjmp	.+224    	; 0x7d4 <add_89_7>
     6f4:	fa 01       	movw	r30, r20
     6f6:	72 c0       	rjmp	.+228    	; 0x7dc <add_89_6>
     6f8:	fa 01       	movw	r30, r20
     6fa:	74 c0       	rjmp	.+232    	; 0x7e4 <add_89_5>
     6fc:	fa 01       	movw	r30, r20
     6fe:	76 c0       	rjmp	.+236    	; 0x7ec <add_89_4>
     700:	fa 01       	movw	r30, r20
     702:	78 c0       	rjmp	.+240    	; 0x7f4 <add_89_3>
     704:	fa 01       	movw	r30, r20
     706:	7a c0       	rjmp	.+244    	; 0x7fc <add_89_2>
     708:	fa 01       	movw	r30, r20
     70a:	7c c0       	rjmp	.+248    	; 0x804 <add_89_1>

0000070c <add_89_32>:
     70c:	8d 91       	ld	r24, X+
     70e:	99 91       	ld	r25, Y+
     710:	89 1f       	adc	r24, r25
     712:	81 93       	st	Z+, r24

00000714 <add_89_31>:
     714:	8d 91       	ld	r24, X+
     716:	99 91       	ld	r25, Y+
     718:	89 1f       	adc	r24, r25
     71a:	81 93       	st	Z+, r24

0000071c <add_89_30>:
     71c:	8d 91       	ld	r24, X+
     71e:	99 91       	ld	r25, Y+
     720:	89 1f       	adc	r24, r25
     722:	81 93       	st	Z+, r24

00000724 <add_89_29>:
     724:	8d 91       	ld	r24, X+
     726:	99 91       	ld	r25, Y+
     728:	89 1f       	adc	r24, r25
     72a:	81 93       	st	Z+, r24

0000072c <add_89_28>:
     72c:	8d 91       	ld	r24, X+
     72e:	99 91       	ld	r25, Y+
     730:	89 1f       	adc	r24, r25
     732:	81 93       	st	Z+, r24

00000734 <add_89_27>:
     734:	8d 91       	ld	r24, X+
     736:	99 91       	ld	r25, Y+
     738:	89 1f       	adc	r24, r25
     73a:	81 93       	st	Z+, r24

0000073c <add_89_26>:
     73c:	8d 91       	ld	r24, X+
     73e:	99 91       	ld	r25, Y+
     740:	89 1f       	adc	r24, r25
     742:	81 93       	st	Z+, r24

00000744 <add_89_25>:
     744:	8d 91       	ld	r24, X+
     746:	99 91       	ld	r25, Y+
     748:	89 1f       	adc	r24, r25
     74a:	81 93       	st	Z+, r24

0000074c <add_89_24>:
     74c:	8d 91       	ld	r24, X+
     74e:	99 91       	ld	r25, Y+
     750:	89 1f       	adc	r24, r25
     752:	81 93       	st	Z+, r24

00000754 <add_89_23>:
     754:	8d 91       	ld	r24, X+
     756:	99 91       	ld	r25, Y+
     758:	89 1f       	adc	r24, r25
     75a:	81 93       	st	Z+, r24

0000075c <add_89_22>:
     75c:	8d 91       	ld	r24, X+
     75e:	99 91       	ld	r25, Y+
     760:	89 1f       	adc	r24, r25
     762:	81 93       	st	Z+, r24

00000764 <add_89_21>:
     764:	8d 91       	ld	r24, X+
     766:	99 91       	ld	r25, Y+
     768:	89 1f       	adc	r24, r25
     76a:	81 93       	st	Z+, r24

0000076c <add_89_20>:
     76c:	8d 91       	ld	r24, X+
     76e:	99 91       	ld	r25, Y+
     770:	89 1f       	adc	r24, r25
     772:	81 93       	st	Z+, r24

00000774 <add_89_19>:
     774:	8d 91       	ld	r24, X+
     776:	99 91       	ld	r25, Y+
     778:	89 1f       	adc	r24, r25
     77a:	81 93       	st	Z+, r24

0000077c <add_89_18>:
     77c:	8d 91       	ld	r24, X+
     77e:	99 91       	ld	r25, Y+
     780:	89 1f       	adc	r24, r25
     782:	81 93       	st	Z+, r24

00000784 <add_89_17>:
     784:	8d 91       	ld	r24, X+
     786:	99 91       	ld	r25, Y+
     788:	89 1f       	adc	r24, r25
     78a:	81 93       	st	Z+, r24

0000078c <add_89_16>:
     78c:	8d 91       	ld	r24, X+
     78e:	99 91       	ld	r25, Y+
     790:	89 1f       	adc	r24, r25
     792:	81 93       	st	Z+, r24

00000794 <add_89_15>:
     794:	8d 91       	ld	r24, X+
     796:	99 91       	ld	r25, Y+
     798:	89 1f       	adc	r24, r25
     79a:	81 93       	st	Z+, r24

0000079c <add_89_14>:
     79c:	8d 91       	ld	r24, X+
     79e:	99 91       	ld	r25, Y+
     7a0:	89 1f       	adc	r24, r25
     7a2:	81 93       	st	Z+, r24

000007a4 <add_89_13>:
     7a4:	8d 91       	ld	r24, X+
     7a6:	99 91       	ld	r25, Y+
     7a8:	89 1f       	adc	r24, r25
     7aa:	81 93       	st	Z+, r24

000007ac <add_89_12>:
     7ac:	8d 91       	ld	r24, X+
     7ae:	99 91       	ld	r25, Y+
     7b0:	89 1f       	adc	r24, r25
     7b2:	81 93       	st	Z+, r24

000007b4 <add_89_11>:
     7b4:	8d 91       	ld	r24, X+
     7b6:	99 91       	ld	r25, Y+
     7b8:	89 1f       	adc	r24, r25
     7ba:	81 93       	st	Z+, r24

000007bc <add_89_10>:
     7bc:	8d 91       	ld	r24, X+
     7be:	99 91       	ld	r25, Y+
     7c0:	89 1f       	adc	r24, r25
     7c2:	81 93       	st	Z+, r24

000007c4 <add_89_9>:
     7c4:	8d 91       	ld	r24, X+
     7c6:	99 91       	ld	r25, Y+
     7c8:	89 1f       	adc	r24, r25
     7ca:	81 93       	st	Z+, r24

000007cc <add_89_8>:
     7cc:	8d 91       	ld	r24, X+
     7ce:	99 91       	ld	r25, Y+
     7d0:	89 1f       	adc	r24, r25
     7d2:	81 93       	st	Z+, r24

000007d4 <add_89_7>:
     7d4:	8d 91       	ld	r24, X+
     7d6:	99 91       	ld	r25, Y+
     7d8:	89 1f       	adc	r24, r25
     7da:	81 93       	st	Z+, r24

000007dc <add_89_6>:
     7dc:	8d 91       	ld	r24, X+
     7de:	99 91       	ld	r25, Y+
     7e0:	89 1f       	adc	r24, r25
     7e2:	81 93       	st	Z+, r24

000007e4 <add_89_5>:
     7e4:	8d 91       	ld	r24, X+
     7e6:	99 91       	ld	r25, Y+
     7e8:	89 1f       	adc	r24, r25
     7ea:	81 93       	st	Z+, r24

000007ec <add_89_4>:
     7ec:	8d 91       	ld	r24, X+
     7ee:	99 91       	ld	r25, Y+
     7f0:	89 1f       	adc	r24, r25
     7f2:	81 93       	st	Z+, r24

000007f4 <add_89_3>:
     7f4:	8d 91       	ld	r24, X+
     7f6:	99 91       	ld	r25, Y+
     7f8:	89 1f       	adc	r24, r25
     7fa:	81 93       	st	Z+, r24

000007fc <add_89_2>:
     7fc:	8d 91       	ld	r24, X+
     7fe:	99 91       	ld	r25, Y+
     800:	89 1f       	adc	r24, r25
     802:	81 93       	st	Z+, r24

00000804 <add_89_1>:
     804:	8d 91       	ld	r24, X+
     806:	99 91       	ld	r25, Y+
     808:	89 1f       	adc	r24, r25
     80a:	81 93       	st	Z+, r24
     80c:	81 2d       	mov	r24, r1
     80e:	88 1f       	adc	r24, r24
     810:	df 91       	pop	r29
     812:	cf 91       	pop	r28
     814:	08 95       	ret

00000816 <uECC_vli_sub>:
     816:	cf 93       	push	r28
     818:	df 93       	push	r29
     81a:	22 0f       	add	r18, r18
     81c:	db 01       	movw	r26, r22
     81e:	ea 01       	movw	r28, r20
     820:	ac 01       	movw	r20, r24
     822:	e7 e5       	ldi	r30, 0x57	; 87
     824:	f4 e0       	ldi	r31, 0x04	; 4
     826:	e2 1b       	sub	r30, r18
     828:	f1 09       	sbc	r31, r1
     82a:	88 94       	clc
     82c:	09 94       	ijmp
     82e:	fa 01       	movw	r30, r20
     830:	3e c0       	rjmp	.+124    	; 0x8ae <sub_129_32>
     832:	fa 01       	movw	r30, r20
     834:	40 c0       	rjmp	.+128    	; 0x8b6 <sub_129_31>
     836:	fa 01       	movw	r30, r20
     838:	42 c0       	rjmp	.+132    	; 0x8be <sub_129_30>
     83a:	fa 01       	movw	r30, r20
     83c:	44 c0       	rjmp	.+136    	; 0x8c6 <sub_129_29>
     83e:	fa 01       	movw	r30, r20
     840:	46 c0       	rjmp	.+140    	; 0x8ce <sub_129_28>
     842:	fa 01       	movw	r30, r20
     844:	48 c0       	rjmp	.+144    	; 0x8d6 <sub_129_27>
     846:	fa 01       	movw	r30, r20
     848:	4a c0       	rjmp	.+148    	; 0x8de <sub_129_26>
     84a:	fa 01       	movw	r30, r20
     84c:	4c c0       	rjmp	.+152    	; 0x8e6 <sub_129_25>
     84e:	fa 01       	movw	r30, r20
     850:	4e c0       	rjmp	.+156    	; 0x8ee <sub_129_24>
     852:	fa 01       	movw	r30, r20
     854:	50 c0       	rjmp	.+160    	; 0x8f6 <sub_129_23>
     856:	fa 01       	movw	r30, r20
     858:	52 c0       	rjmp	.+164    	; 0x8fe <sub_129_22>
     85a:	fa 01       	movw	r30, r20
     85c:	54 c0       	rjmp	.+168    	; 0x906 <sub_129_21>
     85e:	fa 01       	movw	r30, r20
     860:	56 c0       	rjmp	.+172    	; 0x90e <sub_129_20>
     862:	fa 01       	movw	r30, r20
     864:	58 c0       	rjmp	.+176    	; 0x916 <sub_129_19>
     866:	fa 01       	movw	r30, r20
     868:	5a c0       	rjmp	.+180    	; 0x91e <sub_129_18>
     86a:	fa 01       	movw	r30, r20
     86c:	5c c0       	rjmp	.+184    	; 0x926 <sub_129_17>
     86e:	fa 01       	movw	r30, r20
     870:	5e c0       	rjmp	.+188    	; 0x92e <sub_129_16>
     872:	fa 01       	movw	r30, r20
     874:	60 c0       	rjmp	.+192    	; 0x936 <sub_129_15>
     876:	fa 01       	movw	r30, r20
     878:	62 c0       	rjmp	.+196    	; 0x93e <sub_129_14>
     87a:	fa 01       	movw	r30, r20
     87c:	64 c0       	rjmp	.+200    	; 0x946 <sub_129_13>
     87e:	fa 01       	movw	r30, r20
     880:	66 c0       	rjmp	.+204    	; 0x94e <sub_129_12>
     882:	fa 01       	movw	r30, r20
     884:	68 c0       	rjmp	.+208    	; 0x956 <sub_129_11>
     886:	fa 01       	movw	r30, r20
     888:	6a c0       	rjmp	.+212    	; 0x95e <sub_129_10>
     88a:	fa 01       	movw	r30, r20
     88c:	6c c0       	rjmp	.+216    	; 0x966 <sub_129_9>
     88e:	fa 01       	movw	r30, r20
     890:	6e c0       	rjmp	.+220    	; 0x96e <sub_129_8>
     892:	fa 01       	movw	r30, r20
     894:	70 c0       	rjmp	.+224    	; 0x976 <sub_129_7>
     896:	fa 01       	movw	r30, r20
     898:	72 c0       	rjmp	.+228    	; 0x97e <sub_129_6>
     89a:	fa 01       	movw	r30, r20
     89c:	74 c0       	rjmp	.+232    	; 0x986 <sub_129_5>
     89e:	fa 01       	movw	r30, r20
     8a0:	76 c0       	rjmp	.+236    	; 0x98e <sub_129_4>
     8a2:	fa 01       	movw	r30, r20
     8a4:	78 c0       	rjmp	.+240    	; 0x996 <sub_129_3>
     8a6:	fa 01       	movw	r30, r20
     8a8:	7a c0       	rjmp	.+244    	; 0x99e <sub_129_2>
     8aa:	fa 01       	movw	r30, r20
     8ac:	7c c0       	rjmp	.+248    	; 0x9a6 <sub_129_1>

000008ae <sub_129_32>:
     8ae:	8d 91       	ld	r24, X+
     8b0:	99 91       	ld	r25, Y+
     8b2:	89 0b       	sbc	r24, r25
     8b4:	81 93       	st	Z+, r24

000008b6 <sub_129_31>:
     8b6:	8d 91       	ld	r24, X+
     8b8:	99 91       	ld	r25, Y+
     8ba:	89 0b       	sbc	r24, r25
     8bc:	81 93       	st	Z+, r24

000008be <sub_129_30>:
     8be:	8d 91       	ld	r24, X+
     8c0:	99 91       	ld	r25, Y+
     8c2:	89 0b       	sbc	r24, r25
     8c4:	81 93       	st	Z+, r24

000008c6 <sub_129_29>:
     8c6:	8d 91       	ld	r24, X+
     8c8:	99 91       	ld	r25, Y+
     8ca:	89 0b       	sbc	r24, r25
     8cc:	81 93       	st	Z+, r24

000008ce <sub_129_28>:
     8ce:	8d 91       	ld	r24, X+
     8d0:	99 91       	ld	r25, Y+
     8d2:	89 0b       	sbc	r24, r25
     8d4:	81 93       	st	Z+, r24

000008d6 <sub_129_27>:
     8d6:	8d 91       	ld	r24, X+
     8d8:	99 91       	ld	r25, Y+
     8da:	89 0b       	sbc	r24, r25
     8dc:	81 93       	st	Z+, r24

000008de <sub_129_26>:
     8de:	8d 91       	ld	r24, X+
     8e0:	99 91       	ld	r25, Y+
     8e2:	89 0b       	sbc	r24, r25
     8e4:	81 93       	st	Z+, r24

000008e6 <sub_129_25>:
     8e6:	8d 91       	ld	r24, X+
     8e8:	99 91       	ld	r25, Y+
     8ea:	89 0b       	sbc	r24, r25
     8ec:	81 93       	st	Z+, r24

000008ee <sub_129_24>:
     8ee:	8d 91       	ld	r24, X+
     8f0:	99 91       	ld	r25, Y+
     8f2:	89 0b       	sbc	r24, r25
     8f4:	81 93       	st	Z+, r24

000008f6 <sub_129_23>:
     8f6:	8d 91       	ld	r24, X+
     8f8:	99 91       	ld	r25, Y+
     8fa:	89 0b       	sbc	r24, r25
     8fc:	81 93       	st	Z+, r24

000008fe <sub_129_22>:
     8fe:	8d 91       	ld	r24, X+
     900:	99 91       	ld	r25, Y+
     902:	89 0b       	sbc	r24, r25
     904:	81 93       	st	Z+, r24

00000906 <sub_129_21>:
     906:	8d 91       	ld	r24, X+
     908:	99 91       	ld	r25, Y+
     90a:	89 0b       	sbc	r24, r25
     90c:	81 93       	st	Z+, r24

0000090e <sub_129_20>:
     90e:	8d 91       	ld	r24, X+
     910:	99 91       	ld	r25, Y+
     912:	89 0b       	sbc	r24, r25
     914:	81 93       	st	Z+, r24

00000916 <sub_129_19>:
     916:	8d 91       	ld	r24, X+
     918:	99 91       	ld	r25, Y+
     91a:	89 0b       	sbc	r24, r25
     91c:	81 93       	st	Z+, r24

0000091e <sub_129_18>:
     91e:	8d 91       	ld	r24, X+
     920:	99 91       	ld	r25, Y+
     922:	89 0b       	sbc	r24, r25
     924:	81 93       	st	Z+, r24

00000926 <sub_129_17>:
     926:	8d 91       	ld	r24, X+
     928:	99 91       	ld	r25, Y+
     92a:	89 0b       	sbc	r24, r25
     92c:	81 93       	st	Z+, r24

0000092e <sub_129_16>:
     92e:	8d 91       	ld	r24, X+
     930:	99 91       	ld	r25, Y+
     932:	89 0b       	sbc	r24, r25
     934:	81 93       	st	Z+, r24

00000936 <sub_129_15>:
     936:	8d 91       	ld	r24, X+
     938:	99 91       	ld	r25, Y+
     93a:	89 0b       	sbc	r24, r25
     93c:	81 93       	st	Z+, r24

0000093e <sub_129_14>:
     93e:	8d 91       	ld	r24, X+
     940:	99 91       	ld	r25, Y+
     942:	89 0b       	sbc	r24, r25
     944:	81 93       	st	Z+, r24

00000946 <sub_129_13>:
     946:	8d 91       	ld	r24, X+
     948:	99 91       	ld	r25, Y+
     94a:	89 0b       	sbc	r24, r25
     94c:	81 93       	st	Z+, r24

0000094e <sub_129_12>:
     94e:	8d 91       	ld	r24, X+
     950:	99 91       	ld	r25, Y+
     952:	89 0b       	sbc	r24, r25
     954:	81 93       	st	Z+, r24

00000956 <sub_129_11>:
     956:	8d 91       	ld	r24, X+
     958:	99 91       	ld	r25, Y+
     95a:	89 0b       	sbc	r24, r25
     95c:	81 93       	st	Z+, r24

0000095e <sub_129_10>:
     95e:	8d 91       	ld	r24, X+
     960:	99 91       	ld	r25, Y+
     962:	89 0b       	sbc	r24, r25
     964:	81 93       	st	Z+, r24

00000966 <sub_129_9>:
     966:	8d 91       	ld	r24, X+
     968:	99 91       	ld	r25, Y+
     96a:	89 0b       	sbc	r24, r25
     96c:	81 93       	st	Z+, r24

0000096e <sub_129_8>:
     96e:	8d 91       	ld	r24, X+
     970:	99 91       	ld	r25, Y+
     972:	89 0b       	sbc	r24, r25
     974:	81 93       	st	Z+, r24

00000976 <sub_129_7>:
     976:	8d 91       	ld	r24, X+
     978:	99 91       	ld	r25, Y+
     97a:	89 0b       	sbc	r24, r25
     97c:	81 93       	st	Z+, r24

0000097e <sub_129_6>:
     97e:	8d 91       	ld	r24, X+
     980:	99 91       	ld	r25, Y+
     982:	89 0b       	sbc	r24, r25
     984:	81 93       	st	Z+, r24

00000986 <sub_129_5>:
     986:	8d 91       	ld	r24, X+
     988:	99 91       	ld	r25, Y+
     98a:	89 0b       	sbc	r24, r25
     98c:	81 93       	st	Z+, r24

0000098e <sub_129_4>:
     98e:	8d 91       	ld	r24, X+
     990:	99 91       	ld	r25, Y+
     992:	89 0b       	sbc	r24, r25
     994:	81 93       	st	Z+, r24

00000996 <sub_129_3>:
     996:	8d 91       	ld	r24, X+
     998:	99 91       	ld	r25, Y+
     99a:	89 0b       	sbc	r24, r25
     99c:	81 93       	st	Z+, r24

0000099e <sub_129_2>:
     99e:	8d 91       	ld	r24, X+
     9a0:	99 91       	ld	r25, Y+
     9a2:	89 0b       	sbc	r24, r25
     9a4:	81 93       	st	Z+, r24

000009a6 <sub_129_1>:
     9a6:	8d 91       	ld	r24, X+
     9a8:	99 91       	ld	r25, Y+
     9aa:	89 0b       	sbc	r24, r25
     9ac:	81 93       	st	Z+, r24
     9ae:	81 2d       	mov	r24, r1
     9b0:	88 1f       	adc	r24, r24
     9b2:	df 91       	pop	r29
     9b4:	cf 91       	pop	r28
     9b6:	08 95       	ret

000009b8 <uECC_vli_mult>:
     9b8:	cf 93       	push	r28
     9ba:	df 93       	push	r29
     9bc:	fc 01       	movw	r30, r24
     9be:	db 01       	movw	r26, r22
     9c0:	ea 01       	movw	r28, r20
     9c2:	90 e0       	ldi	r25, 0x00	; 0
     9c4:	89 2f       	mov	r24, r25
     9c6:	39 2f       	mov	r19, r25
     9c8:	49 2f       	mov	r20, r25
     9ca:	51 e0       	ldi	r21, 0x01	; 1
     9cc:	60 e0       	ldi	r22, 0x00	; 0
     9ce:	c5 0f       	add	r28, r21
     9d0:	d4 1f       	adc	r29, r20
     9d2:	0d 90       	ld	r0, X+
     9d4:	1a 90       	ld	r1, -Y
     9d6:	01 9c       	mul	r0, r1
     9d8:	90 0d       	add	r25, r0
     9da:	81 1d       	adc	r24, r1
     9dc:	34 1f       	adc	r19, r20
     9de:	63 95       	inc	r22
     9e0:	65 17       	cp	r22, r21
     9e2:	b8 f3       	brcs	.-18     	; 0x9d2 <uECC_vli_mult+0x1a>
     9e4:	a5 1b       	sub	r26, r21
     9e6:	b4 0b       	sbc	r27, r20
     9e8:	91 93       	st	Z+, r25
     9ea:	98 2f       	mov	r25, r24
     9ec:	83 2f       	mov	r24, r19
     9ee:	34 2f       	mov	r19, r20
     9f0:	53 95       	inc	r21
     9f2:	52 17       	cp	r21, r18
     9f4:	58 f3       	brcs	.-42     	; 0x9cc <uECC_vli_mult+0x14>
     9f6:	52 2f       	mov	r21, r18
     9f8:	c2 0f       	add	r28, r18
     9fa:	d4 1f       	adc	r29, r20
     9fc:	60 e0       	ldi	r22, 0x00	; 0
     9fe:	0d 90       	ld	r0, X+
     a00:	1a 90       	ld	r1, -Y
     a02:	01 9c       	mul	r0, r1
     a04:	90 0d       	add	r25, r0
     a06:	81 1d       	adc	r24, r1
     a08:	34 1f       	adc	r19, r20
     a0a:	63 95       	inc	r22
     a0c:	65 17       	cp	r22, r21
     a0e:	b8 f3       	brcs	.-18     	; 0x9fe <uECC_vli_mult+0x46>
     a10:	c5 0f       	add	r28, r21
     a12:	d4 1f       	adc	r29, r20
     a14:	91 93       	st	Z+, r25
     a16:	98 2f       	mov	r25, r24
     a18:	83 2f       	mov	r24, r19
     a1a:	34 2f       	mov	r19, r20
     a1c:	5a 95       	dec	r21
     a1e:	a5 1b       	sub	r26, r21
     a20:	b4 0b       	sbc	r27, r20
     a22:	54 17       	cp	r21, r20
     a24:	59 f7       	brne	.-42     	; 0x9fc <uECC_vli_mult+0x44>
     a26:	91 93       	st	Z+, r25
     a28:	11 24       	eor	r1, r1
     a2a:	df 91       	pop	r29
     a2c:	cf 91       	pop	r28
     a2e:	08 95       	ret

00000a30 <uECC_vli_isZero>:
     a30:	16 16       	cp	r1, r22
     a32:	7c f4       	brge	.+30     	; 0xa52 <uECC_vli_isZero+0x22>
     a34:	fc 01       	movw	r30, r24
     a36:	61 50       	subi	r22, 0x01	; 1
     a38:	46 2f       	mov	r20, r22
     a3a:	50 e0       	ldi	r21, 0x00	; 0
     a3c:	4f 5f       	subi	r20, 0xFF	; 255
     a3e:	5f 4f       	sbci	r21, 0xFF	; 255
     a40:	48 0f       	add	r20, r24
     a42:	59 1f       	adc	r21, r25
     a44:	90 e0       	ldi	r25, 0x00	; 0
     a46:	21 91       	ld	r18, Z+
     a48:	92 2b       	or	r25, r18
     a4a:	e4 17       	cp	r30, r20
     a4c:	f5 07       	cpc	r31, r21
     a4e:	d9 f7       	brne	.-10     	; 0xa46 <uECC_vli_isZero+0x16>
     a50:	01 c0       	rjmp	.+2      	; 0xa54 <uECC_vli_isZero+0x24>
     a52:	90 e0       	ldi	r25, 0x00	; 0
     a54:	81 e0       	ldi	r24, 0x01	; 1
     a56:	91 11       	cpse	r25, r1
     a58:	80 e0       	ldi	r24, 0x00	; 0
     a5a:	08 95       	ret

00000a5c <uECC_vli_testBit>:
     a5c:	9b 01       	movw	r18, r22
     a5e:	35 95       	asr	r19
     a60:	27 95       	ror	r18
     a62:	35 95       	asr	r19
     a64:	27 95       	ror	r18
     a66:	35 95       	asr	r19
     a68:	27 95       	ror	r18
     a6a:	82 0f       	add	r24, r18
     a6c:	93 1f       	adc	r25, r19
     a6e:	67 70       	andi	r22, 0x07	; 7
     a70:	77 27       	eor	r23, r23
     a72:	21 e0       	ldi	r18, 0x01	; 1
     a74:	30 e0       	ldi	r19, 0x00	; 0
     a76:	02 c0       	rjmp	.+4      	; 0xa7c <uECC_vli_testBit+0x20>
     a78:	22 0f       	add	r18, r18
     a7a:	33 1f       	adc	r19, r19
     a7c:	6a 95       	dec	r22
     a7e:	e2 f7       	brpl	.-8      	; 0xa78 <uECC_vli_testBit+0x1c>
     a80:	fc 01       	movw	r30, r24
     a82:	80 81       	ld	r24, Z
     a84:	82 23       	and	r24, r18
     a86:	08 95       	ret

00000a88 <uECC_vli_numBits>:
     a88:	9c 01       	movw	r18, r24
     a8a:	61 50       	subi	r22, 0x01	; 1
     a8c:	92 f0       	brmi	.+36     	; 0xab2 <uECC_vli_numBits+0x2a>
     a8e:	fc 01       	movw	r30, r24
     a90:	e6 0f       	add	r30, r22
     a92:	f1 1d       	adc	r31, r1
     a94:	67 fd       	sbrc	r22, 7
     a96:	fa 95       	dec	r31
     a98:	80 81       	ld	r24, Z
     a9a:	81 11       	cpse	r24, r1
     a9c:	0a c0       	rjmp	.+20     	; 0xab2 <uECC_vli_numBits+0x2a>
     a9e:	61 50       	subi	r22, 0x01	; 1
     aa0:	42 f0       	brmi	.+16     	; 0xab2 <uECC_vli_numBits+0x2a>
     aa2:	f9 01       	movw	r30, r18
     aa4:	e6 0f       	add	r30, r22
     aa6:	f1 1d       	adc	r31, r1
     aa8:	67 fd       	sbrc	r22, 7
     aaa:	fa 95       	dec	r31
     aac:	90 81       	ld	r25, Z
     aae:	99 23       	and	r25, r25
     ab0:	b1 f3       	breq	.-20     	; 0xa9e <uECC_vli_numBits+0x16>
     ab2:	6f 5f       	subi	r22, 0xFF	; 255
     ab4:	e9 f0       	breq	.+58     	; 0xaf0 <uECC_vli_numBits+0x68>
     ab6:	26 0f       	add	r18, r22
     ab8:	31 1d       	adc	r19, r1
     aba:	67 fd       	sbrc	r22, 7
     abc:	3a 95       	dec	r19
     abe:	f9 01       	movw	r30, r18
     ac0:	31 97       	sbiw	r30, 0x01	; 1
     ac2:	80 81       	ld	r24, Z
     ac4:	88 23       	and	r24, r24
     ac6:	31 f0       	breq	.+12     	; 0xad4 <uECC_vli_numBits+0x4c>
     ac8:	20 e0       	ldi	r18, 0x00	; 0
     aca:	86 95       	lsr	r24
     acc:	2f 5f       	subi	r18, 0xFF	; 255
     ace:	81 11       	cpse	r24, r1
     ad0:	fc cf       	rjmp	.-8      	; 0xaca <uECC_vli_numBits+0x42>
     ad2:	01 c0       	rjmp	.+2      	; 0xad6 <uECC_vli_numBits+0x4e>
     ad4:	20 e0       	ldi	r18, 0x00	; 0
     ad6:	86 2f       	mov	r24, r22
     ad8:	66 0f       	add	r22, r22
     ada:	99 0b       	sbc	r25, r25
     adc:	01 97       	sbiw	r24, 0x01	; 1
     ade:	88 0f       	add	r24, r24
     ae0:	99 1f       	adc	r25, r25
     ae2:	88 0f       	add	r24, r24
     ae4:	99 1f       	adc	r25, r25
     ae6:	88 0f       	add	r24, r24
     ae8:	99 1f       	adc	r25, r25
     aea:	82 0f       	add	r24, r18
     aec:	91 1d       	adc	r25, r1
     aee:	08 95       	ret
     af0:	80 e0       	ldi	r24, 0x00	; 0
     af2:	90 e0       	ldi	r25, 0x00	; 0
     af4:	08 95       	ret

00000af6 <uECC_vli_cmp_unsafe>:
     af6:	dc 01       	movw	r26, r24
     af8:	41 50       	subi	r20, 0x01	; 1
     afa:	2a f1       	brmi	.+74     	; 0xb46 <uECC_vli_cmp_unsafe+0x50>
     afc:	84 2f       	mov	r24, r20
     afe:	04 2e       	mov	r0, r20
     b00:	00 0c       	add	r0, r0
     b02:	99 0b       	sbc	r25, r25
     b04:	fd 01       	movw	r30, r26
     b06:	e8 0f       	add	r30, r24
     b08:	f9 1f       	adc	r31, r25
     b0a:	20 81       	ld	r18, Z
     b0c:	fb 01       	movw	r30, r22
     b0e:	e8 0f       	add	r30, r24
     b10:	f9 1f       	adc	r31, r25
     b12:	80 81       	ld	r24, Z
     b14:	82 17       	cp	r24, r18
     b16:	c8 f0       	brcs	.+50     	; 0xb4a <uECC_vli_cmp_unsafe+0x54>
     b18:	28 17       	cp	r18, r24
     b1a:	88 f4       	brcc	.+34     	; 0xb3e <uECC_vli_cmp_unsafe+0x48>
     b1c:	18 c0       	rjmp	.+48     	; 0xb4e <uECC_vli_cmp_unsafe+0x58>
     b1e:	24 2f       	mov	r18, r20
     b20:	04 2e       	mov	r0, r20
     b22:	00 0c       	add	r0, r0
     b24:	33 0b       	sbc	r19, r19
     b26:	fd 01       	movw	r30, r26
     b28:	e2 0f       	add	r30, r18
     b2a:	f3 1f       	adc	r31, r19
     b2c:	50 81       	ld	r21, Z
     b2e:	fb 01       	movw	r30, r22
     b30:	e2 0f       	add	r30, r18
     b32:	f3 1f       	adc	r31, r19
     b34:	90 81       	ld	r25, Z
     b36:	95 17       	cp	r25, r21
     b38:	60 f0       	brcs	.+24     	; 0xb52 <uECC_vli_cmp_unsafe+0x5c>
     b3a:	59 17       	cp	r21, r25
     b3c:	60 f0       	brcs	.+24     	; 0xb56 <uECC_vli_cmp_unsafe+0x60>
     b3e:	41 50       	subi	r20, 0x01	; 1
     b40:	72 f7       	brpl	.-36     	; 0xb1e <uECC_vli_cmp_unsafe+0x28>
     b42:	80 e0       	ldi	r24, 0x00	; 0
     b44:	08 95       	ret
     b46:	80 e0       	ldi	r24, 0x00	; 0
     b48:	08 95       	ret
     b4a:	81 e0       	ldi	r24, 0x01	; 1
     b4c:	08 95       	ret
     b4e:	8f ef       	ldi	r24, 0xFF	; 255
     b50:	08 95       	ret
     b52:	81 e0       	ldi	r24, 0x01	; 1
     b54:	08 95       	ret
     b56:	8f ef       	ldi	r24, 0xFF	; 255
     b58:	08 95       	ret

00000b5a <uECC_vli_cmp>:
     b5a:	0f 93       	push	r16
     b5c:	1f 93       	push	r17
     b5e:	cf 93       	push	r28
     b60:	df 93       	push	r29
     b62:	cd b7       	in	r28, 0x3d	; 61
     b64:	de b7       	in	r29, 0x3e	; 62
     b66:	a0 97       	sbiw	r28, 0x20	; 32
     b68:	0f b6       	in	r0, 0x3f	; 63
     b6a:	f8 94       	cli
     b6c:	de bf       	out	0x3e, r29	; 62
     b6e:	0f be       	out	0x3f, r0	; 63
     b70:	cd bf       	out	0x3d, r28	; 61
     b72:	14 2f       	mov	r17, r20
     b74:	24 2f       	mov	r18, r20
     b76:	ab 01       	movw	r20, r22
     b78:	bc 01       	movw	r22, r24
     b7a:	ce 01       	movw	r24, r28
     b7c:	01 96       	adiw	r24, 0x01	; 1
     b7e:	4b de       	rcall	.-874    	; 0x816 <uECC_vli_sub>
     b80:	08 2f       	mov	r16, r24
     b82:	61 2f       	mov	r22, r17
     b84:	ce 01       	movw	r24, r28
     b86:	01 96       	adiw	r24, 0x01	; 1
     b88:	53 df       	rcall	.-346    	; 0xa30 <uECC_vli_isZero>
     b8a:	91 e0       	ldi	r25, 0x01	; 1
     b8c:	81 11       	cpse	r24, r1
     b8e:	90 e0       	ldi	r25, 0x00	; 0
     b90:	81 e0       	ldi	r24, 0x01	; 1
     b92:	01 11       	cpse	r16, r1
     b94:	01 c0       	rjmp	.+2      	; 0xb98 <uECC_vli_cmp+0x3e>
     b96:	80 e0       	ldi	r24, 0x00	; 0
     b98:	88 0f       	add	r24, r24
     b9a:	98 1b       	sub	r25, r24
     b9c:	89 2f       	mov	r24, r25
     b9e:	a0 96       	adiw	r28, 0x20	; 32
     ba0:	0f b6       	in	r0, 0x3f	; 63
     ba2:	f8 94       	cli
     ba4:	de bf       	out	0x3e, r29	; 62
     ba6:	0f be       	out	0x3f, r0	; 63
     ba8:	cd bf       	out	0x3d, r28	; 61
     baa:	df 91       	pop	r29
     bac:	cf 91       	pop	r28
     bae:	1f 91       	pop	r17
     bb0:	0f 91       	pop	r16
     bb2:	08 95       	ret

00000bb4 <uECC_vli_modAdd>:
     bb4:	ef 92       	push	r14
     bb6:	ff 92       	push	r15
     bb8:	0f 93       	push	r16
     bba:	cf 93       	push	r28
     bbc:	df 93       	push	r29
     bbe:	ec 01       	movw	r28, r24
     bc0:	79 01       	movw	r14, r18
     bc2:	20 2f       	mov	r18, r16
     bc4:	57 dd       	rcall	.-1362   	; 0x674 <uECC_vli_add>
     bc6:	81 11       	cpse	r24, r1
     bc8:	06 c0       	rjmp	.+12     	; 0xbd6 <uECC_vli_modAdd+0x22>
     bca:	40 2f       	mov	r20, r16
     bcc:	be 01       	movw	r22, r28
     bce:	c7 01       	movw	r24, r14
     bd0:	92 df       	rcall	.-220    	; 0xaf6 <uECC_vli_cmp_unsafe>
     bd2:	81 30       	cpi	r24, 0x01	; 1
     bd4:	29 f0       	breq	.+10     	; 0xbe0 <uECC_vli_modAdd+0x2c>
     bd6:	20 2f       	mov	r18, r16
     bd8:	a7 01       	movw	r20, r14
     bda:	be 01       	movw	r22, r28
     bdc:	ce 01       	movw	r24, r28
     bde:	1b de       	rcall	.-970    	; 0x816 <uECC_vli_sub>
     be0:	df 91       	pop	r29
     be2:	cf 91       	pop	r28
     be4:	0f 91       	pop	r16
     be6:	ff 90       	pop	r15
     be8:	ef 90       	pop	r14
     bea:	08 95       	ret

00000bec <uECC_vli_modSub>:
     bec:	ef 92       	push	r14
     bee:	ff 92       	push	r15
     bf0:	0f 93       	push	r16
     bf2:	cf 93       	push	r28
     bf4:	df 93       	push	r29
     bf6:	ec 01       	movw	r28, r24
     bf8:	79 01       	movw	r14, r18
     bfa:	20 2f       	mov	r18, r16
     bfc:	0c de       	rcall	.-1000   	; 0x816 <uECC_vli_sub>
     bfe:	88 23       	and	r24, r24
     c00:	29 f0       	breq	.+10     	; 0xc0c <uECC_vli_modSub+0x20>
     c02:	20 2f       	mov	r18, r16
     c04:	a7 01       	movw	r20, r14
     c06:	be 01       	movw	r22, r28
     c08:	ce 01       	movw	r24, r28
     c0a:	34 dd       	rcall	.-1432   	; 0x674 <uECC_vli_add>
     c0c:	df 91       	pop	r29
     c0e:	cf 91       	pop	r28
     c10:	0f 91       	pop	r16
     c12:	ff 90       	pop	r15
     c14:	ef 90       	pop	r14
     c16:	08 95       	ret

00000c18 <uECC_vli_modMult_fast>:
     c18:	ef 92       	push	r14
     c1a:	ff 92       	push	r15
     c1c:	0f 93       	push	r16
     c1e:	1f 93       	push	r17
     c20:	cf 93       	push	r28
     c22:	df 93       	push	r29
     c24:	cd b7       	in	r28, 0x3d	; 61
     c26:	de b7       	in	r29, 0x3e	; 62
     c28:	c0 54       	subi	r28, 0x40	; 64
     c2a:	d1 09       	sbc	r29, r1
     c2c:	0f b6       	in	r0, 0x3f	; 63
     c2e:	f8 94       	cli
     c30:	de bf       	out	0x3e, r29	; 62
     c32:	0f be       	out	0x3f, r0	; 63
     c34:	cd bf       	out	0x3d, r28	; 61
     c36:	7c 01       	movw	r14, r24
     c38:	89 01       	movw	r16, r18
     c3a:	f9 01       	movw	r30, r18
     c3c:	20 81       	ld	r18, Z
     c3e:	ce 01       	movw	r24, r28
     c40:	01 96       	adiw	r24, 0x01	; 1
     c42:	ba de       	rcall	.-652    	; 0x9b8 <uECC_vli_mult>
     c44:	f8 01       	movw	r30, r16
     c46:	e6 55       	subi	r30, 0x56	; 86
     c48:	ff 4f       	sbci	r31, 0xFF	; 255
     c4a:	01 90       	ld	r0, Z+
     c4c:	f0 81       	ld	r31, Z
     c4e:	e0 2d       	mov	r30, r0
     c50:	be 01       	movw	r22, r28
     c52:	6f 5f       	subi	r22, 0xFF	; 255
     c54:	7f 4f       	sbci	r23, 0xFF	; 255
     c56:	c7 01       	movw	r24, r14
     c58:	09 95       	icall
     c5a:	c0 5c       	subi	r28, 0xC0	; 192
     c5c:	df 4f       	sbci	r29, 0xFF	; 255
     c5e:	0f b6       	in	r0, 0x3f	; 63
     c60:	f8 94       	cli
     c62:	de bf       	out	0x3e, r29	; 62
     c64:	0f be       	out	0x3f, r0	; 63
     c66:	cd bf       	out	0x3d, r28	; 61
     c68:	df 91       	pop	r29
     c6a:	cf 91       	pop	r28
     c6c:	1f 91       	pop	r17
     c6e:	0f 91       	pop	r16
     c70:	ff 90       	pop	r15
     c72:	ef 90       	pop	r14
     c74:	08 95       	ret

00000c76 <uECC_vli_modSquare_fast>:
     c76:	9a 01       	movw	r18, r20
     c78:	ab 01       	movw	r20, r22
     c7a:	ce cf       	rjmp	.-100    	; 0xc18 <uECC_vli_modMult_fast>
     c7c:	08 95       	ret

00000c7e <vli_modInv_update>:
     c7e:	0f 93       	push	r16
     c80:	1f 93       	push	r17
     c82:	cf 93       	push	r28
     c84:	df 93       	push	r29
     c86:	8c 01       	movw	r16, r24
     c88:	c4 2f       	mov	r28, r20
     c8a:	fc 01       	movw	r30, r24
     c8c:	80 81       	ld	r24, Z
     c8e:	80 ff       	sbrs	r24, 0
     c90:	15 c0       	rjmp	.+42     	; 0xcbc <vli_modInv_update+0x3e>
     c92:	24 2f       	mov	r18, r20
     c94:	ab 01       	movw	r20, r22
     c96:	b8 01       	movw	r22, r16
     c98:	c8 01       	movw	r24, r16
     c9a:	ec dc       	rcall	.-1576   	; 0x674 <uECC_vli_add>
     c9c:	d8 2f       	mov	r29, r24
     c9e:	6c 2f       	mov	r22, r28
     ca0:	c8 01       	movw	r24, r16
     ca2:	76 dc       	rcall	.-1812   	; 0x590 <uECC_vli_rshift1>
     ca4:	dd 23       	and	r29, r29
     ca6:	69 f0       	breq	.+26     	; 0xcc2 <vli_modInv_update+0x44>
     ca8:	ec 2f       	mov	r30, r28
     caa:	cc 0f       	add	r28, r28
     cac:	ff 0b       	sbc	r31, r31
     cae:	31 97       	sbiw	r30, 0x01	; 1
     cb0:	e0 0f       	add	r30, r16
     cb2:	f1 1f       	adc	r31, r17
     cb4:	80 81       	ld	r24, Z
     cb6:	80 68       	ori	r24, 0x80	; 128
     cb8:	80 83       	st	Z, r24
     cba:	03 c0       	rjmp	.+6      	; 0xcc2 <vli_modInv_update+0x44>
     cbc:	64 2f       	mov	r22, r20
     cbe:	c8 01       	movw	r24, r16
     cc0:	67 dc       	rcall	.-1842   	; 0x590 <uECC_vli_rshift1>
     cc2:	df 91       	pop	r29
     cc4:	cf 91       	pop	r28
     cc6:	1f 91       	pop	r17
     cc8:	0f 91       	pop	r16
     cca:	08 95       	ret

00000ccc <uECC_vli_modInv>:
     ccc:	af 92       	push	r10
     cce:	bf 92       	push	r11
     cd0:	cf 92       	push	r12
     cd2:	df 92       	push	r13
     cd4:	ef 92       	push	r14
     cd6:	ff 92       	push	r15
     cd8:	1f 93       	push	r17
     cda:	cf 93       	push	r28
     cdc:	df 93       	push	r29
     cde:	cd b7       	in	r28, 0x3d	; 61
     ce0:	de b7       	in	r29, 0x3e	; 62
     ce2:	c0 58       	subi	r28, 0x80	; 128
     ce4:	d1 09       	sbc	r29, r1
     ce6:	0f b6       	in	r0, 0x3f	; 63
     ce8:	f8 94       	cli
     cea:	de bf       	out	0x3e, r29	; 62
     cec:	0f be       	out	0x3f, r0	; 63
     cee:	cd bf       	out	0x3d, r28	; 61
     cf0:	5c 01       	movw	r10, r24
     cf2:	6b 01       	movw	r12, r22
     cf4:	7a 01       	movw	r14, r20
     cf6:	12 2f       	mov	r17, r18
     cf8:	62 2f       	mov	r22, r18
     cfa:	c6 01       	movw	r24, r12
     cfc:	99 de       	rcall	.-718    	; 0xa30 <uECC_vli_isZero>
     cfe:	88 23       	and	r24, r24
     d00:	21 f0       	breq	.+8      	; 0xd0a <uECC_vli_modInv+0x3e>
     d02:	61 2f       	mov	r22, r17
     d04:	c5 01       	movw	r24, r10
     d06:	d0 db       	rcall	.-2144   	; 0x4a8 <uECC_vli_clear>
     d08:	a1 c0       	rjmp	.+322    	; 0xe4c <uECC_vli_modInv+0x180>
     d0a:	41 2f       	mov	r20, r17
     d0c:	b6 01       	movw	r22, r12
     d0e:	ce 01       	movw	r24, r28
     d10:	01 96       	adiw	r24, 0x01	; 1
     d12:	f1 db       	rcall	.-2078   	; 0x4f6 <uECC_vli_set>
     d14:	41 2f       	mov	r20, r17
     d16:	b7 01       	movw	r22, r14
     d18:	ce 01       	movw	r24, r28
     d1a:	81 96       	adiw	r24, 0x21	; 33
     d1c:	ec db       	rcall	.-2088   	; 0x4f6 <uECC_vli_set>
     d1e:	61 2f       	mov	r22, r17
     d20:	ce 01       	movw	r24, r28
     d22:	8f 5b       	subi	r24, 0xBF	; 191
     d24:	9f 4f       	sbci	r25, 0xFF	; 255
     d26:	c0 db       	rcall	.-2176   	; 0x4a8 <uECC_vli_clear>
     d28:	81 e0       	ldi	r24, 0x01	; 1
     d2a:	22 96       	adiw	r28, 0x02	; 2
     d2c:	8f af       	std	Y+63, r24	; 0x3f
     d2e:	22 97       	sbiw	r28, 0x02	; 2
     d30:	61 2f       	mov	r22, r17
     d32:	ce 01       	movw	r24, r28
     d34:	8f 59       	subi	r24, 0x9F	; 159
     d36:	9f 4f       	sbci	r25, 0xFF	; 255
     d38:	b7 db       	rcall	.-2194   	; 0x4a8 <uECC_vli_clear>
     d3a:	79 c0       	rjmp	.+242    	; 0xe2e <uECC_vli_modInv+0x162>
     d3c:	99 81       	ldd	r25, Y+1	; 0x01
     d3e:	90 fd       	sbrc	r25, 0
     d40:	0b c0       	rjmp	.+22     	; 0xd58 <uECC_vli_modInv+0x8c>
     d42:	61 2f       	mov	r22, r17
     d44:	ce 01       	movw	r24, r28
     d46:	01 96       	adiw	r24, 0x01	; 1
     d48:	23 dc       	rcall	.-1978   	; 0x590 <uECC_vli_rshift1>
     d4a:	41 2f       	mov	r20, r17
     d4c:	b7 01       	movw	r22, r14
     d4e:	ce 01       	movw	r24, r28
     d50:	8f 5b       	subi	r24, 0xBF	; 191
     d52:	9f 4f       	sbci	r25, 0xFF	; 255
     d54:	94 df       	rcall	.-216    	; 0xc7e <vli_modInv_update>
     d56:	6b c0       	rjmp	.+214    	; 0xe2e <uECC_vli_modInv+0x162>
     d58:	99 a1       	ldd	r25, Y+33	; 0x21
     d5a:	90 fd       	sbrc	r25, 0
     d5c:	0b c0       	rjmp	.+22     	; 0xd74 <uECC_vli_modInv+0xa8>
     d5e:	61 2f       	mov	r22, r17
     d60:	ce 01       	movw	r24, r28
     d62:	81 96       	adiw	r24, 0x21	; 33
     d64:	15 dc       	rcall	.-2006   	; 0x590 <uECC_vli_rshift1>
     d66:	41 2f       	mov	r20, r17
     d68:	b7 01       	movw	r22, r14
     d6a:	ce 01       	movw	r24, r28
     d6c:	8f 59       	subi	r24, 0x9F	; 159
     d6e:	9f 4f       	sbci	r25, 0xFF	; 255
     d70:	86 df       	rcall	.-244    	; 0xc7e <vli_modInv_update>
     d72:	5d c0       	rjmp	.+186    	; 0xe2e <uECC_vli_modInv+0x162>
     d74:	18 16       	cp	r1, r24
     d76:	74 f5       	brge	.+92     	; 0xdd4 <uECC_vli_modInv+0x108>
     d78:	21 2f       	mov	r18, r17
     d7a:	ae 01       	movw	r20, r28
     d7c:	4f 5d       	subi	r20, 0xDF	; 223
     d7e:	5f 4f       	sbci	r21, 0xFF	; 255
     d80:	be 01       	movw	r22, r28
     d82:	6f 5f       	subi	r22, 0xFF	; 255
     d84:	7f 4f       	sbci	r23, 0xFF	; 255
     d86:	cb 01       	movw	r24, r22
     d88:	46 dd       	rcall	.-1396   	; 0x816 <uECC_vli_sub>
     d8a:	61 2f       	mov	r22, r17
     d8c:	ce 01       	movw	r24, r28
     d8e:	01 96       	adiw	r24, 0x01	; 1
     d90:	ff db       	rcall	.-2050   	; 0x590 <uECC_vli_rshift1>
     d92:	41 2f       	mov	r20, r17
     d94:	be 01       	movw	r22, r28
     d96:	6f 59       	subi	r22, 0x9F	; 159
     d98:	7f 4f       	sbci	r23, 0xFF	; 255
     d9a:	ce 01       	movw	r24, r28
     d9c:	8f 5b       	subi	r24, 0xBF	; 191
     d9e:	9f 4f       	sbci	r25, 0xFF	; 255
     da0:	aa de       	rcall	.-684    	; 0xaf6 <uECC_vli_cmp_unsafe>
     da2:	88 23       	and	r24, r24
     da4:	3c f4       	brge	.+14     	; 0xdb4 <uECC_vli_modInv+0xe8>
     da6:	21 2f       	mov	r18, r17
     da8:	a7 01       	movw	r20, r14
     daa:	be 01       	movw	r22, r28
     dac:	6f 5b       	subi	r22, 0xBF	; 191
     dae:	7f 4f       	sbci	r23, 0xFF	; 255
     db0:	cb 01       	movw	r24, r22
     db2:	60 dc       	rcall	.-1856   	; 0x674 <uECC_vli_add>
     db4:	21 2f       	mov	r18, r17
     db6:	ae 01       	movw	r20, r28
     db8:	4f 59       	subi	r20, 0x9F	; 159
     dba:	5f 4f       	sbci	r21, 0xFF	; 255
     dbc:	be 01       	movw	r22, r28
     dbe:	6f 5b       	subi	r22, 0xBF	; 191
     dc0:	7f 4f       	sbci	r23, 0xFF	; 255
     dc2:	cb 01       	movw	r24, r22
     dc4:	28 dd       	rcall	.-1456   	; 0x816 <uECC_vli_sub>
     dc6:	41 2f       	mov	r20, r17
     dc8:	b7 01       	movw	r22, r14
     dca:	ce 01       	movw	r24, r28
     dcc:	8f 5b       	subi	r24, 0xBF	; 191
     dce:	9f 4f       	sbci	r25, 0xFF	; 255
     dd0:	56 df       	rcall	.-340    	; 0xc7e <vli_modInv_update>
     dd2:	2d c0       	rjmp	.+90     	; 0xe2e <uECC_vli_modInv+0x162>
     dd4:	21 2f       	mov	r18, r17
     dd6:	ae 01       	movw	r20, r28
     dd8:	4f 5f       	subi	r20, 0xFF	; 255
     dda:	5f 4f       	sbci	r21, 0xFF	; 255
     ddc:	be 01       	movw	r22, r28
     dde:	6f 5d       	subi	r22, 0xDF	; 223
     de0:	7f 4f       	sbci	r23, 0xFF	; 255
     de2:	cb 01       	movw	r24, r22
     de4:	18 dd       	rcall	.-1488   	; 0x816 <uECC_vli_sub>
     de6:	61 2f       	mov	r22, r17
     de8:	ce 01       	movw	r24, r28
     dea:	81 96       	adiw	r24, 0x21	; 33
     dec:	d1 db       	rcall	.-2142   	; 0x590 <uECC_vli_rshift1>
     dee:	41 2f       	mov	r20, r17
     df0:	be 01       	movw	r22, r28
     df2:	6f 5b       	subi	r22, 0xBF	; 191
     df4:	7f 4f       	sbci	r23, 0xFF	; 255
     df6:	ce 01       	movw	r24, r28
     df8:	8f 59       	subi	r24, 0x9F	; 159
     dfa:	9f 4f       	sbci	r25, 0xFF	; 255
     dfc:	7c de       	rcall	.-776    	; 0xaf6 <uECC_vli_cmp_unsafe>
     dfe:	88 23       	and	r24, r24
     e00:	3c f4       	brge	.+14     	; 0xe10 <uECC_vli_modInv+0x144>
     e02:	21 2f       	mov	r18, r17
     e04:	a7 01       	movw	r20, r14
     e06:	be 01       	movw	r22, r28
     e08:	6f 59       	subi	r22, 0x9F	; 159
     e0a:	7f 4f       	sbci	r23, 0xFF	; 255
     e0c:	cb 01       	movw	r24, r22
     e0e:	32 dc       	rcall	.-1948   	; 0x674 <uECC_vli_add>
     e10:	21 2f       	mov	r18, r17
     e12:	ae 01       	movw	r20, r28
     e14:	4f 5b       	subi	r20, 0xBF	; 191
     e16:	5f 4f       	sbci	r21, 0xFF	; 255
     e18:	be 01       	movw	r22, r28
     e1a:	6f 59       	subi	r22, 0x9F	; 159
     e1c:	7f 4f       	sbci	r23, 0xFF	; 255
     e1e:	cb 01       	movw	r24, r22
     e20:	fa dc       	rcall	.-1548   	; 0x816 <uECC_vli_sub>
     e22:	41 2f       	mov	r20, r17
     e24:	b7 01       	movw	r22, r14
     e26:	ce 01       	movw	r24, r28
     e28:	8f 59       	subi	r24, 0x9F	; 159
     e2a:	9f 4f       	sbci	r25, 0xFF	; 255
     e2c:	28 df       	rcall	.-432    	; 0xc7e <vli_modInv_update>
     e2e:	41 2f       	mov	r20, r17
     e30:	be 01       	movw	r22, r28
     e32:	6f 5d       	subi	r22, 0xDF	; 223
     e34:	7f 4f       	sbci	r23, 0xFF	; 255
     e36:	ce 01       	movw	r24, r28
     e38:	01 96       	adiw	r24, 0x01	; 1
     e3a:	5d de       	rcall	.-838    	; 0xaf6 <uECC_vli_cmp_unsafe>
     e3c:	81 11       	cpse	r24, r1
     e3e:	7e cf       	rjmp	.-260    	; 0xd3c <uECC_vli_modInv+0x70>
     e40:	41 2f       	mov	r20, r17
     e42:	be 01       	movw	r22, r28
     e44:	6f 5b       	subi	r22, 0xBF	; 191
     e46:	7f 4f       	sbci	r23, 0xFF	; 255
     e48:	c5 01       	movw	r24, r10
     e4a:	55 db       	rcall	.-2390   	; 0x4f6 <uECC_vli_set>
     e4c:	c0 58       	subi	r28, 0x80	; 128
     e4e:	df 4f       	sbci	r29, 0xFF	; 255
     e50:	0f b6       	in	r0, 0x3f	; 63
     e52:	f8 94       	cli
     e54:	de bf       	out	0x3e, r29	; 62
     e56:	0f be       	out	0x3f, r0	; 63
     e58:	cd bf       	out	0x3d, r28	; 61
     e5a:	df 91       	pop	r29
     e5c:	cf 91       	pop	r28
     e5e:	1f 91       	pop	r17
     e60:	ff 90       	pop	r15
     e62:	ef 90       	pop	r14
     e64:	df 90       	pop	r13
     e66:	cf 90       	pop	r12
     e68:	bf 90       	pop	r11
     e6a:	af 90       	pop	r10
     e6c:	08 95       	ret

00000e6e <double_jacobian_default>:
     e6e:	6f 92       	push	r6
     e70:	7f 92       	push	r7
     e72:	8f 92       	push	r8
     e74:	9f 92       	push	r9
     e76:	af 92       	push	r10
     e78:	bf 92       	push	r11
     e7a:	cf 92       	push	r12
     e7c:	df 92       	push	r13
     e7e:	ef 92       	push	r14
     e80:	ff 92       	push	r15
     e82:	0f 93       	push	r16
     e84:	1f 93       	push	r17
     e86:	cf 93       	push	r28
     e88:	df 93       	push	r29
     e8a:	cd b7       	in	r28, 0x3d	; 61
     e8c:	de b7       	in	r29, 0x3e	; 62
     e8e:	c0 54       	subi	r28, 0x40	; 64
     e90:	d1 09       	sbc	r29, r1
     e92:	0f b6       	in	r0, 0x3f	; 63
     e94:	f8 94       	cli
     e96:	de bf       	out	0x3e, r29	; 62
     e98:	0f be       	out	0x3f, r0	; 63
     e9a:	cd bf       	out	0x3d, r28	; 61
     e9c:	6c 01       	movw	r12, r24
     e9e:	3b 01       	movw	r6, r22
     ea0:	7a 01       	movw	r14, r20
     ea2:	59 01       	movw	r10, r18
     ea4:	f9 01       	movw	r30, r18
     ea6:	10 81       	ld	r17, Z
     ea8:	61 2f       	mov	r22, r17
     eaa:	ca 01       	movw	r24, r20
     eac:	c1 dd       	rcall	.-1150   	; 0xa30 <uECC_vli_isZero>
     eae:	81 11       	cpse	r24, r1
     eb0:	96 c0       	rjmp	.+300    	; 0xfde <double_jacobian_default+0x170>
     eb2:	a5 01       	movw	r20, r10
     eb4:	b3 01       	movw	r22, r6
     eb6:	ce 01       	movw	r24, r28
     eb8:	01 96       	adiw	r24, 0x01	; 1
     eba:	dd de       	rcall	.-582    	; 0xc76 <uECC_vli_modSquare_fast>
     ebc:	95 01       	movw	r18, r10
     ebe:	ae 01       	movw	r20, r28
     ec0:	4f 5f       	subi	r20, 0xFF	; 255
     ec2:	5f 4f       	sbci	r21, 0xFF	; 255
     ec4:	b6 01       	movw	r22, r12
     ec6:	ce 01       	movw	r24, r28
     ec8:	81 96       	adiw	r24, 0x21	; 33
     eca:	a6 de       	rcall	.-692    	; 0xc18 <uECC_vli_modMult_fast>
     ecc:	a5 01       	movw	r20, r10
     ece:	be 01       	movw	r22, r28
     ed0:	6f 5f       	subi	r22, 0xFF	; 255
     ed2:	7f 4f       	sbci	r23, 0xFF	; 255
     ed4:	cb 01       	movw	r24, r22
     ed6:	cf de       	rcall	.-610    	; 0xc76 <uECC_vli_modSquare_fast>
     ed8:	95 01       	movw	r18, r10
     eda:	a7 01       	movw	r20, r14
     edc:	b3 01       	movw	r22, r6
     ede:	c3 01       	movw	r24, r6
     ee0:	9b de       	rcall	.-714    	; 0xc18 <uECC_vli_modMult_fast>
     ee2:	a5 01       	movw	r20, r10
     ee4:	b7 01       	movw	r22, r14
     ee6:	c7 01       	movw	r24, r14
     ee8:	c6 de       	rcall	.-628    	; 0xc76 <uECC_vli_modSquare_fast>
     eea:	45 01       	movw	r8, r10
     eec:	f4 e0       	ldi	r31, 0x04	; 4
     eee:	8f 0e       	add	r8, r31
     ef0:	91 1c       	adc	r9, r1
     ef2:	01 2f       	mov	r16, r17
     ef4:	94 01       	movw	r18, r8
     ef6:	a7 01       	movw	r20, r14
     ef8:	b6 01       	movw	r22, r12
     efa:	c6 01       	movw	r24, r12
     efc:	5b de       	rcall	.-842    	; 0xbb4 <uECC_vli_modAdd>
     efe:	94 01       	movw	r18, r8
     f00:	a7 01       	movw	r20, r14
     f02:	b7 01       	movw	r22, r14
     f04:	c7 01       	movw	r24, r14
     f06:	56 de       	rcall	.-852    	; 0xbb4 <uECC_vli_modAdd>
     f08:	94 01       	movw	r18, r8
     f0a:	a7 01       	movw	r20, r14
     f0c:	b6 01       	movw	r22, r12
     f0e:	c7 01       	movw	r24, r14
     f10:	6d de       	rcall	.-806    	; 0xbec <uECC_vli_modSub>
     f12:	95 01       	movw	r18, r10
     f14:	a7 01       	movw	r20, r14
     f16:	b6 01       	movw	r22, r12
     f18:	c6 01       	movw	r24, r12
     f1a:	7e de       	rcall	.-772    	; 0xc18 <uECC_vli_modMult_fast>
     f1c:	94 01       	movw	r18, r8
     f1e:	a6 01       	movw	r20, r12
     f20:	b6 01       	movw	r22, r12
     f22:	c7 01       	movw	r24, r14
     f24:	47 de       	rcall	.-882    	; 0xbb4 <uECC_vli_modAdd>
     f26:	94 01       	movw	r18, r8
     f28:	a7 01       	movw	r20, r14
     f2a:	b6 01       	movw	r22, r12
     f2c:	c6 01       	movw	r24, r12
     f2e:	42 de       	rcall	.-892    	; 0xbb4 <uECC_vli_modAdd>
     f30:	60 e0       	ldi	r22, 0x00	; 0
     f32:	70 e0       	ldi	r23, 0x00	; 0
     f34:	c6 01       	movw	r24, r12
     f36:	92 dd       	rcall	.-1244   	; 0xa5c <uECC_vli_testBit>
     f38:	88 23       	and	r24, r24
     f3a:	c1 f0       	breq	.+48     	; 0xf6c <double_jacobian_default+0xfe>
     f3c:	21 2f       	mov	r18, r17
     f3e:	a4 01       	movw	r20, r8
     f40:	b6 01       	movw	r22, r12
     f42:	c6 01       	movw	r24, r12
     f44:	97 db       	rcall	.-2258   	; 0x674 <uECC_vli_add>
     f46:	08 2f       	mov	r16, r24
     f48:	61 2f       	mov	r22, r17
     f4a:	c6 01       	movw	r24, r12
     f4c:	21 db       	rcall	.-2494   	; 0x590 <uECC_vli_rshift1>
     f4e:	e1 2f       	mov	r30, r17
     f50:	01 2e       	mov	r0, r17
     f52:	00 0c       	add	r0, r0
     f54:	ff 0b       	sbc	r31, r31
     f56:	31 97       	sbiw	r30, 0x01	; 1
     f58:	ec 0d       	add	r30, r12
     f5a:	fd 1d       	adc	r31, r13
     f5c:	20 e8       	ldi	r18, 0x80	; 128
     f5e:	02 9f       	mul	r16, r18
     f60:	c0 01       	movw	r24, r0
     f62:	11 24       	eor	r1, r1
     f64:	00 81       	ld	r16, Z
     f66:	08 2b       	or	r16, r24
     f68:	00 83       	st	Z, r16
     f6a:	03 c0       	rjmp	.+6      	; 0xf72 <double_jacobian_default+0x104>
     f6c:	61 2f       	mov	r22, r17
     f6e:	c6 01       	movw	r24, r12
     f70:	0f db       	rcall	.-2530   	; 0x590 <uECC_vli_rshift1>
     f72:	a5 01       	movw	r20, r10
     f74:	b6 01       	movw	r22, r12
     f76:	c7 01       	movw	r24, r14
     f78:	7e de       	rcall	.-772    	; 0xc76 <uECC_vli_modSquare_fast>
     f7a:	01 2f       	mov	r16, r17
     f7c:	94 01       	movw	r18, r8
     f7e:	ae 01       	movw	r20, r28
     f80:	4f 5d       	subi	r20, 0xDF	; 223
     f82:	5f 4f       	sbci	r21, 0xFF	; 255
     f84:	b7 01       	movw	r22, r14
     f86:	c7 01       	movw	r24, r14
     f88:	31 de       	rcall	.-926    	; 0xbec <uECC_vli_modSub>
     f8a:	94 01       	movw	r18, r8
     f8c:	ae 01       	movw	r20, r28
     f8e:	4f 5d       	subi	r20, 0xDF	; 223
     f90:	5f 4f       	sbci	r21, 0xFF	; 255
     f92:	b7 01       	movw	r22, r14
     f94:	c7 01       	movw	r24, r14
     f96:	2a de       	rcall	.-940    	; 0xbec <uECC_vli_modSub>
     f98:	94 01       	movw	r18, r8
     f9a:	a7 01       	movw	r20, r14
     f9c:	be 01       	movw	r22, r28
     f9e:	6f 5d       	subi	r22, 0xDF	; 223
     fa0:	7f 4f       	sbci	r23, 0xFF	; 255
     fa2:	cb 01       	movw	r24, r22
     fa4:	23 de       	rcall	.-954    	; 0xbec <uECC_vli_modSub>
     fa6:	95 01       	movw	r18, r10
     fa8:	ae 01       	movw	r20, r28
     faa:	4f 5d       	subi	r20, 0xDF	; 223
     fac:	5f 4f       	sbci	r21, 0xFF	; 255
     fae:	b6 01       	movw	r22, r12
     fb0:	c6 01       	movw	r24, r12
     fb2:	32 de       	rcall	.-924    	; 0xc18 <uECC_vli_modMult_fast>
     fb4:	94 01       	movw	r18, r8
     fb6:	ae 01       	movw	r20, r28
     fb8:	4f 5f       	subi	r20, 0xFF	; 255
     fba:	5f 4f       	sbci	r21, 0xFF	; 255
     fbc:	b6 01       	movw	r22, r12
     fbe:	ca 01       	movw	r24, r20
     fc0:	15 de       	rcall	.-982    	; 0xbec <uECC_vli_modSub>
     fc2:	41 2f       	mov	r20, r17
     fc4:	b7 01       	movw	r22, r14
     fc6:	c6 01       	movw	r24, r12
     fc8:	96 da       	rcall	.-2772   	; 0x4f6 <uECC_vli_set>
     fca:	41 2f       	mov	r20, r17
     fcc:	b3 01       	movw	r22, r6
     fce:	c7 01       	movw	r24, r14
     fd0:	92 da       	rcall	.-2780   	; 0x4f6 <uECC_vli_set>
     fd2:	41 2f       	mov	r20, r17
     fd4:	be 01       	movw	r22, r28
     fd6:	6f 5f       	subi	r22, 0xFF	; 255
     fd8:	7f 4f       	sbci	r23, 0xFF	; 255
     fda:	c3 01       	movw	r24, r6
     fdc:	8c da       	rcall	.-2792   	; 0x4f6 <uECC_vli_set>
     fde:	c0 5c       	subi	r28, 0xC0	; 192
     fe0:	df 4f       	sbci	r29, 0xFF	; 255
     fe2:	0f b6       	in	r0, 0x3f	; 63
     fe4:	f8 94       	cli
     fe6:	de bf       	out	0x3e, r29	; 62
     fe8:	0f be       	out	0x3f, r0	; 63
     fea:	cd bf       	out	0x3d, r28	; 61
     fec:	df 91       	pop	r29
     fee:	cf 91       	pop	r28
     ff0:	1f 91       	pop	r17
     ff2:	0f 91       	pop	r16
     ff4:	ff 90       	pop	r15
     ff6:	ef 90       	pop	r14
     ff8:	df 90       	pop	r13
     ffa:	cf 90       	pop	r12
     ffc:	bf 90       	pop	r11
     ffe:	af 90       	pop	r10
    1000:	9f 90       	pop	r9
    1002:	8f 90       	pop	r8
    1004:	7f 90       	pop	r7
    1006:	6f 90       	pop	r6
    1008:	08 95       	ret

0000100a <x_side_default>:
    100a:	6f 92       	push	r6
    100c:	7f 92       	push	r7
    100e:	8f 92       	push	r8
    1010:	9f 92       	push	r9
    1012:	af 92       	push	r10
    1014:	bf 92       	push	r11
    1016:	cf 92       	push	r12
    1018:	df 92       	push	r13
    101a:	ef 92       	push	r14
    101c:	ff 92       	push	r15
    101e:	0f 93       	push	r16
    1020:	1f 93       	push	r17
    1022:	cf 93       	push	r28
    1024:	df 93       	push	r29
    1026:	cd b7       	in	r28, 0x3d	; 61
    1028:	de b7       	in	r29, 0x3e	; 62
    102a:	a0 97       	sbiw	r28, 0x20	; 32
    102c:	0f b6       	in	r0, 0x3f	; 63
    102e:	f8 94       	cli
    1030:	de bf       	out	0x3e, r29	; 62
    1032:	0f be       	out	0x3f, r0	; 63
    1034:	cd bf       	out	0x3d, r28	; 61
    1036:	7c 01       	movw	r14, r24
    1038:	4b 01       	movw	r8, r22
    103a:	6a 01       	movw	r12, r20
    103c:	ce 01       	movw	r24, r28
    103e:	01 96       	adiw	r24, 0x01	; 1
    1040:	3c 01       	movw	r6, r24
    1042:	80 e2       	ldi	r24, 0x20	; 32
    1044:	f3 01       	movw	r30, r6
    1046:	11 92       	st	Z+, r1
    1048:	8a 95       	dec	r24
    104a:	e9 f7       	brne	.-6      	; 0x1046 <x_side_default+0x3c>
    104c:	83 e0       	ldi	r24, 0x03	; 3
    104e:	89 83       	std	Y+1, r24	; 0x01
    1050:	fa 01       	movw	r30, r20
    1052:	10 81       	ld	r17, Z
    1054:	c7 01       	movw	r24, r14
    1056:	0f de       	rcall	.-994    	; 0xc76 <uECC_vli_modSquare_fast>
    1058:	56 01       	movw	r10, r12
    105a:	f4 e0       	ldi	r31, 0x04	; 4
    105c:	af 0e       	add	r10, r31
    105e:	b1 1c       	adc	r11, r1
    1060:	01 2f       	mov	r16, r17
    1062:	95 01       	movw	r18, r10
    1064:	a3 01       	movw	r20, r6
    1066:	b7 01       	movw	r22, r14
    1068:	c7 01       	movw	r24, r14
    106a:	c0 dd       	rcall	.-1152   	; 0xbec <uECC_vli_modSub>
    106c:	96 01       	movw	r18, r12
    106e:	a4 01       	movw	r20, r8
    1070:	b7 01       	movw	r22, r14
    1072:	c7 01       	movw	r24, r14
    1074:	d1 dd       	rcall	.-1118   	; 0xc18 <uECC_vli_modMult_fast>
    1076:	a6 01       	movw	r20, r12
    1078:	4c 57       	subi	r20, 0x7C	; 124
    107a:	5f 4f       	sbci	r21, 0xFF	; 255
    107c:	95 01       	movw	r18, r10
    107e:	b7 01       	movw	r22, r14
    1080:	c7 01       	movw	r24, r14
    1082:	98 dd       	rcall	.-1232   	; 0xbb4 <uECC_vli_modAdd>
    1084:	a0 96       	adiw	r28, 0x20	; 32
    1086:	0f b6       	in	r0, 0x3f	; 63
    1088:	f8 94       	cli
    108a:	de bf       	out	0x3e, r29	; 62
    108c:	0f be       	out	0x3f, r0	; 63
    108e:	cd bf       	out	0x3d, r28	; 61
    1090:	df 91       	pop	r29
    1092:	cf 91       	pop	r28
    1094:	1f 91       	pop	r17
    1096:	0f 91       	pop	r16
    1098:	ff 90       	pop	r15
    109a:	ef 90       	pop	r14
    109c:	df 90       	pop	r13
    109e:	cf 90       	pop	r12
    10a0:	bf 90       	pop	r11
    10a2:	af 90       	pop	r10
    10a4:	9f 90       	pop	r9
    10a6:	8f 90       	pop	r8
    10a8:	7f 90       	pop	r7
    10aa:	6f 90       	pop	r6
    10ac:	08 95       	ret

000010ae <mod_sqrt_default>:
    10ae:	bf 92       	push	r11
    10b0:	cf 92       	push	r12
    10b2:	df 92       	push	r13
    10b4:	ef 92       	push	r14
    10b6:	ff 92       	push	r15
    10b8:	0f 93       	push	r16
    10ba:	1f 93       	push	r17
    10bc:	cf 93       	push	r28
    10be:	df 93       	push	r29
    10c0:	cd b7       	in	r28, 0x3d	; 61
    10c2:	de b7       	in	r29, 0x3e	; 62
    10c4:	c0 54       	subi	r28, 0x40	; 64
    10c6:	d1 09       	sbc	r29, r1
    10c8:	0f b6       	in	r0, 0x3f	; 63
    10ca:	f8 94       	cli
    10cc:	de bf       	out	0x3e, r29	; 62
    10ce:	0f be       	out	0x3f, r0	; 63
    10d0:	cd bf       	out	0x3d, r28	; 61
    10d2:	6c 01       	movw	r12, r24
    10d4:	7b 01       	movw	r14, r22
    10d6:	90 e2       	ldi	r25, 0x20	; 32
    10d8:	8e 01       	movw	r16, r28
    10da:	0f 5f       	subi	r16, 0xFF	; 255
    10dc:	1f 4f       	sbci	r17, 0xFF	; 255
    10de:	d8 01       	movw	r26, r16
    10e0:	e9 2f       	mov	r30, r25
    10e2:	1d 92       	st	X+, r1
    10e4:	ea 95       	dec	r30
    10e6:	e9 f7       	brne	.-6      	; 0x10e2 <mod_sqrt_default+0x34>
    10e8:	81 e0       	ldi	r24, 0x01	; 1
    10ea:	89 83       	std	Y+1, r24	; 0x01
    10ec:	fe 01       	movw	r30, r28
    10ee:	b1 96       	adiw	r30, 0x21	; 33
    10f0:	df 01       	movw	r26, r30
    10f2:	1d 92       	st	X+, r1
    10f4:	9a 95       	dec	r25
    10f6:	e9 f7       	brne	.-6      	; 0x10f2 <mod_sqrt_default+0x44>
    10f8:	89 a3       	std	Y+33, r24	; 0x21
    10fa:	fb 01       	movw	r30, r22
    10fc:	b0 80       	ld	r11, Z
    10fe:	6c 5f       	subi	r22, 0xFC	; 252
    1100:	7f 4f       	sbci	r23, 0xFF	; 255
    1102:	2b 2d       	mov	r18, r11
    1104:	a8 01       	movw	r20, r16
    1106:	c8 01       	movw	r24, r16
    1108:	b5 da       	rcall	.-2710   	; 0x674 <uECC_vli_add>
    110a:	6b 2d       	mov	r22, r11
    110c:	c8 01       	movw	r24, r16
    110e:	bc dc       	rcall	.-1672   	; 0xa88 <uECC_vli_numBits>
    1110:	8c 01       	movw	r16, r24
    1112:	01 50       	subi	r16, 0x01	; 1
    1114:	11 09       	sbc	r17, r1
    1116:	02 30       	cpi	r16, 0x02	; 2
    1118:	11 05       	cpc	r17, r1
    111a:	c4 f0       	brlt	.+48     	; 0x114c <__stack+0x4d>
    111c:	a7 01       	movw	r20, r14
    111e:	be 01       	movw	r22, r28
    1120:	6f 5d       	subi	r22, 0xDF	; 223
    1122:	7f 4f       	sbci	r23, 0xFF	; 255
    1124:	cb 01       	movw	r24, r22
    1126:	a7 dd       	rcall	.-1202   	; 0xc76 <uECC_vli_modSquare_fast>
    1128:	b8 01       	movw	r22, r16
    112a:	ce 01       	movw	r24, r28
    112c:	01 96       	adiw	r24, 0x01	; 1
    112e:	96 dc       	rcall	.-1748   	; 0xa5c <uECC_vli_testBit>
    1130:	88 23       	and	r24, r24
    1132:	39 f0       	breq	.+14     	; 0x1142 <__stack+0x43>
    1134:	97 01       	movw	r18, r14
    1136:	a6 01       	movw	r20, r12
    1138:	be 01       	movw	r22, r28
    113a:	6f 5d       	subi	r22, 0xDF	; 223
    113c:	7f 4f       	sbci	r23, 0xFF	; 255
    113e:	cb 01       	movw	r24, r22
    1140:	6b dd       	rcall	.-1322   	; 0xc18 <uECC_vli_modMult_fast>
    1142:	01 50       	subi	r16, 0x01	; 1
    1144:	11 09       	sbc	r17, r1
    1146:	01 30       	cpi	r16, 0x01	; 1
    1148:	11 05       	cpc	r17, r1
    114a:	41 f7       	brne	.-48     	; 0x111c <__stack+0x1d>
    114c:	4b 2d       	mov	r20, r11
    114e:	be 01       	movw	r22, r28
    1150:	6f 5d       	subi	r22, 0xDF	; 223
    1152:	7f 4f       	sbci	r23, 0xFF	; 255
    1154:	c6 01       	movw	r24, r12
    1156:	cf d9       	rcall	.-3170   	; 0x4f6 <uECC_vli_set>
    1158:	c0 5c       	subi	r28, 0xC0	; 192
    115a:	df 4f       	sbci	r29, 0xFF	; 255
    115c:	0f b6       	in	r0, 0x3f	; 63
    115e:	f8 94       	cli
    1160:	de bf       	out	0x3e, r29	; 62
    1162:	0f be       	out	0x3f, r0	; 63
    1164:	cd bf       	out	0x3d, r28	; 61
    1166:	df 91       	pop	r29
    1168:	cf 91       	pop	r28
    116a:	1f 91       	pop	r17
    116c:	0f 91       	pop	r16
    116e:	ff 90       	pop	r15
    1170:	ef 90       	pop	r14
    1172:	df 90       	pop	r13
    1174:	cf 90       	pop	r12
    1176:	bf 90       	pop	r11
    1178:	08 95       	ret

0000117a <vli_mmod_fast_secp256r1>:
    117a:	cf 92       	push	r12
    117c:	df 92       	push	r13
    117e:	ff 92       	push	r15
    1180:	0f 93       	push	r16
    1182:	1f 93       	push	r17
    1184:	cf 93       	push	r28
    1186:	df 93       	push	r29
    1188:	cd b7       	in	r28, 0x3d	; 61
    118a:	de b7       	in	r29, 0x3e	; 62
    118c:	a0 97       	sbiw	r28, 0x20	; 32
    118e:	0f b6       	in	r0, 0x3f	; 63
    1190:	f8 94       	cli
    1192:	de bf       	out	0x3e, r29	; 62
    1194:	0f be       	out	0x3f, r0	; 63
    1196:	cd bf       	out	0x3d, r28	; 61
    1198:	6c 01       	movw	r12, r24
    119a:	8b 01       	movw	r16, r22
    119c:	40 e2       	ldi	r20, 0x20	; 32
    119e:	ab d9       	rcall	.-3242   	; 0x4f6 <uECC_vli_set>
    11a0:	1c 82       	std	Y+4, r1	; 0x04
    11a2:	1b 82       	std	Y+3, r1	; 0x03
    11a4:	1a 82       	std	Y+2, r1	; 0x02
    11a6:	19 82       	std	Y+1, r1	; 0x01
    11a8:	18 86       	std	Y+8, r1	; 0x08
    11aa:	1f 82       	std	Y+7, r1	; 0x07
    11ac:	1e 82       	std	Y+6, r1	; 0x06
    11ae:	1d 82       	std	Y+5, r1	; 0x05
    11b0:	1c 86       	std	Y+12, r1	; 0x0c
    11b2:	1b 86       	std	Y+11, r1	; 0x0b
    11b4:	1a 86       	std	Y+10, r1	; 0x0a
    11b6:	19 86       	std	Y+9, r1	; 0x09
    11b8:	f8 01       	movw	r30, r16
    11ba:	84 a5       	ldd	r24, Z+44	; 0x2c
    11bc:	8d 87       	std	Y+13, r24	; 0x0d
    11be:	85 a5       	ldd	r24, Z+45	; 0x2d
    11c0:	8e 87       	std	Y+14, r24	; 0x0e
    11c2:	86 a5       	ldd	r24, Z+46	; 0x2e
    11c4:	8f 87       	std	Y+15, r24	; 0x0f
    11c6:	87 a5       	ldd	r24, Z+47	; 0x2f
    11c8:	88 8b       	std	Y+16, r24	; 0x10
    11ca:	80 a9       	ldd	r24, Z+48	; 0x30
    11cc:	89 8b       	std	Y+17, r24	; 0x11
    11ce:	81 a9       	ldd	r24, Z+49	; 0x31
    11d0:	8a 8b       	std	Y+18, r24	; 0x12
    11d2:	82 a9       	ldd	r24, Z+50	; 0x32
    11d4:	8b 8b       	std	Y+19, r24	; 0x13
    11d6:	83 a9       	ldd	r24, Z+51	; 0x33
    11d8:	8c 8b       	std	Y+20, r24	; 0x14
    11da:	84 a9       	ldd	r24, Z+52	; 0x34
    11dc:	8d 8b       	std	Y+21, r24	; 0x15
    11de:	85 a9       	ldd	r24, Z+53	; 0x35
    11e0:	8e 8b       	std	Y+22, r24	; 0x16
    11e2:	86 a9       	ldd	r24, Z+54	; 0x36
    11e4:	8f 8b       	std	Y+23, r24	; 0x17
    11e6:	87 a9       	ldd	r24, Z+55	; 0x37
    11e8:	88 8f       	std	Y+24, r24	; 0x18
    11ea:	80 ad       	ldd	r24, Z+56	; 0x38
    11ec:	89 8f       	std	Y+25, r24	; 0x19
    11ee:	81 ad       	ldd	r24, Z+57	; 0x39
    11f0:	8a 8f       	std	Y+26, r24	; 0x1a
    11f2:	82 ad       	ldd	r24, Z+58	; 0x3a
    11f4:	8b 8f       	std	Y+27, r24	; 0x1b
    11f6:	83 ad       	ldd	r24, Z+59	; 0x3b
    11f8:	8c 8f       	std	Y+28, r24	; 0x1c
    11fa:	84 ad       	ldd	r24, Z+60	; 0x3c
    11fc:	8d 8f       	std	Y+29, r24	; 0x1d
    11fe:	85 ad       	ldd	r24, Z+61	; 0x3d
    1200:	8e 8f       	std	Y+30, r24	; 0x1e
    1202:	86 ad       	ldd	r24, Z+62	; 0x3e
    1204:	8f 8f       	std	Y+31, r24	; 0x1f
    1206:	87 ad       	ldd	r24, Z+63	; 0x3f
    1208:	88 a3       	std	Y+32, r24	; 0x20
    120a:	20 e2       	ldi	r18, 0x20	; 32
    120c:	ae 01       	movw	r20, r28
    120e:	4f 5f       	subi	r20, 0xFF	; 255
    1210:	5f 4f       	sbci	r21, 0xFF	; 255
    1212:	ba 01       	movw	r22, r20
    1214:	ca 01       	movw	r24, r20
    1216:	2e da       	rcall	.-2980   	; 0x674 <uECC_vli_add>
    1218:	f8 2e       	mov	r15, r24
    121a:	20 e2       	ldi	r18, 0x20	; 32
    121c:	ae 01       	movw	r20, r28
    121e:	4f 5f       	subi	r20, 0xFF	; 255
    1220:	5f 4f       	sbci	r21, 0xFF	; 255
    1222:	b6 01       	movw	r22, r12
    1224:	c6 01       	movw	r24, r12
    1226:	26 da       	rcall	.-2996   	; 0x674 <uECC_vli_add>
    1228:	f8 0e       	add	r15, r24
    122a:	f8 01       	movw	r30, r16
    122c:	80 a9       	ldd	r24, Z+48	; 0x30
    122e:	8d 87       	std	Y+13, r24	; 0x0d
    1230:	81 a9       	ldd	r24, Z+49	; 0x31
    1232:	8e 87       	std	Y+14, r24	; 0x0e
    1234:	82 a9       	ldd	r24, Z+50	; 0x32
    1236:	8f 87       	std	Y+15, r24	; 0x0f
    1238:	83 a9       	ldd	r24, Z+51	; 0x33
    123a:	88 8b       	std	Y+16, r24	; 0x10
    123c:	84 a9       	ldd	r24, Z+52	; 0x34
    123e:	89 8b       	std	Y+17, r24	; 0x11
    1240:	85 a9       	ldd	r24, Z+53	; 0x35
    1242:	8a 8b       	std	Y+18, r24	; 0x12
    1244:	86 a9       	ldd	r24, Z+54	; 0x36
    1246:	8b 8b       	std	Y+19, r24	; 0x13
    1248:	87 a9       	ldd	r24, Z+55	; 0x37
    124a:	8c 8b       	std	Y+20, r24	; 0x14
    124c:	80 ad       	ldd	r24, Z+56	; 0x38
    124e:	8d 8b       	std	Y+21, r24	; 0x15
    1250:	81 ad       	ldd	r24, Z+57	; 0x39
    1252:	8e 8b       	std	Y+22, r24	; 0x16
    1254:	82 ad       	ldd	r24, Z+58	; 0x3a
    1256:	8f 8b       	std	Y+23, r24	; 0x17
    1258:	83 ad       	ldd	r24, Z+59	; 0x3b
    125a:	88 8f       	std	Y+24, r24	; 0x18
    125c:	84 ad       	ldd	r24, Z+60	; 0x3c
    125e:	89 8f       	std	Y+25, r24	; 0x19
    1260:	85 ad       	ldd	r24, Z+61	; 0x3d
    1262:	8a 8f       	std	Y+26, r24	; 0x1a
    1264:	86 ad       	ldd	r24, Z+62	; 0x3e
    1266:	8b 8f       	std	Y+27, r24	; 0x1b
    1268:	87 ad       	ldd	r24, Z+63	; 0x3f
    126a:	8c 8f       	std	Y+28, r24	; 0x1c
    126c:	18 a2       	std	Y+32, r1	; 0x20
    126e:	1f 8e       	std	Y+31, r1	; 0x1f
    1270:	1e 8e       	std	Y+30, r1	; 0x1e
    1272:	1d 8e       	std	Y+29, r1	; 0x1d
    1274:	20 e2       	ldi	r18, 0x20	; 32
    1276:	ae 01       	movw	r20, r28
    1278:	4f 5f       	subi	r20, 0xFF	; 255
    127a:	5f 4f       	sbci	r21, 0xFF	; 255
    127c:	ba 01       	movw	r22, r20
    127e:	ca 01       	movw	r24, r20
    1280:	f9 d9       	rcall	.-3086   	; 0x674 <uECC_vli_add>
    1282:	f8 0e       	add	r15, r24
    1284:	20 e2       	ldi	r18, 0x20	; 32
    1286:	ae 01       	movw	r20, r28
    1288:	4f 5f       	subi	r20, 0xFF	; 255
    128a:	5f 4f       	sbci	r21, 0xFF	; 255
    128c:	b6 01       	movw	r22, r12
    128e:	c6 01       	movw	r24, r12
    1290:	f1 d9       	rcall	.-3102   	; 0x674 <uECC_vli_add>
    1292:	f8 0e       	add	r15, r24
    1294:	f8 01       	movw	r30, r16
    1296:	80 a1       	ldd	r24, Z+32	; 0x20
    1298:	89 83       	std	Y+1, r24	; 0x01
    129a:	81 a1       	ldd	r24, Z+33	; 0x21
    129c:	8a 83       	std	Y+2, r24	; 0x02
    129e:	82 a1       	ldd	r24, Z+34	; 0x22
    12a0:	8b 83       	std	Y+3, r24	; 0x03
    12a2:	83 a1       	ldd	r24, Z+35	; 0x23
    12a4:	8c 83       	std	Y+4, r24	; 0x04
    12a6:	84 a1       	ldd	r24, Z+36	; 0x24
    12a8:	8d 83       	std	Y+5, r24	; 0x05
    12aa:	85 a1       	ldd	r24, Z+37	; 0x25
    12ac:	8e 83       	std	Y+6, r24	; 0x06
    12ae:	86 a1       	ldd	r24, Z+38	; 0x26
    12b0:	8f 83       	std	Y+7, r24	; 0x07
    12b2:	87 a1       	ldd	r24, Z+39	; 0x27
    12b4:	88 87       	std	Y+8, r24	; 0x08
    12b6:	80 a5       	ldd	r24, Z+40	; 0x28
    12b8:	89 87       	std	Y+9, r24	; 0x09
    12ba:	81 a5       	ldd	r24, Z+41	; 0x29
    12bc:	8a 87       	std	Y+10, r24	; 0x0a
    12be:	82 a5       	ldd	r24, Z+42	; 0x2a
    12c0:	8b 87       	std	Y+11, r24	; 0x0b
    12c2:	83 a5       	ldd	r24, Z+43	; 0x2b
    12c4:	8c 87       	std	Y+12, r24	; 0x0c
    12c6:	18 8a       	std	Y+16, r1	; 0x10
    12c8:	1f 86       	std	Y+15, r1	; 0x0f
    12ca:	1e 86       	std	Y+14, r1	; 0x0e
    12cc:	1d 86       	std	Y+13, r1	; 0x0d
    12ce:	1c 8a       	std	Y+20, r1	; 0x14
    12d0:	1b 8a       	std	Y+19, r1	; 0x13
    12d2:	1a 8a       	std	Y+18, r1	; 0x12
    12d4:	19 8a       	std	Y+17, r1	; 0x11
    12d6:	18 8e       	std	Y+24, r1	; 0x18
    12d8:	1f 8a       	std	Y+23, r1	; 0x17
    12da:	1e 8a       	std	Y+22, r1	; 0x16
    12dc:	1d 8a       	std	Y+21, r1	; 0x15
    12de:	80 ad       	ldd	r24, Z+56	; 0x38
    12e0:	89 8f       	std	Y+25, r24	; 0x19
    12e2:	81 ad       	ldd	r24, Z+57	; 0x39
    12e4:	8a 8f       	std	Y+26, r24	; 0x1a
    12e6:	82 ad       	ldd	r24, Z+58	; 0x3a
    12e8:	8b 8f       	std	Y+27, r24	; 0x1b
    12ea:	83 ad       	ldd	r24, Z+59	; 0x3b
    12ec:	8c 8f       	std	Y+28, r24	; 0x1c
    12ee:	84 ad       	ldd	r24, Z+60	; 0x3c
    12f0:	8d 8f       	std	Y+29, r24	; 0x1d
    12f2:	85 ad       	ldd	r24, Z+61	; 0x3d
    12f4:	8e 8f       	std	Y+30, r24	; 0x1e
    12f6:	86 ad       	ldd	r24, Z+62	; 0x3e
    12f8:	8f 8f       	std	Y+31, r24	; 0x1f
    12fa:	87 ad       	ldd	r24, Z+63	; 0x3f
    12fc:	88 a3       	std	Y+32, r24	; 0x20
    12fe:	20 e2       	ldi	r18, 0x20	; 32
    1300:	ae 01       	movw	r20, r28
    1302:	4f 5f       	subi	r20, 0xFF	; 255
    1304:	5f 4f       	sbci	r21, 0xFF	; 255
    1306:	b6 01       	movw	r22, r12
    1308:	c6 01       	movw	r24, r12
    130a:	b4 d9       	rcall	.-3224   	; 0x674 <uECC_vli_add>
    130c:	f8 0e       	add	r15, r24
    130e:	f8 01       	movw	r30, r16
    1310:	84 a1       	ldd	r24, Z+36	; 0x24
    1312:	89 83       	std	Y+1, r24	; 0x01
    1314:	85 a1       	ldd	r24, Z+37	; 0x25
    1316:	8a 83       	std	Y+2, r24	; 0x02
    1318:	86 a1       	ldd	r24, Z+38	; 0x26
    131a:	8b 83       	std	Y+3, r24	; 0x03
    131c:	87 a1       	ldd	r24, Z+39	; 0x27
    131e:	8c 83       	std	Y+4, r24	; 0x04
    1320:	80 a5       	ldd	r24, Z+40	; 0x28
    1322:	8d 83       	std	Y+5, r24	; 0x05
    1324:	81 a5       	ldd	r24, Z+41	; 0x29
    1326:	8e 83       	std	Y+6, r24	; 0x06
    1328:	82 a5       	ldd	r24, Z+42	; 0x2a
    132a:	8f 83       	std	Y+7, r24	; 0x07
    132c:	83 a5       	ldd	r24, Z+43	; 0x2b
    132e:	88 87       	std	Y+8, r24	; 0x08
    1330:	84 a5       	ldd	r24, Z+44	; 0x2c
    1332:	89 87       	std	Y+9, r24	; 0x09
    1334:	85 a5       	ldd	r24, Z+45	; 0x2d
    1336:	8a 87       	std	Y+10, r24	; 0x0a
    1338:	86 a5       	ldd	r24, Z+46	; 0x2e
    133a:	8b 87       	std	Y+11, r24	; 0x0b
    133c:	87 a5       	ldd	r24, Z+47	; 0x2f
    133e:	8c 87       	std	Y+12, r24	; 0x0c
    1340:	34 a9       	ldd	r19, Z+52	; 0x34
    1342:	3d 87       	std	Y+13, r19	; 0x0d
    1344:	25 a9       	ldd	r18, Z+53	; 0x35
    1346:	2e 87       	std	Y+14, r18	; 0x0e
    1348:	96 a9       	ldd	r25, Z+54	; 0x36
    134a:	9f 87       	std	Y+15, r25	; 0x0f
    134c:	87 a9       	ldd	r24, Z+55	; 0x37
    134e:	88 8b       	std	Y+16, r24	; 0x10
    1350:	40 ad       	ldd	r20, Z+56	; 0x38
    1352:	49 8b       	std	Y+17, r20	; 0x11
    1354:	41 ad       	ldd	r20, Z+57	; 0x39
    1356:	4a 8b       	std	Y+18, r20	; 0x12
    1358:	42 ad       	ldd	r20, Z+58	; 0x3a
    135a:	4b 8b       	std	Y+19, r20	; 0x13
    135c:	43 ad       	ldd	r20, Z+59	; 0x3b
    135e:	4c 8b       	std	Y+20, r20	; 0x14
    1360:	44 ad       	ldd	r20, Z+60	; 0x3c
    1362:	4d 8b       	std	Y+21, r20	; 0x15
    1364:	45 ad       	ldd	r20, Z+61	; 0x3d
    1366:	4e 8b       	std	Y+22, r20	; 0x16
    1368:	46 ad       	ldd	r20, Z+62	; 0x3e
    136a:	4f 8b       	std	Y+23, r20	; 0x17
    136c:	47 ad       	ldd	r20, Z+63	; 0x3f
    136e:	48 8f       	std	Y+24, r20	; 0x18
    1370:	39 8f       	std	Y+25, r19	; 0x19
    1372:	2a 8f       	std	Y+26, r18	; 0x1a
    1374:	9b 8f       	std	Y+27, r25	; 0x1b
    1376:	8c 8f       	std	Y+28, r24	; 0x1c
    1378:	80 a1       	ldd	r24, Z+32	; 0x20
    137a:	8d 8f       	std	Y+29, r24	; 0x1d
    137c:	81 a1       	ldd	r24, Z+33	; 0x21
    137e:	8e 8f       	std	Y+30, r24	; 0x1e
    1380:	82 a1       	ldd	r24, Z+34	; 0x22
    1382:	8f 8f       	std	Y+31, r24	; 0x1f
    1384:	83 a1       	ldd	r24, Z+35	; 0x23
    1386:	88 a3       	std	Y+32, r24	; 0x20
    1388:	20 e2       	ldi	r18, 0x20	; 32
    138a:	ae 01       	movw	r20, r28
    138c:	4f 5f       	subi	r20, 0xFF	; 255
    138e:	5f 4f       	sbci	r21, 0xFF	; 255
    1390:	b6 01       	movw	r22, r12
    1392:	c6 01       	movw	r24, r12
    1394:	6f d9       	rcall	.-3362   	; 0x674 <uECC_vli_add>
    1396:	f8 0e       	add	r15, r24
    1398:	f8 01       	movw	r30, r16
    139a:	84 a5       	ldd	r24, Z+44	; 0x2c
    139c:	89 83       	std	Y+1, r24	; 0x01
    139e:	85 a5       	ldd	r24, Z+45	; 0x2d
    13a0:	8a 83       	std	Y+2, r24	; 0x02
    13a2:	86 a5       	ldd	r24, Z+46	; 0x2e
    13a4:	8b 83       	std	Y+3, r24	; 0x03
    13a6:	87 a5       	ldd	r24, Z+47	; 0x2f
    13a8:	8c 83       	std	Y+4, r24	; 0x04
    13aa:	80 a9       	ldd	r24, Z+48	; 0x30
    13ac:	8d 83       	std	Y+5, r24	; 0x05
    13ae:	81 a9       	ldd	r24, Z+49	; 0x31
    13b0:	8e 83       	std	Y+6, r24	; 0x06
    13b2:	82 a9       	ldd	r24, Z+50	; 0x32
    13b4:	8f 83       	std	Y+7, r24	; 0x07
    13b6:	83 a9       	ldd	r24, Z+51	; 0x33
    13b8:	88 87       	std	Y+8, r24	; 0x08
    13ba:	84 a9       	ldd	r24, Z+52	; 0x34
    13bc:	89 87       	std	Y+9, r24	; 0x09
    13be:	85 a9       	ldd	r24, Z+53	; 0x35
    13c0:	8a 87       	std	Y+10, r24	; 0x0a
    13c2:	86 a9       	ldd	r24, Z+54	; 0x36
    13c4:	8b 87       	std	Y+11, r24	; 0x0b
    13c6:	87 a9       	ldd	r24, Z+55	; 0x37
    13c8:	8c 87       	std	Y+12, r24	; 0x0c
    13ca:	18 8a       	std	Y+16, r1	; 0x10
    13cc:	1f 86       	std	Y+15, r1	; 0x0f
    13ce:	1e 86       	std	Y+14, r1	; 0x0e
    13d0:	1d 86       	std	Y+13, r1	; 0x0d
    13d2:	1c 8a       	std	Y+20, r1	; 0x14
    13d4:	1b 8a       	std	Y+19, r1	; 0x13
    13d6:	1a 8a       	std	Y+18, r1	; 0x12
    13d8:	19 8a       	std	Y+17, r1	; 0x11
    13da:	18 8e       	std	Y+24, r1	; 0x18
    13dc:	1f 8a       	std	Y+23, r1	; 0x17
    13de:	1e 8a       	std	Y+22, r1	; 0x16
    13e0:	1d 8a       	std	Y+21, r1	; 0x15
    13e2:	80 a1       	ldd	r24, Z+32	; 0x20
    13e4:	89 8f       	std	Y+25, r24	; 0x19
    13e6:	81 a1       	ldd	r24, Z+33	; 0x21
    13e8:	8a 8f       	std	Y+26, r24	; 0x1a
    13ea:	82 a1       	ldd	r24, Z+34	; 0x22
    13ec:	8b 8f       	std	Y+27, r24	; 0x1b
    13ee:	83 a1       	ldd	r24, Z+35	; 0x23
    13f0:	8c 8f       	std	Y+28, r24	; 0x1c
    13f2:	80 a5       	ldd	r24, Z+40	; 0x28
    13f4:	8d 8f       	std	Y+29, r24	; 0x1d
    13f6:	81 a5       	ldd	r24, Z+41	; 0x29
    13f8:	8e 8f       	std	Y+30, r24	; 0x1e
    13fa:	82 a5       	ldd	r24, Z+42	; 0x2a
    13fc:	8f 8f       	std	Y+31, r24	; 0x1f
    13fe:	83 a5       	ldd	r24, Z+43	; 0x2b
    1400:	88 a3       	std	Y+32, r24	; 0x20
    1402:	20 e2       	ldi	r18, 0x20	; 32
    1404:	ae 01       	movw	r20, r28
    1406:	4f 5f       	subi	r20, 0xFF	; 255
    1408:	5f 4f       	sbci	r21, 0xFF	; 255
    140a:	b6 01       	movw	r22, r12
    140c:	c6 01       	movw	r24, r12
    140e:	03 da       	rcall	.-3066   	; 0x816 <uECC_vli_sub>
    1410:	f8 1a       	sub	r15, r24
    1412:	f8 01       	movw	r30, r16
    1414:	80 a9       	ldd	r24, Z+48	; 0x30
    1416:	89 83       	std	Y+1, r24	; 0x01
    1418:	81 a9       	ldd	r24, Z+49	; 0x31
    141a:	8a 83       	std	Y+2, r24	; 0x02
    141c:	82 a9       	ldd	r24, Z+50	; 0x32
    141e:	8b 83       	std	Y+3, r24	; 0x03
    1420:	83 a9       	ldd	r24, Z+51	; 0x33
    1422:	8c 83       	std	Y+4, r24	; 0x04
    1424:	84 a9       	ldd	r24, Z+52	; 0x34
    1426:	8d 83       	std	Y+5, r24	; 0x05
    1428:	85 a9       	ldd	r24, Z+53	; 0x35
    142a:	8e 83       	std	Y+6, r24	; 0x06
    142c:	86 a9       	ldd	r24, Z+54	; 0x36
    142e:	8f 83       	std	Y+7, r24	; 0x07
    1430:	87 a9       	ldd	r24, Z+55	; 0x37
    1432:	88 87       	std	Y+8, r24	; 0x08
    1434:	80 ad       	ldd	r24, Z+56	; 0x38
    1436:	89 87       	std	Y+9, r24	; 0x09
    1438:	81 ad       	ldd	r24, Z+57	; 0x39
    143a:	8a 87       	std	Y+10, r24	; 0x0a
    143c:	82 ad       	ldd	r24, Z+58	; 0x3a
    143e:	8b 87       	std	Y+11, r24	; 0x0b
    1440:	83 ad       	ldd	r24, Z+59	; 0x3b
    1442:	8c 87       	std	Y+12, r24	; 0x0c
    1444:	84 ad       	ldd	r24, Z+60	; 0x3c
    1446:	8d 87       	std	Y+13, r24	; 0x0d
    1448:	85 ad       	ldd	r24, Z+61	; 0x3d
    144a:	8e 87       	std	Y+14, r24	; 0x0e
    144c:	86 ad       	ldd	r24, Z+62	; 0x3e
    144e:	8f 87       	std	Y+15, r24	; 0x0f
    1450:	87 ad       	ldd	r24, Z+63	; 0x3f
    1452:	88 8b       	std	Y+16, r24	; 0x10
    1454:	1c 8a       	std	Y+20, r1	; 0x14
    1456:	1b 8a       	std	Y+19, r1	; 0x13
    1458:	1a 8a       	std	Y+18, r1	; 0x12
    145a:	19 8a       	std	Y+17, r1	; 0x11
    145c:	18 8e       	std	Y+24, r1	; 0x18
    145e:	1f 8a       	std	Y+23, r1	; 0x17
    1460:	1e 8a       	std	Y+22, r1	; 0x16
    1462:	1d 8a       	std	Y+21, r1	; 0x15
    1464:	84 a1       	ldd	r24, Z+36	; 0x24
    1466:	89 8f       	std	Y+25, r24	; 0x19
    1468:	85 a1       	ldd	r24, Z+37	; 0x25
    146a:	8a 8f       	std	Y+26, r24	; 0x1a
    146c:	86 a1       	ldd	r24, Z+38	; 0x26
    146e:	8b 8f       	std	Y+27, r24	; 0x1b
    1470:	87 a1       	ldd	r24, Z+39	; 0x27
    1472:	8c 8f       	std	Y+28, r24	; 0x1c
    1474:	84 a5       	ldd	r24, Z+44	; 0x2c
    1476:	8d 8f       	std	Y+29, r24	; 0x1d
    1478:	85 a5       	ldd	r24, Z+45	; 0x2d
    147a:	8e 8f       	std	Y+30, r24	; 0x1e
    147c:	86 a5       	ldd	r24, Z+46	; 0x2e
    147e:	8f 8f       	std	Y+31, r24	; 0x1f
    1480:	87 a5       	ldd	r24, Z+47	; 0x2f
    1482:	88 a3       	std	Y+32, r24	; 0x20
    1484:	20 e2       	ldi	r18, 0x20	; 32
    1486:	ae 01       	movw	r20, r28
    1488:	4f 5f       	subi	r20, 0xFF	; 255
    148a:	5f 4f       	sbci	r21, 0xFF	; 255
    148c:	b6 01       	movw	r22, r12
    148e:	c6 01       	movw	r24, r12
    1490:	c2 d9       	rcall	.-3196   	; 0x816 <uECC_vli_sub>
    1492:	f8 1a       	sub	r15, r24
    1494:	f8 01       	movw	r30, r16
    1496:	84 a9       	ldd	r24, Z+52	; 0x34
    1498:	89 83       	std	Y+1, r24	; 0x01
    149a:	85 a9       	ldd	r24, Z+53	; 0x35
    149c:	8a 83       	std	Y+2, r24	; 0x02
    149e:	86 a9       	ldd	r24, Z+54	; 0x36
    14a0:	8b 83       	std	Y+3, r24	; 0x03
    14a2:	87 a9       	ldd	r24, Z+55	; 0x37
    14a4:	8c 83       	std	Y+4, r24	; 0x04
    14a6:	80 ad       	ldd	r24, Z+56	; 0x38
    14a8:	8d 83       	std	Y+5, r24	; 0x05
    14aa:	81 ad       	ldd	r24, Z+57	; 0x39
    14ac:	8e 83       	std	Y+6, r24	; 0x06
    14ae:	82 ad       	ldd	r24, Z+58	; 0x3a
    14b0:	8f 83       	std	Y+7, r24	; 0x07
    14b2:	83 ad       	ldd	r24, Z+59	; 0x3b
    14b4:	88 87       	std	Y+8, r24	; 0x08
    14b6:	84 ad       	ldd	r24, Z+60	; 0x3c
    14b8:	89 87       	std	Y+9, r24	; 0x09
    14ba:	85 ad       	ldd	r24, Z+61	; 0x3d
    14bc:	8a 87       	std	Y+10, r24	; 0x0a
    14be:	86 ad       	ldd	r24, Z+62	; 0x3e
    14c0:	8b 87       	std	Y+11, r24	; 0x0b
    14c2:	87 ad       	ldd	r24, Z+63	; 0x3f
    14c4:	8c 87       	std	Y+12, r24	; 0x0c
    14c6:	80 a1       	ldd	r24, Z+32	; 0x20
    14c8:	8d 87       	std	Y+13, r24	; 0x0d
    14ca:	81 a1       	ldd	r24, Z+33	; 0x21
    14cc:	8e 87       	std	Y+14, r24	; 0x0e
    14ce:	82 a1       	ldd	r24, Z+34	; 0x22
    14d0:	8f 87       	std	Y+15, r24	; 0x0f
    14d2:	83 a1       	ldd	r24, Z+35	; 0x23
    14d4:	88 8b       	std	Y+16, r24	; 0x10
    14d6:	84 a1       	ldd	r24, Z+36	; 0x24
    14d8:	89 8b       	std	Y+17, r24	; 0x11
    14da:	85 a1       	ldd	r24, Z+37	; 0x25
    14dc:	8a 8b       	std	Y+18, r24	; 0x12
    14de:	86 a1       	ldd	r24, Z+38	; 0x26
    14e0:	8b 8b       	std	Y+19, r24	; 0x13
    14e2:	87 a1       	ldd	r24, Z+39	; 0x27
    14e4:	8c 8b       	std	Y+20, r24	; 0x14
    14e6:	80 a5       	ldd	r24, Z+40	; 0x28
    14e8:	8d 8b       	std	Y+21, r24	; 0x15
    14ea:	81 a5       	ldd	r24, Z+41	; 0x29
    14ec:	8e 8b       	std	Y+22, r24	; 0x16
    14ee:	82 a5       	ldd	r24, Z+42	; 0x2a
    14f0:	8f 8b       	std	Y+23, r24	; 0x17
    14f2:	83 a5       	ldd	r24, Z+43	; 0x2b
    14f4:	88 8f       	std	Y+24, r24	; 0x18
    14f6:	1c 8e       	std	Y+28, r1	; 0x1c
    14f8:	1b 8e       	std	Y+27, r1	; 0x1b
    14fa:	1a 8e       	std	Y+26, r1	; 0x1a
    14fc:	19 8e       	std	Y+25, r1	; 0x19
    14fe:	80 a9       	ldd	r24, Z+48	; 0x30
    1500:	8d 8f       	std	Y+29, r24	; 0x1d
    1502:	81 a9       	ldd	r24, Z+49	; 0x31
    1504:	8e 8f       	std	Y+30, r24	; 0x1e
    1506:	82 a9       	ldd	r24, Z+50	; 0x32
    1508:	8f 8f       	std	Y+31, r24	; 0x1f
    150a:	83 a9       	ldd	r24, Z+51	; 0x33
    150c:	88 a3       	std	Y+32, r24	; 0x20
    150e:	20 e2       	ldi	r18, 0x20	; 32
    1510:	ae 01       	movw	r20, r28
    1512:	4f 5f       	subi	r20, 0xFF	; 255
    1514:	5f 4f       	sbci	r21, 0xFF	; 255
    1516:	b6 01       	movw	r22, r12
    1518:	c6 01       	movw	r24, r12
    151a:	7d d9       	rcall	.-3334   	; 0x816 <uECC_vli_sub>
    151c:	f8 1a       	sub	r15, r24
    151e:	f8 01       	movw	r30, r16
    1520:	80 ad       	ldd	r24, Z+56	; 0x38
    1522:	89 83       	std	Y+1, r24	; 0x01
    1524:	81 ad       	ldd	r24, Z+57	; 0x39
    1526:	8a 83       	std	Y+2, r24	; 0x02
    1528:	82 ad       	ldd	r24, Z+58	; 0x3a
    152a:	8b 83       	std	Y+3, r24	; 0x03
    152c:	83 ad       	ldd	r24, Z+59	; 0x3b
    152e:	8c 83       	std	Y+4, r24	; 0x04
    1530:	84 ad       	ldd	r24, Z+60	; 0x3c
    1532:	8d 83       	std	Y+5, r24	; 0x05
    1534:	85 ad       	ldd	r24, Z+61	; 0x3d
    1536:	8e 83       	std	Y+6, r24	; 0x06
    1538:	86 ad       	ldd	r24, Z+62	; 0x3e
    153a:	8f 83       	std	Y+7, r24	; 0x07
    153c:	87 ad       	ldd	r24, Z+63	; 0x3f
    153e:	88 87       	std	Y+8, r24	; 0x08
    1540:	1c 86       	std	Y+12, r1	; 0x0c
    1542:	1b 86       	std	Y+11, r1	; 0x0b
    1544:	1a 86       	std	Y+10, r1	; 0x0a
    1546:	19 86       	std	Y+9, r1	; 0x09
    1548:	84 a1       	ldd	r24, Z+36	; 0x24
    154a:	8d 87       	std	Y+13, r24	; 0x0d
    154c:	85 a1       	ldd	r24, Z+37	; 0x25
    154e:	8e 87       	std	Y+14, r24	; 0x0e
    1550:	86 a1       	ldd	r24, Z+38	; 0x26
    1552:	8f 87       	std	Y+15, r24	; 0x0f
    1554:	87 a1       	ldd	r24, Z+39	; 0x27
    1556:	88 8b       	std	Y+16, r24	; 0x10
    1558:	80 a5       	ldd	r24, Z+40	; 0x28
    155a:	89 8b       	std	Y+17, r24	; 0x11
    155c:	81 a5       	ldd	r24, Z+41	; 0x29
    155e:	8a 8b       	std	Y+18, r24	; 0x12
    1560:	82 a5       	ldd	r24, Z+42	; 0x2a
    1562:	8b 8b       	std	Y+19, r24	; 0x13
    1564:	83 a5       	ldd	r24, Z+43	; 0x2b
    1566:	8c 8b       	std	Y+20, r24	; 0x14
    1568:	84 a5       	ldd	r24, Z+44	; 0x2c
    156a:	8d 8b       	std	Y+21, r24	; 0x15
    156c:	85 a5       	ldd	r24, Z+45	; 0x2d
    156e:	8e 8b       	std	Y+22, r24	; 0x16
    1570:	86 a5       	ldd	r24, Z+46	; 0x2e
    1572:	8f 8b       	std	Y+23, r24	; 0x17
    1574:	87 a5       	ldd	r24, Z+47	; 0x2f
    1576:	88 8f       	std	Y+24, r24	; 0x18
    1578:	1c 8e       	std	Y+28, r1	; 0x1c
    157a:	1b 8e       	std	Y+27, r1	; 0x1b
    157c:	1a 8e       	std	Y+26, r1	; 0x1a
    157e:	19 8e       	std	Y+25, r1	; 0x19
    1580:	84 a9       	ldd	r24, Z+52	; 0x34
    1582:	8d 8f       	std	Y+29, r24	; 0x1d
    1584:	85 a9       	ldd	r24, Z+53	; 0x35
    1586:	8e 8f       	std	Y+30, r24	; 0x1e
    1588:	86 a9       	ldd	r24, Z+54	; 0x36
    158a:	8f 8f       	std	Y+31, r24	; 0x1f
    158c:	87 a9       	ldd	r24, Z+55	; 0x37
    158e:	88 a3       	std	Y+32, r24	; 0x20
    1590:	20 e2       	ldi	r18, 0x20	; 32
    1592:	ae 01       	movw	r20, r28
    1594:	4f 5f       	subi	r20, 0xFF	; 255
    1596:	5f 4f       	sbci	r21, 0xFF	; 255
    1598:	b6 01       	movw	r22, r12
    159a:	c6 01       	movw	r24, r12
    159c:	3c d9       	rcall	.-3464   	; 0x816 <uECC_vli_sub>
    159e:	1f 2d       	mov	r17, r15
    15a0:	18 1b       	sub	r17, r24
    15a2:	82 f4       	brpl	.+32     	; 0x15c4 <vli_mmod_fast_secp256r1+0x44a>
    15a4:	20 e2       	ldi	r18, 0x20	; 32
    15a6:	4e e0       	ldi	r20, 0x0E	; 14
    15a8:	51 e0       	ldi	r21, 0x01	; 1
    15aa:	b6 01       	movw	r22, r12
    15ac:	c6 01       	movw	r24, r12
    15ae:	62 d8       	rcall	.-3900   	; 0x674 <uECC_vli_add>
    15b0:	18 0f       	add	r17, r24
    15b2:	c2 f3       	brmi	.-16     	; 0x15a4 <vli_mmod_fast_secp256r1+0x42a>
    15b4:	10 c0       	rjmp	.+32     	; 0x15d6 <vli_mmod_fast_secp256r1+0x45c>
    15b6:	20 e2       	ldi	r18, 0x20	; 32
    15b8:	4e e0       	ldi	r20, 0x0E	; 14
    15ba:	51 e0       	ldi	r21, 0x01	; 1
    15bc:	b6 01       	movw	r22, r12
    15be:	c6 01       	movw	r24, r12
    15c0:	2a d9       	rcall	.-3500   	; 0x816 <uECC_vli_sub>
    15c2:	18 1b       	sub	r17, r24
    15c4:	11 11       	cpse	r17, r1
    15c6:	f7 cf       	rjmp	.-18     	; 0x15b6 <vli_mmod_fast_secp256r1+0x43c>
    15c8:	40 e2       	ldi	r20, 0x20	; 32
    15ca:	b6 01       	movw	r22, r12
    15cc:	8e e0       	ldi	r24, 0x0E	; 14
    15ce:	91 e0       	ldi	r25, 0x01	; 1
    15d0:	92 da       	rcall	.-2780   	; 0xaf6 <uECC_vli_cmp_unsafe>
    15d2:	81 30       	cpi	r24, 0x01	; 1
    15d4:	81 f7       	brne	.-32     	; 0x15b6 <vli_mmod_fast_secp256r1+0x43c>
    15d6:	a0 96       	adiw	r28, 0x20	; 32
    15d8:	0f b6       	in	r0, 0x3f	; 63
    15da:	f8 94       	cli
    15dc:	de bf       	out	0x3e, r29	; 62
    15de:	0f be       	out	0x3f, r0	; 63
    15e0:	cd bf       	out	0x3d, r28	; 61
    15e2:	df 91       	pop	r29
    15e4:	cf 91       	pop	r28
    15e6:	1f 91       	pop	r17
    15e8:	0f 91       	pop	r16
    15ea:	ff 90       	pop	r15
    15ec:	df 90       	pop	r13
    15ee:	cf 90       	pop	r12
    15f0:	08 95       	ret

000015f2 <apply_z>:
    15f2:	af 92       	push	r10
    15f4:	bf 92       	push	r11
    15f6:	cf 92       	push	r12
    15f8:	df 92       	push	r13
    15fa:	ef 92       	push	r14
    15fc:	ff 92       	push	r15
    15fe:	0f 93       	push	r16
    1600:	1f 93       	push	r17
    1602:	cf 93       	push	r28
    1604:	df 93       	push	r29
    1606:	cd b7       	in	r28, 0x3d	; 61
    1608:	de b7       	in	r29, 0x3e	; 62
    160a:	a0 97       	sbiw	r28, 0x20	; 32
    160c:	0f b6       	in	r0, 0x3f	; 63
    160e:	f8 94       	cli
    1610:	de bf       	out	0x3e, r29	; 62
    1612:	0f be       	out	0x3f, r0	; 63
    1614:	cd bf       	out	0x3d, r28	; 61
    1616:	5c 01       	movw	r10, r24
    1618:	7b 01       	movw	r14, r22
    161a:	6a 01       	movw	r12, r20
    161c:	89 01       	movw	r16, r18
    161e:	a9 01       	movw	r20, r18
    1620:	b6 01       	movw	r22, r12
    1622:	ce 01       	movw	r24, r28
    1624:	01 96       	adiw	r24, 0x01	; 1
    1626:	27 db       	rcall	.-2482   	; 0xc76 <uECC_vli_modSquare_fast>
    1628:	98 01       	movw	r18, r16
    162a:	ae 01       	movw	r20, r28
    162c:	4f 5f       	subi	r20, 0xFF	; 255
    162e:	5f 4f       	sbci	r21, 0xFF	; 255
    1630:	b5 01       	movw	r22, r10
    1632:	c5 01       	movw	r24, r10
    1634:	f1 da       	rcall	.-2590   	; 0xc18 <uECC_vli_modMult_fast>
    1636:	98 01       	movw	r18, r16
    1638:	a6 01       	movw	r20, r12
    163a:	be 01       	movw	r22, r28
    163c:	6f 5f       	subi	r22, 0xFF	; 255
    163e:	7f 4f       	sbci	r23, 0xFF	; 255
    1640:	cb 01       	movw	r24, r22
    1642:	ea da       	rcall	.-2604   	; 0xc18 <uECC_vli_modMult_fast>
    1644:	98 01       	movw	r18, r16
    1646:	ae 01       	movw	r20, r28
    1648:	4f 5f       	subi	r20, 0xFF	; 255
    164a:	5f 4f       	sbci	r21, 0xFF	; 255
    164c:	b7 01       	movw	r22, r14
    164e:	c7 01       	movw	r24, r14
    1650:	e3 da       	rcall	.-2618   	; 0xc18 <uECC_vli_modMult_fast>
    1652:	a0 96       	adiw	r28, 0x20	; 32
    1654:	0f b6       	in	r0, 0x3f	; 63
    1656:	f8 94       	cli
    1658:	de bf       	out	0x3e, r29	; 62
    165a:	0f be       	out	0x3f, r0	; 63
    165c:	cd bf       	out	0x3d, r28	; 61
    165e:	df 91       	pop	r29
    1660:	cf 91       	pop	r28
    1662:	1f 91       	pop	r17
    1664:	0f 91       	pop	r16
    1666:	ff 90       	pop	r15
    1668:	ef 90       	pop	r14
    166a:	df 90       	pop	r13
    166c:	cf 90       	pop	r12
    166e:	bf 90       	pop	r11
    1670:	af 90       	pop	r10
    1672:	08 95       	ret

00001674 <XYcZ_add>:
    1674:	4f 92       	push	r4
    1676:	5f 92       	push	r5
    1678:	6f 92       	push	r6
    167a:	7f 92       	push	r7
    167c:	8f 92       	push	r8
    167e:	9f 92       	push	r9
    1680:	af 92       	push	r10
    1682:	bf 92       	push	r11
    1684:	cf 92       	push	r12
    1686:	df 92       	push	r13
    1688:	ef 92       	push	r14
    168a:	ff 92       	push	r15
    168c:	0f 93       	push	r16
    168e:	1f 93       	push	r17
    1690:	cf 93       	push	r28
    1692:	df 93       	push	r29
    1694:	cd b7       	in	r28, 0x3d	; 61
    1696:	de b7       	in	r29, 0x3e	; 62
    1698:	a0 97       	sbiw	r28, 0x20	; 32
    169a:	0f b6       	in	r0, 0x3f	; 63
    169c:	f8 94       	cli
    169e:	de bf       	out	0x3e, r29	; 62
    16a0:	0f be       	out	0x3f, r0	; 63
    16a2:	cd bf       	out	0x3d, r28	; 61
    16a4:	3c 01       	movw	r6, r24
    16a6:	2b 01       	movw	r4, r22
    16a8:	7a 01       	movw	r14, r20
    16aa:	59 01       	movw	r10, r18
    16ac:	68 01       	movw	r12, r16
    16ae:	f8 01       	movw	r30, r16
    16b0:	10 81       	ld	r17, Z
    16b2:	46 01       	movw	r8, r12
    16b4:	f4 e0       	ldi	r31, 0x04	; 4
    16b6:	8f 0e       	add	r8, r31
    16b8:	91 1c       	adc	r9, r1
    16ba:	01 2f       	mov	r16, r17
    16bc:	94 01       	movw	r18, r8
    16be:	ac 01       	movw	r20, r24
    16c0:	b7 01       	movw	r22, r14
    16c2:	ce 01       	movw	r24, r28
    16c4:	01 96       	adiw	r24, 0x01	; 1
    16c6:	92 da       	rcall	.-2780   	; 0xbec <uECC_vli_modSub>
    16c8:	a6 01       	movw	r20, r12
    16ca:	be 01       	movw	r22, r28
    16cc:	6f 5f       	subi	r22, 0xFF	; 255
    16ce:	7f 4f       	sbci	r23, 0xFF	; 255
    16d0:	cb 01       	movw	r24, r22
    16d2:	d1 da       	rcall	.-2654   	; 0xc76 <uECC_vli_modSquare_fast>
    16d4:	96 01       	movw	r18, r12
    16d6:	ae 01       	movw	r20, r28
    16d8:	4f 5f       	subi	r20, 0xFF	; 255
    16da:	5f 4f       	sbci	r21, 0xFF	; 255
    16dc:	b3 01       	movw	r22, r6
    16de:	c3 01       	movw	r24, r6
    16e0:	9b da       	rcall	.-2762   	; 0xc18 <uECC_vli_modMult_fast>
    16e2:	96 01       	movw	r18, r12
    16e4:	ae 01       	movw	r20, r28
    16e6:	4f 5f       	subi	r20, 0xFF	; 255
    16e8:	5f 4f       	sbci	r21, 0xFF	; 255
    16ea:	b7 01       	movw	r22, r14
    16ec:	c7 01       	movw	r24, r14
    16ee:	94 da       	rcall	.-2776   	; 0xc18 <uECC_vli_modMult_fast>
    16f0:	94 01       	movw	r18, r8
    16f2:	a2 01       	movw	r20, r4
    16f4:	b5 01       	movw	r22, r10
    16f6:	c5 01       	movw	r24, r10
    16f8:	79 da       	rcall	.-2830   	; 0xbec <uECC_vli_modSub>
    16fa:	a6 01       	movw	r20, r12
    16fc:	b5 01       	movw	r22, r10
    16fe:	ce 01       	movw	r24, r28
    1700:	01 96       	adiw	r24, 0x01	; 1
    1702:	b9 da       	rcall	.-2702   	; 0xc76 <uECC_vli_modSquare_fast>
    1704:	94 01       	movw	r18, r8
    1706:	a3 01       	movw	r20, r6
    1708:	be 01       	movw	r22, r28
    170a:	6f 5f       	subi	r22, 0xFF	; 255
    170c:	7f 4f       	sbci	r23, 0xFF	; 255
    170e:	cb 01       	movw	r24, r22
    1710:	6d da       	rcall	.-2854   	; 0xbec <uECC_vli_modSub>
    1712:	94 01       	movw	r18, r8
    1714:	a7 01       	movw	r20, r14
    1716:	be 01       	movw	r22, r28
    1718:	6f 5f       	subi	r22, 0xFF	; 255
    171a:	7f 4f       	sbci	r23, 0xFF	; 255
    171c:	cb 01       	movw	r24, r22
    171e:	66 da       	rcall	.-2868   	; 0xbec <uECC_vli_modSub>
    1720:	94 01       	movw	r18, r8
    1722:	a3 01       	movw	r20, r6
    1724:	b7 01       	movw	r22, r14
    1726:	c7 01       	movw	r24, r14
    1728:	61 da       	rcall	.-2878   	; 0xbec <uECC_vli_modSub>
    172a:	96 01       	movw	r18, r12
    172c:	a7 01       	movw	r20, r14
    172e:	b2 01       	movw	r22, r4
    1730:	c2 01       	movw	r24, r4
    1732:	72 da       	rcall	.-2844   	; 0xc18 <uECC_vli_modMult_fast>
    1734:	94 01       	movw	r18, r8
    1736:	ae 01       	movw	r20, r28
    1738:	4f 5f       	subi	r20, 0xFF	; 255
    173a:	5f 4f       	sbci	r21, 0xFF	; 255
    173c:	b3 01       	movw	r22, r6
    173e:	c7 01       	movw	r24, r14
    1740:	55 da       	rcall	.-2902   	; 0xbec <uECC_vli_modSub>
    1742:	96 01       	movw	r18, r12
    1744:	a7 01       	movw	r20, r14
    1746:	b5 01       	movw	r22, r10
    1748:	c5 01       	movw	r24, r10
    174a:	66 da       	rcall	.-2868   	; 0xc18 <uECC_vli_modMult_fast>
    174c:	94 01       	movw	r18, r8
    174e:	a2 01       	movw	r20, r4
    1750:	b5 01       	movw	r22, r10
    1752:	c5 01       	movw	r24, r10
    1754:	4b da       	rcall	.-2922   	; 0xbec <uECC_vli_modSub>
    1756:	41 2f       	mov	r20, r17
    1758:	be 01       	movw	r22, r28
    175a:	6f 5f       	subi	r22, 0xFF	; 255
    175c:	7f 4f       	sbci	r23, 0xFF	; 255
    175e:	c7 01       	movw	r24, r14
    1760:	0e 94 7b 02 	call	0x4f6	; 0x4f6 <uECC_vli_set>
    1764:	a0 96       	adiw	r28, 0x20	; 32
    1766:	0f b6       	in	r0, 0x3f	; 63
    1768:	f8 94       	cli
    176a:	de bf       	out	0x3e, r29	; 62
    176c:	0f be       	out	0x3f, r0	; 63
    176e:	cd bf       	out	0x3d, r28	; 61
    1770:	df 91       	pop	r29
    1772:	cf 91       	pop	r28
    1774:	1f 91       	pop	r17
    1776:	0f 91       	pop	r16
    1778:	ff 90       	pop	r15
    177a:	ef 90       	pop	r14
    177c:	df 90       	pop	r13
    177e:	cf 90       	pop	r12
    1780:	bf 90       	pop	r11
    1782:	af 90       	pop	r10
    1784:	9f 90       	pop	r9
    1786:	8f 90       	pop	r8
    1788:	7f 90       	pop	r7
    178a:	6f 90       	pop	r6
    178c:	5f 90       	pop	r5
    178e:	4f 90       	pop	r4
    1790:	08 95       	ret

00001792 <XYcZ_addC>:
    1792:	4f 92       	push	r4
    1794:	5f 92       	push	r5
    1796:	6f 92       	push	r6
    1798:	7f 92       	push	r7
    179a:	8f 92       	push	r8
    179c:	9f 92       	push	r9
    179e:	af 92       	push	r10
    17a0:	bf 92       	push	r11
    17a2:	cf 92       	push	r12
    17a4:	df 92       	push	r13
    17a6:	ef 92       	push	r14
    17a8:	ff 92       	push	r15
    17aa:	0f 93       	push	r16
    17ac:	1f 93       	push	r17
    17ae:	cf 93       	push	r28
    17b0:	df 93       	push	r29
    17b2:	cd b7       	in	r28, 0x3d	; 61
    17b4:	de b7       	in	r29, 0x3e	; 62
    17b6:	c0 56       	subi	r28, 0x60	; 96
    17b8:	d1 09       	sbc	r29, r1
    17ba:	0f b6       	in	r0, 0x3f	; 63
    17bc:	f8 94       	cli
    17be:	de bf       	out	0x3e, r29	; 62
    17c0:	0f be       	out	0x3f, r0	; 63
    17c2:	cd bf       	out	0x3d, r28	; 61
    17c4:	4c 01       	movw	r8, r24
    17c6:	2b 01       	movw	r4, r22
    17c8:	5a 01       	movw	r10, r20
    17ca:	39 01       	movw	r6, r18
    17cc:	68 01       	movw	r12, r16
    17ce:	f8 01       	movw	r30, r16
    17d0:	10 81       	ld	r17, Z
    17d2:	76 01       	movw	r14, r12
    17d4:	f4 e0       	ldi	r31, 0x04	; 4
    17d6:	ef 0e       	add	r14, r31
    17d8:	f1 1c       	adc	r15, r1
    17da:	01 2f       	mov	r16, r17
    17dc:	97 01       	movw	r18, r14
    17de:	ac 01       	movw	r20, r24
    17e0:	b5 01       	movw	r22, r10
    17e2:	ce 01       	movw	r24, r28
    17e4:	01 96       	adiw	r24, 0x01	; 1
    17e6:	02 da       	rcall	.-3068   	; 0xbec <uECC_vli_modSub>
    17e8:	a6 01       	movw	r20, r12
    17ea:	be 01       	movw	r22, r28
    17ec:	6f 5f       	subi	r22, 0xFF	; 255
    17ee:	7f 4f       	sbci	r23, 0xFF	; 255
    17f0:	cb 01       	movw	r24, r22
    17f2:	41 da       	rcall	.-2942   	; 0xc76 <uECC_vli_modSquare_fast>
    17f4:	96 01       	movw	r18, r12
    17f6:	ae 01       	movw	r20, r28
    17f8:	4f 5f       	subi	r20, 0xFF	; 255
    17fa:	5f 4f       	sbci	r21, 0xFF	; 255
    17fc:	b4 01       	movw	r22, r8
    17fe:	c4 01       	movw	r24, r8
    1800:	0b da       	rcall	.-3050   	; 0xc18 <uECC_vli_modMult_fast>
    1802:	96 01       	movw	r18, r12
    1804:	ae 01       	movw	r20, r28
    1806:	4f 5f       	subi	r20, 0xFF	; 255
    1808:	5f 4f       	sbci	r21, 0xFF	; 255
    180a:	b5 01       	movw	r22, r10
    180c:	c5 01       	movw	r24, r10
    180e:	04 da       	rcall	.-3064   	; 0xc18 <uECC_vli_modMult_fast>
    1810:	97 01       	movw	r18, r14
    1812:	a2 01       	movw	r20, r4
    1814:	b3 01       	movw	r22, r6
    1816:	ce 01       	movw	r24, r28
    1818:	01 96       	adiw	r24, 0x01	; 1
    181a:	cc d9       	rcall	.-3176   	; 0xbb4 <uECC_vli_modAdd>
    181c:	97 01       	movw	r18, r14
    181e:	a2 01       	movw	r20, r4
    1820:	b3 01       	movw	r22, r6
    1822:	c3 01       	movw	r24, r6
    1824:	e3 d9       	rcall	.-3130   	; 0xbec <uECC_vli_modSub>
    1826:	97 01       	movw	r18, r14
    1828:	a4 01       	movw	r20, r8
    182a:	b5 01       	movw	r22, r10
    182c:	ce 01       	movw	r24, r28
    182e:	81 96       	adiw	r24, 0x21	; 33
    1830:	dd d9       	rcall	.-3142   	; 0xbec <uECC_vli_modSub>
    1832:	96 01       	movw	r18, r12
    1834:	ae 01       	movw	r20, r28
    1836:	4f 5d       	subi	r20, 0xDF	; 223
    1838:	5f 4f       	sbci	r21, 0xFF	; 255
    183a:	b2 01       	movw	r22, r4
    183c:	c2 01       	movw	r24, r4
    183e:	ec d9       	rcall	.-3112   	; 0xc18 <uECC_vli_modMult_fast>
    1840:	97 01       	movw	r18, r14
    1842:	a5 01       	movw	r20, r10
    1844:	b4 01       	movw	r22, r8
    1846:	ce 01       	movw	r24, r28
    1848:	81 96       	adiw	r24, 0x21	; 33
    184a:	b4 d9       	rcall	.-3224   	; 0xbb4 <uECC_vli_modAdd>
    184c:	a6 01       	movw	r20, r12
    184e:	b3 01       	movw	r22, r6
    1850:	c5 01       	movw	r24, r10
    1852:	11 da       	rcall	.-3038   	; 0xc76 <uECC_vli_modSquare_fast>
    1854:	97 01       	movw	r18, r14
    1856:	ae 01       	movw	r20, r28
    1858:	4f 5d       	subi	r20, 0xDF	; 223
    185a:	5f 4f       	sbci	r21, 0xFF	; 255
    185c:	b5 01       	movw	r22, r10
    185e:	c5 01       	movw	r24, r10
    1860:	c5 d9       	rcall	.-3190   	; 0xbec <uECC_vli_modSub>
    1862:	97 01       	movw	r18, r14
    1864:	a5 01       	movw	r20, r10
    1866:	b4 01       	movw	r22, r8
    1868:	ce 01       	movw	r24, r28
    186a:	8f 5b       	subi	r24, 0xBF	; 191
    186c:	9f 4f       	sbci	r25, 0xFF	; 255
    186e:	be d9       	rcall	.-3204   	; 0xbec <uECC_vli_modSub>
    1870:	96 01       	movw	r18, r12
    1872:	ae 01       	movw	r20, r28
    1874:	4f 5b       	subi	r20, 0xBF	; 191
    1876:	5f 4f       	sbci	r21, 0xFF	; 255
    1878:	b3 01       	movw	r22, r6
    187a:	c3 01       	movw	r24, r6
    187c:	cd d9       	rcall	.-3174   	; 0xc18 <uECC_vli_modMult_fast>
    187e:	97 01       	movw	r18, r14
    1880:	a2 01       	movw	r20, r4
    1882:	b3 01       	movw	r22, r6
    1884:	c3 01       	movw	r24, r6
    1886:	b2 d9       	rcall	.-3228   	; 0xbec <uECC_vli_modSub>
    1888:	a6 01       	movw	r20, r12
    188a:	be 01       	movw	r22, r28
    188c:	6f 5f       	subi	r22, 0xFF	; 255
    188e:	7f 4f       	sbci	r23, 0xFF	; 255
    1890:	ce 01       	movw	r24, r28
    1892:	8f 5b       	subi	r24, 0xBF	; 191
    1894:	9f 4f       	sbci	r25, 0xFF	; 255
    1896:	ef d9       	rcall	.-3106   	; 0xc76 <uECC_vli_modSquare_fast>
    1898:	97 01       	movw	r18, r14
    189a:	ae 01       	movw	r20, r28
    189c:	4f 5d       	subi	r20, 0xDF	; 223
    189e:	5f 4f       	sbci	r21, 0xFF	; 255
    18a0:	be 01       	movw	r22, r28
    18a2:	6f 5b       	subi	r22, 0xBF	; 191
    18a4:	7f 4f       	sbci	r23, 0xFF	; 255
    18a6:	cb 01       	movw	r24, r22
    18a8:	a1 d9       	rcall	.-3262   	; 0xbec <uECC_vli_modSub>
    18aa:	97 01       	movw	r18, r14
    18ac:	a4 01       	movw	r20, r8
    18ae:	be 01       	movw	r22, r28
    18b0:	6f 5b       	subi	r22, 0xBF	; 191
    18b2:	7f 4f       	sbci	r23, 0xFF	; 255
    18b4:	ce 01       	movw	r24, r28
    18b6:	81 96       	adiw	r24, 0x21	; 33
    18b8:	99 d9       	rcall	.-3278   	; 0xbec <uECC_vli_modSub>
    18ba:	96 01       	movw	r18, r12
    18bc:	ae 01       	movw	r20, r28
    18be:	4f 5f       	subi	r20, 0xFF	; 255
    18c0:	5f 4f       	sbci	r21, 0xFF	; 255
    18c2:	be 01       	movw	r22, r28
    18c4:	6f 5d       	subi	r22, 0xDF	; 223
    18c6:	7f 4f       	sbci	r23, 0xFF	; 255
    18c8:	cb 01       	movw	r24, r22
    18ca:	a6 d9       	rcall	.-3252   	; 0xc18 <uECC_vli_modMult_fast>
    18cc:	97 01       	movw	r18, r14
    18ce:	a2 01       	movw	r20, r4
    18d0:	be 01       	movw	r22, r28
    18d2:	6f 5d       	subi	r22, 0xDF	; 223
    18d4:	7f 4f       	sbci	r23, 0xFF	; 255
    18d6:	c2 01       	movw	r24, r4
    18d8:	89 d9       	rcall	.-3310   	; 0xbec <uECC_vli_modSub>
    18da:	41 2f       	mov	r20, r17
    18dc:	be 01       	movw	r22, r28
    18de:	6f 5b       	subi	r22, 0xBF	; 191
    18e0:	7f 4f       	sbci	r23, 0xFF	; 255
    18e2:	c4 01       	movw	r24, r8
    18e4:	0e 94 7b 02 	call	0x4f6	; 0x4f6 <uECC_vli_set>
    18e8:	c0 5a       	subi	r28, 0xA0	; 160
    18ea:	df 4f       	sbci	r29, 0xFF	; 255
    18ec:	0f b6       	in	r0, 0x3f	; 63
    18ee:	f8 94       	cli
    18f0:	de bf       	out	0x3e, r29	; 62
    18f2:	0f be       	out	0x3f, r0	; 63
    18f4:	cd bf       	out	0x3d, r28	; 61
    18f6:	df 91       	pop	r29
    18f8:	cf 91       	pop	r28
    18fa:	1f 91       	pop	r17
    18fc:	0f 91       	pop	r16
    18fe:	ff 90       	pop	r15
    1900:	ef 90       	pop	r14
    1902:	df 90       	pop	r13
    1904:	cf 90       	pop	r12
    1906:	bf 90       	pop	r11
    1908:	af 90       	pop	r10
    190a:	9f 90       	pop	r9
    190c:	8f 90       	pop	r8
    190e:	7f 90       	pop	r7
    1910:	6f 90       	pop	r6
    1912:	5f 90       	pop	r5
    1914:	4f 90       	pop	r4
    1916:	08 95       	ret

00001918 <EccPoint_mult>:
    1918:	2f 92       	push	r2
    191a:	3f 92       	push	r3
    191c:	4f 92       	push	r4
    191e:	5f 92       	push	r5
    1920:	6f 92       	push	r6
    1922:	7f 92       	push	r7
    1924:	8f 92       	push	r8
    1926:	9f 92       	push	r9
    1928:	af 92       	push	r10
    192a:	bf 92       	push	r11
    192c:	cf 92       	push	r12
    192e:	df 92       	push	r13
    1930:	ef 92       	push	r14
    1932:	ff 92       	push	r15
    1934:	0f 93       	push	r16
    1936:	1f 93       	push	r17
    1938:	cf 93       	push	r28
    193a:	df 93       	push	r29
    193c:	cd b7       	in	r28, 0x3d	; 61
    193e:	de b7       	in	r29, 0x3e	; 62
    1940:	cb 5c       	subi	r28, 0xCB	; 203
    1942:	d1 09       	sbc	r29, r1
    1944:	0f b6       	in	r0, 0x3f	; 63
    1946:	f8 94       	cli
    1948:	de bf       	out	0x3e, r29	; 62
    194a:	0f be       	out	0x3f, r0	; 63
    194c:	cd bf       	out	0x3d, r28	; 61
    194e:	c6 53       	subi	r28, 0x36	; 54
    1950:	df 4f       	sbci	r29, 0xFF	; 255
    1952:	99 83       	std	Y+1, r25	; 0x01
    1954:	88 83       	st	Y, r24
    1956:	ca 5c       	subi	r28, 0xCA	; 202
    1958:	d0 40       	sbci	r29, 0x00	; 0
    195a:	cc 53       	subi	r28, 0x3C	; 60
    195c:	df 4f       	sbci	r29, 0xFF	; 255
    195e:	79 83       	std	Y+1, r23	; 0x01
    1960:	68 83       	st	Y, r22
    1962:	c4 5c       	subi	r28, 0xC4	; 196
    1964:	d0 40       	sbci	r29, 0x00	; 0
    1966:	cf 53       	subi	r28, 0x3F	; 63
    1968:	df 4f       	sbci	r29, 0xFF	; 255
    196a:	59 83       	std	Y+1, r21	; 0x01
    196c:	48 83       	st	Y, r20
    196e:	c1 5c       	subi	r28, 0xC1	; 193
    1970:	d0 40       	sbci	r29, 0x00	; 0
    1972:	69 01       	movw	r12, r18
    1974:	17 01       	movw	r2, r14
    1976:	f7 01       	movw	r30, r14
    1978:	f0 81       	ld	r31, Z
    197a:	cd 53       	subi	r28, 0x3D	; 61
    197c:	df 4f       	sbci	r29, 0xFF	; 255
    197e:	f8 83       	st	Y, r31
    1980:	c3 5c       	subi	r28, 0xC3	; 195
    1982:	d0 40       	sbci	r29, 0x00	; 0
    1984:	4f 2f       	mov	r20, r31
    1986:	ce 01       	movw	r24, r28
    1988:	81 96       	adiw	r24, 0x21	; 33
    198a:	0e 94 7b 02 	call	0x4f6	; 0x4f6 <uECC_vli_set>
    198e:	cd 53       	subi	r28, 0x3D	; 61
    1990:	df 4f       	sbci	r29, 0xFF	; 255
    1992:	28 81       	ld	r18, Y
    1994:	c3 5c       	subi	r28, 0xC3	; 195
    1996:	d0 40       	sbci	r29, 0x00	; 0
    1998:	02 2e       	mov	r0, r18
    199a:	00 0c       	add	r0, r0
    199c:	33 0b       	sbc	r19, r19
    199e:	ca 53       	subi	r28, 0x3A	; 58
    19a0:	df 4f       	sbci	r29, 0xFF	; 255
    19a2:	39 83       	std	Y+1, r19	; 0x01
    19a4:	28 83       	st	Y, r18
    19a6:	c6 5c       	subi	r28, 0xC6	; 198
    19a8:	d0 40       	sbci	r29, 0x00	; 0
    19aa:	cc 53       	subi	r28, 0x3C	; 60
    19ac:	df 4f       	sbci	r29, 0xFF	; 255
    19ae:	88 81       	ld	r24, Y
    19b0:	99 81       	ldd	r25, Y+1	; 0x01
    19b2:	c4 5c       	subi	r28, 0xC4	; 196
    19b4:	d0 40       	sbci	r29, 0x00	; 0
    19b6:	82 0f       	add	r24, r18
    19b8:	93 1f       	adc	r25, r19
    19ba:	c8 53       	subi	r28, 0x38	; 56
    19bc:	df 4f       	sbci	r29, 0xFF	; 255
    19be:	99 83       	std	Y+1, r25	; 0x01
    19c0:	88 83       	st	Y, r24
    19c2:	c8 5c       	subi	r28, 0xC8	; 200
    19c4:	d0 40       	sbci	r29, 0x00	; 0
    19c6:	cd 53       	subi	r28, 0x3D	; 61
    19c8:	df 4f       	sbci	r29, 0xFF	; 255
    19ca:	48 81       	ld	r20, Y
    19cc:	c3 5c       	subi	r28, 0xC3	; 195
    19ce:	d0 40       	sbci	r29, 0x00	; 0
    19d0:	bc 01       	movw	r22, r24
    19d2:	ce 01       	movw	r24, r28
    19d4:	8f 59       	subi	r24, 0x9F	; 159
    19d6:	9f 4f       	sbci	r25, 0xFF	; 255
    19d8:	0e 94 7b 02 	call	0x4f6	; 0x4f6 <uECC_vli_set>
    19dc:	f7 01       	movw	r30, r14
    19de:	b0 80       	ld	r11, Z
    19e0:	c1 14       	cp	r12, r1
    19e2:	d1 04       	cpc	r13, r1
    19e4:	41 f0       	breq	.+16     	; 0x19f6 <EccPoint_mult+0xde>
    19e6:	4b 2d       	mov	r20, r11
    19e8:	b6 01       	movw	r22, r12
    19ea:	ce 01       	movw	r24, r28
    19ec:	8f 55       	subi	r24, 0x5F	; 95
    19ee:	9f 4f       	sbci	r25, 0xFF	; 255
    19f0:	0e 94 7b 02 	call	0x4f6	; 0x4f6 <uECC_vli_set>
    19f4:	0c c0       	rjmp	.+24     	; 0x1a0e <EccPoint_mult+0xf6>
    19f6:	6b 2d       	mov	r22, r11
    19f8:	ce 01       	movw	r24, r28
    19fa:	8f 55       	subi	r24, 0x5F	; 95
    19fc:	9f 4f       	sbci	r25, 0xFF	; 255
    19fe:	0e 94 54 02 	call	0x4a8	; 0x4a8 <uECC_vli_clear>
    1a02:	81 e0       	ldi	r24, 0x01	; 1
    1a04:	cf 55       	subi	r28, 0x5F	; 95
    1a06:	df 4f       	sbci	r29, 0xFF	; 255
    1a08:	88 83       	st	Y, r24
    1a0a:	c1 5a       	subi	r28, 0xA1	; 161
    1a0c:	d0 40       	sbci	r29, 0x00	; 0
    1a0e:	4b 2d       	mov	r20, r11
    1a10:	be 01       	movw	r22, r28
    1a12:	6f 5d       	subi	r22, 0xDF	; 223
    1a14:	7f 4f       	sbci	r23, 0xFF	; 255
    1a16:	ce 01       	movw	r24, r28
    1a18:	01 96       	adiw	r24, 0x01	; 1
    1a1a:	0e 94 7b 02 	call	0x4f6	; 0x4f6 <uECC_vli_set>
    1a1e:	0f 2e       	mov	r0, r31
    1a20:	f1 e4       	ldi	r31, 0x41	; 65
    1a22:	ef 2e       	mov	r14, r31
    1a24:	f1 2c       	mov	r15, r1
    1a26:	f0 2d       	mov	r31, r0
    1a28:	ec 0e       	add	r14, r28
    1a2a:	fd 1e       	adc	r15, r29
    1a2c:	f0 e2       	ldi	r31, 0x20	; 32
    1a2e:	ef 0e       	add	r14, r31
    1a30:	f1 1c       	adc	r15, r1
    1a32:	4b 2d       	mov	r20, r11
    1a34:	b7 01       	movw	r22, r14
    1a36:	ce 01       	movw	r24, r28
    1a38:	8f 5b       	subi	r24, 0xBF	; 191
    1a3a:	9f 4f       	sbci	r25, 0xFF	; 255
    1a3c:	0e 94 7b 02 	call	0x4f6	; 0x4f6 <uECC_vli_set>
    1a40:	91 01       	movw	r18, r2
    1a42:	ae 01       	movw	r20, r28
    1a44:	4f 55       	subi	r20, 0x5F	; 95
    1a46:	5f 4f       	sbci	r21, 0xFF	; 255
    1a48:	b7 01       	movw	r22, r14
    1a4a:	ce 01       	movw	r24, r28
    1a4c:	81 96       	adiw	r24, 0x21	; 33
    1a4e:	d1 dd       	rcall	.-1118   	; 0x15f2 <apply_z>
    1a50:	f1 01       	movw	r30, r2
    1a52:	ec 55       	subi	r30, 0x5C	; 92
    1a54:	ff 4f       	sbci	r31, 0xFF	; 255
    1a56:	01 90       	ld	r0, Z+
    1a58:	f0 81       	ld	r31, Z
    1a5a:	e0 2d       	mov	r30, r0
    1a5c:	91 01       	movw	r18, r2
    1a5e:	ae 01       	movw	r20, r28
    1a60:	4f 55       	subi	r20, 0x5F	; 95
    1a62:	5f 4f       	sbci	r21, 0xFF	; 255
    1a64:	b7 01       	movw	r22, r14
    1a66:	ce 01       	movw	r24, r28
    1a68:	81 96       	adiw	r24, 0x21	; 33
    1a6a:	09 95       	icall
    1a6c:	91 01       	movw	r18, r2
    1a6e:	ae 01       	movw	r20, r28
    1a70:	4f 55       	subi	r20, 0x5F	; 95
    1a72:	5f 4f       	sbci	r21, 0xFF	; 255
    1a74:	be 01       	movw	r22, r28
    1a76:	6f 5b       	subi	r22, 0xBF	; 191
    1a78:	7f 4f       	sbci	r23, 0xFF	; 255
    1a7a:	ce 01       	movw	r24, r28
    1a7c:	01 96       	adiw	r24, 0x01	; 1
    1a7e:	b9 dd       	rcall	.-1166   	; 0x15f2 <apply_z>
    1a80:	58 01       	movw	r10, r16
    1a82:	22 e0       	ldi	r18, 0x02	; 2
    1a84:	a2 1a       	sub	r10, r18
    1a86:	b1 08       	sbc	r11, r1
    1a88:	1a 14       	cp	r1, r10
    1a8a:	1b 04       	cpc	r1, r11
    1a8c:	0c f0       	brlt	.+2      	; 0x1a90 <EccPoint_mult+0x178>
    1a8e:	53 c0       	rjmp	.+166    	; 0x1b36 <EccPoint_mult+0x21e>
    1a90:	44 24       	eor	r4, r4
    1a92:	43 94       	inc	r4
    1a94:	51 2c       	mov	r5, r1
    1a96:	b5 01       	movw	r22, r10
    1a98:	cf 53       	subi	r28, 0x3F	; 63
    1a9a:	df 4f       	sbci	r29, 0xFF	; 255
    1a9c:	88 81       	ld	r24, Y
    1a9e:	99 81       	ldd	r25, Y+1	; 0x01
    1aa0:	c1 5c       	subi	r28, 0xC1	; 193
    1aa2:	d0 40       	sbci	r29, 0x00	; 0
    1aa4:	0e 94 2e 05 	call	0xa5c	; 0xa5c <uECC_vli_testBit>
    1aa8:	92 01       	movw	r18, r4
    1aaa:	88 23       	and	r24, r24
    1aac:	11 f0       	breq	.+4      	; 0x1ab2 <EccPoint_mult+0x19a>
    1aae:	20 e0       	ldi	r18, 0x00	; 0
    1ab0:	30 e0       	ldi	r19, 0x00	; 0
    1ab2:	39 01       	movw	r6, r18
    1ab4:	66 0c       	add	r6, r6
    1ab6:	77 1c       	adc	r7, r7
    1ab8:	66 0c       	add	r6, r6
    1aba:	77 1c       	adc	r7, r7
    1abc:	66 0c       	add	r6, r6
    1abe:	77 1c       	adc	r7, r7
    1ac0:	66 0c       	add	r6, r6
    1ac2:	77 1c       	adc	r7, r7
    1ac4:	66 0c       	add	r6, r6
    1ac6:	77 1c       	adc	r7, r7
    1ac8:	0f 2e       	mov	r0, r31
    1aca:	f1 e4       	ldi	r31, 0x41	; 65
    1acc:	cf 2e       	mov	r12, r31
    1ace:	d1 2c       	mov	r13, r1
    1ad0:	f0 2d       	mov	r31, r0
    1ad2:	cc 0e       	add	r12, r28
    1ad4:	dd 1e       	adc	r13, r29
    1ad6:	c6 0c       	add	r12, r6
    1ad8:	d7 1c       	adc	r13, r7
    1ada:	81 e0       	ldi	r24, 0x01	; 1
    1adc:	90 e0       	ldi	r25, 0x00	; 0
    1ade:	8c 0f       	add	r24, r28
    1ae0:	9d 1f       	adc	r25, r29
    1ae2:	68 0e       	add	r6, r24
    1ae4:	79 1e       	adc	r7, r25
    1ae6:	72 01       	movw	r14, r4
    1ae8:	e2 1a       	sub	r14, r18
    1aea:	f3 0a       	sbc	r15, r19
    1aec:	ee 0c       	add	r14, r14
    1aee:	ff 1c       	adc	r15, r15
    1af0:	ee 0c       	add	r14, r14
    1af2:	ff 1c       	adc	r15, r15
    1af4:	ee 0c       	add	r14, r14
    1af6:	ff 1c       	adc	r15, r15
    1af8:	ee 0c       	add	r14, r14
    1afa:	ff 1c       	adc	r15, r15
    1afc:	ee 0c       	add	r14, r14
    1afe:	ff 1c       	adc	r15, r15
    1b00:	0f 2e       	mov	r0, r31
    1b02:	f1 e4       	ldi	r31, 0x41	; 65
    1b04:	8f 2e       	mov	r8, r31
    1b06:	91 2c       	mov	r9, r1
    1b08:	f0 2d       	mov	r31, r0
    1b0a:	8c 0e       	add	r8, r28
    1b0c:	9d 1e       	adc	r9, r29
    1b0e:	8e 0c       	add	r8, r14
    1b10:	9f 1c       	adc	r9, r15
    1b12:	e8 0e       	add	r14, r24
    1b14:	f9 1e       	adc	r15, r25
    1b16:	81 01       	movw	r16, r2
    1b18:	96 01       	movw	r18, r12
    1b1a:	a3 01       	movw	r20, r6
    1b1c:	b4 01       	movw	r22, r8
    1b1e:	c7 01       	movw	r24, r14
    1b20:	38 de       	rcall	.-912    	; 0x1792 <XYcZ_addC>
    1b22:	94 01       	movw	r18, r8
    1b24:	a7 01       	movw	r20, r14
    1b26:	b6 01       	movw	r22, r12
    1b28:	c3 01       	movw	r24, r6
    1b2a:	a4 dd       	rcall	.-1208   	; 0x1674 <XYcZ_add>
    1b2c:	91 e0       	ldi	r25, 0x01	; 1
    1b2e:	a9 1a       	sub	r10, r25
    1b30:	b1 08       	sbc	r11, r1
    1b32:	09 f0       	breq	.+2      	; 0x1b36 <EccPoint_mult+0x21e>
    1b34:	b0 cf       	rjmp	.-160    	; 0x1a96 <EccPoint_mult+0x17e>
    1b36:	60 e0       	ldi	r22, 0x00	; 0
    1b38:	70 e0       	ldi	r23, 0x00	; 0
    1b3a:	cf 53       	subi	r28, 0x3F	; 63
    1b3c:	df 4f       	sbci	r29, 0xFF	; 255
    1b3e:	88 81       	ld	r24, Y
    1b40:	99 81       	ldd	r25, Y+1	; 0x01
    1b42:	c1 5c       	subi	r28, 0xC1	; 193
    1b44:	d0 40       	sbci	r29, 0x00	; 0
    1b46:	0e 94 2e 05 	call	0xa5c	; 0xa5c <uECC_vli_testBit>
    1b4a:	21 e0       	ldi	r18, 0x01	; 1
    1b4c:	30 e0       	ldi	r19, 0x00	; 0
    1b4e:	88 23       	and	r24, r24
    1b50:	11 f0       	breq	.+4      	; 0x1b56 <EccPoint_mult+0x23e>
    1b52:	20 e0       	ldi	r18, 0x00	; 0
    1b54:	30 e0       	ldi	r19, 0x00	; 0
    1b56:	69 01       	movw	r12, r18
    1b58:	cc 0c       	add	r12, r12
    1b5a:	dd 1c       	adc	r13, r13
    1b5c:	cc 0c       	add	r12, r12
    1b5e:	dd 1c       	adc	r13, r13
    1b60:	cc 0c       	add	r12, r12
    1b62:	dd 1c       	adc	r13, r13
    1b64:	cc 0c       	add	r12, r12
    1b66:	dd 1c       	adc	r13, r13
    1b68:	cc 0c       	add	r12, r12
    1b6a:	dd 1c       	adc	r13, r13
    1b6c:	0f 2e       	mov	r0, r31
    1b6e:	f1 e4       	ldi	r31, 0x41	; 65
    1b70:	8f 2e       	mov	r8, r31
    1b72:	91 2c       	mov	r9, r1
    1b74:	f0 2d       	mov	r31, r0
    1b76:	8c 0e       	add	r8, r28
    1b78:	9d 1e       	adc	r9, r29
    1b7a:	8c 0c       	add	r8, r12
    1b7c:	9d 1c       	adc	r9, r13
    1b7e:	e1 e0       	ldi	r30, 0x01	; 1
    1b80:	f0 e0       	ldi	r31, 0x00	; 0
    1b82:	ec 0f       	add	r30, r28
    1b84:	fd 1f       	adc	r31, r29
    1b86:	ce 0e       	add	r12, r30
    1b88:	df 1e       	adc	r13, r31
    1b8a:	81 e0       	ldi	r24, 0x01	; 1
    1b8c:	90 e0       	ldi	r25, 0x00	; 0
    1b8e:	7c 01       	movw	r14, r24
    1b90:	e2 1a       	sub	r14, r18
    1b92:	f3 0a       	sbc	r15, r19
    1b94:	ee 0c       	add	r14, r14
    1b96:	ff 1c       	adc	r15, r15
    1b98:	ee 0c       	add	r14, r14
    1b9a:	ff 1c       	adc	r15, r15
    1b9c:	ee 0c       	add	r14, r14
    1b9e:	ff 1c       	adc	r15, r15
    1ba0:	ee 0c       	add	r14, r14
    1ba2:	ff 1c       	adc	r15, r15
    1ba4:	ee 0c       	add	r14, r14
    1ba6:	ff 1c       	adc	r15, r15
    1ba8:	0f 2e       	mov	r0, r31
    1baa:	f1 e4       	ldi	r31, 0x41	; 65
    1bac:	af 2e       	mov	r10, r31
    1bae:	b1 2c       	mov	r11, r1
    1bb0:	f0 2d       	mov	r31, r0
    1bb2:	ac 0e       	add	r10, r28
    1bb4:	bd 1e       	adc	r11, r29
    1bb6:	ae 0c       	add	r10, r14
    1bb8:	bf 1c       	adc	r11, r15
    1bba:	ee 0e       	add	r14, r30
    1bbc:	ff 1e       	adc	r15, r31
    1bbe:	81 01       	movw	r16, r2
    1bc0:	94 01       	movw	r18, r8
    1bc2:	a6 01       	movw	r20, r12
    1bc4:	b5 01       	movw	r22, r10
    1bc6:	c7 01       	movw	r24, r14
    1bc8:	e4 dd       	rcall	.-1080   	; 0x1792 <XYcZ_addC>
    1bca:	31 01       	movw	r6, r2
    1bcc:	f4 e0       	ldi	r31, 0x04	; 4
    1bce:	6f 0e       	add	r6, r31
    1bd0:	71 1c       	adc	r7, r1
    1bd2:	cd 53       	subi	r28, 0x3D	; 61
    1bd4:	df 4f       	sbci	r29, 0xFF	; 255
    1bd6:	08 81       	ld	r16, Y
    1bd8:	c3 5c       	subi	r28, 0xC3	; 195
    1bda:	d0 40       	sbci	r29, 0x00	; 0
    1bdc:	93 01       	movw	r18, r6
    1bde:	ae 01       	movw	r20, r28
    1be0:	4f 5f       	subi	r20, 0xFF	; 255
    1be2:	5f 4f       	sbci	r21, 0xFF	; 255
    1be4:	be 01       	movw	r22, r28
    1be6:	6f 5d       	subi	r22, 0xDF	; 223
    1be8:	7f 4f       	sbci	r23, 0xFF	; 255
    1bea:	ce 01       	movw	r24, r28
    1bec:	8f 57       	subi	r24, 0x7F	; 127
    1bee:	9f 4f       	sbci	r25, 0xFF	; 255
    1bf0:	0e 94 f6 05 	call	0xbec	; 0xbec <uECC_vli_modSub>
    1bf4:	91 01       	movw	r18, r2
    1bf6:	a5 01       	movw	r20, r10
    1bf8:	be 01       	movw	r22, r28
    1bfa:	6f 57       	subi	r22, 0x7F	; 127
    1bfc:	7f 4f       	sbci	r23, 0xFF	; 255
    1bfe:	cb 01       	movw	r24, r22
    1c00:	0b d8       	rcall	.-4074   	; 0xc18 <uECC_vli_modMult_fast>
    1c02:	91 01       	movw	r18, r2
    1c04:	cc 53       	subi	r28, 0x3C	; 60
    1c06:	df 4f       	sbci	r29, 0xFF	; 255
    1c08:	48 81       	ld	r20, Y
    1c0a:	59 81       	ldd	r21, Y+1	; 0x01
    1c0c:	c4 5c       	subi	r28, 0xC4	; 196
    1c0e:	d0 40       	sbci	r29, 0x00	; 0
    1c10:	be 01       	movw	r22, r28
    1c12:	6f 57       	subi	r22, 0x7F	; 127
    1c14:	7f 4f       	sbci	r23, 0xFF	; 255
    1c16:	cb 01       	movw	r24, r22
    1c18:	0e 94 0c 06 	call	0xc18	; 0xc18 <uECC_vli_modMult_fast>
    1c1c:	cd 53       	subi	r28, 0x3D	; 61
    1c1e:	df 4f       	sbci	r29, 0xFF	; 255
    1c20:	28 81       	ld	r18, Y
    1c22:	c3 5c       	subi	r28, 0xC3	; 195
    1c24:	d0 40       	sbci	r29, 0x00	; 0
    1c26:	a3 01       	movw	r20, r6
    1c28:	be 01       	movw	r22, r28
    1c2a:	6f 57       	subi	r22, 0x7F	; 127
    1c2c:	7f 4f       	sbci	r23, 0xFF	; 255
    1c2e:	cb 01       	movw	r24, r22
    1c30:	4d d8       	rcall	.-3942   	; 0xccc <uECC_vli_modInv>
    1c32:	91 01       	movw	r18, r2
    1c34:	c8 53       	subi	r28, 0x38	; 56
    1c36:	df 4f       	sbci	r29, 0xFF	; 255
    1c38:	48 81       	ld	r20, Y
    1c3a:	59 81       	ldd	r21, Y+1	; 0x01
    1c3c:	c8 5c       	subi	r28, 0xC8	; 200
    1c3e:	d0 40       	sbci	r29, 0x00	; 0
    1c40:	be 01       	movw	r22, r28
    1c42:	6f 57       	subi	r22, 0x7F	; 127
    1c44:	7f 4f       	sbci	r23, 0xFF	; 255
    1c46:	cb 01       	movw	r24, r22
    1c48:	0e 94 0c 06 	call	0xc18	; 0xc18 <uECC_vli_modMult_fast>
    1c4c:	91 01       	movw	r18, r2
    1c4e:	a7 01       	movw	r20, r14
    1c50:	be 01       	movw	r22, r28
    1c52:	6f 57       	subi	r22, 0x7F	; 127
    1c54:	7f 4f       	sbci	r23, 0xFF	; 255
    1c56:	cb 01       	movw	r24, r22
    1c58:	0e 94 0c 06 	call	0xc18	; 0xc18 <uECC_vli_modMult_fast>
    1c5c:	81 01       	movw	r16, r2
    1c5e:	95 01       	movw	r18, r10
    1c60:	a7 01       	movw	r20, r14
    1c62:	b4 01       	movw	r22, r8
    1c64:	c6 01       	movw	r24, r12
    1c66:	06 dd       	rcall	.-1524   	; 0x1674 <XYcZ_add>
    1c68:	91 01       	movw	r18, r2
    1c6a:	ae 01       	movw	r20, r28
    1c6c:	4f 57       	subi	r20, 0x7F	; 127
    1c6e:	5f 4f       	sbci	r21, 0xFF	; 255
    1c70:	be 01       	movw	r22, r28
    1c72:	6f 5b       	subi	r22, 0xBF	; 191
    1c74:	7f 4f       	sbci	r23, 0xFF	; 255
    1c76:	ce 01       	movw	r24, r28
    1c78:	01 96       	adiw	r24, 0x01	; 1
    1c7a:	bb dc       	rcall	.-1674   	; 0x15f2 <apply_z>
    1c7c:	cd 53       	subi	r28, 0x3D	; 61
    1c7e:	df 4f       	sbci	r29, 0xFF	; 255
    1c80:	48 81       	ld	r20, Y
    1c82:	c3 5c       	subi	r28, 0xC3	; 195
    1c84:	d0 40       	sbci	r29, 0x00	; 0
    1c86:	be 01       	movw	r22, r28
    1c88:	6f 5f       	subi	r22, 0xFF	; 255
    1c8a:	7f 4f       	sbci	r23, 0xFF	; 255
    1c8c:	c6 53       	subi	r28, 0x36	; 54
    1c8e:	df 4f       	sbci	r29, 0xFF	; 255
    1c90:	88 81       	ld	r24, Y
    1c92:	99 81       	ldd	r25, Y+1	; 0x01
    1c94:	ca 5c       	subi	r28, 0xCA	; 202
    1c96:	d0 40       	sbci	r29, 0x00	; 0
    1c98:	0e 94 7b 02 	call	0x4f6	; 0x4f6 <uECC_vli_set>
    1c9c:	cd 53       	subi	r28, 0x3D	; 61
    1c9e:	df 4f       	sbci	r29, 0xFF	; 255
    1ca0:	48 81       	ld	r20, Y
    1ca2:	c3 5c       	subi	r28, 0xC3	; 195
    1ca4:	d0 40       	sbci	r29, 0x00	; 0
    1ca6:	be 01       	movw	r22, r28
    1ca8:	6f 5b       	subi	r22, 0xBF	; 191
    1caa:	7f 4f       	sbci	r23, 0xFF	; 255
    1cac:	c6 53       	subi	r28, 0x36	; 54
    1cae:	df 4f       	sbci	r29, 0xFF	; 255
    1cb0:	88 81       	ld	r24, Y
    1cb2:	99 81       	ldd	r25, Y+1	; 0x01
    1cb4:	ca 5c       	subi	r28, 0xCA	; 202
    1cb6:	d0 40       	sbci	r29, 0x00	; 0
    1cb8:	ca 53       	subi	r28, 0x3A	; 58
    1cba:	df 4f       	sbci	r29, 0xFF	; 255
    1cbc:	28 81       	ld	r18, Y
    1cbe:	39 81       	ldd	r19, Y+1	; 0x01
    1cc0:	c6 5c       	subi	r28, 0xC6	; 198
    1cc2:	d0 40       	sbci	r29, 0x00	; 0
    1cc4:	82 0f       	add	r24, r18
    1cc6:	93 1f       	adc	r25, r19
    1cc8:	0e 94 7b 02 	call	0x4f6	; 0x4f6 <uECC_vli_set>
    1ccc:	c5 53       	subi	r28, 0x35	; 53
    1cce:	df 4f       	sbci	r29, 0xFF	; 255
    1cd0:	0f b6       	in	r0, 0x3f	; 63
    1cd2:	f8 94       	cli
    1cd4:	de bf       	out	0x3e, r29	; 62
    1cd6:	0f be       	out	0x3f, r0	; 63
    1cd8:	cd bf       	out	0x3d, r28	; 61
    1cda:	df 91       	pop	r29
    1cdc:	cf 91       	pop	r28
    1cde:	1f 91       	pop	r17
    1ce0:	0f 91       	pop	r16
    1ce2:	ff 90       	pop	r15
    1ce4:	ef 90       	pop	r14
    1ce6:	df 90       	pop	r13
    1ce8:	cf 90       	pop	r12
    1cea:	bf 90       	pop	r11
    1cec:	af 90       	pop	r10
    1cee:	9f 90       	pop	r9
    1cf0:	8f 90       	pop	r8
    1cf2:	7f 90       	pop	r7
    1cf4:	6f 90       	pop	r6
    1cf6:	5f 90       	pop	r5
    1cf8:	4f 90       	pop	r4
    1cfa:	3f 90       	pop	r3
    1cfc:	2f 90       	pop	r2
    1cfe:	08 95       	ret

00001d00 <regularize_k>:
    1d00:	af 92       	push	r10
    1d02:	bf 92       	push	r11
    1d04:	cf 92       	push	r12
    1d06:	df 92       	push	r13
    1d08:	ef 92       	push	r14
    1d0a:	ff 92       	push	r15
    1d0c:	0f 93       	push	r16
    1d0e:	1f 93       	push	r17
    1d10:	cf 93       	push	r28
    1d12:	df 93       	push	r29
    1d14:	7b 01       	movw	r14, r22
    1d16:	5a 01       	movw	r10, r20
    1d18:	f9 01       	movw	r30, r18
    1d1a:	c2 80       	ldd	r12, Z+2	; 0x02
    1d1c:	d3 80       	ldd	r13, Z+3	; 0x03
    1d1e:	a6 01       	movw	r20, r12
    1d20:	49 5f       	subi	r20, 0xF9	; 249
    1d22:	5f 4f       	sbci	r21, 0xFF	; 255
    1d24:	ea 01       	movw	r28, r20
    1d26:	dd 23       	and	r29, r29
    1d28:	0c f4       	brge	.+2      	; 0x1d2c <regularize_k+0x2c>
    1d2a:	27 96       	adiw	r28, 0x07	; 7
    1d2c:	d5 95       	asr	r29
    1d2e:	c7 95       	ror	r28
    1d30:	d5 95       	asr	r29
    1d32:	c7 95       	ror	r28
    1d34:	d5 95       	asr	r29
    1d36:	c7 95       	ror	r28
    1d38:	89 01       	movw	r16, r18
    1d3a:	0c 5d       	subi	r16, 0xDC	; 220
    1d3c:	1f 4f       	sbci	r17, 0xFF	; 255
    1d3e:	2c 2f       	mov	r18, r28
    1d40:	a8 01       	movw	r20, r16
    1d42:	bc 01       	movw	r22, r24
    1d44:	c7 01       	movw	r24, r14
    1d46:	0e 94 3a 03 	call	0x674	; 0x674 <uECC_vli_add>
    1d4a:	81 11       	cpse	r24, r1
    1d4c:	11 c0       	rjmp	.+34     	; 0x1d70 <regularize_k+0x70>
    1d4e:	28 e0       	ldi	r18, 0x08	; 8
    1d50:	c2 02       	muls	r28, r18
    1d52:	c0 01       	movw	r24, r0
    1d54:	11 24       	eor	r1, r1
    1d56:	c8 16       	cp	r12, r24
    1d58:	d9 06       	cpc	r13, r25
    1d5a:	6c f4       	brge	.+26     	; 0x1d76 <regularize_k+0x76>
    1d5c:	b6 01       	movw	r22, r12
    1d5e:	c7 01       	movw	r24, r14
    1d60:	0e 94 2e 05 	call	0xa5c	; 0xa5c <uECC_vli_testBit>
    1d64:	91 e0       	ldi	r25, 0x01	; 1
    1d66:	81 11       	cpse	r24, r1
    1d68:	01 c0       	rjmp	.+2      	; 0x1d6c <regularize_k+0x6c>
    1d6a:	90 e0       	ldi	r25, 0x00	; 0
    1d6c:	d9 2e       	mov	r13, r25
    1d6e:	04 c0       	rjmp	.+8      	; 0x1d78 <regularize_k+0x78>
    1d70:	dd 24       	eor	r13, r13
    1d72:	d3 94       	inc	r13
    1d74:	01 c0       	rjmp	.+2      	; 0x1d78 <regularize_k+0x78>
    1d76:	d1 2c       	mov	r13, r1
    1d78:	2c 2f       	mov	r18, r28
    1d7a:	a8 01       	movw	r20, r16
    1d7c:	b7 01       	movw	r22, r14
    1d7e:	c5 01       	movw	r24, r10
    1d80:	0e 94 3a 03 	call	0x674	; 0x674 <uECC_vli_add>
    1d84:	8d 2d       	mov	r24, r13
    1d86:	df 91       	pop	r29
    1d88:	cf 91       	pop	r28
    1d8a:	1f 91       	pop	r17
    1d8c:	0f 91       	pop	r16
    1d8e:	ff 90       	pop	r15
    1d90:	ef 90       	pop	r14
    1d92:	df 90       	pop	r13
    1d94:	cf 90       	pop	r12
    1d96:	bf 90       	pop	r11
    1d98:	af 90       	pop	r10
    1d9a:	08 95       	ret

00001d9c <EccPoint_compute_public_key>:
    1d9c:	af 92       	push	r10
    1d9e:	bf 92       	push	r11
    1da0:	cf 92       	push	r12
    1da2:	df 92       	push	r13
    1da4:	ef 92       	push	r14
    1da6:	ff 92       	push	r15
    1da8:	0f 93       	push	r16
    1daa:	1f 93       	push	r17
    1dac:	cf 93       	push	r28
    1dae:	df 93       	push	r29
    1db0:	cd b7       	in	r28, 0x3d	; 61
    1db2:	de b7       	in	r29, 0x3e	; 62
    1db4:	c4 54       	subi	r28, 0x44	; 68
    1db6:	d1 09       	sbc	r29, r1
    1db8:	0f b6       	in	r0, 0x3f	; 63
    1dba:	f8 94       	cli
    1dbc:	de bf       	out	0x3e, r29	; 62
    1dbe:	0f be       	out	0x3f, r0	; 63
    1dc0:	cd bf       	out	0x3d, r28	; 61
    1dc2:	5c 01       	movw	r10, r24
    1dc4:	cb 01       	movw	r24, r22
    1dc6:	6a 01       	movw	r12, r20
    1dc8:	7e 01       	movw	r14, r28
    1dca:	21 e4       	ldi	r18, 0x41	; 65
    1dcc:	e2 0e       	add	r14, r18
    1dce:	f1 1c       	adc	r15, r1
    1dd0:	be 01       	movw	r22, r28
    1dd2:	6f 5f       	subi	r22, 0xFF	; 255
    1dd4:	7f 4f       	sbci	r23, 0xFF	; 255
    1dd6:	f7 01       	movw	r30, r14
    1dd8:	71 83       	std	Z+1, r23	; 0x01
    1dda:	60 83       	st	Z, r22
    1ddc:	ae 01       	movw	r20, r28
    1dde:	4f 5d       	subi	r20, 0xDF	; 223
    1de0:	5f 4f       	sbci	r21, 0xFF	; 255
    1de2:	53 83       	std	Z+3, r21	; 0x03
    1de4:	42 83       	std	Z+2, r20	; 0x02
    1de6:	96 01       	movw	r18, r12
    1de8:	8b df       	rcall	.-234    	; 0x1d00 <regularize_k>
    1dea:	f6 01       	movw	r30, r12
    1dec:	02 81       	ldd	r16, Z+2	; 0x02
    1dee:	13 81       	ldd	r17, Z+3	; 0x03
    1df0:	0f 5f       	subi	r16, 0xFF	; 255
    1df2:	1f 4f       	sbci	r17, 0xFF	; 255
    1df4:	f7 01       	movw	r30, r14
    1df6:	21 e0       	ldi	r18, 0x01	; 1
    1df8:	30 e0       	ldi	r19, 0x00	; 0
    1dfa:	88 23       	and	r24, r24
    1dfc:	11 f0       	breq	.+4      	; 0x1e02 <EccPoint_compute_public_key+0x66>
    1dfe:	20 e0       	ldi	r18, 0x00	; 0
    1e00:	30 e0       	ldi	r19, 0x00	; 0
    1e02:	22 0f       	add	r18, r18
    1e04:	33 1f       	adc	r19, r19
    1e06:	e2 0f       	add	r30, r18
    1e08:	f3 1f       	adc	r31, r19
    1e0a:	40 81       	ld	r20, Z
    1e0c:	51 81       	ldd	r21, Z+1	; 0x01
    1e0e:	b6 01       	movw	r22, r12
    1e10:	6c 5b       	subi	r22, 0xBC	; 188
    1e12:	7f 4f       	sbci	r23, 0xFF	; 255
    1e14:	76 01       	movw	r14, r12
    1e16:	20 e0       	ldi	r18, 0x00	; 0
    1e18:	30 e0       	ldi	r19, 0x00	; 0
    1e1a:	c5 01       	movw	r24, r10
    1e1c:	7d dd       	rcall	.-1286   	; 0x1918 <EccPoint_mult>
    1e1e:	f6 01       	movw	r30, r12
    1e20:	60 81       	ld	r22, Z
    1e22:	66 0f       	add	r22, r22
    1e24:	c5 01       	movw	r24, r10
    1e26:	0e 94 18 05 	call	0xa30	; 0xa30 <uECC_vli_isZero>
    1e2a:	91 e0       	ldi	r25, 0x01	; 1
    1e2c:	81 11       	cpse	r24, r1
    1e2e:	90 e0       	ldi	r25, 0x00	; 0
    1e30:	89 2f       	mov	r24, r25
    1e32:	cc 5b       	subi	r28, 0xBC	; 188
    1e34:	df 4f       	sbci	r29, 0xFF	; 255
    1e36:	0f b6       	in	r0, 0x3f	; 63
    1e38:	f8 94       	cli
    1e3a:	de bf       	out	0x3e, r29	; 62
    1e3c:	0f be       	out	0x3f, r0	; 63
    1e3e:	cd bf       	out	0x3d, r28	; 61
    1e40:	df 91       	pop	r29
    1e42:	cf 91       	pop	r28
    1e44:	1f 91       	pop	r17
    1e46:	0f 91       	pop	r16
    1e48:	ff 90       	pop	r15
    1e4a:	ef 90       	pop	r14
    1e4c:	df 90       	pop	r13
    1e4e:	cf 90       	pop	r12
    1e50:	bf 90       	pop	r11
    1e52:	af 90       	pop	r10
    1e54:	08 95       	ret

00001e56 <uECC_vli_nativeToBytes>:
    1e56:	cf 93       	push	r28
    1e58:	df 93       	push	r29
    1e5a:	dc 01       	movw	r26, r24
    1e5c:	16 16       	cp	r1, r22
    1e5e:	17 06       	cpc	r1, r23
    1e60:	cc f4       	brge	.+50     	; 0x1e94 <uECC_vli_nativeToBytes+0x3e>
    1e62:	20 e0       	ldi	r18, 0x00	; 0
    1e64:	30 e0       	ldi	r19, 0x00	; 0
    1e66:	90 e0       	ldi	r25, 0x00	; 0
    1e68:	eb 01       	movw	r28, r22
    1e6a:	21 97       	sbiw	r28, 0x01	; 1
    1e6c:	fe 01       	movw	r30, r28
    1e6e:	e2 1b       	sub	r30, r18
    1e70:	f3 0b       	sbc	r31, r19
    1e72:	e4 0f       	add	r30, r20
    1e74:	f5 1f       	adc	r31, r21
    1e76:	20 81       	ld	r18, Z
    1e78:	fd 01       	movw	r30, r26
    1e7a:	e9 0f       	add	r30, r25
    1e7c:	f1 1d       	adc	r31, r1
    1e7e:	97 fd       	sbrc	r25, 7
    1e80:	fa 95       	dec	r31
    1e82:	20 83       	st	Z, r18
    1e84:	9f 5f       	subi	r25, 0xFF	; 255
    1e86:	29 2f       	mov	r18, r25
    1e88:	09 2e       	mov	r0, r25
    1e8a:	00 0c       	add	r0, r0
    1e8c:	33 0b       	sbc	r19, r19
    1e8e:	26 17       	cp	r18, r22
    1e90:	37 07       	cpc	r19, r23
    1e92:	64 f3       	brlt	.-40     	; 0x1e6c <uECC_vli_nativeToBytes+0x16>
    1e94:	df 91       	pop	r29
    1e96:	cf 91       	pop	r28
    1e98:	08 95       	ret

00001e9a <uECC_generate_random_int>:
    1e9a:	9f 92       	push	r9
    1e9c:	af 92       	push	r10
    1e9e:	bf 92       	push	r11
    1ea0:	cf 92       	push	r12
    1ea2:	df 92       	push	r13
    1ea4:	ef 92       	push	r14
    1ea6:	ff 92       	push	r15
    1ea8:	0f 93       	push	r16
    1eaa:	1f 93       	push	r17
    1eac:	cf 93       	push	r28
    1eae:	df 93       	push	r29
    1eb0:	8c 01       	movw	r16, r24
    1eb2:	5b 01       	movw	r10, r22
    1eb4:	d4 2f       	mov	r29, r20
    1eb6:	64 2f       	mov	r22, r20
    1eb8:	c5 01       	movw	r24, r10
    1eba:	0e 94 44 05 	call	0xa88	; 0xa88 <uECC_vli_numBits>
    1ebe:	20 91 ae 02 	lds	r18, 0x02AE	; 0x8002ae <__data_end>
    1ec2:	30 91 af 02 	lds	r19, 0x02AF	; 0x8002af <__data_end+0x1>
    1ec6:	23 2b       	or	r18, r19
    1ec8:	c1 f1       	breq	.+112    	; 0x1f3a <uECC_generate_random_int+0xa0>
    1eca:	48 e0       	ldi	r20, 0x08	; 8
    1ecc:	d4 02       	muls	r29, r20
    1ece:	90 01       	movw	r18, r0
    1ed0:	11 24       	eor	r1, r1
    1ed2:	28 1b       	sub	r18, r24
    1ed4:	39 0b       	sbc	r19, r25
    1ed6:	8f ef       	ldi	r24, 0xFF	; 255
    1ed8:	90 e0       	ldi	r25, 0x00	; 0
    1eda:	02 c0       	rjmp	.+4      	; 0x1ee0 <uECC_generate_random_int+0x46>
    1edc:	95 95       	asr	r25
    1ede:	87 95       	ror	r24
    1ee0:	2a 95       	dec	r18
    1ee2:	e2 f7       	brpl	.-8      	; 0x1edc <uECC_generate_random_int+0x42>
    1ee4:	98 2e       	mov	r9, r24
    1ee6:	c0 e4       	ldi	r28, 0x40	; 64
    1ee8:	cd 2e       	mov	r12, r29
    1eea:	0d 2e       	mov	r0, r29
    1eec:	00 0c       	add	r0, r0
    1eee:	dd 08       	sbc	r13, r13
    1ef0:	76 01       	movw	r14, r12
    1ef2:	81 e0       	ldi	r24, 0x01	; 1
    1ef4:	e8 1a       	sub	r14, r24
    1ef6:	f1 08       	sbc	r15, r1
    1ef8:	e0 0e       	add	r14, r16
    1efa:	f1 1e       	adc	r15, r17
    1efc:	e0 91 ae 02 	lds	r30, 0x02AE	; 0x8002ae <__data_end>
    1f00:	f0 91 af 02 	lds	r31, 0x02AF	; 0x8002af <__data_end+0x1>
    1f04:	b6 01       	movw	r22, r12
    1f06:	c8 01       	movw	r24, r16
    1f08:	09 95       	icall
    1f0a:	00 97       	sbiw	r24, 0x00	; 0
    1f0c:	d9 f0       	breq	.+54     	; 0x1f44 <uECC_generate_random_int+0xaa>
    1f0e:	f7 01       	movw	r30, r14
    1f10:	80 81       	ld	r24, Z
    1f12:	89 21       	and	r24, r9
    1f14:	80 83       	st	Z, r24
    1f16:	6d 2f       	mov	r22, r29
    1f18:	c8 01       	movw	r24, r16
    1f1a:	0e 94 18 05 	call	0xa30	; 0xa30 <uECC_vli_isZero>
    1f1e:	81 11       	cpse	r24, r1
    1f20:	07 c0       	rjmp	.+14     	; 0x1f30 <uECC_generate_random_int+0x96>
    1f22:	4d 2f       	mov	r20, r29
    1f24:	b8 01       	movw	r22, r16
    1f26:	c5 01       	movw	r24, r10
    1f28:	0e 94 ad 05 	call	0xb5a	; 0xb5a <uECC_vli_cmp>
    1f2c:	81 30       	cpi	r24, 0x01	; 1
    1f2e:	41 f0       	breq	.+16     	; 0x1f40 <uECC_generate_random_int+0xa6>
    1f30:	c1 50       	subi	r28, 0x01	; 1
    1f32:	21 f7       	brne	.-56     	; 0x1efc <uECC_generate_random_int+0x62>
    1f34:	80 e0       	ldi	r24, 0x00	; 0
    1f36:	90 e0       	ldi	r25, 0x00	; 0
    1f38:	05 c0       	rjmp	.+10     	; 0x1f44 <uECC_generate_random_int+0xaa>
    1f3a:	80 e0       	ldi	r24, 0x00	; 0
    1f3c:	90 e0       	ldi	r25, 0x00	; 0
    1f3e:	02 c0       	rjmp	.+4      	; 0x1f44 <uECC_generate_random_int+0xaa>
    1f40:	81 e0       	ldi	r24, 0x01	; 1
    1f42:	90 e0       	ldi	r25, 0x00	; 0
    1f44:	df 91       	pop	r29
    1f46:	cf 91       	pop	r28
    1f48:	1f 91       	pop	r17
    1f4a:	0f 91       	pop	r16
    1f4c:	ff 90       	pop	r15
    1f4e:	ef 90       	pop	r14
    1f50:	df 90       	pop	r13
    1f52:	cf 90       	pop	r12
    1f54:	bf 90       	pop	r11
    1f56:	af 90       	pop	r10
    1f58:	9f 90       	pop	r9
    1f5a:	08 95       	ret

00001f5c <uECC_set_rng>:
    1f5c:	90 93 af 02 	sts	0x02AF, r25	; 0x8002af <__data_end+0x1>
    1f60:	80 93 ae 02 	sts	0x02AE, r24	; 0x8002ae <__data_end>
    1f64:	08 95       	ret

00001f66 <uECC_secp256r1>:
    1f66:	8a e0       	ldi	r24, 0x0A	; 10
    1f68:	91 e0       	ldi	r25, 0x01	; 1
    1f6a:	08 95       	ret

00001f6c <uECC_make_key>:
    return 0;
}

int uECC_make_key(uint8_t *public_key,
                  uint8_t *private_key,
                  uECC_Curve curve) {
    1f6c:	9f 92       	push	r9
    1f6e:	af 92       	push	r10
    1f70:	bf 92       	push	r11
    1f72:	cf 92       	push	r12
    1f74:	df 92       	push	r13
    1f76:	ef 92       	push	r14
    1f78:	ff 92       	push	r15
    1f7a:	0f 93       	push	r16
    1f7c:	1f 93       	push	r17
    1f7e:	cf 93       	push	r28
    1f80:	df 93       	push	r29
    1f82:	cd b7       	in	r28, 0x3d	; 61
    1f84:	de b7       	in	r29, 0x3e	; 62
    1f86:	c0 56       	subi	r28, 0x60	; 96
    1f88:	d1 09       	sbc	r29, r1
    1f8a:	0f b6       	in	r0, 0x3f	; 63
    1f8c:	f8 94       	cli
    1f8e:	de bf       	out	0x3e, r29	; 62
    1f90:	0f be       	out	0x3f, r0	; 63
    1f92:	cd bf       	out	0x3d, r28	; 61
    1f94:	6c 01       	movw	r12, r24
    1f96:	5b 01       	movw	r10, r22
    1f98:	8a 01       	movw	r16, r20
    1f9a:	68 94       	set
    1f9c:	99 24       	eor	r9, r9
    1f9e:	96 f8       	bld	r9, 6
    uECC_word_t _public[uECC_MAX_WORDS * 2];
#endif
    uECC_word_t tries;

    for (tries = 0; tries < uECC_RNG_MAX_TRIES; ++tries) {
        if (!uECC_generate_random_int(_private, curve->n, BITS_TO_WORDS(curve->num_n_bits))) {
    1fa0:	7a 01       	movw	r14, r20
    1fa2:	84 e2       	ldi	r24, 0x24	; 36
    1fa4:	e8 0e       	add	r14, r24
    1fa6:	f1 1c       	adc	r15, r1
    1fa8:	f8 01       	movw	r30, r16
    1faa:	82 81       	ldd	r24, Z+2	; 0x02
    1fac:	93 81       	ldd	r25, Z+3	; 0x03
    1fae:	07 96       	adiw	r24, 0x07	; 7
    1fb0:	ac 01       	movw	r20, r24
    1fb2:	12 f4       	brpl	.+4      	; 0x1fb8 <uECC_make_key+0x4c>
    1fb4:	49 5f       	subi	r20, 0xF9	; 249
    1fb6:	5f 4f       	sbci	r21, 0xFF	; 255
    1fb8:	55 95       	asr	r21
    1fba:	47 95       	ror	r20
    1fbc:	55 95       	asr	r21
    1fbe:	47 95       	ror	r20
    1fc0:	55 95       	asr	r21
    1fc2:	47 95       	ror	r20
    1fc4:	b7 01       	movw	r22, r14
    1fc6:	ce 01       	movw	r24, r28
    1fc8:	01 96       	adiw	r24, 0x01	; 1
    1fca:	67 df       	rcall	.-306    	; 0x1e9a <uECC_generate_random_int>
    1fcc:	00 97       	sbiw	r24, 0x00	; 0
    1fce:	09 f4       	brne	.+2      	; 0x1fd2 <uECC_make_key+0x66>
    1fd0:	40 c0       	rjmp	.+128    	; 0x2052 <uECC_make_key+0xe6>
            return 0;
        }

        if (EccPoint_compute_public_key(_public, _private, curve)) {
    1fd2:	a8 01       	movw	r20, r16
    1fd4:	be 01       	movw	r22, r28
    1fd6:	6f 5f       	subi	r22, 0xFF	; 255
    1fd8:	7f 4f       	sbci	r23, 0xFF	; 255
    1fda:	ce 01       	movw	r24, r28
    1fdc:	81 96       	adiw	r24, 0x21	; 33
    1fde:	de de       	rcall	.-580    	; 0x1d9c <EccPoint_compute_public_key>
    1fe0:	88 23       	and	r24, r24
    1fe2:	91 f1       	breq	.+100    	; 0x2048 <uECC_make_key+0xdc>
#if uECC_VLI_NATIVE_LITTLE_ENDIAN == 0
            uECC_vli_nativeToBytes(private_key, BITS_TO_BYTES(curve->num_n_bits), _private);
    1fe4:	f8 01       	movw	r30, r16
    1fe6:	82 81       	ldd	r24, Z+2	; 0x02
    1fe8:	93 81       	ldd	r25, Z+3	; 0x03
    1fea:	07 96       	adiw	r24, 0x07	; 7
    1fec:	bc 01       	movw	r22, r24
    1fee:	12 f4       	brpl	.+4      	; 0x1ff4 <uECC_make_key+0x88>
    1ff0:	69 5f       	subi	r22, 0xF9	; 249
    1ff2:	7f 4f       	sbci	r23, 0xFF	; 255
    1ff4:	75 95       	asr	r23
    1ff6:	67 95       	ror	r22
    1ff8:	75 95       	asr	r23
    1ffa:	67 95       	ror	r22
    1ffc:	75 95       	asr	r23
    1ffe:	67 95       	ror	r22
    2000:	ae 01       	movw	r20, r28
    2002:	4f 5f       	subi	r20, 0xFF	; 255
    2004:	5f 4f       	sbci	r21, 0xFF	; 255
    2006:	c5 01       	movw	r24, r10
    2008:	26 df       	rcall	.-436    	; 0x1e56 <uECC_vli_nativeToBytes>
            uECC_vli_nativeToBytes(public_key, curve->num_bytes, _public);
    200a:	f8 01       	movw	r30, r16
    200c:	61 81       	ldd	r22, Z+1	; 0x01
    200e:	06 2e       	mov	r0, r22
    2010:	00 0c       	add	r0, r0
    2012:	77 0b       	sbc	r23, r23
    2014:	ae 01       	movw	r20, r28
    2016:	4f 5d       	subi	r20, 0xDF	; 223
    2018:	5f 4f       	sbci	r21, 0xFF	; 255
    201a:	c6 01       	movw	r24, r12
    201c:	1c df       	rcall	.-456    	; 0x1e56 <uECC_vli_nativeToBytes>
            uECC_vli_nativeToBytes(
                public_key + curve->num_bytes, curve->num_bytes, _public + curve->num_words);
    201e:	f8 01       	movw	r30, r16
    2020:	81 81       	ldd	r24, Z+1	; 0x01

        if (EccPoint_compute_public_key(_public, _private, curve)) {
#if uECC_VLI_NATIVE_LITTLE_ENDIAN == 0
            uECC_vli_nativeToBytes(private_key, BITS_TO_BYTES(curve->num_n_bits), _private);
            uECC_vli_nativeToBytes(public_key, curve->num_bytes, _public);
            uECC_vli_nativeToBytes(
    2022:	90 81       	ld	r25, Z
    2024:	41 e2       	ldi	r20, 0x21	; 33
    2026:	50 e0       	ldi	r21, 0x00	; 0
    2028:	4c 0f       	add	r20, r28
    202a:	5d 1f       	adc	r21, r29
    202c:	49 0f       	add	r20, r25
    202e:	51 1d       	adc	r21, r1
    2030:	97 fd       	sbrc	r25, 7
    2032:	5a 95       	dec	r21
    2034:	08 2e       	mov	r0, r24
    2036:	00 0c       	add	r0, r0
    2038:	99 0b       	sbc	r25, r25
    203a:	bc 01       	movw	r22, r24
    203c:	8c 0d       	add	r24, r12
    203e:	9d 1d       	adc	r25, r13
    2040:	0a df       	rcall	.-492    	; 0x1e56 <uECC_vli_nativeToBytes>
                public_key + curve->num_bytes, curve->num_bytes, _public + curve->num_words);
#endif
            return 1;
    2042:	81 e0       	ldi	r24, 0x01	; 1
    2044:	90 e0       	ldi	r25, 0x00	; 0
    2046:	05 c0       	rjmp	.+10     	; 0x2052 <uECC_make_key+0xe6>
    2048:	9a 94       	dec	r9
    uECC_word_t _private[uECC_MAX_WORDS];
    uECC_word_t _public[uECC_MAX_WORDS * 2];
#endif
    uECC_word_t tries;

    for (tries = 0; tries < uECC_RNG_MAX_TRIES; ++tries) {
    204a:	91 10       	cpse	r9, r1
    204c:	ad cf       	rjmp	.-166    	; 0x1fa8 <uECC_make_key+0x3c>
                public_key + curve->num_bytes, curve->num_bytes, _public + curve->num_words);
#endif
            return 1;
        }
    }
    return 0;
    204e:	80 e0       	ldi	r24, 0x00	; 0
    2050:	90 e0       	ldi	r25, 0x00	; 0
}
    2052:	c0 5a       	subi	r28, 0xA0	; 160
    2054:	df 4f       	sbci	r29, 0xFF	; 255
    2056:	0f b6       	in	r0, 0x3f	; 63
    2058:	f8 94       	cli
    205a:	de bf       	out	0x3e, r29	; 62
    205c:	0f be       	out	0x3f, r0	; 63
    205e:	cd bf       	out	0x3d, r28	; 61
    2060:	df 91       	pop	r29
    2062:	cf 91       	pop	r28
    2064:	1f 91       	pop	r17
    2066:	0f 91       	pop	r16
    2068:	ff 90       	pop	r15
    206a:	ef 90       	pop	r14
    206c:	df 90       	pop	r13
    206e:	cf 90       	pop	r12
    2070:	bf 90       	pop	r11
    2072:	af 90       	pop	r10
    2074:	9f 90       	pop	r9
    2076:	08 95       	ret

00002078 <uECC_shared_secret>:

int uECC_shared_secret(const uint8_t *public_key,
                       const uint8_t *private_key,
                       uint8_t *secret,
                       uECC_Curve curve) {
    2078:	6f 92       	push	r6
    207a:	7f 92       	push	r7
    207c:	8f 92       	push	r8
    207e:	9f 92       	push	r9
    2080:	af 92       	push	r10
    2082:	bf 92       	push	r11
    2084:	cf 92       	push	r12
    2086:	df 92       	push	r13
    2088:	ef 92       	push	r14
    208a:	ff 92       	push	r15
    208c:	0f 93       	push	r16
    208e:	1f 93       	push	r17
    2090:	cf 93       	push	r28
    2092:	df 93       	push	r29
    2094:	cd b7       	in	r28, 0x3d	; 61
    2096:	de b7       	in	r29, 0x3e	; 62
    2098:	c4 58       	subi	r28, 0x84	; 132
    209a:	d1 09       	sbc	r29, r1
    209c:	0f b6       	in	r0, 0x3f	; 63
    209e:	f8 94       	cli
    20a0:	de bf       	out	0x3e, r29	; 62
    20a2:	0f be       	out	0x3f, r0	; 63
    20a4:	cd bf       	out	0x3d, r28	; 61
    20a6:	8c 01       	movw	r16, r24
    20a8:	4a 01       	movw	r8, r20
    20aa:	69 01       	movw	r12, r18
    uECC_word_t _public[uECC_MAX_WORDS * 2];
    uECC_word_t _private[uECC_MAX_WORDS];

    uECC_word_t tmp[uECC_MAX_WORDS];
    uECC_word_t *p2[2] = {_private, tmp};
    20ac:	ce 01       	movw	r24, r28
    20ae:	8f 5b       	subi	r24, 0xBF	; 191
    20b0:	9f 4f       	sbci	r25, 0xFF	; 255
    20b2:	cf 57       	subi	r28, 0x7F	; 127
    20b4:	df 4f       	sbci	r29, 0xFF	; 255
    20b6:	99 83       	std	Y+1, r25	; 0x01
    20b8:	88 83       	st	Y, r24
    20ba:	c1 58       	subi	r28, 0x81	; 129
    20bc:	d0 40       	sbci	r29, 0x00	; 0
    20be:	80 96       	adiw	r24, 0x20	; 32
    20c0:	cd 57       	subi	r28, 0x7D	; 125
    20c2:	df 4f       	sbci	r29, 0xFF	; 255
    20c4:	99 83       	std	Y+1, r25	; 0x01
    20c6:	88 83       	st	Y, r24
    20c8:	c3 58       	subi	r28, 0x83	; 131
    20ca:	d0 40       	sbci	r29, 0x00	; 0
    uECC_word_t *initial_Z = 0;
    uECC_word_t carry;
    wordcount_t num_words = curve->num_words;
    20cc:	f9 01       	movw	r30, r18
    20ce:	f0 80       	ld	r15, Z
    wordcount_t num_bytes = curve->num_bytes;
    20d0:	a1 80       	ldd	r10, Z+1	; 0x01
}

uECC_VLI_API void uECC_vli_bytesToNative(uint8_t *native,
                                         const uint8_t *bytes,
                                         int num_bytes) {
    uECC_vli_nativeToBytes(native, num_bytes, bytes);
    20d2:	22 81       	ldd	r18, Z+2	; 0x02
    20d4:	33 81       	ldd	r19, Z+3	; 0x03
    20d6:	29 5f       	subi	r18, 0xF9	; 249
    20d8:	3f 4f       	sbci	r19, 0xFF	; 255
    20da:	c9 01       	movw	r24, r18
    20dc:	99 23       	and	r25, r25
    20de:	0c f4       	brge	.+2      	; 0x20e2 <uECC_shared_secret+0x6a>
    20e0:	07 96       	adiw	r24, 0x07	; 7
    20e2:	95 95       	asr	r25
    20e4:	87 95       	ror	r24
    20e6:	95 95       	asr	r25
    20e8:	87 95       	ror	r24
    20ea:	95 95       	asr	r25
    20ec:	87 95       	ror	r24
    20ee:	ab 01       	movw	r20, r22
    20f0:	bc 01       	movw	r22, r24
    20f2:	ce 01       	movw	r24, r28
    20f4:	8f 5b       	subi	r24, 0xBF	; 191
    20f6:	9f 4f       	sbci	r25, 0xFF	; 255
    20f8:	ae de       	rcall	.-676    	; 0x1e56 <uECC_vli_nativeToBytes>
#if uECC_VLI_NATIVE_LITTLE_ENDIAN
    bcopy((uint8_t *) _private, private_key, num_bytes);
    bcopy((uint8_t *) _public, public_key, num_bytes*2);
#else
    uECC_vli_bytesToNative(_private, private_key, BITS_TO_BYTES(curve->num_n_bits));
    uECC_vli_bytesToNative(_public, public_key, num_bytes);
    20fa:	0a 2c       	mov	r0, r10
    20fc:	00 0c       	add	r0, r0
    20fe:	bb 08       	sbc	r11, r11
}

uECC_VLI_API void uECC_vli_bytesToNative(uint8_t *native,
                                         const uint8_t *bytes,
                                         int num_bytes) {
    uECC_vli_nativeToBytes(native, num_bytes, bytes);
    2100:	a8 01       	movw	r20, r16
    2102:	b5 01       	movw	r22, r10
    2104:	ce 01       	movw	r24, r28
    2106:	01 96       	adiw	r24, 0x01	; 1
    2108:	a6 de       	rcall	.-692    	; 0x1e56 <uECC_vli_nativeToBytes>
    210a:	a8 01       	movw	r20, r16
    210c:	4a 0d       	add	r20, r10
    210e:	5b 1d       	adc	r21, r11
    2110:	b5 01       	movw	r22, r10
    2112:	81 e0       	ldi	r24, 0x01	; 1
    2114:	90 e0       	ldi	r25, 0x00	; 0
    2116:	8c 0f       	add	r24, r28
    2118:	9d 1f       	adc	r25, r29
    211a:	8f 0d       	add	r24, r15
    211c:	91 1d       	adc	r25, r1
    211e:	f7 fc       	sbrc	r15, 7
    2120:	9a 95       	dec	r25
    2122:	99 de       	rcall	.-718    	; 0x1e56 <uECC_vli_nativeToBytes>
    uECC_vli_bytesToNative(_public + num_words, public_key + num_bytes, num_bytes);
#endif

    /* Regularize the bitcount for the private key so that attackers cannot use a side channel
       attack to learn the number of leading zeros. */
    carry = regularize_k(_private, _private, tmp, curve);
    2124:	96 01       	movw	r18, r12
    2126:	ae 01       	movw	r20, r28
    2128:	4f 59       	subi	r20, 0x9F	; 159
    212a:	5f 4f       	sbci	r21, 0xFF	; 255
    212c:	be 01       	movw	r22, r28
    212e:	6f 5b       	subi	r22, 0xBF	; 191
    2130:	7f 4f       	sbci	r23, 0xFF	; 255
    2132:	cb 01       	movw	r24, r22
    2134:	e5 dd       	rcall	.-1078   	; 0x1d00 <regularize_k>
    2136:	18 2f       	mov	r17, r24

    /* If an RNG function was specified, try to get a random initial Z value to improve
       protection against side-channel attacks. */
    if (g_rng_function) {
    2138:	80 91 ae 02 	lds	r24, 0x02AE	; 0x8002ae <__data_end>
    213c:	90 91 af 02 	lds	r25, 0x02AF	; 0x8002af <__data_end+0x1>
    2140:	89 2b       	or	r24, r25
    2142:	a9 f0       	breq	.+42     	; 0x216e <uECC_shared_secret+0xf6>
        if (!uECC_generate_random_int(p2[carry], curve->p, num_words)) {
    2144:	e1 2f       	mov	r30, r17
    2146:	f0 e0       	ldi	r31, 0x00	; 0
    2148:	ee 0f       	add	r30, r30
    214a:	ff 1f       	adc	r31, r31
    214c:	81 e8       	ldi	r24, 0x81	; 129
    214e:	90 e0       	ldi	r25, 0x00	; 0
    2150:	8c 0f       	add	r24, r28
    2152:	9d 1f       	adc	r25, r29
    2154:	e8 0f       	add	r30, r24
    2156:	f9 1f       	adc	r31, r25
    2158:	60 80       	ld	r6, Z
    215a:	71 80       	ldd	r7, Z+1	; 0x01
    215c:	4f 2d       	mov	r20, r15
    215e:	b6 01       	movw	r22, r12
    2160:	6c 5f       	subi	r22, 0xFC	; 252
    2162:	7f 4f       	sbci	r23, 0xFF	; 255
    2164:	c3 01       	movw	r24, r6
    2166:	99 de       	rcall	.-718    	; 0x1e9a <uECC_generate_random_int>
    2168:	00 97       	sbiw	r24, 0x00	; 0
    216a:	19 f4       	brne	.+6      	; 0x2172 <uECC_shared_secret+0xfa>
    216c:	32 c0       	rjmp	.+100    	; 0x21d2 <uECC_shared_secret+0x15a>
    uECC_word_t _public[uECC_MAX_WORDS * 2];
    uECC_word_t _private[uECC_MAX_WORDS];

    uECC_word_t tmp[uECC_MAX_WORDS];
    uECC_word_t *p2[2] = {_private, tmp};
    uECC_word_t *initial_Z = 0;
    216e:	61 2c       	mov	r6, r1
    2170:	71 2c       	mov	r7, r1
            return 0;
        }
        initial_Z = p2[carry];
    }

    EccPoint_mult(_public, _public, p2[!carry], initial_Z, curve->num_n_bits + 1, curve);
    2172:	f6 01       	movw	r30, r12
    2174:	22 81       	ldd	r18, Z+2	; 0x02
    2176:	33 81       	ldd	r19, Z+3	; 0x03
    2178:	2f 5f       	subi	r18, 0xFF	; 255
    217a:	3f 4f       	sbci	r19, 0xFF	; 255
    217c:	81 e0       	ldi	r24, 0x01	; 1
    217e:	90 e0       	ldi	r25, 0x00	; 0
    2180:	11 23       	and	r17, r17
    2182:	11 f0       	breq	.+4      	; 0x2188 <uECC_shared_secret+0x110>
    2184:	80 e0       	ldi	r24, 0x00	; 0
    2186:	90 e0       	ldi	r25, 0x00	; 0
    2188:	88 0f       	add	r24, r24
    218a:	99 1f       	adc	r25, r25
    218c:	e1 e8       	ldi	r30, 0x81	; 129
    218e:	f0 e0       	ldi	r31, 0x00	; 0
    2190:	ec 0f       	add	r30, r28
    2192:	fd 1f       	adc	r31, r29
    2194:	e8 0f       	add	r30, r24
    2196:	f9 1f       	adc	r31, r25
    2198:	40 81       	ld	r20, Z
    219a:	51 81       	ldd	r21, Z+1	; 0x01
    219c:	76 01       	movw	r14, r12
    219e:	89 01       	movw	r16, r18
    21a0:	93 01       	movw	r18, r6
    21a2:	be 01       	movw	r22, r28
    21a4:	6f 5f       	subi	r22, 0xFF	; 255
    21a6:	7f 4f       	sbci	r23, 0xFF	; 255
    21a8:	cb 01       	movw	r24, r22
    21aa:	b6 db       	rcall	.-2196   	; 0x1918 <EccPoint_mult>
#if uECC_VLI_NATIVE_LITTLE_ENDIAN
    bcopy((uint8_t *) secret, (uint8_t *) _public, num_bytes);
#else
    uECC_vli_nativeToBytes(secret, num_bytes, _public);
    21ac:	ae 01       	movw	r20, r28
    21ae:	4f 5f       	subi	r20, 0xFF	; 255
    21b0:	5f 4f       	sbci	r21, 0xFF	; 255
    21b2:	b5 01       	movw	r22, r10
    21b4:	c4 01       	movw	r24, r8
    21b6:	4f de       	rcall	.-866    	; 0x1e56 <uECC_vli_nativeToBytes>
    21b8:	f6 01       	movw	r30, r12
#endif
    return !EccPoint_isZero(_public, curve);
    21ba:	60 81       	ld	r22, Z
    21bc:	66 0f       	add	r22, r22
    21be:	ce 01       	movw	r24, r28
    21c0:	01 96       	adiw	r24, 0x01	; 1
    21c2:	0e 94 18 05 	call	0xa30	; 0xa30 <uECC_vli_isZero>
    21c6:	31 e0       	ldi	r19, 0x01	; 1
    21c8:	20 e0       	ldi	r18, 0x00	; 0
    21ca:	81 11       	cpse	r24, r1
    21cc:	30 e0       	ldi	r19, 0x00	; 0
    21ce:	83 2f       	mov	r24, r19
    21d0:	92 2f       	mov	r25, r18
    21d2:	cc 57       	subi	r28, 0x7C	; 124
}
    21d4:	df 4f       	sbci	r29, 0xFF	; 255
    21d6:	0f b6       	in	r0, 0x3f	; 63
    21d8:	f8 94       	cli
    21da:	de bf       	out	0x3e, r29	; 62
    21dc:	0f be       	out	0x3f, r0	; 63
    21de:	cd bf       	out	0x3d, r28	; 61
    21e0:	df 91       	pop	r29
    21e2:	cf 91       	pop	r28
    21e4:	1f 91       	pop	r17
    21e6:	0f 91       	pop	r16
    21e8:	ff 90       	pop	r15
    21ea:	ef 90       	pop	r14
    21ec:	df 90       	pop	r13
    21ee:	cf 90       	pop	r12
    21f0:	bf 90       	pop	r11
    21f2:	af 90       	pop	r10
    21f4:	9f 90       	pop	r9
    21f6:	8f 90       	pop	r8
    21f8:	7f 90       	pop	r7
    21fa:	6f 90       	pop	r6
    21fc:	08 95       	ret

000021fe <hex_to_bytes>:
    21fe:	ff 92       	push	r15
		*dest++ = table[c >> 4];
		*dest++ = table[c & 0x0f];
	}
}

void hex_to_bytes(char* src, uint8_t slength, uint8_t dest[slength/2]) {
    2200:	0f 93       	push	r16
    2202:	1f 93       	push	r17
    2204:	cf 93       	push	r28
    2206:	df 93       	push	r29
    2208:	f8 2e       	mov	r15, r24
    220a:	09 2f       	mov	r16, r25
    220c:	16 2f       	mov	r17, r22
    220e:	ea 01       	movw	r28, r20
	memset(dest, 0, slength/2);
    2210:	46 2f       	mov	r20, r22
    2212:	46 95       	lsr	r20
    2214:	50 e0       	ldi	r21, 0x00	; 0
    2216:	60 e0       	ldi	r22, 0x00	; 0
    2218:	70 e0       	ldi	r23, 0x00	; 0
    221a:	ce 01       	movw	r24, r28
    221c:	0e 94 3e 1a 	call	0x347c	; 0x347c <memset>
	uint8_t index = 0;
	while (index < slength) {
    2220:	11 23       	and	r17, r17
    2222:	09 f4       	brne	.+2      	; 0x2226 <hex_to_bytes+0x28>
    2224:	3f c0       	rjmp	.+126    	; 0x22a4 <hex_to_bytes+0xa6>
    2226:	ef 2d       	mov	r30, r15
    2228:	f0 2f       	mov	r31, r16
    222a:	20 e0       	ldi	r18, 0x00	; 0
    222c:	30 e0       	ldi	r19, 0x00	; 0
		char c = src[index];
		int value = 0;
    222e:	70 e0       	ldi	r23, 0x00	; 0
    2230:	60 e0       	ldi	r22, 0x00	; 0
    2232:	42 2f       	mov	r20, r18

void hex_to_bytes(char* src, uint8_t slength, uint8_t dest[slength/2]) {
	memset(dest, 0, slength/2);
	uint8_t index = 0;
	while (index < slength) {
		char c = src[index];
    2234:	81 91       	ld	r24, Z+
    2236:	2f 5f       	subi	r18, 0xFF	; 255
    2238:	3f 4f       	sbci	r19, 0xFF	; 255
		int value = 0;
		if(c >= '0' && c <= '9')
    223a:	90 ed       	ldi	r25, 0xD0	; 208
    223c:	98 0f       	add	r25, r24
    223e:	9a 30       	cpi	r25, 0x0A	; 10
    2240:	18 f4       	brcc	.+6      	; 0x2248 <hex_to_bytes+0x4a>
		value = (c - '0');
    2242:	90 e0       	ldi	r25, 0x00	; 0
    2244:	c0 97       	sbiw	r24, 0x30	; 48
    2246:	11 c0       	rjmp	.+34     	; 0x226a <hex_to_bytes+0x6c>
		else if (c >= 'A' && c <= 'F')
    2248:	9f eb       	ldi	r25, 0xBF	; 191
    224a:	98 0f       	add	r25, r24
    224c:	96 30       	cpi	r25, 0x06	; 6
    224e:	18 f4       	brcc	.+6      	; 0x2256 <hex_to_bytes+0x58>
		value = (10 + (c - 'A'));
    2250:	90 e0       	ldi	r25, 0x00	; 0
    2252:	c7 97       	sbiw	r24, 0x37	; 55
    2254:	0a c0       	rjmp	.+20     	; 0x226a <hex_to_bytes+0x6c>
		else if (c >= 'a' && c <= 'f')
    2256:	9f e9       	ldi	r25, 0x9F	; 159
    2258:	98 0f       	add	r25, r24
    225a:	96 30       	cpi	r25, 0x06	; 6
    225c:	20 f4       	brcc	.+8      	; 0x2266 <hex_to_bytes+0x68>
		value = (10 + (c - 'a'));
    225e:	90 e0       	ldi	r25, 0x00	; 0
    2260:	87 55       	subi	r24, 0x57	; 87
    2262:	91 09       	sbc	r25, r1
    2264:	02 c0       	rjmp	.+4      	; 0x226a <hex_to_bytes+0x6c>
void hex_to_bytes(char* src, uint8_t slength, uint8_t dest[slength/2]) {
	memset(dest, 0, slength/2);
	uint8_t index = 0;
	while (index < slength) {
		char c = src[index];
		int value = 0;
    2266:	87 2f       	mov	r24, r23
    2268:	96 2f       	mov	r25, r22
		else if (c >= 'A' && c <= 'F')
		value = (10 + (c - 'A'));
		else if (c >= 'a' && c <= 'f')
		value = (10 + (c - 'a'));

		dest[(index/2)] += value << (((index + 1) % 2) * 4);
    226a:	46 95       	lsr	r20
    226c:	de 01       	movw	r26, r28
    226e:	a4 0f       	add	r26, r20
    2270:	b1 1d       	adc	r27, r1
    2272:	a9 01       	movw	r20, r18
    2274:	41 70       	andi	r20, 0x01	; 1
    2276:	50 78       	andi	r21, 0x80	; 128
    2278:	55 23       	and	r21, r21
    227a:	34 f4       	brge	.+12     	; 0x2288 <hex_to_bytes+0x8a>
    227c:	41 50       	subi	r20, 0x01	; 1
    227e:	51 09       	sbc	r21, r1
    2280:	4e 6f       	ori	r20, 0xFE	; 254
    2282:	5f 6f       	ori	r21, 0xFF	; 255
    2284:	4f 5f       	subi	r20, 0xFF	; 255
    2286:	5f 4f       	sbci	r21, 0xFF	; 255
    2288:	44 0f       	add	r20, r20
    228a:	55 1f       	adc	r21, r21
    228c:	44 0f       	add	r20, r20
    228e:	55 1f       	adc	r21, r21
    2290:	02 c0       	rjmp	.+4      	; 0x2296 <hex_to_bytes+0x98>
    2292:	88 0f       	add	r24, r24
    2294:	99 1f       	adc	r25, r25
    2296:	4a 95       	dec	r20
    2298:	e2 f7       	brpl	.-8      	; 0x2292 <hex_to_bytes+0x94>
    229a:	9c 91       	ld	r25, X
    229c:	89 0f       	add	r24, r25
    229e:	8c 93       	st	X, r24
}

void hex_to_bytes(char* src, uint8_t slength, uint8_t dest[slength/2]) {
	memset(dest, 0, slength/2);
	uint8_t index = 0;
	while (index < slength) {
    22a0:	21 17       	cp	r18, r17
    22a2:	38 f2       	brcs	.-114    	; 0x2232 <hex_to_bytes+0x34>

		dest[(index/2)] += value << (((index + 1) % 2) * 4);

		index++;
	}
}
    22a4:	df 91       	pop	r29
    22a6:	cf 91       	pop	r28
    22a8:	1f 91       	pop	r17
    22aa:	0f 91       	pop	r16
    22ac:	ff 90       	pop	r15
    22ae:	08 95       	ret

000022b0 <RNG>:
	}
	can_msg_t ack;
	ack[0] = role;
	can_send_message(0, 0x00, ack);
	return 0;
}
    22b0:	ff 92       	push	r15
    22b2:	0f 93       	push	r16
    22b4:	1f 93       	push	r17
    22b6:	cf 93       	push	r28
    22b8:	df 93       	push	r29
    22ba:	ec 01       	movw	r28, r24
    22bc:	8b 01       	movw	r16, r22
    22be:	67 2b       	or	r22, r23
    22c0:	51 f0       	breq	.+20     	; 0x22d6 <RNG+0x26>
    22c2:	0e 94 00 1a 	call	0x3400	; 0x3400 <rand>
    22c6:	f8 2e       	mov	r15, r24
    22c8:	0e 94 00 1a 	call	0x3400	; 0x3400 <rand>
    22cc:	8f 0d       	add	r24, r15
    22ce:	89 93       	st	Y+, r24
    22d0:	01 50       	subi	r16, 0x01	; 1
    22d2:	11 09       	sbc	r17, r1
    22d4:	b1 f7       	brne	.-20     	; 0x22c2 <RNG+0x12>
    22d6:	81 e0       	ldi	r24, 0x01	; 1
    22d8:	90 e0       	ldi	r25, 0x00	; 0
    22da:	df 91       	pop	r29
    22dc:	cf 91       	pop	r28
    22de:	1f 91       	pop	r17
    22e0:	0f 91       	pop	r16
    22e2:	ff 90       	pop	r15
    22e4:	08 95       	ret

000022e6 <buttons_init>:
    22e6:	1d b8       	out	0x0d, r1	; 13
    22e8:	80 ef       	ldi	r24, 0xF0	; 240
    22ea:	8e b9       	out	0x0e, r24	; 14
    22ec:	9f ef       	ldi	r25, 0xFF	; 255
    22ee:	90 93 6a 00 	sts	0x006A, r25	; 0x80006a <__TEXT_REGION_LENGTH__+0x7e006a>
    22f2:	8d bb       	out	0x1d, r24	; 29
    22f4:	08 95       	ret

000022f6 <run_scenario2>:

int run_scenario2(permissions_t role){
    22f6:	cf 93       	push	r28
    22f8:	df 93       	push	r29
    22fa:	cd b7       	in	r28, 0x3d	; 61
    22fc:	de b7       	in	r29, 0x3e	; 62
    22fe:	c9 5d       	subi	r28, 0xD9	; 217
    2300:	d1 09       	sbc	r29, r1
    2302:	0f b6       	in	r0, 0x3f	; 63
    2304:	f8 94       	cli
    2306:	de bf       	out	0x3e, r29	; 62
    2308:	0f be       	out	0x3f, r0	; 63
    230a:	cd bf       	out	0x3d, r28	; 61
    230c:	b8 2e       	mov	r11, r24
	volatile uint8_t result;
	
	//---Shared Secret Establishment Starts Here---//
	uart_puts("authentication started");
    230e:	86 eb       	ldi	r24, 0xB6	; 182
    2310:	91 e0       	ldi	r25, 0x01	; 1
    2312:	df d6       	rcall	.+3518   	; 0x30d2 <uart_puts>
	uECC_set_rng(RNG);
    2314:	88 e5       	ldi	r24, 0x58	; 88
    2316:	91 e1       	ldi	r25, 0x11	; 17
	volatile uint8_t private[32];
	volatile uint8_t public[64];
	const struct uECC_Curve_t * curve = uECC_secp256r1();
    2318:	21 de       	rcall	.-958    	; 0x1f5c <uECC_set_rng>
    231a:	25 de       	rcall	.-950    	; 0x1f66 <uECC_secp256r1>
    231c:	6c 01       	movw	r12, r24
	result = uECC_make_key(public, private, curve);
    231e:	ac 01       	movw	r20, r24
    2320:	be 01       	movw	r22, r28
    2322:	6e 5f       	subi	r22, 0xFE	; 254
    2324:	7f 4f       	sbci	r23, 0xFF	; 255
    2326:	ce 01       	movw	r24, r28
    2328:	82 96       	adiw	r24, 0x22	; 34
    232a:	20 de       	rcall	.-960    	; 0x1f6c <uECC_make_key>
    232c:	89 83       	std	Y+1, r24	; 0x01
	uint8_t secret_unhashed[32];
	result = uECC_shared_secret(public_key, private, secret_unhashed, curve);
    232e:	96 01       	movw	r18, r12
    2330:	ae 01       	movw	r20, r28
    2332:	4e 59       	subi	r20, 0x9E	; 158
    2334:	5f 4f       	sbci	r21, 0xFF	; 255
    2336:	be 01       	movw	r22, r28
    2338:	6e 5f       	subi	r22, 0xFE	; 254
    233a:	7f 4f       	sbci	r23, 0xFF	; 255
    233c:	84 e6       	ldi	r24, 0x64	; 100
    233e:	92 e0       	ldi	r25, 0x02	; 2
    2340:	9b de       	rcall	.-714    	; 0x2078 <uECC_shared_secret>
    2342:	89 83       	std	Y+1, r24	; 0x01
	uint8_t secret[32];
	uint32_t len = 256;
	sha256(secret, secret_unhashed, len);
    2344:	20 e0       	ldi	r18, 0x00	; 0
    2346:	31 e0       	ldi	r19, 0x01	; 1
    2348:	40 e0       	ldi	r20, 0x00	; 0
    234a:	50 e0       	ldi	r21, 0x00	; 0
    234c:	be 01       	movw	r22, r28
    234e:	6e 59       	subi	r22, 0x9E	; 158
    2350:	7f 4f       	sbci	r23, 0xFF	; 255
    2352:	ce 01       	movw	r24, r28
    2354:	8e 57       	subi	r24, 0x7E	; 126
    2356:	9f 4f       	sbci	r25, 0xFF	; 255
    2358:	52 d2       	rcall	.+1188   	; 0x27fe <sha256>
	//---Secret Value Establishment Ends Here---//
	
	can_send_frame_buffer(public, 8);
    235a:	68 e0       	ldi	r22, 0x08	; 8
    235c:	ce 01       	movw	r24, r28
    235e:	82 96       	adiw	r24, 0x22	; 34
    2360:	0e 94 e0 01 	call	0x3c0	; 0x3c0 <can_send_frame_buffer>
	uart_puts("secret established");
    2364:	84 e0       	ldi	r24, 0x04	; 4
    2366:	92 e0       	ldi	r25, 0x02	; 2
	can_init();
    2368:	b4 d6       	rcall	.+3432   	; 0x30d2 <uart_puts>
    236a:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <can_init>
	//---Every iteration of this loop equals 1 message being authenticated using the shared secret---.
	while(1){
		can_id_t *id = malloc(sizeof(can_id_t));
    236e:	82 e0       	ldi	r24, 0x02	; 2
    2370:	90 e0       	ldi	r25, 0x00	; 0
    2372:	de d6       	rcall	.+3516   	; 0x3130 <malloc>
    2374:	6c 01       	movw	r12, r24
		can_msg_t message;
		// Receive the message that the tester wants to send to the network.
		can_receive_message(0, 0x00, 0x00, message);
    2376:	9e 01       	movw	r18, r28
    2378:	2e 52       	subi	r18, 0x2E	; 46
    237a:	3f 4f       	sbci	r19, 0xFF	; 255
    237c:	40 e0       	ldi	r20, 0x00	; 0
    237e:	60 e0       	ldi	r22, 0x00	; 0
    2380:	70 e0       	ldi	r23, 0x00	; 0
    2382:	80 e0       	ldi	r24, 0x00	; 0
    2384:	0e 94 a7 01 	call	0x34e	; 0x34e <can_receive_message>
		can_get_id(0, id);
    2388:	b6 01       	movw	r22, r12
    238a:	80 e0       	ldi	r24, 0x00	; 0
    238c:	0e 94 48 01 	call	0x290	; 0x290 <can_get_id>
		// Acknowledge Correct Reception of the message by retransmitting it.
		can_send_message(0, 0x00, message);
    2390:	ae 01       	movw	r20, r28
    2392:	4e 52       	subi	r20, 0x2E	; 46
    2394:	5f 4f       	sbci	r21, 0xFF	; 255
    2396:	60 e0       	ldi	r22, 0x00	; 0
    2398:	70 e0       	ldi	r23, 0x00	; 0
    239a:	80 e0       	ldi	r24, 0x00	; 0
    239c:	0e 94 8b 01 	call	0x316	; 0x316 <can_send_message>
		uint8_t mac[16];
		// Receive the MAC of the message
		can_receive_frame_buffer(mac,2);
    23a0:	62 e0       	ldi	r22, 0x02	; 2
    23a2:	ce 01       	movw	r24, r28
    23a4:	8e 53       	subi	r24, 0x3E	; 62
    23a6:	9f 4f       	sbci	r25, 0xFF	; 255
    23a8:	0e 94 f8 01 	call	0x3f0	; 0x3f0 <can_receive_frame_buffer>
		uint8_t mac2[32];
		hmac_sha256(mac2, secret, 265 ,message , 64);
    23ac:	10 e4       	ldi	r17, 0x40	; 64
    23ae:	e1 2e       	mov	r14, r17
    23b0:	f1 2c       	mov	r15, r1
    23b2:	00 e0       	ldi	r16, 0x00	; 0
    23b4:	10 e0       	ldi	r17, 0x00	; 0
    23b6:	9e 01       	movw	r18, r28
    23b8:	2e 52       	subi	r18, 0x2E	; 46
    23ba:	3f 4f       	sbci	r19, 0xFF	; 255
    23bc:	49 e0       	ldi	r20, 0x09	; 9
    23be:	51 e0       	ldi	r21, 0x01	; 1
    23c0:	be 01       	movw	r22, r28
    23c2:	6e 57       	subi	r22, 0x7E	; 126
    23c4:	7f 4f       	sbci	r23, 0xFF	; 255
    23c6:	ce 01       	movw	r24, r28
    23c8:	8e 55       	subi	r24, 0x5E	; 94
    23ca:	9f 4f       	sbci	r25, 0xFF	; 255
    23cc:	04 d1       	rcall	.+520    	; 0x25d6 <hmac_sha256>
		//Check the MAC.
		if(memcmp(mac, mac2, 16) == 0){
    23ce:	40 e1       	ldi	r20, 0x10	; 16
    23d0:	50 e0       	ldi	r21, 0x00	; 0
    23d2:	be 01       	movw	r22, r28
    23d4:	6e 55       	subi	r22, 0x5E	; 94
    23d6:	7f 4f       	sbci	r23, 0xFF	; 255
    23d8:	ce 01       	movw	r24, r28
    23da:	8e 53       	subi	r24, 0x3E	; 62
    23dc:	9f 4f       	sbci	r25, 0xFF	; 255
    23de:	0e 94 17 1a 	call	0x342e	; 0x342e <memcmp>
			uart_puts("Authentication Ok");
    23e2:	89 2b       	or	r24, r25
    23e4:	21 f4       	brne	.+8      	; 0x23ee <run_scenario2+0xf8>
    23e6:	87 e1       	ldi	r24, 0x17	; 23
    23e8:	92 e0       	ldi	r25, 0x02	; 2
		}else{
			uart_puts("Authentication Failed");
    23ea:	73 d6       	rcall	.+3302   	; 0x30d2 <uart_puts>
    23ec:	03 c0       	rjmp	.+6      	; 0x23f4 <run_scenario2+0xfe>
    23ee:	89 e2       	ldi	r24, 0x29	; 41
		}
		//Check the Permission.
		if (check_permission(id, role) == 0){
    23f0:	92 e0       	ldi	r25, 0x02	; 2
    23f2:	6f d6       	rcall	.+3294   	; 0x30d2 <uart_puts>
    23f4:	6b 2d       	mov	r22, r11
    23f6:	c6 01       	movw	r24, r12
    23f8:	c5 d0       	rcall	.+394    	; 0x2584 <check_permission>
			uart_puts("Permission Ok");
    23fa:	89 2b       	or	r24, r25
    23fc:	21 f4       	brne	.+8      	; 0x2406 <run_scenario2+0x110>
    23fe:	8f e3       	ldi	r24, 0x3F	; 63
    2400:	92 e0       	ldi	r25, 0x02	; 2
    2402:	67 d6       	rcall	.+3278   	; 0x30d2 <uart_puts>
		}else{
			uart_puts("Permission Failed");
    2404:	b4 cf       	rjmp	.-152    	; 0x236e <run_scenario2+0x78>
    2406:	8d e4       	ldi	r24, 0x4D	; 77
    2408:	92 e0       	ldi	r25, 0x02	; 2
    240a:	63 d6       	rcall	.+3270   	; 0x30d2 <uart_puts>
		}
	}
    240c:	b0 cf       	rjmp	.-160    	; 0x236e <run_scenario2+0x78>

0000240e <main>:
	
}


 int main()
 {
    240e:	cf 93       	push	r28
    2410:	df 93       	push	r29
    2412:	cd b7       	in	r28, 0x3d	; 61
    2414:	de b7       	in	r29, 0x3e	; 62
    2416:	28 97       	sbiw	r28, 0x08	; 8
    2418:	0f b6       	in	r0, 0x3f	; 63
    241a:	f8 94       	cli
    241c:	de bf       	out	0x3e, r29	; 62
    241e:	0f be       	out	0x3f, r0	; 63
    2420:	cd bf       	out	0x3d, r28	; 61
	uart_init();
    2422:	4b d6       	rcall	.+3222   	; 0x30ba <uart_init>
	buttons_init();
    2424:	60 df       	rcall	.-320    	; 0x22e6 <buttons_init>
    2426:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <can_init>
	can_init();
	init_permissions_table();
    242a:	6c d0       	rcall	.+216    	; 0x2504 <init_permissions_table>
	uart_puts("idle");
    242c:	8f e5       	ldi	r24, 0x5F	; 95
    242e:	92 e0       	ldi	r25, 0x02	; 2
    2430:	50 d6       	rcall	.+3232   	; 0x30d2 <uart_puts>
    2432:	9e 01       	movw	r18, r28
	can_msg_t init;
	//initial message value is used to determine what ROLE is used to authenticate.
	can_receive_message(0, 0x00, 0x00, init);
    2434:	2f 5f       	subi	r18, 0xFF	; 255
    2436:	3f 4f       	sbci	r19, 0xFF	; 255
    2438:	40 e0       	ldi	r20, 0x00	; 0
    243a:	60 e0       	ldi	r22, 0x00	; 0
    243c:	70 e0       	ldi	r23, 0x00	; 0
    243e:	80 e0       	ldi	r24, 0x00	; 0
    2440:	0e 94 a7 01 	call	0x34e	; 0x34e <can_receive_message>
    2444:	89 81       	ldd	r24, Y+1	; 0x01
	switch((int) init[0]){
    2446:	82 30       	cpi	r24, 0x02	; 2
    2448:	59 f0       	breq	.+22     	; 0x2460 <main+0x52>
    244a:	18 f4       	brcc	.+6      	; 0x2452 <main+0x44>
    244c:	81 30       	cpi	r24, 0x01	; 1
    244e:	31 f0       	breq	.+12     	; 0x245c <main+0x4e>
    2450:	0d c0       	rjmp	.+26     	; 0x246c <main+0x5e>
    2452:	84 30       	cpi	r24, 0x04	; 4
    2454:	39 f0       	breq	.+14     	; 0x2464 <main+0x56>
    2456:	88 30       	cpi	r24, 0x08	; 8
    2458:	39 f0       	breq	.+14     	; 0x2468 <main+0x5a>
    245a:	08 c0       	rjmp	.+16     	; 0x246c <main+0x5e>
		case OWNER_ROLE :
			run_scenario2(OWNER_ROLE);
    245c:	81 e0       	ldi	r24, 0x01	; 1
    245e:	4b df       	rcall	.-362    	; 0x22f6 <run_scenario2>
			break;
		case REPAIRSHOP_ROLE :
			run_scenario2(REPAIRSHOP_ROLE);
    2460:	82 e0       	ldi	r24, 0x02	; 2
    2462:	49 df       	rcall	.-366    	; 0x22f6 <run_scenario2>
			break;
		case POLICEMAN_ROLE :
			run_scenario2(POLICEMAN_ROLE);
    2464:	84 e0       	ldi	r24, 0x04	; 4
    2466:	47 df       	rcall	.-370    	; 0x22f6 <run_scenario2>
    2468:	88 e0       	ldi	r24, 0x08	; 8
			break;
		case TESTER_ROLE :
			run_scenario2(TESTER_ROLE);
    246a:	45 df       	rcall	.-374    	; 0x22f6 <run_scenario2>
    246c:	80 e0       	ldi	r24, 0x00	; 0
    246e:	90 e0       	ldi	r25, 0x00	; 0
			break;	
		default : 
			break;
	}
 }
    2470:	28 96       	adiw	r28, 0x08	; 8
    2472:	0f b6       	in	r0, 0x3f	; 63
    2474:	f8 94       	cli
    2476:	de bf       	out	0x3e, r29	; 62
    2478:	0f be       	out	0x3f, r0	; 63
    247a:	cd bf       	out	0x3d, r28	; 61
    247c:	df 91       	pop	r29
    247e:	cf 91       	pop	r28
    2480:	08 95       	ret

00002482 <add_entry>:
	hex_to_bytes(hex, 4, id);
	add_entry(id, permissions);
	return 0;
}

int add_entry(can_id_t id, permissions_t permissions){
    2482:	1f 93       	push	r17
    2484:	cf 93       	push	r28
    2486:	df 93       	push	r29
    2488:	ec 01       	movw	r28, r24
    248a:	16 2f       	mov	r17, r22
	entry_t *new_entry; 
	new_entry = malloc(sizeof(entry_t));
    248c:	85 e0       	ldi	r24, 0x05	; 5
    248e:	90 e0       	ldi	r25, 0x00	; 0
    2490:	4f d6       	rcall	.+3230   	; 0x3130 <malloc>
	new_entry->permissions = permissions;
    2492:	fc 01       	movw	r30, r24
    2494:	12 83       	std	Z+2, r17	; 0x02
	memcpy(new_entry->id, id, sizeof(can_id_t));
    2496:	28 81       	ld	r18, Y
    2498:	39 81       	ldd	r19, Y+1	; 0x01
    249a:	31 83       	std	Z+1, r19	; 0x01
    249c:	20 83       	st	Z, r18
	entry_t *curr = permission_table->head;
    249e:	a0 91 b0 02 	lds	r26, 0x02B0	; 0x8002b0 <permission_table>
    24a2:	b0 91 b1 02 	lds	r27, 0x02B1	; 0x8002b1 <permission_table+0x1>
    24a6:	ed 91       	ld	r30, X+
    24a8:	fc 91       	ld	r31, X
    24aa:	11 97       	sbiw	r26, 0x01	; 1
	if(curr != NULL){
    24ac:	30 97       	sbiw	r30, 0x00	; 0
    24ae:	11 f4       	brne	.+4      	; 0x24b4 <add_entry+0x32>
    24b0:	09 c0       	rjmp	.+18     	; 0x24c4 <add_entry+0x42>
		while(curr->successor != NULL){
			curr = curr->successor;
    24b2:	f9 01       	movw	r30, r18
	new_entry = malloc(sizeof(entry_t));
	new_entry->permissions = permissions;
	memcpy(new_entry->id, id, sizeof(can_id_t));
	entry_t *curr = permission_table->head;
	if(curr != NULL){
		while(curr->successor != NULL){
    24b4:	23 81       	ldd	r18, Z+3	; 0x03
    24b6:	34 81       	ldd	r19, Z+4	; 0x04
    24b8:	21 15       	cp	r18, r1
    24ba:	31 05       	cpc	r19, r1
    24bc:	d1 f7       	brne	.-12     	; 0x24b2 <add_entry+0x30>
			curr = curr->successor;
		}
		curr->successor = new_entry;
    24be:	94 83       	std	Z+4, r25	; 0x04
    24c0:	83 83       	std	Z+3, r24	; 0x03
    24c2:	02 c0       	rjmp	.+4      	; 0x24c8 <add_entry+0x46>
	}else{
		permission_table->head = new_entry;
    24c4:	8d 93       	st	X+, r24
    24c6:	9c 93       	st	X, r25
	}
	return 0;
}
    24c8:	80 e0       	ldi	r24, 0x00	; 0
    24ca:	90 e0       	ldi	r25, 0x00	; 0
    24cc:	df 91       	pop	r29
    24ce:	cf 91       	pop	r28
    24d0:	1f 91       	pop	r17
    24d2:	08 95       	ret

000024d4 <add_entry_hex>:
	add_entry_hex("0726", permissions);
	add_entry_hex("07E0", permissions);
	//add_entry_hex("0726", roles);
}

int add_entry_hex(char *hex, permissions_t permissions){
    24d4:	1f 93       	push	r17
    24d6:	cf 93       	push	r28
    24d8:	df 93       	push	r29
    24da:	00 d0       	rcall	.+0      	; 0x24dc <add_entry_hex+0x8>
    24dc:	cd b7       	in	r28, 0x3d	; 61
    24de:	de b7       	in	r29, 0x3e	; 62
    24e0:	16 2f       	mov	r17, r22
	can_id_t id;
	hex_to_bytes(hex, 4, id);
    24e2:	ae 01       	movw	r20, r28
    24e4:	4f 5f       	subi	r20, 0xFF	; 255
    24e6:	5f 4f       	sbci	r21, 0xFF	; 255
    24e8:	64 e0       	ldi	r22, 0x04	; 4
    24ea:	89 de       	rcall	.-750    	; 0x21fe <hex_to_bytes>
	add_entry(id, permissions);
    24ec:	61 2f       	mov	r22, r17
    24ee:	ce 01       	movw	r24, r28
    24f0:	01 96       	adiw	r24, 0x01	; 1
    24f2:	c7 df       	rcall	.-114    	; 0x2482 <add_entry>
	return 0;
}
    24f4:	80 e0       	ldi	r24, 0x00	; 0
    24f6:	90 e0       	ldi	r25, 0x00	; 0
    24f8:	0f 90       	pop	r0
    24fa:	0f 90       	pop	r0
    24fc:	df 91       	pop	r29
    24fe:	cf 91       	pop	r28
    2500:	1f 91       	pop	r17
    2502:	08 95       	ret

00002504 <init_permissions_table>:
#include <string.h>

permission_table_t *permission_table; 

void init_permissions_table(){
	permission_table = malloc(sizeof(permission_table_t));
    2504:	82 e0       	ldi	r24, 0x02	; 2
    2506:	90 e0       	ldi	r25, 0x00	; 0
    2508:	13 d6       	rcall	.+3110   	; 0x3130 <malloc>
    250a:	90 93 b1 02 	sts	0x02B1, r25	; 0x8002b1 <permission_table+0x1>
    250e:	80 93 b0 02 	sts	0x02B0, r24	; 0x8002b0 <permission_table>
	permissions_t permissions = 0b00001111;
	add_entry_hex("0726", permissions);
    2512:	6f e0       	ldi	r22, 0x0F	; 15
    2514:	84 ea       	ldi	r24, 0xA4	; 164
    2516:	92 e0       	ldi	r25, 0x02	; 2
    2518:	dd df       	rcall	.-70     	; 0x24d4 <add_entry_hex>
	add_entry_hex("07E0", permissions);
    251a:	6f e0       	ldi	r22, 0x0F	; 15
    251c:	89 ea       	ldi	r24, 0xA9	; 169
    251e:	92 e0       	ldi	r25, 0x02	; 2
    2520:	d9 cf       	rjmp	.-78     	; 0x24d4 <add_entry_hex>
    2522:	08 95       	ret

00002524 <entrycmp>:
	}
	return 0;
}

int entrycmp(entry_t *entry, can_id_t msg_id){
	return memcmp(entry->id, msg_id, 2);
    2524:	42 e0       	ldi	r20, 0x02	; 2
    2526:	50 e0       	ldi	r21, 0x00	; 0
    2528:	82 c7       	rjmp	.+3844   	; 0x342e <memcmp>
}
    252a:	08 95       	ret

0000252c <find_entry>:

int find_entry(can_id_t msg_id, entry_t **dest){
    252c:	ef 92       	push	r14
    252e:	ff 92       	push	r15
    2530:	0f 93       	push	r16
    2532:	1f 93       	push	r17
    2534:	cf 93       	push	r28
    2536:	df 93       	push	r29
    2538:	8c 01       	movw	r16, r24
    253a:	7b 01       	movw	r14, r22
	entry_t *curr = permission_table->head;
    253c:	e0 91 b0 02 	lds	r30, 0x02B0	; 0x8002b0 <permission_table>
    2540:	f0 91 b1 02 	lds	r31, 0x02B1	; 0x8002b1 <permission_table+0x1>
    2544:	c0 81       	ld	r28, Z
    2546:	d1 81       	ldd	r29, Z+1	; 0x01
	uart_puts(curr->id);
    2548:	ce 01       	movw	r24, r28
    254a:	c3 d5       	rcall	.+2950   	; 0x30d2 <uart_puts>
	while(curr != NULL){
    254c:	20 97       	sbiw	r28, 0x00	; 0
    254e:	89 f0       	breq	.+34     	; 0x2572 <find_entry+0x46>
		if(entrycmp(curr, msg_id) == 0){
    2550:	b8 01       	movw	r22, r16
    2552:	ce 01       	movw	r24, r28
    2554:	e7 df       	rcall	.-50     	; 0x2524 <entrycmp>
    2556:	00 97       	sbiw	r24, 0x00	; 0
    2558:	21 f4       	brne	.+8      	; 0x2562 <find_entry+0x36>
			*dest = curr;
    255a:	f7 01       	movw	r30, r14
    255c:	d1 83       	std	Z+1, r29	; 0x01
    255e:	c0 83       	st	Z, r28
			return 0;
    2560:	0a c0       	rjmp	.+20     	; 0x2576 <find_entry+0x4a>
		}else{
			curr = curr->successor;
    2562:	0b 80       	ldd	r0, Y+3	; 0x03
    2564:	dc 81       	ldd	r29, Y+4	; 0x04
    2566:	c0 2d       	mov	r28, r0
}

int find_entry(can_id_t msg_id, entry_t **dest){
	entry_t *curr = permission_table->head;
	uart_puts(curr->id);
	while(curr != NULL){
    2568:	20 97       	sbiw	r28, 0x00	; 0
    256a:	91 f7       	brne	.-28     	; 0x2550 <find_entry+0x24>
			return 0;
		}else{
			curr = curr->successor;
		}
	}
	return 1;
    256c:	81 e0       	ldi	r24, 0x01	; 1
    256e:	90 e0       	ldi	r25, 0x00	; 0
    2570:	02 c0       	rjmp	.+4      	; 0x2576 <find_entry+0x4a>
    2572:	81 e0       	ldi	r24, 0x01	; 1
    2574:	90 e0       	ldi	r25, 0x00	; 0
}
    2576:	df 91       	pop	r29
    2578:	cf 91       	pop	r28
    257a:	1f 91       	pop	r17
    257c:	0f 91       	pop	r16
    257e:	ff 90       	pop	r15
    2580:	ef 90       	pop	r14
    2582:	08 95       	ret

00002584 <check_permission>:

int check_permission(can_id_t msg_id, permissions_t role){
    2584:	1f 93       	push	r17
    2586:	cf 93       	push	r28
    2588:	df 93       	push	r29
    258a:	1f 92       	push	r1
    258c:	cd b7       	in	r28, 0x3d	; 61
    258e:	de b7       	in	r29, 0x3e	; 62
    2590:	16 2f       	mov	r17, r22
	entry_t **adress;
	if(find_entry(msg_id, adress)) return 1;
    2592:	60 e0       	ldi	r22, 0x00	; 0
    2594:	70 e0       	ldi	r23, 0x00	; 0
    2596:	ca df       	rcall	.-108    	; 0x252c <find_entry>
    2598:	00 97       	sbiw	r24, 0x00	; 0
    259a:	b1 f4       	brne	.+44     	; 0x25c8 <check_permission+0x44>
	entry_t *entry = *adress;
	volatile uint8_t test = entry->permissions;
    259c:	e0 91 00 00 	lds	r30, 0x0000	; 0x800000 <__TEXT_REGION_LENGTH__+0x7e0000>
    25a0:	f0 91 01 00 	lds	r31, 0x0001	; 0x800001 <__TEXT_REGION_LENGTH__+0x7e0001>
    25a4:	22 81       	ldd	r18, Z+2	; 0x02
    25a6:	29 83       	std	Y+1, r18	; 0x01
	if((entry->permissions && role) == role) return 0; 
    25a8:	22 23       	and	r18, r18
    25aa:	29 f0       	breq	.+10     	; 0x25b6 <check_permission+0x32>
    25ac:	11 23       	and	r17, r17
    25ae:	71 f0       	breq	.+28     	; 0x25cc <check_permission+0x48>
    25b0:	21 e0       	ldi	r18, 0x01	; 1
    25b2:	30 e0       	ldi	r19, 0x00	; 0
    25b4:	01 c0       	rjmp	.+2      	; 0x25b8 <check_permission+0x34>
    25b6:	9c 01       	movw	r18, r24
    25b8:	61 2f       	mov	r22, r17
    25ba:	70 e0       	ldi	r23, 0x00	; 0
    25bc:	26 17       	cp	r18, r22
    25be:	37 07       	cpc	r19, r23
    25c0:	29 f0       	breq	.+10     	; 0x25cc <check_permission+0x48>
	return 2;
    25c2:	82 e0       	ldi	r24, 0x02	; 2
    25c4:	90 e0       	ldi	r25, 0x00	; 0
    25c6:	02 c0       	rjmp	.+4      	; 0x25cc <check_permission+0x48>
	return 1;
}

int check_permission(can_id_t msg_id, permissions_t role){
	entry_t **adress;
	if(find_entry(msg_id, adress)) return 1;
    25c8:	81 e0       	ldi	r24, 0x01	; 1
    25ca:	90 e0       	ldi	r25, 0x00	; 0
	entry_t *entry = *adress;
	volatile uint8_t test = entry->permissions;
	if((entry->permissions && role) == role) return 0; 
	return 2;
    25cc:	0f 90       	pop	r0
    25ce:	df 91       	pop	r29
    25d0:	cf 91       	pop	r28
    25d2:	1f 91       	pop	r17
    25d4:	08 95       	ret

000025d6 <hmac_sha256>:

/*
 * keylength in bits!
 * message length in bits!
 */
void hmac_sha256(void *dest, const void *key, uint16_t keylength_b, const void *msg, uint32_t msglength_b){ /* a one-shot*/
    25d6:	2f 92       	push	r2
    25d8:	3f 92       	push	r3
    25da:	4f 92       	push	r4
    25dc:	5f 92       	push	r5
    25de:	6f 92       	push	r6
    25e0:	7f 92       	push	r7
    25e2:	8f 92       	push	r8
    25e4:	9f 92       	push	r9
    25e6:	af 92       	push	r10
    25e8:	bf 92       	push	r11
    25ea:	cf 92       	push	r12
    25ec:	df 92       	push	r13
    25ee:	ef 92       	push	r14
    25f0:	ff 92       	push	r15
    25f2:	0f 93       	push	r16
    25f4:	1f 93       	push	r17
    25f6:	cf 93       	push	r28
    25f8:	df 93       	push	r29
    25fa:	cd b7       	in	r28, 0x3d	; 61
    25fc:	de b7       	in	r29, 0x3e	; 62
    25fe:	c8 56       	subi	r28, 0x68	; 104
    2600:	d1 09       	sbc	r29, r1
    2602:	0f b6       	in	r0, 0x3f	; 63
    2604:	f8 94       	cli
    2606:	de bf       	out	0x3e, r29	; 62
    2608:	0f be       	out	0x3f, r0	; 63
    260a:	cd bf       	out	0x3d, r28	; 61
    260c:	1c 01       	movw	r2, r24
    260e:	49 01       	movw	r8, r18
    2610:	a9 96       	adiw	r28, 0x29	; 41
    2612:	ec ae       	std	Y+60, r14	; 0x3c
    2614:	fd ae       	std	Y+61, r15	; 0x3d
    2616:	0e af       	std	Y+62, r16	; 0x3e
    2618:	1f af       	std	Y+63, r17	; 0x3f
    261a:	a9 97       	sbiw	r28, 0x29	; 41
	sha256_ctx_t s;
	uint8_t i;
	uint8_t buffer[HMAC_SHA256_BLOCK_BYTES];
	
	memset(buffer, 0, HMAC_SHA256_BLOCK_BYTES);
    261c:	fe 01       	movw	r30, r28
    261e:	b5 96       	adiw	r30, 0x25	; 37
    2620:	80 e4       	ldi	r24, 0x40	; 64
    2622:	df 01       	movw	r26, r30
    2624:	1d 92       	st	X+, r1
    2626:	8a 95       	dec	r24
    2628:	e9 f7       	brne	.-6      	; 0x2624 <hmac_sha256+0x4e>
	
	/* if key is larger than a block we have to hash it*/
	if (keylength_b > SHA256_BLOCK_BITS){
    262a:	41 30       	cpi	r20, 0x01	; 1
    262c:	b2 e0       	ldi	r27, 0x02	; 2
    262e:	5b 07       	cpc	r21, r27
    2630:	30 f0       	brcs	.+12     	; 0x263e <hmac_sha256+0x68>
		sha256((void*)buffer, key, keylength_b);
    2632:	9a 01       	movw	r18, r20
    2634:	40 e0       	ldi	r20, 0x00	; 0
    2636:	50 e0       	ldi	r21, 0x00	; 0
    2638:	cf 01       	movw	r24, r30
    263a:	e1 d0       	rcall	.+450    	; 0x27fe <sha256>
    263c:	95 c0       	rjmp	.+298    	; 0x2768 <hmac_sha256+0x192>
	} else {
		memcpy(buffer, key, (keylength_b+7)/8);
    263e:	49 5f       	subi	r20, 0xF9	; 249
    2640:	5f 4f       	sbci	r21, 0xFF	; 255
    2642:	56 95       	lsr	r21
    2644:	47 95       	ror	r20
    2646:	56 95       	lsr	r21
    2648:	47 95       	ror	r20
    264a:	56 95       	lsr	r21
    264c:	47 95       	ror	r20
    264e:	ce 01       	movw	r24, r28
    2650:	85 96       	adiw	r24, 0x25	; 37
    2652:	fa d6       	rcall	.+3572   	; 0x3448 <memcpy>
    2654:	89 c0       	rjmp	.+274    	; 0x2768 <hmac_sha256+0x192>
	}
	
	for (i=0; i<SHA256_BLOCK_BYTES; ++i){
		buffer[i] ^= IPAD;
    2656:	80 81       	ld	r24, Z
    2658:	89 27       	eor	r24, r25
    265a:	81 93       	st	Z+, r24
		sha256((void*)buffer, key, keylength_b);
	} else {
		memcpy(buffer, key, (keylength_b+7)/8);
	}
	
	for (i=0; i<SHA256_BLOCK_BYTES; ++i){
    265c:	ec 15       	cp	r30, r12
    265e:	fd 05       	cpc	r31, r13
    2660:	d1 f7       	brne	.-12     	; 0x2656 <hmac_sha256+0x80>
		buffer[i] ^= IPAD;
	}
	sha256_init(&s);
    2662:	ce 01       	movw	r24, r28
    2664:	01 96       	adiw	r24, 0x01	; 1
    2666:	a4 d0       	rcall	.+328    	; 0x27b0 <sha256_init>
	sha256_nextBlock(&s, buffer);
    2668:	be 01       	movw	r22, r28
    266a:	6b 5d       	subi	r22, 0xDB	; 219
    266c:	7f 4f       	sbci	r23, 0xFF	; 255
    266e:	ce 01       	movw	r24, r28
    2670:	01 96       	adiw	r24, 0x01	; 1
    2672:	a9 d0       	rcall	.+338    	; 0x27c6 <sha256_nextBlock>
	while (msglength_b >= HMAC_SHA256_BLOCK_BITS){
    2674:	a9 96       	adiw	r28, 0x29	; 41
    2676:	8c ad       	ldd	r24, Y+60	; 0x3c
    2678:	9d ad       	ldd	r25, Y+61	; 0x3d
    267a:	ae ad       	ldd	r26, Y+62	; 0x3e
    267c:	bf ad       	ldd	r27, Y+63	; 0x3f
    267e:	a9 97       	sbiw	r28, 0x29	; 41
    2680:	81 15       	cp	r24, r1
    2682:	e2 e0       	ldi	r30, 0x02	; 2
    2684:	9e 07       	cpc	r25, r30
    2686:	a1 05       	cpc	r26, r1
    2688:	b1 05       	cpc	r27, r1
    268a:	08 f4       	brcc	.+2      	; 0x268e <hmac_sha256+0xb8>
    268c:	41 c0       	rjmp	.+130    	; 0x2710 <hmac_sha256+0x13a>
    268e:	2c 01       	movw	r4, r24
    2690:	3d 01       	movw	r6, r26
		sha256_nextBlock(&s, msg);
    2692:	54 01       	movw	r10, r8
    2694:	b5 01       	movw	r22, r10
    2696:	ce 01       	movw	r24, r28
    2698:	01 96       	adiw	r24, 0x01	; 1
    269a:	95 d0       	rcall	.+298    	; 0x27c6 <sha256_nextBlock>
		msg = (uint8_t*)msg + HMAC_SHA256_BLOCK_BYTES;
    269c:	f0 e4       	ldi	r31, 0x40	; 64
    269e:	af 0e       	add	r10, r31
    26a0:	b1 1c       	adc	r11, r1
		msglength_b -=  HMAC_SHA256_BLOCK_BITS;
    26a2:	22 e0       	ldi	r18, 0x02	; 2
    26a4:	52 1a       	sub	r5, r18
    26a6:	61 08       	sbc	r6, r1
    26a8:	71 08       	sbc	r7, r1
	for (i=0; i<SHA256_BLOCK_BYTES; ++i){
		buffer[i] ^= IPAD;
	}
	sha256_init(&s);
	sha256_nextBlock(&s, buffer);
	while (msglength_b >= HMAC_SHA256_BLOCK_BITS){
    26aa:	41 14       	cp	r4, r1
    26ac:	82 e0       	ldi	r24, 0x02	; 2
    26ae:	58 06       	cpc	r5, r24
    26b0:	61 04       	cpc	r6, r1
    26b2:	71 04       	cpc	r7, r1
    26b4:	78 f7       	brcc	.-34     	; 0x2694 <hmac_sha256+0xbe>
    26b6:	a9 96       	adiw	r28, 0x29	; 41
    26b8:	8c ad       	ldd	r24, Y+60	; 0x3c
    26ba:	9d ad       	ldd	r25, Y+61	; 0x3d
    26bc:	ae ad       	ldd	r26, Y+62	; 0x3e
    26be:	bf ad       	ldd	r27, Y+63	; 0x3f
    26c0:	a9 97       	sbiw	r28, 0x29	; 41
    26c2:	92 50       	subi	r25, 0x02	; 2
    26c4:	a1 09       	sbc	r26, r1
    26c6:	b1 09       	sbc	r27, r1
    26c8:	07 2e       	mov	r0, r23
    26ca:	79 e0       	ldi	r23, 0x09	; 9
    26cc:	b6 95       	lsr	r27
    26ce:	a7 95       	ror	r26
    26d0:	97 95       	ror	r25
    26d2:	87 95       	ror	r24
    26d4:	7a 95       	dec	r23
    26d6:	d1 f7       	brne	.-12     	; 0x26cc <hmac_sha256+0xf6>
    26d8:	70 2d       	mov	r23, r0
    26da:	01 96       	adiw	r24, 0x01	; 1
    26dc:	00 24       	eor	r0, r0
    26de:	96 95       	lsr	r25
    26e0:	87 95       	ror	r24
    26e2:	07 94       	ror	r0
    26e4:	96 95       	lsr	r25
    26e6:	87 95       	ror	r24
    26e8:	07 94       	ror	r0
    26ea:	98 2f       	mov	r25, r24
    26ec:	80 2d       	mov	r24, r0
    26ee:	88 0e       	add	r8, r24
    26f0:	99 1e       	adc	r9, r25
    26f2:	a9 96       	adiw	r28, 0x29	; 41
    26f4:	8c ad       	ldd	r24, Y+60	; 0x3c
    26f6:	9d ad       	ldd	r25, Y+61	; 0x3d
    26f8:	ae ad       	ldd	r26, Y+62	; 0x3e
    26fa:	bf ad       	ldd	r27, Y+63	; 0x3f
    26fc:	a9 97       	sbiw	r28, 0x29	; 41
    26fe:	91 70       	andi	r25, 0x01	; 1
    2700:	aa 27       	eor	r26, r26
    2702:	bb 27       	eor	r27, r27
    2704:	a9 96       	adiw	r28, 0x29	; 41
    2706:	8c af       	std	Y+60, r24	; 0x3c
    2708:	9d af       	std	Y+61, r25	; 0x3d
    270a:	ae af       	std	Y+62, r26	; 0x3e
    270c:	bf af       	std	Y+63, r27	; 0x3f
    270e:	a9 97       	sbiw	r28, 0x29	; 41
		sha256_nextBlock(&s, msg);
		msg = (uint8_t*)msg + HMAC_SHA256_BLOCK_BYTES;
		msglength_b -=  HMAC_SHA256_BLOCK_BITS;
	}
	sha256_lastBlock(&s, msg, msglength_b);
    2710:	a7 96       	adiw	r28, 0x27	; 39
    2712:	4e ad       	ldd	r20, Y+62	; 0x3e
    2714:	5f ad       	ldd	r21, Y+63	; 0x3f
    2716:	a7 97       	sbiw	r28, 0x27	; 39
    2718:	b4 01       	movw	r22, r8
    271a:	ce 01       	movw	r24, r28
    271c:	01 96       	adiw	r24, 0x01	; 1
    271e:	55 d0       	rcall	.+170    	; 0x27ca <sha256_lastBlock>
	/* since buffer still contains key xor ipad we can do ... */
	for (i=0; i<HMAC_SHA256_BLOCK_BYTES; ++i){
		buffer[i] ^= IPAD ^ OPAD;
    2720:	9a e6       	ldi	r25, 0x6A	; 106
    2722:	d8 01       	movw	r26, r16
    2724:	8c 91       	ld	r24, X
    2726:	89 27       	eor	r24, r25
    2728:	f8 01       	movw	r30, r16
    272a:	81 93       	st	Z+, r24
    272c:	8f 01       	movw	r16, r30
		msg = (uint8_t*)msg + HMAC_SHA256_BLOCK_BYTES;
		msglength_b -=  HMAC_SHA256_BLOCK_BITS;
	}
	sha256_lastBlock(&s, msg, msglength_b);
	/* since buffer still contains key xor ipad we can do ... */
	for (i=0; i<HMAC_SHA256_BLOCK_BYTES; ++i){
    272e:	ec 15       	cp	r30, r12
    2730:	fd 05       	cpc	r31, r13
		buffer[i] ^= IPAD ^ OPAD;
	}
	sha256_ctx2hash(dest, &s); /* save inner hash temporary to dest */
    2732:	b9 f7       	brne	.-18     	; 0x2722 <hmac_sha256+0x14c>
    2734:	be 01       	movw	r22, r28
    2736:	6f 5f       	subi	r22, 0xFF	; 255
    2738:	7f 4f       	sbci	r23, 0xFF	; 255
    273a:	c1 01       	movw	r24, r2
	sha256_init(&s);
    273c:	48 d0       	rcall	.+144    	; 0x27ce <sha256_ctx2hash>
    273e:	ce 01       	movw	r24, r28
    2740:	01 96       	adiw	r24, 0x01	; 1
	sha256_nextBlock(&s, buffer);
    2742:	36 d0       	rcall	.+108    	; 0x27b0 <sha256_init>
    2744:	be 01       	movw	r22, r28
    2746:	6b 5d       	subi	r22, 0xDB	; 219
    2748:	7f 4f       	sbci	r23, 0xFF	; 255
    274a:	ce 01       	movw	r24, r28
    274c:	01 96       	adiw	r24, 0x01	; 1
	sha256_lastBlock(&s, dest, SHA256_HASH_BITS);
    274e:	3b d0       	rcall	.+118    	; 0x27c6 <sha256_nextBlock>
    2750:	40 e0       	ldi	r20, 0x00	; 0
    2752:	51 e0       	ldi	r21, 0x01	; 1
    2754:	b1 01       	movw	r22, r2
    2756:	ce 01       	movw	r24, r28
    2758:	01 96       	adiw	r24, 0x01	; 1
	sha256_ctx2hash(dest, &s);
    275a:	37 d0       	rcall	.+110    	; 0x27ca <sha256_lastBlock>
    275c:	be 01       	movw	r22, r28
    275e:	6f 5f       	subi	r22, 0xFF	; 255
    2760:	7f 4f       	sbci	r23, 0xFF	; 255
    2762:	c1 01       	movw	r24, r2
    2764:	34 d0       	rcall	.+104    	; 0x27ce <sha256_ctx2hash>
}
    2766:	0a c0       	rjmp	.+20     	; 0x277c <hmac_sha256+0x1a6>
    2768:	8e 01       	movw	r16, r28
    276a:	0b 5d       	subi	r16, 0xDB	; 219
    276c:	1f 4f       	sbci	r17, 0xFF	; 255
    276e:	6e 01       	movw	r12, r28
    2770:	f5 e6       	ldi	r31, 0x65	; 101
    2772:	cf 0e       	add	r12, r31
    2774:	d1 1c       	adc	r13, r1

/*
 * keylength in bits!
 * message length in bits!
 */
void hmac_sha256(void *dest, const void *key, uint16_t keylength_b, const void *msg, uint32_t msglength_b){ /* a one-shot*/
    2776:	f8 01       	movw	r30, r16
	} else {
		memcpy(buffer, key, (keylength_b+7)/8);
	}
	
	for (i=0; i<SHA256_BLOCK_BYTES; ++i){
		buffer[i] ^= IPAD;
    2778:	96 e3       	ldi	r25, 0x36	; 54
    277a:	6d cf       	rjmp	.-294    	; 0x2656 <hmac_sha256+0x80>
	sha256_ctx2hash(dest, &s); /* save inner hash temporary to dest */
	sha256_init(&s);
	sha256_nextBlock(&s, buffer);
	sha256_lastBlock(&s, dest, SHA256_HASH_BITS);
	sha256_ctx2hash(dest, &s);
}
    277c:	c8 59       	subi	r28, 0x98	; 152
    277e:	df 4f       	sbci	r29, 0xFF	; 255
    2780:	0f b6       	in	r0, 0x3f	; 63
    2782:	f8 94       	cli
    2784:	de bf       	out	0x3e, r29	; 62
    2786:	0f be       	out	0x3f, r0	; 63
    2788:	cd bf       	out	0x3d, r28	; 61
    278a:	df 91       	pop	r29
    278c:	cf 91       	pop	r28
    278e:	1f 91       	pop	r17
    2790:	0f 91       	pop	r16
    2792:	ff 90       	pop	r15
    2794:	ef 90       	pop	r14
    2796:	df 90       	pop	r13
    2798:	cf 90       	pop	r12
    279a:	bf 90       	pop	r11
    279c:	af 90       	pop	r10
    279e:	9f 90       	pop	r9
    27a0:	8f 90       	pop	r8
    27a2:	7f 90       	pop	r7
    27a4:	6f 90       	pop	r6
    27a6:	5f 90       	pop	r5
    27a8:	4f 90       	pop	r4
    27aa:	3f 90       	pop	r3
    27ac:	2f 90       	pop	r2
    27ae:	08 95       	ret

000027b0 <sha256_init>:
 * \c sh256_init c initialises the given sha256 context for hashing
 * @param state pointer to a sha256 context
 * @return none
 */
void sha256_init(sha256_ctx_t *state){
	state->length=0;
    27b0:	fc 01       	movw	r30, r24
    27b2:	10 a2       	std	Z+32, r1	; 0x20
    27b4:	11 a2       	std	Z+33, r1	; 0x21
    27b6:	12 a2       	std	Z+34, r1	; 0x22
    27b8:	13 a2       	std	Z+35, r1	; 0x23
	memcpy_P(state->h, sha256_init_vector, 8*4);
    27ba:	40 e2       	ldi	r20, 0x20	; 32
    27bc:	50 e0       	ldi	r21, 0x00	; 0
    27be:	64 e9       	ldi	r22, 0x94	; 148
    27c0:	70 e0       	ldi	r23, 0x00	; 0
    27c2:	2c c6       	rjmp	.+3160   	; 0x341c <memcpy_P>
    27c4:	08 95       	ret

000027c6 <sha256_nextBlock>:
}

/*************************************************************************/
void sha256_nextBlock (sha256_ctx_t *state, const void *block){
	sha2_small_common_nextBlock(state, block);
    27c6:	92 c0       	rjmp	.+292    	; 0x28ec <sha2_small_common_nextBlock>
    27c8:	08 95       	ret

000027ca <sha256_lastBlock>:
}

/*************************************************************************/
void sha256_lastBlock (sha256_ctx_t *state, const void *block, uint16_t length_b){
	sha2_small_common_lastBlock(state, block, length_b);
    27ca:	a0 c3       	rjmp	.+1856   	; 0x2f0c <sha2_small_common_lastBlock>
    27cc:	08 95       	ret

000027ce <sha256_ctx2hash>:



/*************************************************************************/

void sha256_ctx2hash(void *dest, const sha256_ctx_t *state){
    27ce:	cf 93       	push	r28
    27d0:	df 93       	push	r29
    27d2:	ac 01       	movw	r20, r24
    27d4:	ec 01       	movw	r28, r24
    27d6:	a0 96       	adiw	r28, 0x20	; 32
    27d8:	fa 01       	movw	r30, r20
#if defined LITTLE_ENDIAN
	uint8_t i, j, *s=(uint8_t*)(state->h);
	i=8;
	do{
		j=3;
    27da:	93 e0       	ldi	r25, 0x03	; 3
		do{
			*((uint8_t*)dest) = s[j];
    27dc:	db 01       	movw	r26, r22
    27de:	a9 0f       	add	r26, r25
    27e0:	b1 1d       	adc	r27, r1
    27e2:	2c 91       	ld	r18, X
    27e4:	21 93       	st	Z+, r18
			dest = (uint8_t*)dest + 1;
		}while(j--);
    27e6:	91 50       	subi	r25, 0x01	; 1
    27e8:	c8 f7       	brcc	.-14     	; 0x27dc <sha256_ctx2hash+0xe>
    27ea:	4c 5f       	subi	r20, 0xFC	; 252
    27ec:	5f 4f       	sbci	r21, 0xFF	; 255
		s += 4;
    27ee:	6c 5f       	subi	r22, 0xFC	; 252
    27f0:	7f 4f       	sbci	r23, 0xFF	; 255
	}while(--i);
    27f2:	4c 17       	cp	r20, r28
    27f4:	5d 07       	cpc	r21, r29
    27f6:	81 f7       	brne	.-32     	; 0x27d8 <sha256_ctx2hash+0xa>
#elif BIG_ENDIAN
	memcpy(dest, state->h, 32);
#else
# error unsupported endian type!
#endif
}
    27f8:	df 91       	pop	r29
    27fa:	cf 91       	pop	r28
    27fc:	08 95       	ret

000027fe <sha256>:
/*************************************************************************/

/*
 * length in bits!
 */
void sha256(void *dest, const void *msg, uint32_t length_b){ /* length could be choosen longer but this is for µC */
    27fe:	4f 92       	push	r4
    2800:	5f 92       	push	r5
    2802:	6f 92       	push	r6
    2804:	7f 92       	push	r7
    2806:	8f 92       	push	r8
    2808:	9f 92       	push	r9
    280a:	af 92       	push	r10
    280c:	bf 92       	push	r11
    280e:	cf 92       	push	r12
    2810:	df 92       	push	r13
    2812:	ef 92       	push	r14
    2814:	ff 92       	push	r15
    2816:	0f 93       	push	r16
    2818:	1f 93       	push	r17
    281a:	cf 93       	push	r28
    281c:	df 93       	push	r29
    281e:	cd b7       	in	r28, 0x3d	; 61
    2820:	de b7       	in	r29, 0x3e	; 62
    2822:	a4 97       	sbiw	r28, 0x24	; 36
    2824:	0f b6       	in	r0, 0x3f	; 63
    2826:	f8 94       	cli
    2828:	de bf       	out	0x3e, r29	; 62
    282a:	0f be       	out	0x3f, r0	; 63
    282c:	cd bf       	out	0x3d, r28	; 61
    282e:	4c 01       	movw	r8, r24
    2830:	5b 01       	movw	r10, r22
    2832:	69 01       	movw	r12, r18
    2834:	7a 01       	movw	r14, r20
	sha256_ctx_t s;
	sha256_init(&s);
    2836:	ce 01       	movw	r24, r28
    2838:	01 96       	adiw	r24, 0x01	; 1
    283a:	ba df       	rcall	.-140    	; 0x27b0 <sha256_init>
	while(length_b >= SHA256_BLOCK_BITS){
    283c:	c1 14       	cp	r12, r1
    283e:	82 e0       	ldi	r24, 0x02	; 2
    2840:	d8 06       	cpc	r13, r24
    2842:	e1 04       	cpc	r14, r1
    2844:	f1 04       	cpc	r15, r1
    2846:	88 f1       	brcs	.+98     	; 0x28aa <sha256+0xac>
    2848:	26 01       	movw	r4, r12
    284a:	37 01       	movw	r6, r14
    284c:	85 01       	movw	r16, r10
	memcpy_P(state->h, sha256_init_vector, 8*4);
}

/*************************************************************************/
void sha256_nextBlock (sha256_ctx_t *state, const void *block){
	sha2_small_common_nextBlock(state, block);
    284e:	b8 01       	movw	r22, r16
    2850:	ce 01       	movw	r24, r28
    2852:	01 96       	adiw	r24, 0x01	; 1
    2854:	4b d0       	rcall	.+150    	; 0x28ec <sha2_small_common_nextBlock>
void sha256(void *dest, const void *msg, uint32_t length_b){ /* length could be choosen longer but this is for µC */
	sha256_ctx_t s;
	sha256_init(&s);
	while(length_b >= SHA256_BLOCK_BITS){
		sha256_nextBlock(&s, msg);
		msg = (uint8_t*)msg + SHA256_BLOCK_BITS/8;
    2856:	00 5c       	subi	r16, 0xC0	; 192
    2858:	1f 4f       	sbci	r17, 0xFF	; 255
		length_b -= SHA256_BLOCK_BITS;
    285a:	82 e0       	ldi	r24, 0x02	; 2
    285c:	58 1a       	sub	r5, r24
    285e:	61 08       	sbc	r6, r1
    2860:	71 08       	sbc	r7, r1
 * length in bits!
 */
void sha256(void *dest, const void *msg, uint32_t length_b){ /* length could be choosen longer but this is for µC */
	sha256_ctx_t s;
	sha256_init(&s);
	while(length_b >= SHA256_BLOCK_BITS){
    2862:	41 14       	cp	r4, r1
    2864:	82 e0       	ldi	r24, 0x02	; 2
    2866:	58 06       	cpc	r5, r24
    2868:	61 04       	cpc	r6, r1
    286a:	71 04       	cpc	r7, r1
    286c:	80 f7       	brcc	.-32     	; 0x284e <sha256+0x50>
    286e:	d7 01       	movw	r26, r14
    2870:	c6 01       	movw	r24, r12
    2872:	92 50       	subi	r25, 0x02	; 2
    2874:	a1 09       	sbc	r26, r1
    2876:	b1 09       	sbc	r27, r1
    2878:	07 2e       	mov	r0, r23
    287a:	79 e0       	ldi	r23, 0x09	; 9
    287c:	b6 95       	lsr	r27
    287e:	a7 95       	ror	r26
    2880:	97 95       	ror	r25
    2882:	87 95       	ror	r24
    2884:	7a 95       	dec	r23
    2886:	d1 f7       	brne	.-12     	; 0x287c <sha256+0x7e>
    2888:	70 2d       	mov	r23, r0
    288a:	01 96       	adiw	r24, 0x01	; 1
    288c:	00 24       	eor	r0, r0
    288e:	96 95       	lsr	r25
    2890:	87 95       	ror	r24
    2892:	07 94       	ror	r0
    2894:	96 95       	lsr	r25
    2896:	87 95       	ror	r24
    2898:	07 94       	ror	r0
    289a:	98 2f       	mov	r25, r24
    289c:	80 2d       	mov	r24, r0
    289e:	a8 0e       	add	r10, r24
    28a0:	b9 1e       	adc	r11, r25
    28a2:	81 e0       	ldi	r24, 0x01	; 1
    28a4:	d8 22       	and	r13, r24
    28a6:	ee 24       	eor	r14, r14
    28a8:	ff 24       	eor	r15, r15
	sha2_small_common_nextBlock(state, block);
}

/*************************************************************************/
void sha256_lastBlock (sha256_ctx_t *state, const void *block, uint16_t length_b){
	sha2_small_common_lastBlock(state, block, length_b);
    28aa:	a6 01       	movw	r20, r12
    28ac:	b5 01       	movw	r22, r10
    28ae:	ce 01       	movw	r24, r28
    28b0:	01 96       	adiw	r24, 0x01	; 1
    28b2:	2c d3       	rcall	.+1624   	; 0x2f0c <sha2_small_common_lastBlock>
		sha256_nextBlock(&s, msg);
		msg = (uint8_t*)msg + SHA256_BLOCK_BITS/8;
		length_b -= SHA256_BLOCK_BITS;
	}
	sha256_lastBlock(&s, msg, length_b);
	sha256_ctx2hash(dest,&s);
    28b4:	be 01       	movw	r22, r28
    28b6:	6f 5f       	subi	r22, 0xFF	; 255
    28b8:	7f 4f       	sbci	r23, 0xFF	; 255
    28ba:	c4 01       	movw	r24, r8
    28bc:	88 df       	rcall	.-240    	; 0x27ce <sha256_ctx2hash>
}
    28be:	a4 96       	adiw	r28, 0x24	; 36
    28c0:	0f b6       	in	r0, 0x3f	; 63
    28c2:	f8 94       	cli
    28c4:	de bf       	out	0x3e, r29	; 62
    28c6:	0f be       	out	0x3f, r0	; 63
    28c8:	cd bf       	out	0x3d, r28	; 61
    28ca:	df 91       	pop	r29
    28cc:	cf 91       	pop	r28
    28ce:	1f 91       	pop	r17
    28d0:	0f 91       	pop	r16
    28d2:	ff 90       	pop	r15
    28d4:	ef 90       	pop	r14
    28d6:	df 90       	pop	r13
    28d8:	cf 90       	pop	r12
    28da:	bf 90       	pop	r11
    28dc:	af 90       	pop	r10
    28de:	9f 90       	pop	r9
    28e0:	8f 90       	pop	r8
    28e2:	7f 90       	pop	r7
    28e4:	6f 90       	pop	r6
    28e6:	5f 90       	pop	r5
    28e8:	4f 90       	pop	r4
    28ea:	08 95       	ret

000028ec <sha2_small_common_nextBlock>:


/**
 * block must be, 512, Bit = 64, Byte, long !!!
 */
void sha2_small_common_nextBlock (sha2_small_common_ctx_t *state, const void *block){
    28ec:	2f 92       	push	r2
    28ee:	3f 92       	push	r3
    28f0:	4f 92       	push	r4
    28f2:	5f 92       	push	r5
    28f4:	6f 92       	push	r6
    28f6:	7f 92       	push	r7
    28f8:	8f 92       	push	r8
    28fa:	9f 92       	push	r9
    28fc:	af 92       	push	r10
    28fe:	bf 92       	push	r11
    2900:	cf 92       	push	r12
    2902:	df 92       	push	r13
    2904:	ef 92       	push	r14
    2906:	ff 92       	push	r15
    2908:	0f 93       	push	r16
    290a:	1f 93       	push	r17
    290c:	cf 93       	push	r28
    290e:	df 93       	push	r29
    2910:	cd b7       	in	r28, 0x3d	; 61
    2912:	de b7       	in	r29, 0x3e	; 62
    2914:	cb 56       	subi	r28, 0x6B	; 107
    2916:	d1 09       	sbc	r29, r1
    2918:	0f b6       	in	r0, 0x3f	; 63
    291a:	f8 94       	cli
    291c:	de bf       	out	0x3e, r29	; 62
    291e:	0f be       	out	0x3f, r0	; 63
    2920:	cd bf       	out	0x3d, r28	; 61
    2922:	ac 96       	adiw	r28, 0x2c	; 44
    2924:	9f af       	std	Y+63, r25	; 0x3f
    2926:	8e af       	std	Y+62, r24	; 0x3e
    2928:	ac 97       	sbiw	r28, 0x2c	; 44
    292a:	9e 01       	movw	r18, r28
    292c:	2f 5f       	subi	r18, 0xFF	; 255
    292e:	3f 4f       	sbci	r19, 0xFF	; 255
    2930:	a8 96       	adiw	r28, 0x28	; 40
    2932:	3f af       	std	Y+63, r19	; 0x3f
    2934:	2e af       	std	Y+62, r18	; 0x3e
    2936:	a8 97       	sbiw	r28, 0x28	; 40
    2938:	20 5c       	subi	r18, 0xC0	; 192
    293a:	3f 4f       	sbci	r19, 0xFF	; 255
    293c:	a8 96       	adiw	r28, 0x28	; 40
    293e:	ee ad       	ldd	r30, Y+62	; 0x3e
    2940:	ff ad       	ldd	r31, Y+63	; 0x3f
    2942:	a8 97       	sbiw	r28, 0x28	; 40
    2944:	af 01       	movw	r20, r30
	uint32_t a[8],t1,t2;

	/* init w */
#if defined LITTLE_ENDIAN
	for (i=0; i<16; ++i){
		w[i]= change_endian32(((uint32_t*)block)[i]);
    2946:	fb 01       	movw	r30, r22
    2948:	81 91       	ld	r24, Z+
    294a:	91 91       	ld	r25, Z+
    294c:	a1 91       	ld	r26, Z+
    294e:	b1 91       	ld	r27, Z+
    2950:	bf 01       	movw	r22, r30
    2952:	b8 2e       	mov	r11, r24
    2954:	aa 24       	eor	r10, r10
    2956:	99 24       	eor	r9, r9
    2958:	88 24       	eor	r8, r8
    295a:	cb 2e       	mov	r12, r27
    295c:	dd 24       	eor	r13, r13
    295e:	ee 24       	eor	r14, r14
    2960:	ff 24       	eor	r15, r15
    2962:	c8 28       	or	r12, r8
    2964:	d9 28       	or	r13, r9
    2966:	ea 28       	or	r14, r10
    2968:	fb 28       	or	r15, r11
    296a:	4c 01       	movw	r8, r24
    296c:	5d 01       	movw	r10, r26
    296e:	88 24       	eor	r8, r8
    2970:	aa 24       	eor	r10, r10
    2972:	bb 24       	eor	r11, r11
    2974:	ba 2c       	mov	r11, r10
    2976:	a9 2c       	mov	r10, r9
    2978:	98 2c       	mov	r9, r8
    297a:	88 24       	eor	r8, r8
    297c:	c8 28       	or	r12, r8
    297e:	d9 28       	or	r13, r9
    2980:	ea 28       	or	r14, r10
    2982:	fb 28       	or	r15, r11
    2984:	88 27       	eor	r24, r24
    2986:	99 27       	eor	r25, r25
    2988:	bb 27       	eor	r27, r27
    298a:	89 2f       	mov	r24, r25
    298c:	9a 2f       	mov	r25, r26
    298e:	ab 2f       	mov	r26, r27
    2990:	bb 27       	eor	r27, r27
    2992:	8c 29       	or	r24, r12
    2994:	9d 29       	or	r25, r13
    2996:	ae 29       	or	r26, r14
    2998:	bf 29       	or	r27, r15
    299a:	fa 01       	movw	r30, r20
    299c:	81 93       	st	Z+, r24
    299e:	91 93       	st	Z+, r25
    29a0:	a1 93       	st	Z+, r26
    29a2:	b1 93       	st	Z+, r27
    29a4:	af 01       	movw	r20, r30
	uint8_t  i;
	uint32_t a[8],t1,t2;

	/* init w */
#if defined LITTLE_ENDIAN
	for (i=0; i<16; ++i){
    29a6:	e2 17       	cp	r30, r18
    29a8:	f3 07       	cpc	r31, r19
    29aa:	69 f6       	brne	.-102    	; 0x2946 <sha2_small_common_nextBlock+0x5a>
	for (i=16; i<64; ++i){
		w[i] = SIGMA_b(w[i-2]) + w[i-7] + SIGMA_a(w[i-15]) + w[i-16];
	}
*/
/* init working variables */
	memcpy((void*)a,(void*)(state->h), 8*4);
    29ac:	80 e2       	ldi	r24, 0x20	; 32
    29ae:	ac 96       	adiw	r28, 0x2c	; 44
    29b0:	ee ad       	ldd	r30, Y+62	; 0x3e
    29b2:	ff ad       	ldd	r31, Y+63	; 0x3f
    29b4:	ac 97       	sbiw	r28, 0x2c	; 44
    29b6:	de 01       	movw	r26, r28
    29b8:	af 5b       	subi	r26, 0xBF	; 191
    29ba:	bf 4f       	sbci	r27, 0xFF	; 255
    29bc:	01 90       	ld	r0, Z+
    29be:	0d 92       	st	X+, r0
    29c0:	8a 95       	dec	r24
    29c2:	e1 f7       	brne	.-8      	; 0x29bc <sha2_small_common_nextBlock+0xd0>
    29c4:	0f 2e       	mov	r0, r31
    29c6:	f4 eb       	ldi	r31, 0xB4	; 180
    29c8:	2f 2e       	mov	r2, r31
    29ca:	f0 e0       	ldi	r31, 0x00	; 0
    29cc:	3f 2e       	mov	r3, r31
    29ce:	f0 2d       	mov	r31, r0

/* do the, fun stuff, */
	for (i=0; i<64; ++i){
    29d0:	a6 96       	adiw	r28, 0x26	; 38
    29d2:	1f ae       	std	Y+63, r1	; 0x3f
    29d4:	a6 97       	sbiw	r28, 0x26	; 38
			memmove(&(w[0]), &(w[1]), 15*4);
			w[15] = wx;
		}
		t1 = a[7] + SIGMA_1(a[4]) + CH(a[4],a[5],a[6]) + pgm_read_dword(&k[i]) + wx;
		t2 = SIGMA_0(a[0]) + MAJ(a[0],a[1],a[2]);
		memmove(&(a[1]), &(a[0]), 7*4); 	/* a[7]=a[6]; a[6]=a[5]; a[5]=a[4]; a[4]=a[3]; a[3]=a[2]; a[2]=a[1]; a[1]=a[0]; */
    29d6:	21 e4       	ldi	r18, 0x41	; 65
    29d8:	30 e0       	ldi	r19, 0x00	; 0
    29da:	2c 0f       	add	r18, r28
    29dc:	3d 1f       	adc	r19, r29
    29de:	2c 5f       	subi	r18, 0xFC	; 252
    29e0:	3f 4f       	sbci	r19, 0xFF	; 255
    29e2:	aa 96       	adiw	r28, 0x2a	; 42
    29e4:	3f af       	std	Y+63, r19	; 0x3f
    29e6:	2e af       	std	Y+62, r18	; 0x3e
    29e8:	aa 97       	sbiw	r28, 0x2a	; 42
/* init working variables */
	memcpy((void*)a,(void*)(state->h), 8*4);

/* do the, fun stuff, */
	for (i=0; i<64; ++i){
		if(i<16){
    29ea:	a6 96       	adiw	r28, 0x26	; 38
    29ec:	3f ad       	ldd	r19, Y+63	; 0x3f
    29ee:	a6 97       	sbiw	r28, 0x26	; 38
    29f0:	30 31       	cpi	r19, 0x10	; 16
    29f2:	48 f4       	brcc	.+18     	; 0x2a06 <sha2_small_common_nextBlock+0x11a>
			wx = w[i];
    29f4:	a8 96       	adiw	r28, 0x28	; 40
    29f6:	ae ad       	ldd	r26, Y+62	; 0x3e
    29f8:	bf ad       	ldd	r27, Y+63	; 0x3f
    29fa:	a8 97       	sbiw	r28, 0x28	; 40
    29fc:	cd 90       	ld	r12, X+
    29fe:	dd 90       	ld	r13, X+
    2a00:	ed 90       	ld	r14, X+
    2a02:	fc 90       	ld	r15, X
    2a04:	b8 c0       	rjmp	.+368    	; 0x2b76 <sha2_small_common_nextBlock+0x28a>
		}else{
			wx = SIGMA_b(w[14]) + w[9] + SIGMA_a(w[1]) + w[0];
    2a06:	89 ad       	ldd	r24, Y+57	; 0x39
    2a08:	9a ad       	ldd	r25, Y+58	; 0x3a
    2a0a:	ab ad       	ldd	r26, Y+59	; 0x3b
    2a0c:	bc ad       	ldd	r27, Y+60	; 0x3c
    2a0e:	8d 80       	ldd	r8, Y+5	; 0x05
    2a10:	9e 80       	ldd	r9, Y+6	; 0x06
    2a12:	af 80       	ldd	r10, Y+7	; 0x07
    2a14:	b8 84       	ldd	r11, Y+8	; 0x08
    2a16:	6c 01       	movw	r12, r24
    2a18:	7d 01       	movw	r14, r26
    2a1a:	0b 2e       	mov	r0, r27
    2a1c:	bd e0       	ldi	r27, 0x0D	; 13
    2a1e:	cc 0c       	add	r12, r12
    2a20:	dd 1c       	adc	r13, r13
    2a22:	ee 1c       	adc	r14, r14
    2a24:	ff 1c       	adc	r15, r15
    2a26:	ba 95       	dec	r27
    2a28:	d1 f7       	brne	.-12     	; 0x2a1e <sha2_small_common_nextBlock+0x132>
    2a2a:	b0 2d       	mov	r27, r0
    2a2c:	ac 01       	movw	r20, r24
    2a2e:	bd 01       	movw	r22, r26
    2a30:	03 2e       	mov	r0, r19
    2a32:	33 e1       	ldi	r19, 0x13	; 19
    2a34:	76 95       	lsr	r23
    2a36:	67 95       	ror	r22
    2a38:	57 95       	ror	r21
    2a3a:	47 95       	ror	r20
    2a3c:	3a 95       	dec	r19
    2a3e:	d1 f7       	brne	.-12     	; 0x2a34 <sha2_small_common_nextBlock+0x148>
    2a40:	30 2d       	mov	r19, r0
    2a42:	97 01       	movw	r18, r14
    2a44:	86 01       	movw	r16, r12
    2a46:	04 2b       	or	r16, r20
    2a48:	15 2b       	or	r17, r21
    2a4a:	26 2b       	or	r18, r22
    2a4c:	37 2b       	or	r19, r23
    2a4e:	6c 01       	movw	r12, r24
    2a50:	7d 01       	movw	r14, r26
    2a52:	0b 2e       	mov	r0, r27
    2a54:	bf e0       	ldi	r27, 0x0F	; 15
    2a56:	cc 0c       	add	r12, r12
    2a58:	dd 1c       	adc	r13, r13
    2a5a:	ee 1c       	adc	r14, r14
    2a5c:	ff 1c       	adc	r15, r15
    2a5e:	ba 95       	dec	r27
    2a60:	d1 f7       	brne	.-12     	; 0x2a56 <sha2_small_common_nextBlock+0x16a>
    2a62:	b0 2d       	mov	r27, r0
    2a64:	ac 01       	movw	r20, r24
    2a66:	bd 01       	movw	r22, r26
    2a68:	03 2e       	mov	r0, r19
    2a6a:	31 e1       	ldi	r19, 0x11	; 17
    2a6c:	76 95       	lsr	r23
    2a6e:	67 95       	ror	r22
    2a70:	57 95       	ror	r21
    2a72:	47 95       	ror	r20
    2a74:	3a 95       	dec	r19
    2a76:	d1 f7       	brne	.-12     	; 0x2a6c <sha2_small_common_nextBlock+0x180>
    2a78:	30 2d       	mov	r19, r0
    2a7a:	4c 29       	or	r20, r12
    2a7c:	5d 29       	or	r21, r13
    2a7e:	6e 29       	or	r22, r14
    2a80:	7f 29       	or	r23, r15
    2a82:	68 01       	movw	r12, r16
    2a84:	79 01       	movw	r14, r18
    2a86:	c4 26       	eor	r12, r20
    2a88:	d5 26       	eor	r13, r21
    2a8a:	e6 26       	eor	r14, r22
    2a8c:	f7 26       	eor	r15, r23
    2a8e:	07 2e       	mov	r0, r23
    2a90:	7a e0       	ldi	r23, 0x0A	; 10
    2a92:	b6 95       	lsr	r27
    2a94:	a7 95       	ror	r26
    2a96:	97 95       	ror	r25
    2a98:	87 95       	ror	r24
    2a9a:	7a 95       	dec	r23
    2a9c:	d1 f7       	brne	.-12     	; 0x2a92 <sha2_small_common_nextBlock+0x1a6>
    2a9e:	70 2d       	mov	r23, r0
    2aa0:	8c 25       	eor	r24, r12
    2aa2:	9d 25       	eor	r25, r13
    2aa4:	ae 25       	eor	r26, r14
    2aa6:	bf 25       	eor	r27, r15
    2aa8:	cd a0       	ldd	r12, Y+37	; 0x25
    2aaa:	de a0       	ldd	r13, Y+38	; 0x26
    2aac:	ef a0       	ldd	r14, Y+39	; 0x27
    2aae:	f8 a4       	ldd	r15, Y+40	; 0x28
    2ab0:	49 81       	ldd	r20, Y+1	; 0x01
    2ab2:	5a 81       	ldd	r21, Y+2	; 0x02
    2ab4:	6b 81       	ldd	r22, Y+3	; 0x03
    2ab6:	7c 81       	ldd	r23, Y+4	; 0x04
    2ab8:	c4 0e       	add	r12, r20
    2aba:	d5 1e       	adc	r13, r21
    2abc:	e6 1e       	adc	r14, r22
    2abe:	f7 1e       	adc	r15, r23
    2ac0:	8c 0d       	add	r24, r12
    2ac2:	9d 1d       	adc	r25, r13
    2ac4:	ae 1d       	adc	r26, r14
    2ac6:	bf 1d       	adc	r27, r15
    2ac8:	75 01       	movw	r14, r10
    2aca:	64 01       	movw	r12, r8
    2acc:	0b 2e       	mov	r0, r27
    2ace:	be e0       	ldi	r27, 0x0E	; 14
    2ad0:	cc 0c       	add	r12, r12
    2ad2:	dd 1c       	adc	r13, r13
    2ad4:	ee 1c       	adc	r14, r14
    2ad6:	ff 1c       	adc	r15, r15
    2ad8:	ba 95       	dec	r27
    2ada:	d1 f7       	brne	.-12     	; 0x2ad0 <sha2_small_common_nextBlock+0x1e4>
    2adc:	b0 2d       	mov	r27, r0
    2ade:	b5 01       	movw	r22, r10
    2ae0:	a4 01       	movw	r20, r8
    2ae2:	03 2e       	mov	r0, r19
    2ae4:	32 e1       	ldi	r19, 0x12	; 18
    2ae6:	76 95       	lsr	r23
    2ae8:	67 95       	ror	r22
    2aea:	57 95       	ror	r21
    2aec:	47 95       	ror	r20
    2aee:	3a 95       	dec	r19
    2af0:	d1 f7       	brne	.-12     	; 0x2ae6 <sha2_small_common_nextBlock+0x1fa>
    2af2:	30 2d       	mov	r19, r0
    2af4:	c4 2a       	or	r12, r20
    2af6:	d5 2a       	or	r13, r21
    2af8:	e6 2a       	or	r14, r22
    2afa:	f7 2a       	or	r15, r23
    2afc:	b5 01       	movw	r22, r10
    2afe:	a4 01       	movw	r20, r8
    2b00:	68 94       	set
    2b02:	16 f8       	bld	r1, 6
    2b04:	76 95       	lsr	r23
    2b06:	67 95       	ror	r22
    2b08:	57 95       	ror	r21
    2b0a:	47 95       	ror	r20
    2b0c:	16 94       	lsr	r1
    2b0e:	d1 f7       	brne	.-12     	; 0x2b04 <sha2_small_common_nextBlock+0x218>
    2b10:	95 01       	movw	r18, r10
    2b12:	84 01       	movw	r16, r8
    2b14:	0f 2e       	mov	r0, r31
    2b16:	f9 e1       	ldi	r31, 0x19	; 25
    2b18:	00 0f       	add	r16, r16
    2b1a:	11 1f       	adc	r17, r17
    2b1c:	22 1f       	adc	r18, r18
    2b1e:	33 1f       	adc	r19, r19
    2b20:	fa 95       	dec	r31
    2b22:	d1 f7       	brne	.-12     	; 0x2b18 <sha2_small_common_nextBlock+0x22c>
    2b24:	f0 2d       	mov	r31, r0
    2b26:	40 2b       	or	r20, r16
    2b28:	51 2b       	or	r21, r17
    2b2a:	62 2b       	or	r22, r18
    2b2c:	73 2b       	or	r23, r19
    2b2e:	c4 26       	eor	r12, r20
    2b30:	d5 26       	eor	r13, r21
    2b32:	e6 26       	eor	r14, r22
    2b34:	f7 26       	eor	r15, r23
    2b36:	68 94       	set
    2b38:	12 f8       	bld	r1, 2
    2b3a:	b6 94       	lsr	r11
    2b3c:	a7 94       	ror	r10
    2b3e:	97 94       	ror	r9
    2b40:	87 94       	ror	r8
    2b42:	16 94       	lsr	r1
    2b44:	d1 f7       	brne	.-12     	; 0x2b3a <sha2_small_common_nextBlock+0x24e>
    2b46:	8c 24       	eor	r8, r12
    2b48:	9d 24       	eor	r9, r13
    2b4a:	ae 24       	eor	r10, r14
    2b4c:	bf 24       	eor	r11, r15
    2b4e:	6c 01       	movw	r12, r24
    2b50:	7d 01       	movw	r14, r26
    2b52:	c8 0c       	add	r12, r8
    2b54:	d9 1c       	adc	r13, r9
    2b56:	ea 1c       	adc	r14, r10
    2b58:	fb 1c       	adc	r15, r11
			memmove(&(w[0]), &(w[1]), 15*4);
    2b5a:	4c e3       	ldi	r20, 0x3C	; 60
    2b5c:	50 e0       	ldi	r21, 0x00	; 0
    2b5e:	be 01       	movw	r22, r28
    2b60:	6b 5f       	subi	r22, 0xFB	; 251
    2b62:	7f 4f       	sbci	r23, 0xFF	; 255
    2b64:	ce 01       	movw	r24, r28
    2b66:	01 96       	adiw	r24, 0x01	; 1
    2b68:	78 d4       	rcall	.+2288   	; 0x345a <memmove>
			w[15] = wx;
    2b6a:	21 96       	adiw	r28, 0x01	; 1
    2b6c:	cc ae       	std	Y+60, r12	; 0x3c
    2b6e:	dd ae       	std	Y+61, r13	; 0x3d
    2b70:	ee ae       	std	Y+62, r14	; 0x3e
    2b72:	ff ae       	std	Y+63, r15	; 0x3f
    2b74:	21 97       	sbiw	r28, 0x01	; 1
		}
		t1 = a[7] + SIGMA_1(a[4]) + CH(a[4],a[5],a[6]) + pgm_read_dword(&k[i]) + wx;
    2b76:	65 96       	adiw	r28, 0x15	; 21
    2b78:	8c ad       	ldd	r24, Y+60	; 0x3c
    2b7a:	9d ad       	ldd	r25, Y+61	; 0x3d
    2b7c:	ae ad       	ldd	r26, Y+62	; 0x3e
    2b7e:	bf ad       	ldd	r27, Y+63	; 0x3f
    2b80:	65 97       	sbiw	r28, 0x15	; 21
    2b82:	f1 01       	movw	r30, r2
    2b84:	25 91       	lpm	r18, Z+
    2b86:	35 91       	lpm	r19, Z+
    2b88:	45 91       	lpm	r20, Z+
    2b8a:	54 91       	lpm	r21, Z
    2b8c:	a5 96       	adiw	r28, 0x25	; 37
    2b8e:	2c af       	std	Y+60, r18	; 0x3c
    2b90:	3d af       	std	Y+61, r19	; 0x3d
    2b92:	4e af       	std	Y+62, r20	; 0x3e
    2b94:	5f af       	std	Y+63, r21	; 0x3f
    2b96:	a5 97       	sbiw	r28, 0x25	; 37
    2b98:	4c 01       	movw	r8, r24
    2b9a:	5d 01       	movw	r10, r26
    2b9c:	80 94       	com	r8
    2b9e:	90 94       	com	r9
    2ba0:	a0 94       	com	r10
    2ba2:	b0 94       	com	r11
    2ba4:	6d 96       	adiw	r28, 0x1d	; 29
    2ba6:	4c ad       	ldd	r20, Y+60	; 0x3c
    2ba8:	5d ad       	ldd	r21, Y+61	; 0x3d
    2baa:	6e ad       	ldd	r22, Y+62	; 0x3e
    2bac:	7f ad       	ldd	r23, Y+63	; 0x3f
    2bae:	6d 97       	sbiw	r28, 0x1d	; 29
    2bb0:	84 22       	and	r8, r20
    2bb2:	95 22       	and	r9, r21
    2bb4:	a6 22       	and	r10, r22
    2bb6:	b7 22       	and	r11, r23
    2bb8:	69 96       	adiw	r28, 0x19	; 25
    2bba:	4c ad       	ldd	r20, Y+60	; 0x3c
    2bbc:	5d ad       	ldd	r21, Y+61	; 0x3d
    2bbe:	6e ad       	ldd	r22, Y+62	; 0x3e
    2bc0:	7f ad       	ldd	r23, Y+63	; 0x3f
    2bc2:	69 97       	sbiw	r28, 0x19	; 25
    2bc4:	8c 01       	movw	r16, r24
    2bc6:	9d 01       	movw	r18, r26
    2bc8:	04 23       	and	r16, r20
    2bca:	15 23       	and	r17, r21
    2bcc:	26 23       	and	r18, r22
    2bce:	37 23       	and	r19, r23
    2bd0:	b5 01       	movw	r22, r10
    2bd2:	a4 01       	movw	r20, r8
    2bd4:	40 27       	eor	r20, r16
    2bd6:	51 27       	eor	r21, r17
    2bd8:	62 27       	eor	r22, r18
    2bda:	73 27       	eor	r23, r19
    2bdc:	4c 01       	movw	r8, r24
    2bde:	5d 01       	movw	r10, r26
    2be0:	07 2e       	mov	r0, r23
    2be2:	7b e0       	ldi	r23, 0x0B	; 11
    2be4:	b6 94       	lsr	r11
    2be6:	a7 94       	ror	r10
    2be8:	97 94       	ror	r9
    2bea:	87 94       	ror	r8
    2bec:	7a 95       	dec	r23
    2bee:	d1 f7       	brne	.-12     	; 0x2be4 <sha2_small_common_nextBlock+0x2f8>
    2bf0:	70 2d       	mov	r23, r0
    2bf2:	8c 01       	movw	r16, r24
    2bf4:	9d 01       	movw	r18, r26
    2bf6:	0f 2e       	mov	r0, r31
    2bf8:	f5 e1       	ldi	r31, 0x15	; 21
    2bfa:	00 0f       	add	r16, r16
    2bfc:	11 1f       	adc	r17, r17
    2bfe:	22 1f       	adc	r18, r18
    2c00:	33 1f       	adc	r19, r19
    2c02:	fa 95       	dec	r31
    2c04:	d1 f7       	brne	.-12     	; 0x2bfa <sha2_small_common_nextBlock+0x30e>
    2c06:	f0 2d       	mov	r31, r0
    2c08:	80 2a       	or	r8, r16
    2c0a:	91 2a       	or	r9, r17
    2c0c:	a2 2a       	or	r10, r18
    2c0e:	b3 2a       	or	r11, r19
    2c10:	2c 01       	movw	r4, r24
    2c12:	3d 01       	movw	r6, r26
    2c14:	68 94       	set
    2c16:	15 f8       	bld	r1, 5
    2c18:	76 94       	lsr	r7
    2c1a:	67 94       	ror	r6
    2c1c:	57 94       	ror	r5
    2c1e:	47 94       	ror	r4
    2c20:	16 94       	lsr	r1
    2c22:	d1 f7       	brne	.-12     	; 0x2c18 <sha2_small_common_nextBlock+0x32c>
    2c24:	8c 01       	movw	r16, r24
    2c26:	9d 01       	movw	r18, r26
    2c28:	0f 2e       	mov	r0, r31
    2c2a:	fa e1       	ldi	r31, 0x1A	; 26
    2c2c:	00 0f       	add	r16, r16
    2c2e:	11 1f       	adc	r17, r17
    2c30:	22 1f       	adc	r18, r18
    2c32:	33 1f       	adc	r19, r19
    2c34:	fa 95       	dec	r31
    2c36:	d1 f7       	brne	.-12     	; 0x2c2c <sha2_small_common_nextBlock+0x340>
    2c38:	f0 2d       	mov	r31, r0
    2c3a:	04 29       	or	r16, r4
    2c3c:	15 29       	or	r17, r5
    2c3e:	26 29       	or	r18, r6
    2c40:	37 29       	or	r19, r7
    2c42:	08 25       	eor	r16, r8
    2c44:	19 25       	eor	r17, r9
    2c46:	2a 25       	eor	r18, r10
    2c48:	3b 25       	eor	r19, r11
    2c4a:	4c 01       	movw	r8, r24
    2c4c:	5d 01       	movw	r10, r26
    2c4e:	88 0c       	add	r8, r8
    2c50:	99 1c       	adc	r9, r9
    2c52:	aa 1c       	adc	r10, r10
    2c54:	bb 1c       	adc	r11, r11
    2c56:	88 0c       	add	r8, r8
    2c58:	99 1c       	adc	r9, r9
    2c5a:	aa 1c       	adc	r10, r10
    2c5c:	bb 1c       	adc	r11, r11
    2c5e:	88 0c       	add	r8, r8
    2c60:	99 1c       	adc	r9, r9
    2c62:	aa 1c       	adc	r10, r10
    2c64:	bb 1c       	adc	r11, r11
    2c66:	88 0c       	add	r8, r8
    2c68:	99 1c       	adc	r9, r9
    2c6a:	aa 1c       	adc	r10, r10
    2c6c:	bb 1c       	adc	r11, r11
    2c6e:	88 0c       	add	r8, r8
    2c70:	99 1c       	adc	r9, r9
    2c72:	aa 1c       	adc	r10, r10
    2c74:	bb 1c       	adc	r11, r11
    2c76:	88 0c       	add	r8, r8
    2c78:	99 1c       	adc	r9, r9
    2c7a:	aa 1c       	adc	r10, r10
    2c7c:	bb 1c       	adc	r11, r11
    2c7e:	88 0c       	add	r8, r8
    2c80:	99 1c       	adc	r9, r9
    2c82:	aa 1c       	adc	r10, r10
    2c84:	bb 1c       	adc	r11, r11
    2c86:	07 2e       	mov	r0, r23
    2c88:	79 e1       	ldi	r23, 0x19	; 25
    2c8a:	b6 95       	lsr	r27
    2c8c:	a7 95       	ror	r26
    2c8e:	97 95       	ror	r25
    2c90:	87 95       	ror	r24
    2c92:	7a 95       	dec	r23
    2c94:	d1 f7       	brne	.-12     	; 0x2c8a <sha2_small_common_nextBlock+0x39e>
    2c96:	70 2d       	mov	r23, r0
    2c98:	88 29       	or	r24, r8
    2c9a:	99 29       	or	r25, r9
    2c9c:	aa 29       	or	r26, r10
    2c9e:	bb 29       	or	r27, r11
    2ca0:	08 27       	eor	r16, r24
    2ca2:	19 27       	eor	r17, r25
    2ca4:	2a 27       	eor	r18, r26
    2ca6:	3b 27       	eor	r19, r27
    2ca8:	40 0f       	add	r20, r16
    2caa:	51 1f       	adc	r21, r17
    2cac:	62 1f       	adc	r22, r18
    2cae:	73 1f       	adc	r23, r19
    2cb0:	a1 96       	adiw	r28, 0x21	; 33
    2cb2:	0c ad       	ldd	r16, Y+60	; 0x3c
    2cb4:	1d ad       	ldd	r17, Y+61	; 0x3d
    2cb6:	2e ad       	ldd	r18, Y+62	; 0x3e
    2cb8:	3f ad       	ldd	r19, Y+63	; 0x3f
    2cba:	a1 97       	sbiw	r28, 0x21	; 33
    2cbc:	40 0f       	add	r20, r16
    2cbe:	51 1f       	adc	r21, r17
    2cc0:	62 1f       	adc	r22, r18
    2cc2:	73 1f       	adc	r23, r19
    2cc4:	c4 0e       	add	r12, r20
    2cc6:	d5 1e       	adc	r13, r21
    2cc8:	e6 1e       	adc	r14, r22
    2cca:	f7 1e       	adc	r15, r23
    2ccc:	a5 96       	adiw	r28, 0x25	; 37
    2cce:	8c ad       	ldd	r24, Y+60	; 0x3c
    2cd0:	9d ad       	ldd	r25, Y+61	; 0x3d
    2cd2:	ae ad       	ldd	r26, Y+62	; 0x3e
    2cd4:	bf ad       	ldd	r27, Y+63	; 0x3f
    2cd6:	a5 97       	sbiw	r28, 0x25	; 37
    2cd8:	8c 0d       	add	r24, r12
    2cda:	9d 1d       	adc	r25, r13
    2cdc:	ae 1d       	adc	r26, r14
    2cde:	bf 1d       	adc	r27, r15
    2ce0:	a5 96       	adiw	r28, 0x25	; 37
    2ce2:	8c af       	std	Y+60, r24	; 0x3c
    2ce4:	9d af       	std	Y+61, r25	; 0x3d
    2ce6:	ae af       	std	Y+62, r26	; 0x3e
    2ce8:	bf af       	std	Y+63, r27	; 0x3f
    2cea:	a5 97       	sbiw	r28, 0x25	; 37
		t2 = SIGMA_0(a[0]) + MAJ(a[0],a[1],a[2]);
    2cec:	25 96       	adiw	r28, 0x05	; 5
    2cee:	8c ac       	ldd	r8, Y+60	; 0x3c
    2cf0:	9d ac       	ldd	r9, Y+61	; 0x3d
    2cf2:	ae ac       	ldd	r10, Y+62	; 0x3e
    2cf4:	bf ac       	ldd	r11, Y+63	; 0x3f
    2cf6:	25 97       	sbiw	r28, 0x05	; 5
    2cf8:	29 96       	adiw	r28, 0x09	; 9
    2cfa:	4c ac       	ldd	r4, Y+60	; 0x3c
    2cfc:	5d ac       	ldd	r5, Y+61	; 0x3d
    2cfe:	6e ac       	ldd	r6, Y+62	; 0x3e
    2d00:	7f ac       	ldd	r7, Y+63	; 0x3f
    2d02:	29 97       	sbiw	r28, 0x09	; 9
    2d04:	2d 96       	adiw	r28, 0x0d	; 13
    2d06:	cc ac       	ldd	r12, Y+60	; 0x3c
    2d08:	dd ac       	ldd	r13, Y+61	; 0x3d
    2d0a:	ee ac       	ldd	r14, Y+62	; 0x3e
    2d0c:	ff ac       	ldd	r15, Y+63	; 0x3f
    2d0e:	2d 97       	sbiw	r28, 0x0d	; 13
		memmove(&(a[1]), &(a[0]), 7*4); 	/* a[7]=a[6]; a[6]=a[5]; a[5]=a[4]; a[4]=a[3]; a[3]=a[2]; a[2]=a[1]; a[1]=a[0]; */
    2d10:	4c e1       	ldi	r20, 0x1C	; 28
    2d12:	50 e0       	ldi	r21, 0x00	; 0
    2d14:	be 01       	movw	r22, r28
    2d16:	6f 5b       	subi	r22, 0xBF	; 191
    2d18:	7f 4f       	sbci	r23, 0xFF	; 255
    2d1a:	aa 96       	adiw	r28, 0x2a	; 42
    2d1c:	8e ad       	ldd	r24, Y+62	; 0x3e
    2d1e:	9f ad       	ldd	r25, Y+63	; 0x3f
    2d20:	aa 97       	sbiw	r28, 0x2a	; 42
    2d22:	9b d3       	rcall	.+1846   	; 0x345a <memmove>
		a[4] += t1;
    2d24:	65 96       	adiw	r28, 0x15	; 21
    2d26:	8c ad       	ldd	r24, Y+60	; 0x3c
    2d28:	9d ad       	ldd	r25, Y+61	; 0x3d
    2d2a:	ae ad       	ldd	r26, Y+62	; 0x3e
    2d2c:	bf ad       	ldd	r27, Y+63	; 0x3f
    2d2e:	65 97       	sbiw	r28, 0x15	; 21
    2d30:	a5 96       	adiw	r28, 0x25	; 37
    2d32:	2c ad       	ldd	r18, Y+60	; 0x3c
    2d34:	3d ad       	ldd	r19, Y+61	; 0x3d
    2d36:	4e ad       	ldd	r20, Y+62	; 0x3e
    2d38:	5f ad       	ldd	r21, Y+63	; 0x3f
    2d3a:	a5 97       	sbiw	r28, 0x25	; 37
    2d3c:	82 0f       	add	r24, r18
    2d3e:	93 1f       	adc	r25, r19
    2d40:	a4 1f       	adc	r26, r20
    2d42:	b5 1f       	adc	r27, r21
    2d44:	65 96       	adiw	r28, 0x15	; 21
    2d46:	8c af       	std	Y+60, r24	; 0x3c
    2d48:	9d af       	std	Y+61, r25	; 0x3d
    2d4a:	ae af       	std	Y+62, r26	; 0x3e
    2d4c:	bf af       	std	Y+63, r27	; 0x3f
    2d4e:	65 97       	sbiw	r28, 0x15	; 21
		a[0] = t1 + t2;
    2d50:	b5 01       	movw	r22, r10
    2d52:	a4 01       	movw	r20, r8
    2d54:	03 2e       	mov	r0, r19
    2d56:	3d e0       	ldi	r19, 0x0D	; 13
    2d58:	76 95       	lsr	r23
    2d5a:	67 95       	ror	r22
    2d5c:	57 95       	ror	r21
    2d5e:	47 95       	ror	r20
    2d60:	3a 95       	dec	r19
    2d62:	d1 f7       	brne	.-12     	; 0x2d58 <sha2_small_common_nextBlock+0x46c>
    2d64:	30 2d       	mov	r19, r0
    2d66:	d5 01       	movw	r26, r10
    2d68:	c4 01       	movw	r24, r8
    2d6a:	07 2e       	mov	r0, r23
    2d6c:	73 e1       	ldi	r23, 0x13	; 19
    2d6e:	88 0f       	add	r24, r24
    2d70:	99 1f       	adc	r25, r25
    2d72:	aa 1f       	adc	r26, r26
    2d74:	bb 1f       	adc	r27, r27
    2d76:	7a 95       	dec	r23
    2d78:	d1 f7       	brne	.-12     	; 0x2d6e <sha2_small_common_nextBlock+0x482>
    2d7a:	70 2d       	mov	r23, r0
    2d7c:	84 2b       	or	r24, r20
    2d7e:	95 2b       	or	r25, r21
    2d80:	a6 2b       	or	r26, r22
    2d82:	b7 2b       	or	r27, r23
    2d84:	b5 01       	movw	r22, r10
    2d86:	a4 01       	movw	r20, r8
    2d88:	76 95       	lsr	r23
    2d8a:	67 95       	ror	r22
    2d8c:	57 95       	ror	r21
    2d8e:	47 95       	ror	r20
    2d90:	76 95       	lsr	r23
    2d92:	67 95       	ror	r22
    2d94:	57 95       	ror	r21
    2d96:	47 95       	ror	r20
    2d98:	95 01       	movw	r18, r10
    2d9a:	84 01       	movw	r16, r8
    2d9c:	0f 2e       	mov	r0, r31
    2d9e:	fe e1       	ldi	r31, 0x1E	; 30
    2da0:	00 0f       	add	r16, r16
    2da2:	11 1f       	adc	r17, r17
    2da4:	22 1f       	adc	r18, r18
    2da6:	33 1f       	adc	r19, r19
    2da8:	fa 95       	dec	r31
    2daa:	d1 f7       	brne	.-12     	; 0x2da0 <sha2_small_common_nextBlock+0x4b4>
    2dac:	f0 2d       	mov	r31, r0
    2dae:	40 2b       	or	r20, r16
    2db0:	51 2b       	or	r21, r17
    2db2:	62 2b       	or	r22, r18
    2db4:	73 2b       	or	r23, r19
    2db6:	48 27       	eor	r20, r24
    2db8:	59 27       	eor	r21, r25
    2dba:	6a 27       	eor	r22, r26
    2dbc:	7b 27       	eor	r23, r27
    2dbe:	95 01       	movw	r18, r10
    2dc0:	84 01       	movw	r16, r8
    2dc2:	0f 2e       	mov	r0, r31
    2dc4:	fa e0       	ldi	r31, 0x0A	; 10
    2dc6:	00 0f       	add	r16, r16
    2dc8:	11 1f       	adc	r17, r17
    2dca:	22 1f       	adc	r18, r18
    2dcc:	33 1f       	adc	r19, r19
    2dce:	fa 95       	dec	r31
    2dd0:	d1 f7       	brne	.-12     	; 0x2dc6 <sha2_small_common_nextBlock+0x4da>
    2dd2:	f0 2d       	mov	r31, r0
    2dd4:	d5 01       	movw	r26, r10
    2dd6:	c4 01       	movw	r24, r8
    2dd8:	07 2e       	mov	r0, r23
    2dda:	76 e1       	ldi	r23, 0x16	; 22
    2ddc:	b6 95       	lsr	r27
    2dde:	a7 95       	ror	r26
    2de0:	97 95       	ror	r25
    2de2:	87 95       	ror	r24
    2de4:	7a 95       	dec	r23
    2de6:	d1 f7       	brne	.-12     	; 0x2ddc <sha2_small_common_nextBlock+0x4f0>
    2de8:	70 2d       	mov	r23, r0
    2dea:	80 2b       	or	r24, r16
    2dec:	91 2b       	or	r25, r17
    2dee:	a2 2b       	or	r26, r18
    2df0:	b3 2b       	or	r27, r19
    2df2:	48 27       	eor	r20, r24
    2df4:	59 27       	eor	r21, r25
    2df6:	6a 27       	eor	r22, r26
    2df8:	7b 27       	eor	r23, r27
    2dfa:	97 01       	movw	r18, r14
    2dfc:	86 01       	movw	r16, r12
    2dfe:	04 25       	eor	r16, r4
    2e00:	15 25       	eor	r17, r5
    2e02:	26 25       	eor	r18, r6
    2e04:	37 25       	eor	r19, r7
    2e06:	80 22       	and	r8, r16
    2e08:	91 22       	and	r9, r17
    2e0a:	a2 22       	and	r10, r18
    2e0c:	b3 22       	and	r11, r19
    2e0e:	c4 20       	and	r12, r4
    2e10:	d5 20       	and	r13, r5
    2e12:	e6 20       	and	r14, r6
    2e14:	f7 20       	and	r15, r7
    2e16:	95 01       	movw	r18, r10
    2e18:	84 01       	movw	r16, r8
    2e1a:	0c 25       	eor	r16, r12
    2e1c:	1d 25       	eor	r17, r13
    2e1e:	2e 25       	eor	r18, r14
    2e20:	3f 25       	eor	r19, r15
    2e22:	40 0f       	add	r20, r16
    2e24:	51 1f       	adc	r21, r17
    2e26:	62 1f       	adc	r22, r18
    2e28:	73 1f       	adc	r23, r19
    2e2a:	a5 96       	adiw	r28, 0x25	; 37
    2e2c:	8c ad       	ldd	r24, Y+60	; 0x3c
    2e2e:	9d ad       	ldd	r25, Y+61	; 0x3d
    2e30:	ae ad       	ldd	r26, Y+62	; 0x3e
    2e32:	bf ad       	ldd	r27, Y+63	; 0x3f
    2e34:	a5 97       	sbiw	r28, 0x25	; 37
    2e36:	48 0f       	add	r20, r24
    2e38:	59 1f       	adc	r21, r25
    2e3a:	6a 1f       	adc	r22, r26
    2e3c:	7b 1f       	adc	r23, r27
    2e3e:	25 96       	adiw	r28, 0x05	; 5
    2e40:	4c af       	std	Y+60, r20	; 0x3c
    2e42:	5d af       	std	Y+61, r21	; 0x3d
    2e44:	6e af       	std	Y+62, r22	; 0x3e
    2e46:	7f af       	std	Y+63, r23	; 0x3f
    2e48:	25 97       	sbiw	r28, 0x05	; 5
*/
/* init working variables */
	memcpy((void*)a,(void*)(state->h), 8*4);

/* do the, fun stuff, */
	for (i=0; i<64; ++i){
    2e4a:	a6 96       	adiw	r28, 0x26	; 38
    2e4c:	9f ad       	ldd	r25, Y+63	; 0x3f
    2e4e:	a6 97       	sbiw	r28, 0x26	; 38
    2e50:	9f 5f       	subi	r25, 0xFF	; 255
    2e52:	a6 96       	adiw	r28, 0x26	; 38
    2e54:	9f af       	std	Y+63, r25	; 0x3f
    2e56:	a6 97       	sbiw	r28, 0x26	; 38
    2e58:	a4 e0       	ldi	r26, 0x04	; 4
    2e5a:	2a 0e       	add	r2, r26
    2e5c:	31 1c       	adc	r3, r1
    2e5e:	a8 96       	adiw	r28, 0x28	; 40
    2e60:	ee ad       	ldd	r30, Y+62	; 0x3e
    2e62:	ff ad       	ldd	r31, Y+63	; 0x3f
    2e64:	a8 97       	sbiw	r28, 0x28	; 40
    2e66:	34 96       	adiw	r30, 0x04	; 4
    2e68:	a8 96       	adiw	r28, 0x28	; 40
    2e6a:	ff af       	std	Y+63, r31	; 0x3f
    2e6c:	ee af       	std	Y+62, r30	; 0x3e
    2e6e:	a8 97       	sbiw	r28, 0x28	; 40
    2e70:	90 34       	cpi	r25, 0x40	; 64
    2e72:	09 f0       	breq	.+2      	; 0x2e76 <sha2_small_common_nextBlock+0x58a>
    2e74:	ba cd       	rjmp	.-1164   	; 0x29ea <sha2_small_common_nextBlock+0xfe>
    2e76:	fe 01       	movw	r30, r28
    2e78:	ef 5b       	subi	r30, 0xBF	; 191
    2e7a:	ff 4f       	sbci	r31, 0xFF	; 255
    2e7c:	ac 96       	adiw	r28, 0x2c	; 44
    2e7e:	2e ad       	ldd	r18, Y+62	; 0x3e
    2e80:	3f ad       	ldd	r19, Y+63	; 0x3f
    2e82:	ac 97       	sbiw	r28, 0x2c	; 44
    2e84:	af 01       	movw	r20, r30
    2e86:	40 5e       	subi	r20, 0xE0	; 224
    2e88:	5f 4f       	sbci	r21, 0xFF	; 255
    2e8a:	bf 01       	movw	r22, r30
		a[0] = t1 + t2;
	}

/* update, the, state, */
	for (i=0; i<8; ++i){
		state->h[i] += a[i];
    2e8c:	fb 01       	movw	r30, r22
    2e8e:	81 91       	ld	r24, Z+
    2e90:	91 91       	ld	r25, Z+
    2e92:	a1 91       	ld	r26, Z+
    2e94:	b1 91       	ld	r27, Z+
    2e96:	bf 01       	movw	r22, r30
    2e98:	f9 01       	movw	r30, r18
    2e9a:	c0 80       	ld	r12, Z
    2e9c:	d1 80       	ldd	r13, Z+1	; 0x01
    2e9e:	e2 80       	ldd	r14, Z+2	; 0x02
    2ea0:	f3 80       	ldd	r15, Z+3	; 0x03
    2ea2:	8c 0d       	add	r24, r12
    2ea4:	9d 1d       	adc	r25, r13
    2ea6:	ae 1d       	adc	r26, r14
    2ea8:	bf 1d       	adc	r27, r15
    2eaa:	81 93       	st	Z+, r24
    2eac:	91 93       	st	Z+, r25
    2eae:	a1 93       	st	Z+, r26
    2eb0:	b1 93       	st	Z+, r27
    2eb2:	9f 01       	movw	r18, r30
		a[4] += t1;
		a[0] = t1 + t2;
	}

/* update, the, state, */
	for (i=0; i<8; ++i){
    2eb4:	64 17       	cp	r22, r20
    2eb6:	75 07       	cpc	r23, r21
    2eb8:	49 f7       	brne	.-46     	; 0x2e8c <sha2_small_common_nextBlock+0x5a0>
		state->h[i] += a[i];
	}
	state->length += 1;
    2eba:	ac 96       	adiw	r28, 0x2c	; 44
    2ebc:	ee ad       	ldd	r30, Y+62	; 0x3e
    2ebe:	ff ad       	ldd	r31, Y+63	; 0x3f
    2ec0:	ac 97       	sbiw	r28, 0x2c	; 44
    2ec2:	80 a1       	ldd	r24, Z+32	; 0x20
    2ec4:	91 a1       	ldd	r25, Z+33	; 0x21
    2ec6:	a2 a1       	ldd	r26, Z+34	; 0x22
    2ec8:	b3 a1       	ldd	r27, Z+35	; 0x23
    2eca:	01 96       	adiw	r24, 0x01	; 1
    2ecc:	a1 1d       	adc	r26, r1
    2ece:	b1 1d       	adc	r27, r1
    2ed0:	80 a3       	std	Z+32, r24	; 0x20
    2ed2:	91 a3       	std	Z+33, r25	; 0x21
    2ed4:	a2 a3       	std	Z+34, r26	; 0x22
    2ed6:	b3 a3       	std	Z+35, r27	; 0x23
}
    2ed8:	c5 59       	subi	r28, 0x95	; 149
    2eda:	df 4f       	sbci	r29, 0xFF	; 255
    2edc:	0f b6       	in	r0, 0x3f	; 63
    2ede:	f8 94       	cli
    2ee0:	de bf       	out	0x3e, r29	; 62
    2ee2:	0f be       	out	0x3f, r0	; 63
    2ee4:	cd bf       	out	0x3d, r28	; 61
    2ee6:	df 91       	pop	r29
    2ee8:	cf 91       	pop	r28
    2eea:	1f 91       	pop	r17
    2eec:	0f 91       	pop	r16
    2eee:	ff 90       	pop	r15
    2ef0:	ef 90       	pop	r14
    2ef2:	df 90       	pop	r13
    2ef4:	cf 90       	pop	r12
    2ef6:	bf 90       	pop	r11
    2ef8:	af 90       	pop	r10
    2efa:	9f 90       	pop	r9
    2efc:	8f 90       	pop	r8
    2efe:	7f 90       	pop	r7
    2f00:	6f 90       	pop	r6
    2f02:	5f 90       	pop	r5
    2f04:	4f 90       	pop	r4
    2f06:	3f 90       	pop	r3
    2f08:	2f 90       	pop	r2
    2f0a:	08 95       	ret

00002f0c <sha2_small_common_lastBlock>:


void sha2_small_common_lastBlock(sha2_small_common_ctx_t *state, const void *block, uint16_t length_b){
    2f0c:	8f 92       	push	r8
    2f0e:	9f 92       	push	r9
    2f10:	af 92       	push	r10
    2f12:	bf 92       	push	r11
    2f14:	cf 92       	push	r12
    2f16:	df 92       	push	r13
    2f18:	ef 92       	push	r14
    2f1a:	ff 92       	push	r15
    2f1c:	0f 93       	push	r16
    2f1e:	1f 93       	push	r17
    2f20:	cf 93       	push	r28
    2f22:	df 93       	push	r29
    2f24:	cd b7       	in	r28, 0x3d	; 61
    2f26:	de b7       	in	r29, 0x3e	; 62
    2f28:	c8 54       	subi	r28, 0x48	; 72
    2f2a:	d1 09       	sbc	r29, r1
    2f2c:	0f b6       	in	r0, 0x3f	; 63
    2f2e:	f8 94       	cli
    2f30:	de bf       	out	0x3e, r29	; 62
    2f32:	0f be       	out	0x3f, r0	; 63
    2f34:	cd bf       	out	0x3d, r28	; 61
    2f36:	8c 01       	movw	r16, r24
    2f38:	4b 01       	movw	r8, r22
    2f3a:	5a 01       	movw	r10, r20
	uint8_t lb[512/8]; /* local block */
	uint64_t len;
	while(length_b>=512){
    2f3c:	41 15       	cp	r20, r1
    2f3e:	62 e0       	ldi	r22, 0x02	; 2
    2f40:	56 07       	cpc	r21, r22
    2f42:	28 f1       	brcs	.+74     	; 0x2f8e <sha2_small_common_lastBlock+0x82>
    2f44:	6a 01       	movw	r12, r20
    2f46:	74 01       	movw	r14, r8
		sha2_small_common_nextBlock(state, block);
    2f48:	b7 01       	movw	r22, r14
    2f4a:	c8 01       	movw	r24, r16
    2f4c:	cf dc       	rcall	.-1634   	; 0x28ec <sha2_small_common_nextBlock>
		length_b -= 512;
    2f4e:	72 e0       	ldi	r23, 0x02	; 2
    2f50:	d7 1a       	sub	r13, r23
		block = (uint8_t*)block+64;
    2f52:	80 e4       	ldi	r24, 0x40	; 64
    2f54:	e8 0e       	add	r14, r24
    2f56:	f1 1c       	adc	r15, r1


void sha2_small_common_lastBlock(sha2_small_common_ctx_t *state, const void *block, uint16_t length_b){
	uint8_t lb[512/8]; /* local block */
	uint64_t len;
	while(length_b>=512){
    2f58:	c1 14       	cp	r12, r1
    2f5a:	92 e0       	ldi	r25, 0x02	; 2
    2f5c:	d9 06       	cpc	r13, r25
    2f5e:	a0 f7       	brcc	.-24     	; 0x2f48 <sha2_small_common_lastBlock+0x3c>
    2f60:	75 01       	movw	r14, r10
    2f62:	e1 e0       	ldi	r30, 0x01	; 1
    2f64:	fe 22       	and	r15, r30
    2f66:	f2 e0       	ldi	r31, 0x02	; 2
    2f68:	bf 1a       	sub	r11, r31
    2f6a:	ab 2c       	mov	r10, r11
    2f6c:	bb 24       	eor	r11, r11
    2f6e:	a6 94       	lsr	r10
    2f70:	6f ef       	ldi	r22, 0xFF	; 255
    2f72:	a6 1a       	sub	r10, r22
    2f74:	b6 0a       	sbc	r11, r22
    2f76:	00 24       	eor	r0, r0
    2f78:	b6 94       	lsr	r11
    2f7a:	a7 94       	ror	r10
    2f7c:	07 94       	ror	r0
    2f7e:	b6 94       	lsr	r11
    2f80:	a7 94       	ror	r10
    2f82:	07 94       	ror	r0
    2f84:	ba 2c       	mov	r11, r10
    2f86:	a0 2c       	mov	r10, r0
    2f88:	8a 0c       	add	r8, r10
    2f8a:	9b 1c       	adc	r9, r11
    2f8c:	01 c0       	rjmp	.+2      	; 0x2f90 <sha2_small_common_lastBlock+0x84>
    2f8e:	7a 01       	movw	r14, r20
		sha2_small_common_nextBlock(state, block);
		length_b -= 512;
		block = (uint8_t*)block+64;
	}
	len = state->length*512 + length_b;
    2f90:	f8 01       	movw	r30, r16
    2f92:	80 a1       	ldd	r24, Z+32	; 0x20
    2f94:	91 a1       	ldd	r25, Z+33	; 0x21
    2f96:	a2 a1       	ldd	r26, Z+34	; 0x22
    2f98:	b3 a1       	ldd	r27, Z+35	; 0x23
    2f9a:	07 2e       	mov	r0, r23
    2f9c:	79 e0       	ldi	r23, 0x09	; 9
    2f9e:	88 0f       	add	r24, r24
    2fa0:	99 1f       	adc	r25, r25
    2fa2:	aa 1f       	adc	r26, r26
    2fa4:	bb 1f       	adc	r27, r27
    2fa6:	7a 95       	dec	r23
    2fa8:	d1 f7       	brne	.-12     	; 0x2f9e <sha2_small_common_lastBlock+0x92>
    2faa:	70 2d       	mov	r23, r0
    2fac:	8e 0d       	add	r24, r14
    2fae:	9f 1d       	adc	r25, r15
    2fb0:	a1 1d       	adc	r26, r1
    2fb2:	b1 1d       	adc	r27, r1
    2fb4:	9c 01       	movw	r18, r24
    2fb6:	ad 01       	movw	r20, r26
    2fb8:	22 96       	adiw	r28, 0x02	; 2
    2fba:	2f af       	std	Y+63, r18	; 0x3f
    2fbc:	22 97       	sbiw	r28, 0x02	; 2
    2fbe:	23 96       	adiw	r28, 0x03	; 3
    2fc0:	3f af       	std	Y+63, r19	; 0x3f
    2fc2:	23 97       	sbiw	r28, 0x03	; 3
    2fc4:	24 96       	adiw	r28, 0x04	; 4
    2fc6:	4f af       	std	Y+63, r20	; 0x3f
    2fc8:	24 97       	sbiw	r28, 0x04	; 4
    2fca:	25 96       	adiw	r28, 0x05	; 5
    2fcc:	5f af       	std	Y+63, r21	; 0x3f
    2fce:	25 97       	sbiw	r28, 0x05	; 5
    2fd0:	26 96       	adiw	r28, 0x06	; 6
    2fd2:	1f ae       	std	Y+63, r1	; 0x3f
    2fd4:	26 97       	sbiw	r28, 0x06	; 6
    2fd6:	27 96       	adiw	r28, 0x07	; 7
    2fd8:	1f ae       	std	Y+63, r1	; 0x3f
    2fda:	27 97       	sbiw	r28, 0x07	; 7
    2fdc:	28 96       	adiw	r28, 0x08	; 8
    2fde:	1f ae       	std	Y+63, r1	; 0x3f
    2fe0:	28 97       	sbiw	r28, 0x08	; 8
    2fe2:	29 96       	adiw	r28, 0x09	; 9
    2fe4:	1f ae       	std	Y+63, r1	; 0x3f
    2fe6:	29 97       	sbiw	r28, 0x09	; 9
	memset(lb, 0, 64);
    2fe8:	be 01       	movw	r22, r28
    2fea:	6f 5f       	subi	r22, 0xFF	; 255
    2fec:	7f 4f       	sbci	r23, 0xFF	; 255
    2fee:	6b 01       	movw	r12, r22
    2ff0:	80 e4       	ldi	r24, 0x40	; 64
    2ff2:	fb 01       	movw	r30, r22
    2ff4:	11 92       	st	Z+, r1
    2ff6:	8a 95       	dec	r24
    2ff8:	e9 f7       	brne	.-6      	; 0x2ff4 <sha2_small_common_lastBlock+0xe8>
	memcpy(lb, block, (length_b+7)/8);
    2ffa:	a7 01       	movw	r20, r14
    2ffc:	49 5f       	subi	r20, 0xF9	; 249
    2ffe:	5f 4f       	sbci	r21, 0xFF	; 255
    3000:	56 95       	lsr	r21
    3002:	47 95       	ror	r20
    3004:	56 95       	lsr	r21
    3006:	47 95       	ror	r20
    3008:	56 95       	lsr	r21
    300a:	47 95       	ror	r20
    300c:	b4 01       	movw	r22, r8
    300e:	c6 01       	movw	r24, r12
    3010:	1b d2       	rcall	.+1078   	; 0x3448 <memcpy>

	/* set the final one bit */
	lb[length_b/8] |= 0x80>>(length_b & 0x7);
    3012:	f7 01       	movw	r30, r14
    3014:	f6 95       	lsr	r31
    3016:	e7 95       	ror	r30
    3018:	f6 95       	lsr	r31
    301a:	e7 95       	ror	r30
    301c:	f6 95       	lsr	r31
    301e:	e7 95       	ror	r30
    3020:	ec 0d       	add	r30, r12
    3022:	fd 1d       	adc	r31, r13
    3024:	c7 01       	movw	r24, r14
    3026:	87 70       	andi	r24, 0x07	; 7
    3028:	99 27       	eor	r25, r25
    302a:	20 e8       	ldi	r18, 0x80	; 128
    302c:	30 e0       	ldi	r19, 0x00	; 0
    302e:	02 c0       	rjmp	.+4      	; 0x3034 <sha2_small_common_lastBlock+0x128>
    3030:	35 95       	asr	r19
    3032:	27 95       	ror	r18
    3034:	8a 95       	dec	r24
    3036:	e2 f7       	brpl	.-8      	; 0x3030 <sha2_small_common_lastBlock+0x124>
    3038:	80 81       	ld	r24, Z
    303a:	28 2b       	or	r18, r24
    303c:	20 83       	st	Z, r18
	/* pad with zeros */
	if (length_b>=512-64){ /* not enouth space for 64bit length value */
    303e:	f0 ec       	ldi	r31, 0xC0	; 192
    3040:	ef 16       	cp	r14, r31
    3042:	f1 e0       	ldi	r31, 0x01	; 1
    3044:	ff 06       	cpc	r15, r31
    3046:	40 f0       	brcs	.+16     	; 0x3058 <sha2_small_common_lastBlock+0x14c>
		sha2_small_common_nextBlock(state, lb);
    3048:	b6 01       	movw	r22, r12
    304a:	c8 01       	movw	r24, r16
    304c:	4f dc       	rcall	.-1890   	; 0x28ec <sha2_small_common_nextBlock>
		memset(lb, 0, 64);
    304e:	80 e4       	ldi	r24, 0x40	; 64
    3050:	f6 01       	movw	r30, r12
    3052:	11 92       	st	Z+, r1
    3054:	8a 95       	dec	r24
    3056:	e9 f7       	brne	.-6      	; 0x3052 <sha2_small_common_lastBlock+0x146>


void sha2_small_common_lastBlock(sha2_small_common_ctx_t *state, const void *block, uint16_t length_b){
	uint8_t lb[512/8]; /* local block */
	uint64_t len;
	while(length_b>=512){
    3058:	27 e0       	ldi	r18, 0x07	; 7
#if defined LITTLE_ENDIAN
	 	/* this is now rolled up */
	uint8_t i;
	i=7;
	do{
		lb[63-i] = ((uint8_t*)&len)[i];
    305a:	4f e3       	ldi	r20, 0x3F	; 63
    305c:	50 e0       	ldi	r21, 0x00	; 0
    305e:	82 2f       	mov	r24, r18
    3060:	90 e0       	ldi	r25, 0x00	; 0
    3062:	fa 01       	movw	r30, r20
    3064:	e8 1b       	sub	r30, r24
    3066:	f9 0b       	sbc	r31, r25
    3068:	61 e0       	ldi	r22, 0x01	; 1
    306a:	70 e0       	ldi	r23, 0x00	; 0
    306c:	6c 0f       	add	r22, r28
    306e:	7d 1f       	adc	r23, r29
    3070:	e6 0f       	add	r30, r22
    3072:	f7 1f       	adc	r31, r23
    3074:	a1 e4       	ldi	r26, 0x41	; 65
    3076:	b0 e0       	ldi	r27, 0x00	; 0
    3078:	ac 0f       	add	r26, r28
    307a:	bd 1f       	adc	r27, r29
    307c:	a8 0f       	add	r26, r24
    307e:	b9 1f       	adc	r27, r25
    3080:	8c 91       	ld	r24, X
    3082:	80 83       	st	Z, r24
	}while(i--);
    3084:	21 50       	subi	r18, 0x01	; 1
    3086:	58 f7       	brcc	.-42     	; 0x305e <sha2_small_common_lastBlock+0x152>
#elif defined BIG_ENDIAN
	*((uint64_t)&(lb[56])) = len;
#endif
	sha2_small_common_nextBlock(state, lb);
    3088:	be 01       	movw	r22, r28
    308a:	6f 5f       	subi	r22, 0xFF	; 255
    308c:	7f 4f       	sbci	r23, 0xFF	; 255
    308e:	c8 01       	movw	r24, r16
    3090:	2d dc       	rcall	.-1958   	; 0x28ec <sha2_small_common_nextBlock>
}
    3092:	c8 5b       	subi	r28, 0xB8	; 184
    3094:	df 4f       	sbci	r29, 0xFF	; 255
    3096:	0f b6       	in	r0, 0x3f	; 63
    3098:	f8 94       	cli
    309a:	de bf       	out	0x3e, r29	; 62
    309c:	0f be       	out	0x3f, r0	; 63
    309e:	cd bf       	out	0x3d, r28	; 61
    30a0:	df 91       	pop	r29
    30a2:	cf 91       	pop	r28
    30a4:	1f 91       	pop	r17
    30a6:	0f 91       	pop	r16
    30a8:	ff 90       	pop	r15
    30aa:	ef 90       	pop	r14
    30ac:	df 90       	pop	r13
    30ae:	cf 90       	pop	r12
    30b0:	bf 90       	pop	r11
    30b2:	af 90       	pop	r10
    30b4:	9f 90       	pop	r9
    30b6:	8f 90       	pop	r8
    30b8:	08 95       	ret

000030ba <uart_init>:
#include <avr/io.h>
#include <string.h>
#include "uart_f.h"

void uart_init(){
	UBRR0H = (BAUD_PRESCALE >> 8); // Load upper 8-bits of the baud rate value into the high byte of the UBRR register
    30ba:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
	UBRR0L = BAUD_PRESCALE; // Load lower 8-bits of the baud rate value into the low byte of the UBRR register
    30be:	83 e3       	ldi	r24, 0x33	; 51
    30c0:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
	UCSR0C = (0<<UMSEL0) | (0<<UPM0) | (1<<USBS0) | (3<<UCSZ0);
    30c4:	8e e0       	ldi	r24, 0x0E	; 14
    30c6:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>
	UCSR0B = (1<<RXEN0) | (1<<TXEN0);
    30ca:	88 e1       	ldi	r24, 0x18	; 24
    30cc:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
    30d0:	08 95       	ret

000030d2 <uart_puts>:
}

void uart_puts(char* s){
    30d2:	cf 93       	push	r28
    30d4:	df 93       	push	r29
	int i;
	int len = strlen(s);
    30d6:	fc 01       	movw	r30, r24
    30d8:	01 90       	ld	r0, Z+
    30da:	00 20       	and	r0, r0
    30dc:	e9 f7       	brne	.-6      	; 0x30d8 <uart_puts+0x6>
    30de:	31 97       	sbiw	r30, 0x01	; 1
    30e0:	e8 1b       	sub	r30, r24
    30e2:	f9 0b       	sbc	r31, r25
	for (i = 0; i < len; i++){
    30e4:	1e 16       	cp	r1, r30
    30e6:	1f 06       	cpc	r1, r31
    30e8:	84 f4       	brge	.+32     	; 0x310a <uart_puts+0x38>
    30ea:	dc 01       	movw	r26, r24
    30ec:	9c 01       	movw	r18, r24
    30ee:	2e 0f       	add	r18, r30
    30f0:	3f 1f       	adc	r19, r31
		while(!( UCSR0A & 0X20));
    30f2:	e0 ec       	ldi	r30, 0xC0	; 192
    30f4:	f0 e0       	ldi	r31, 0x00	; 0
		UDR0=s[i];
    30f6:	c6 ec       	ldi	r28, 0xC6	; 198
    30f8:	d0 e0       	ldi	r29, 0x00	; 0

void uart_puts(char* s){
	int i;
	int len = strlen(s);
	for (i = 0; i < len; i++){
		while(!( UCSR0A & 0X20));
    30fa:	90 81       	ld	r25, Z
    30fc:	95 ff       	sbrs	r25, 5
    30fe:	fd cf       	rjmp	.-6      	; 0x30fa <uart_puts+0x28>
		UDR0=s[i];
    3100:	9d 91       	ld	r25, X+
    3102:	98 83       	st	Y, r25
}

void uart_puts(char* s){
	int i;
	int len = strlen(s);
	for (i = 0; i < len; i++){
    3104:	a2 17       	cp	r26, r18
    3106:	b3 07       	cpc	r27, r19
    3108:	c1 f7       	brne	.-16     	; 0x30fa <uart_puts+0x28>
		while(!( UCSR0A & 0X20));
		UDR0=s[i];
	}
	while(!( UCSR0A & 0X20));
    310a:	e0 ec       	ldi	r30, 0xC0	; 192
    310c:	f0 e0       	ldi	r31, 0x00	; 0
    310e:	80 81       	ld	r24, Z
    3110:	85 ff       	sbrs	r24, 5
    3112:	fd cf       	rjmp	.-6      	; 0x310e <uart_puts+0x3c>
	UDR0 = 13;
    3114:	8d e0       	ldi	r24, 0x0D	; 13
    3116:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
	while(!( UCSR0A & 0X20));
    311a:	e0 ec       	ldi	r30, 0xC0	; 192
    311c:	f0 e0       	ldi	r31, 0x00	; 0
    311e:	80 81       	ld	r24, Z
    3120:	85 ff       	sbrs	r24, 5
    3122:	fd cf       	rjmp	.-6      	; 0x311e <uart_puts+0x4c>
	UDR0 = 10;
    3124:	8a e0       	ldi	r24, 0x0A	; 10
    3126:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
}
    312a:	df 91       	pop	r29
    312c:	cf 91       	pop	r28
    312e:	08 95       	ret

00003130 <malloc>:
    3130:	0f 93       	push	r16
    3132:	1f 93       	push	r17
    3134:	cf 93       	push	r28
    3136:	df 93       	push	r29
    3138:	82 30       	cpi	r24, 0x02	; 2
    313a:	91 05       	cpc	r25, r1
    313c:	10 f4       	brcc	.+4      	; 0x3142 <malloc+0x12>
    313e:	82 e0       	ldi	r24, 0x02	; 2
    3140:	90 e0       	ldi	r25, 0x00	; 0
    3142:	e0 91 b4 02 	lds	r30, 0x02B4	; 0x8002b4 <__flp>
    3146:	f0 91 b5 02 	lds	r31, 0x02B5	; 0x8002b5 <__flp+0x1>
    314a:	20 e0       	ldi	r18, 0x00	; 0
    314c:	30 e0       	ldi	r19, 0x00	; 0
    314e:	a0 e0       	ldi	r26, 0x00	; 0
    3150:	b0 e0       	ldi	r27, 0x00	; 0
    3152:	30 97       	sbiw	r30, 0x00	; 0
    3154:	19 f1       	breq	.+70     	; 0x319c <malloc+0x6c>
    3156:	40 81       	ld	r20, Z
    3158:	51 81       	ldd	r21, Z+1	; 0x01
    315a:	02 81       	ldd	r16, Z+2	; 0x02
    315c:	13 81       	ldd	r17, Z+3	; 0x03
    315e:	48 17       	cp	r20, r24
    3160:	59 07       	cpc	r21, r25
    3162:	c8 f0       	brcs	.+50     	; 0x3196 <malloc+0x66>
    3164:	84 17       	cp	r24, r20
    3166:	95 07       	cpc	r25, r21
    3168:	69 f4       	brne	.+26     	; 0x3184 <malloc+0x54>
    316a:	10 97       	sbiw	r26, 0x00	; 0
    316c:	31 f0       	breq	.+12     	; 0x317a <malloc+0x4a>
    316e:	12 96       	adiw	r26, 0x02	; 2
    3170:	0c 93       	st	X, r16
    3172:	12 97       	sbiw	r26, 0x02	; 2
    3174:	13 96       	adiw	r26, 0x03	; 3
    3176:	1c 93       	st	X, r17
    3178:	27 c0       	rjmp	.+78     	; 0x31c8 <malloc+0x98>
    317a:	00 93 b4 02 	sts	0x02B4, r16	; 0x8002b4 <__flp>
    317e:	10 93 b5 02 	sts	0x02B5, r17	; 0x8002b5 <__flp+0x1>
    3182:	22 c0       	rjmp	.+68     	; 0x31c8 <malloc+0x98>
    3184:	21 15       	cp	r18, r1
    3186:	31 05       	cpc	r19, r1
    3188:	19 f0       	breq	.+6      	; 0x3190 <malloc+0x60>
    318a:	42 17       	cp	r20, r18
    318c:	53 07       	cpc	r21, r19
    318e:	18 f4       	brcc	.+6      	; 0x3196 <malloc+0x66>
    3190:	9a 01       	movw	r18, r20
    3192:	bd 01       	movw	r22, r26
    3194:	ef 01       	movw	r28, r30
    3196:	df 01       	movw	r26, r30
    3198:	f8 01       	movw	r30, r16
    319a:	db cf       	rjmp	.-74     	; 0x3152 <malloc+0x22>
    319c:	21 15       	cp	r18, r1
    319e:	31 05       	cpc	r19, r1
    31a0:	f9 f0       	breq	.+62     	; 0x31e0 <malloc+0xb0>
    31a2:	28 1b       	sub	r18, r24
    31a4:	39 0b       	sbc	r19, r25
    31a6:	24 30       	cpi	r18, 0x04	; 4
    31a8:	31 05       	cpc	r19, r1
    31aa:	80 f4       	brcc	.+32     	; 0x31cc <malloc+0x9c>
    31ac:	8a 81       	ldd	r24, Y+2	; 0x02
    31ae:	9b 81       	ldd	r25, Y+3	; 0x03
    31b0:	61 15       	cp	r22, r1
    31b2:	71 05       	cpc	r23, r1
    31b4:	21 f0       	breq	.+8      	; 0x31be <malloc+0x8e>
    31b6:	fb 01       	movw	r30, r22
    31b8:	93 83       	std	Z+3, r25	; 0x03
    31ba:	82 83       	std	Z+2, r24	; 0x02
    31bc:	04 c0       	rjmp	.+8      	; 0x31c6 <malloc+0x96>
    31be:	90 93 b5 02 	sts	0x02B5, r25	; 0x8002b5 <__flp+0x1>
    31c2:	80 93 b4 02 	sts	0x02B4, r24	; 0x8002b4 <__flp>
    31c6:	fe 01       	movw	r30, r28
    31c8:	32 96       	adiw	r30, 0x02	; 2
    31ca:	44 c0       	rjmp	.+136    	; 0x3254 <malloc+0x124>
    31cc:	fe 01       	movw	r30, r28
    31ce:	e2 0f       	add	r30, r18
    31d0:	f3 1f       	adc	r31, r19
    31d2:	81 93       	st	Z+, r24
    31d4:	91 93       	st	Z+, r25
    31d6:	22 50       	subi	r18, 0x02	; 2
    31d8:	31 09       	sbc	r19, r1
    31da:	39 83       	std	Y+1, r19	; 0x01
    31dc:	28 83       	st	Y, r18
    31de:	3a c0       	rjmp	.+116    	; 0x3254 <malloc+0x124>
    31e0:	20 91 b2 02 	lds	r18, 0x02B2	; 0x8002b2 <__brkval>
    31e4:	30 91 b3 02 	lds	r19, 0x02B3	; 0x8002b3 <__brkval+0x1>
    31e8:	23 2b       	or	r18, r19
    31ea:	41 f4       	brne	.+16     	; 0x31fc <malloc+0xcc>
    31ec:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__malloc_heap_start>
    31f0:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <__malloc_heap_start+0x1>
    31f4:	30 93 b3 02 	sts	0x02B3, r19	; 0x8002b3 <__brkval+0x1>
    31f8:	20 93 b2 02 	sts	0x02B2, r18	; 0x8002b2 <__brkval>
    31fc:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__data_start>
    3200:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__data_start+0x1>
    3204:	21 15       	cp	r18, r1
    3206:	31 05       	cpc	r19, r1
    3208:	41 f4       	brne	.+16     	; 0x321a <malloc+0xea>
    320a:	2d b7       	in	r18, 0x3d	; 61
    320c:	3e b7       	in	r19, 0x3e	; 62
    320e:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
    3212:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
    3216:	24 1b       	sub	r18, r20
    3218:	35 0b       	sbc	r19, r21
    321a:	e0 91 b2 02 	lds	r30, 0x02B2	; 0x8002b2 <__brkval>
    321e:	f0 91 b3 02 	lds	r31, 0x02B3	; 0x8002b3 <__brkval+0x1>
    3222:	e2 17       	cp	r30, r18
    3224:	f3 07       	cpc	r31, r19
    3226:	a0 f4       	brcc	.+40     	; 0x3250 <malloc+0x120>
    3228:	2e 1b       	sub	r18, r30
    322a:	3f 0b       	sbc	r19, r31
    322c:	28 17       	cp	r18, r24
    322e:	39 07       	cpc	r19, r25
    3230:	78 f0       	brcs	.+30     	; 0x3250 <malloc+0x120>
    3232:	ac 01       	movw	r20, r24
    3234:	4e 5f       	subi	r20, 0xFE	; 254
    3236:	5f 4f       	sbci	r21, 0xFF	; 255
    3238:	24 17       	cp	r18, r20
    323a:	35 07       	cpc	r19, r21
    323c:	48 f0       	brcs	.+18     	; 0x3250 <malloc+0x120>
    323e:	4e 0f       	add	r20, r30
    3240:	5f 1f       	adc	r21, r31
    3242:	50 93 b3 02 	sts	0x02B3, r21	; 0x8002b3 <__brkval+0x1>
    3246:	40 93 b2 02 	sts	0x02B2, r20	; 0x8002b2 <__brkval>
    324a:	81 93       	st	Z+, r24
    324c:	91 93       	st	Z+, r25
    324e:	02 c0       	rjmp	.+4      	; 0x3254 <malloc+0x124>
    3250:	e0 e0       	ldi	r30, 0x00	; 0
    3252:	f0 e0       	ldi	r31, 0x00	; 0
    3254:	cf 01       	movw	r24, r30
    3256:	df 91       	pop	r29
    3258:	cf 91       	pop	r28
    325a:	1f 91       	pop	r17
    325c:	0f 91       	pop	r16
    325e:	08 95       	ret

00003260 <free>:
    3260:	cf 93       	push	r28
    3262:	df 93       	push	r29
    3264:	00 97       	sbiw	r24, 0x00	; 0
    3266:	09 f4       	brne	.+2      	; 0x326a <free+0xa>
    3268:	81 c0       	rjmp	.+258    	; 0x336c <free+0x10c>
    326a:	fc 01       	movw	r30, r24
    326c:	32 97       	sbiw	r30, 0x02	; 2
    326e:	13 82       	std	Z+3, r1	; 0x03
    3270:	12 82       	std	Z+2, r1	; 0x02
    3272:	a0 91 b4 02 	lds	r26, 0x02B4	; 0x8002b4 <__flp>
    3276:	b0 91 b5 02 	lds	r27, 0x02B5	; 0x8002b5 <__flp+0x1>
    327a:	10 97       	sbiw	r26, 0x00	; 0
    327c:	81 f4       	brne	.+32     	; 0x329e <free+0x3e>
    327e:	20 81       	ld	r18, Z
    3280:	31 81       	ldd	r19, Z+1	; 0x01
    3282:	82 0f       	add	r24, r18
    3284:	93 1f       	adc	r25, r19
    3286:	20 91 b2 02 	lds	r18, 0x02B2	; 0x8002b2 <__brkval>
    328a:	30 91 b3 02 	lds	r19, 0x02B3	; 0x8002b3 <__brkval+0x1>
    328e:	28 17       	cp	r18, r24
    3290:	39 07       	cpc	r19, r25
    3292:	51 f5       	brne	.+84     	; 0x32e8 <free+0x88>
    3294:	f0 93 b3 02 	sts	0x02B3, r31	; 0x8002b3 <__brkval+0x1>
    3298:	e0 93 b2 02 	sts	0x02B2, r30	; 0x8002b2 <__brkval>
    329c:	67 c0       	rjmp	.+206    	; 0x336c <free+0x10c>
    329e:	ed 01       	movw	r28, r26
    32a0:	20 e0       	ldi	r18, 0x00	; 0
    32a2:	30 e0       	ldi	r19, 0x00	; 0
    32a4:	ce 17       	cp	r28, r30
    32a6:	df 07       	cpc	r29, r31
    32a8:	40 f4       	brcc	.+16     	; 0x32ba <free+0x5a>
    32aa:	4a 81       	ldd	r20, Y+2	; 0x02
    32ac:	5b 81       	ldd	r21, Y+3	; 0x03
    32ae:	9e 01       	movw	r18, r28
    32b0:	41 15       	cp	r20, r1
    32b2:	51 05       	cpc	r21, r1
    32b4:	f1 f0       	breq	.+60     	; 0x32f2 <free+0x92>
    32b6:	ea 01       	movw	r28, r20
    32b8:	f5 cf       	rjmp	.-22     	; 0x32a4 <free+0x44>
    32ba:	d3 83       	std	Z+3, r29	; 0x03
    32bc:	c2 83       	std	Z+2, r28	; 0x02
    32be:	40 81       	ld	r20, Z
    32c0:	51 81       	ldd	r21, Z+1	; 0x01
    32c2:	84 0f       	add	r24, r20
    32c4:	95 1f       	adc	r25, r21
    32c6:	c8 17       	cp	r28, r24
    32c8:	d9 07       	cpc	r29, r25
    32ca:	59 f4       	brne	.+22     	; 0x32e2 <free+0x82>
    32cc:	88 81       	ld	r24, Y
    32ce:	99 81       	ldd	r25, Y+1	; 0x01
    32d0:	84 0f       	add	r24, r20
    32d2:	95 1f       	adc	r25, r21
    32d4:	02 96       	adiw	r24, 0x02	; 2
    32d6:	91 83       	std	Z+1, r25	; 0x01
    32d8:	80 83       	st	Z, r24
    32da:	8a 81       	ldd	r24, Y+2	; 0x02
    32dc:	9b 81       	ldd	r25, Y+3	; 0x03
    32de:	93 83       	std	Z+3, r25	; 0x03
    32e0:	82 83       	std	Z+2, r24	; 0x02
    32e2:	21 15       	cp	r18, r1
    32e4:	31 05       	cpc	r19, r1
    32e6:	29 f4       	brne	.+10     	; 0x32f2 <free+0x92>
    32e8:	f0 93 b5 02 	sts	0x02B5, r31	; 0x8002b5 <__flp+0x1>
    32ec:	e0 93 b4 02 	sts	0x02B4, r30	; 0x8002b4 <__flp>
    32f0:	3d c0       	rjmp	.+122    	; 0x336c <free+0x10c>
    32f2:	e9 01       	movw	r28, r18
    32f4:	fb 83       	std	Y+3, r31	; 0x03
    32f6:	ea 83       	std	Y+2, r30	; 0x02
    32f8:	49 91       	ld	r20, Y+
    32fa:	59 91       	ld	r21, Y+
    32fc:	c4 0f       	add	r28, r20
    32fe:	d5 1f       	adc	r29, r21
    3300:	ec 17       	cp	r30, r28
    3302:	fd 07       	cpc	r31, r29
    3304:	61 f4       	brne	.+24     	; 0x331e <free+0xbe>
    3306:	80 81       	ld	r24, Z
    3308:	91 81       	ldd	r25, Z+1	; 0x01
    330a:	84 0f       	add	r24, r20
    330c:	95 1f       	adc	r25, r21
    330e:	02 96       	adiw	r24, 0x02	; 2
    3310:	e9 01       	movw	r28, r18
    3312:	99 83       	std	Y+1, r25	; 0x01
    3314:	88 83       	st	Y, r24
    3316:	82 81       	ldd	r24, Z+2	; 0x02
    3318:	93 81       	ldd	r25, Z+3	; 0x03
    331a:	9b 83       	std	Y+3, r25	; 0x03
    331c:	8a 83       	std	Y+2, r24	; 0x02
    331e:	e0 e0       	ldi	r30, 0x00	; 0
    3320:	f0 e0       	ldi	r31, 0x00	; 0
    3322:	12 96       	adiw	r26, 0x02	; 2
    3324:	8d 91       	ld	r24, X+
    3326:	9c 91       	ld	r25, X
    3328:	13 97       	sbiw	r26, 0x03	; 3
    332a:	00 97       	sbiw	r24, 0x00	; 0
    332c:	19 f0       	breq	.+6      	; 0x3334 <free+0xd4>
    332e:	fd 01       	movw	r30, r26
    3330:	dc 01       	movw	r26, r24
    3332:	f7 cf       	rjmp	.-18     	; 0x3322 <free+0xc2>
    3334:	8d 91       	ld	r24, X+
    3336:	9c 91       	ld	r25, X
    3338:	11 97       	sbiw	r26, 0x01	; 1
    333a:	9d 01       	movw	r18, r26
    333c:	2e 5f       	subi	r18, 0xFE	; 254
    333e:	3f 4f       	sbci	r19, 0xFF	; 255
    3340:	82 0f       	add	r24, r18
    3342:	93 1f       	adc	r25, r19
    3344:	20 91 b2 02 	lds	r18, 0x02B2	; 0x8002b2 <__brkval>
    3348:	30 91 b3 02 	lds	r19, 0x02B3	; 0x8002b3 <__brkval+0x1>
    334c:	28 17       	cp	r18, r24
    334e:	39 07       	cpc	r19, r25
    3350:	69 f4       	brne	.+26     	; 0x336c <free+0x10c>
    3352:	30 97       	sbiw	r30, 0x00	; 0
    3354:	29 f4       	brne	.+10     	; 0x3360 <free+0x100>
    3356:	10 92 b5 02 	sts	0x02B5, r1	; 0x8002b5 <__flp+0x1>
    335a:	10 92 b4 02 	sts	0x02B4, r1	; 0x8002b4 <__flp>
    335e:	02 c0       	rjmp	.+4      	; 0x3364 <free+0x104>
    3360:	13 82       	std	Z+3, r1	; 0x03
    3362:	12 82       	std	Z+2, r1	; 0x02
    3364:	b0 93 b3 02 	sts	0x02B3, r27	; 0x8002b3 <__brkval+0x1>
    3368:	a0 93 b2 02 	sts	0x02B2, r26	; 0x8002b2 <__brkval>
    336c:	df 91       	pop	r29
    336e:	cf 91       	pop	r28
    3370:	08 95       	ret

00003372 <do_rand>:
    3372:	8f 92       	push	r8
    3374:	9f 92       	push	r9
    3376:	af 92       	push	r10
    3378:	bf 92       	push	r11
    337a:	cf 92       	push	r12
    337c:	df 92       	push	r13
    337e:	ef 92       	push	r14
    3380:	ff 92       	push	r15
    3382:	cf 93       	push	r28
    3384:	df 93       	push	r29
    3386:	ec 01       	movw	r28, r24
    3388:	68 81       	ld	r22, Y
    338a:	79 81       	ldd	r23, Y+1	; 0x01
    338c:	8a 81       	ldd	r24, Y+2	; 0x02
    338e:	9b 81       	ldd	r25, Y+3	; 0x03
    3390:	61 15       	cp	r22, r1
    3392:	71 05       	cpc	r23, r1
    3394:	81 05       	cpc	r24, r1
    3396:	91 05       	cpc	r25, r1
    3398:	21 f4       	brne	.+8      	; 0x33a2 <do_rand+0x30>
    339a:	64 e2       	ldi	r22, 0x24	; 36
    339c:	79 ed       	ldi	r23, 0xD9	; 217
    339e:	8b e5       	ldi	r24, 0x5B	; 91
    33a0:	97 e0       	ldi	r25, 0x07	; 7
    33a2:	2d e1       	ldi	r18, 0x1D	; 29
    33a4:	33 ef       	ldi	r19, 0xF3	; 243
    33a6:	41 e0       	ldi	r20, 0x01	; 1
    33a8:	50 e0       	ldi	r21, 0x00	; 0
    33aa:	6f d0       	rcall	.+222    	; 0x348a <__divmodsi4>
    33ac:	49 01       	movw	r8, r18
    33ae:	5a 01       	movw	r10, r20
    33b0:	9b 01       	movw	r18, r22
    33b2:	ac 01       	movw	r20, r24
    33b4:	a7 ea       	ldi	r26, 0xA7	; 167
    33b6:	b1 e4       	ldi	r27, 0x41	; 65
    33b8:	84 d0       	rcall	.+264    	; 0x34c2 <__muluhisi3>
    33ba:	6b 01       	movw	r12, r22
    33bc:	7c 01       	movw	r14, r24
    33be:	ac ee       	ldi	r26, 0xEC	; 236
    33c0:	b4 ef       	ldi	r27, 0xF4	; 244
    33c2:	a5 01       	movw	r20, r10
    33c4:	94 01       	movw	r18, r8
    33c6:	89 d0       	rcall	.+274    	; 0x34da <__mulohisi3>
    33c8:	dc 01       	movw	r26, r24
    33ca:	cb 01       	movw	r24, r22
    33cc:	8c 0d       	add	r24, r12
    33ce:	9d 1d       	adc	r25, r13
    33d0:	ae 1d       	adc	r26, r14
    33d2:	bf 1d       	adc	r27, r15
    33d4:	b7 ff       	sbrs	r27, 7
    33d6:	03 c0       	rjmp	.+6      	; 0x33de <do_rand+0x6c>
    33d8:	01 97       	sbiw	r24, 0x01	; 1
    33da:	a1 09       	sbc	r26, r1
    33dc:	b0 48       	sbci	r27, 0x80	; 128
    33de:	88 83       	st	Y, r24
    33e0:	99 83       	std	Y+1, r25	; 0x01
    33e2:	aa 83       	std	Y+2, r26	; 0x02
    33e4:	bb 83       	std	Y+3, r27	; 0x03
    33e6:	9f 77       	andi	r25, 0x7F	; 127
    33e8:	df 91       	pop	r29
    33ea:	cf 91       	pop	r28
    33ec:	ff 90       	pop	r15
    33ee:	ef 90       	pop	r14
    33f0:	df 90       	pop	r13
    33f2:	cf 90       	pop	r12
    33f4:	bf 90       	pop	r11
    33f6:	af 90       	pop	r10
    33f8:	9f 90       	pop	r9
    33fa:	8f 90       	pop	r8
    33fc:	08 95       	ret

000033fe <rand_r>:
    33fe:	b9 cf       	rjmp	.-142    	; 0x3372 <do_rand>

00003400 <rand>:
    3400:	86 e0       	ldi	r24, 0x06	; 6
    3402:	91 e0       	ldi	r25, 0x01	; 1
    3404:	b6 cf       	rjmp	.-148    	; 0x3372 <do_rand>

00003406 <srand>:
    3406:	a0 e0       	ldi	r26, 0x00	; 0
    3408:	b0 e0       	ldi	r27, 0x00	; 0
    340a:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <next>
    340e:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <next+0x1>
    3412:	a0 93 08 01 	sts	0x0108, r26	; 0x800108 <next+0x2>
    3416:	b0 93 09 01 	sts	0x0109, r27	; 0x800109 <next+0x3>
    341a:	08 95       	ret

0000341c <memcpy_P>:
    341c:	fb 01       	movw	r30, r22
    341e:	dc 01       	movw	r26, r24
    3420:	02 c0       	rjmp	.+4      	; 0x3426 <memcpy_P+0xa>
    3422:	05 90       	lpm	r0, Z+
    3424:	0d 92       	st	X+, r0
    3426:	41 50       	subi	r20, 0x01	; 1
    3428:	50 40       	sbci	r21, 0x00	; 0
    342a:	d8 f7       	brcc	.-10     	; 0x3422 <memcpy_P+0x6>
    342c:	08 95       	ret

0000342e <memcmp>:
    342e:	fb 01       	movw	r30, r22
    3430:	dc 01       	movw	r26, r24
    3432:	04 c0       	rjmp	.+8      	; 0x343c <memcmp+0xe>
    3434:	8d 91       	ld	r24, X+
    3436:	01 90       	ld	r0, Z+
    3438:	80 19       	sub	r24, r0
    343a:	21 f4       	brne	.+8      	; 0x3444 <memcmp+0x16>
    343c:	41 50       	subi	r20, 0x01	; 1
    343e:	50 40       	sbci	r21, 0x00	; 0
    3440:	c8 f7       	brcc	.-14     	; 0x3434 <memcmp+0x6>
    3442:	88 1b       	sub	r24, r24
    3444:	99 0b       	sbc	r25, r25
    3446:	08 95       	ret

00003448 <memcpy>:
    3448:	fb 01       	movw	r30, r22
    344a:	dc 01       	movw	r26, r24
    344c:	02 c0       	rjmp	.+4      	; 0x3452 <memcpy+0xa>
    344e:	01 90       	ld	r0, Z+
    3450:	0d 92       	st	X+, r0
    3452:	41 50       	subi	r20, 0x01	; 1
    3454:	50 40       	sbci	r21, 0x00	; 0
    3456:	d8 f7       	brcc	.-10     	; 0x344e <memcpy+0x6>
    3458:	08 95       	ret

0000345a <memmove>:
    345a:	68 17       	cp	r22, r24
    345c:	79 07       	cpc	r23, r25
    345e:	68 f4       	brcc	.+26     	; 0x347a <memmove+0x20>
    3460:	fb 01       	movw	r30, r22
    3462:	dc 01       	movw	r26, r24
    3464:	e4 0f       	add	r30, r20
    3466:	f5 1f       	adc	r31, r21
    3468:	a4 0f       	add	r26, r20
    346a:	b5 1f       	adc	r27, r21
    346c:	02 c0       	rjmp	.+4      	; 0x3472 <memmove+0x18>
    346e:	02 90       	ld	r0, -Z
    3470:	0e 92       	st	-X, r0
    3472:	41 50       	subi	r20, 0x01	; 1
    3474:	50 40       	sbci	r21, 0x00	; 0
    3476:	d8 f7       	brcc	.-10     	; 0x346e <memmove+0x14>
    3478:	08 95       	ret
    347a:	e6 cf       	rjmp	.-52     	; 0x3448 <memcpy>

0000347c <memset>:
    347c:	dc 01       	movw	r26, r24
    347e:	01 c0       	rjmp	.+2      	; 0x3482 <memset+0x6>
    3480:	6d 93       	st	X+, r22
    3482:	41 50       	subi	r20, 0x01	; 1
    3484:	50 40       	sbci	r21, 0x00	; 0
    3486:	e0 f7       	brcc	.-8      	; 0x3480 <memset+0x4>
    3488:	08 95       	ret

0000348a <__divmodsi4>:
    348a:	05 2e       	mov	r0, r21
    348c:	97 fb       	bst	r25, 7
    348e:	16 f4       	brtc	.+4      	; 0x3494 <__divmodsi4+0xa>
    3490:	00 94       	com	r0
    3492:	0f d0       	rcall	.+30     	; 0x34b2 <__negsi2>
    3494:	57 fd       	sbrc	r21, 7
    3496:	05 d0       	rcall	.+10     	; 0x34a2 <__divmodsi4_neg2>
    3498:	24 d0       	rcall	.+72     	; 0x34e2 <__udivmodsi4>
    349a:	07 fc       	sbrc	r0, 7
    349c:	02 d0       	rcall	.+4      	; 0x34a2 <__divmodsi4_neg2>
    349e:	46 f4       	brtc	.+16     	; 0x34b0 <__divmodsi4_exit>
    34a0:	08 c0       	rjmp	.+16     	; 0x34b2 <__negsi2>

000034a2 <__divmodsi4_neg2>:
    34a2:	50 95       	com	r21
    34a4:	40 95       	com	r20
    34a6:	30 95       	com	r19
    34a8:	21 95       	neg	r18
    34aa:	3f 4f       	sbci	r19, 0xFF	; 255
    34ac:	4f 4f       	sbci	r20, 0xFF	; 255
    34ae:	5f 4f       	sbci	r21, 0xFF	; 255

000034b0 <__divmodsi4_exit>:
    34b0:	08 95       	ret

000034b2 <__negsi2>:
    34b2:	90 95       	com	r25
    34b4:	80 95       	com	r24
    34b6:	70 95       	com	r23
    34b8:	61 95       	neg	r22
    34ba:	7f 4f       	sbci	r23, 0xFF	; 255
    34bc:	8f 4f       	sbci	r24, 0xFF	; 255
    34be:	9f 4f       	sbci	r25, 0xFF	; 255
    34c0:	08 95       	ret

000034c2 <__muluhisi3>:
    34c2:	31 d0       	rcall	.+98     	; 0x3526 <__umulhisi3>
    34c4:	a5 9f       	mul	r26, r21
    34c6:	90 0d       	add	r25, r0
    34c8:	b4 9f       	mul	r27, r20
    34ca:	90 0d       	add	r25, r0
    34cc:	a4 9f       	mul	r26, r20
    34ce:	80 0d       	add	r24, r0
    34d0:	91 1d       	adc	r25, r1
    34d2:	11 24       	eor	r1, r1
    34d4:	08 95       	ret

000034d6 <__mulshisi3>:
    34d6:	b7 ff       	sbrs	r27, 7
    34d8:	f4 cf       	rjmp	.-24     	; 0x34c2 <__muluhisi3>

000034da <__mulohisi3>:
    34da:	f3 df       	rcall	.-26     	; 0x34c2 <__muluhisi3>
    34dc:	82 1b       	sub	r24, r18
    34de:	93 0b       	sbc	r25, r19
    34e0:	08 95       	ret

000034e2 <__udivmodsi4>:
    34e2:	a1 e2       	ldi	r26, 0x21	; 33
    34e4:	1a 2e       	mov	r1, r26
    34e6:	aa 1b       	sub	r26, r26
    34e8:	bb 1b       	sub	r27, r27
    34ea:	fd 01       	movw	r30, r26
    34ec:	0d c0       	rjmp	.+26     	; 0x3508 <__udivmodsi4_ep>

000034ee <__udivmodsi4_loop>:
    34ee:	aa 1f       	adc	r26, r26
    34f0:	bb 1f       	adc	r27, r27
    34f2:	ee 1f       	adc	r30, r30
    34f4:	ff 1f       	adc	r31, r31
    34f6:	a2 17       	cp	r26, r18
    34f8:	b3 07       	cpc	r27, r19
    34fa:	e4 07       	cpc	r30, r20
    34fc:	f5 07       	cpc	r31, r21
    34fe:	20 f0       	brcs	.+8      	; 0x3508 <__udivmodsi4_ep>
    3500:	a2 1b       	sub	r26, r18
    3502:	b3 0b       	sbc	r27, r19
    3504:	e4 0b       	sbc	r30, r20
    3506:	f5 0b       	sbc	r31, r21

00003508 <__udivmodsi4_ep>:
    3508:	66 1f       	adc	r22, r22
    350a:	77 1f       	adc	r23, r23
    350c:	88 1f       	adc	r24, r24
    350e:	99 1f       	adc	r25, r25
    3510:	1a 94       	dec	r1
    3512:	69 f7       	brne	.-38     	; 0x34ee <__udivmodsi4_loop>
    3514:	60 95       	com	r22
    3516:	70 95       	com	r23
    3518:	80 95       	com	r24
    351a:	90 95       	com	r25
    351c:	9b 01       	movw	r18, r22
    351e:	ac 01       	movw	r20, r24
    3520:	bd 01       	movw	r22, r26
    3522:	cf 01       	movw	r24, r30
    3524:	08 95       	ret

00003526 <__umulhisi3>:
    3526:	a2 9f       	mul	r26, r18
    3528:	b0 01       	movw	r22, r0
    352a:	b3 9f       	mul	r27, r19
    352c:	c0 01       	movw	r24, r0
    352e:	a3 9f       	mul	r26, r19
    3530:	70 0d       	add	r23, r0
    3532:	81 1d       	adc	r24, r1
    3534:	11 24       	eor	r1, r1
    3536:	91 1d       	adc	r25, r1
    3538:	b2 9f       	mul	r27, r18
    353a:	70 0d       	add	r23, r0
    353c:	81 1d       	adc	r24, r1
    353e:	11 24       	eor	r1, r1
    3540:	91 1d       	adc	r25, r1
    3542:	08 95       	ret

00003544 <_exit>:
    3544:	f8 94       	cli

00003546 <__stop_program>:
    3546:	ff cf       	rjmp	.-2      	; 0x3546 <__stop_program>
