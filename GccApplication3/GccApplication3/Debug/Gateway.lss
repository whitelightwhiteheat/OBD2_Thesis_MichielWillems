
Gateway.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000d0  00800100  000006fc  00000790  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000006fc  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000006  008001d0  008001d0  00000860  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000860  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000890  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000168  00000000  00000000  000008d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002332  00000000  00000000  00000a38  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001079  00000000  00000000  00002d6a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000de1  00000000  00000000  00003de3  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000418  00000000  00000000  00004bc4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000096a  00000000  00000000  00004fdc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000010bf  00000000  00000000  00005946  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000118  00000000  00000000  00006a05  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	49 c0       	rjmp	.+146    	; 0x94 <__ctors_end>
   2:	00 00       	nop
   4:	64 c0       	rjmp	.+200    	; 0xce <__bad_interrupt>
   6:	00 00       	nop
   8:	62 c0       	rjmp	.+196    	; 0xce <__bad_interrupt>
   a:	00 00       	nop
   c:	60 c0       	rjmp	.+192    	; 0xce <__bad_interrupt>
   e:	00 00       	nop
  10:	5e c0       	rjmp	.+188    	; 0xce <__bad_interrupt>
  12:	00 00       	nop
  14:	5c c0       	rjmp	.+184    	; 0xce <__bad_interrupt>
  16:	00 00       	nop
  18:	5a c0       	rjmp	.+180    	; 0xce <__bad_interrupt>
  1a:	00 00       	nop
  1c:	58 c0       	rjmp	.+176    	; 0xce <__bad_interrupt>
  1e:	00 00       	nop
  20:	56 c0       	rjmp	.+172    	; 0xce <__bad_interrupt>
  22:	00 00       	nop
  24:	54 c0       	rjmp	.+168    	; 0xce <__bad_interrupt>
  26:	00 00       	nop
  28:	52 c0       	rjmp	.+164    	; 0xce <__bad_interrupt>
  2a:	00 00       	nop
  2c:	50 c0       	rjmp	.+160    	; 0xce <__bad_interrupt>
  2e:	00 00       	nop
  30:	4e c0       	rjmp	.+156    	; 0xce <__bad_interrupt>
  32:	00 00       	nop
  34:	4c c0       	rjmp	.+152    	; 0xce <__bad_interrupt>
  36:	00 00       	nop
  38:	4a c0       	rjmp	.+148    	; 0xce <__bad_interrupt>
  3a:	00 00       	nop
  3c:	48 c0       	rjmp	.+144    	; 0xce <__bad_interrupt>
  3e:	00 00       	nop
  40:	46 c0       	rjmp	.+140    	; 0xce <__bad_interrupt>
  42:	00 00       	nop
  44:	44 c0       	rjmp	.+136    	; 0xce <__bad_interrupt>
  46:	00 00       	nop
  48:	42 c0       	rjmp	.+132    	; 0xce <__bad_interrupt>
  4a:	00 00       	nop
  4c:	40 c0       	rjmp	.+128    	; 0xce <__bad_interrupt>
  4e:	00 00       	nop
  50:	3e c0       	rjmp	.+124    	; 0xce <__bad_interrupt>
  52:	00 00       	nop
  54:	3c c0       	rjmp	.+120    	; 0xce <__bad_interrupt>
  56:	00 00       	nop
  58:	3a c0       	rjmp	.+116    	; 0xce <__bad_interrupt>
  5a:	00 00       	nop
  5c:	38 c0       	rjmp	.+112    	; 0xce <__bad_interrupt>
  5e:	00 00       	nop
  60:	36 c0       	rjmp	.+108    	; 0xce <__bad_interrupt>
  62:	00 00       	nop
  64:	34 c0       	rjmp	.+104    	; 0xce <__bad_interrupt>
  66:	00 00       	nop
  68:	32 c0       	rjmp	.+100    	; 0xce <__bad_interrupt>
  6a:	00 00       	nop
  6c:	30 c0       	rjmp	.+96     	; 0xce <__bad_interrupt>
  6e:	00 00       	nop
  70:	2e c0       	rjmp	.+92     	; 0xce <__bad_interrupt>
  72:	00 00       	nop
  74:	2c c0       	rjmp	.+88     	; 0xce <__bad_interrupt>
  76:	00 00       	nop
  78:	2a c0       	rjmp	.+84     	; 0xce <__bad_interrupt>
  7a:	00 00       	nop
  7c:	28 c0       	rjmp	.+80     	; 0xce <__bad_interrupt>
  7e:	00 00       	nop
  80:	26 c0       	rjmp	.+76     	; 0xce <__bad_interrupt>
  82:	00 00       	nop
  84:	24 c0       	rjmp	.+72     	; 0xce <__bad_interrupt>
  86:	00 00       	nop
  88:	22 c0       	rjmp	.+68     	; 0xce <__bad_interrupt>
  8a:	00 00       	nop
  8c:	20 c0       	rjmp	.+64     	; 0xce <__bad_interrupt>
  8e:	00 00       	nop
  90:	1e c0       	rjmp	.+60     	; 0xce <__bad_interrupt>
	...

00000094 <__ctors_end>:
  94:	11 24       	eor	r1, r1
  96:	1f be       	out	0x3f, r1	; 63
  98:	cf ef       	ldi	r28, 0xFF	; 255
  9a:	d0 e1       	ldi	r29, 0x10	; 16
  9c:	de bf       	out	0x3e, r29	; 62
  9e:	cd bf       	out	0x3d, r28	; 61

000000a0 <__do_copy_data>:
  a0:	11 e0       	ldi	r17, 0x01	; 1
  a2:	a0 e0       	ldi	r26, 0x00	; 0
  a4:	b1 e0       	ldi	r27, 0x01	; 1
  a6:	ec ef       	ldi	r30, 0xFC	; 252
  a8:	f6 e0       	ldi	r31, 0x06	; 6
  aa:	00 e0       	ldi	r16, 0x00	; 0
  ac:	0b bf       	out	0x3b, r16	; 59
  ae:	02 c0       	rjmp	.+4      	; 0xb4 <__do_copy_data+0x14>
  b0:	07 90       	elpm	r0, Z+
  b2:	0d 92       	st	X+, r0
  b4:	a0 3d       	cpi	r26, 0xD0	; 208
  b6:	b1 07       	cpc	r27, r17
  b8:	d9 f7       	brne	.-10     	; 0xb0 <__do_copy_data+0x10>

000000ba <__do_clear_bss>:
  ba:	21 e0       	ldi	r18, 0x01	; 1
  bc:	a0 ed       	ldi	r26, 0xD0	; 208
  be:	b1 e0       	ldi	r27, 0x01	; 1
  c0:	01 c0       	rjmp	.+2      	; 0xc4 <.do_clear_bss_start>

000000c2 <.do_clear_bss_loop>:
  c2:	1d 92       	st	X+, r1

000000c4 <.do_clear_bss_start>:
  c4:	a6 3d       	cpi	r26, 0xD6	; 214
  c6:	b2 07       	cpc	r27, r18
  c8:	e1 f7       	brne	.-8      	; 0xc2 <.do_clear_bss_loop>
  ca:	af d0       	rcall	.+350    	; 0x22a <main>
  cc:	15 c3       	rjmp	.+1578   	; 0x6f8 <_exit>

000000ce <__bad_interrupt>:
  ce:	98 cf       	rjmp	.-208    	; 0x0 <__vectors>

000000d0 <can_init>:
#include <avr/interrupt.h>
#include "hexconv.h"
#include "uart_f.h"
#include "can.h"

void can_init(){
  d0:	cf 93       	push	r28
  d2:	df 93       	push	r29

	cli();
  d4:	f8 94       	cli
	// no overload frame request
	// no listening mode
	// no test mode
	// standby mode
	// software reset request
	CANGCON = (1 << SWRES);
  d6:	81 e0       	ldi	r24, 0x01	; 1
  d8:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
	
	// enable receive interrupt
	// enable general interrupt
	CANGIE =  (1 << ENRX) | (1 << ENTX) | (1 << ENBX);
  dc:	84 e3       	ldi	r24, 0x34	; 52
  de:	80 93 db 00 	sts	0x00DB, r24	; 0x8000db <__TEXT_REGION_LENGTH__+0x7e00db>
	CANGIT = 0x00;
  e2:	10 92 da 00 	sts	0x00DA, r1	; 0x8000da <__TEXT_REGION_LENGTH__+0x7e00da>
  e6:	80 e0       	ldi	r24, 0x00	; 0
	
	int c;
	for (c=0;c<15;c++)
	{
		
		CANPAGE = c << 4;
  e8:	cd ee       	ldi	r28, 0xED	; 237
  ea:	d0 e0       	ldi	r29, 0x00	; 0
		CANCDMOB = 0x00;
  ec:	af ee       	ldi	r26, 0xEF	; 239
  ee:	b0 e0       	ldi	r27, 0x00	; 0
		CANSTMOB = 0x00;
  f0:	ee ee       	ldi	r30, 0xEE	; 238
  f2:	f0 e0       	ldi	r31, 0x00	; 0
	
	int c;
	for (c=0;c<15;c++)
	{
		
		CANPAGE = c << 4;
  f4:	98 2f       	mov	r25, r24
  f6:	92 95       	swap	r25
  f8:	90 7f       	andi	r25, 0xF0	; 240
  fa:	98 83       	st	Y, r25
		CANCDMOB = 0x00;
  fc:	1c 92       	st	X, r1
		CANSTMOB = 0x00;
  fe:	10 82       	st	Z, r1
 100:	8f 5f       	subi	r24, 0xFF	; 255
	// enable general interrupt
	CANGIE =  (1 << ENRX) | (1 << ENTX) | (1 << ENBX);
	CANGIT = 0x00;
	
	int c;
	for (c=0;c<15;c++)
 102:	8f 30       	cpi	r24, 0x0F	; 15
 104:	b9 f7       	brne	.-18     	; 0xf4 <can_init+0x24>
		
	}

	// CAN bit timing registers
	// set the timing (baud) ? 125 KBaud with 8 Mhz clock
	CANBT1 = 0x06 ;    // Baud Rate Prescaler
 106:	86 e0       	ldi	r24, 0x06	; 6
 108:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
	CANBT2 = 0x0c ;    // Re-Synchronization & Propagation
 10c:	8c e0       	ldi	r24, 0x0C	; 12
 10e:	80 93 e3 00 	sts	0x00E3, r24	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7e00e3>
	CANBT3 = 0x37 ;    // Phase Segments & Sample Point(s)
 112:	87 e3       	ldi	r24, 0x37	; 55
 114:	80 93 e4 00 	sts	0x00E4, r24	; 0x8000e4 <__TEXT_REGION_LENGTH__+0x7e00e4>
	// CAN Timer Clock Period: 0.500 us
	CANTCON = 0x00 ;
 118:	10 92 e5 00 	sts	0x00E5, r1	; 0x8000e5 <__TEXT_REGION_LENGTH__+0x7e00e5>

	// enter enable mode
	CANGCON = 0b00000010 ;    //(1 << ENA/STB)
 11c:	82 e0       	ldi	r24, 0x02	; 2
 11e:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>

		sei();
 122:	78 94       	sei

}
 124:	df 91       	pop	r29
 126:	cf 91       	pop	r28
 128:	08 95       	ret

0000012a <bytes_to_hex>:
#include <avr/io.h>
#include "hexconv.h"


void bytes_to_hex(const uint8_t *src, uint8_t intlen, char *dest)
{
 12a:	cf 93       	push	r28
 12c:	df 93       	push	r29
	static const unsigned char table[] = "0123456789abcdef";

	for (; intlen > 0; intlen--)
 12e:	66 23       	and	r22, r22
 130:	c9 f0       	breq	.+50     	; 0x164 <bytes_to_hex+0x3a>
 132:	c4 2f       	mov	r28, r20
 134:	d5 2f       	mov	r29, r21
 136:	28 2f       	mov	r18, r24
 138:	39 2f       	mov	r19, r25
	{
		unsigned char c = *src++;
 13a:	d9 01       	movw	r26, r18
 13c:	ed 91       	ld	r30, X+
 13e:	9d 01       	movw	r18, r26
		*dest++ = table[c >> 4];
 140:	ae 2f       	mov	r26, r30
 142:	a2 95       	swap	r26
 144:	af 70       	andi	r26, 0x0F	; 15
 146:	b0 e0       	ldi	r27, 0x00	; 0
 148:	aa 5f       	subi	r26, 0xFA	; 250
 14a:	be 4f       	sbci	r27, 0xFE	; 254
 14c:	8c 91       	ld	r24, X
 14e:	88 83       	st	Y, r24
		*dest++ = table[c & 0x0f];
 150:	ef 70       	andi	r30, 0x0F	; 15
 152:	f0 e0       	ldi	r31, 0x00	; 0
 154:	ea 5f       	subi	r30, 0xFA	; 250
 156:	fe 4f       	sbci	r31, 0xFE	; 254
 158:	80 81       	ld	r24, Z
 15a:	89 83       	std	Y+1, r24	; 0x01

void bytes_to_hex(const uint8_t *src, uint8_t intlen, char *dest)
{
	static const unsigned char table[] = "0123456789abcdef";

	for (; intlen > 0; intlen--)
 15c:	61 50       	subi	r22, 0x01	; 1
 15e:	22 96       	adiw	r28, 0x02	; 2
 160:	61 11       	cpse	r22, r1
 162:	eb cf       	rjmp	.-42     	; 0x13a <bytes_to_hex+0x10>
	{
		unsigned char c = *src++;
		*dest++ = table[c >> 4];
		*dest++ = table[c & 0x0f];
	}
}
 164:	df 91       	pop	r29
 166:	cf 91       	pop	r28
 168:	08 95       	ret

0000016a <hex_to_bytes>:

void hex_to_bytes(char* src, uint8_t slength, uint8_t dest[slength/2]) {
 16a:	ff 92       	push	r15
 16c:	0f 93       	push	r16
 16e:	1f 93       	push	r17
 170:	cf 93       	push	r28
 172:	df 93       	push	r29
 174:	f8 2e       	mov	r15, r24
 176:	09 2f       	mov	r16, r25
 178:	16 2f       	mov	r17, r22
 17a:	ea 01       	movw	r28, r20
	memset(dest, 0, slength/2);
 17c:	46 2f       	mov	r20, r22
 17e:	46 95       	lsr	r20
 180:	50 e0       	ldi	r21, 0x00	; 0
 182:	60 e0       	ldi	r22, 0x00	; 0
 184:	70 e0       	ldi	r23, 0x00	; 0
 186:	ce 01       	movw	r24, r28
 188:	b0 d2       	rcall	.+1376   	; 0x6ea <memset>
	uint8_t index = 0;
	while (index < slength) {
 18a:	11 23       	and	r17, r17
 18c:	09 f4       	brne	.+2      	; 0x190 <hex_to_bytes+0x26>
 18e:	3f c0       	rjmp	.+126    	; 0x20e <hex_to_bytes+0xa4>
 190:	ef 2d       	mov	r30, r15
 192:	f0 2f       	mov	r31, r16
 194:	20 e0       	ldi	r18, 0x00	; 0
 196:	30 e0       	ldi	r19, 0x00	; 0
		char c = src[index];
		int value = 0;
 198:	70 e0       	ldi	r23, 0x00	; 0
 19a:	60 e0       	ldi	r22, 0x00	; 0
 19c:	42 2f       	mov	r20, r18

void hex_to_bytes(char* src, uint8_t slength, uint8_t dest[slength/2]) {
	memset(dest, 0, slength/2);
	uint8_t index = 0;
	while (index < slength) {
		char c = src[index];
 19e:	81 91       	ld	r24, Z+
 1a0:	2f 5f       	subi	r18, 0xFF	; 255
 1a2:	3f 4f       	sbci	r19, 0xFF	; 255
		int value = 0;
		if(c >= '0' && c <= '9')
 1a4:	90 ed       	ldi	r25, 0xD0	; 208
 1a6:	98 0f       	add	r25, r24
 1a8:	9a 30       	cpi	r25, 0x0A	; 10
 1aa:	18 f4       	brcc	.+6      	; 0x1b2 <hex_to_bytes+0x48>
		value = (c - '0');
 1ac:	90 e0       	ldi	r25, 0x00	; 0
 1ae:	c0 97       	sbiw	r24, 0x30	; 48
 1b0:	11 c0       	rjmp	.+34     	; 0x1d4 <hex_to_bytes+0x6a>
		else if (c >= 'A' && c <= 'F')
 1b2:	9f eb       	ldi	r25, 0xBF	; 191
 1b4:	98 0f       	add	r25, r24
 1b6:	96 30       	cpi	r25, 0x06	; 6
 1b8:	18 f4       	brcc	.+6      	; 0x1c0 <hex_to_bytes+0x56>
		value = (10 + (c - 'A'));
 1ba:	90 e0       	ldi	r25, 0x00	; 0
 1bc:	c7 97       	sbiw	r24, 0x37	; 55
 1be:	0a c0       	rjmp	.+20     	; 0x1d4 <hex_to_bytes+0x6a>
		else if (c >= 'a' && c <= 'f')
 1c0:	9f e9       	ldi	r25, 0x9F	; 159
 1c2:	98 0f       	add	r25, r24
 1c4:	96 30       	cpi	r25, 0x06	; 6
 1c6:	20 f4       	brcc	.+8      	; 0x1d0 <hex_to_bytes+0x66>
		value = (10 + (c - 'a'));
 1c8:	90 e0       	ldi	r25, 0x00	; 0
 1ca:	87 55       	subi	r24, 0x57	; 87
 1cc:	91 09       	sbc	r25, r1
 1ce:	02 c0       	rjmp	.+4      	; 0x1d4 <hex_to_bytes+0x6a>
void hex_to_bytes(char* src, uint8_t slength, uint8_t dest[slength/2]) {
	memset(dest, 0, slength/2);
	uint8_t index = 0;
	while (index < slength) {
		char c = src[index];
		int value = 0;
 1d0:	87 2f       	mov	r24, r23
 1d2:	96 2f       	mov	r25, r22
		else if (c >= 'A' && c <= 'F')
		value = (10 + (c - 'A'));
		else if (c >= 'a' && c <= 'f')
		value = (10 + (c - 'a'));

		dest[(index/2)] += value << (((index + 1) % 2) * 4);
 1d4:	46 95       	lsr	r20
 1d6:	de 01       	movw	r26, r28
 1d8:	a4 0f       	add	r26, r20
 1da:	b1 1d       	adc	r27, r1
 1dc:	a9 01       	movw	r20, r18
 1de:	41 70       	andi	r20, 0x01	; 1
 1e0:	50 78       	andi	r21, 0x80	; 128
 1e2:	55 23       	and	r21, r21
 1e4:	34 f4       	brge	.+12     	; 0x1f2 <hex_to_bytes+0x88>
 1e6:	41 50       	subi	r20, 0x01	; 1
 1e8:	51 09       	sbc	r21, r1
 1ea:	4e 6f       	ori	r20, 0xFE	; 254
 1ec:	5f 6f       	ori	r21, 0xFF	; 255
 1ee:	4f 5f       	subi	r20, 0xFF	; 255
 1f0:	5f 4f       	sbci	r21, 0xFF	; 255
 1f2:	44 0f       	add	r20, r20
 1f4:	55 1f       	adc	r21, r21
 1f6:	44 0f       	add	r20, r20
 1f8:	55 1f       	adc	r21, r21
 1fa:	02 c0       	rjmp	.+4      	; 0x200 <hex_to_bytes+0x96>
 1fc:	88 0f       	add	r24, r24
 1fe:	99 1f       	adc	r25, r25
 200:	4a 95       	dec	r20
 202:	e2 f7       	brpl	.-8      	; 0x1fc <hex_to_bytes+0x92>
 204:	9c 91       	ld	r25, X
 206:	89 0f       	add	r24, r25
 208:	8c 93       	st	X, r24
}

void hex_to_bytes(char* src, uint8_t slength, uint8_t dest[slength/2]) {
	memset(dest, 0, slength/2);
	uint8_t index = 0;
	while (index < slength) {
 20a:	21 17       	cp	r18, r17
 20c:	38 f2       	brcs	.-114    	; 0x19c <hex_to_bytes+0x32>

		dest[(index/2)] += value << (((index + 1) % 2) * 4);

		index++;
	}
}
 20e:	df 91       	pop	r29
 210:	cf 91       	pop	r28
 212:	1f 91       	pop	r17
 214:	0f 91       	pop	r16
 216:	ff 90       	pop	r15
 218:	08 95       	ret

0000021a <buttons_init>:
		if (check_permission(id, role) == 0){
			uart_puts("Permission Ok");
		}else{
			uart_puts("Permission Failed");
		}
	}
 21a:	1d b8       	out	0x0d, r1	; 13
 21c:	80 ef       	ldi	r24, 0xF0	; 240
 21e:	8e b9       	out	0x0e, r24	; 14
 220:	9f ef       	ldi	r25, 0xFF	; 255
 222:	90 93 6a 00 	sts	0x006A, r25	; 0x80006a <__TEXT_REGION_LENGTH__+0x7e006a>
 226:	8d bb       	out	0x1d, r24	; 29
 228:	08 95       	ret

0000022a <main>:




 int main()
 {
 22a:	cf 93       	push	r28
 22c:	df 93       	push	r29
 22e:	cd b7       	in	r28, 0x3d	; 61
 230:	de b7       	in	r29, 0x3e	; 62
 232:	29 97       	sbiw	r28, 0x09	; 9
 234:	0f b6       	in	r0, 0x3f	; 63
 236:	f8 94       	cli
 238:	de bf       	out	0x3e, r29	; 62
 23a:	0f be       	out	0x3f, r0	; 63
 23c:	cd bf       	out	0x3d, r28	; 61
	uart_init();
 23e:	ec d0       	rcall	.+472    	; 0x418 <uart_init>
	uart_puts("test");
 240:	80 ec       	ldi	r24, 0xC0	; 192
 242:	91 e0       	ldi	r25, 0x01	; 1
	buttons_init();
 244:	f5 d0       	rcall	.+490    	; 0x430 <uart_puts>
	can_init();
 246:	e9 df       	rcall	.-46     	; 0x21a <buttons_init>
 248:	43 df       	rcall	.-378    	; 0xd0 <can_init>
	init_permissions_table();
 24a:	71 d0       	rcall	.+226    	; 0x32e <init_permissions_table>
 24c:	19 82       	std	Y+1, r1	; 0x01
	volatile uint8_t id[2] = {0 , 0};
 24e:	1a 82       	std	Y+2, r1	; 0x02
 250:	85 e0       	ldi	r24, 0x05	; 5
	char input[] = "0726";
 252:	e5 ec       	ldi	r30, 0xC5	; 197
 254:	f1 e0       	ldi	r31, 0x01	; 1
 256:	de 01       	movw	r26, r28
 258:	13 96       	adiw	r26, 0x03	; 3
 25a:	01 90       	ld	r0, Z+
 25c:	0d 92       	st	X+, r0
 25e:	8a 95       	dec	r24
 260:	e1 f7       	brne	.-8      	; 0x25a <main+0x30>
	uart_puts(input);
 262:	ce 01       	movw	r24, r28
 264:	03 96       	adiw	r24, 0x03	; 3
 266:	e4 d0       	rcall	.+456    	; 0x430 <uart_puts>
 268:	ae 01       	movw	r20, r28
	hex_to_bytes("0726", 4, id);
 26a:	4f 5f       	subi	r20, 0xFF	; 255
 26c:	5f 4f       	sbci	r21, 0xFF	; 255
 26e:	64 e0       	ldi	r22, 0x04	; 4
 270:	85 ec       	ldi	r24, 0xC5	; 197
 272:	91 e0       	ldi	r25, 0x01	; 1
 274:	7a df       	rcall	.-268    	; 0x16a <hex_to_bytes>
 276:	ae 01       	movw	r20, r28
	bytes_to_hex(id, 2 , input);
 278:	4d 5f       	subi	r20, 0xFD	; 253
 27a:	5f 4f       	sbci	r21, 0xFF	; 255
 27c:	62 e0       	ldi	r22, 0x02	; 2
 27e:	ce 01       	movw	r24, r28
 280:	01 96       	adiw	r24, 0x01	; 1
 282:	53 df       	rcall	.-346    	; 0x12a <bytes_to_hex>
	uart_puts(input);
 284:	ce 01       	movw	r24, r28
 286:	03 96       	adiw	r24, 0x03	; 3
 288:	d3 d0       	rcall	.+422    	; 0x430 <uart_puts>
 28a:	61 e0       	ldi	r22, 0x01	; 1
	volatile int result;
	result = check_permission(id, OWNER_ROLE); 
 28c:	ce 01       	movw	r24, r28
 28e:	01 96       	adiw	r24, 0x01	; 1
 290:	99 d0       	rcall	.+306    	; 0x3c4 <check_permission>
 292:	99 87       	std	Y+9, r25	; 0x09
 294:	88 87       	std	Y+8, r24	; 0x08
 296:	88 85       	ldd	r24, Y+8	; 0x08
 298:	99 85       	ldd	r25, Y+9	; 0x09
	return result;
 29a:	29 96       	adiw	r28, 0x09	; 9
 29c:	0f b6       	in	r0, 0x3f	; 63
			run_scenario2(TESTER_ROLE);
			break;	
		default : 
			break;
	}
 }
 29e:	f8 94       	cli
 2a0:	de bf       	out	0x3e, r29	; 62
 2a2:	0f be       	out	0x3f, r0	; 63
 2a4:	cd bf       	out	0x3d, r28	; 61
 2a6:	df 91       	pop	r29
 2a8:	cf 91       	pop	r28
 2aa:	08 95       	ret

000002ac <add_entry>:
	hex_to_bytes(hex, 4, id);
	add_entry(id, permissions);
	return 0;
}

int add_entry(can_id_t id, permissions_t permissions){
 2ac:	1f 93       	push	r17
 2ae:	cf 93       	push	r28
 2b0:	df 93       	push	r29
 2b2:	ec 01       	movw	r28, r24
 2b4:	16 2f       	mov	r17, r22
	entry_t *new_entry; 
	new_entry = malloc(sizeof(entry_t));
 2b6:	85 e0       	ldi	r24, 0x05	; 5
 2b8:	90 e0       	ldi	r25, 0x00	; 0
 2ba:	e9 d0       	rcall	.+466    	; 0x48e <malloc>
	new_entry->permissions = permissions;
 2bc:	fc 01       	movw	r30, r24
 2be:	12 83       	std	Z+2, r17	; 0x02
	memcpy(new_entry->id, id, sizeof(can_id_t));
 2c0:	28 81       	ld	r18, Y
 2c2:	39 81       	ldd	r19, Y+1	; 0x01
 2c4:	31 83       	std	Z+1, r19	; 0x01
 2c6:	20 83       	st	Z, r18
	entry_t *curr = permission_table->head;
 2c8:	a0 91 d0 01 	lds	r26, 0x01D0	; 0x8001d0 <__data_end>
 2cc:	b0 91 d1 01 	lds	r27, 0x01D1	; 0x8001d1 <__data_end+0x1>
 2d0:	ed 91       	ld	r30, X+
 2d2:	fc 91       	ld	r31, X
 2d4:	11 97       	sbiw	r26, 0x01	; 1
	if(curr != NULL){
 2d6:	30 97       	sbiw	r30, 0x00	; 0
 2d8:	11 f4       	brne	.+4      	; 0x2de <add_entry+0x32>
 2da:	09 c0       	rjmp	.+18     	; 0x2ee <add_entry+0x42>
		while(curr->successor != NULL){
			curr = curr->successor;
 2dc:	f9 01       	movw	r30, r18
	new_entry = malloc(sizeof(entry_t));
	new_entry->permissions = permissions;
	memcpy(new_entry->id, id, sizeof(can_id_t));
	entry_t *curr = permission_table->head;
	if(curr != NULL){
		while(curr->successor != NULL){
 2de:	23 81       	ldd	r18, Z+3	; 0x03
 2e0:	34 81       	ldd	r19, Z+4	; 0x04
 2e2:	21 15       	cp	r18, r1
 2e4:	31 05       	cpc	r19, r1
 2e6:	d1 f7       	brne	.-12     	; 0x2dc <add_entry+0x30>
			curr = curr->successor;
		}
		curr->successor = new_entry;
 2e8:	94 83       	std	Z+4, r25	; 0x04
 2ea:	83 83       	std	Z+3, r24	; 0x03
 2ec:	02 c0       	rjmp	.+4      	; 0x2f2 <add_entry+0x46>
	}else{
		permission_table->head = new_entry;
 2ee:	8d 93       	st	X+, r24
 2f0:	9c 93       	st	X, r25
	}
	return 0;
}
 2f2:	80 e0       	ldi	r24, 0x00	; 0
 2f4:	90 e0       	ldi	r25, 0x00	; 0
 2f6:	df 91       	pop	r29
 2f8:	cf 91       	pop	r28
 2fa:	1f 91       	pop	r17
 2fc:	08 95       	ret

000002fe <add_entry_hex>:
	add_entry_hex("0726", permissions);
	add_entry_hex("07E0", permissions);
	//add_entry_hex("0726", roles);
}

int add_entry_hex(char *hex, permissions_t permissions){
 2fe:	1f 93       	push	r17
 300:	cf 93       	push	r28
 302:	df 93       	push	r29
 304:	00 d0       	rcall	.+0      	; 0x306 <add_entry_hex+0x8>
 306:	cd b7       	in	r28, 0x3d	; 61
 308:	de b7       	in	r29, 0x3e	; 62
 30a:	16 2f       	mov	r17, r22
	can_id_t id;
	hex_to_bytes(hex, 4, id);
 30c:	ae 01       	movw	r20, r28
 30e:	4f 5f       	subi	r20, 0xFF	; 255
 310:	5f 4f       	sbci	r21, 0xFF	; 255
 312:	64 e0       	ldi	r22, 0x04	; 4
 314:	2a df       	rcall	.-428    	; 0x16a <hex_to_bytes>
	add_entry(id, permissions);
 316:	61 2f       	mov	r22, r17
 318:	ce 01       	movw	r24, r28
 31a:	01 96       	adiw	r24, 0x01	; 1
 31c:	c7 df       	rcall	.-114    	; 0x2ac <add_entry>
	return 0;
}
 31e:	80 e0       	ldi	r24, 0x00	; 0
 320:	90 e0       	ldi	r25, 0x00	; 0
 322:	0f 90       	pop	r0
 324:	0f 90       	pop	r0
 326:	df 91       	pop	r29
 328:	cf 91       	pop	r28
 32a:	1f 91       	pop	r17
 32c:	08 95       	ret

0000032e <init_permissions_table>:
#include <string.h>

permission_table_t *permission_table; 

void init_permissions_table(){
	permission_table = malloc(sizeof(permission_table_t));
 32e:	82 e0       	ldi	r24, 0x02	; 2
 330:	90 e0       	ldi	r25, 0x00	; 0
 332:	ad d0       	rcall	.+346    	; 0x48e <malloc>
 334:	90 93 d1 01 	sts	0x01D1, r25	; 0x8001d1 <__data_end+0x1>
 338:	80 93 d0 01 	sts	0x01D0, r24	; 0x8001d0 <__data_end>
	permissions_t permissions = 0b00001111;
	add_entry_hex("0726", permissions);
 33c:	6f e0       	ldi	r22, 0x0F	; 15
 33e:	85 ec       	ldi	r24, 0xC5	; 197
 340:	91 e0       	ldi	r25, 0x01	; 1
 342:	dd df       	rcall	.-70     	; 0x2fe <add_entry_hex>
	add_entry_hex("07E0", permissions);
 344:	6f e0       	ldi	r22, 0x0F	; 15
 346:	8a ec       	ldi	r24, 0xCA	; 202
 348:	91 e0       	ldi	r25, 0x01	; 1
 34a:	d9 cf       	rjmp	.-78     	; 0x2fe <add_entry_hex>
 34c:	08 95       	ret

0000034e <entrycmp>:
		permission_table->head = new_entry;
	}
	return 0;
}

int entrycmp(entry_t *entry, can_id_t msg_id){
 34e:	cf 93       	push	r28
 350:	df 93       	push	r29
 352:	1f 92       	push	r1
 354:	cd b7       	in	r28, 0x3d	; 61
 356:	de b7       	in	r29, 0x3e	; 62
	volatile uint8_t result;
	result = memcmp(entry->id, msg_id, 2);
 358:	42 e0       	ldi	r20, 0x02	; 2
 35a:	50 e0       	ldi	r21, 0x00	; 0
 35c:	b9 d1       	rcall	.+882    	; 0x6d0 <memcmp>
 35e:	89 83       	std	Y+1, r24	; 0x01
	return result;
 360:	89 81       	ldd	r24, Y+1	; 0x01
}
 362:	90 e0       	ldi	r25, 0x00	; 0
 364:	0f 90       	pop	r0
 366:	df 91       	pop	r29
 368:	cf 91       	pop	r28
 36a:	08 95       	ret

0000036c <find_entry>:

int find_entry(can_id_t msg_id, entry_t **dest){
 36c:	ef 92       	push	r14
 36e:	ff 92       	push	r15
 370:	0f 93       	push	r16
 372:	1f 93       	push	r17
 374:	cf 93       	push	r28
 376:	df 93       	push	r29
 378:	8c 01       	movw	r16, r24
 37a:	7b 01       	movw	r14, r22
	volatile entry_t *curr = permission_table->head;
 37c:	e0 91 d0 01 	lds	r30, 0x01D0	; 0x8001d0 <__data_end>
 380:	f0 91 d1 01 	lds	r31, 0x01D1	; 0x8001d1 <__data_end+0x1>
 384:	c0 81       	ld	r28, Z
 386:	d1 81       	ldd	r29, Z+1	; 0x01
	uart_puts(curr->id);
 388:	ce 01       	movw	r24, r28
 38a:	52 d0       	rcall	.+164    	; 0x430 <uart_puts>
	while(curr != NULL){
 38c:	20 97       	sbiw	r28, 0x00	; 0
 38e:	89 f0       	breq	.+34     	; 0x3b2 <find_entry+0x46>
		if(entrycmp(curr, msg_id) == 0){
 390:	b8 01       	movw	r22, r16
 392:	ce 01       	movw	r24, r28
 394:	dc df       	rcall	.-72     	; 0x34e <entrycmp>
 396:	00 97       	sbiw	r24, 0x00	; 0
 398:	21 f4       	brne	.+8      	; 0x3a2 <find_entry+0x36>
			*dest = curr;
 39a:	f7 01       	movw	r30, r14
 39c:	d1 83       	std	Z+1, r29	; 0x01
 39e:	c0 83       	st	Z, r28
			return 0;
 3a0:	0a c0       	rjmp	.+20     	; 0x3b6 <find_entry+0x4a>
		}else{
			curr = curr->successor;
 3a2:	0b 80       	ldd	r0, Y+3	; 0x03
 3a4:	dc 81       	ldd	r29, Y+4	; 0x04
 3a6:	c0 2d       	mov	r28, r0
}

int find_entry(can_id_t msg_id, entry_t **dest){
	volatile entry_t *curr = permission_table->head;
	uart_puts(curr->id);
	while(curr != NULL){
 3a8:	20 97       	sbiw	r28, 0x00	; 0
 3aa:	91 f7       	brne	.-28     	; 0x390 <find_entry+0x24>
			return 0;
		}else{
			curr = curr->successor;
		}
	}
	return 1;
 3ac:	81 e0       	ldi	r24, 0x01	; 1
 3ae:	90 e0       	ldi	r25, 0x00	; 0
 3b0:	02 c0       	rjmp	.+4      	; 0x3b6 <find_entry+0x4a>
 3b2:	81 e0       	ldi	r24, 0x01	; 1
 3b4:	90 e0       	ldi	r25, 0x00	; 0
}
 3b6:	df 91       	pop	r29
 3b8:	cf 91       	pop	r28
 3ba:	1f 91       	pop	r17
 3bc:	0f 91       	pop	r16
 3be:	ff 90       	pop	r15
 3c0:	ef 90       	pop	r14
 3c2:	08 95       	ret

000003c4 <check_permission>:

int check_permission(can_id_t msg_id, permissions_t role){
 3c4:	1f 93       	push	r17
 3c6:	cf 93       	push	r28
 3c8:	df 93       	push	r29
 3ca:	1f 92       	push	r1
 3cc:	cd b7       	in	r28, 0x3d	; 61
 3ce:	de b7       	in	r29, 0x3e	; 62
 3d0:	16 2f       	mov	r17, r22
	volatile entry_t **adress;
	if(find_entry(msg_id, adress)) return 1;
 3d2:	60 e0       	ldi	r22, 0x00	; 0
 3d4:	70 e0       	ldi	r23, 0x00	; 0
 3d6:	ca df       	rcall	.-108    	; 0x36c <find_entry>
 3d8:	00 97       	sbiw	r24, 0x00	; 0
 3da:	b9 f4       	brne	.+46     	; 0x40a <__LOCK_REGION_LENGTH__+0xa>
	volatile entry_t *entry = *adress;
 3dc:	e0 91 00 00 	lds	r30, 0x0000	; 0x800000 <__TEXT_REGION_LENGTH__+0x7e0000>
 3e0:	f0 91 01 00 	lds	r31, 0x0001	; 0x800001 <__TEXT_REGION_LENGTH__+0x7e0001>
	volatile uint8_t test = entry->permissions;
 3e4:	22 81       	ldd	r18, Z+2	; 0x02
 3e6:	29 83       	std	Y+1, r18	; 0x01
	if((entry->permissions && role) == role) return 0; 
 3e8:	22 81       	ldd	r18, Z+2	; 0x02
 3ea:	22 23       	and	r18, r18
 3ec:	29 f0       	breq	.+10     	; 0x3f8 <check_permission+0x34>
 3ee:	11 23       	and	r17, r17
 3f0:	71 f0       	breq	.+28     	; 0x40e <__LOCK_REGION_LENGTH__+0xe>
 3f2:	21 e0       	ldi	r18, 0x01	; 1
 3f4:	30 e0       	ldi	r19, 0x00	; 0
 3f6:	01 c0       	rjmp	.+2      	; 0x3fa <check_permission+0x36>
 3f8:	9c 01       	movw	r18, r24
 3fa:	61 2f       	mov	r22, r17
 3fc:	70 e0       	ldi	r23, 0x00	; 0
 3fe:	26 17       	cp	r18, r22
 400:	37 07       	cpc	r19, r23
 402:	29 f0       	breq	.+10     	; 0x40e <__LOCK_REGION_LENGTH__+0xe>
	return 2;
 404:	82 e0       	ldi	r24, 0x02	; 2
 406:	90 e0       	ldi	r25, 0x00	; 0
 408:	02 c0       	rjmp	.+4      	; 0x40e <__LOCK_REGION_LENGTH__+0xe>
	return 1;
}

int check_permission(can_id_t msg_id, permissions_t role){
	volatile entry_t **adress;
	if(find_entry(msg_id, adress)) return 1;
 40a:	81 e0       	ldi	r24, 0x01	; 1
 40c:	90 e0       	ldi	r25, 0x00	; 0
	volatile entry_t *entry = *adress;
	volatile uint8_t test = entry->permissions;
	if((entry->permissions && role) == role) return 0; 
	return 2;
 40e:	0f 90       	pop	r0
 410:	df 91       	pop	r29
 412:	cf 91       	pop	r28
 414:	1f 91       	pop	r17
 416:	08 95       	ret

00000418 <uart_init>:
#include <avr/io.h>
#include <string.h>
#include "uart_f.h"

void uart_init(){
	UBRR0H = (BAUD_PRESCALE >> 8); // Load upper 8-bits of the baud rate value into the high byte of the UBRR register
 418:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
	UBRR0L = BAUD_PRESCALE; // Load lower 8-bits of the baud rate value into the low byte of the UBRR register
 41c:	83 e3       	ldi	r24, 0x33	; 51
 41e:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
	UCSR0C = (0<<UMSEL0) | (0<<UPM0) | (1<<USBS0) | (3<<UCSZ0);
 422:	8e e0       	ldi	r24, 0x0E	; 14
 424:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>
	UCSR0B = (1<<RXEN0) | (1<<TXEN0);
 428:	88 e1       	ldi	r24, 0x18	; 24
 42a:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
 42e:	08 95       	ret

00000430 <uart_puts>:
}

void uart_puts(char* s){
 430:	cf 93       	push	r28
 432:	df 93       	push	r29
	int i;
	int len = strlen(s);
 434:	fc 01       	movw	r30, r24
 436:	01 90       	ld	r0, Z+
 438:	00 20       	and	r0, r0
 43a:	e9 f7       	brne	.-6      	; 0x436 <uart_puts+0x6>
 43c:	31 97       	sbiw	r30, 0x01	; 1
 43e:	e8 1b       	sub	r30, r24
 440:	f9 0b       	sbc	r31, r25
	for (i = 0; i < len; i++){
 442:	1e 16       	cp	r1, r30
 444:	1f 06       	cpc	r1, r31
 446:	84 f4       	brge	.+32     	; 0x468 <uart_puts+0x38>
 448:	dc 01       	movw	r26, r24
 44a:	9c 01       	movw	r18, r24
 44c:	2e 0f       	add	r18, r30
 44e:	3f 1f       	adc	r19, r31
		while(!( UCSR0A & 0X20));
 450:	e0 ec       	ldi	r30, 0xC0	; 192
 452:	f0 e0       	ldi	r31, 0x00	; 0
		UDR0=s[i];
 454:	c6 ec       	ldi	r28, 0xC6	; 198
 456:	d0 e0       	ldi	r29, 0x00	; 0

void uart_puts(char* s){
	int i;
	int len = strlen(s);
	for (i = 0; i < len; i++){
		while(!( UCSR0A & 0X20));
 458:	90 81       	ld	r25, Z
 45a:	95 ff       	sbrs	r25, 5
 45c:	fd cf       	rjmp	.-6      	; 0x458 <uart_puts+0x28>
		UDR0=s[i];
 45e:	9d 91       	ld	r25, X+
 460:	98 83       	st	Y, r25
}

void uart_puts(char* s){
	int i;
	int len = strlen(s);
	for (i = 0; i < len; i++){
 462:	a2 17       	cp	r26, r18
 464:	b3 07       	cpc	r27, r19
 466:	c1 f7       	brne	.-16     	; 0x458 <uart_puts+0x28>
		while(!( UCSR0A & 0X20));
		UDR0=s[i];
	}
	while(!( UCSR0A & 0X20));
 468:	e0 ec       	ldi	r30, 0xC0	; 192
 46a:	f0 e0       	ldi	r31, 0x00	; 0
 46c:	80 81       	ld	r24, Z
 46e:	85 ff       	sbrs	r24, 5
 470:	fd cf       	rjmp	.-6      	; 0x46c <uart_puts+0x3c>
	UDR0 = 13;
 472:	8d e0       	ldi	r24, 0x0D	; 13
 474:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
	while(!( UCSR0A & 0X20));
 478:	e0 ec       	ldi	r30, 0xC0	; 192
 47a:	f0 e0       	ldi	r31, 0x00	; 0
 47c:	80 81       	ld	r24, Z
 47e:	85 ff       	sbrs	r24, 5
 480:	fd cf       	rjmp	.-6      	; 0x47c <uart_puts+0x4c>
	UDR0 = 10;
 482:	8a e0       	ldi	r24, 0x0A	; 10
 484:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
}
 488:	df 91       	pop	r29
 48a:	cf 91       	pop	r28
 48c:	08 95       	ret

0000048e <malloc>:
 48e:	0f 93       	push	r16
 490:	1f 93       	push	r17
 492:	cf 93       	push	r28
 494:	df 93       	push	r29
 496:	82 30       	cpi	r24, 0x02	; 2
 498:	91 05       	cpc	r25, r1
 49a:	10 f4       	brcc	.+4      	; 0x4a0 <malloc+0x12>
 49c:	82 e0       	ldi	r24, 0x02	; 2
 49e:	90 e0       	ldi	r25, 0x00	; 0
 4a0:	e0 91 d4 01 	lds	r30, 0x01D4	; 0x8001d4 <__flp>
 4a4:	f0 91 d5 01 	lds	r31, 0x01D5	; 0x8001d5 <__flp+0x1>
 4a8:	20 e0       	ldi	r18, 0x00	; 0
 4aa:	30 e0       	ldi	r19, 0x00	; 0
 4ac:	a0 e0       	ldi	r26, 0x00	; 0
 4ae:	b0 e0       	ldi	r27, 0x00	; 0
 4b0:	30 97       	sbiw	r30, 0x00	; 0
 4b2:	19 f1       	breq	.+70     	; 0x4fa <malloc+0x6c>
 4b4:	40 81       	ld	r20, Z
 4b6:	51 81       	ldd	r21, Z+1	; 0x01
 4b8:	02 81       	ldd	r16, Z+2	; 0x02
 4ba:	13 81       	ldd	r17, Z+3	; 0x03
 4bc:	48 17       	cp	r20, r24
 4be:	59 07       	cpc	r21, r25
 4c0:	c8 f0       	brcs	.+50     	; 0x4f4 <malloc+0x66>
 4c2:	84 17       	cp	r24, r20
 4c4:	95 07       	cpc	r25, r21
 4c6:	69 f4       	brne	.+26     	; 0x4e2 <malloc+0x54>
 4c8:	10 97       	sbiw	r26, 0x00	; 0
 4ca:	31 f0       	breq	.+12     	; 0x4d8 <malloc+0x4a>
 4cc:	12 96       	adiw	r26, 0x02	; 2
 4ce:	0c 93       	st	X, r16
 4d0:	12 97       	sbiw	r26, 0x02	; 2
 4d2:	13 96       	adiw	r26, 0x03	; 3
 4d4:	1c 93       	st	X, r17
 4d6:	27 c0       	rjmp	.+78     	; 0x526 <malloc+0x98>
 4d8:	00 93 d4 01 	sts	0x01D4, r16	; 0x8001d4 <__flp>
 4dc:	10 93 d5 01 	sts	0x01D5, r17	; 0x8001d5 <__flp+0x1>
 4e0:	22 c0       	rjmp	.+68     	; 0x526 <malloc+0x98>
 4e2:	21 15       	cp	r18, r1
 4e4:	31 05       	cpc	r19, r1
 4e6:	19 f0       	breq	.+6      	; 0x4ee <malloc+0x60>
 4e8:	42 17       	cp	r20, r18
 4ea:	53 07       	cpc	r21, r19
 4ec:	18 f4       	brcc	.+6      	; 0x4f4 <malloc+0x66>
 4ee:	9a 01       	movw	r18, r20
 4f0:	bd 01       	movw	r22, r26
 4f2:	ef 01       	movw	r28, r30
 4f4:	df 01       	movw	r26, r30
 4f6:	f8 01       	movw	r30, r16
 4f8:	db cf       	rjmp	.-74     	; 0x4b0 <malloc+0x22>
 4fa:	21 15       	cp	r18, r1
 4fc:	31 05       	cpc	r19, r1
 4fe:	f9 f0       	breq	.+62     	; 0x53e <malloc+0xb0>
 500:	28 1b       	sub	r18, r24
 502:	39 0b       	sbc	r19, r25
 504:	24 30       	cpi	r18, 0x04	; 4
 506:	31 05       	cpc	r19, r1
 508:	80 f4       	brcc	.+32     	; 0x52a <malloc+0x9c>
 50a:	8a 81       	ldd	r24, Y+2	; 0x02
 50c:	9b 81       	ldd	r25, Y+3	; 0x03
 50e:	61 15       	cp	r22, r1
 510:	71 05       	cpc	r23, r1
 512:	21 f0       	breq	.+8      	; 0x51c <malloc+0x8e>
 514:	fb 01       	movw	r30, r22
 516:	93 83       	std	Z+3, r25	; 0x03
 518:	82 83       	std	Z+2, r24	; 0x02
 51a:	04 c0       	rjmp	.+8      	; 0x524 <malloc+0x96>
 51c:	90 93 d5 01 	sts	0x01D5, r25	; 0x8001d5 <__flp+0x1>
 520:	80 93 d4 01 	sts	0x01D4, r24	; 0x8001d4 <__flp>
 524:	fe 01       	movw	r30, r28
 526:	32 96       	adiw	r30, 0x02	; 2
 528:	44 c0       	rjmp	.+136    	; 0x5b2 <malloc+0x124>
 52a:	fe 01       	movw	r30, r28
 52c:	e2 0f       	add	r30, r18
 52e:	f3 1f       	adc	r31, r19
 530:	81 93       	st	Z+, r24
 532:	91 93       	st	Z+, r25
 534:	22 50       	subi	r18, 0x02	; 2
 536:	31 09       	sbc	r19, r1
 538:	39 83       	std	Y+1, r19	; 0x01
 53a:	28 83       	st	Y, r18
 53c:	3a c0       	rjmp	.+116    	; 0x5b2 <malloc+0x124>
 53e:	20 91 d2 01 	lds	r18, 0x01D2	; 0x8001d2 <__brkval>
 542:	30 91 d3 01 	lds	r19, 0x01D3	; 0x8001d3 <__brkval+0x1>
 546:	23 2b       	or	r18, r19
 548:	41 f4       	brne	.+16     	; 0x55a <malloc+0xcc>
 54a:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__malloc_heap_start>
 54e:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <__malloc_heap_start+0x1>
 552:	30 93 d3 01 	sts	0x01D3, r19	; 0x8001d3 <__brkval+0x1>
 556:	20 93 d2 01 	sts	0x01D2, r18	; 0x8001d2 <__brkval>
 55a:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__data_start>
 55e:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__data_start+0x1>
 562:	21 15       	cp	r18, r1
 564:	31 05       	cpc	r19, r1
 566:	41 f4       	brne	.+16     	; 0x578 <malloc+0xea>
 568:	2d b7       	in	r18, 0x3d	; 61
 56a:	3e b7       	in	r19, 0x3e	; 62
 56c:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
 570:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
 574:	24 1b       	sub	r18, r20
 576:	35 0b       	sbc	r19, r21
 578:	e0 91 d2 01 	lds	r30, 0x01D2	; 0x8001d2 <__brkval>
 57c:	f0 91 d3 01 	lds	r31, 0x01D3	; 0x8001d3 <__brkval+0x1>
 580:	e2 17       	cp	r30, r18
 582:	f3 07       	cpc	r31, r19
 584:	a0 f4       	brcc	.+40     	; 0x5ae <malloc+0x120>
 586:	2e 1b       	sub	r18, r30
 588:	3f 0b       	sbc	r19, r31
 58a:	28 17       	cp	r18, r24
 58c:	39 07       	cpc	r19, r25
 58e:	78 f0       	brcs	.+30     	; 0x5ae <malloc+0x120>
 590:	ac 01       	movw	r20, r24
 592:	4e 5f       	subi	r20, 0xFE	; 254
 594:	5f 4f       	sbci	r21, 0xFF	; 255
 596:	24 17       	cp	r18, r20
 598:	35 07       	cpc	r19, r21
 59a:	48 f0       	brcs	.+18     	; 0x5ae <malloc+0x120>
 59c:	4e 0f       	add	r20, r30
 59e:	5f 1f       	adc	r21, r31
 5a0:	50 93 d3 01 	sts	0x01D3, r21	; 0x8001d3 <__brkval+0x1>
 5a4:	40 93 d2 01 	sts	0x01D2, r20	; 0x8001d2 <__brkval>
 5a8:	81 93       	st	Z+, r24
 5aa:	91 93       	st	Z+, r25
 5ac:	02 c0       	rjmp	.+4      	; 0x5b2 <malloc+0x124>
 5ae:	e0 e0       	ldi	r30, 0x00	; 0
 5b0:	f0 e0       	ldi	r31, 0x00	; 0
 5b2:	cf 01       	movw	r24, r30
 5b4:	df 91       	pop	r29
 5b6:	cf 91       	pop	r28
 5b8:	1f 91       	pop	r17
 5ba:	0f 91       	pop	r16
 5bc:	08 95       	ret

000005be <free>:
 5be:	cf 93       	push	r28
 5c0:	df 93       	push	r29
 5c2:	00 97       	sbiw	r24, 0x00	; 0
 5c4:	09 f4       	brne	.+2      	; 0x5c8 <free+0xa>
 5c6:	81 c0       	rjmp	.+258    	; 0x6ca <free+0x10c>
 5c8:	fc 01       	movw	r30, r24
 5ca:	32 97       	sbiw	r30, 0x02	; 2
 5cc:	13 82       	std	Z+3, r1	; 0x03
 5ce:	12 82       	std	Z+2, r1	; 0x02
 5d0:	a0 91 d4 01 	lds	r26, 0x01D4	; 0x8001d4 <__flp>
 5d4:	b0 91 d5 01 	lds	r27, 0x01D5	; 0x8001d5 <__flp+0x1>
 5d8:	10 97       	sbiw	r26, 0x00	; 0
 5da:	81 f4       	brne	.+32     	; 0x5fc <free+0x3e>
 5dc:	20 81       	ld	r18, Z
 5de:	31 81       	ldd	r19, Z+1	; 0x01
 5e0:	82 0f       	add	r24, r18
 5e2:	93 1f       	adc	r25, r19
 5e4:	20 91 d2 01 	lds	r18, 0x01D2	; 0x8001d2 <__brkval>
 5e8:	30 91 d3 01 	lds	r19, 0x01D3	; 0x8001d3 <__brkval+0x1>
 5ec:	28 17       	cp	r18, r24
 5ee:	39 07       	cpc	r19, r25
 5f0:	51 f5       	brne	.+84     	; 0x646 <free+0x88>
 5f2:	f0 93 d3 01 	sts	0x01D3, r31	; 0x8001d3 <__brkval+0x1>
 5f6:	e0 93 d2 01 	sts	0x01D2, r30	; 0x8001d2 <__brkval>
 5fa:	67 c0       	rjmp	.+206    	; 0x6ca <free+0x10c>
 5fc:	ed 01       	movw	r28, r26
 5fe:	20 e0       	ldi	r18, 0x00	; 0
 600:	30 e0       	ldi	r19, 0x00	; 0
 602:	ce 17       	cp	r28, r30
 604:	df 07       	cpc	r29, r31
 606:	40 f4       	brcc	.+16     	; 0x618 <free+0x5a>
 608:	4a 81       	ldd	r20, Y+2	; 0x02
 60a:	5b 81       	ldd	r21, Y+3	; 0x03
 60c:	9e 01       	movw	r18, r28
 60e:	41 15       	cp	r20, r1
 610:	51 05       	cpc	r21, r1
 612:	f1 f0       	breq	.+60     	; 0x650 <free+0x92>
 614:	ea 01       	movw	r28, r20
 616:	f5 cf       	rjmp	.-22     	; 0x602 <free+0x44>
 618:	d3 83       	std	Z+3, r29	; 0x03
 61a:	c2 83       	std	Z+2, r28	; 0x02
 61c:	40 81       	ld	r20, Z
 61e:	51 81       	ldd	r21, Z+1	; 0x01
 620:	84 0f       	add	r24, r20
 622:	95 1f       	adc	r25, r21
 624:	c8 17       	cp	r28, r24
 626:	d9 07       	cpc	r29, r25
 628:	59 f4       	brne	.+22     	; 0x640 <free+0x82>
 62a:	88 81       	ld	r24, Y
 62c:	99 81       	ldd	r25, Y+1	; 0x01
 62e:	84 0f       	add	r24, r20
 630:	95 1f       	adc	r25, r21
 632:	02 96       	adiw	r24, 0x02	; 2
 634:	91 83       	std	Z+1, r25	; 0x01
 636:	80 83       	st	Z, r24
 638:	8a 81       	ldd	r24, Y+2	; 0x02
 63a:	9b 81       	ldd	r25, Y+3	; 0x03
 63c:	93 83       	std	Z+3, r25	; 0x03
 63e:	82 83       	std	Z+2, r24	; 0x02
 640:	21 15       	cp	r18, r1
 642:	31 05       	cpc	r19, r1
 644:	29 f4       	brne	.+10     	; 0x650 <free+0x92>
 646:	f0 93 d5 01 	sts	0x01D5, r31	; 0x8001d5 <__flp+0x1>
 64a:	e0 93 d4 01 	sts	0x01D4, r30	; 0x8001d4 <__flp>
 64e:	3d c0       	rjmp	.+122    	; 0x6ca <free+0x10c>
 650:	e9 01       	movw	r28, r18
 652:	fb 83       	std	Y+3, r31	; 0x03
 654:	ea 83       	std	Y+2, r30	; 0x02
 656:	49 91       	ld	r20, Y+
 658:	59 91       	ld	r21, Y+
 65a:	c4 0f       	add	r28, r20
 65c:	d5 1f       	adc	r29, r21
 65e:	ec 17       	cp	r30, r28
 660:	fd 07       	cpc	r31, r29
 662:	61 f4       	brne	.+24     	; 0x67c <free+0xbe>
 664:	80 81       	ld	r24, Z
 666:	91 81       	ldd	r25, Z+1	; 0x01
 668:	84 0f       	add	r24, r20
 66a:	95 1f       	adc	r25, r21
 66c:	02 96       	adiw	r24, 0x02	; 2
 66e:	e9 01       	movw	r28, r18
 670:	99 83       	std	Y+1, r25	; 0x01
 672:	88 83       	st	Y, r24
 674:	82 81       	ldd	r24, Z+2	; 0x02
 676:	93 81       	ldd	r25, Z+3	; 0x03
 678:	9b 83       	std	Y+3, r25	; 0x03
 67a:	8a 83       	std	Y+2, r24	; 0x02
 67c:	e0 e0       	ldi	r30, 0x00	; 0
 67e:	f0 e0       	ldi	r31, 0x00	; 0
 680:	12 96       	adiw	r26, 0x02	; 2
 682:	8d 91       	ld	r24, X+
 684:	9c 91       	ld	r25, X
 686:	13 97       	sbiw	r26, 0x03	; 3
 688:	00 97       	sbiw	r24, 0x00	; 0
 68a:	19 f0       	breq	.+6      	; 0x692 <free+0xd4>
 68c:	fd 01       	movw	r30, r26
 68e:	dc 01       	movw	r26, r24
 690:	f7 cf       	rjmp	.-18     	; 0x680 <free+0xc2>
 692:	8d 91       	ld	r24, X+
 694:	9c 91       	ld	r25, X
 696:	11 97       	sbiw	r26, 0x01	; 1
 698:	9d 01       	movw	r18, r26
 69a:	2e 5f       	subi	r18, 0xFE	; 254
 69c:	3f 4f       	sbci	r19, 0xFF	; 255
 69e:	82 0f       	add	r24, r18
 6a0:	93 1f       	adc	r25, r19
 6a2:	20 91 d2 01 	lds	r18, 0x01D2	; 0x8001d2 <__brkval>
 6a6:	30 91 d3 01 	lds	r19, 0x01D3	; 0x8001d3 <__brkval+0x1>
 6aa:	28 17       	cp	r18, r24
 6ac:	39 07       	cpc	r19, r25
 6ae:	69 f4       	brne	.+26     	; 0x6ca <free+0x10c>
 6b0:	30 97       	sbiw	r30, 0x00	; 0
 6b2:	29 f4       	brne	.+10     	; 0x6be <free+0x100>
 6b4:	10 92 d5 01 	sts	0x01D5, r1	; 0x8001d5 <__flp+0x1>
 6b8:	10 92 d4 01 	sts	0x01D4, r1	; 0x8001d4 <__flp>
 6bc:	02 c0       	rjmp	.+4      	; 0x6c2 <free+0x104>
 6be:	13 82       	std	Z+3, r1	; 0x03
 6c0:	12 82       	std	Z+2, r1	; 0x02
 6c2:	b0 93 d3 01 	sts	0x01D3, r27	; 0x8001d3 <__brkval+0x1>
 6c6:	a0 93 d2 01 	sts	0x01D2, r26	; 0x8001d2 <__brkval>
 6ca:	df 91       	pop	r29
 6cc:	cf 91       	pop	r28
 6ce:	08 95       	ret

000006d0 <memcmp>:
 6d0:	fb 01       	movw	r30, r22
 6d2:	dc 01       	movw	r26, r24
 6d4:	04 c0       	rjmp	.+8      	; 0x6de <memcmp+0xe>
 6d6:	8d 91       	ld	r24, X+
 6d8:	01 90       	ld	r0, Z+
 6da:	80 19       	sub	r24, r0
 6dc:	21 f4       	brne	.+8      	; 0x6e6 <memcmp+0x16>
 6de:	41 50       	subi	r20, 0x01	; 1
 6e0:	50 40       	sbci	r21, 0x00	; 0
 6e2:	c8 f7       	brcc	.-14     	; 0x6d6 <memcmp+0x6>
 6e4:	88 1b       	sub	r24, r24
 6e6:	99 0b       	sbc	r25, r25
 6e8:	08 95       	ret

000006ea <memset>:
 6ea:	dc 01       	movw	r26, r24
 6ec:	01 c0       	rjmp	.+2      	; 0x6f0 <memset+0x6>
 6ee:	6d 93       	st	X+, r22
 6f0:	41 50       	subi	r20, 0x01	; 1
 6f2:	50 40       	sbci	r21, 0x00	; 0
 6f4:	e0 f7       	brcc	.-8      	; 0x6ee <memset+0x4>
 6f6:	08 95       	ret

000006f8 <_exit>:
 6f8:	f8 94       	cli

000006fa <__stop_program>:
 6fa:	ff cf       	rjmp	.-2      	; 0x6fa <__stop_program>
