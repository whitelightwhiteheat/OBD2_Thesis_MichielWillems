
Gateway.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000012  00800100  00000266  000002fa  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000266  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000009  00800112  00800112  0000030c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000030c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000033c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000068  00000000  00000000  0000037c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000e51  00000000  00000000  000003e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000b6c  00000000  00000000  00001235  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000511  00000000  00000000  00001da1  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000108  00000000  00000000  000022b4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000005f3  00000000  00000000  000023bc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000001e3  00000000  00000000  000029af  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000048  00000000  00000000  00002b92  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	49 c0       	rjmp	.+146    	; 0x94 <__ctors_end>
   2:	00 00       	nop
   4:	64 c0       	rjmp	.+200    	; 0xce <__bad_interrupt>
   6:	00 00       	nop
   8:	62 c0       	rjmp	.+196    	; 0xce <__bad_interrupt>
   a:	00 00       	nop
   c:	60 c0       	rjmp	.+192    	; 0xce <__bad_interrupt>
   e:	00 00       	nop
  10:	5e c0       	rjmp	.+188    	; 0xce <__bad_interrupt>
  12:	00 00       	nop
  14:	5c c0       	rjmp	.+184    	; 0xce <__bad_interrupt>
  16:	00 00       	nop
  18:	5a c0       	rjmp	.+180    	; 0xce <__bad_interrupt>
  1a:	00 00       	nop
  1c:	58 c0       	rjmp	.+176    	; 0xce <__bad_interrupt>
  1e:	00 00       	nop
  20:	56 c0       	rjmp	.+172    	; 0xce <__bad_interrupt>
  22:	00 00       	nop
  24:	54 c0       	rjmp	.+168    	; 0xce <__bad_interrupt>
  26:	00 00       	nop
  28:	52 c0       	rjmp	.+164    	; 0xce <__bad_interrupt>
  2a:	00 00       	nop
  2c:	50 c0       	rjmp	.+160    	; 0xce <__bad_interrupt>
  2e:	00 00       	nop
  30:	4e c0       	rjmp	.+156    	; 0xce <__bad_interrupt>
  32:	00 00       	nop
  34:	4c c0       	rjmp	.+152    	; 0xce <__bad_interrupt>
  36:	00 00       	nop
  38:	4a c0       	rjmp	.+148    	; 0xce <__bad_interrupt>
  3a:	00 00       	nop
  3c:	48 c0       	rjmp	.+144    	; 0xce <__bad_interrupt>
  3e:	00 00       	nop
  40:	46 c0       	rjmp	.+140    	; 0xce <__bad_interrupt>
  42:	00 00       	nop
  44:	44 c0       	rjmp	.+136    	; 0xce <__bad_interrupt>
  46:	00 00       	nop
  48:	8d c0       	rjmp	.+282    	; 0x164 <__vector_18>
  4a:	00 00       	nop
  4c:	40 c0       	rjmp	.+128    	; 0xce <__bad_interrupt>
  4e:	00 00       	nop
  50:	3e c0       	rjmp	.+124    	; 0xce <__bad_interrupt>
  52:	00 00       	nop
  54:	3c c0       	rjmp	.+120    	; 0xce <__bad_interrupt>
  56:	00 00       	nop
  58:	3a c0       	rjmp	.+116    	; 0xce <__bad_interrupt>
  5a:	00 00       	nop
  5c:	38 c0       	rjmp	.+112    	; 0xce <__bad_interrupt>
  5e:	00 00       	nop
  60:	36 c0       	rjmp	.+108    	; 0xce <__bad_interrupt>
  62:	00 00       	nop
  64:	34 c0       	rjmp	.+104    	; 0xce <__bad_interrupt>
  66:	00 00       	nop
  68:	32 c0       	rjmp	.+100    	; 0xce <__bad_interrupt>
  6a:	00 00       	nop
  6c:	30 c0       	rjmp	.+96     	; 0xce <__bad_interrupt>
  6e:	00 00       	nop
  70:	2e c0       	rjmp	.+92     	; 0xce <__bad_interrupt>
  72:	00 00       	nop
  74:	2c c0       	rjmp	.+88     	; 0xce <__bad_interrupt>
  76:	00 00       	nop
  78:	2a c0       	rjmp	.+84     	; 0xce <__bad_interrupt>
  7a:	00 00       	nop
  7c:	28 c0       	rjmp	.+80     	; 0xce <__bad_interrupt>
  7e:	00 00       	nop
  80:	26 c0       	rjmp	.+76     	; 0xce <__bad_interrupt>
  82:	00 00       	nop
  84:	24 c0       	rjmp	.+72     	; 0xce <__bad_interrupt>
  86:	00 00       	nop
  88:	22 c0       	rjmp	.+68     	; 0xce <__bad_interrupt>
  8a:	00 00       	nop
  8c:	20 c0       	rjmp	.+64     	; 0xce <__bad_interrupt>
  8e:	00 00       	nop
  90:	1e c0       	rjmp	.+60     	; 0xce <__bad_interrupt>
	...

00000094 <__ctors_end>:
  94:	11 24       	eor	r1, r1
  96:	1f be       	out	0x3f, r1	; 63
  98:	cf ef       	ldi	r28, 0xFF	; 255
  9a:	d0 e1       	ldi	r29, 0x10	; 16
  9c:	de bf       	out	0x3e, r29	; 62
  9e:	cd bf       	out	0x3d, r28	; 61

000000a0 <__do_copy_data>:
  a0:	11 e0       	ldi	r17, 0x01	; 1
  a2:	a0 e0       	ldi	r26, 0x00	; 0
  a4:	b1 e0       	ldi	r27, 0x01	; 1
  a6:	e6 e6       	ldi	r30, 0x66	; 102
  a8:	f2 e0       	ldi	r31, 0x02	; 2
  aa:	00 e0       	ldi	r16, 0x00	; 0
  ac:	0b bf       	out	0x3b, r16	; 59
  ae:	02 c0       	rjmp	.+4      	; 0xb4 <__do_copy_data+0x14>
  b0:	07 90       	elpm	r0, Z+
  b2:	0d 92       	st	X+, r0
  b4:	a2 31       	cpi	r26, 0x12	; 18
  b6:	b1 07       	cpc	r27, r17
  b8:	d9 f7       	brne	.-10     	; 0xb0 <__do_copy_data+0x10>

000000ba <__do_clear_bss>:
  ba:	21 e0       	ldi	r18, 0x01	; 1
  bc:	a2 e1       	ldi	r26, 0x12	; 18
  be:	b1 e0       	ldi	r27, 0x01	; 1
  c0:	01 c0       	rjmp	.+2      	; 0xc4 <.do_clear_bss_start>

000000c2 <.do_clear_bss_loop>:
  c2:	1d 92       	st	X+, r1

000000c4 <.do_clear_bss_start>:
  c4:	ab 31       	cpi	r26, 0x1B	; 27
  c6:	b2 07       	cpc	r27, r18
  c8:	e1 f7       	brne	.-8      	; 0xc2 <.do_clear_bss_loop>
  ca:	9d d0       	rcall	.+314    	; 0x206 <main>
  cc:	ca c0       	rjmp	.+404    	; 0x262 <_exit>

000000ce <__bad_interrupt>:
  ce:	98 cf       	rjmp	.-208    	; 0x0 <__vectors>

000000d0 <CAN_INIT>:
	}

	//  (1 << CONMOB0) | (1 << DLC3)
	CANCDMOB = (1 << CONMOB0) | (1 << DLC3); //enable transmission!! , data length =8

	CANSTMOB = 0x00;      // clear flag
  d0:	cf 93       	push	r28
  d2:	df 93       	push	r29
  d4:	f8 94       	cli
  d6:	81 e0       	ldi	r24, 0x01	; 1
  d8:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
  dc:	80 ea       	ldi	r24, 0xA0	; 160
  de:	80 93 db 00 	sts	0x00DB, r24	; 0x8000db <__TEXT_REGION_LENGTH__+0x7e00db>
  e2:	82 e0       	ldi	r24, 0x02	; 2
  e4:	80 93 de 00 	sts	0x00DE, r24	; 0x8000de <__TEXT_REGION_LENGTH__+0x7e00de>
  e8:	10 92 df 00 	sts	0x00DF, r1	; 0x8000df <__TEXT_REGION_LENGTH__+0x7e00df>
  ec:	ea ed       	ldi	r30, 0xDA	; 218
  ee:	f0 e0       	ldi	r31, 0x00	; 0
  f0:	80 81       	ld	r24, Z
  f2:	80 83       	st	Z, r24
  f4:	80 e0       	ldi	r24, 0x00	; 0
  f6:	cd ee       	ldi	r28, 0xED	; 237
  f8:	d0 e0       	ldi	r29, 0x00	; 0
  fa:	af ee       	ldi	r26, 0xEF	; 239
  fc:	b0 e0       	ldi	r27, 0x00	; 0
  fe:	ee ee       	ldi	r30, 0xEE	; 238
 100:	f0 e0       	ldi	r31, 0x00	; 0
 102:	98 2f       	mov	r25, r24
 104:	92 95       	swap	r25
 106:	90 7f       	andi	r25, 0xF0	; 240
 108:	98 83       	st	Y, r25
 10a:	1c 92       	st	X, r1
 10c:	10 82       	st	Z, r1
 10e:	8f 5f       	subi	r24, 0xFF	; 255
 110:	8f 30       	cpi	r24, 0x0F	; 15
 112:	b9 f7       	brne	.-18     	; 0x102 <CAN_INIT+0x32>
 114:	86 e0       	ldi	r24, 0x06	; 6
 116:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
 11a:	8c e0       	ldi	r24, 0x0C	; 12
 11c:	80 93 e3 00 	sts	0x00E3, r24	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7e00e3>
 120:	87 e3       	ldi	r24, 0x37	; 55
 122:	80 93 e4 00 	sts	0x00E4, r24	; 0x8000e4 <__TEXT_REGION_LENGTH__+0x7e00e4>
 126:	10 92 e5 00 	sts	0x00E5, r1	; 0x8000e5 <__TEXT_REGION_LENGTH__+0x7e00e5>
 12a:	82 e0       	ldi	r24, 0x02	; 2
 12c:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
 130:	80 e1       	ldi	r24, 0x10	; 16
 132:	80 93 ed 00 	sts	0x00ED, r24	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7e00ed>
 136:	10 92 f3 00 	sts	0x00F3, r1	; 0x8000f3 <__TEXT_REGION_LENGTH__+0x7e00f3>
 13a:	10 92 f2 00 	sts	0x00F2, r1	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7e00f2>
 13e:	10 92 f1 00 	sts	0x00F1, r1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
 142:	10 92 f0 00 	sts	0x00F0, r1	; 0x8000f0 <__TEXT_REGION_LENGTH__+0x7e00f0>
 146:	10 92 f7 00 	sts	0x00F7, r1	; 0x8000f7 <__TEXT_REGION_LENGTH__+0x7e00f7>
 14a:	10 92 f6 00 	sts	0x00F6, r1	; 0x8000f6 <__TEXT_REGION_LENGTH__+0x7e00f6>
 14e:	10 92 f5 00 	sts	0x00F5, r1	; 0x8000f5 <__TEXT_REGION_LENGTH__+0x7e00f5>
 152:	10 92 f4 00 	sts	0x00F4, r1	; 0x8000f4 <__TEXT_REGION_LENGTH__+0x7e00f4>
 156:	88 e8       	ldi	r24, 0x88	; 136
 158:	80 93 ef 00 	sts	0x00EF, r24	; 0x8000ef <__TEXT_REGION_LENGTH__+0x7e00ef>
 15c:	78 94       	sei
 15e:	df 91       	pop	r29
 160:	cf 91       	pop	r28
 162:	08 95       	ret

00000164 <__vector_18>:

}

ISR (CANIT_vect){
 164:	1f 92       	push	r1
 166:	0f 92       	push	r0
 168:	0f b6       	in	r0, 0x3f	; 63
 16a:	0f 92       	push	r0
 16c:	11 24       	eor	r1, r1
 16e:	0b b6       	in	r0, 0x3b	; 59
 170:	0f 92       	push	r0
 172:	2f 93       	push	r18
 174:	3f 93       	push	r19
 176:	4f 93       	push	r20
 178:	5f 93       	push	r21
 17a:	6f 93       	push	r22
 17c:	7f 93       	push	r23
 17e:	8f 93       	push	r24
 180:	9f 93       	push	r25
 182:	af 93       	push	r26
 184:	bf 93       	push	r27
 186:	ef 93       	push	r30
 188:	ff 93       	push	r31
 18a:	cf 93       	push	r28
 18c:	df 93       	push	r29
 18e:	cd b7       	in	r28, 0x3d	; 61
 190:	de b7       	in	r29, 0x3e	; 62
 192:	61 97       	sbiw	r28, 0x11	; 17
 194:	de bf       	out	0x3e, r29	; 62
 196:	cd bf       	out	0x3d, r28	; 61
	
	 CANSTMOB=0x00;
 198:	10 92 ee 00 	sts	0x00EE, r1	; 0x8000ee <__TEXT_REGION_LENGTH__+0x7e00ee>
	 char target[] = "message received";
 19c:	81 e1       	ldi	r24, 0x11	; 17
 19e:	e0 e0       	ldi	r30, 0x00	; 0
 1a0:	f1 e0       	ldi	r31, 0x01	; 1
 1a2:	de 01       	movw	r26, r28
 1a4:	11 96       	adiw	r26, 0x01	; 1
 1a6:	01 90       	ld	r0, Z+
 1a8:	0d 92       	st	X+, r0
 1aa:	8a 95       	dec	r24
 1ac:	e1 f7       	brne	.-8      	; 0x1a6 <__vector_18+0x42>
	 uart_puts(target);
 1ae:	ce 01       	movw	r24, r28
 1b0:	01 96       	adiw	r24, 0x01	; 1
 1b2:	38 d0       	rcall	.+112    	; 0x224 <uart_puts>
	 
	 int j;
	 
	 for(j=0; j<8; j++){
 1b4:	80 e0       	ldi	r24, 0x00	; 0
 1b6:	90 e0       	ldi	r25, 0x00	; 0
		 data[j]= CANMSG;
 1b8:	aa ef       	ldi	r26, 0xFA	; 250
 1ba:	b0 e0       	ldi	r27, 0x00	; 0
 1bc:	2c 91       	ld	r18, X
 1be:	fc 01       	movw	r30, r24
 1c0:	ee 5e       	subi	r30, 0xEE	; 238
 1c2:	fe 4f       	sbci	r31, 0xFE	; 254
 1c4:	20 83       	st	Z, r18
	 char target[] = "message received";
	 uart_puts(target);
	 
	 int j;
	 
	 for(j=0; j<8; j++){
 1c6:	01 96       	adiw	r24, 0x01	; 1
 1c8:	88 30       	cpi	r24, 0x08	; 8
 1ca:	91 05       	cpc	r25, r1
		 data[j]= CANMSG;
	 }
	 
	 CAN_INIT();
 1cc:	b9 f7       	brne	.-18     	; 0x1bc <__vector_18+0x58>
 1ce:	80 df       	rcall	.-256    	; 0xd0 <CAN_INIT>
	
}
 1d0:	61 96       	adiw	r28, 0x11	; 17
 1d2:	0f b6       	in	r0, 0x3f	; 63
 1d4:	f8 94       	cli
 1d6:	de bf       	out	0x3e, r29	; 62
 1d8:	0f be       	out	0x3f, r0	; 63
 1da:	cd bf       	out	0x3d, r28	; 61
 1dc:	df 91       	pop	r29
 1de:	cf 91       	pop	r28
 1e0:	ff 91       	pop	r31
 1e2:	ef 91       	pop	r30
 1e4:	bf 91       	pop	r27
 1e6:	af 91       	pop	r26
 1e8:	9f 91       	pop	r25
 1ea:	8f 91       	pop	r24
 1ec:	7f 91       	pop	r23
 1ee:	6f 91       	pop	r22
 1f0:	5f 91       	pop	r21
 1f2:	4f 91       	pop	r20
 1f4:	3f 91       	pop	r19
 1f6:	2f 91       	pop	r18
 1f8:	0f 90       	pop	r0
 1fa:	0b be       	out	0x3b, r0	; 59
 1fc:	0f 90       	pop	r0
 1fe:	0f be       	out	0x3f, r0	; 63
 200:	0f 90       	pop	r0
 202:	1f 90       	pop	r1
 204:	18 95       	reti

00000206 <main>:

 int main()
 {	
	uart_init();
 206:	02 d0       	rcall	.+4      	; 0x20c <uart_init>
	CAN_INIT();
 208:	63 df       	rcall	.-314    	; 0xd0 <CAN_INIT>
 20a:	ff cf       	rjmp	.-2      	; 0x20a <main+0x4>

0000020c <uart_init>:
 20c:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
#include <string.h>
#include "uart_f.h"

void uart_init(){
	UBRR0H = (BAUD_PRESCALE >> 8); // Load upper 8-bits of the baud rate value into the high byte of the UBRR register
	UBRR0L = BAUD_PRESCALE; // Load lower 8-bits of the baud rate value into the low byte of the UBRR register
 210:	83 e3       	ldi	r24, 0x33	; 51
 212:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
	UCSR0C = (0<<UMSEL0) | (0<<UPM0) | (1<<USBS0) | (3<<UCSZ0);
 216:	8e e0       	ldi	r24, 0x0E	; 14
 218:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>
	UCSR0B = (1<<RXEN0) | (1<<TXEN0);
 21c:	88 e1       	ldi	r24, 0x18	; 24
 21e:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
 222:	08 95       	ret

00000224 <uart_puts>:
}

void uart_puts(char* s){
 224:	cf 93       	push	r28
 226:	df 93       	push	r29
	int i;
	int len = strlen(s);
 228:	fc 01       	movw	r30, r24
 22a:	01 90       	ld	r0, Z+
 22c:	00 20       	and	r0, r0
 22e:	e9 f7       	brne	.-6      	; 0x22a <uart_puts+0x6>
 230:	31 97       	sbiw	r30, 0x01	; 1
 232:	e8 1b       	sub	r30, r24
 234:	f9 0b       	sbc	r31, r25
	for (i = 0; i < len; i++){
 236:	1e 16       	cp	r1, r30
 238:	1f 06       	cpc	r1, r31
 23a:	84 f4       	brge	.+32     	; 0x25c <uart_puts+0x38>
 23c:	dc 01       	movw	r26, r24
 23e:	9c 01       	movw	r18, r24
 240:	2e 0f       	add	r18, r30
 242:	3f 1f       	adc	r19, r31
		while(!( UCSR0A & 0X20));
 244:	e0 ec       	ldi	r30, 0xC0	; 192
 246:	f0 e0       	ldi	r31, 0x00	; 0
		UDR0=s[i];
 248:	c6 ec       	ldi	r28, 0xC6	; 198
 24a:	d0 e0       	ldi	r29, 0x00	; 0

void uart_puts(char* s){
	int i;
	int len = strlen(s);
	for (i = 0; i < len; i++){
		while(!( UCSR0A & 0X20));
 24c:	90 81       	ld	r25, Z
 24e:	95 ff       	sbrs	r25, 5
 250:	fd cf       	rjmp	.-6      	; 0x24c <uart_puts+0x28>
		UDR0=s[i];
 252:	9d 91       	ld	r25, X+
 254:	98 83       	st	Y, r25
}

void uart_puts(char* s){
	int i;
	int len = strlen(s);
	for (i = 0; i < len; i++){
 256:	a2 17       	cp	r26, r18
 258:	b3 07       	cpc	r27, r19
 25a:	c1 f7       	brne	.-16     	; 0x24c <uart_puts+0x28>
		while(!( UCSR0A & 0X20));
		UDR0=s[i];
	}
}
 25c:	df 91       	pop	r29
 25e:	cf 91       	pop	r28
 260:	08 95       	ret

00000262 <_exit>:
 262:	f8 94       	cli

00000264 <__stop_program>:
 264:	ff cf       	rjmp	.-2      	; 0x264 <__stop_program>
