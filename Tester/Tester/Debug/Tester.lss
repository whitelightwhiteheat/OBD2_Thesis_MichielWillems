
Tester.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000042a  00800100  00006a3a  00006ace  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00006a3a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000138  0080052a  0080052a  00006ef8  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00006ef8  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00006f28  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000590  00000000  00000000  00006f68  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000f277  00000000  00000000  000074f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000026c3  00000000  00000000  0001676f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00004313  00000000  00000000  00018e32  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00001b38  00000000  00000000  0001d148  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00001a44  00000000  00000000  0001ec80  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000d819  00000000  00000000  000206c4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000748  00000000  00000000  0002dedd  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	39 c2       	rjmp	.+1138   	; 0x474 <__ctors_end>
       2:	00 00       	nop
       4:	56 c2       	rjmp	.+1196   	; 0x4b2 <__bad_interrupt>
       6:	00 00       	nop
       8:	54 c2       	rjmp	.+1192   	; 0x4b2 <__bad_interrupt>
       a:	00 00       	nop
       c:	52 c2       	rjmp	.+1188   	; 0x4b2 <__bad_interrupt>
       e:	00 00       	nop
      10:	50 c2       	rjmp	.+1184   	; 0x4b2 <__bad_interrupt>
      12:	00 00       	nop
      14:	0c 94 d0 20 	jmp	0x41a0	; 0x41a0 <__vector_5>
      18:	0c 94 fe 20 	jmp	0x41fc	; 0x41fc <__vector_6>
      1c:	0c 94 2c 21 	jmp	0x4258	; 0x4258 <__vector_7>
      20:	0c 94 5a 21 	jmp	0x42b4	; 0x42b4 <__vector_8>
      24:	46 c2       	rjmp	.+1164   	; 0x4b2 <__bad_interrupt>
      26:	00 00       	nop
      28:	44 c2       	rjmp	.+1160   	; 0x4b2 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	42 c2       	rjmp	.+1156   	; 0x4b2 <__bad_interrupt>
      2e:	00 00       	nop
      30:	40 c2       	rjmp	.+1152   	; 0x4b2 <__bad_interrupt>
      32:	00 00       	nop
      34:	3e c2       	rjmp	.+1148   	; 0x4b2 <__bad_interrupt>
      36:	00 00       	nop
      38:	3c c2       	rjmp	.+1144   	; 0x4b2 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	3a c2       	rjmp	.+1140   	; 0x4b2 <__bad_interrupt>
      3e:	00 00       	nop
      40:	09 c4       	rjmp	.+2066   	; 0x854 <__vector_16>
      42:	00 00       	nop
      44:	36 c2       	rjmp	.+1132   	; 0x4b2 <__bad_interrupt>
      46:	00 00       	nop
      48:	34 c2       	rjmp	.+1128   	; 0x4b2 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	32 c2       	rjmp	.+1124   	; 0x4b2 <__bad_interrupt>
      4e:	00 00       	nop
      50:	30 c2       	rjmp	.+1120   	; 0x4b2 <__bad_interrupt>
      52:	00 00       	nop
      54:	2e c2       	rjmp	.+1116   	; 0x4b2 <__bad_interrupt>
      56:	00 00       	nop
      58:	2c c2       	rjmp	.+1112   	; 0x4b2 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	2a c2       	rjmp	.+1108   	; 0x4b2 <__bad_interrupt>
      5e:	00 00       	nop
      60:	28 c2       	rjmp	.+1104   	; 0x4b2 <__bad_interrupt>
      62:	00 00       	nop
      64:	26 c2       	rjmp	.+1100   	; 0x4b2 <__bad_interrupt>
      66:	00 00       	nop
      68:	24 c2       	rjmp	.+1096   	; 0x4b2 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	22 c2       	rjmp	.+1092   	; 0x4b2 <__bad_interrupt>
      6e:	00 00       	nop
      70:	20 c2       	rjmp	.+1088   	; 0x4b2 <__bad_interrupt>
      72:	00 00       	nop
      74:	1e c2       	rjmp	.+1084   	; 0x4b2 <__bad_interrupt>
      76:	00 00       	nop
      78:	1c c2       	rjmp	.+1080   	; 0x4b2 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	1a c2       	rjmp	.+1076   	; 0x4b2 <__bad_interrupt>
      7e:	00 00       	nop
      80:	18 c2       	rjmp	.+1072   	; 0x4b2 <__bad_interrupt>
      82:	00 00       	nop
      84:	16 c2       	rjmp	.+1068   	; 0x4b2 <__bad_interrupt>
      86:	00 00       	nop
      88:	14 c2       	rjmp	.+1064   	; 0x4b2 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	12 c2       	rjmp	.+1060   	; 0x4b2 <__bad_interrupt>
      8e:	00 00       	nop
      90:	10 c2       	rjmp	.+1056   	; 0x4b2 <__bad_interrupt>
	...

00000094 <__trampolines_end>:
      94:	67 e6       	ldi	r22, 0x67	; 103
      96:	09 6a       	ori	r16, 0xA9	; 169
      98:	85 ae       	std	Z+61, r8	; 0x3d
      9a:	67 bb       	out	0x17, r22	; 23
      9c:	72 f3       	brmi	.-36     	; 0x7a <__SREG__+0x3b>
      9e:	6e 3c       	cpi	r22, 0xCE	; 206
      a0:	3a f5       	brpl	.+78     	; 0xf0 <sha2_large_common_const+0x3c>
      a2:	4f a5       	ldd	r20, Y+47	; 0x2f
      a4:	7f 52       	subi	r23, 0x2F	; 47
      a6:	0e 51       	subi	r16, 0x1E	; 30
      a8:	8c 68       	ori	r24, 0x8C	; 140
      aa:	05 9b       	sbis	0x00, 5	; 0
      ac:	ab d9       	rcall	.-3242   	; 0xfffff404 <__eeprom_end+0xff7ef404>
      ae:	83 1f       	adc	r24, r19
      b0:	19 cd       	rjmp	.-1486   	; 0xfffffae4 <__eeprom_end+0xff7efae4>
      b2:	e0 5b       	subi	r30, 0xB0	; 176

000000b4 <sha2_large_common_const>:
      b4:	22 ae 28 d7 98 2f 8a 42 cd 65 ef 23 91 44 37 71     ".(../.B.e.#.D7q
      c4:	2f 3b 4d ec cf fb c0 b5 bc db 89 81 a5 db b5 e9     /;M.............
      d4:	38 b5 48 f3 5b c2 56 39 19 d0 05 b6 f1 11 f1 59     8.H.[.V9.......Y
      e4:	9b 4f 19 af a4 82 3f 92 18 81 6d da d5 5e 1c ab     .O....?...m..^..
      f4:	42 02 03 a3 98 aa 07 d8 be 6f 70 45 01 5b 83 12     B........opE.[..
     104:	8c b2 e4 4e be 85 31 24 e2 b4 ff d5 c3 7d 0c 55     ...N..1$.....}.U
     114:	6f 89 7b f2 74 5d be 72 b1 96 16 3b fe b1 de 80     o.{.t].r...;....
     124:	35 12 c7 25 a7 06 dc 9b 94 26 69 cf 74 f1 9b c1     5..%.....&i.t...
     134:	d2 4a f1 9e c1 69 9b e4 e3 25 4f 38 86 47 be ef     .J...i...%O8.G..
     144:	b5 d5 8c 8b c6 9d c1 0f 65 9c ac 77 cc a1 0c 24     ........e..w...$
     154:	75 02 2b 59 6f 2c e9 2d 83 e4 a6 6e aa 84 74 4a     u.+Yo,.-...n..tJ
     164:	d4 fb 41 bd dc a9 b0 5c b5 53 11 83 da 88 f9 76     ..A....\.S.....v
     174:	ab df 66 ee 52 51 3e 98 10 32 b4 2d 6d c6 31 a8     ..f.RQ>..2.-m.1.
     184:	3f 21 fb 98 c8 27 03 b0 e4 0e ef be c7 7f 59 bf     ?!...'........Y.
     194:	c2 8f a8 3d f3 0b e0 c6 25 a7 0a 93 47 91 a7 d5     ...=....%...G...
     1a4:	6f 82 03 e0 51 63 ca 06 70 6e 0e 0a 67 29 29 14     o...Qc..pn..g)).
     1b4:	fc 2f d2 46 85 0a b7 27 26 c9 26 5c 38 21 1b 2e     ./.F...'&.&\8!..
     1c4:	ed 2a c4 5a fc 6d 2c 4d df b3 95 9d 13 0d 38 53     .*.Z.m,M......8S
     1d4:	de 63 af 8b 54 73 0a 65 a8 b2 77 3c bb 0a 6a 76     .c..Ts.e..w<..jv
     1e4:	e6 ae ed 47 2e c9 c2 81 3b 35 82 14 85 2c 72 92     ...G....;5...,r.
     1f4:	64 03 f1 4c a1 e8 bf a2 01 30 42 bc 4b 66 1a a8     d..L.....0B.Kf..
     204:	91 97 f8 d0 70 8b 4b c2 30 be 54 06 a3 51 6c c7     ....p.K.0.T..Ql.
     214:	18 52 ef d6 19 e8 92 d1 10 a9 65 55 24 06 99 d6     .R........eU$...
     224:	2a 20 71 57 85 35 0e f4 b8 d1 bb 32 70 a0 6a 10     * qW.5.....2p.j.
     234:	c8 d0 d2 b8 16 c1 a4 19 53 ab 41 51 08 6c 37 1e     ........S.AQ.l7.
     244:	99 eb 8e df 4c 77 48 27 a8 48 9b e1 b5 bc b0 34     ....LwH'.H.....4
     254:	63 5a c9 c5 b3 0c 1c 39 cb 8a 41 e3 4a aa d8 4e     cZ.....9..A.J..N
     264:	73 e3 63 77 4f ca 9c 5b a3 b8 b2 d6 f3 6f 2e 68     s.cwO..[.....o.h
     274:	fc b2 ef 5d ee 82 8f 74 60 2f 17 43 6f 63 a5 78     ...]...t`/.Coc.x
     284:	72 ab f0 a1 14 78 c8 84 ec 39 64 1a 08 02 c7 8c     r....x...9d.....
     294:	28 1e 63 23 fa ff be 90 e9 bd 82 de eb 6c 50 a4     (.c#.........lP.
     2a4:	15 79 c6 b2 f7 a3 f9 be 2b 53 72 e3 f2 78 71 c6     .y......+Sr..xq.
     2b4:	9c 61 26 ea ce 3e 27 ca 07 c2 c0 21 c7 b8 86 d1     .a&..>'....!....
     2c4:	1e eb e0 cd d6 7d da ea 78 d1 6e ee 7f 4f 7d f5     .....}..x.n..O}.
     2d4:	ba 6f 17 72 aa 67 f0 06 a6 98 c8 a2 c5 7d 63 0a     .o.r.g.......}c.
     2e4:	ae 0d f9 be 04 98 3f 11 1b 47 1c 13 35 0b 71 1b     ......?..G..5.q.
     2f4:	84 7d 04 23 f5 77 db 28 93 24 c7 40 7b ab ca 32     .}.#.w.(.$.@{..2
     304:	bc be c9 15 0a be 9e 3c 4c 0d 10 9c c4 67 1d 43     .......<L....g.C
     314:	b6 42 3e cb be d4 c5 4c 2a 7e 65 fc 9c 29 7f 59     .B>....L*~e..).Y
     324:	ec fa d6 3a ab 6f cb 5f 17 58 47 4a 8c 19 44 6c     ...:.o._.XGJ..Dl

00000334 <k>:
     334:	98 2f 8a 42 91 44 37 71 cf fb c0 b5 a5 db b5 e9     ./.B.D7q........
     344:	5b c2 56 39 f1 11 f1 59 a4 82 3f 92 d5 5e 1c ab     [.V9...Y..?..^..
     354:	98 aa 07 d8 01 5b 83 12 be 85 31 24 c3 7d 0c 55     .....[....1$.}.U
     364:	74 5d be 72 fe b1 de 80 a7 06 dc 9b 74 f1 9b c1     t].r........t...
     374:	c1 69 9b e4 86 47 be ef c6 9d c1 0f cc a1 0c 24     .i...G.........$
     384:	6f 2c e9 2d aa 84 74 4a dc a9 b0 5c da 88 f9 76     o,.-..tJ...\...v
     394:	52 51 3e 98 6d c6 31 a8 c8 27 03 b0 c7 7f 59 bf     RQ>.m.1..'....Y.
     3a4:	f3 0b e0 c6 47 91 a7 d5 51 63 ca 06 67 29 29 14     ....G...Qc..g)).
     3b4:	85 0a b7 27 38 21 1b 2e fc 6d 2c 4d 13 0d 38 53     ...'8!...m,M..8S
     3c4:	54 73 0a 65 bb 0a 6a 76 2e c9 c2 81 85 2c 72 92     Ts.e..jv.....,r.
     3d4:	a1 e8 bf a2 4b 66 1a a8 70 8b 4b c2 a3 51 6c c7     ....Kf..p.K..Ql.
     3e4:	19 e8 92 d1 24 06 99 d6 85 35 0e f4 70 a0 6a 10     ....$....5..p.j.
     3f4:	16 c1 a4 19 08 6c 37 1e 4c 77 48 27 b5 bc b0 34     .....l7.LwH'...4
     404:	b3 0c 1c 39 4a aa d8 4e 4f ca 9c 5b f3 6f 2e 68     ...9J..NO..[.o.h
     414:	ee 82 8f 74 6f 63 a5 78 14 78 c8 84 08 02 c7 8c     ...toc.x.x......
     424:	fa ff be 90 eb 6c 50 a4 f7 a3 f9 be f2 78 71 c6     .....lP......xq.

00000434 <sha512_init_values>:
     434:	08 c9 bc f3 67 e6 09 6a 3b a7 ca 84 85 ae 67 bb     ....g..j;.....g.
     444:	2b f8 94 fe 72 f3 6e 3c f1 36 1d 5f 3a f5 4f a5     +...r.n<.6._:.O.
     454:	d1 82 e6 ad 7f 52 0e 51 1f 6c 3e 2b 8c 68 05 9b     .....R.Q.l>+.h..
     464:	6b bd 41 fb ab d9 83 1f 79 21 7e 13 19 cd e0 5b     k.A.....y!~....[

00000474 <__ctors_end>:
     474:	11 24       	eor	r1, r1
     476:	1f be       	out	0x3f, r1	; 63
     478:	cf ef       	ldi	r28, 0xFF	; 255
     47a:	d0 e1       	ldi	r29, 0x10	; 16
     47c:	de bf       	out	0x3e, r29	; 62
     47e:	cd bf       	out	0x3d, r28	; 61

00000480 <__do_copy_data>:
     480:	15 e0       	ldi	r17, 0x05	; 5
     482:	a0 e0       	ldi	r26, 0x00	; 0
     484:	b1 e0       	ldi	r27, 0x01	; 1
     486:	ea e3       	ldi	r30, 0x3A	; 58
     488:	fa e6       	ldi	r31, 0x6A	; 106
     48a:	00 e0       	ldi	r16, 0x00	; 0
     48c:	0b bf       	out	0x3b, r16	; 59
     48e:	02 c0       	rjmp	.+4      	; 0x494 <__do_copy_data+0x14>
     490:	07 90       	elpm	r0, Z+
     492:	0d 92       	st	X+, r0
     494:	aa 32       	cpi	r26, 0x2A	; 42
     496:	b1 07       	cpc	r27, r17
     498:	d9 f7       	brne	.-10     	; 0x490 <__do_copy_data+0x10>

0000049a <__do_clear_bss>:
     49a:	26 e0       	ldi	r18, 0x06	; 6
     49c:	aa e2       	ldi	r26, 0x2A	; 42
     49e:	b5 e0       	ldi	r27, 0x05	; 5
     4a0:	01 c0       	rjmp	.+2      	; 0x4a4 <.do_clear_bss_start>

000004a2 <.do_clear_bss_loop>:
     4a2:	1d 92       	st	X+, r1

000004a4 <.do_clear_bss_start>:
     4a4:	a2 36       	cpi	r26, 0x62	; 98
     4a6:	b2 07       	cpc	r27, r18
     4a8:	e1 f7       	brne	.-8      	; 0x4a2 <.do_clear_bss_loop>
     4aa:	0e 94 c7 22 	call	0x458e	; 0x458e <main>
     4ae:	0c 94 1b 35 	jmp	0x6a36	; 0x6a36 <_exit>

000004b2 <__bad_interrupt>:
     4b2:	a6 cd       	rjmp	.-1204   	; 0x0 <__vectors>

000004b4 <can_init_message>:
	uint8_t message[8] = {0};
	can_get_message(mobnr , message);
	char hex[16] = "";
	bytes_to_hex(message, 8, hex);
	uart_puts(hex);
}
     4b4:	fc 01       	movw	r30, r24
     4b6:	49 30       	cpi	r20, 0x09	; 9
     4b8:	08 f0       	brcs	.+2      	; 0x4bc <can_init_message+0x8>
     4ba:	48 e0       	ldi	r20, 0x08	; 8
     4bc:	80 e1       	ldi	r24, 0x10	; 16
     4be:	68 9f       	mul	r22, r24
     4c0:	b0 01       	movw	r22, r0
     4c2:	11 24       	eor	r1, r1
     4c4:	68 60       	ori	r22, 0x08	; 8
     4c6:	60 93 ed 00 	sts	0x00ED, r22	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7e00ed>
     4ca:	44 23       	and	r20, r20
     4cc:	59 f0       	breq	.+22     	; 0x4e4 <can_init_message+0x30>
     4ce:	90 e0       	ldi	r25, 0x00	; 0
     4d0:	86 2f       	mov	r24, r22
     4d2:	89 2b       	or	r24, r25
     4d4:	80 93 ed 00 	sts	0x00ED, r24	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7e00ed>
     4d8:	81 91       	ld	r24, Z+
     4da:	80 93 fa 00 	sts	0x00FA, r24	; 0x8000fa <__TEXT_REGION_LENGTH__+0x7e00fa>
     4de:	9f 5f       	subi	r25, 0xFF	; 255
     4e0:	94 13       	cpse	r25, r20
     4e2:	f6 cf       	rjmp	.-20     	; 0x4d0 <can_init_message+0x1c>
     4e4:	60 93 ed 00 	sts	0x00ED, r22	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7e00ed>
     4e8:	80 91 ef 00 	lds	r24, 0x00EF	; 0x8000ef <__TEXT_REGION_LENGTH__+0x7e00ef>
     4ec:	48 2b       	or	r20, r24
     4ee:	40 93 ef 00 	sts	0x00EF, r20	; 0x8000ef <__TEXT_REGION_LENGTH__+0x7e00ef>
     4f2:	08 95       	ret

000004f4 <can_init>:
     4f4:	f8 94       	cli
     4f6:	81 e0       	ldi	r24, 0x01	; 1
     4f8:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
     4fc:	84 e3       	ldi	r24, 0x34	; 52
     4fe:	80 93 db 00 	sts	0x00DB, r24	; 0x8000db <__TEXT_REGION_LENGTH__+0x7e00db>
     502:	10 92 da 00 	sts	0x00DA, r1	; 0x8000da <__TEXT_REGION_LENGTH__+0x7e00da>
     506:	20 e0       	ldi	r18, 0x00	; 0
     508:	82 2f       	mov	r24, r18
     50a:	82 95       	swap	r24
     50c:	80 7f       	andi	r24, 0xF0	; 240
     50e:	80 93 ed 00 	sts	0x00ED, r24	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7e00ed>
     512:	10 92 ef 00 	sts	0x00EF, r1	; 0x8000ef <__TEXT_REGION_LENGTH__+0x7e00ef>
     516:	10 92 ee 00 	sts	0x00EE, r1	; 0x8000ee <__TEXT_REGION_LENGTH__+0x7e00ee>
     51a:	88 e0       	ldi	r24, 0x08	; 8
     51c:	90 e0       	ldi	r25, 0x00	; 0
     51e:	10 92 fa 00 	sts	0x00FA, r1	; 0x8000fa <__TEXT_REGION_LENGTH__+0x7e00fa>
     522:	01 97       	sbiw	r24, 0x01	; 1
     524:	e1 f7       	brne	.-8      	; 0x51e <can_init+0x2a>
     526:	2f 5f       	subi	r18, 0xFF	; 255
     528:	2f 30       	cpi	r18, 0x0F	; 15
     52a:	71 f7       	brne	.-36     	; 0x508 <can_init+0x14>
     52c:	88 e0       	ldi	r24, 0x08	; 8
     52e:	80 93 ed 00 	sts	0x00ED, r24	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7e00ed>
     532:	86 e0       	ldi	r24, 0x06	; 6
     534:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
     538:	8c e0       	ldi	r24, 0x0C	; 12
     53a:	80 93 e3 00 	sts	0x00E3, r24	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7e00e3>
     53e:	87 e3       	ldi	r24, 0x37	; 55
     540:	80 93 e4 00 	sts	0x00E4, r24	; 0x8000e4 <__TEXT_REGION_LENGTH__+0x7e00e4>
     544:	10 92 e5 00 	sts	0x00E5, r1	; 0x8000e5 <__TEXT_REGION_LENGTH__+0x7e00e5>
     548:	82 e0       	ldi	r24, 0x02	; 2
     54a:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
     54e:	78 94       	sei
     550:	08 95       	ret

00000552 <can_send_message>:
     552:	fb 01       	movw	r30, r22
     554:	da 01       	movw	r26, r20
     556:	40 e1       	ldi	r20, 0x10	; 16
     558:	84 9f       	mul	r24, r20
     55a:	b0 01       	movw	r22, r0
     55c:	11 24       	eor	r1, r1
     55e:	68 60       	ori	r22, 0x08	; 8
     560:	60 93 ed 00 	sts	0x00ED, r22	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7e00ed>
     564:	90 81       	ld	r25, Z
     566:	92 95       	swap	r25
     568:	99 0f       	add	r25, r25
     56a:	90 7e       	andi	r25, 0xE0	; 224
     56c:	90 93 f2 00 	sts	0x00F2, r25	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7e00f2>
     570:	30 81       	ld	r19, Z
     572:	36 95       	lsr	r19
     574:	36 95       	lsr	r19
     576:	36 95       	lsr	r19
     578:	91 81       	ldd	r25, Z+1	; 0x01
     57a:	40 e2       	ldi	r20, 0x20	; 32
     57c:	94 9f       	mul	r25, r20
     57e:	b0 01       	movw	r22, r0
     580:	11 24       	eor	r1, r1
     582:	63 2b       	or	r22, r19
     584:	60 93 f3 00 	sts	0x00F3, r22	; 0x8000f3 <__TEXT_REGION_LENGTH__+0x7e00f3>
     588:	10 92 f0 00 	sts	0x00F0, r1	; 0x8000f0 <__TEXT_REGION_LENGTH__+0x7e00f0>
     58c:	42 2f       	mov	r20, r18
     58e:	68 2f       	mov	r22, r24
     590:	cd 01       	movw	r24, r26
     592:	90 df       	rcall	.-224    	; 0x4b4 <can_init_message>
     594:	80 91 ef 00 	lds	r24, 0x00EF	; 0x8000ef <__TEXT_REGION_LENGTH__+0x7e00ef>
     598:	80 64       	ori	r24, 0x40	; 64
     59a:	80 93 ef 00 	sts	0x00EF, r24	; 0x8000ef <__TEXT_REGION_LENGTH__+0x7e00ef>
     59e:	80 91 ee 00 	lds	r24, 0x00EE	; 0x8000ee <__TEXT_REGION_LENGTH__+0x7e00ee>
     5a2:	80 34       	cpi	r24, 0x40	; 64
     5a4:	e1 f7       	brne	.-8      	; 0x59e <can_send_message+0x4c>
     5a6:	10 92 ee 00 	sts	0x00EE, r1	; 0x8000ee <__TEXT_REGION_LENGTH__+0x7e00ee>
     5aa:	10 92 ef 00 	sts	0x00EF, r1	; 0x8000ef <__TEXT_REGION_LENGTH__+0x7e00ef>
     5ae:	80 e0       	ldi	r24, 0x00	; 0
     5b0:	90 e0       	ldi	r25, 0x00	; 0
     5b2:	08 95       	ret

000005b4 <can_enable_receive>:
     5b4:	fb 01       	movw	r30, r22
     5b6:	88 30       	cpi	r24, 0x08	; 8
     5b8:	a0 f5       	brcc	.+104    	; 0x622 <can_enable_receive+0x6e>
     5ba:	60 91 de 00 	lds	r22, 0x00DE	; 0x8000de <__TEXT_REGION_LENGTH__+0x7e00de>
     5be:	28 2f       	mov	r18, r24
     5c0:	30 e0       	ldi	r19, 0x00	; 0
     5c2:	41 e0       	ldi	r20, 0x01	; 1
     5c4:	50 e0       	ldi	r21, 0x00	; 0
     5c6:	da 01       	movw	r26, r20
     5c8:	02 c0       	rjmp	.+4      	; 0x5ce <can_enable_receive+0x1a>
     5ca:	aa 0f       	add	r26, r26
     5cc:	bb 1f       	adc	r27, r27
     5ce:	8a 95       	dec	r24
     5d0:	e2 f7       	brpl	.-8      	; 0x5ca <can_enable_receive+0x16>
     5d2:	cd 01       	movw	r24, r26
     5d4:	86 2b       	or	r24, r22
     5d6:	80 93 de 00 	sts	0x00DE, r24	; 0x8000de <__TEXT_REGION_LENGTH__+0x7e00de>
     5da:	22 95       	swap	r18
     5dc:	32 95       	swap	r19
     5de:	30 7f       	andi	r19, 0xF0	; 240
     5e0:	32 27       	eor	r19, r18
     5e2:	20 7f       	andi	r18, 0xF0	; 240
     5e4:	32 27       	eor	r19, r18
     5e6:	28 60       	ori	r18, 0x08	; 8
     5e8:	20 93 ed 00 	sts	0x00ED, r18	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7e00ed>
     5ec:	80 81       	ld	r24, Z
     5ee:	82 95       	swap	r24
     5f0:	88 0f       	add	r24, r24
     5f2:	80 7e       	andi	r24, 0xE0	; 224
     5f4:	80 93 f6 00 	sts	0x00F6, r24	; 0x8000f6 <__TEXT_REGION_LENGTH__+0x7e00f6>
     5f8:	80 81       	ld	r24, Z
     5fa:	28 2f       	mov	r18, r24
     5fc:	26 95       	lsr	r18
     5fe:	26 95       	lsr	r18
     600:	26 95       	lsr	r18
     602:	91 81       	ldd	r25, Z+1	; 0x01
     604:	b0 e2       	ldi	r27, 0x20	; 32
     606:	9b 9f       	mul	r25, r27
     608:	c0 01       	movw	r24, r0
     60a:	11 24       	eor	r1, r1
     60c:	82 2b       	or	r24, r18
     60e:	80 93 f7 00 	sts	0x00F7, r24	; 0x8000f7 <__TEXT_REGION_LENGTH__+0x7e00f7>
     612:	10 92 f4 00 	sts	0x00F4, r1	; 0x8000f4 <__TEXT_REGION_LENGTH__+0x7e00f4>
     616:	80 91 ef 00 	lds	r24, 0x00EF	; 0x8000ef <__TEXT_REGION_LENGTH__+0x7e00ef>
     61a:	88 68       	ori	r24, 0x88	; 136
     61c:	80 93 ef 00 	sts	0x00EF, r24	; 0x8000ef <__TEXT_REGION_LENGTH__+0x7e00ef>
     620:	08 95       	ret
     622:	40 91 df 00 	lds	r20, 0x00DF	; 0x8000df <__TEXT_REGION_LENGTH__+0x7e00df>
     626:	28 2f       	mov	r18, r24
     628:	30 e0       	ldi	r19, 0x00	; 0
     62a:	b9 01       	movw	r22, r18
     62c:	68 50       	subi	r22, 0x08	; 8
     62e:	71 09       	sbc	r23, r1
     630:	81 e0       	ldi	r24, 0x01	; 1
     632:	90 e0       	ldi	r25, 0x00	; 0
     634:	01 c0       	rjmp	.+2      	; 0x638 <can_enable_receive+0x84>
     636:	88 0f       	add	r24, r24
     638:	6a 95       	dec	r22
     63a:	ea f7       	brpl	.-6      	; 0x636 <can_enable_receive+0x82>
     63c:	84 2b       	or	r24, r20
     63e:	80 93 df 00 	sts	0x00DF, r24	; 0x8000df <__TEXT_REGION_LENGTH__+0x7e00df>
     642:	cb cf       	rjmp	.-106    	; 0x5da <can_enable_receive+0x26>

00000644 <can_wait_for_receive>:
     644:	80 91 da 00 	lds	r24, 0x00DA	; 0x8000da <__TEXT_REGION_LENGTH__+0x7e00da>
     648:	87 ff       	sbrs	r24, 7
     64a:	fc cf       	rjmp	.-8      	; 0x644 <can_wait_for_receive>
     64c:	80 91 ec 00 	lds	r24, 0x00EC	; 0x8000ec <__TEXT_REGION_LENGTH__+0x7e00ec>
     650:	82 95       	swap	r24
     652:	8f 70       	andi	r24, 0x0F	; 15
     654:	90 e0       	ldi	r25, 0x00	; 0
     656:	08 95       	ret

00000658 <can_receive_message>:
     658:	0f 93       	push	r16
     65a:	1f 93       	push	r17
     65c:	cf 93       	push	r28
     65e:	df 93       	push	r29
     660:	eb 01       	movw	r28, r22
     662:	da 01       	movw	r26, r20
     664:	f9 01       	movw	r30, r18
     666:	40 e1       	ldi	r20, 0x10	; 16
     668:	84 9f       	mul	r24, r20
     66a:	90 01       	movw	r18, r0
     66c:	11 24       	eor	r1, r1
     66e:	92 2f       	mov	r25, r18
     670:	98 60       	ori	r25, 0x08	; 8
     672:	90 93 ed 00 	sts	0x00ED, r25	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7e00ed>
     676:	21 e0       	ldi	r18, 0x01	; 1
     678:	30 e0       	ldi	r19, 0x00	; 0
     67a:	01 c0       	rjmp	.+2      	; 0x67e <can_receive_message+0x26>
     67c:	22 0f       	add	r18, r18
     67e:	8a 95       	dec	r24
     680:	ea f7       	brpl	.-6      	; 0x67c <can_receive_message+0x24>
     682:	20 93 de 00 	sts	0x00DE, r18	; 0x8000de <__TEXT_REGION_LENGTH__+0x7e00de>
     686:	88 81       	ld	r24, Y
     688:	82 95       	swap	r24
     68a:	88 0f       	add	r24, r24
     68c:	80 7e       	andi	r24, 0xE0	; 224
     68e:	80 93 f2 00 	sts	0x00F2, r24	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7e00f2>
     692:	28 81       	ld	r18, Y
     694:	42 2f       	mov	r20, r18
     696:	46 95       	lsr	r20
     698:	46 95       	lsr	r20
     69a:	46 95       	lsr	r20
     69c:	89 81       	ldd	r24, Y+1	; 0x01
     69e:	50 e2       	ldi	r21, 0x20	; 32
     6a0:	85 9f       	mul	r24, r21
     6a2:	90 01       	movw	r18, r0
     6a4:	11 24       	eor	r1, r1
     6a6:	24 2b       	or	r18, r20
     6a8:	20 93 f3 00 	sts	0x00F3, r18	; 0x8000f3 <__TEXT_REGION_LENGTH__+0x7e00f3>
     6ac:	10 92 f0 00 	sts	0x00F0, r1	; 0x8000f0 <__TEXT_REGION_LENGTH__+0x7e00f0>
     6b0:	8c 91       	ld	r24, X
     6b2:	82 95       	swap	r24
     6b4:	88 0f       	add	r24, r24
     6b6:	80 7e       	andi	r24, 0xE0	; 224
     6b8:	80 93 f6 00 	sts	0x00F6, r24	; 0x8000f6 <__TEXT_REGION_LENGTH__+0x7e00f6>
     6bc:	2c 91       	ld	r18, X
     6be:	52 2f       	mov	r21, r18
     6c0:	56 95       	lsr	r21
     6c2:	56 95       	lsr	r21
     6c4:	56 95       	lsr	r21
     6c6:	11 96       	adiw	r26, 0x01	; 1
     6c8:	8c 91       	ld	r24, X
     6ca:	40 e2       	ldi	r20, 0x20	; 32
     6cc:	84 9f       	mul	r24, r20
     6ce:	90 01       	movw	r18, r0
     6d0:	11 24       	eor	r1, r1
     6d2:	25 2b       	or	r18, r21
     6d4:	20 93 f7 00 	sts	0x00F7, r18	; 0x8000f7 <__TEXT_REGION_LENGTH__+0x7e00f7>
     6d8:	10 92 f4 00 	sts	0x00F4, r1	; 0x8000f4 <__TEXT_REGION_LENGTH__+0x7e00f4>
     6dc:	88 e8       	ldi	r24, 0x88	; 136
     6de:	80 93 ef 00 	sts	0x00EF, r24	; 0x8000ef <__TEXT_REGION_LENGTH__+0x7e00ef>
     6e2:	80 91 da 00 	lds	r24, 0x00DA	; 0x8000da <__TEXT_REGION_LENGTH__+0x7e00da>
     6e6:	87 ff       	sbrs	r24, 7
     6e8:	fc cf       	rjmp	.-8      	; 0x6e2 <can_receive_message+0x8a>
     6ea:	80 91 ee 00 	lds	r24, 0x00EE	; 0x8000ee <__TEXT_REGION_LENGTH__+0x7e00ee>
     6ee:	85 ff       	sbrs	r24, 5
     6f0:	27 c0       	rjmp	.+78     	; 0x740 <can_receive_message+0xe8>
     6f2:	90 93 ed 00 	sts	0x00ED, r25	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7e00ed>
     6f6:	80 e0       	ldi	r24, 0x00	; 0
     6f8:	29 2f       	mov	r18, r25
     6fa:	28 2b       	or	r18, r24
     6fc:	20 93 ed 00 	sts	0x00ED, r18	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7e00ed>
     700:	20 91 fa 00 	lds	r18, 0x00FA	; 0x8000fa <__TEXT_REGION_LENGTH__+0x7e00fa>
     704:	21 93       	st	Z+, r18
     706:	8f 5f       	subi	r24, 0xFF	; 255
     708:	88 30       	cpi	r24, 0x08	; 8
     70a:	b1 f7       	brne	.-20     	; 0x6f8 <can_receive_message+0xa0>
     70c:	90 93 ed 00 	sts	0x00ED, r25	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7e00ed>
     710:	90 93 ed 00 	sts	0x00ED, r25	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7e00ed>
     714:	80 91 ef 00 	lds	r24, 0x00EF	; 0x8000ef <__TEXT_REGION_LENGTH__+0x7e00ef>
     718:	8f 70       	andi	r24, 0x0F	; 15
     71a:	f8 01       	movw	r30, r16
     71c:	80 83       	st	Z, r24
     71e:	10 92 ee 00 	sts	0x00EE, r1	; 0x8000ee <__TEXT_REGION_LENGTH__+0x7e00ee>
     722:	10 92 ef 00 	sts	0x00EF, r1	; 0x8000ef <__TEXT_REGION_LENGTH__+0x7e00ef>
     726:	10 92 de 00 	sts	0x00DE, r1	; 0x8000de <__TEXT_REGION_LENGTH__+0x7e00de>
     72a:	80 91 da 00 	lds	r24, 0x00DA	; 0x8000da <__TEXT_REGION_LENGTH__+0x7e00da>
     72e:	80 93 da 00 	sts	0x00DA, r24	; 0x8000da <__TEXT_REGION_LENGTH__+0x7e00da>
     732:	80 e0       	ldi	r24, 0x00	; 0
     734:	90 e0       	ldi	r25, 0x00	; 0
     736:	df 91       	pop	r29
     738:	cf 91       	pop	r28
     73a:	1f 91       	pop	r17
     73c:	0f 91       	pop	r16
     73e:	08 95       	ret
     740:	81 e0       	ldi	r24, 0x01	; 1
     742:	90 e0       	ldi	r25, 0x00	; 0
     744:	df 91       	pop	r29
     746:	cf 91       	pop	r28
     748:	1f 91       	pop	r17
     74a:	0f 91       	pop	r16
     74c:	08 95       	ret

0000074e <can_free_mob>:

// --------- CAN Helper Functions ----------

// Select a MOB.
static void set_page(uint8_t mobnr){
	CANPAGE = (mobnr << 4) | PAGE_MASK;
     74e:	48 2f       	mov	r20, r24
     750:	50 e0       	ldi	r21, 0x00	; 0
     752:	9a 01       	movw	r18, r20
     754:	22 95       	swap	r18
     756:	32 95       	swap	r19
     758:	30 7f       	andi	r19, 0xF0	; 240
     75a:	32 27       	eor	r19, r18
     75c:	20 7f       	andi	r18, 0xF0	; 240
     75e:	32 27       	eor	r19, r18
     760:	28 60       	ori	r18, 0x08	; 8
     762:	20 93 ed 00 	sts	0x00ED, r18	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7e00ed>
		CANIE2 |= 1 << mobnr;
	}
}

void disable_mob_interrupt(uint8_t mobnr){
	if(mobnr > 7){
     766:	88 30       	cpi	r24, 0x08	; 8
     768:	a0 f4       	brcc	.+40     	; 0x792 <can_free_mob+0x44>
		CANIE1 &= ~(1 << (mobnr-8));
		}else{
		CANIE2 &= ~(1 << mobnr);
     76a:	40 91 de 00 	lds	r20, 0x00DE	; 0x8000de <__TEXT_REGION_LENGTH__+0x7e00de>
     76e:	21 e0       	ldi	r18, 0x01	; 1
     770:	30 e0       	ldi	r19, 0x00	; 0
     772:	b9 01       	movw	r22, r18
     774:	02 c0       	rjmp	.+4      	; 0x77a <can_free_mob+0x2c>
     776:	66 0f       	add	r22, r22
     778:	77 1f       	adc	r23, r23
     77a:	8a 95       	dec	r24
     77c:	e2 f7       	brpl	.-8      	; 0x776 <can_free_mob+0x28>
     77e:	cb 01       	movw	r24, r22
     780:	80 95       	com	r24
     782:	84 23       	and	r24, r20
     784:	80 93 de 00 	sts	0x00DE, r24	; 0x8000de <__TEXT_REGION_LENGTH__+0x7e00de>
}

void can_free_mob(uint8_t mobnr){
	set_page(mobnr);
	disable_mob_interrupt(mobnr);
	CANSTMOB = 0x00;
     788:	10 92 ee 00 	sts	0x00EE, r1	; 0x8000ee <__TEXT_REGION_LENGTH__+0x7e00ee>
	CANCDMOB = 0x00;
     78c:	10 92 ef 00 	sts	0x00EF, r1	; 0x8000ef <__TEXT_REGION_LENGTH__+0x7e00ef>
     790:	08 95       	ret
	}
}

void disable_mob_interrupt(uint8_t mobnr){
	if(mobnr > 7){
		CANIE1 &= ~(1 << (mobnr-8));
     792:	20 91 df 00 	lds	r18, 0x00DF	; 0x8000df <__TEXT_REGION_LENGTH__+0x7e00df>
     796:	48 50       	subi	r20, 0x08	; 8
     798:	51 09       	sbc	r21, r1
     79a:	81 e0       	ldi	r24, 0x01	; 1
     79c:	90 e0       	ldi	r25, 0x00	; 0
     79e:	01 c0       	rjmp	.+2      	; 0x7a2 <can_free_mob+0x54>
     7a0:	88 0f       	add	r24, r24
     7a2:	4a 95       	dec	r20
     7a4:	ea f7       	brpl	.-6      	; 0x7a0 <can_free_mob+0x52>
     7a6:	80 95       	com	r24
     7a8:	82 23       	and	r24, r18
     7aa:	80 93 df 00 	sts	0x00DF, r24	; 0x8000df <__TEXT_REGION_LENGTH__+0x7e00df>
}

void can_free_mob(uint8_t mobnr){
	set_page(mobnr);
	disable_mob_interrupt(mobnr);
	CANSTMOB = 0x00;
     7ae:	10 92 ee 00 	sts	0x00EE, r1	; 0x8000ee <__TEXT_REGION_LENGTH__+0x7e00ee>
	CANCDMOB = 0x00;
     7b2:	10 92 ef 00 	sts	0x00EF, r1	; 0x8000ef <__TEXT_REGION_LENGTH__+0x7e00ef>
     7b6:	08 95       	ret

000007b8 <can_retrieve_message>:
int can_wait_for_receive(){
	while((CANGIT & INTR_MASK) != (1 << CANIT));
	return (CANHPMOB >> 4);
}

int can_retrieve_message(uint8_t mobnr, can_id_t id, can_msg_t message, uint8_t *size){
     7b8:	cf 93       	push	r28
     7ba:	df 93       	push	r29
     7bc:	d9 01       	movw	r26, r18

// --------- CAN Helper Functions ----------

// Select a MOB.
static void set_page(uint8_t mobnr){
	CANPAGE = (mobnr << 4) | PAGE_MASK;
     7be:	90 e1       	ldi	r25, 0x10	; 16
     7c0:	89 9f       	mul	r24, r25
     7c2:	f0 01       	movw	r30, r0
     7c4:	11 24       	eor	r1, r1
     7c6:	e8 60       	ori	r30, 0x08	; 8
     7c8:	e0 93 ed 00 	sts	0x00ED, r30	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7e00ed>

int can_retrieve_message(uint8_t mobnr, can_id_t id, can_msg_t message, uint8_t *size){
	set_page(mobnr);
	
	// Check if there is indeed a CAN message ready to be retrieved.
	if((CANGIT & INTR_MASK) != (1 << CANIT)) return 1;
     7cc:	90 91 da 00 	lds	r25, 0x00DA	; 0x8000da <__TEXT_REGION_LENGTH__+0x7e00da>
     7d0:	97 fd       	sbrc	r25, 7
     7d2:	05 c0       	rjmp	.+10     	; 0x7de <can_retrieve_message+0x26>
     7d4:	81 e0       	ldi	r24, 0x01	; 1
     7d6:	90 e0       	ldi	r25, 0x00	; 0
	can_get_message(mobnr, message);
	can_get_size(mobnr,size);
	can_get_id(mobnr,id);
	can_free_mob(mobnr);
	return 0;
}
     7d8:	df 91       	pop	r29
     7da:	cf 91       	pop	r28
     7dc:	08 95       	ret
int can_retrieve_message(uint8_t mobnr, can_id_t id, can_msg_t message, uint8_t *size){
	set_page(mobnr);
	
	// Check if there is indeed a CAN message ready to be retrieved.
	if((CANGIT & INTR_MASK) != (1 << CANIT)) return 1;
	if((CANSTMOB & RXOK_MASK) != (1 << RXOK)) return 2;
     7de:	90 91 ee 00 	lds	r25, 0x00EE	; 0x8000ee <__TEXT_REGION_LENGTH__+0x7e00ee>
     7e2:	95 fd       	sbrc	r25, 5
     7e4:	05 c0       	rjmp	.+10     	; 0x7f0 <can_retrieve_message+0x38>
     7e6:	82 e0       	ldi	r24, 0x02	; 2
     7e8:	90 e0       	ldi	r25, 0x00	; 0
	can_get_message(mobnr, message);
	can_get_size(mobnr,size);
	can_get_id(mobnr,id);
	can_free_mob(mobnr);
	return 0;
}
     7ea:	df 91       	pop	r29
     7ec:	cf 91       	pop	r28
     7ee:	08 95       	ret

// --------- CAN Helper Functions ----------

// Select a MOB.
static void set_page(uint8_t mobnr){
	CANPAGE = (mobnr << 4) | PAGE_MASK;
     7f0:	e0 93 ed 00 	sts	0x00ED, r30	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7e00ed>

// Retrieve CAN payload.
void can_get_message(uint8_t mobnr , uint8_t *message){
	set_page(mobnr);
	uint8_t j;
	for(j=0; j<8; j++){
     7f4:	90 e0       	ldi	r25, 0x00	; 0
	CANPAGE = (mobnr << 4) | PAGE_MASK;
}

// Select message data byte (0-7).
static void set_page_indx(uint8_t indx, uint8_t mobnr){
	CANPAGE = (mobnr << 4) | PAGE_MASK | indx;
     7f6:	3e 2f       	mov	r19, r30
     7f8:	39 2b       	or	r19, r25
     7fa:	30 93 ed 00 	sts	0x00ED, r19	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7e00ed>
void can_get_message(uint8_t mobnr , uint8_t *message){
	set_page(mobnr);
	uint8_t j;
	for(j=0; j<8; j++){
		set_page_indx(j, mobnr);
		*message = CANMSG;
     7fe:	30 91 fa 00 	lds	r19, 0x00FA	; 0x8000fa <__TEXT_REGION_LENGTH__+0x7e00fa>
     802:	ea 01       	movw	r28, r20
     804:	39 93       	st	Y+, r19
     806:	ae 01       	movw	r20, r28

// Retrieve CAN payload.
void can_get_message(uint8_t mobnr , uint8_t *message){
	set_page(mobnr);
	uint8_t j;
	for(j=0; j<8; j++){
     808:	9f 5f       	subi	r25, 0xFF	; 255
     80a:	98 30       	cpi	r25, 0x08	; 8
     80c:	a1 f7       	brne	.-24     	; 0x7f6 <can_retrieve_message+0x3e>
	CANPAGE = (mobnr << 4) | PAGE_MASK;
}

// Select message data byte (0-7).
static void set_page_indx(uint8_t indx, uint8_t mobnr){
	CANPAGE = (mobnr << 4) | PAGE_MASK | indx;
     80e:	e0 93 ed 00 	sts	0x00ED, r30	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7e00ed>

// --------- CAN Helper Functions ----------

// Select a MOB.
static void set_page(uint8_t mobnr){
	CANPAGE = (mobnr << 4) | PAGE_MASK;
     812:	e0 93 ed 00 	sts	0x00ED, r30	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7e00ed>
}

// Get the DLC of a message (for reception).
void can_get_size(uint8_t mobnr, uint8_t *size){
	set_page(mobnr);
	*size = CANCDMOB & 0x0F;
     816:	90 91 ef 00 	lds	r25, 0x00EF	; 0x8000ef <__TEXT_REGION_LENGTH__+0x7e00ef>
     81a:	9f 70       	andi	r25, 0x0F	; 15
     81c:	9c 93       	st	X, r25

// --------- CAN Helper Functions ----------

// Select a MOB.
static void set_page(uint8_t mobnr){
	CANPAGE = (mobnr << 4) | PAGE_MASK;
     81e:	e0 93 ed 00 	sts	0x00ED, r30	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7e00ed>
}

// Retrieve ID of received message.
void can_get_id(uint8_t mobnr, can_id_t id){
	set_page(mobnr);
	id[0] = CANIDT2 >> 5 | CANIDT1 << 3;
     822:	20 91 f2 00 	lds	r18, 0x00F2	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7e00f2>
     826:	90 91 f3 00 	lds	r25, 0x00F3	; 0x8000f3 <__TEXT_REGION_LENGTH__+0x7e00f3>
     82a:	22 95       	swap	r18
     82c:	26 95       	lsr	r18
     82e:	27 70       	andi	r18, 0x07	; 7
     830:	99 0f       	add	r25, r25
     832:	99 0f       	add	r25, r25
     834:	99 0f       	add	r25, r25
     836:	92 2b       	or	r25, r18
     838:	fb 01       	movw	r30, r22
     83a:	90 83       	st	Z, r25
	id[1] = CANIDT1 >> 5;
     83c:	90 91 f3 00 	lds	r25, 0x00F3	; 0x8000f3 <__TEXT_REGION_LENGTH__+0x7e00f3>
     840:	92 95       	swap	r25
     842:	96 95       	lsr	r25
     844:	97 70       	andi	r25, 0x07	; 7
     846:	91 83       	std	Z+1, r25	; 0x01
	if((CANSTMOB & RXOK_MASK) != (1 << RXOK)) return 2;
	
	can_get_message(mobnr, message);
	can_get_size(mobnr,size);
	can_get_id(mobnr,id);
	can_free_mob(mobnr);
     848:	82 df       	rcall	.-252    	; 0x74e <can_free_mob>
	return 0;
     84a:	80 e0       	ldi	r24, 0x00	; 0
     84c:	90 e0       	ldi	r25, 0x00	; 0
}
     84e:	df 91       	pop	r29
     850:	cf 91       	pop	r28
     852:	08 95       	ret

00000854 <__vector_16>:
#include <interrupt.h>

volatile uint32_t ms = 0;

ISR(TIMER0_COMP_vect)
{
     854:	1f 92       	push	r1
     856:	0f 92       	push	r0
     858:	0f b6       	in	r0, 0x3f	; 63
     85a:	0f 92       	push	r0
     85c:	11 24       	eor	r1, r1
     85e:	8f 93       	push	r24
     860:	9f 93       	push	r25
     862:	af 93       	push	r26
     864:	bf 93       	push	r27
	ms = ms+1;
     866:	80 91 2a 05 	lds	r24, 0x052A	; 0x80052a <__data_end>
     86a:	90 91 2b 05 	lds	r25, 0x052B	; 0x80052b <__data_end+0x1>
     86e:	a0 91 2c 05 	lds	r26, 0x052C	; 0x80052c <__data_end+0x2>
     872:	b0 91 2d 05 	lds	r27, 0x052D	; 0x80052d <__data_end+0x3>
     876:	01 96       	adiw	r24, 0x01	; 1
     878:	a1 1d       	adc	r26, r1
     87a:	b1 1d       	adc	r27, r1
     87c:	80 93 2a 05 	sts	0x052A, r24	; 0x80052a <__data_end>
     880:	90 93 2b 05 	sts	0x052B, r25	; 0x80052b <__data_end+0x1>
     884:	a0 93 2c 05 	sts	0x052C, r26	; 0x80052c <__data_end+0x2>
     888:	b0 93 2d 05 	sts	0x052D, r27	; 0x80052d <__data_end+0x3>
}
     88c:	bf 91       	pop	r27
     88e:	af 91       	pop	r26
     890:	9f 91       	pop	r25
     892:	8f 91       	pop	r24
     894:	0f 90       	pop	r0
     896:	0f be       	out	0x3f, r0	; 63
     898:	0f 90       	pop	r0
     89a:	1f 90       	pop	r1
     89c:	18 95       	reti

0000089e <millis>:

unsigned long int millis(void)
{
	return ms;
     89e:	60 91 2a 05 	lds	r22, 0x052A	; 0x80052a <__data_end>
     8a2:	70 91 2b 05 	lds	r23, 0x052B	; 0x80052b <__data_end+0x1>
     8a6:	80 91 2c 05 	lds	r24, 0x052C	; 0x80052c <__data_end+0x2>
     8aa:	90 91 2d 05 	lds	r25, 0x052D	; 0x80052d <__data_end+0x3>
}
     8ae:	08 95       	ret

000008b0 <clock_Init>:

void clock_Init(void)
{
	OCR0A = 61;
     8b0:	8d e3       	ldi	r24, 0x3D	; 61
     8b2:	87 bd       	out	0x27, r24	; 39
	TIMSK0 = 1 << OCIE0A;
     8b4:	82 e0       	ldi	r24, 0x02	; 2
     8b6:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__TEXT_REGION_LENGTH__+0x7e006e>
	TCCR0A = 1 << WGM00 | 1 << WGM01 | 1 << CS01 | 1 << CS00;
     8ba:	8b e4       	ldi	r24, 0x4B	; 75
     8bc:	84 bd       	out	0x24, r24	; 36
     8be:	08 95       	ret

000008c0 <uECC_vli_clear>:
    uECC_word_t _private[uECC_MAX_WORDS];
    uECC_word_t _public[uECC_MAX_WORDS * 2];
#endif

#if uECC_VLI_NATIVE_LITTLE_ENDIAN == 0
    uECC_vli_bytesToNative(_private, private_key, BITS_TO_BYTES(curve->num_n_bits));
     8c0:	dc 01       	movw	r26, r24
     8c2:	e6 e8       	ldi	r30, 0x86	; 134
     8c4:	f4 e0       	ldi	r31, 0x04	; 4
     8c6:	e6 1b       	sub	r30, r22
     8c8:	f1 09       	sbc	r31, r1
     8ca:	09 94       	ijmp
     8cc:	1d 92       	st	X+, r1
     8ce:	1d 92       	st	X+, r1
     8d0:	1d 92       	st	X+, r1
     8d2:	1d 92       	st	X+, r1
     8d4:	1d 92       	st	X+, r1
     8d6:	1d 92       	st	X+, r1
     8d8:	1d 92       	st	X+, r1
     8da:	1d 92       	st	X+, r1
     8dc:	1d 92       	st	X+, r1
     8de:	1d 92       	st	X+, r1
     8e0:	1d 92       	st	X+, r1
     8e2:	1d 92       	st	X+, r1
     8e4:	1d 92       	st	X+, r1
     8e6:	1d 92       	st	X+, r1
     8e8:	1d 92       	st	X+, r1
     8ea:	1d 92       	st	X+, r1
     8ec:	1d 92       	st	X+, r1
     8ee:	1d 92       	st	X+, r1
     8f0:	1d 92       	st	X+, r1
     8f2:	1d 92       	st	X+, r1
     8f4:	1d 92       	st	X+, r1
     8f6:	1d 92       	st	X+, r1
     8f8:	1d 92       	st	X+, r1
     8fa:	1d 92       	st	X+, r1
     8fc:	1d 92       	st	X+, r1
     8fe:	1d 92       	st	X+, r1
     900:	1d 92       	st	X+, r1
     902:	1d 92       	st	X+, r1
     904:	1d 92       	st	X+, r1
     906:	1d 92       	st	X+, r1
     908:	1d 92       	st	X+, r1
     90a:	1d 92       	st	X+, r1
     90c:	08 95       	ret

0000090e <uECC_vli_set>:
     90e:	cf 93       	push	r28
     910:	df 93       	push	r29
     912:	44 0f       	add	r20, r20
     914:	eb 01       	movw	r28, r22
     916:	dc 01       	movw	r26, r24
     918:	e1 ed       	ldi	r30, 0xD1	; 209
     91a:	f4 e0       	ldi	r31, 0x04	; 4
     91c:	e4 1b       	sub	r30, r20
     91e:	f1 09       	sbc	r31, r1
     920:	09 94       	ijmp
     922:	09 90       	ld	r0, Y+
     924:	0d 92       	st	X+, r0
     926:	09 90       	ld	r0, Y+
     928:	0d 92       	st	X+, r0
     92a:	09 90       	ld	r0, Y+
     92c:	0d 92       	st	X+, r0
     92e:	09 90       	ld	r0, Y+
     930:	0d 92       	st	X+, r0
     932:	09 90       	ld	r0, Y+
     934:	0d 92       	st	X+, r0
     936:	09 90       	ld	r0, Y+
     938:	0d 92       	st	X+, r0
     93a:	09 90       	ld	r0, Y+
     93c:	0d 92       	st	X+, r0
     93e:	09 90       	ld	r0, Y+
     940:	0d 92       	st	X+, r0
     942:	09 90       	ld	r0, Y+
     944:	0d 92       	st	X+, r0
     946:	09 90       	ld	r0, Y+
     948:	0d 92       	st	X+, r0
     94a:	09 90       	ld	r0, Y+
     94c:	0d 92       	st	X+, r0
     94e:	09 90       	ld	r0, Y+
     950:	0d 92       	st	X+, r0
     952:	09 90       	ld	r0, Y+
     954:	0d 92       	st	X+, r0
     956:	09 90       	ld	r0, Y+
     958:	0d 92       	st	X+, r0
     95a:	09 90       	ld	r0, Y+
     95c:	0d 92       	st	X+, r0
     95e:	09 90       	ld	r0, Y+
     960:	0d 92       	st	X+, r0
     962:	09 90       	ld	r0, Y+
     964:	0d 92       	st	X+, r0
     966:	09 90       	ld	r0, Y+
     968:	0d 92       	st	X+, r0
     96a:	09 90       	ld	r0, Y+
     96c:	0d 92       	st	X+, r0
     96e:	09 90       	ld	r0, Y+
     970:	0d 92       	st	X+, r0
     972:	09 90       	ld	r0, Y+
     974:	0d 92       	st	X+, r0
     976:	09 90       	ld	r0, Y+
     978:	0d 92       	st	X+, r0
     97a:	09 90       	ld	r0, Y+
     97c:	0d 92       	st	X+, r0
     97e:	09 90       	ld	r0, Y+
     980:	0d 92       	st	X+, r0
     982:	09 90       	ld	r0, Y+
     984:	0d 92       	st	X+, r0
     986:	09 90       	ld	r0, Y+
     988:	0d 92       	st	X+, r0
     98a:	09 90       	ld	r0, Y+
     98c:	0d 92       	st	X+, r0
     98e:	09 90       	ld	r0, Y+
     990:	0d 92       	st	X+, r0
     992:	09 90       	ld	r0, Y+
     994:	0d 92       	st	X+, r0
     996:	09 90       	ld	r0, Y+
     998:	0d 92       	st	X+, r0
     99a:	09 90       	ld	r0, Y+
     99c:	0d 92       	st	X+, r0
     99e:	09 90       	ld	r0, Y+
     9a0:	0d 92       	st	X+, r0
     9a2:	df 91       	pop	r29
     9a4:	cf 91       	pop	r28
     9a6:	08 95       	ret

000009a8 <uECC_vli_rshift1>:
     9a8:	26 2f       	mov	r18, r22
     9aa:	32 e0       	ldi	r19, 0x02	; 2
     9ac:	63 9f       	mul	r22, r19
     9ae:	20 0d       	add	r18, r0
     9b0:	11 24       	eor	r1, r1
     9b2:	23 50       	subi	r18, 0x03	; 3
     9b4:	dc 01       	movw	r26, r24
     9b6:	e2 e4       	ldi	r30, 0x42	; 66
     9b8:	f5 e0       	ldi	r31, 0x05	; 5
     9ba:	e2 1b       	sub	r30, r18
     9bc:	f1 09       	sbc	r31, r1
     9be:	a6 0f       	add	r26, r22
     9c0:	b1 1d       	adc	r27, r1
     9c2:	0e 90       	ld	r0, -X
     9c4:	06 94       	lsr	r0
     9c6:	0c 92       	st	X, r0
     9c8:	09 94       	ijmp
     9ca:	0e 90       	ld	r0, -X
     9cc:	07 94       	ror	r0
     9ce:	0c 92       	st	X, r0
     9d0:	0e 90       	ld	r0, -X
     9d2:	07 94       	ror	r0
     9d4:	0c 92       	st	X, r0
     9d6:	0e 90       	ld	r0, -X
     9d8:	07 94       	ror	r0
     9da:	0c 92       	st	X, r0
     9dc:	0e 90       	ld	r0, -X
     9de:	07 94       	ror	r0
     9e0:	0c 92       	st	X, r0
     9e2:	0e 90       	ld	r0, -X
     9e4:	07 94       	ror	r0
     9e6:	0c 92       	st	X, r0
     9e8:	0e 90       	ld	r0, -X
     9ea:	07 94       	ror	r0
     9ec:	0c 92       	st	X, r0
     9ee:	0e 90       	ld	r0, -X
     9f0:	07 94       	ror	r0
     9f2:	0c 92       	st	X, r0
     9f4:	0e 90       	ld	r0, -X
     9f6:	07 94       	ror	r0
     9f8:	0c 92       	st	X, r0
     9fa:	0e 90       	ld	r0, -X
     9fc:	07 94       	ror	r0
     9fe:	0c 92       	st	X, r0
     a00:	0e 90       	ld	r0, -X
     a02:	07 94       	ror	r0
     a04:	0c 92       	st	X, r0
     a06:	0e 90       	ld	r0, -X
     a08:	07 94       	ror	r0
     a0a:	0c 92       	st	X, r0
     a0c:	0e 90       	ld	r0, -X
     a0e:	07 94       	ror	r0
     a10:	0c 92       	st	X, r0
     a12:	0e 90       	ld	r0, -X
     a14:	07 94       	ror	r0
     a16:	0c 92       	st	X, r0
     a18:	0e 90       	ld	r0, -X
     a1a:	07 94       	ror	r0
     a1c:	0c 92       	st	X, r0
     a1e:	0e 90       	ld	r0, -X
     a20:	07 94       	ror	r0
     a22:	0c 92       	st	X, r0
     a24:	0e 90       	ld	r0, -X
     a26:	07 94       	ror	r0
     a28:	0c 92       	st	X, r0
     a2a:	0e 90       	ld	r0, -X
     a2c:	07 94       	ror	r0
     a2e:	0c 92       	st	X, r0
     a30:	0e 90       	ld	r0, -X
     a32:	07 94       	ror	r0
     a34:	0c 92       	st	X, r0
     a36:	0e 90       	ld	r0, -X
     a38:	07 94       	ror	r0
     a3a:	0c 92       	st	X, r0
     a3c:	0e 90       	ld	r0, -X
     a3e:	07 94       	ror	r0
     a40:	0c 92       	st	X, r0
     a42:	0e 90       	ld	r0, -X
     a44:	07 94       	ror	r0
     a46:	0c 92       	st	X, r0
     a48:	0e 90       	ld	r0, -X
     a4a:	07 94       	ror	r0
     a4c:	0c 92       	st	X, r0
     a4e:	0e 90       	ld	r0, -X
     a50:	07 94       	ror	r0
     a52:	0c 92       	st	X, r0
     a54:	0e 90       	ld	r0, -X
     a56:	07 94       	ror	r0
     a58:	0c 92       	st	X, r0
     a5a:	0e 90       	ld	r0, -X
     a5c:	07 94       	ror	r0
     a5e:	0c 92       	st	X, r0
     a60:	0e 90       	ld	r0, -X
     a62:	07 94       	ror	r0
     a64:	0c 92       	st	X, r0
     a66:	0e 90       	ld	r0, -X
     a68:	07 94       	ror	r0
     a6a:	0c 92       	st	X, r0
     a6c:	0e 90       	ld	r0, -X
     a6e:	07 94       	ror	r0
     a70:	0c 92       	st	X, r0
     a72:	0e 90       	ld	r0, -X
     a74:	07 94       	ror	r0
     a76:	0c 92       	st	X, r0
     a78:	0e 90       	ld	r0, -X
     a7a:	07 94       	ror	r0
     a7c:	0c 92       	st	X, r0
     a7e:	0e 90       	ld	r0, -X
     a80:	07 94       	ror	r0
     a82:	0c 92       	st	X, r0
     a84:	08 95       	ret

00000a86 <uECC_vli_add>:
     a86:	cf 93       	push	r28
     a88:	df 93       	push	r29
     a8a:	22 0f       	add	r18, r18
     a8c:	db 01       	movw	r26, r22
     a8e:	ea 01       	movw	r28, r20
     a90:	ac 01       	movw	r20, r24
     a92:	ef e8       	ldi	r30, 0x8F	; 143
     a94:	f5 e0       	ldi	r31, 0x05	; 5
     a96:	e2 1b       	sub	r30, r18
     a98:	f1 09       	sbc	r31, r1
     a9a:	88 94       	clc
     a9c:	09 94       	ijmp
     a9e:	fa 01       	movw	r30, r20
     aa0:	3e c0       	rjmp	.+124    	; 0xb1e <add_90_32>
     aa2:	fa 01       	movw	r30, r20
     aa4:	40 c0       	rjmp	.+128    	; 0xb26 <add_90_31>
     aa6:	fa 01       	movw	r30, r20
     aa8:	42 c0       	rjmp	.+132    	; 0xb2e <add_90_30>
     aaa:	fa 01       	movw	r30, r20
     aac:	44 c0       	rjmp	.+136    	; 0xb36 <add_90_29>
     aae:	fa 01       	movw	r30, r20
     ab0:	46 c0       	rjmp	.+140    	; 0xb3e <add_90_28>
     ab2:	fa 01       	movw	r30, r20
     ab4:	48 c0       	rjmp	.+144    	; 0xb46 <add_90_27>
     ab6:	fa 01       	movw	r30, r20
     ab8:	4a c0       	rjmp	.+148    	; 0xb4e <add_90_26>
     aba:	fa 01       	movw	r30, r20
     abc:	4c c0       	rjmp	.+152    	; 0xb56 <add_90_25>
     abe:	fa 01       	movw	r30, r20
     ac0:	4e c0       	rjmp	.+156    	; 0xb5e <add_90_24>
     ac2:	fa 01       	movw	r30, r20
     ac4:	50 c0       	rjmp	.+160    	; 0xb66 <add_90_23>
     ac6:	fa 01       	movw	r30, r20
     ac8:	52 c0       	rjmp	.+164    	; 0xb6e <add_90_22>
     aca:	fa 01       	movw	r30, r20
     acc:	54 c0       	rjmp	.+168    	; 0xb76 <add_90_21>
     ace:	fa 01       	movw	r30, r20
     ad0:	56 c0       	rjmp	.+172    	; 0xb7e <add_90_20>
     ad2:	fa 01       	movw	r30, r20
     ad4:	58 c0       	rjmp	.+176    	; 0xb86 <add_90_19>
     ad6:	fa 01       	movw	r30, r20
     ad8:	5a c0       	rjmp	.+180    	; 0xb8e <add_90_18>
     ada:	fa 01       	movw	r30, r20
     adc:	5c c0       	rjmp	.+184    	; 0xb96 <add_90_17>
     ade:	fa 01       	movw	r30, r20
     ae0:	5e c0       	rjmp	.+188    	; 0xb9e <add_90_16>
     ae2:	fa 01       	movw	r30, r20
     ae4:	60 c0       	rjmp	.+192    	; 0xba6 <add_90_15>
     ae6:	fa 01       	movw	r30, r20
     ae8:	62 c0       	rjmp	.+196    	; 0xbae <add_90_14>
     aea:	fa 01       	movw	r30, r20
     aec:	64 c0       	rjmp	.+200    	; 0xbb6 <add_90_13>
     aee:	fa 01       	movw	r30, r20
     af0:	66 c0       	rjmp	.+204    	; 0xbbe <add_90_12>
     af2:	fa 01       	movw	r30, r20
     af4:	68 c0       	rjmp	.+208    	; 0xbc6 <add_90_11>
     af6:	fa 01       	movw	r30, r20
     af8:	6a c0       	rjmp	.+212    	; 0xbce <add_90_10>
     afa:	fa 01       	movw	r30, r20
     afc:	6c c0       	rjmp	.+216    	; 0xbd6 <add_90_9>
     afe:	fa 01       	movw	r30, r20
     b00:	6e c0       	rjmp	.+220    	; 0xbde <add_90_8>
     b02:	fa 01       	movw	r30, r20
     b04:	70 c0       	rjmp	.+224    	; 0xbe6 <add_90_7>
     b06:	fa 01       	movw	r30, r20
     b08:	72 c0       	rjmp	.+228    	; 0xbee <add_90_6>
     b0a:	fa 01       	movw	r30, r20
     b0c:	74 c0       	rjmp	.+232    	; 0xbf6 <add_90_5>
     b0e:	fa 01       	movw	r30, r20
     b10:	76 c0       	rjmp	.+236    	; 0xbfe <add_90_4>
     b12:	fa 01       	movw	r30, r20
     b14:	78 c0       	rjmp	.+240    	; 0xc06 <add_90_3>
     b16:	fa 01       	movw	r30, r20
     b18:	7a c0       	rjmp	.+244    	; 0xc0e <add_90_2>
     b1a:	fa 01       	movw	r30, r20
     b1c:	7c c0       	rjmp	.+248    	; 0xc16 <add_90_1>

00000b1e <add_90_32>:
     b1e:	8d 91       	ld	r24, X+
     b20:	99 91       	ld	r25, Y+
     b22:	89 1f       	adc	r24, r25
     b24:	81 93       	st	Z+, r24

00000b26 <add_90_31>:
     b26:	8d 91       	ld	r24, X+
     b28:	99 91       	ld	r25, Y+
     b2a:	89 1f       	adc	r24, r25
     b2c:	81 93       	st	Z+, r24

00000b2e <add_90_30>:
     b2e:	8d 91       	ld	r24, X+
     b30:	99 91       	ld	r25, Y+
     b32:	89 1f       	adc	r24, r25
     b34:	81 93       	st	Z+, r24

00000b36 <add_90_29>:
     b36:	8d 91       	ld	r24, X+
     b38:	99 91       	ld	r25, Y+
     b3a:	89 1f       	adc	r24, r25
     b3c:	81 93       	st	Z+, r24

00000b3e <add_90_28>:
     b3e:	8d 91       	ld	r24, X+
     b40:	99 91       	ld	r25, Y+
     b42:	89 1f       	adc	r24, r25
     b44:	81 93       	st	Z+, r24

00000b46 <add_90_27>:
     b46:	8d 91       	ld	r24, X+
     b48:	99 91       	ld	r25, Y+
     b4a:	89 1f       	adc	r24, r25
     b4c:	81 93       	st	Z+, r24

00000b4e <add_90_26>:
     b4e:	8d 91       	ld	r24, X+
     b50:	99 91       	ld	r25, Y+
     b52:	89 1f       	adc	r24, r25
     b54:	81 93       	st	Z+, r24

00000b56 <add_90_25>:
     b56:	8d 91       	ld	r24, X+
     b58:	99 91       	ld	r25, Y+
     b5a:	89 1f       	adc	r24, r25
     b5c:	81 93       	st	Z+, r24

00000b5e <add_90_24>:
     b5e:	8d 91       	ld	r24, X+
     b60:	99 91       	ld	r25, Y+
     b62:	89 1f       	adc	r24, r25
     b64:	81 93       	st	Z+, r24

00000b66 <add_90_23>:
     b66:	8d 91       	ld	r24, X+
     b68:	99 91       	ld	r25, Y+
     b6a:	89 1f       	adc	r24, r25
     b6c:	81 93       	st	Z+, r24

00000b6e <add_90_22>:
     b6e:	8d 91       	ld	r24, X+
     b70:	99 91       	ld	r25, Y+
     b72:	89 1f       	adc	r24, r25
     b74:	81 93       	st	Z+, r24

00000b76 <add_90_21>:
     b76:	8d 91       	ld	r24, X+
     b78:	99 91       	ld	r25, Y+
     b7a:	89 1f       	adc	r24, r25
     b7c:	81 93       	st	Z+, r24

00000b7e <add_90_20>:
     b7e:	8d 91       	ld	r24, X+
     b80:	99 91       	ld	r25, Y+
     b82:	89 1f       	adc	r24, r25
     b84:	81 93       	st	Z+, r24

00000b86 <add_90_19>:
     b86:	8d 91       	ld	r24, X+
     b88:	99 91       	ld	r25, Y+
     b8a:	89 1f       	adc	r24, r25
     b8c:	81 93       	st	Z+, r24

00000b8e <add_90_18>:
     b8e:	8d 91       	ld	r24, X+
     b90:	99 91       	ld	r25, Y+
     b92:	89 1f       	adc	r24, r25
     b94:	81 93       	st	Z+, r24

00000b96 <add_90_17>:
     b96:	8d 91       	ld	r24, X+
     b98:	99 91       	ld	r25, Y+
     b9a:	89 1f       	adc	r24, r25
     b9c:	81 93       	st	Z+, r24

00000b9e <add_90_16>:
     b9e:	8d 91       	ld	r24, X+
     ba0:	99 91       	ld	r25, Y+
     ba2:	89 1f       	adc	r24, r25
     ba4:	81 93       	st	Z+, r24

00000ba6 <add_90_15>:
     ba6:	8d 91       	ld	r24, X+
     ba8:	99 91       	ld	r25, Y+
     baa:	89 1f       	adc	r24, r25
     bac:	81 93       	st	Z+, r24

00000bae <add_90_14>:
     bae:	8d 91       	ld	r24, X+
     bb0:	99 91       	ld	r25, Y+
     bb2:	89 1f       	adc	r24, r25
     bb4:	81 93       	st	Z+, r24

00000bb6 <add_90_13>:
     bb6:	8d 91       	ld	r24, X+
     bb8:	99 91       	ld	r25, Y+
     bba:	89 1f       	adc	r24, r25
     bbc:	81 93       	st	Z+, r24

00000bbe <add_90_12>:
     bbe:	8d 91       	ld	r24, X+
     bc0:	99 91       	ld	r25, Y+
     bc2:	89 1f       	adc	r24, r25
     bc4:	81 93       	st	Z+, r24

00000bc6 <add_90_11>:
     bc6:	8d 91       	ld	r24, X+
     bc8:	99 91       	ld	r25, Y+
     bca:	89 1f       	adc	r24, r25
     bcc:	81 93       	st	Z+, r24

00000bce <add_90_10>:
     bce:	8d 91       	ld	r24, X+
     bd0:	99 91       	ld	r25, Y+
     bd2:	89 1f       	adc	r24, r25
     bd4:	81 93       	st	Z+, r24

00000bd6 <add_90_9>:
     bd6:	8d 91       	ld	r24, X+
     bd8:	99 91       	ld	r25, Y+
     bda:	89 1f       	adc	r24, r25
     bdc:	81 93       	st	Z+, r24

00000bde <add_90_8>:
     bde:	8d 91       	ld	r24, X+
     be0:	99 91       	ld	r25, Y+
     be2:	89 1f       	adc	r24, r25
     be4:	81 93       	st	Z+, r24

00000be6 <add_90_7>:
     be6:	8d 91       	ld	r24, X+
     be8:	99 91       	ld	r25, Y+
     bea:	89 1f       	adc	r24, r25
     bec:	81 93       	st	Z+, r24

00000bee <add_90_6>:
     bee:	8d 91       	ld	r24, X+
     bf0:	99 91       	ld	r25, Y+
     bf2:	89 1f       	adc	r24, r25
     bf4:	81 93       	st	Z+, r24

00000bf6 <add_90_5>:
     bf6:	8d 91       	ld	r24, X+
     bf8:	99 91       	ld	r25, Y+
     bfa:	89 1f       	adc	r24, r25
     bfc:	81 93       	st	Z+, r24

00000bfe <add_90_4>:
     bfe:	8d 91       	ld	r24, X+
     c00:	99 91       	ld	r25, Y+
     c02:	89 1f       	adc	r24, r25
     c04:	81 93       	st	Z+, r24

00000c06 <add_90_3>:
     c06:	8d 91       	ld	r24, X+
     c08:	99 91       	ld	r25, Y+
     c0a:	89 1f       	adc	r24, r25
     c0c:	81 93       	st	Z+, r24

00000c0e <add_90_2>:
     c0e:	8d 91       	ld	r24, X+
     c10:	99 91       	ld	r25, Y+
     c12:	89 1f       	adc	r24, r25
     c14:	81 93       	st	Z+, r24

00000c16 <add_90_1>:
     c16:	8d 91       	ld	r24, X+
     c18:	99 91       	ld	r25, Y+
     c1a:	89 1f       	adc	r24, r25
     c1c:	81 93       	st	Z+, r24
     c1e:	81 2d       	mov	r24, r1
     c20:	88 1f       	adc	r24, r24
     c22:	df 91       	pop	r29
     c24:	cf 91       	pop	r28
     c26:	08 95       	ret

00000c28 <uECC_vli_sub>:
     c28:	cf 93       	push	r28
     c2a:	df 93       	push	r29
     c2c:	22 0f       	add	r18, r18
     c2e:	db 01       	movw	r26, r22
     c30:	ea 01       	movw	r28, r20
     c32:	ac 01       	movw	r20, r24
     c34:	e0 e6       	ldi	r30, 0x60	; 96
     c36:	f6 e0       	ldi	r31, 0x06	; 6
     c38:	e2 1b       	sub	r30, r18
     c3a:	f1 09       	sbc	r31, r1
     c3c:	88 94       	clc
     c3e:	09 94       	ijmp
     c40:	fa 01       	movw	r30, r20
     c42:	3e c0       	rjmp	.+124    	; 0xcc0 <sub_130_32>
     c44:	fa 01       	movw	r30, r20
     c46:	40 c0       	rjmp	.+128    	; 0xcc8 <sub_130_31>
     c48:	fa 01       	movw	r30, r20
     c4a:	42 c0       	rjmp	.+132    	; 0xcd0 <sub_130_30>
     c4c:	fa 01       	movw	r30, r20
     c4e:	44 c0       	rjmp	.+136    	; 0xcd8 <sub_130_29>
     c50:	fa 01       	movw	r30, r20
     c52:	46 c0       	rjmp	.+140    	; 0xce0 <sub_130_28>
     c54:	fa 01       	movw	r30, r20
     c56:	48 c0       	rjmp	.+144    	; 0xce8 <sub_130_27>
     c58:	fa 01       	movw	r30, r20
     c5a:	4a c0       	rjmp	.+148    	; 0xcf0 <sub_130_26>
     c5c:	fa 01       	movw	r30, r20
     c5e:	4c c0       	rjmp	.+152    	; 0xcf8 <sub_130_25>
     c60:	fa 01       	movw	r30, r20
     c62:	4e c0       	rjmp	.+156    	; 0xd00 <sub_130_24>
     c64:	fa 01       	movw	r30, r20
     c66:	50 c0       	rjmp	.+160    	; 0xd08 <sub_130_23>
     c68:	fa 01       	movw	r30, r20
     c6a:	52 c0       	rjmp	.+164    	; 0xd10 <sub_130_22>
     c6c:	fa 01       	movw	r30, r20
     c6e:	54 c0       	rjmp	.+168    	; 0xd18 <sub_130_21>
     c70:	fa 01       	movw	r30, r20
     c72:	56 c0       	rjmp	.+172    	; 0xd20 <sub_130_20>
     c74:	fa 01       	movw	r30, r20
     c76:	58 c0       	rjmp	.+176    	; 0xd28 <sub_130_19>
     c78:	fa 01       	movw	r30, r20
     c7a:	5a c0       	rjmp	.+180    	; 0xd30 <sub_130_18>
     c7c:	fa 01       	movw	r30, r20
     c7e:	5c c0       	rjmp	.+184    	; 0xd38 <sub_130_17>
     c80:	fa 01       	movw	r30, r20
     c82:	5e c0       	rjmp	.+188    	; 0xd40 <sub_130_16>
     c84:	fa 01       	movw	r30, r20
     c86:	60 c0       	rjmp	.+192    	; 0xd48 <sub_130_15>
     c88:	fa 01       	movw	r30, r20
     c8a:	62 c0       	rjmp	.+196    	; 0xd50 <sub_130_14>
     c8c:	fa 01       	movw	r30, r20
     c8e:	64 c0       	rjmp	.+200    	; 0xd58 <sub_130_13>
     c90:	fa 01       	movw	r30, r20
     c92:	66 c0       	rjmp	.+204    	; 0xd60 <sub_130_12>
     c94:	fa 01       	movw	r30, r20
     c96:	68 c0       	rjmp	.+208    	; 0xd68 <sub_130_11>
     c98:	fa 01       	movw	r30, r20
     c9a:	6a c0       	rjmp	.+212    	; 0xd70 <sub_130_10>
     c9c:	fa 01       	movw	r30, r20
     c9e:	6c c0       	rjmp	.+216    	; 0xd78 <sub_130_9>
     ca0:	fa 01       	movw	r30, r20
     ca2:	6e c0       	rjmp	.+220    	; 0xd80 <sub_130_8>
     ca4:	fa 01       	movw	r30, r20
     ca6:	70 c0       	rjmp	.+224    	; 0xd88 <sub_130_7>
     ca8:	fa 01       	movw	r30, r20
     caa:	72 c0       	rjmp	.+228    	; 0xd90 <sub_130_6>
     cac:	fa 01       	movw	r30, r20
     cae:	74 c0       	rjmp	.+232    	; 0xd98 <sub_130_5>
     cb0:	fa 01       	movw	r30, r20
     cb2:	76 c0       	rjmp	.+236    	; 0xda0 <sub_130_4>
     cb4:	fa 01       	movw	r30, r20
     cb6:	78 c0       	rjmp	.+240    	; 0xda8 <sub_130_3>
     cb8:	fa 01       	movw	r30, r20
     cba:	7a c0       	rjmp	.+244    	; 0xdb0 <sub_130_2>
     cbc:	fa 01       	movw	r30, r20
     cbe:	7c c0       	rjmp	.+248    	; 0xdb8 <sub_130_1>

00000cc0 <sub_130_32>:
     cc0:	8d 91       	ld	r24, X+
     cc2:	99 91       	ld	r25, Y+
     cc4:	89 0b       	sbc	r24, r25
     cc6:	81 93       	st	Z+, r24

00000cc8 <sub_130_31>:
     cc8:	8d 91       	ld	r24, X+
     cca:	99 91       	ld	r25, Y+
     ccc:	89 0b       	sbc	r24, r25
     cce:	81 93       	st	Z+, r24

00000cd0 <sub_130_30>:
     cd0:	8d 91       	ld	r24, X+
     cd2:	99 91       	ld	r25, Y+
     cd4:	89 0b       	sbc	r24, r25
     cd6:	81 93       	st	Z+, r24

00000cd8 <sub_130_29>:
     cd8:	8d 91       	ld	r24, X+
     cda:	99 91       	ld	r25, Y+
     cdc:	89 0b       	sbc	r24, r25
     cde:	81 93       	st	Z+, r24

00000ce0 <sub_130_28>:
     ce0:	8d 91       	ld	r24, X+
     ce2:	99 91       	ld	r25, Y+
     ce4:	89 0b       	sbc	r24, r25
     ce6:	81 93       	st	Z+, r24

00000ce8 <sub_130_27>:
     ce8:	8d 91       	ld	r24, X+
     cea:	99 91       	ld	r25, Y+
     cec:	89 0b       	sbc	r24, r25
     cee:	81 93       	st	Z+, r24

00000cf0 <sub_130_26>:
     cf0:	8d 91       	ld	r24, X+
     cf2:	99 91       	ld	r25, Y+
     cf4:	89 0b       	sbc	r24, r25
     cf6:	81 93       	st	Z+, r24

00000cf8 <sub_130_25>:
     cf8:	8d 91       	ld	r24, X+
     cfa:	99 91       	ld	r25, Y+
     cfc:	89 0b       	sbc	r24, r25
     cfe:	81 93       	st	Z+, r24

00000d00 <sub_130_24>:
     d00:	8d 91       	ld	r24, X+
     d02:	99 91       	ld	r25, Y+
     d04:	89 0b       	sbc	r24, r25
     d06:	81 93       	st	Z+, r24

00000d08 <sub_130_23>:
     d08:	8d 91       	ld	r24, X+
     d0a:	99 91       	ld	r25, Y+
     d0c:	89 0b       	sbc	r24, r25
     d0e:	81 93       	st	Z+, r24

00000d10 <sub_130_22>:
     d10:	8d 91       	ld	r24, X+
     d12:	99 91       	ld	r25, Y+
     d14:	89 0b       	sbc	r24, r25
     d16:	81 93       	st	Z+, r24

00000d18 <sub_130_21>:
     d18:	8d 91       	ld	r24, X+
     d1a:	99 91       	ld	r25, Y+
     d1c:	89 0b       	sbc	r24, r25
     d1e:	81 93       	st	Z+, r24

00000d20 <sub_130_20>:
     d20:	8d 91       	ld	r24, X+
     d22:	99 91       	ld	r25, Y+
     d24:	89 0b       	sbc	r24, r25
     d26:	81 93       	st	Z+, r24

00000d28 <sub_130_19>:
     d28:	8d 91       	ld	r24, X+
     d2a:	99 91       	ld	r25, Y+
     d2c:	89 0b       	sbc	r24, r25
     d2e:	81 93       	st	Z+, r24

00000d30 <sub_130_18>:
     d30:	8d 91       	ld	r24, X+
     d32:	99 91       	ld	r25, Y+
     d34:	89 0b       	sbc	r24, r25
     d36:	81 93       	st	Z+, r24

00000d38 <sub_130_17>:
     d38:	8d 91       	ld	r24, X+
     d3a:	99 91       	ld	r25, Y+
     d3c:	89 0b       	sbc	r24, r25
     d3e:	81 93       	st	Z+, r24

00000d40 <sub_130_16>:
     d40:	8d 91       	ld	r24, X+
     d42:	99 91       	ld	r25, Y+
     d44:	89 0b       	sbc	r24, r25
     d46:	81 93       	st	Z+, r24

00000d48 <sub_130_15>:
     d48:	8d 91       	ld	r24, X+
     d4a:	99 91       	ld	r25, Y+
     d4c:	89 0b       	sbc	r24, r25
     d4e:	81 93       	st	Z+, r24

00000d50 <sub_130_14>:
     d50:	8d 91       	ld	r24, X+
     d52:	99 91       	ld	r25, Y+
     d54:	89 0b       	sbc	r24, r25
     d56:	81 93       	st	Z+, r24

00000d58 <sub_130_13>:
     d58:	8d 91       	ld	r24, X+
     d5a:	99 91       	ld	r25, Y+
     d5c:	89 0b       	sbc	r24, r25
     d5e:	81 93       	st	Z+, r24

00000d60 <sub_130_12>:
     d60:	8d 91       	ld	r24, X+
     d62:	99 91       	ld	r25, Y+
     d64:	89 0b       	sbc	r24, r25
     d66:	81 93       	st	Z+, r24

00000d68 <sub_130_11>:
     d68:	8d 91       	ld	r24, X+
     d6a:	99 91       	ld	r25, Y+
     d6c:	89 0b       	sbc	r24, r25
     d6e:	81 93       	st	Z+, r24

00000d70 <sub_130_10>:
     d70:	8d 91       	ld	r24, X+
     d72:	99 91       	ld	r25, Y+
     d74:	89 0b       	sbc	r24, r25
     d76:	81 93       	st	Z+, r24

00000d78 <sub_130_9>:
     d78:	8d 91       	ld	r24, X+
     d7a:	99 91       	ld	r25, Y+
     d7c:	89 0b       	sbc	r24, r25
     d7e:	81 93       	st	Z+, r24

00000d80 <sub_130_8>:
     d80:	8d 91       	ld	r24, X+
     d82:	99 91       	ld	r25, Y+
     d84:	89 0b       	sbc	r24, r25
     d86:	81 93       	st	Z+, r24

00000d88 <sub_130_7>:
     d88:	8d 91       	ld	r24, X+
     d8a:	99 91       	ld	r25, Y+
     d8c:	89 0b       	sbc	r24, r25
     d8e:	81 93       	st	Z+, r24

00000d90 <sub_130_6>:
     d90:	8d 91       	ld	r24, X+
     d92:	99 91       	ld	r25, Y+
     d94:	89 0b       	sbc	r24, r25
     d96:	81 93       	st	Z+, r24

00000d98 <sub_130_5>:
     d98:	8d 91       	ld	r24, X+
     d9a:	99 91       	ld	r25, Y+
     d9c:	89 0b       	sbc	r24, r25
     d9e:	81 93       	st	Z+, r24

00000da0 <sub_130_4>:
     da0:	8d 91       	ld	r24, X+
     da2:	99 91       	ld	r25, Y+
     da4:	89 0b       	sbc	r24, r25
     da6:	81 93       	st	Z+, r24

00000da8 <sub_130_3>:
     da8:	8d 91       	ld	r24, X+
     daa:	99 91       	ld	r25, Y+
     dac:	89 0b       	sbc	r24, r25
     dae:	81 93       	st	Z+, r24

00000db0 <sub_130_2>:
     db0:	8d 91       	ld	r24, X+
     db2:	99 91       	ld	r25, Y+
     db4:	89 0b       	sbc	r24, r25
     db6:	81 93       	st	Z+, r24

00000db8 <sub_130_1>:
     db8:	8d 91       	ld	r24, X+
     dba:	99 91       	ld	r25, Y+
     dbc:	89 0b       	sbc	r24, r25
     dbe:	81 93       	st	Z+, r24
     dc0:	81 2d       	mov	r24, r1
     dc2:	88 1f       	adc	r24, r24
     dc4:	df 91       	pop	r29
     dc6:	cf 91       	pop	r28
     dc8:	08 95       	ret

00000dca <uECC_vli_mult>:
     dca:	cf 93       	push	r28
     dcc:	df 93       	push	r29
     dce:	fc 01       	movw	r30, r24
     dd0:	db 01       	movw	r26, r22
     dd2:	ea 01       	movw	r28, r20
     dd4:	90 e0       	ldi	r25, 0x00	; 0
     dd6:	89 2f       	mov	r24, r25
     dd8:	39 2f       	mov	r19, r25
     dda:	49 2f       	mov	r20, r25
     ddc:	51 e0       	ldi	r21, 0x01	; 1
     dde:	60 e0       	ldi	r22, 0x00	; 0
     de0:	c5 0f       	add	r28, r21
     de2:	d4 1f       	adc	r29, r20
     de4:	0d 90       	ld	r0, X+
     de6:	1a 90       	ld	r1, -Y
     de8:	01 9c       	mul	r0, r1
     dea:	90 0d       	add	r25, r0
     dec:	81 1d       	adc	r24, r1
     dee:	34 1f       	adc	r19, r20
     df0:	63 95       	inc	r22
     df2:	65 17       	cp	r22, r21
     df4:	b8 f3       	brcs	.-18     	; 0xde4 <uECC_vli_mult+0x1a>
     df6:	a5 1b       	sub	r26, r21
     df8:	b4 0b       	sbc	r27, r20
     dfa:	91 93       	st	Z+, r25
     dfc:	98 2f       	mov	r25, r24
     dfe:	83 2f       	mov	r24, r19
     e00:	34 2f       	mov	r19, r20
     e02:	53 95       	inc	r21
     e04:	52 17       	cp	r21, r18
     e06:	58 f3       	brcs	.-42     	; 0xdde <uECC_vli_mult+0x14>
     e08:	52 2f       	mov	r21, r18
     e0a:	c2 0f       	add	r28, r18
     e0c:	d4 1f       	adc	r29, r20
     e0e:	60 e0       	ldi	r22, 0x00	; 0
     e10:	0d 90       	ld	r0, X+
     e12:	1a 90       	ld	r1, -Y
     e14:	01 9c       	mul	r0, r1
     e16:	90 0d       	add	r25, r0
     e18:	81 1d       	adc	r24, r1
     e1a:	34 1f       	adc	r19, r20
     e1c:	63 95       	inc	r22
     e1e:	65 17       	cp	r22, r21
     e20:	b8 f3       	brcs	.-18     	; 0xe10 <uECC_vli_mult+0x46>
     e22:	c5 0f       	add	r28, r21
     e24:	d4 1f       	adc	r29, r20
     e26:	91 93       	st	Z+, r25
     e28:	98 2f       	mov	r25, r24
     e2a:	83 2f       	mov	r24, r19
     e2c:	34 2f       	mov	r19, r20
     e2e:	5a 95       	dec	r21
     e30:	a5 1b       	sub	r26, r21
     e32:	b4 0b       	sbc	r27, r20
     e34:	54 17       	cp	r21, r20
     e36:	59 f7       	brne	.-42     	; 0xe0e <uECC_vli_mult+0x44>
     e38:	91 93       	st	Z+, r25
     e3a:	11 24       	eor	r1, r1
     e3c:	df 91       	pop	r29
     e3e:	cf 91       	pop	r28
     e40:	08 95       	ret

00000e42 <uECC_vli_numBits>:
     e42:	9c 01       	movw	r18, r24
     e44:	61 50       	subi	r22, 0x01	; 1
     e46:	67 fd       	sbrc	r22, 7
     e48:	16 c0       	rjmp	.+44     	; 0xe76 <uECC_vli_numBits+0x34>
     e4a:	fc 01       	movw	r30, r24
     e4c:	e6 0f       	add	r30, r22
     e4e:	f1 1d       	adc	r31, r1
     e50:	67 fd       	sbrc	r22, 7
     e52:	fa 95       	dec	r31
     e54:	80 81       	ld	r24, Z
     e56:	88 23       	and	r24, r24
     e58:	49 f0       	breq	.+18     	; 0xe6c <uECC_vli_numBits+0x2a>
     e5a:	0d c0       	rjmp	.+26     	; 0xe76 <uECC_vli_numBits+0x34>
     e5c:	f9 01       	movw	r30, r18
     e5e:	e6 0f       	add	r30, r22
     e60:	f1 1d       	adc	r31, r1
     e62:	67 fd       	sbrc	r22, 7
     e64:	fa 95       	dec	r31
     e66:	90 81       	ld	r25, Z
     e68:	91 11       	cpse	r25, r1
     e6a:	05 c0       	rjmp	.+10     	; 0xe76 <uECC_vli_numBits+0x34>
     e6c:	61 50       	subi	r22, 0x01	; 1
     e6e:	b0 f7       	brcc	.-20     	; 0xe5c <uECC_vli_numBits+0x1a>
     e70:	80 e0       	ldi	r24, 0x00	; 0
     e72:	90 e0       	ldi	r25, 0x00	; 0
     e74:	08 95       	ret
     e76:	6f 5f       	subi	r22, 0xFF	; 255
     e78:	d9 f3       	breq	.-10     	; 0xe70 <uECC_vli_numBits+0x2e>
     e7a:	06 2e       	mov	r0, r22
     e7c:	00 0c       	add	r0, r0
     e7e:	77 0b       	sbc	r23, r23
     e80:	26 0f       	add	r18, r22
     e82:	37 1f       	adc	r19, r23
     e84:	f9 01       	movw	r30, r18
     e86:	31 97       	sbiw	r30, 0x01	; 1
     e88:	80 81       	ld	r24, Z
     e8a:	88 23       	and	r24, r24
     e8c:	91 f0       	breq	.+36     	; 0xeb2 <uECC_vli_numBits+0x70>
     e8e:	90 e0       	ldi	r25, 0x00	; 0
     e90:	86 95       	lsr	r24
     e92:	9f 5f       	subi	r25, 0xFF	; 255
     e94:	81 11       	cpse	r24, r1
     e96:	fc cf       	rjmp	.-8      	; 0xe90 <uECC_vli_numBits+0x4e>
     e98:	89 2f       	mov	r24, r25
     e9a:	90 e0       	ldi	r25, 0x00	; 0
     e9c:	61 50       	subi	r22, 0x01	; 1
     e9e:	71 09       	sbc	r23, r1
     ea0:	66 0f       	add	r22, r22
     ea2:	77 1f       	adc	r23, r23
     ea4:	66 0f       	add	r22, r22
     ea6:	77 1f       	adc	r23, r23
     ea8:	66 0f       	add	r22, r22
     eaa:	77 1f       	adc	r23, r23
     eac:	86 0f       	add	r24, r22
     eae:	97 1f       	adc	r25, r23
     eb0:	08 95       	ret
     eb2:	80 e0       	ldi	r24, 0x00	; 0
     eb4:	90 e0       	ldi	r25, 0x00	; 0
     eb6:	f2 cf       	rjmp	.-28     	; 0xe9c <uECC_vli_numBits+0x5a>

00000eb8 <uECC_vli_cmp>:
     eb8:	1f 93       	push	r17
     eba:	cf 93       	push	r28
     ebc:	df 93       	push	r29
     ebe:	cd b7       	in	r28, 0x3d	; 61
     ec0:	de b7       	in	r29, 0x3e	; 62
     ec2:	a0 97       	sbiw	r28, 0x20	; 32
     ec4:	0f b6       	in	r0, 0x3f	; 63
     ec6:	f8 94       	cli
     ec8:	de bf       	out	0x3e, r29	; 62
     eca:	0f be       	out	0x3f, r0	; 63
     ecc:	cd bf       	out	0x3d, r28	; 61
     ece:	14 2f       	mov	r17, r20
     ed0:	24 2f       	mov	r18, r20
     ed2:	ab 01       	movw	r20, r22
     ed4:	bc 01       	movw	r22, r24
     ed6:	ce 01       	movw	r24, r28
     ed8:	01 96       	adiw	r24, 0x01	; 1
     eda:	a6 de       	rcall	.-692    	; 0xc28 <uECC_vli_sub>
     edc:	41 e0       	ldi	r20, 0x01	; 1
     ede:	81 11       	cpse	r24, r1
     ee0:	01 c0       	rjmp	.+2      	; 0xee4 <uECC_vli_cmp+0x2c>
     ee2:	40 e0       	ldi	r20, 0x00	; 0
     ee4:	11 16       	cp	r1, r17
     ee6:	f4 f4       	brge	.+60     	; 0xf24 <uECC_vli_cmp+0x6c>
     ee8:	fe 01       	movw	r30, r28
     eea:	31 96       	adiw	r30, 0x01	; 1
     eec:	11 50       	subi	r17, 0x01	; 1
     eee:	21 2f       	mov	r18, r17
     ef0:	30 e0       	ldi	r19, 0x00	; 0
     ef2:	2f 5f       	subi	r18, 0xFF	; 255
     ef4:	3f 4f       	sbci	r19, 0xFF	; 255
     ef6:	2e 0f       	add	r18, r30
     ef8:	3f 1f       	adc	r19, r31
     efa:	90 e0       	ldi	r25, 0x00	; 0
     efc:	81 91       	ld	r24, Z+
     efe:	98 2b       	or	r25, r24
     f00:	2e 17       	cp	r18, r30
     f02:	3f 07       	cpc	r19, r31
     f04:	d9 f7       	brne	.-10     	; 0xefc <uECC_vli_cmp+0x44>
     f06:	81 e0       	ldi	r24, 0x01	; 1
     f08:	99 23       	and	r25, r25
     f0a:	61 f0       	breq	.+24     	; 0xf24 <uECC_vli_cmp+0x6c>
     f0c:	44 0f       	add	r20, r20
     f0e:	84 1b       	sub	r24, r20
     f10:	a0 96       	adiw	r28, 0x20	; 32
     f12:	0f b6       	in	r0, 0x3f	; 63
     f14:	f8 94       	cli
     f16:	de bf       	out	0x3e, r29	; 62
     f18:	0f be       	out	0x3f, r0	; 63
     f1a:	cd bf       	out	0x3d, r28	; 61
     f1c:	df 91       	pop	r29
     f1e:	cf 91       	pop	r28
     f20:	1f 91       	pop	r17
     f22:	08 95       	ret
     f24:	80 e0       	ldi	r24, 0x00	; 0
     f26:	f2 cf       	rjmp	.-28     	; 0xf0c <uECC_vli_cmp+0x54>

00000f28 <uECC_vli_modAdd>:
     f28:	ef 92       	push	r14
     f2a:	ff 92       	push	r15
     f2c:	0f 93       	push	r16
     f2e:	cf 93       	push	r28
     f30:	df 93       	push	r29
     f32:	ec 01       	movw	r28, r24
     f34:	79 01       	movw	r14, r18
     f36:	20 2f       	mov	r18, r16
     f38:	a6 dd       	rcall	.-1204   	; 0xa86 <uECC_vli_add>
     f3a:	81 11       	cpse	r24, r1
     f3c:	1d c0       	rjmp	.+58     	; 0xf78 <uECC_vli_modAdd+0x50>
     f3e:	2f ef       	ldi	r18, 0xFF	; 255
     f40:	20 0f       	add	r18, r16
     f42:	27 fd       	sbrc	r18, 7
     f44:	19 c0       	rjmp	.+50     	; 0xf78 <uECC_vli_modAdd+0x50>
     f46:	04 c0       	rjmp	.+8      	; 0xf50 <uECC_vli_modAdd+0x28>
     f48:	38 17       	cp	r19, r24
     f4a:	b0 f0       	brcs	.+44     	; 0xf78 <uECC_vli_modAdd+0x50>
     f4c:	21 50       	subi	r18, 0x01	; 1
     f4e:	a0 f0       	brcs	.+40     	; 0xf78 <uECC_vli_modAdd+0x50>
     f50:	82 2f       	mov	r24, r18
     f52:	02 2e       	mov	r0, r18
     f54:	00 0c       	add	r0, r0
     f56:	99 0b       	sbc	r25, r25
     f58:	f7 01       	movw	r30, r14
     f5a:	e8 0f       	add	r30, r24
     f5c:	f9 1f       	adc	r31, r25
     f5e:	30 81       	ld	r19, Z
     f60:	fe 01       	movw	r30, r28
     f62:	e8 0f       	add	r30, r24
     f64:	f9 1f       	adc	r31, r25
     f66:	80 81       	ld	r24, Z
     f68:	83 17       	cp	r24, r19
     f6a:	70 f7       	brcc	.-36     	; 0xf48 <uECC_vli_modAdd+0x20>
     f6c:	df 91       	pop	r29
     f6e:	cf 91       	pop	r28
     f70:	0f 91       	pop	r16
     f72:	ff 90       	pop	r15
     f74:	ef 90       	pop	r14
     f76:	08 95       	ret
     f78:	20 2f       	mov	r18, r16
     f7a:	a7 01       	movw	r20, r14
     f7c:	be 01       	movw	r22, r28
     f7e:	ce 01       	movw	r24, r28
     f80:	df 91       	pop	r29
     f82:	cf 91       	pop	r28
     f84:	0f 91       	pop	r16
     f86:	ff 90       	pop	r15
     f88:	ef 90       	pop	r14
     f8a:	4e ce       	rjmp	.-868    	; 0xc28 <uECC_vli_sub>

00000f8c <uECC_vli_modSub>:
     f8c:	ef 92       	push	r14
     f8e:	ff 92       	push	r15
     f90:	0f 93       	push	r16
     f92:	cf 93       	push	r28
     f94:	df 93       	push	r29
     f96:	ec 01       	movw	r28, r24
     f98:	79 01       	movw	r14, r18
     f9a:	20 2f       	mov	r18, r16
     f9c:	45 de       	rcall	.-886    	; 0xc28 <uECC_vli_sub>
     f9e:	81 11       	cpse	r24, r1
     fa0:	06 c0       	rjmp	.+12     	; 0xfae <uECC_vli_modSub+0x22>
     fa2:	df 91       	pop	r29
     fa4:	cf 91       	pop	r28
     fa6:	0f 91       	pop	r16
     fa8:	ff 90       	pop	r15
     faa:	ef 90       	pop	r14
     fac:	08 95       	ret
     fae:	20 2f       	mov	r18, r16
     fb0:	a7 01       	movw	r20, r14
     fb2:	be 01       	movw	r22, r28
     fb4:	ce 01       	movw	r24, r28
     fb6:	df 91       	pop	r29
     fb8:	cf 91       	pop	r28
     fba:	0f 91       	pop	r16
     fbc:	ff 90       	pop	r15
     fbe:	ef 90       	pop	r14
     fc0:	62 cd       	rjmp	.-1340   	; 0xa86 <uECC_vli_add>

00000fc2 <uECC_vli_mmod>:
     fc2:	2f 92       	push	r2
     fc4:	3f 92       	push	r3
     fc6:	4f 92       	push	r4
     fc8:	5f 92       	push	r5
     fca:	6f 92       	push	r6
     fcc:	7f 92       	push	r7
     fce:	8f 92       	push	r8
     fd0:	9f 92       	push	r9
     fd2:	af 92       	push	r10
     fd4:	bf 92       	push	r11
     fd6:	cf 92       	push	r12
     fd8:	df 92       	push	r13
     fda:	ef 92       	push	r14
     fdc:	ff 92       	push	r15
     fde:	0f 93       	push	r16
     fe0:	1f 93       	push	r17
     fe2:	cf 93       	push	r28
     fe4:	df 93       	push	r29
     fe6:	cd b7       	in	r28, 0x3d	; 61
     fe8:	de b7       	in	r29, 0x3e	; 62
     fea:	c7 58       	subi	r28, 0x87	; 135
     fec:	d1 09       	sbc	r29, r1
     fee:	0f b6       	in	r0, 0x3f	; 63
     ff0:	f8 94       	cli
     ff2:	de bf       	out	0x3e, r29	; 62
     ff4:	0f be       	out	0x3f, r0	; 63
     ff6:	cd bf       	out	0x3d, r28	; 61
     ff8:	cb 57       	subi	r28, 0x7B	; 123
     ffa:	df 4f       	sbci	r29, 0xFF	; 255
     ffc:	99 83       	std	Y+1, r25	; 0x01
     ffe:	88 83       	st	Y, r24
    1000:	c5 58       	subi	r28, 0x85	; 133
    1002:	d0 40       	sbci	r29, 0x00	; 0
    1004:	b6 2e       	mov	r11, r22
    1006:	a7 2e       	mov	r10, r23
    1008:	94 2e       	mov	r9, r20
    100a:	55 2e       	mov	r5, r21
    100c:	82 2e       	mov	r8, r18
    100e:	ce 01       	movw	r24, r28
    1010:	01 96       	adiw	r24, 0x01	; 1
    1012:	cf 57       	subi	r28, 0x7F	; 127
    1014:	df 4f       	sbci	r29, 0xFF	; 255
    1016:	99 83       	std	Y+1, r25	; 0x01
    1018:	88 83       	st	Y, r24
    101a:	c1 58       	subi	r28, 0x81	; 129
    101c:	d0 40       	sbci	r29, 0x00	; 0
    101e:	cd 57       	subi	r28, 0x7D	; 125
    1020:	df 4f       	sbci	r29, 0xFF	; 255
    1022:	68 83       	st	Y, r22
    1024:	c3 58       	subi	r28, 0x83	; 131
    1026:	d0 40       	sbci	r29, 0x00	; 0
    1028:	cc 57       	subi	r28, 0x7C	; 124
    102a:	df 4f       	sbci	r29, 0xFF	; 255
    102c:	78 83       	st	Y, r23
    102e:	c4 58       	subi	r28, 0x84	; 132
    1030:	d0 40       	sbci	r29, 0x00	; 0
    1032:	02 2f       	mov	r16, r18
    1034:	02 2e       	mov	r0, r18
    1036:	00 0c       	add	r0, r0
    1038:	11 0b       	sbc	r17, r17
    103a:	62 2f       	mov	r22, r18
    103c:	84 2f       	mov	r24, r20
    103e:	95 2f       	mov	r25, r21
    1040:	00 df       	rcall	.-512    	; 0xe42 <uECC_vli_numBits>
    1042:	78 01       	movw	r14, r16
    1044:	e2 94       	swap	r14
    1046:	f2 94       	swap	r15
    1048:	20 ef       	ldi	r18, 0xF0	; 240
    104a:	f2 22       	and	r15, r18
    104c:	fe 24       	eor	r15, r14
    104e:	e2 22       	and	r14, r18
    1050:	fe 24       	eor	r15, r14
    1052:	e8 1a       	sub	r14, r24
    1054:	f9 0a       	sbc	r15, r25
    1056:	b7 01       	movw	r22, r14
    1058:	f7 fc       	sbrc	r15, 7
    105a:	00 c1       	rjmp	.+512    	; 0x125c <__stack+0x15d>
    105c:	3b 01       	movw	r6, r22
    105e:	75 94       	asr	r7
    1060:	67 94       	ror	r6
    1062:	75 94       	asr	r7
    1064:	67 94       	ror	r6
    1066:	75 94       	asr	r7
    1068:	67 94       	ror	r6
    106a:	a7 01       	movw	r20, r14
    106c:	47 70       	andi	r20, 0x07	; 7
    106e:	50 78       	andi	r21, 0x80	; 128
    1070:	57 fd       	sbrc	r21, 7
    1072:	f7 c0       	rjmp	.+494    	; 0x1262 <__stack+0x163>
    1074:	d4 2e       	mov	r13, r20
    1076:	66 2d       	mov	r22, r6
    1078:	ce 01       	movw	r24, r28
    107a:	8f 5b       	subi	r24, 0xBF	; 191
    107c:	9f 4f       	sbci	r25, 0xFF	; 255
    107e:	20 dc       	rcall	.-1984   	; 0x8c0 <uECC_vli_clear>
    1080:	1d 14       	cp	r1, r13
    1082:	0c f0       	brlt	.+2      	; 0x1086 <uECC_vli_mmod+0xc4>
    1084:	f5 c0       	rjmp	.+490    	; 0x1270 <__stack+0x171>
    1086:	88 20       	and	r8, r8
    1088:	a9 f1       	breq	.+106    	; 0x10f4 <uECC_vli_mmod+0x132>
    108a:	4d 2d       	mov	r20, r13
    108c:	dd 0c       	add	r13, r13
    108e:	55 0b       	sbc	r21, r21
    1090:	88 e0       	ldi	r24, 0x08	; 8
    1092:	90 e0       	ldi	r25, 0x00	; 0
    1094:	6c 01       	movw	r12, r24
    1096:	c4 1a       	sub	r12, r20
    1098:	d5 0a       	sbc	r13, r21
    109a:	a9 2d       	mov	r26, r9
    109c:	b5 2d       	mov	r27, r5
    109e:	66 2d       	mov	r22, r6
    10a0:	66 0c       	add	r6, r6
    10a2:	77 0b       	sbc	r23, r23
    10a4:	e1 e4       	ldi	r30, 0x41	; 65
    10a6:	f0 e0       	ldi	r31, 0x00	; 0
    10a8:	ec 0f       	add	r30, r28
    10aa:	fd 1f       	adc	r31, r29
    10ac:	e6 0f       	add	r30, r22
    10ae:	f7 1f       	adc	r31, r23
    10b0:	8f ef       	ldi	r24, 0xFF	; 255
    10b2:	88 0d       	add	r24, r8
    10b4:	90 e0       	ldi	r25, 0x00	; 0
    10b6:	01 96       	adiw	r24, 0x01	; 1
    10b8:	68 0f       	add	r22, r24
    10ba:	79 1f       	adc	r23, r25
    10bc:	81 e4       	ldi	r24, 0x41	; 65
    10be:	28 2e       	mov	r2, r24
    10c0:	31 2c       	mov	r3, r1
    10c2:	2c 0e       	add	r2, r28
    10c4:	3d 1e       	adc	r3, r29
    10c6:	62 0d       	add	r22, r2
    10c8:	73 1d       	adc	r23, r3
    10ca:	91 2c       	mov	r9, r1
    10cc:	8d 91       	ld	r24, X+
    10ce:	90 e0       	ldi	r25, 0x00	; 0
    10d0:	9c 01       	movw	r18, r24
    10d2:	04 2e       	mov	r0, r20
    10d4:	01 c0       	rjmp	.+2      	; 0x10d8 <uECC_vli_mmod+0x116>
    10d6:	22 0f       	add	r18, r18
    10d8:	0a 94       	dec	r0
    10da:	ea f7       	brpl	.-6      	; 0x10d6 <uECC_vli_mmod+0x114>
    10dc:	29 29       	or	r18, r9
    10de:	21 93       	st	Z+, r18
    10e0:	0c 2c       	mov	r0, r12
    10e2:	02 c0       	rjmp	.+4      	; 0x10e8 <uECC_vli_mmod+0x126>
    10e4:	95 95       	asr	r25
    10e6:	87 95       	ror	r24
    10e8:	0a 94       	dec	r0
    10ea:	e2 f7       	brpl	.-8      	; 0x10e4 <uECC_vli_mmod+0x122>
    10ec:	98 2e       	mov	r9, r24
    10ee:	6e 17       	cp	r22, r30
    10f0:	7f 07       	cpc	r23, r31
    10f2:	61 f7       	brne	.-40     	; 0x10cc <uECC_vli_mmod+0x10a>
    10f4:	f7 fc       	sbrc	r15, 7
    10f6:	ca c0       	rjmp	.+404    	; 0x128c <__stack+0x18d>
    10f8:	38 01       	movw	r6, r16
    10fa:	21 e0       	ldi	r18, 0x01	; 1
    10fc:	62 1a       	sub	r6, r18
    10fe:	71 08       	sbc	r7, r1
    1100:	61 e4       	ldi	r22, 0x41	; 65
    1102:	c6 2e       	mov	r12, r22
    1104:	d1 2c       	mov	r13, r1
    1106:	cc 0e       	add	r12, r28
    1108:	dd 1e       	adc	r13, r29
    110a:	c0 0e       	add	r12, r16
    110c:	d1 1e       	adc	r13, r17
    110e:	00 0f       	add	r16, r16
    1110:	11 1f       	adc	r17, r17
    1112:	99 24       	eor	r9, r9
    1114:	93 94       	inc	r9
    1116:	aa 24       	eor	r10, r10
    1118:	a3 94       	inc	r10
    111a:	b1 2c       	mov	r11, r1
    111c:	81 e4       	ldi	r24, 0x41	; 65
    111e:	90 e0       	ldi	r25, 0x00	; 0
    1120:	8c 0f       	add	r24, r28
    1122:	9d 1f       	adc	r25, r29
    1124:	68 0e       	add	r6, r24
    1126:	79 1e       	adc	r7, r25
    1128:	26 01       	movw	r4, r12
    112a:	10 16       	cp	r1, r16
    112c:	11 06       	cpc	r1, r17
    112e:	0c f0       	brlt	.+2      	; 0x1132 <__stack+0x33>
    1130:	93 c0       	rjmp	.+294    	; 0x1258 <__stack+0x159>
    1132:	89 2d       	mov	r24, r9
    1134:	90 e0       	ldi	r25, 0x00	; 0
    1136:	fc 01       	movw	r30, r24
    1138:	ee 0f       	add	r30, r30
    113a:	ff 1f       	adc	r31, r31
    113c:	31 e8       	ldi	r19, 0x81	; 129
    113e:	23 2e       	mov	r2, r19
    1140:	31 2c       	mov	r3, r1
    1142:	2c 0e       	add	r2, r28
    1144:	3d 1e       	adc	r3, r29
    1146:	e2 0d       	add	r30, r2
    1148:	f3 1d       	adc	r31, r3
    114a:	60 81       	ld	r22, Z
    114c:	71 81       	ldd	r23, Z+1	; 0x01
    114e:	f5 01       	movw	r30, r10
    1150:	e8 1b       	sub	r30, r24
    1152:	f9 0b       	sbc	r31, r25
    1154:	ee 0f       	add	r30, r30
    1156:	ff 1f       	adc	r31, r31
    1158:	e2 0d       	add	r30, r2
    115a:	f3 1d       	adc	r31, r3
    115c:	40 81       	ld	r20, Z
    115e:	51 81       	ldd	r21, Z+1	; 0x01
    1160:	20 e0       	ldi	r18, 0x00	; 0
    1162:	30 e0       	ldi	r19, 0x00	; 0
    1164:	a0 e0       	ldi	r26, 0x00	; 0
    1166:	b0 e0       	ldi	r27, 0x00	; 0
    1168:	80 e0       	ldi	r24, 0x00	; 0
    116a:	90 e0       	ldi	r25, 0x00	; 0
    116c:	fb 01       	movw	r30, r22
    116e:	e8 0f       	add	r30, r24
    1170:	f9 1f       	adc	r31, r25
    1172:	20 80       	ld	r2, Z
    1174:	c9 57       	subi	r28, 0x79	; 121
    1176:	df 4f       	sbci	r29, 0xFF	; 255
    1178:	28 82       	st	Y, r2
    117a:	c7 58       	subi	r28, 0x87	; 135
    117c:	d0 40       	sbci	r29, 0x00	; 0
    117e:	e1 e4       	ldi	r30, 0x41	; 65
    1180:	f0 e0       	ldi	r31, 0x00	; 0
    1182:	ec 0f       	add	r30, r28
    1184:	fd 1f       	adc	r31, r29
    1186:	2e 0f       	add	r18, r30
    1188:	3f 1f       	adc	r19, r31
    118a:	f9 01       	movw	r30, r18
    118c:	20 81       	ld	r18, Z
    118e:	22 1a       	sub	r2, r18
    1190:	22 2d       	mov	r18, r2
    1192:	2b 1b       	sub	r18, r27
    1194:	c9 57       	subi	r28, 0x79	; 121
    1196:	df 4f       	sbci	r29, 0xFF	; 255
    1198:	f8 81       	ld	r31, Y
    119a:	c7 58       	subi	r28, 0x87	; 135
    119c:	d0 40       	sbci	r29, 0x00	; 0
    119e:	f2 17       	cp	r31, r18
    11a0:	21 f0       	breq	.+8      	; 0x11aa <__stack+0xab>
    11a2:	b1 e0       	ldi	r27, 0x01	; 1
    11a4:	f2 17       	cp	r31, r18
    11a6:	08 f0       	brcs	.+2      	; 0x11aa <__stack+0xab>
    11a8:	b0 e0       	ldi	r27, 0x00	; 0
    11aa:	fa 01       	movw	r30, r20
    11ac:	e8 0f       	add	r30, r24
    11ae:	f9 1f       	adc	r31, r25
    11b0:	20 83       	st	Z, r18
    11b2:	af 5f       	subi	r26, 0xFF	; 255
    11b4:	8a 2f       	mov	r24, r26
    11b6:	0a 2e       	mov	r0, r26
    11b8:	00 0c       	add	r0, r0
    11ba:	99 0b       	sbc	r25, r25
    11bc:	9c 01       	movw	r18, r24
    11be:	80 17       	cp	r24, r16
    11c0:	91 07       	cpc	r25, r17
    11c2:	a4 f2       	brlt	.-88     	; 0x116c <__stack+0x6d>
    11c4:	33 24       	eor	r3, r3
    11c6:	33 94       	inc	r3
    11c8:	9b 12       	cpse	r9, r27
    11ca:	31 2c       	mov	r3, r1
    11cc:	93 2c       	mov	r9, r3
    11ce:	68 2d       	mov	r22, r8
    11d0:	ce 01       	movw	r24, r28
    11d2:	8f 5b       	subi	r24, 0xBF	; 191
    11d4:	9f 4f       	sbci	r25, 0xFF	; 255
    11d6:	e8 db       	rcall	.-2096   	; 0x9a8 <uECC_vli_rshift1>
    11d8:	f2 01       	movw	r30, r4
    11da:	80 81       	ld	r24, Z
    11dc:	f0 e8       	ldi	r31, 0x80	; 128
    11de:	8f 9f       	mul	r24, r31
    11e0:	c0 01       	movw	r24, r0
    11e2:	11 24       	eor	r1, r1
    11e4:	f3 01       	movw	r30, r6
    11e6:	90 81       	ld	r25, Z
    11e8:	89 2b       	or	r24, r25
    11ea:	80 83       	st	Z, r24
    11ec:	68 2d       	mov	r22, r8
    11ee:	c6 01       	movw	r24, r12
    11f0:	db db       	rcall	.-2122   	; 0x9a8 <uECC_vli_rshift1>
    11f2:	f1 e0       	ldi	r31, 0x01	; 1
    11f4:	ef 1a       	sub	r14, r31
    11f6:	f1 08       	sbc	r15, r1
    11f8:	08 f0       	brcs	.+2      	; 0x11fc <__stack+0xfd>
    11fa:	97 cf       	rjmp	.-210    	; 0x112a <__stack+0x2b>
    11fc:	e3 2d       	mov	r30, r3
    11fe:	f0 e0       	ldi	r31, 0x00	; 0
    1200:	ee 0f       	add	r30, r30
    1202:	ff 1f       	adc	r31, r31
    1204:	81 e8       	ldi	r24, 0x81	; 129
    1206:	90 e0       	ldi	r25, 0x00	; 0
    1208:	8c 0f       	add	r24, r28
    120a:	9d 1f       	adc	r25, r29
    120c:	e8 0f       	add	r30, r24
    120e:	f9 1f       	adc	r31, r25
    1210:	60 81       	ld	r22, Z
    1212:	71 81       	ldd	r23, Z+1	; 0x01
    1214:	48 2d       	mov	r20, r8
    1216:	cb 57       	subi	r28, 0x7B	; 123
    1218:	df 4f       	sbci	r29, 0xFF	; 255
    121a:	88 81       	ld	r24, Y
    121c:	99 81       	ldd	r25, Y+1	; 0x01
    121e:	c5 58       	subi	r28, 0x85	; 133
    1220:	d0 40       	sbci	r29, 0x00	; 0
    1222:	75 db       	rcall	.-2326   	; 0x90e <uECC_vli_set>
    1224:	c9 57       	subi	r28, 0x79	; 121
    1226:	df 4f       	sbci	r29, 0xFF	; 255
    1228:	0f b6       	in	r0, 0x3f	; 63
    122a:	f8 94       	cli
    122c:	de bf       	out	0x3e, r29	; 62
    122e:	0f be       	out	0x3f, r0	; 63
    1230:	cd bf       	out	0x3d, r28	; 61
    1232:	df 91       	pop	r29
    1234:	cf 91       	pop	r28
    1236:	1f 91       	pop	r17
    1238:	0f 91       	pop	r16
    123a:	ff 90       	pop	r15
    123c:	ef 90       	pop	r14
    123e:	df 90       	pop	r13
    1240:	cf 90       	pop	r12
    1242:	bf 90       	pop	r11
    1244:	af 90       	pop	r10
    1246:	9f 90       	pop	r9
    1248:	8f 90       	pop	r8
    124a:	7f 90       	pop	r7
    124c:	6f 90       	pop	r6
    124e:	5f 90       	pop	r5
    1250:	4f 90       	pop	r4
    1252:	3f 90       	pop	r3
    1254:	2f 90       	pop	r2
    1256:	08 95       	ret
    1258:	b0 e0       	ldi	r27, 0x00	; 0
    125a:	b4 cf       	rjmp	.-152    	; 0x11c4 <__stack+0xc5>
    125c:	69 5f       	subi	r22, 0xF9	; 249
    125e:	7f 4f       	sbci	r23, 0xFF	; 255
    1260:	fd ce       	rjmp	.-518    	; 0x105c <uECC_vli_mmod+0x9a>
    1262:	41 50       	subi	r20, 0x01	; 1
    1264:	51 09       	sbc	r21, r1
    1266:	48 6f       	ori	r20, 0xF8	; 248
    1268:	5f 6f       	ori	r21, 0xFF	; 255
    126a:	4f 5f       	subi	r20, 0xFF	; 255
    126c:	5f 4f       	sbci	r21, 0xFF	; 255
    126e:	02 cf       	rjmp	.-508    	; 0x1074 <uECC_vli_mmod+0xb2>
    1270:	48 2d       	mov	r20, r8
    1272:	69 2d       	mov	r22, r9
    1274:	75 2d       	mov	r23, r5
    1276:	81 e4       	ldi	r24, 0x41	; 65
    1278:	90 e0       	ldi	r25, 0x00	; 0
    127a:	8c 0f       	add	r24, r28
    127c:	9d 1f       	adc	r25, r29
    127e:	86 0d       	add	r24, r6
    1280:	91 1d       	adc	r25, r1
    1282:	67 fc       	sbrc	r6, 7
    1284:	9a 95       	dec	r25
    1286:	43 db       	rcall	.-2426   	; 0x90e <uECC_vli_set>
    1288:	f7 fe       	sbrs	r15, 7
    128a:	36 cf       	rjmp	.-404    	; 0x10f8 <uECC_vli_mmod+0x136>
    128c:	6b 2d       	mov	r22, r11
    128e:	7a 2d       	mov	r23, r10
    1290:	c1 cf       	rjmp	.-126    	; 0x1214 <__stack+0x115>

00001292 <double_jacobian_default>:
    1292:	4f 92       	push	r4
    1294:	5f 92       	push	r5
    1296:	6f 92       	push	r6
    1298:	7f 92       	push	r7
    129a:	8f 92       	push	r8
    129c:	9f 92       	push	r9
    129e:	af 92       	push	r10
    12a0:	bf 92       	push	r11
    12a2:	cf 92       	push	r12
    12a4:	df 92       	push	r13
    12a6:	ef 92       	push	r14
    12a8:	ff 92       	push	r15
    12aa:	0f 93       	push	r16
    12ac:	1f 93       	push	r17
    12ae:	cf 93       	push	r28
    12b0:	df 93       	push	r29
    12b2:	cd b7       	in	r28, 0x3d	; 61
    12b4:	de b7       	in	r29, 0x3e	; 62
    12b6:	c0 58       	subi	r28, 0x80	; 128
    12b8:	d1 09       	sbc	r29, r1
    12ba:	0f b6       	in	r0, 0x3f	; 63
    12bc:	f8 94       	cli
    12be:	de bf       	out	0x3e, r29	; 62
    12c0:	0f be       	out	0x3f, r0	; 63
    12c2:	cd bf       	out	0x3d, r28	; 61
    12c4:	6c 01       	movw	r12, r24
    12c6:	59 01       	movw	r10, r18
    12c8:	d9 01       	movw	r26, r18
    12ca:	1c 91       	ld	r17, X
    12cc:	11 16       	cp	r1, r17
    12ce:	7c f4       	brge	.+30     	; 0x12ee <double_jacobian_default+0x5c>
    12d0:	fa 01       	movw	r30, r20
    12d2:	af ef       	ldi	r26, 0xFF	; 255
    12d4:	a1 0f       	add	r26, r17
    12d6:	b0 e0       	ldi	r27, 0x00	; 0
    12d8:	11 96       	adiw	r26, 0x01	; 1
    12da:	a4 0f       	add	r26, r20
    12dc:	b5 1f       	adc	r27, r21
    12de:	90 e0       	ldi	r25, 0x00	; 0
    12e0:	31 91       	ld	r19, Z+
    12e2:	93 2b       	or	r25, r19
    12e4:	ea 17       	cp	r30, r26
    12e6:	fb 07       	cpc	r31, r27
    12e8:	d9 f7       	brne	.-10     	; 0x12e0 <double_jacobian_default+0x4e>
    12ea:	91 11       	cpse	r25, r1
    12ec:	18 c0       	rjmp	.+48     	; 0x131e <double_jacobian_default+0x8c>
    12ee:	c0 58       	subi	r28, 0x80	; 128
    12f0:	df 4f       	sbci	r29, 0xFF	; 255
    12f2:	0f b6       	in	r0, 0x3f	; 63
    12f4:	f8 94       	cli
    12f6:	de bf       	out	0x3e, r29	; 62
    12f8:	0f be       	out	0x3f, r0	; 63
    12fa:	cd bf       	out	0x3d, r28	; 61
    12fc:	df 91       	pop	r29
    12fe:	cf 91       	pop	r28
    1300:	1f 91       	pop	r17
    1302:	0f 91       	pop	r16
    1304:	ff 90       	pop	r15
    1306:	ef 90       	pop	r14
    1308:	df 90       	pop	r13
    130a:	cf 90       	pop	r12
    130c:	bf 90       	pop	r11
    130e:	af 90       	pop	r10
    1310:	9f 90       	pop	r9
    1312:	8f 90       	pop	r8
    1314:	7f 90       	pop	r7
    1316:	6f 90       	pop	r6
    1318:	5f 90       	pop	r5
    131a:	4f 90       	pop	r4
    131c:	08 95       	ret
    131e:	7a 01       	movw	r14, r20
    1320:	4b 01       	movw	r8, r22
    1322:	21 2f       	mov	r18, r17
    1324:	ab 01       	movw	r20, r22
    1326:	ce 01       	movw	r24, r28
    1328:	01 96       	adiw	r24, 0x01	; 1
    132a:	4f dd       	rcall	.-1378   	; 0xdca <uECC_vli_mult>
    132c:	25 01       	movw	r4, r10
    132e:	ba ea       	ldi	r27, 0xAA	; 170
    1330:	4b 0e       	add	r4, r27
    1332:	51 1c       	adc	r5, r1
    1334:	d2 01       	movw	r26, r4
    1336:	ed 91       	ld	r30, X+
    1338:	fc 91       	ld	r31, X
    133a:	be 01       	movw	r22, r28
    133c:	6f 5f       	subi	r22, 0xFF	; 255
    133e:	7f 4f       	sbci	r23, 0xFF	; 255
    1340:	ce 01       	movw	r24, r28
    1342:	8f 59       	subi	r24, 0x9F	; 159
    1344:	9f 4f       	sbci	r25, 0xFF	; 255
    1346:	09 95       	icall
    1348:	f5 01       	movw	r30, r10
    134a:	20 81       	ld	r18, Z
    134c:	ae 01       	movw	r20, r28
    134e:	4f 59       	subi	r20, 0x9F	; 159
    1350:	5f 4f       	sbci	r21, 0xFF	; 255
    1352:	b6 01       	movw	r22, r12
    1354:	ce 01       	movw	r24, r28
    1356:	01 96       	adiw	r24, 0x01	; 1
    1358:	38 dd       	rcall	.-1424   	; 0xdca <uECC_vli_mult>
    135a:	d2 01       	movw	r26, r4
    135c:	ed 91       	ld	r30, X+
    135e:	fc 91       	ld	r31, X
    1360:	be 01       	movw	r22, r28
    1362:	6f 5f       	subi	r22, 0xFF	; 255
    1364:	7f 4f       	sbci	r23, 0xFF	; 255
    1366:	ce 01       	movw	r24, r28
    1368:	8f 5b       	subi	r24, 0xBF	; 191
    136a:	9f 4f       	sbci	r25, 0xFF	; 255
    136c:	09 95       	icall
    136e:	f5 01       	movw	r30, r10
    1370:	20 81       	ld	r18, Z
    1372:	ae 01       	movw	r20, r28
    1374:	4f 59       	subi	r20, 0x9F	; 159
    1376:	5f 4f       	sbci	r21, 0xFF	; 255
    1378:	ba 01       	movw	r22, r20
    137a:	ce 01       	movw	r24, r28
    137c:	01 96       	adiw	r24, 0x01	; 1
    137e:	25 dd       	rcall	.-1462   	; 0xdca <uECC_vli_mult>
    1380:	d2 01       	movw	r26, r4
    1382:	ed 91       	ld	r30, X+
    1384:	fc 91       	ld	r31, X
    1386:	be 01       	movw	r22, r28
    1388:	6f 5f       	subi	r22, 0xFF	; 255
    138a:	7f 4f       	sbci	r23, 0xFF	; 255
    138c:	ce 01       	movw	r24, r28
    138e:	8f 59       	subi	r24, 0x9F	; 159
    1390:	9f 4f       	sbci	r25, 0xFF	; 255
    1392:	09 95       	icall
    1394:	f5 01       	movw	r30, r10
    1396:	20 81       	ld	r18, Z
    1398:	a7 01       	movw	r20, r14
    139a:	b4 01       	movw	r22, r8
    139c:	ce 01       	movw	r24, r28
    139e:	01 96       	adiw	r24, 0x01	; 1
    13a0:	14 dd       	rcall	.-1496   	; 0xdca <uECC_vli_mult>
    13a2:	d2 01       	movw	r26, r4
    13a4:	ed 91       	ld	r30, X+
    13a6:	fc 91       	ld	r31, X
    13a8:	be 01       	movw	r22, r28
    13aa:	6f 5f       	subi	r22, 0xFF	; 255
    13ac:	7f 4f       	sbci	r23, 0xFF	; 255
    13ae:	c4 01       	movw	r24, r8
    13b0:	09 95       	icall
    13b2:	f5 01       	movw	r30, r10
    13b4:	20 81       	ld	r18, Z
    13b6:	a7 01       	movw	r20, r14
    13b8:	b7 01       	movw	r22, r14
    13ba:	ce 01       	movw	r24, r28
    13bc:	01 96       	adiw	r24, 0x01	; 1
    13be:	05 dd       	rcall	.-1526   	; 0xdca <uECC_vli_mult>
    13c0:	d2 01       	movw	r26, r4
    13c2:	ed 91       	ld	r30, X+
    13c4:	fc 91       	ld	r31, X
    13c6:	be 01       	movw	r22, r28
    13c8:	6f 5f       	subi	r22, 0xFF	; 255
    13ca:	7f 4f       	sbci	r23, 0xFF	; 255
    13cc:	c7 01       	movw	r24, r14
    13ce:	09 95       	icall
    13d0:	35 01       	movw	r6, r10
    13d2:	b4 e0       	ldi	r27, 0x04	; 4
    13d4:	6b 0e       	add	r6, r27
    13d6:	71 1c       	adc	r7, r1
    13d8:	01 2f       	mov	r16, r17
    13da:	93 01       	movw	r18, r6
    13dc:	a7 01       	movw	r20, r14
    13de:	b6 01       	movw	r22, r12
    13e0:	c6 01       	movw	r24, r12
    13e2:	a2 dd       	rcall	.-1212   	; 0xf28 <uECC_vli_modAdd>
    13e4:	93 01       	movw	r18, r6
    13e6:	a7 01       	movw	r20, r14
    13e8:	b7 01       	movw	r22, r14
    13ea:	c7 01       	movw	r24, r14
    13ec:	9d dd       	rcall	.-1222   	; 0xf28 <uECC_vli_modAdd>
    13ee:	93 01       	movw	r18, r6
    13f0:	a7 01       	movw	r20, r14
    13f2:	b6 01       	movw	r22, r12
    13f4:	c7 01       	movw	r24, r14
    13f6:	ca dd       	rcall	.-1132   	; 0xf8c <uECC_vli_modSub>
    13f8:	f5 01       	movw	r30, r10
    13fa:	20 81       	ld	r18, Z
    13fc:	a7 01       	movw	r20, r14
    13fe:	b6 01       	movw	r22, r12
    1400:	ce 01       	movw	r24, r28
    1402:	01 96       	adiw	r24, 0x01	; 1
    1404:	e2 dc       	rcall	.-1596   	; 0xdca <uECC_vli_mult>
    1406:	d2 01       	movw	r26, r4
    1408:	ed 91       	ld	r30, X+
    140a:	fc 91       	ld	r31, X
    140c:	be 01       	movw	r22, r28
    140e:	6f 5f       	subi	r22, 0xFF	; 255
    1410:	7f 4f       	sbci	r23, 0xFF	; 255
    1412:	c6 01       	movw	r24, r12
    1414:	09 95       	icall
    1416:	93 01       	movw	r18, r6
    1418:	a6 01       	movw	r20, r12
    141a:	b6 01       	movw	r22, r12
    141c:	c7 01       	movw	r24, r14
    141e:	84 dd       	rcall	.-1272   	; 0xf28 <uECC_vli_modAdd>
    1420:	93 01       	movw	r18, r6
    1422:	a7 01       	movw	r20, r14
    1424:	b6 01       	movw	r22, r12
    1426:	c6 01       	movw	r24, r12
    1428:	7f dd       	rcall	.-1282   	; 0xf28 <uECC_vli_modAdd>
    142a:	f6 01       	movw	r30, r12
    142c:	80 81       	ld	r24, Z
    142e:	80 fd       	sbrc	r24, 0
    1430:	4f c0       	rjmp	.+158    	; 0x14d0 <double_jacobian_default+0x23e>
    1432:	61 2f       	mov	r22, r17
    1434:	c6 01       	movw	r24, r12
    1436:	b8 da       	rcall	.-2704   	; 0x9a8 <uECC_vli_rshift1>
    1438:	d5 01       	movw	r26, r10
    143a:	2c 91       	ld	r18, X
    143c:	a6 01       	movw	r20, r12
    143e:	b6 01       	movw	r22, r12
    1440:	ce 01       	movw	r24, r28
    1442:	01 96       	adiw	r24, 0x01	; 1
    1444:	c2 dc       	rcall	.-1660   	; 0xdca <uECC_vli_mult>
    1446:	d2 01       	movw	r26, r4
    1448:	ed 91       	ld	r30, X+
    144a:	fc 91       	ld	r31, X
    144c:	be 01       	movw	r22, r28
    144e:	6f 5f       	subi	r22, 0xFF	; 255
    1450:	7f 4f       	sbci	r23, 0xFF	; 255
    1452:	c7 01       	movw	r24, r14
    1454:	09 95       	icall
    1456:	01 2f       	mov	r16, r17
    1458:	93 01       	movw	r18, r6
    145a:	ae 01       	movw	r20, r28
    145c:	4f 5b       	subi	r20, 0xBF	; 191
    145e:	5f 4f       	sbci	r21, 0xFF	; 255
    1460:	b7 01       	movw	r22, r14
    1462:	c7 01       	movw	r24, r14
    1464:	93 dd       	rcall	.-1242   	; 0xf8c <uECC_vli_modSub>
    1466:	93 01       	movw	r18, r6
    1468:	ae 01       	movw	r20, r28
    146a:	4f 5b       	subi	r20, 0xBF	; 191
    146c:	5f 4f       	sbci	r21, 0xFF	; 255
    146e:	b7 01       	movw	r22, r14
    1470:	c7 01       	movw	r24, r14
    1472:	8c dd       	rcall	.-1256   	; 0xf8c <uECC_vli_modSub>
    1474:	93 01       	movw	r18, r6
    1476:	a7 01       	movw	r20, r14
    1478:	be 01       	movw	r22, r28
    147a:	6f 5b       	subi	r22, 0xBF	; 191
    147c:	7f 4f       	sbci	r23, 0xFF	; 255
    147e:	cb 01       	movw	r24, r22
    1480:	85 dd       	rcall	.-1270   	; 0xf8c <uECC_vli_modSub>
    1482:	f5 01       	movw	r30, r10
    1484:	20 81       	ld	r18, Z
    1486:	ae 01       	movw	r20, r28
    1488:	4f 5b       	subi	r20, 0xBF	; 191
    148a:	5f 4f       	sbci	r21, 0xFF	; 255
    148c:	b6 01       	movw	r22, r12
    148e:	ce 01       	movw	r24, r28
    1490:	01 96       	adiw	r24, 0x01	; 1
    1492:	9b dc       	rcall	.-1738   	; 0xdca <uECC_vli_mult>
    1494:	d2 01       	movw	r26, r4
    1496:	ed 91       	ld	r30, X+
    1498:	fc 91       	ld	r31, X
    149a:	be 01       	movw	r22, r28
    149c:	6f 5f       	subi	r22, 0xFF	; 255
    149e:	7f 4f       	sbci	r23, 0xFF	; 255
    14a0:	c6 01       	movw	r24, r12
    14a2:	09 95       	icall
    14a4:	93 01       	movw	r18, r6
    14a6:	ae 01       	movw	r20, r28
    14a8:	4f 59       	subi	r20, 0x9F	; 159
    14aa:	5f 4f       	sbci	r21, 0xFF	; 255
    14ac:	b6 01       	movw	r22, r12
    14ae:	ca 01       	movw	r24, r20
    14b0:	6d dd       	rcall	.-1318   	; 0xf8c <uECC_vli_modSub>
    14b2:	41 2f       	mov	r20, r17
    14b4:	b7 01       	movw	r22, r14
    14b6:	c6 01       	movw	r24, r12
    14b8:	2a da       	rcall	.-2988   	; 0x90e <uECC_vli_set>
    14ba:	41 2f       	mov	r20, r17
    14bc:	b4 01       	movw	r22, r8
    14be:	c7 01       	movw	r24, r14
    14c0:	26 da       	rcall	.-2996   	; 0x90e <uECC_vli_set>
    14c2:	41 2f       	mov	r20, r17
    14c4:	be 01       	movw	r22, r28
    14c6:	6f 59       	subi	r22, 0x9F	; 159
    14c8:	7f 4f       	sbci	r23, 0xFF	; 255
    14ca:	c4 01       	movw	r24, r8
    14cc:	20 da       	rcall	.-3008   	; 0x90e <uECC_vli_set>
    14ce:	0f cf       	rjmp	.-482    	; 0x12ee <double_jacobian_default+0x5c>
    14d0:	21 2f       	mov	r18, r17
    14d2:	a3 01       	movw	r20, r6
    14d4:	b6 01       	movw	r22, r12
    14d6:	c6 01       	movw	r24, r12
    14d8:	d6 da       	rcall	.-2644   	; 0xa86 <uECC_vli_add>
    14da:	08 2f       	mov	r16, r24
    14dc:	61 2f       	mov	r22, r17
    14de:	c6 01       	movw	r24, r12
    14e0:	63 da       	rcall	.-2874   	; 0x9a8 <uECC_vli_rshift1>
    14e2:	e1 2f       	mov	r30, r17
    14e4:	01 2e       	mov	r0, r17
    14e6:	00 0c       	add	r0, r0
    14e8:	ff 0b       	sbc	r31, r31
    14ea:	31 97       	sbiw	r30, 0x01	; 1
    14ec:	ec 0d       	add	r30, r12
    14ee:	fd 1d       	adc	r31, r13
    14f0:	20 e8       	ldi	r18, 0x80	; 128
    14f2:	02 9f       	mul	r16, r18
    14f4:	c0 01       	movw	r24, r0
    14f6:	11 24       	eor	r1, r1
    14f8:	00 81       	ld	r16, Z
    14fa:	08 2b       	or	r16, r24
    14fc:	00 83       	st	Z, r16
    14fe:	9c cf       	rjmp	.-200    	; 0x1438 <double_jacobian_default+0x1a6>

00001500 <x_side_default>:
    1500:	4f 92       	push	r4
    1502:	5f 92       	push	r5
    1504:	6f 92       	push	r6
    1506:	7f 92       	push	r7
    1508:	8f 92       	push	r8
    150a:	9f 92       	push	r9
    150c:	af 92       	push	r10
    150e:	bf 92       	push	r11
    1510:	cf 92       	push	r12
    1512:	df 92       	push	r13
    1514:	ef 92       	push	r14
    1516:	ff 92       	push	r15
    1518:	0f 93       	push	r16
    151a:	1f 93       	push	r17
    151c:	cf 93       	push	r28
    151e:	df 93       	push	r29
    1520:	cd b7       	in	r28, 0x3d	; 61
    1522:	de b7       	in	r29, 0x3e	; 62
    1524:	c0 56       	subi	r28, 0x60	; 96
    1526:	d1 09       	sbc	r29, r1
    1528:	0f b6       	in	r0, 0x3f	; 63
    152a:	f8 94       	cli
    152c:	de bf       	out	0x3e, r29	; 62
    152e:	0f be       	out	0x3f, r0	; 63
    1530:	cd bf       	out	0x3d, r28	; 61
    1532:	7c 01       	movw	r14, r24
    1534:	5b 01       	movw	r10, r22
    1536:	6a 01       	movw	r12, r20
    1538:	4e 01       	movw	r8, r28
    153a:	81 e4       	ldi	r24, 0x41	; 65
    153c:	88 0e       	add	r8, r24
    153e:	91 1c       	adc	r9, r1
    1540:	80 e2       	ldi	r24, 0x20	; 32
    1542:	d4 01       	movw	r26, r8
    1544:	1d 92       	st	X+, r1
    1546:	8a 95       	dec	r24
    1548:	e9 f7       	brne	.-6      	; 0x1544 <x_side_default+0x44>
    154a:	83 e0       	ldi	r24, 0x03	; 3
    154c:	f4 01       	movw	r30, r8
    154e:	80 83       	st	Z, r24
    1550:	da 01       	movw	r26, r20
    1552:	1c 91       	ld	r17, X
    1554:	21 2f       	mov	r18, r17
    1556:	ab 01       	movw	r20, r22
    1558:	ce 01       	movw	r24, r28
    155a:	01 96       	adiw	r24, 0x01	; 1
    155c:	36 dc       	rcall	.-1940   	; 0xdca <uECC_vli_mult>
    155e:	26 01       	movw	r4, r12
    1560:	ba ea       	ldi	r27, 0xAA	; 170
    1562:	4b 0e       	add	r4, r27
    1564:	51 1c       	adc	r5, r1
    1566:	d2 01       	movw	r26, r4
    1568:	ed 91       	ld	r30, X+
    156a:	fc 91       	ld	r31, X
    156c:	be 01       	movw	r22, r28
    156e:	6f 5f       	subi	r22, 0xFF	; 255
    1570:	7f 4f       	sbci	r23, 0xFF	; 255
    1572:	c7 01       	movw	r24, r14
    1574:	09 95       	icall
    1576:	36 01       	movw	r6, r12
    1578:	b4 e0       	ldi	r27, 0x04	; 4
    157a:	6b 0e       	add	r6, r27
    157c:	71 1c       	adc	r7, r1
    157e:	01 2f       	mov	r16, r17
    1580:	93 01       	movw	r18, r6
    1582:	a4 01       	movw	r20, r8
    1584:	b7 01       	movw	r22, r14
    1586:	c7 01       	movw	r24, r14
    1588:	01 dd       	rcall	.-1534   	; 0xf8c <uECC_vli_modSub>
    158a:	f6 01       	movw	r30, r12
    158c:	20 81       	ld	r18, Z
    158e:	a5 01       	movw	r20, r10
    1590:	b7 01       	movw	r22, r14
    1592:	ce 01       	movw	r24, r28
    1594:	01 96       	adiw	r24, 0x01	; 1
    1596:	19 dc       	rcall	.-1998   	; 0xdca <uECC_vli_mult>
    1598:	d2 01       	movw	r26, r4
    159a:	ed 91       	ld	r30, X+
    159c:	fc 91       	ld	r31, X
    159e:	be 01       	movw	r22, r28
    15a0:	6f 5f       	subi	r22, 0xFF	; 255
    15a2:	7f 4f       	sbci	r23, 0xFF	; 255
    15a4:	c7 01       	movw	r24, r14
    15a6:	09 95       	icall
    15a8:	a6 01       	movw	r20, r12
    15aa:	4c 57       	subi	r20, 0x7C	; 124
    15ac:	5f 4f       	sbci	r21, 0xFF	; 255
    15ae:	93 01       	movw	r18, r6
    15b0:	b7 01       	movw	r22, r14
    15b2:	c7 01       	movw	r24, r14
    15b4:	b9 dc       	rcall	.-1678   	; 0xf28 <uECC_vli_modAdd>
    15b6:	c0 5a       	subi	r28, 0xA0	; 160
    15b8:	df 4f       	sbci	r29, 0xFF	; 255
    15ba:	0f b6       	in	r0, 0x3f	; 63
    15bc:	f8 94       	cli
    15be:	de bf       	out	0x3e, r29	; 62
    15c0:	0f be       	out	0x3f, r0	; 63
    15c2:	cd bf       	out	0x3d, r28	; 61
    15c4:	df 91       	pop	r29
    15c6:	cf 91       	pop	r28
    15c8:	1f 91       	pop	r17
    15ca:	0f 91       	pop	r16
    15cc:	ff 90       	pop	r15
    15ce:	ef 90       	pop	r14
    15d0:	df 90       	pop	r13
    15d2:	cf 90       	pop	r12
    15d4:	bf 90       	pop	r11
    15d6:	af 90       	pop	r10
    15d8:	9f 90       	pop	r9
    15da:	8f 90       	pop	r8
    15dc:	7f 90       	pop	r7
    15de:	6f 90       	pop	r6
    15e0:	5f 90       	pop	r5
    15e2:	4f 90       	pop	r4
    15e4:	08 95       	ret

000015e6 <mod_sqrt_default>:
    15e6:	3f 92       	push	r3
    15e8:	4f 92       	push	r4
    15ea:	5f 92       	push	r5
    15ec:	6f 92       	push	r6
    15ee:	7f 92       	push	r7
    15f0:	8f 92       	push	r8
    15f2:	9f 92       	push	r9
    15f4:	af 92       	push	r10
    15f6:	bf 92       	push	r11
    15f8:	cf 92       	push	r12
    15fa:	df 92       	push	r13
    15fc:	ef 92       	push	r14
    15fe:	ff 92       	push	r15
    1600:	0f 93       	push	r16
    1602:	1f 93       	push	r17
    1604:	cf 93       	push	r28
    1606:	df 93       	push	r29
    1608:	cd b7       	in	r28, 0x3d	; 61
    160a:	de b7       	in	r29, 0x3e	; 62
    160c:	c0 58       	subi	r28, 0x80	; 128
    160e:	d1 09       	sbc	r29, r1
    1610:	0f b6       	in	r0, 0x3f	; 63
    1612:	f8 94       	cli
    1614:	de bf       	out	0x3e, r29	; 62
    1616:	0f be       	out	0x3f, r0	; 63
    1618:	cd bf       	out	0x3d, r28	; 61
    161a:	2c 01       	movw	r4, r24
    161c:	6b 01       	movw	r12, r22
    161e:	5e 01       	movw	r10, r28
    1620:	21 e6       	ldi	r18, 0x61	; 97
    1622:	a2 0e       	add	r10, r18
    1624:	b1 1c       	adc	r11, r1
    1626:	90 e2       	ldi	r25, 0x20	; 32
    1628:	d5 01       	movw	r26, r10
    162a:	e9 2f       	mov	r30, r25
    162c:	1d 92       	st	X+, r1
    162e:	ea 95       	dec	r30
    1630:	e9 f7       	brne	.-6      	; 0x162c <mod_sqrt_default+0x46>
    1632:	81 e0       	ldi	r24, 0x01	; 1
    1634:	d5 01       	movw	r26, r10
    1636:	8c 93       	st	X, r24
    1638:	7e 01       	movw	r14, r28
    163a:	b1 e4       	ldi	r27, 0x41	; 65
    163c:	eb 0e       	add	r14, r27
    163e:	f1 1c       	adc	r15, r1
    1640:	f7 01       	movw	r30, r14
    1642:	11 92       	st	Z+, r1
    1644:	9a 95       	dec	r25
    1646:	e9 f7       	brne	.-6      	; 0x1642 <mod_sqrt_default+0x5c>
    1648:	d7 01       	movw	r26, r14
    164a:	8c 93       	st	X, r24
    164c:	fb 01       	movw	r30, r22
    164e:	30 80       	ld	r3, Z
    1650:	6c 5f       	subi	r22, 0xFC	; 252
    1652:	7f 4f       	sbci	r23, 0xFF	; 255
    1654:	23 2d       	mov	r18, r3
    1656:	a5 01       	movw	r20, r10
    1658:	c5 01       	movw	r24, r10
    165a:	15 da       	rcall	.-3030   	; 0xa86 <uECC_vli_add>
    165c:	63 2d       	mov	r22, r3
    165e:	c5 01       	movw	r24, r10
    1660:	f0 db       	rcall	.-2080   	; 0xe42 <uECC_vli_numBits>
    1662:	8c 01       	movw	r16, r24
    1664:	01 50       	subi	r16, 0x01	; 1
    1666:	11 09       	sbc	r17, r1
    1668:	02 30       	cpi	r16, 0x02	; 2
    166a:	11 05       	cpc	r17, r1
    166c:	0c f4       	brge	.+2      	; 0x1670 <mod_sqrt_default+0x8a>
    166e:	46 c0       	rjmp	.+140    	; 0x16fc <mod_sqrt_default+0x116>
    1670:	96 01       	movw	r18, r12
    1672:	26 55       	subi	r18, 0x56	; 86
    1674:	3f 4f       	sbci	r19, 0xFF	; 255
    1676:	39 01       	movw	r6, r18
    1678:	88 24       	eor	r8, r8
    167a:	83 94       	inc	r8
    167c:	91 2c       	mov	r9, r1
    167e:	05 c0       	rjmp	.+10     	; 0x168a <mod_sqrt_default+0xa4>
    1680:	01 50       	subi	r16, 0x01	; 1
    1682:	11 09       	sbc	r17, r1
    1684:	01 30       	cpi	r16, 0x01	; 1
    1686:	11 05       	cpc	r17, r1
    1688:	c9 f1       	breq	.+114    	; 0x16fc <mod_sqrt_default+0x116>
    168a:	d6 01       	movw	r26, r12
    168c:	2c 91       	ld	r18, X
    168e:	a7 01       	movw	r20, r14
    1690:	b7 01       	movw	r22, r14
    1692:	ce 01       	movw	r24, r28
    1694:	01 96       	adiw	r24, 0x01	; 1
    1696:	99 db       	rcall	.-2254   	; 0xdca <uECC_vli_mult>
    1698:	d3 01       	movw	r26, r6
    169a:	ed 91       	ld	r30, X+
    169c:	fc 91       	ld	r31, X
    169e:	be 01       	movw	r22, r28
    16a0:	6f 5f       	subi	r22, 0xFF	; 255
    16a2:	7f 4f       	sbci	r23, 0xFF	; 255
    16a4:	c7 01       	movw	r24, r14
    16a6:	09 95       	icall
    16a8:	f8 01       	movw	r30, r16
    16aa:	f5 95       	asr	r31
    16ac:	e7 95       	ror	r30
    16ae:	f5 95       	asr	r31
    16b0:	e7 95       	ror	r30
    16b2:	f5 95       	asr	r31
    16b4:	e7 95       	ror	r30
    16b6:	ea 0d       	add	r30, r10
    16b8:	fb 1d       	adc	r31, r11
    16ba:	c8 01       	movw	r24, r16
    16bc:	87 70       	andi	r24, 0x07	; 7
    16be:	99 27       	eor	r25, r25
    16c0:	94 01       	movw	r18, r8
    16c2:	02 c0       	rjmp	.+4      	; 0x16c8 <mod_sqrt_default+0xe2>
    16c4:	22 0f       	add	r18, r18
    16c6:	33 1f       	adc	r19, r19
    16c8:	8a 95       	dec	r24
    16ca:	e2 f7       	brpl	.-8      	; 0x16c4 <mod_sqrt_default+0xde>
    16cc:	c9 01       	movw	r24, r18
    16ce:	90 81       	ld	r25, Z
    16d0:	89 23       	and	r24, r25
    16d2:	b1 f2       	breq	.-84     	; 0x1680 <mod_sqrt_default+0x9a>
    16d4:	d6 01       	movw	r26, r12
    16d6:	2c 91       	ld	r18, X
    16d8:	a2 01       	movw	r20, r4
    16da:	b7 01       	movw	r22, r14
    16dc:	ce 01       	movw	r24, r28
    16de:	01 96       	adiw	r24, 0x01	; 1
    16e0:	74 db       	rcall	.-2328   	; 0xdca <uECC_vli_mult>
    16e2:	d3 01       	movw	r26, r6
    16e4:	ed 91       	ld	r30, X+
    16e6:	fc 91       	ld	r31, X
    16e8:	be 01       	movw	r22, r28
    16ea:	6f 5f       	subi	r22, 0xFF	; 255
    16ec:	7f 4f       	sbci	r23, 0xFF	; 255
    16ee:	c7 01       	movw	r24, r14
    16f0:	09 95       	icall
    16f2:	01 50       	subi	r16, 0x01	; 1
    16f4:	11 09       	sbc	r17, r1
    16f6:	01 30       	cpi	r16, 0x01	; 1
    16f8:	11 05       	cpc	r17, r1
    16fa:	39 f6       	brne	.-114    	; 0x168a <mod_sqrt_default+0xa4>
    16fc:	43 2d       	mov	r20, r3
    16fe:	b7 01       	movw	r22, r14
    1700:	c2 01       	movw	r24, r4
    1702:	05 d9       	rcall	.-3574   	; 0x90e <uECC_vli_set>
    1704:	c0 58       	subi	r28, 0x80	; 128
    1706:	df 4f       	sbci	r29, 0xFF	; 255
    1708:	0f b6       	in	r0, 0x3f	; 63
    170a:	f8 94       	cli
    170c:	de bf       	out	0x3e, r29	; 62
    170e:	0f be       	out	0x3f, r0	; 63
    1710:	cd bf       	out	0x3d, r28	; 61
    1712:	df 91       	pop	r29
    1714:	cf 91       	pop	r28
    1716:	1f 91       	pop	r17
    1718:	0f 91       	pop	r16
    171a:	ff 90       	pop	r15
    171c:	ef 90       	pop	r14
    171e:	df 90       	pop	r13
    1720:	cf 90       	pop	r12
    1722:	bf 90       	pop	r11
    1724:	af 90       	pop	r10
    1726:	9f 90       	pop	r9
    1728:	8f 90       	pop	r8
    172a:	7f 90       	pop	r7
    172c:	6f 90       	pop	r6
    172e:	5f 90       	pop	r5
    1730:	4f 90       	pop	r4
    1732:	3f 90       	pop	r3
    1734:	08 95       	ret

00001736 <vli_mmod_fast_secp256r1>:
    1736:	df 92       	push	r13
    1738:	ef 92       	push	r14
    173a:	ff 92       	push	r15
    173c:	0f 93       	push	r16
    173e:	1f 93       	push	r17
    1740:	cf 93       	push	r28
    1742:	df 93       	push	r29
    1744:	cd b7       	in	r28, 0x3d	; 61
    1746:	de b7       	in	r29, 0x3e	; 62
    1748:	a0 97       	sbiw	r28, 0x20	; 32
    174a:	0f b6       	in	r0, 0x3f	; 63
    174c:	f8 94       	cli
    174e:	de bf       	out	0x3e, r29	; 62
    1750:	0f be       	out	0x3f, r0	; 63
    1752:	cd bf       	out	0x3d, r28	; 61
    1754:	7c 01       	movw	r14, r24
    1756:	8b 01       	movw	r16, r22
    1758:	40 e2       	ldi	r20, 0x20	; 32
    175a:	d9 d8       	rcall	.-3662   	; 0x90e <uECC_vli_set>
    175c:	1c 82       	std	Y+4, r1	; 0x04
    175e:	1b 82       	std	Y+3, r1	; 0x03
    1760:	1a 82       	std	Y+2, r1	; 0x02
    1762:	19 82       	std	Y+1, r1	; 0x01
    1764:	18 86       	std	Y+8, r1	; 0x08
    1766:	1f 82       	std	Y+7, r1	; 0x07
    1768:	1e 82       	std	Y+6, r1	; 0x06
    176a:	1d 82       	std	Y+5, r1	; 0x05
    176c:	1c 86       	std	Y+12, r1	; 0x0c
    176e:	1b 86       	std	Y+11, r1	; 0x0b
    1770:	1a 86       	std	Y+10, r1	; 0x0a
    1772:	19 86       	std	Y+9, r1	; 0x09
    1774:	f8 01       	movw	r30, r16
    1776:	84 a5       	ldd	r24, Z+44	; 0x2c
    1778:	8d 87       	std	Y+13, r24	; 0x0d
    177a:	85 a5       	ldd	r24, Z+45	; 0x2d
    177c:	8e 87       	std	Y+14, r24	; 0x0e
    177e:	86 a5       	ldd	r24, Z+46	; 0x2e
    1780:	8f 87       	std	Y+15, r24	; 0x0f
    1782:	87 a5       	ldd	r24, Z+47	; 0x2f
    1784:	88 8b       	std	Y+16, r24	; 0x10
    1786:	80 a9       	ldd	r24, Z+48	; 0x30
    1788:	89 8b       	std	Y+17, r24	; 0x11
    178a:	81 a9       	ldd	r24, Z+49	; 0x31
    178c:	8a 8b       	std	Y+18, r24	; 0x12
    178e:	82 a9       	ldd	r24, Z+50	; 0x32
    1790:	8b 8b       	std	Y+19, r24	; 0x13
    1792:	83 a9       	ldd	r24, Z+51	; 0x33
    1794:	8c 8b       	std	Y+20, r24	; 0x14
    1796:	84 a9       	ldd	r24, Z+52	; 0x34
    1798:	8d 8b       	std	Y+21, r24	; 0x15
    179a:	85 a9       	ldd	r24, Z+53	; 0x35
    179c:	8e 8b       	std	Y+22, r24	; 0x16
    179e:	86 a9       	ldd	r24, Z+54	; 0x36
    17a0:	8f 8b       	std	Y+23, r24	; 0x17
    17a2:	87 a9       	ldd	r24, Z+55	; 0x37
    17a4:	88 8f       	std	Y+24, r24	; 0x18
    17a6:	80 ad       	ldd	r24, Z+56	; 0x38
    17a8:	89 8f       	std	Y+25, r24	; 0x19
    17aa:	81 ad       	ldd	r24, Z+57	; 0x39
    17ac:	8a 8f       	std	Y+26, r24	; 0x1a
    17ae:	82 ad       	ldd	r24, Z+58	; 0x3a
    17b0:	8b 8f       	std	Y+27, r24	; 0x1b
    17b2:	83 ad       	ldd	r24, Z+59	; 0x3b
    17b4:	8c 8f       	std	Y+28, r24	; 0x1c
    17b6:	84 ad       	ldd	r24, Z+60	; 0x3c
    17b8:	8d 8f       	std	Y+29, r24	; 0x1d
    17ba:	85 ad       	ldd	r24, Z+61	; 0x3d
    17bc:	8e 8f       	std	Y+30, r24	; 0x1e
    17be:	86 ad       	ldd	r24, Z+62	; 0x3e
    17c0:	8f 8f       	std	Y+31, r24	; 0x1f
    17c2:	87 ad       	ldd	r24, Z+63	; 0x3f
    17c4:	88 a3       	std	Y+32, r24	; 0x20
    17c6:	20 e2       	ldi	r18, 0x20	; 32
    17c8:	ae 01       	movw	r20, r28
    17ca:	4f 5f       	subi	r20, 0xFF	; 255
    17cc:	5f 4f       	sbci	r21, 0xFF	; 255
    17ce:	ba 01       	movw	r22, r20
    17d0:	ca 01       	movw	r24, r20
    17d2:	59 d9       	rcall	.-3406   	; 0xa86 <uECC_vli_add>
    17d4:	d8 2e       	mov	r13, r24
    17d6:	20 e2       	ldi	r18, 0x20	; 32
    17d8:	ae 01       	movw	r20, r28
    17da:	4f 5f       	subi	r20, 0xFF	; 255
    17dc:	5f 4f       	sbci	r21, 0xFF	; 255
    17de:	b7 01       	movw	r22, r14
    17e0:	c7 01       	movw	r24, r14
    17e2:	51 d9       	rcall	.-3422   	; 0xa86 <uECC_vli_add>
    17e4:	d8 0e       	add	r13, r24
    17e6:	f8 01       	movw	r30, r16
    17e8:	80 a9       	ldd	r24, Z+48	; 0x30
    17ea:	8d 87       	std	Y+13, r24	; 0x0d
    17ec:	81 a9       	ldd	r24, Z+49	; 0x31
    17ee:	8e 87       	std	Y+14, r24	; 0x0e
    17f0:	82 a9       	ldd	r24, Z+50	; 0x32
    17f2:	8f 87       	std	Y+15, r24	; 0x0f
    17f4:	83 a9       	ldd	r24, Z+51	; 0x33
    17f6:	88 8b       	std	Y+16, r24	; 0x10
    17f8:	84 a9       	ldd	r24, Z+52	; 0x34
    17fa:	89 8b       	std	Y+17, r24	; 0x11
    17fc:	85 a9       	ldd	r24, Z+53	; 0x35
    17fe:	8a 8b       	std	Y+18, r24	; 0x12
    1800:	86 a9       	ldd	r24, Z+54	; 0x36
    1802:	8b 8b       	std	Y+19, r24	; 0x13
    1804:	87 a9       	ldd	r24, Z+55	; 0x37
    1806:	8c 8b       	std	Y+20, r24	; 0x14
    1808:	80 ad       	ldd	r24, Z+56	; 0x38
    180a:	8d 8b       	std	Y+21, r24	; 0x15
    180c:	81 ad       	ldd	r24, Z+57	; 0x39
    180e:	8e 8b       	std	Y+22, r24	; 0x16
    1810:	82 ad       	ldd	r24, Z+58	; 0x3a
    1812:	8f 8b       	std	Y+23, r24	; 0x17
    1814:	83 ad       	ldd	r24, Z+59	; 0x3b
    1816:	88 8f       	std	Y+24, r24	; 0x18
    1818:	84 ad       	ldd	r24, Z+60	; 0x3c
    181a:	89 8f       	std	Y+25, r24	; 0x19
    181c:	85 ad       	ldd	r24, Z+61	; 0x3d
    181e:	8a 8f       	std	Y+26, r24	; 0x1a
    1820:	86 ad       	ldd	r24, Z+62	; 0x3e
    1822:	8b 8f       	std	Y+27, r24	; 0x1b
    1824:	87 ad       	ldd	r24, Z+63	; 0x3f
    1826:	8c 8f       	std	Y+28, r24	; 0x1c
    1828:	18 a2       	std	Y+32, r1	; 0x20
    182a:	1f 8e       	std	Y+31, r1	; 0x1f
    182c:	1e 8e       	std	Y+30, r1	; 0x1e
    182e:	1d 8e       	std	Y+29, r1	; 0x1d
    1830:	20 e2       	ldi	r18, 0x20	; 32
    1832:	ae 01       	movw	r20, r28
    1834:	4f 5f       	subi	r20, 0xFF	; 255
    1836:	5f 4f       	sbci	r21, 0xFF	; 255
    1838:	ba 01       	movw	r22, r20
    183a:	ca 01       	movw	r24, r20
    183c:	24 d9       	rcall	.-3512   	; 0xa86 <uECC_vli_add>
    183e:	d8 0e       	add	r13, r24
    1840:	20 e2       	ldi	r18, 0x20	; 32
    1842:	ae 01       	movw	r20, r28
    1844:	4f 5f       	subi	r20, 0xFF	; 255
    1846:	5f 4f       	sbci	r21, 0xFF	; 255
    1848:	b7 01       	movw	r22, r14
    184a:	c7 01       	movw	r24, r14
    184c:	1c d9       	rcall	.-3528   	; 0xa86 <uECC_vli_add>
    184e:	d8 0e       	add	r13, r24
    1850:	f8 01       	movw	r30, r16
    1852:	80 a1       	ldd	r24, Z+32	; 0x20
    1854:	89 83       	std	Y+1, r24	; 0x01
    1856:	81 a1       	ldd	r24, Z+33	; 0x21
    1858:	8a 83       	std	Y+2, r24	; 0x02
    185a:	82 a1       	ldd	r24, Z+34	; 0x22
    185c:	8b 83       	std	Y+3, r24	; 0x03
    185e:	83 a1       	ldd	r24, Z+35	; 0x23
    1860:	8c 83       	std	Y+4, r24	; 0x04
    1862:	84 a1       	ldd	r24, Z+36	; 0x24
    1864:	8d 83       	std	Y+5, r24	; 0x05
    1866:	85 a1       	ldd	r24, Z+37	; 0x25
    1868:	8e 83       	std	Y+6, r24	; 0x06
    186a:	86 a1       	ldd	r24, Z+38	; 0x26
    186c:	8f 83       	std	Y+7, r24	; 0x07
    186e:	87 a1       	ldd	r24, Z+39	; 0x27
    1870:	88 87       	std	Y+8, r24	; 0x08
    1872:	80 a5       	ldd	r24, Z+40	; 0x28
    1874:	89 87       	std	Y+9, r24	; 0x09
    1876:	81 a5       	ldd	r24, Z+41	; 0x29
    1878:	8a 87       	std	Y+10, r24	; 0x0a
    187a:	82 a5       	ldd	r24, Z+42	; 0x2a
    187c:	8b 87       	std	Y+11, r24	; 0x0b
    187e:	83 a5       	ldd	r24, Z+43	; 0x2b
    1880:	8c 87       	std	Y+12, r24	; 0x0c
    1882:	18 8a       	std	Y+16, r1	; 0x10
    1884:	1f 86       	std	Y+15, r1	; 0x0f
    1886:	1e 86       	std	Y+14, r1	; 0x0e
    1888:	1d 86       	std	Y+13, r1	; 0x0d
    188a:	1c 8a       	std	Y+20, r1	; 0x14
    188c:	1b 8a       	std	Y+19, r1	; 0x13
    188e:	1a 8a       	std	Y+18, r1	; 0x12
    1890:	19 8a       	std	Y+17, r1	; 0x11
    1892:	18 8e       	std	Y+24, r1	; 0x18
    1894:	1f 8a       	std	Y+23, r1	; 0x17
    1896:	1e 8a       	std	Y+22, r1	; 0x16
    1898:	1d 8a       	std	Y+21, r1	; 0x15
    189a:	80 ad       	ldd	r24, Z+56	; 0x38
    189c:	89 8f       	std	Y+25, r24	; 0x19
    189e:	81 ad       	ldd	r24, Z+57	; 0x39
    18a0:	8a 8f       	std	Y+26, r24	; 0x1a
    18a2:	82 ad       	ldd	r24, Z+58	; 0x3a
    18a4:	8b 8f       	std	Y+27, r24	; 0x1b
    18a6:	83 ad       	ldd	r24, Z+59	; 0x3b
    18a8:	8c 8f       	std	Y+28, r24	; 0x1c
    18aa:	84 ad       	ldd	r24, Z+60	; 0x3c
    18ac:	8d 8f       	std	Y+29, r24	; 0x1d
    18ae:	85 ad       	ldd	r24, Z+61	; 0x3d
    18b0:	8e 8f       	std	Y+30, r24	; 0x1e
    18b2:	86 ad       	ldd	r24, Z+62	; 0x3e
    18b4:	8f 8f       	std	Y+31, r24	; 0x1f
    18b6:	87 ad       	ldd	r24, Z+63	; 0x3f
    18b8:	88 a3       	std	Y+32, r24	; 0x20
    18ba:	20 e2       	ldi	r18, 0x20	; 32
    18bc:	ae 01       	movw	r20, r28
    18be:	4f 5f       	subi	r20, 0xFF	; 255
    18c0:	5f 4f       	sbci	r21, 0xFF	; 255
    18c2:	b7 01       	movw	r22, r14
    18c4:	c7 01       	movw	r24, r14
    18c6:	df d8       	rcall	.-3650   	; 0xa86 <uECC_vli_add>
    18c8:	d8 0e       	add	r13, r24
    18ca:	f8 01       	movw	r30, r16
    18cc:	84 a1       	ldd	r24, Z+36	; 0x24
    18ce:	89 83       	std	Y+1, r24	; 0x01
    18d0:	85 a1       	ldd	r24, Z+37	; 0x25
    18d2:	8a 83       	std	Y+2, r24	; 0x02
    18d4:	86 a1       	ldd	r24, Z+38	; 0x26
    18d6:	8b 83       	std	Y+3, r24	; 0x03
    18d8:	87 a1       	ldd	r24, Z+39	; 0x27
    18da:	8c 83       	std	Y+4, r24	; 0x04
    18dc:	80 a5       	ldd	r24, Z+40	; 0x28
    18de:	8d 83       	std	Y+5, r24	; 0x05
    18e0:	81 a5       	ldd	r24, Z+41	; 0x29
    18e2:	8e 83       	std	Y+6, r24	; 0x06
    18e4:	82 a5       	ldd	r24, Z+42	; 0x2a
    18e6:	8f 83       	std	Y+7, r24	; 0x07
    18e8:	83 a5       	ldd	r24, Z+43	; 0x2b
    18ea:	88 87       	std	Y+8, r24	; 0x08
    18ec:	84 a5       	ldd	r24, Z+44	; 0x2c
    18ee:	89 87       	std	Y+9, r24	; 0x09
    18f0:	85 a5       	ldd	r24, Z+45	; 0x2d
    18f2:	8a 87       	std	Y+10, r24	; 0x0a
    18f4:	86 a5       	ldd	r24, Z+46	; 0x2e
    18f6:	8b 87       	std	Y+11, r24	; 0x0b
    18f8:	87 a5       	ldd	r24, Z+47	; 0x2f
    18fa:	8c 87       	std	Y+12, r24	; 0x0c
    18fc:	34 a9       	ldd	r19, Z+52	; 0x34
    18fe:	3d 87       	std	Y+13, r19	; 0x0d
    1900:	25 a9       	ldd	r18, Z+53	; 0x35
    1902:	2e 87       	std	Y+14, r18	; 0x0e
    1904:	96 a9       	ldd	r25, Z+54	; 0x36
    1906:	9f 87       	std	Y+15, r25	; 0x0f
    1908:	87 a9       	ldd	r24, Z+55	; 0x37
    190a:	88 8b       	std	Y+16, r24	; 0x10
    190c:	40 ad       	ldd	r20, Z+56	; 0x38
    190e:	49 8b       	std	Y+17, r20	; 0x11
    1910:	41 ad       	ldd	r20, Z+57	; 0x39
    1912:	4a 8b       	std	Y+18, r20	; 0x12
    1914:	42 ad       	ldd	r20, Z+58	; 0x3a
    1916:	4b 8b       	std	Y+19, r20	; 0x13
    1918:	43 ad       	ldd	r20, Z+59	; 0x3b
    191a:	4c 8b       	std	Y+20, r20	; 0x14
    191c:	44 ad       	ldd	r20, Z+60	; 0x3c
    191e:	4d 8b       	std	Y+21, r20	; 0x15
    1920:	45 ad       	ldd	r20, Z+61	; 0x3d
    1922:	4e 8b       	std	Y+22, r20	; 0x16
    1924:	46 ad       	ldd	r20, Z+62	; 0x3e
    1926:	4f 8b       	std	Y+23, r20	; 0x17
    1928:	47 ad       	ldd	r20, Z+63	; 0x3f
    192a:	48 8f       	std	Y+24, r20	; 0x18
    192c:	39 8f       	std	Y+25, r19	; 0x19
    192e:	2a 8f       	std	Y+26, r18	; 0x1a
    1930:	9b 8f       	std	Y+27, r25	; 0x1b
    1932:	8c 8f       	std	Y+28, r24	; 0x1c
    1934:	80 a1       	ldd	r24, Z+32	; 0x20
    1936:	8d 8f       	std	Y+29, r24	; 0x1d
    1938:	81 a1       	ldd	r24, Z+33	; 0x21
    193a:	8e 8f       	std	Y+30, r24	; 0x1e
    193c:	82 a1       	ldd	r24, Z+34	; 0x22
    193e:	8f 8f       	std	Y+31, r24	; 0x1f
    1940:	83 a1       	ldd	r24, Z+35	; 0x23
    1942:	88 a3       	std	Y+32, r24	; 0x20
    1944:	20 e2       	ldi	r18, 0x20	; 32
    1946:	ae 01       	movw	r20, r28
    1948:	4f 5f       	subi	r20, 0xFF	; 255
    194a:	5f 4f       	sbci	r21, 0xFF	; 255
    194c:	b7 01       	movw	r22, r14
    194e:	c7 01       	movw	r24, r14
    1950:	9a d8       	rcall	.-3788   	; 0xa86 <uECC_vli_add>
    1952:	d8 0e       	add	r13, r24
    1954:	f8 01       	movw	r30, r16
    1956:	84 a5       	ldd	r24, Z+44	; 0x2c
    1958:	89 83       	std	Y+1, r24	; 0x01
    195a:	85 a5       	ldd	r24, Z+45	; 0x2d
    195c:	8a 83       	std	Y+2, r24	; 0x02
    195e:	86 a5       	ldd	r24, Z+46	; 0x2e
    1960:	8b 83       	std	Y+3, r24	; 0x03
    1962:	87 a5       	ldd	r24, Z+47	; 0x2f
    1964:	8c 83       	std	Y+4, r24	; 0x04
    1966:	80 a9       	ldd	r24, Z+48	; 0x30
    1968:	8d 83       	std	Y+5, r24	; 0x05
    196a:	81 a9       	ldd	r24, Z+49	; 0x31
    196c:	8e 83       	std	Y+6, r24	; 0x06
    196e:	82 a9       	ldd	r24, Z+50	; 0x32
    1970:	8f 83       	std	Y+7, r24	; 0x07
    1972:	83 a9       	ldd	r24, Z+51	; 0x33
    1974:	88 87       	std	Y+8, r24	; 0x08
    1976:	84 a9       	ldd	r24, Z+52	; 0x34
    1978:	89 87       	std	Y+9, r24	; 0x09
    197a:	85 a9       	ldd	r24, Z+53	; 0x35
    197c:	8a 87       	std	Y+10, r24	; 0x0a
    197e:	86 a9       	ldd	r24, Z+54	; 0x36
    1980:	8b 87       	std	Y+11, r24	; 0x0b
    1982:	87 a9       	ldd	r24, Z+55	; 0x37
    1984:	8c 87       	std	Y+12, r24	; 0x0c
    1986:	18 8a       	std	Y+16, r1	; 0x10
    1988:	1f 86       	std	Y+15, r1	; 0x0f
    198a:	1e 86       	std	Y+14, r1	; 0x0e
    198c:	1d 86       	std	Y+13, r1	; 0x0d
    198e:	1c 8a       	std	Y+20, r1	; 0x14
    1990:	1b 8a       	std	Y+19, r1	; 0x13
    1992:	1a 8a       	std	Y+18, r1	; 0x12
    1994:	19 8a       	std	Y+17, r1	; 0x11
    1996:	18 8e       	std	Y+24, r1	; 0x18
    1998:	1f 8a       	std	Y+23, r1	; 0x17
    199a:	1e 8a       	std	Y+22, r1	; 0x16
    199c:	1d 8a       	std	Y+21, r1	; 0x15
    199e:	80 a1       	ldd	r24, Z+32	; 0x20
    19a0:	89 8f       	std	Y+25, r24	; 0x19
    19a2:	81 a1       	ldd	r24, Z+33	; 0x21
    19a4:	8a 8f       	std	Y+26, r24	; 0x1a
    19a6:	82 a1       	ldd	r24, Z+34	; 0x22
    19a8:	8b 8f       	std	Y+27, r24	; 0x1b
    19aa:	83 a1       	ldd	r24, Z+35	; 0x23
    19ac:	8c 8f       	std	Y+28, r24	; 0x1c
    19ae:	80 a5       	ldd	r24, Z+40	; 0x28
    19b0:	8d 8f       	std	Y+29, r24	; 0x1d
    19b2:	81 a5       	ldd	r24, Z+41	; 0x29
    19b4:	8e 8f       	std	Y+30, r24	; 0x1e
    19b6:	82 a5       	ldd	r24, Z+42	; 0x2a
    19b8:	8f 8f       	std	Y+31, r24	; 0x1f
    19ba:	83 a5       	ldd	r24, Z+43	; 0x2b
    19bc:	88 a3       	std	Y+32, r24	; 0x20
    19be:	20 e2       	ldi	r18, 0x20	; 32
    19c0:	ae 01       	movw	r20, r28
    19c2:	4f 5f       	subi	r20, 0xFF	; 255
    19c4:	5f 4f       	sbci	r21, 0xFF	; 255
    19c6:	b7 01       	movw	r22, r14
    19c8:	c7 01       	movw	r24, r14
    19ca:	2e d9       	rcall	.-3492   	; 0xc28 <uECC_vli_sub>
    19cc:	d8 1a       	sub	r13, r24
    19ce:	f8 01       	movw	r30, r16
    19d0:	80 a9       	ldd	r24, Z+48	; 0x30
    19d2:	89 83       	std	Y+1, r24	; 0x01
    19d4:	81 a9       	ldd	r24, Z+49	; 0x31
    19d6:	8a 83       	std	Y+2, r24	; 0x02
    19d8:	82 a9       	ldd	r24, Z+50	; 0x32
    19da:	8b 83       	std	Y+3, r24	; 0x03
    19dc:	83 a9       	ldd	r24, Z+51	; 0x33
    19de:	8c 83       	std	Y+4, r24	; 0x04
    19e0:	84 a9       	ldd	r24, Z+52	; 0x34
    19e2:	8d 83       	std	Y+5, r24	; 0x05
    19e4:	85 a9       	ldd	r24, Z+53	; 0x35
    19e6:	8e 83       	std	Y+6, r24	; 0x06
    19e8:	86 a9       	ldd	r24, Z+54	; 0x36
    19ea:	8f 83       	std	Y+7, r24	; 0x07
    19ec:	87 a9       	ldd	r24, Z+55	; 0x37
    19ee:	88 87       	std	Y+8, r24	; 0x08
    19f0:	80 ad       	ldd	r24, Z+56	; 0x38
    19f2:	89 87       	std	Y+9, r24	; 0x09
    19f4:	81 ad       	ldd	r24, Z+57	; 0x39
    19f6:	8a 87       	std	Y+10, r24	; 0x0a
    19f8:	82 ad       	ldd	r24, Z+58	; 0x3a
    19fa:	8b 87       	std	Y+11, r24	; 0x0b
    19fc:	83 ad       	ldd	r24, Z+59	; 0x3b
    19fe:	8c 87       	std	Y+12, r24	; 0x0c
    1a00:	84 ad       	ldd	r24, Z+60	; 0x3c
    1a02:	8d 87       	std	Y+13, r24	; 0x0d
    1a04:	85 ad       	ldd	r24, Z+61	; 0x3d
    1a06:	8e 87       	std	Y+14, r24	; 0x0e
    1a08:	86 ad       	ldd	r24, Z+62	; 0x3e
    1a0a:	8f 87       	std	Y+15, r24	; 0x0f
    1a0c:	87 ad       	ldd	r24, Z+63	; 0x3f
    1a0e:	88 8b       	std	Y+16, r24	; 0x10
    1a10:	1c 8a       	std	Y+20, r1	; 0x14
    1a12:	1b 8a       	std	Y+19, r1	; 0x13
    1a14:	1a 8a       	std	Y+18, r1	; 0x12
    1a16:	19 8a       	std	Y+17, r1	; 0x11
    1a18:	18 8e       	std	Y+24, r1	; 0x18
    1a1a:	1f 8a       	std	Y+23, r1	; 0x17
    1a1c:	1e 8a       	std	Y+22, r1	; 0x16
    1a1e:	1d 8a       	std	Y+21, r1	; 0x15
    1a20:	84 a1       	ldd	r24, Z+36	; 0x24
    1a22:	89 8f       	std	Y+25, r24	; 0x19
    1a24:	85 a1       	ldd	r24, Z+37	; 0x25
    1a26:	8a 8f       	std	Y+26, r24	; 0x1a
    1a28:	86 a1       	ldd	r24, Z+38	; 0x26
    1a2a:	8b 8f       	std	Y+27, r24	; 0x1b
    1a2c:	87 a1       	ldd	r24, Z+39	; 0x27
    1a2e:	8c 8f       	std	Y+28, r24	; 0x1c
    1a30:	84 a5       	ldd	r24, Z+44	; 0x2c
    1a32:	8d 8f       	std	Y+29, r24	; 0x1d
    1a34:	85 a5       	ldd	r24, Z+45	; 0x2d
    1a36:	8e 8f       	std	Y+30, r24	; 0x1e
    1a38:	86 a5       	ldd	r24, Z+46	; 0x2e
    1a3a:	8f 8f       	std	Y+31, r24	; 0x1f
    1a3c:	87 a5       	ldd	r24, Z+47	; 0x2f
    1a3e:	88 a3       	std	Y+32, r24	; 0x20
    1a40:	20 e2       	ldi	r18, 0x20	; 32
    1a42:	ae 01       	movw	r20, r28
    1a44:	4f 5f       	subi	r20, 0xFF	; 255
    1a46:	5f 4f       	sbci	r21, 0xFF	; 255
    1a48:	b7 01       	movw	r22, r14
    1a4a:	c7 01       	movw	r24, r14
    1a4c:	ed d8       	rcall	.-3622   	; 0xc28 <uECC_vli_sub>
    1a4e:	d8 1a       	sub	r13, r24
    1a50:	f8 01       	movw	r30, r16
    1a52:	84 a9       	ldd	r24, Z+52	; 0x34
    1a54:	89 83       	std	Y+1, r24	; 0x01
    1a56:	85 a9       	ldd	r24, Z+53	; 0x35
    1a58:	8a 83       	std	Y+2, r24	; 0x02
    1a5a:	86 a9       	ldd	r24, Z+54	; 0x36
    1a5c:	8b 83       	std	Y+3, r24	; 0x03
    1a5e:	87 a9       	ldd	r24, Z+55	; 0x37
    1a60:	8c 83       	std	Y+4, r24	; 0x04
    1a62:	80 ad       	ldd	r24, Z+56	; 0x38
    1a64:	8d 83       	std	Y+5, r24	; 0x05
    1a66:	81 ad       	ldd	r24, Z+57	; 0x39
    1a68:	8e 83       	std	Y+6, r24	; 0x06
    1a6a:	82 ad       	ldd	r24, Z+58	; 0x3a
    1a6c:	8f 83       	std	Y+7, r24	; 0x07
    1a6e:	83 ad       	ldd	r24, Z+59	; 0x3b
    1a70:	88 87       	std	Y+8, r24	; 0x08
    1a72:	84 ad       	ldd	r24, Z+60	; 0x3c
    1a74:	89 87       	std	Y+9, r24	; 0x09
    1a76:	85 ad       	ldd	r24, Z+61	; 0x3d
    1a78:	8a 87       	std	Y+10, r24	; 0x0a
    1a7a:	86 ad       	ldd	r24, Z+62	; 0x3e
    1a7c:	8b 87       	std	Y+11, r24	; 0x0b
    1a7e:	87 ad       	ldd	r24, Z+63	; 0x3f
    1a80:	8c 87       	std	Y+12, r24	; 0x0c
    1a82:	80 a1       	ldd	r24, Z+32	; 0x20
    1a84:	8d 87       	std	Y+13, r24	; 0x0d
    1a86:	81 a1       	ldd	r24, Z+33	; 0x21
    1a88:	8e 87       	std	Y+14, r24	; 0x0e
    1a8a:	82 a1       	ldd	r24, Z+34	; 0x22
    1a8c:	8f 87       	std	Y+15, r24	; 0x0f
    1a8e:	83 a1       	ldd	r24, Z+35	; 0x23
    1a90:	88 8b       	std	Y+16, r24	; 0x10
    1a92:	84 a1       	ldd	r24, Z+36	; 0x24
    1a94:	89 8b       	std	Y+17, r24	; 0x11
    1a96:	85 a1       	ldd	r24, Z+37	; 0x25
    1a98:	8a 8b       	std	Y+18, r24	; 0x12
    1a9a:	86 a1       	ldd	r24, Z+38	; 0x26
    1a9c:	8b 8b       	std	Y+19, r24	; 0x13
    1a9e:	87 a1       	ldd	r24, Z+39	; 0x27
    1aa0:	8c 8b       	std	Y+20, r24	; 0x14
    1aa2:	80 a5       	ldd	r24, Z+40	; 0x28
    1aa4:	8d 8b       	std	Y+21, r24	; 0x15
    1aa6:	81 a5       	ldd	r24, Z+41	; 0x29
    1aa8:	8e 8b       	std	Y+22, r24	; 0x16
    1aaa:	82 a5       	ldd	r24, Z+42	; 0x2a
    1aac:	8f 8b       	std	Y+23, r24	; 0x17
    1aae:	83 a5       	ldd	r24, Z+43	; 0x2b
    1ab0:	88 8f       	std	Y+24, r24	; 0x18
    1ab2:	1c 8e       	std	Y+28, r1	; 0x1c
    1ab4:	1b 8e       	std	Y+27, r1	; 0x1b
    1ab6:	1a 8e       	std	Y+26, r1	; 0x1a
    1ab8:	19 8e       	std	Y+25, r1	; 0x19
    1aba:	80 a9       	ldd	r24, Z+48	; 0x30
    1abc:	8d 8f       	std	Y+29, r24	; 0x1d
    1abe:	81 a9       	ldd	r24, Z+49	; 0x31
    1ac0:	8e 8f       	std	Y+30, r24	; 0x1e
    1ac2:	82 a9       	ldd	r24, Z+50	; 0x32
    1ac4:	8f 8f       	std	Y+31, r24	; 0x1f
    1ac6:	83 a9       	ldd	r24, Z+51	; 0x33
    1ac8:	88 a3       	std	Y+32, r24	; 0x20
    1aca:	20 e2       	ldi	r18, 0x20	; 32
    1acc:	ae 01       	movw	r20, r28
    1ace:	4f 5f       	subi	r20, 0xFF	; 255
    1ad0:	5f 4f       	sbci	r21, 0xFF	; 255
    1ad2:	b7 01       	movw	r22, r14
    1ad4:	c7 01       	movw	r24, r14
    1ad6:	a8 d8       	rcall	.-3760   	; 0xc28 <uECC_vli_sub>
    1ad8:	d8 1a       	sub	r13, r24
    1ada:	f8 01       	movw	r30, r16
    1adc:	80 ad       	ldd	r24, Z+56	; 0x38
    1ade:	89 83       	std	Y+1, r24	; 0x01
    1ae0:	81 ad       	ldd	r24, Z+57	; 0x39
    1ae2:	8a 83       	std	Y+2, r24	; 0x02
    1ae4:	82 ad       	ldd	r24, Z+58	; 0x3a
    1ae6:	8b 83       	std	Y+3, r24	; 0x03
    1ae8:	83 ad       	ldd	r24, Z+59	; 0x3b
    1aea:	8c 83       	std	Y+4, r24	; 0x04
    1aec:	84 ad       	ldd	r24, Z+60	; 0x3c
    1aee:	8d 83       	std	Y+5, r24	; 0x05
    1af0:	85 ad       	ldd	r24, Z+61	; 0x3d
    1af2:	8e 83       	std	Y+6, r24	; 0x06
    1af4:	86 ad       	ldd	r24, Z+62	; 0x3e
    1af6:	8f 83       	std	Y+7, r24	; 0x07
    1af8:	87 ad       	ldd	r24, Z+63	; 0x3f
    1afa:	88 87       	std	Y+8, r24	; 0x08
    1afc:	1c 86       	std	Y+12, r1	; 0x0c
    1afe:	1b 86       	std	Y+11, r1	; 0x0b
    1b00:	1a 86       	std	Y+10, r1	; 0x0a
    1b02:	19 86       	std	Y+9, r1	; 0x09
    1b04:	84 a1       	ldd	r24, Z+36	; 0x24
    1b06:	8d 87       	std	Y+13, r24	; 0x0d
    1b08:	85 a1       	ldd	r24, Z+37	; 0x25
    1b0a:	8e 87       	std	Y+14, r24	; 0x0e
    1b0c:	86 a1       	ldd	r24, Z+38	; 0x26
    1b0e:	8f 87       	std	Y+15, r24	; 0x0f
    1b10:	87 a1       	ldd	r24, Z+39	; 0x27
    1b12:	88 8b       	std	Y+16, r24	; 0x10
    1b14:	80 a5       	ldd	r24, Z+40	; 0x28
    1b16:	89 8b       	std	Y+17, r24	; 0x11
    1b18:	81 a5       	ldd	r24, Z+41	; 0x29
    1b1a:	8a 8b       	std	Y+18, r24	; 0x12
    1b1c:	82 a5       	ldd	r24, Z+42	; 0x2a
    1b1e:	8b 8b       	std	Y+19, r24	; 0x13
    1b20:	83 a5       	ldd	r24, Z+43	; 0x2b
    1b22:	8c 8b       	std	Y+20, r24	; 0x14
    1b24:	84 a5       	ldd	r24, Z+44	; 0x2c
    1b26:	8d 8b       	std	Y+21, r24	; 0x15
    1b28:	85 a5       	ldd	r24, Z+45	; 0x2d
    1b2a:	8e 8b       	std	Y+22, r24	; 0x16
    1b2c:	86 a5       	ldd	r24, Z+46	; 0x2e
    1b2e:	8f 8b       	std	Y+23, r24	; 0x17
    1b30:	87 a5       	ldd	r24, Z+47	; 0x2f
    1b32:	88 8f       	std	Y+24, r24	; 0x18
    1b34:	1c 8e       	std	Y+28, r1	; 0x1c
    1b36:	1b 8e       	std	Y+27, r1	; 0x1b
    1b38:	1a 8e       	std	Y+26, r1	; 0x1a
    1b3a:	19 8e       	std	Y+25, r1	; 0x19
    1b3c:	84 a9       	ldd	r24, Z+52	; 0x34
    1b3e:	8d 8f       	std	Y+29, r24	; 0x1d
    1b40:	85 a9       	ldd	r24, Z+53	; 0x35
    1b42:	8e 8f       	std	Y+30, r24	; 0x1e
    1b44:	86 a9       	ldd	r24, Z+54	; 0x36
    1b46:	8f 8f       	std	Y+31, r24	; 0x1f
    1b48:	87 a9       	ldd	r24, Z+55	; 0x37
    1b4a:	88 a3       	std	Y+32, r24	; 0x20
    1b4c:	20 e2       	ldi	r18, 0x20	; 32
    1b4e:	ae 01       	movw	r20, r28
    1b50:	4f 5f       	subi	r20, 0xFF	; 255
    1b52:	5f 4f       	sbci	r21, 0xFF	; 255
    1b54:	b7 01       	movw	r22, r14
    1b56:	c7 01       	movw	r24, r14
    1b58:	67 d8       	rcall	.-3890   	; 0xc28 <uECC_vli_sub>
    1b5a:	d8 1a       	sub	r13, r24
    1b5c:	d7 fc       	sbrc	r13, 7
    1b5e:	19 c0       	rjmp	.+50     	; 0x1b92 <vli_mmod_fast_secp256r1+0x45c>
    1b60:	87 01       	movw	r16, r14
    1b62:	00 5e       	subi	r16, 0xE0	; 224
    1b64:	1f 4f       	sbci	r17, 0xFF	; 255
    1b66:	d1 10       	cpse	r13, r1
    1b68:	0c c0       	rjmp	.+24     	; 0x1b82 <vli_mmod_fast_secp256r1+0x44c>
    1b6a:	a6 e4       	ldi	r26, 0x46	; 70
    1b6c:	b1 e0       	ldi	r27, 0x01	; 1
    1b6e:	f8 01       	movw	r30, r16
    1b70:	9e 91       	ld	r25, -X
    1b72:	82 91       	ld	r24, -Z
    1b74:	89 17       	cp	r24, r25
    1b76:	b8 f0       	brcs	.+46     	; 0x1ba6 <vli_mmod_fast_secp256r1+0x470>
    1b78:	98 17       	cp	r25, r24
    1b7a:	18 f0       	brcs	.+6      	; 0x1b82 <vli_mmod_fast_secp256r1+0x44c>
    1b7c:	ee 15       	cp	r30, r14
    1b7e:	ff 05       	cpc	r31, r15
    1b80:	b9 f7       	brne	.-18     	; 0x1b70 <vli_mmod_fast_secp256r1+0x43a>
    1b82:	20 e2       	ldi	r18, 0x20	; 32
    1b84:	46 e2       	ldi	r20, 0x26	; 38
    1b86:	51 e0       	ldi	r21, 0x01	; 1
    1b88:	b7 01       	movw	r22, r14
    1b8a:	c7 01       	movw	r24, r14
    1b8c:	4d d8       	rcall	.-3942   	; 0xc28 <uECC_vli_sub>
    1b8e:	d8 1a       	sub	r13, r24
    1b90:	ea cf       	rjmp	.-44     	; 0x1b66 <vli_mmod_fast_secp256r1+0x430>
    1b92:	20 e2       	ldi	r18, 0x20	; 32
    1b94:	46 e2       	ldi	r20, 0x26	; 38
    1b96:	51 e0       	ldi	r21, 0x01	; 1
    1b98:	b7 01       	movw	r22, r14
    1b9a:	c7 01       	movw	r24, r14
    1b9c:	0e 94 43 05 	call	0xa86	; 0xa86 <uECC_vli_add>
    1ba0:	d8 0e       	add	r13, r24
    1ba2:	d7 fc       	sbrc	r13, 7
    1ba4:	f6 cf       	rjmp	.-20     	; 0x1b92 <vli_mmod_fast_secp256r1+0x45c>
    1ba6:	a0 96       	adiw	r28, 0x20	; 32
    1ba8:	0f b6       	in	r0, 0x3f	; 63
    1baa:	f8 94       	cli
    1bac:	de bf       	out	0x3e, r29	; 62
    1bae:	0f be       	out	0x3f, r0	; 63
    1bb0:	cd bf       	out	0x3d, r28	; 61
    1bb2:	df 91       	pop	r29
    1bb4:	cf 91       	pop	r28
    1bb6:	1f 91       	pop	r17
    1bb8:	0f 91       	pop	r16
    1bba:	ff 90       	pop	r15
    1bbc:	ef 90       	pop	r14
    1bbe:	df 90       	pop	r13
    1bc0:	08 95       	ret

00001bc2 <apply_z>:
    1bc2:	8f 92       	push	r8
    1bc4:	9f 92       	push	r9
    1bc6:	af 92       	push	r10
    1bc8:	bf 92       	push	r11
    1bca:	cf 92       	push	r12
    1bcc:	df 92       	push	r13
    1bce:	ef 92       	push	r14
    1bd0:	ff 92       	push	r15
    1bd2:	0f 93       	push	r16
    1bd4:	1f 93       	push	r17
    1bd6:	cf 93       	push	r28
    1bd8:	df 93       	push	r29
    1bda:	cd b7       	in	r28, 0x3d	; 61
    1bdc:	de b7       	in	r29, 0x3e	; 62
    1bde:	c0 56       	subi	r28, 0x60	; 96
    1be0:	d1 09       	sbc	r29, r1
    1be2:	0f b6       	in	r0, 0x3f	; 63
    1be4:	f8 94       	cli
    1be6:	de bf       	out	0x3e, r29	; 62
    1be8:	0f be       	out	0x3f, r0	; 63
    1bea:	cd bf       	out	0x3d, r28	; 61
    1bec:	4c 01       	movw	r8, r24
    1bee:	5b 01       	movw	r10, r22
    1bf0:	6a 01       	movw	r12, r20
    1bf2:	89 01       	movw	r16, r18
    1bf4:	d9 01       	movw	r26, r18
    1bf6:	2c 91       	ld	r18, X
    1bf8:	ba 01       	movw	r22, r20
    1bfa:	ce 01       	movw	r24, r28
    1bfc:	01 96       	adiw	r24, 0x01	; 1
    1bfe:	e5 d8       	rcall	.-3638   	; 0xdca <uECC_vli_mult>
    1c00:	78 01       	movw	r14, r16
    1c02:	ba ea       	ldi	r27, 0xAA	; 170
    1c04:	eb 0e       	add	r14, r27
    1c06:	f1 1c       	adc	r15, r1
    1c08:	d7 01       	movw	r26, r14
    1c0a:	ed 91       	ld	r30, X+
    1c0c:	fc 91       	ld	r31, X
    1c0e:	be 01       	movw	r22, r28
    1c10:	6f 5f       	subi	r22, 0xFF	; 255
    1c12:	7f 4f       	sbci	r23, 0xFF	; 255
    1c14:	ce 01       	movw	r24, r28
    1c16:	8f 5b       	subi	r24, 0xBF	; 191
    1c18:	9f 4f       	sbci	r25, 0xFF	; 255
    1c1a:	09 95       	icall
    1c1c:	f8 01       	movw	r30, r16
    1c1e:	20 81       	ld	r18, Z
    1c20:	ae 01       	movw	r20, r28
    1c22:	4f 5b       	subi	r20, 0xBF	; 191
    1c24:	5f 4f       	sbci	r21, 0xFF	; 255
    1c26:	b4 01       	movw	r22, r8
    1c28:	ce 01       	movw	r24, r28
    1c2a:	01 96       	adiw	r24, 0x01	; 1
    1c2c:	ce d8       	rcall	.-3684   	; 0xdca <uECC_vli_mult>
    1c2e:	d7 01       	movw	r26, r14
    1c30:	ed 91       	ld	r30, X+
    1c32:	fc 91       	ld	r31, X
    1c34:	be 01       	movw	r22, r28
    1c36:	6f 5f       	subi	r22, 0xFF	; 255
    1c38:	7f 4f       	sbci	r23, 0xFF	; 255
    1c3a:	c4 01       	movw	r24, r8
    1c3c:	09 95       	icall
    1c3e:	f8 01       	movw	r30, r16
    1c40:	20 81       	ld	r18, Z
    1c42:	a6 01       	movw	r20, r12
    1c44:	be 01       	movw	r22, r28
    1c46:	6f 5b       	subi	r22, 0xBF	; 191
    1c48:	7f 4f       	sbci	r23, 0xFF	; 255
    1c4a:	ce 01       	movw	r24, r28
    1c4c:	01 96       	adiw	r24, 0x01	; 1
    1c4e:	bd d8       	rcall	.-3718   	; 0xdca <uECC_vli_mult>
    1c50:	d7 01       	movw	r26, r14
    1c52:	ed 91       	ld	r30, X+
    1c54:	fc 91       	ld	r31, X
    1c56:	be 01       	movw	r22, r28
    1c58:	6f 5f       	subi	r22, 0xFF	; 255
    1c5a:	7f 4f       	sbci	r23, 0xFF	; 255
    1c5c:	ce 01       	movw	r24, r28
    1c5e:	8f 5b       	subi	r24, 0xBF	; 191
    1c60:	9f 4f       	sbci	r25, 0xFF	; 255
    1c62:	09 95       	icall
    1c64:	f8 01       	movw	r30, r16
    1c66:	20 81       	ld	r18, Z
    1c68:	ae 01       	movw	r20, r28
    1c6a:	4f 5b       	subi	r20, 0xBF	; 191
    1c6c:	5f 4f       	sbci	r21, 0xFF	; 255
    1c6e:	b5 01       	movw	r22, r10
    1c70:	ce 01       	movw	r24, r28
    1c72:	01 96       	adiw	r24, 0x01	; 1
    1c74:	aa d8       	rcall	.-3756   	; 0xdca <uECC_vli_mult>
    1c76:	d7 01       	movw	r26, r14
    1c78:	ed 91       	ld	r30, X+
    1c7a:	fc 91       	ld	r31, X
    1c7c:	be 01       	movw	r22, r28
    1c7e:	6f 5f       	subi	r22, 0xFF	; 255
    1c80:	7f 4f       	sbci	r23, 0xFF	; 255
    1c82:	c5 01       	movw	r24, r10
    1c84:	09 95       	icall
    1c86:	c0 5a       	subi	r28, 0xA0	; 160
    1c88:	df 4f       	sbci	r29, 0xFF	; 255
    1c8a:	0f b6       	in	r0, 0x3f	; 63
    1c8c:	f8 94       	cli
    1c8e:	de bf       	out	0x3e, r29	; 62
    1c90:	0f be       	out	0x3f, r0	; 63
    1c92:	cd bf       	out	0x3d, r28	; 61
    1c94:	df 91       	pop	r29
    1c96:	cf 91       	pop	r28
    1c98:	1f 91       	pop	r17
    1c9a:	0f 91       	pop	r16
    1c9c:	ff 90       	pop	r15
    1c9e:	ef 90       	pop	r14
    1ca0:	df 90       	pop	r13
    1ca2:	cf 90       	pop	r12
    1ca4:	bf 90       	pop	r11
    1ca6:	af 90       	pop	r10
    1ca8:	9f 90       	pop	r9
    1caa:	8f 90       	pop	r8
    1cac:	08 95       	ret

00001cae <XYcZ_add>:
    1cae:	2f 92       	push	r2
    1cb0:	3f 92       	push	r3
    1cb2:	4f 92       	push	r4
    1cb4:	5f 92       	push	r5
    1cb6:	6f 92       	push	r6
    1cb8:	7f 92       	push	r7
    1cba:	8f 92       	push	r8
    1cbc:	9f 92       	push	r9
    1cbe:	af 92       	push	r10
    1cc0:	bf 92       	push	r11
    1cc2:	cf 92       	push	r12
    1cc4:	df 92       	push	r13
    1cc6:	ef 92       	push	r14
    1cc8:	ff 92       	push	r15
    1cca:	0f 93       	push	r16
    1ccc:	1f 93       	push	r17
    1cce:	cf 93       	push	r28
    1cd0:	df 93       	push	r29
    1cd2:	cd b7       	in	r28, 0x3d	; 61
    1cd4:	de b7       	in	r29, 0x3e	; 62
    1cd6:	c0 56       	subi	r28, 0x60	; 96
    1cd8:	d1 09       	sbc	r29, r1
    1cda:	0f b6       	in	r0, 0x3f	; 63
    1cdc:	f8 94       	cli
    1cde:	de bf       	out	0x3e, r29	; 62
    1ce0:	0f be       	out	0x3f, r0	; 63
    1ce2:	cd bf       	out	0x3d, r28	; 61
    1ce4:	3c 01       	movw	r6, r24
    1ce6:	2b 01       	movw	r4, r22
    1ce8:	7a 01       	movw	r14, r20
    1cea:	59 01       	movw	r10, r18
    1cec:	68 01       	movw	r12, r16
    1cee:	d8 01       	movw	r26, r16
    1cf0:	1c 91       	ld	r17, X
    1cf2:	46 01       	movw	r8, r12
    1cf4:	b4 e0       	ldi	r27, 0x04	; 4
    1cf6:	8b 0e       	add	r8, r27
    1cf8:	91 1c       	adc	r9, r1
    1cfa:	01 2f       	mov	r16, r17
    1cfc:	94 01       	movw	r18, r8
    1cfe:	ac 01       	movw	r20, r24
    1d00:	b7 01       	movw	r22, r14
    1d02:	ce 01       	movw	r24, r28
    1d04:	8f 5b       	subi	r24, 0xBF	; 191
    1d06:	9f 4f       	sbci	r25, 0xFF	; 255
    1d08:	41 d9       	rcall	.-3454   	; 0xf8c <uECC_vli_modSub>
    1d0a:	f6 01       	movw	r30, r12
    1d0c:	20 81       	ld	r18, Z
    1d0e:	ae 01       	movw	r20, r28
    1d10:	4f 5b       	subi	r20, 0xBF	; 191
    1d12:	5f 4f       	sbci	r21, 0xFF	; 255
    1d14:	ba 01       	movw	r22, r20
    1d16:	ce 01       	movw	r24, r28
    1d18:	01 96       	adiw	r24, 0x01	; 1
    1d1a:	57 d8       	rcall	.-3922   	; 0xdca <uECC_vli_mult>
    1d1c:	16 01       	movw	r2, r12
    1d1e:	fa ea       	ldi	r31, 0xAA	; 170
    1d20:	2f 0e       	add	r2, r31
    1d22:	31 1c       	adc	r3, r1
    1d24:	d1 01       	movw	r26, r2
    1d26:	ed 91       	ld	r30, X+
    1d28:	fc 91       	ld	r31, X
    1d2a:	be 01       	movw	r22, r28
    1d2c:	6f 5f       	subi	r22, 0xFF	; 255
    1d2e:	7f 4f       	sbci	r23, 0xFF	; 255
    1d30:	ce 01       	movw	r24, r28
    1d32:	8f 5b       	subi	r24, 0xBF	; 191
    1d34:	9f 4f       	sbci	r25, 0xFF	; 255
    1d36:	09 95       	icall
    1d38:	f6 01       	movw	r30, r12
    1d3a:	20 81       	ld	r18, Z
    1d3c:	ae 01       	movw	r20, r28
    1d3e:	4f 5b       	subi	r20, 0xBF	; 191
    1d40:	5f 4f       	sbci	r21, 0xFF	; 255
    1d42:	b3 01       	movw	r22, r6
    1d44:	ce 01       	movw	r24, r28
    1d46:	01 96       	adiw	r24, 0x01	; 1
    1d48:	40 d8       	rcall	.-3968   	; 0xdca <uECC_vli_mult>
    1d4a:	d1 01       	movw	r26, r2
    1d4c:	ed 91       	ld	r30, X+
    1d4e:	fc 91       	ld	r31, X
    1d50:	be 01       	movw	r22, r28
    1d52:	6f 5f       	subi	r22, 0xFF	; 255
    1d54:	7f 4f       	sbci	r23, 0xFF	; 255
    1d56:	c3 01       	movw	r24, r6
    1d58:	09 95       	icall
    1d5a:	f6 01       	movw	r30, r12
    1d5c:	20 81       	ld	r18, Z
    1d5e:	ae 01       	movw	r20, r28
    1d60:	4f 5b       	subi	r20, 0xBF	; 191
    1d62:	5f 4f       	sbci	r21, 0xFF	; 255
    1d64:	b7 01       	movw	r22, r14
    1d66:	ce 01       	movw	r24, r28
    1d68:	01 96       	adiw	r24, 0x01	; 1
    1d6a:	2f d8       	rcall	.-4002   	; 0xdca <uECC_vli_mult>
    1d6c:	d1 01       	movw	r26, r2
    1d6e:	ed 91       	ld	r30, X+
    1d70:	fc 91       	ld	r31, X
    1d72:	be 01       	movw	r22, r28
    1d74:	6f 5f       	subi	r22, 0xFF	; 255
    1d76:	7f 4f       	sbci	r23, 0xFF	; 255
    1d78:	c7 01       	movw	r24, r14
    1d7a:	09 95       	icall
    1d7c:	94 01       	movw	r18, r8
    1d7e:	a2 01       	movw	r20, r4
    1d80:	b5 01       	movw	r22, r10
    1d82:	c5 01       	movw	r24, r10
    1d84:	03 d9       	rcall	.-3578   	; 0xf8c <uECC_vli_modSub>
    1d86:	f6 01       	movw	r30, r12
    1d88:	20 81       	ld	r18, Z
    1d8a:	a5 01       	movw	r20, r10
    1d8c:	b5 01       	movw	r22, r10
    1d8e:	ce 01       	movw	r24, r28
    1d90:	01 96       	adiw	r24, 0x01	; 1
    1d92:	1b d8       	rcall	.-4042   	; 0xdca <uECC_vli_mult>
    1d94:	d1 01       	movw	r26, r2
    1d96:	ed 91       	ld	r30, X+
    1d98:	fc 91       	ld	r31, X
    1d9a:	be 01       	movw	r22, r28
    1d9c:	6f 5f       	subi	r22, 0xFF	; 255
    1d9e:	7f 4f       	sbci	r23, 0xFF	; 255
    1da0:	ce 01       	movw	r24, r28
    1da2:	8f 5b       	subi	r24, 0xBF	; 191
    1da4:	9f 4f       	sbci	r25, 0xFF	; 255
    1da6:	09 95       	icall
    1da8:	94 01       	movw	r18, r8
    1daa:	a3 01       	movw	r20, r6
    1dac:	be 01       	movw	r22, r28
    1dae:	6f 5b       	subi	r22, 0xBF	; 191
    1db0:	7f 4f       	sbci	r23, 0xFF	; 255
    1db2:	cb 01       	movw	r24, r22
    1db4:	eb d8       	rcall	.-3626   	; 0xf8c <uECC_vli_modSub>
    1db6:	94 01       	movw	r18, r8
    1db8:	a7 01       	movw	r20, r14
    1dba:	be 01       	movw	r22, r28
    1dbc:	6f 5b       	subi	r22, 0xBF	; 191
    1dbe:	7f 4f       	sbci	r23, 0xFF	; 255
    1dc0:	cb 01       	movw	r24, r22
    1dc2:	e4 d8       	rcall	.-3640   	; 0xf8c <uECC_vli_modSub>
    1dc4:	94 01       	movw	r18, r8
    1dc6:	a3 01       	movw	r20, r6
    1dc8:	b7 01       	movw	r22, r14
    1dca:	c7 01       	movw	r24, r14
    1dcc:	df d8       	rcall	.-3650   	; 0xf8c <uECC_vli_modSub>
    1dce:	f6 01       	movw	r30, r12
    1dd0:	20 81       	ld	r18, Z
    1dd2:	a7 01       	movw	r20, r14
    1dd4:	b2 01       	movw	r22, r4
    1dd6:	ce 01       	movw	r24, r28
    1dd8:	01 96       	adiw	r24, 0x01	; 1
    1dda:	0e 94 e5 06 	call	0xdca	; 0xdca <uECC_vli_mult>
    1dde:	d1 01       	movw	r26, r2
    1de0:	ed 91       	ld	r30, X+
    1de2:	fc 91       	ld	r31, X
    1de4:	be 01       	movw	r22, r28
    1de6:	6f 5f       	subi	r22, 0xFF	; 255
    1de8:	7f 4f       	sbci	r23, 0xFF	; 255
    1dea:	c2 01       	movw	r24, r4
    1dec:	09 95       	icall
    1dee:	94 01       	movw	r18, r8
    1df0:	ae 01       	movw	r20, r28
    1df2:	4f 5b       	subi	r20, 0xBF	; 191
    1df4:	5f 4f       	sbci	r21, 0xFF	; 255
    1df6:	b3 01       	movw	r22, r6
    1df8:	c7 01       	movw	r24, r14
    1dfa:	c8 d8       	rcall	.-3696   	; 0xf8c <uECC_vli_modSub>
    1dfc:	f6 01       	movw	r30, r12
    1dfe:	20 81       	ld	r18, Z
    1e00:	a7 01       	movw	r20, r14
    1e02:	b5 01       	movw	r22, r10
    1e04:	ce 01       	movw	r24, r28
    1e06:	01 96       	adiw	r24, 0x01	; 1
    1e08:	0e 94 e5 06 	call	0xdca	; 0xdca <uECC_vli_mult>
    1e0c:	d1 01       	movw	r26, r2
    1e0e:	ed 91       	ld	r30, X+
    1e10:	fc 91       	ld	r31, X
    1e12:	be 01       	movw	r22, r28
    1e14:	6f 5f       	subi	r22, 0xFF	; 255
    1e16:	7f 4f       	sbci	r23, 0xFF	; 255
    1e18:	c5 01       	movw	r24, r10
    1e1a:	09 95       	icall
    1e1c:	94 01       	movw	r18, r8
    1e1e:	a2 01       	movw	r20, r4
    1e20:	b5 01       	movw	r22, r10
    1e22:	c5 01       	movw	r24, r10
    1e24:	b3 d8       	rcall	.-3738   	; 0xf8c <uECC_vli_modSub>
    1e26:	41 2f       	mov	r20, r17
    1e28:	be 01       	movw	r22, r28
    1e2a:	6f 5b       	subi	r22, 0xBF	; 191
    1e2c:	7f 4f       	sbci	r23, 0xFF	; 255
    1e2e:	c7 01       	movw	r24, r14
    1e30:	0e 94 87 04 	call	0x90e	; 0x90e <uECC_vli_set>
    1e34:	c0 5a       	subi	r28, 0xA0	; 160
    1e36:	df 4f       	sbci	r29, 0xFF	; 255
    1e38:	0f b6       	in	r0, 0x3f	; 63
    1e3a:	f8 94       	cli
    1e3c:	de bf       	out	0x3e, r29	; 62
    1e3e:	0f be       	out	0x3f, r0	; 63
    1e40:	cd bf       	out	0x3d, r28	; 61
    1e42:	df 91       	pop	r29
    1e44:	cf 91       	pop	r28
    1e46:	1f 91       	pop	r17
    1e48:	0f 91       	pop	r16
    1e4a:	ff 90       	pop	r15
    1e4c:	ef 90       	pop	r14
    1e4e:	df 90       	pop	r13
    1e50:	cf 90       	pop	r12
    1e52:	bf 90       	pop	r11
    1e54:	af 90       	pop	r10
    1e56:	9f 90       	pop	r9
    1e58:	8f 90       	pop	r8
    1e5a:	7f 90       	pop	r7
    1e5c:	6f 90       	pop	r6
    1e5e:	5f 90       	pop	r5
    1e60:	4f 90       	pop	r4
    1e62:	3f 90       	pop	r3
    1e64:	2f 90       	pop	r2
    1e66:	08 95       	ret

00001e68 <XYcZ_addC>:
    1e68:	2f 92       	push	r2
    1e6a:	3f 92       	push	r3
    1e6c:	4f 92       	push	r4
    1e6e:	5f 92       	push	r5
    1e70:	6f 92       	push	r6
    1e72:	7f 92       	push	r7
    1e74:	8f 92       	push	r8
    1e76:	9f 92       	push	r9
    1e78:	af 92       	push	r10
    1e7a:	bf 92       	push	r11
    1e7c:	cf 92       	push	r12
    1e7e:	df 92       	push	r13
    1e80:	ef 92       	push	r14
    1e82:	ff 92       	push	r15
    1e84:	0f 93       	push	r16
    1e86:	1f 93       	push	r17
    1e88:	cf 93       	push	r28
    1e8a:	df 93       	push	r29
    1e8c:	cd b7       	in	r28, 0x3d	; 61
    1e8e:	de b7       	in	r29, 0x3e	; 62
    1e90:	c0 5a       	subi	r28, 0xA0	; 160
    1e92:	d1 09       	sbc	r29, r1
    1e94:	0f b6       	in	r0, 0x3f	; 63
    1e96:	f8 94       	cli
    1e98:	de bf       	out	0x3e, r29	; 62
    1e9a:	0f be       	out	0x3f, r0	; 63
    1e9c:	cd bf       	out	0x3d, r28	; 61
    1e9e:	4c 01       	movw	r8, r24
    1ea0:	3b 01       	movw	r6, r22
    1ea2:	5a 01       	movw	r10, r20
    1ea4:	69 01       	movw	r12, r18
    1ea6:	28 01       	movw	r4, r16
    1ea8:	d8 01       	movw	r26, r16
    1eaa:	1c 91       	ld	r17, X
    1eac:	72 01       	movw	r14, r4
    1eae:	b4 e0       	ldi	r27, 0x04	; 4
    1eb0:	eb 0e       	add	r14, r27
    1eb2:	f1 1c       	adc	r15, r1
    1eb4:	01 2f       	mov	r16, r17
    1eb6:	97 01       	movw	r18, r14
    1eb8:	ac 01       	movw	r20, r24
    1eba:	b5 01       	movw	r22, r10
    1ebc:	ce 01       	movw	r24, r28
    1ebe:	8f 57       	subi	r24, 0x7F	; 127
    1ec0:	9f 4f       	sbci	r25, 0xFF	; 255
    1ec2:	64 d8       	rcall	.-3896   	; 0xf8c <uECC_vli_modSub>
    1ec4:	f2 01       	movw	r30, r4
    1ec6:	20 81       	ld	r18, Z
    1ec8:	ae 01       	movw	r20, r28
    1eca:	4f 57       	subi	r20, 0x7F	; 127
    1ecc:	5f 4f       	sbci	r21, 0xFF	; 255
    1ece:	ba 01       	movw	r22, r20
    1ed0:	ce 01       	movw	r24, r28
    1ed2:	01 96       	adiw	r24, 0x01	; 1
    1ed4:	0e 94 e5 06 	call	0xdca	; 0xdca <uECC_vli_mult>
    1ed8:	12 01       	movw	r2, r4
    1eda:	fa ea       	ldi	r31, 0xAA	; 170
    1edc:	2f 0e       	add	r2, r31
    1ede:	31 1c       	adc	r3, r1
    1ee0:	d1 01       	movw	r26, r2
    1ee2:	ed 91       	ld	r30, X+
    1ee4:	fc 91       	ld	r31, X
    1ee6:	be 01       	movw	r22, r28
    1ee8:	6f 5f       	subi	r22, 0xFF	; 255
    1eea:	7f 4f       	sbci	r23, 0xFF	; 255
    1eec:	ce 01       	movw	r24, r28
    1eee:	8f 57       	subi	r24, 0x7F	; 127
    1ef0:	9f 4f       	sbci	r25, 0xFF	; 255
    1ef2:	09 95       	icall
    1ef4:	f2 01       	movw	r30, r4
    1ef6:	20 81       	ld	r18, Z
    1ef8:	ae 01       	movw	r20, r28
    1efa:	4f 57       	subi	r20, 0x7F	; 127
    1efc:	5f 4f       	sbci	r21, 0xFF	; 255
    1efe:	b4 01       	movw	r22, r8
    1f00:	ce 01       	movw	r24, r28
    1f02:	01 96       	adiw	r24, 0x01	; 1
    1f04:	0e 94 e5 06 	call	0xdca	; 0xdca <uECC_vli_mult>
    1f08:	d1 01       	movw	r26, r2
    1f0a:	ed 91       	ld	r30, X+
    1f0c:	fc 91       	ld	r31, X
    1f0e:	be 01       	movw	r22, r28
    1f10:	6f 5f       	subi	r22, 0xFF	; 255
    1f12:	7f 4f       	sbci	r23, 0xFF	; 255
    1f14:	c4 01       	movw	r24, r8
    1f16:	09 95       	icall
    1f18:	f2 01       	movw	r30, r4
    1f1a:	20 81       	ld	r18, Z
    1f1c:	ae 01       	movw	r20, r28
    1f1e:	4f 57       	subi	r20, 0x7F	; 127
    1f20:	5f 4f       	sbci	r21, 0xFF	; 255
    1f22:	b5 01       	movw	r22, r10
    1f24:	ce 01       	movw	r24, r28
    1f26:	01 96       	adiw	r24, 0x01	; 1
    1f28:	0e 94 e5 06 	call	0xdca	; 0xdca <uECC_vli_mult>
    1f2c:	d1 01       	movw	r26, r2
    1f2e:	ed 91       	ld	r30, X+
    1f30:	fc 91       	ld	r31, X
    1f32:	be 01       	movw	r22, r28
    1f34:	6f 5f       	subi	r22, 0xFF	; 255
    1f36:	7f 4f       	sbci	r23, 0xFF	; 255
    1f38:	c5 01       	movw	r24, r10
    1f3a:	09 95       	icall
    1f3c:	97 01       	movw	r18, r14
    1f3e:	a3 01       	movw	r20, r6
    1f40:	b6 01       	movw	r22, r12
    1f42:	ce 01       	movw	r24, r28
    1f44:	8f 57       	subi	r24, 0x7F	; 127
    1f46:	9f 4f       	sbci	r25, 0xFF	; 255
    1f48:	0e 94 94 07 	call	0xf28	; 0xf28 <uECC_vli_modAdd>
    1f4c:	97 01       	movw	r18, r14
    1f4e:	a3 01       	movw	r20, r6
    1f50:	b6 01       	movw	r22, r12
    1f52:	c6 01       	movw	r24, r12
    1f54:	1b d8       	rcall	.-4042   	; 0xf8c <uECC_vli_modSub>
    1f56:	97 01       	movw	r18, r14
    1f58:	a4 01       	movw	r20, r8
    1f5a:	b5 01       	movw	r22, r10
    1f5c:	ce 01       	movw	r24, r28
    1f5e:	8f 59       	subi	r24, 0x9F	; 159
    1f60:	9f 4f       	sbci	r25, 0xFF	; 255
    1f62:	14 d8       	rcall	.-4056   	; 0xf8c <uECC_vli_modSub>
    1f64:	f2 01       	movw	r30, r4
    1f66:	20 81       	ld	r18, Z
    1f68:	ae 01       	movw	r20, r28
    1f6a:	4f 59       	subi	r20, 0x9F	; 159
    1f6c:	5f 4f       	sbci	r21, 0xFF	; 255
    1f6e:	b3 01       	movw	r22, r6
    1f70:	ce 01       	movw	r24, r28
    1f72:	01 96       	adiw	r24, 0x01	; 1
    1f74:	0e 94 e5 06 	call	0xdca	; 0xdca <uECC_vli_mult>
    1f78:	d1 01       	movw	r26, r2
    1f7a:	ed 91       	ld	r30, X+
    1f7c:	fc 91       	ld	r31, X
    1f7e:	be 01       	movw	r22, r28
    1f80:	6f 5f       	subi	r22, 0xFF	; 255
    1f82:	7f 4f       	sbci	r23, 0xFF	; 255
    1f84:	c3 01       	movw	r24, r6
    1f86:	09 95       	icall
    1f88:	97 01       	movw	r18, r14
    1f8a:	a5 01       	movw	r20, r10
    1f8c:	b4 01       	movw	r22, r8
    1f8e:	ce 01       	movw	r24, r28
    1f90:	8f 59       	subi	r24, 0x9F	; 159
    1f92:	9f 4f       	sbci	r25, 0xFF	; 255
    1f94:	0e 94 94 07 	call	0xf28	; 0xf28 <uECC_vli_modAdd>
    1f98:	f2 01       	movw	r30, r4
    1f9a:	20 81       	ld	r18, Z
    1f9c:	a6 01       	movw	r20, r12
    1f9e:	b6 01       	movw	r22, r12
    1fa0:	ce 01       	movw	r24, r28
    1fa2:	01 96       	adiw	r24, 0x01	; 1
    1fa4:	0e 94 e5 06 	call	0xdca	; 0xdca <uECC_vli_mult>
    1fa8:	d1 01       	movw	r26, r2
    1faa:	ed 91       	ld	r30, X+
    1fac:	fc 91       	ld	r31, X
    1fae:	be 01       	movw	r22, r28
    1fb0:	6f 5f       	subi	r22, 0xFF	; 255
    1fb2:	7f 4f       	sbci	r23, 0xFF	; 255
    1fb4:	c5 01       	movw	r24, r10
    1fb6:	09 95       	icall
    1fb8:	97 01       	movw	r18, r14
    1fba:	ae 01       	movw	r20, r28
    1fbc:	4f 59       	subi	r20, 0x9F	; 159
    1fbe:	5f 4f       	sbci	r21, 0xFF	; 255
    1fc0:	b5 01       	movw	r22, r10
    1fc2:	c5 01       	movw	r24, r10
    1fc4:	0e 94 c6 07 	call	0xf8c	; 0xf8c <uECC_vli_modSub>
    1fc8:	97 01       	movw	r18, r14
    1fca:	a5 01       	movw	r20, r10
    1fcc:	b4 01       	movw	r22, r8
    1fce:	ce 01       	movw	r24, r28
    1fd0:	8f 5b       	subi	r24, 0xBF	; 191
    1fd2:	9f 4f       	sbci	r25, 0xFF	; 255
    1fd4:	0e 94 c6 07 	call	0xf8c	; 0xf8c <uECC_vli_modSub>
    1fd8:	f2 01       	movw	r30, r4
    1fda:	20 81       	ld	r18, Z
    1fdc:	ae 01       	movw	r20, r28
    1fde:	4f 5b       	subi	r20, 0xBF	; 191
    1fe0:	5f 4f       	sbci	r21, 0xFF	; 255
    1fe2:	b6 01       	movw	r22, r12
    1fe4:	ce 01       	movw	r24, r28
    1fe6:	01 96       	adiw	r24, 0x01	; 1
    1fe8:	0e 94 e5 06 	call	0xdca	; 0xdca <uECC_vli_mult>
    1fec:	d1 01       	movw	r26, r2
    1fee:	ed 91       	ld	r30, X+
    1ff0:	fc 91       	ld	r31, X
    1ff2:	be 01       	movw	r22, r28
    1ff4:	6f 5f       	subi	r22, 0xFF	; 255
    1ff6:	7f 4f       	sbci	r23, 0xFF	; 255
    1ff8:	c6 01       	movw	r24, r12
    1ffa:	09 95       	icall
    1ffc:	97 01       	movw	r18, r14
    1ffe:	a3 01       	movw	r20, r6
    2000:	b6 01       	movw	r22, r12
    2002:	c6 01       	movw	r24, r12
    2004:	0e 94 c6 07 	call	0xf8c	; 0xf8c <uECC_vli_modSub>
    2008:	f2 01       	movw	r30, r4
    200a:	20 81       	ld	r18, Z
    200c:	ae 01       	movw	r20, r28
    200e:	4f 57       	subi	r20, 0x7F	; 127
    2010:	5f 4f       	sbci	r21, 0xFF	; 255
    2012:	ba 01       	movw	r22, r20
    2014:	ce 01       	movw	r24, r28
    2016:	01 96       	adiw	r24, 0x01	; 1
    2018:	0e 94 e5 06 	call	0xdca	; 0xdca <uECC_vli_mult>
    201c:	d1 01       	movw	r26, r2
    201e:	ed 91       	ld	r30, X+
    2020:	fc 91       	ld	r31, X
    2022:	be 01       	movw	r22, r28
    2024:	6f 5f       	subi	r22, 0xFF	; 255
    2026:	7f 4f       	sbci	r23, 0xFF	; 255
    2028:	ce 01       	movw	r24, r28
    202a:	8f 5b       	subi	r24, 0xBF	; 191
    202c:	9f 4f       	sbci	r25, 0xFF	; 255
    202e:	09 95       	icall
    2030:	97 01       	movw	r18, r14
    2032:	ae 01       	movw	r20, r28
    2034:	4f 59       	subi	r20, 0x9F	; 159
    2036:	5f 4f       	sbci	r21, 0xFF	; 255
    2038:	be 01       	movw	r22, r28
    203a:	6f 5b       	subi	r22, 0xBF	; 191
    203c:	7f 4f       	sbci	r23, 0xFF	; 255
    203e:	cb 01       	movw	r24, r22
    2040:	0e 94 c6 07 	call	0xf8c	; 0xf8c <uECC_vli_modSub>
    2044:	97 01       	movw	r18, r14
    2046:	a4 01       	movw	r20, r8
    2048:	be 01       	movw	r22, r28
    204a:	6f 5b       	subi	r22, 0xBF	; 191
    204c:	7f 4f       	sbci	r23, 0xFF	; 255
    204e:	ce 01       	movw	r24, r28
    2050:	8f 59       	subi	r24, 0x9F	; 159
    2052:	9f 4f       	sbci	r25, 0xFF	; 255
    2054:	0e 94 c6 07 	call	0xf8c	; 0xf8c <uECC_vli_modSub>
    2058:	f2 01       	movw	r30, r4
    205a:	20 81       	ld	r18, Z
    205c:	ae 01       	movw	r20, r28
    205e:	4f 57       	subi	r20, 0x7F	; 127
    2060:	5f 4f       	sbci	r21, 0xFF	; 255
    2062:	be 01       	movw	r22, r28
    2064:	6f 59       	subi	r22, 0x9F	; 159
    2066:	7f 4f       	sbci	r23, 0xFF	; 255
    2068:	ce 01       	movw	r24, r28
    206a:	01 96       	adiw	r24, 0x01	; 1
    206c:	0e 94 e5 06 	call	0xdca	; 0xdca <uECC_vli_mult>
    2070:	d1 01       	movw	r26, r2
    2072:	ed 91       	ld	r30, X+
    2074:	fc 91       	ld	r31, X
    2076:	be 01       	movw	r22, r28
    2078:	6f 5f       	subi	r22, 0xFF	; 255
    207a:	7f 4f       	sbci	r23, 0xFF	; 255
    207c:	ce 01       	movw	r24, r28
    207e:	8f 59       	subi	r24, 0x9F	; 159
    2080:	9f 4f       	sbci	r25, 0xFF	; 255
    2082:	09 95       	icall
    2084:	97 01       	movw	r18, r14
    2086:	a3 01       	movw	r20, r6
    2088:	be 01       	movw	r22, r28
    208a:	6f 59       	subi	r22, 0x9F	; 159
    208c:	7f 4f       	sbci	r23, 0xFF	; 255
    208e:	c3 01       	movw	r24, r6
    2090:	0e 94 c6 07 	call	0xf8c	; 0xf8c <uECC_vli_modSub>
    2094:	41 2f       	mov	r20, r17
    2096:	be 01       	movw	r22, r28
    2098:	6f 5b       	subi	r22, 0xBF	; 191
    209a:	7f 4f       	sbci	r23, 0xFF	; 255
    209c:	c4 01       	movw	r24, r8
    209e:	0e 94 87 04 	call	0x90e	; 0x90e <uECC_vli_set>
    20a2:	c0 56       	subi	r28, 0x60	; 96
    20a4:	df 4f       	sbci	r29, 0xFF	; 255
    20a6:	0f b6       	in	r0, 0x3f	; 63
    20a8:	f8 94       	cli
    20aa:	de bf       	out	0x3e, r29	; 62
    20ac:	0f be       	out	0x3f, r0	; 63
    20ae:	cd bf       	out	0x3d, r28	; 61
    20b0:	df 91       	pop	r29
    20b2:	cf 91       	pop	r28
    20b4:	1f 91       	pop	r17
    20b6:	0f 91       	pop	r16
    20b8:	ff 90       	pop	r15
    20ba:	ef 90       	pop	r14
    20bc:	df 90       	pop	r13
    20be:	cf 90       	pop	r12
    20c0:	bf 90       	pop	r11
    20c2:	af 90       	pop	r10
    20c4:	9f 90       	pop	r9
    20c6:	8f 90       	pop	r8
    20c8:	7f 90       	pop	r7
    20ca:	6f 90       	pop	r6
    20cc:	5f 90       	pop	r5
    20ce:	4f 90       	pop	r4
    20d0:	3f 90       	pop	r3
    20d2:	2f 90       	pop	r2
    20d4:	08 95       	ret

000020d6 <regularize_k>:
    20d6:	9f 92       	push	r9
    20d8:	af 92       	push	r10
    20da:	bf 92       	push	r11
    20dc:	cf 92       	push	r12
    20de:	df 92       	push	r13
    20e0:	ef 92       	push	r14
    20e2:	ff 92       	push	r15
    20e4:	0f 93       	push	r16
    20e6:	1f 93       	push	r17
    20e8:	cf 93       	push	r28
    20ea:	df 93       	push	r29
    20ec:	6b 01       	movw	r12, r22
    20ee:	5a 01       	movw	r10, r20
    20f0:	f9 01       	movw	r30, r18
    20f2:	e2 80       	ldd	r14, Z+2	; 0x02
    20f4:	f3 80       	ldd	r15, Z+3	; 0x03
    20f6:	e7 01       	movw	r28, r14
    20f8:	27 96       	adiw	r28, 0x07	; 7
    20fa:	d7 fd       	sbrc	r29, 7
    20fc:	47 c0       	rjmp	.+142    	; 0x218c <regularize_k+0xb6>
    20fe:	d5 95       	asr	r29
    2100:	c7 95       	ror	r28
    2102:	d5 95       	asr	r29
    2104:	c7 95       	ror	r28
    2106:	d5 95       	asr	r29
    2108:	c7 95       	ror	r28
    210a:	89 01       	movw	r16, r18
    210c:	0c 5d       	subi	r16, 0xDC	; 220
    210e:	1f 4f       	sbci	r17, 0xFF	; 255
    2110:	2c 2f       	mov	r18, r28
    2112:	a8 01       	movw	r20, r16
    2114:	bc 01       	movw	r22, r24
    2116:	c6 01       	movw	r24, r12
    2118:	0e 94 43 05 	call	0xa86	; 0xa86 <uECC_vli_add>
    211c:	98 2e       	mov	r9, r24
    211e:	81 11       	cpse	r24, r1
    2120:	32 c0       	rjmp	.+100    	; 0x2186 <regularize_k+0xb0>
    2122:	28 e0       	ldi	r18, 0x08	; 8
    2124:	c2 02       	muls	r28, r18
    2126:	c0 01       	movw	r24, r0
    2128:	11 24       	eor	r1, r1
    212a:	e8 16       	cp	r14, r24
    212c:	f9 06       	cpc	r15, r25
    212e:	c4 f4       	brge	.+48     	; 0x2160 <regularize_k+0x8a>
    2130:	f7 01       	movw	r30, r14
    2132:	f5 95       	asr	r31
    2134:	e7 95       	ror	r30
    2136:	f5 95       	asr	r31
    2138:	e7 95       	ror	r30
    213a:	f5 95       	asr	r31
    213c:	e7 95       	ror	r30
    213e:	ec 0d       	add	r30, r12
    2140:	fd 1d       	adc	r31, r13
    2142:	37 e0       	ldi	r19, 0x07	; 7
    2144:	e3 22       	and	r14, r19
    2146:	ff 24       	eor	r15, r15
    2148:	81 e0       	ldi	r24, 0x01	; 1
    214a:	90 e0       	ldi	r25, 0x00	; 0
    214c:	01 c0       	rjmp	.+2      	; 0x2150 <regularize_k+0x7a>
    214e:	88 0f       	add	r24, r24
    2150:	ea 94       	dec	r14
    2152:	ea f7       	brpl	.-6      	; 0x214e <regularize_k+0x78>
    2154:	90 81       	ld	r25, Z
    2156:	89 23       	and	r24, r25
    2158:	99 24       	eor	r9, r9
    215a:	93 94       	inc	r9
    215c:	88 23       	and	r24, r24
    215e:	c1 f0       	breq	.+48     	; 0x2190 <regularize_k+0xba>
    2160:	2c 2f       	mov	r18, r28
    2162:	a8 01       	movw	r20, r16
    2164:	b6 01       	movw	r22, r12
    2166:	c5 01       	movw	r24, r10
    2168:	0e 94 43 05 	call	0xa86	; 0xa86 <uECC_vli_add>
    216c:	89 2d       	mov	r24, r9
    216e:	df 91       	pop	r29
    2170:	cf 91       	pop	r28
    2172:	1f 91       	pop	r17
    2174:	0f 91       	pop	r16
    2176:	ff 90       	pop	r15
    2178:	ef 90       	pop	r14
    217a:	df 90       	pop	r13
    217c:	cf 90       	pop	r12
    217e:	bf 90       	pop	r11
    2180:	af 90       	pop	r10
    2182:	9f 90       	pop	r9
    2184:	08 95       	ret
    2186:	99 24       	eor	r9, r9
    2188:	93 94       	inc	r9
    218a:	ea cf       	rjmp	.-44     	; 0x2160 <regularize_k+0x8a>
    218c:	27 96       	adiw	r28, 0x07	; 7
    218e:	b7 cf       	rjmp	.-146    	; 0x20fe <regularize_k+0x28>
    2190:	91 2c       	mov	r9, r1
    2192:	e6 cf       	rjmp	.-52     	; 0x2160 <regularize_k+0x8a>

00002194 <uECC_generate_random_int>:
    2194:	7f 92       	push	r7
    2196:	8f 92       	push	r8
    2198:	9f 92       	push	r9
    219a:	af 92       	push	r10
    219c:	bf 92       	push	r11
    219e:	cf 92       	push	r12
    21a0:	df 92       	push	r13
    21a2:	ef 92       	push	r14
    21a4:	ff 92       	push	r15
    21a6:	0f 93       	push	r16
    21a8:	1f 93       	push	r17
    21aa:	cf 93       	push	r28
    21ac:	df 93       	push	r29
    21ae:	8c 01       	movw	r16, r24
    21b0:	5b 01       	movw	r10, r22
    21b2:	84 2e       	mov	r8, r20
    21b4:	64 2f       	mov	r22, r20
    21b6:	c5 01       	movw	r24, r10
    21b8:	0e 94 21 07 	call	0xe42	; 0xe42 <uECC_vli_numBits>
    21bc:	e0 91 2e 05 	lds	r30, 0x052E	; 0x80052e <g_rng_function>
    21c0:	f0 91 2f 05 	lds	r31, 0x052F	; 0x80052f <g_rng_function+0x1>
    21c4:	30 97       	sbiw	r30, 0x00	; 0
    21c6:	09 f4       	brne	.+2      	; 0x21ca <uECC_generate_random_int+0x36>
    21c8:	43 c0       	rjmp	.+134    	; 0x2250 <uECC_generate_random_int+0xbc>
    21ca:	c8 2c       	mov	r12, r8
    21cc:	08 2c       	mov	r0, r8
    21ce:	00 0c       	add	r0, r0
    21d0:	dd 08       	sbc	r13, r13
    21d2:	96 01       	movw	r18, r12
    21d4:	22 0f       	add	r18, r18
    21d6:	33 1f       	adc	r19, r19
    21d8:	22 0f       	add	r18, r18
    21da:	33 1f       	adc	r19, r19
    21dc:	22 0f       	add	r18, r18
    21de:	33 1f       	adc	r19, r19
    21e0:	28 1b       	sub	r18, r24
    21e2:	39 0b       	sbc	r19, r25
    21e4:	8f ef       	ldi	r24, 0xFF	; 255
    21e6:	90 e0       	ldi	r25, 0x00	; 0
    21e8:	02 c0       	rjmp	.+4      	; 0x21ee <uECC_generate_random_int+0x5a>
    21ea:	95 95       	asr	r25
    21ec:	87 95       	ror	r24
    21ee:	2a 95       	dec	r18
    21f0:	e2 f7       	brpl	.-8      	; 0x21ea <uECC_generate_random_int+0x56>
    21f2:	78 2e       	mov	r7, r24
    21f4:	50 e4       	ldi	r21, 0x40	; 64
    21f6:	95 2e       	mov	r9, r21
    21f8:	76 01       	movw	r14, r12
    21fa:	81 e0       	ldi	r24, 0x01	; 1
    21fc:	e8 1a       	sub	r14, r24
    21fe:	f1 08       	sbc	r15, r1
    2200:	e0 0e       	add	r14, r16
    2202:	f1 1e       	adc	r15, r17
    2204:	cf ef       	ldi	r28, 0xFF	; 255
    2206:	c8 0d       	add	r28, r8
    2208:	d0 e0       	ldi	r29, 0x00	; 0
    220a:	21 96       	adiw	r28, 0x01	; 1
    220c:	c0 0f       	add	r28, r16
    220e:	d1 1f       	adc	r29, r17
    2210:	b6 01       	movw	r22, r12
    2212:	c8 01       	movw	r24, r16
    2214:	09 95       	icall
    2216:	89 2b       	or	r24, r25
    2218:	d9 f0       	breq	.+54     	; 0x2250 <uECC_generate_random_int+0xbc>
    221a:	f7 01       	movw	r30, r14
    221c:	80 81       	ld	r24, Z
    221e:	87 21       	and	r24, r7
    2220:	80 83       	st	Z, r24
    2222:	18 14       	cp	r1, r8
    2224:	4c f4       	brge	.+18     	; 0x2238 <uECC_generate_random_int+0xa4>
    2226:	f8 01       	movw	r30, r16
    2228:	80 e0       	ldi	r24, 0x00	; 0
    222a:	91 91       	ld	r25, Z+
    222c:	89 2b       	or	r24, r25
    222e:	ec 17       	cp	r30, r28
    2230:	fd 07       	cpc	r31, r29
    2232:	d9 f7       	brne	.-10     	; 0x222a <uECC_generate_random_int+0x96>
    2234:	81 11       	cpse	r24, r1
    2236:	1c c0       	rjmp	.+56     	; 0x2270 <uECC_generate_random_int+0xdc>
    2238:	9a 94       	dec	r9
    223a:	99 20       	and	r9, r9
    223c:	49 f0       	breq	.+18     	; 0x2250 <uECC_generate_random_int+0xbc>
    223e:	e0 91 2e 05 	lds	r30, 0x052E	; 0x80052e <g_rng_function>
    2242:	f0 91 2f 05 	lds	r31, 0x052F	; 0x80052f <g_rng_function+0x1>
    2246:	b6 01       	movw	r22, r12
    2248:	c8 01       	movw	r24, r16
    224a:	09 95       	icall
    224c:	89 2b       	or	r24, r25
    224e:	29 f7       	brne	.-54     	; 0x221a <uECC_generate_random_int+0x86>
    2250:	80 e0       	ldi	r24, 0x00	; 0
    2252:	90 e0       	ldi	r25, 0x00	; 0
    2254:	df 91       	pop	r29
    2256:	cf 91       	pop	r28
    2258:	1f 91       	pop	r17
    225a:	0f 91       	pop	r16
    225c:	ff 90       	pop	r15
    225e:	ef 90       	pop	r14
    2260:	df 90       	pop	r13
    2262:	cf 90       	pop	r12
    2264:	bf 90       	pop	r11
    2266:	af 90       	pop	r10
    2268:	9f 90       	pop	r9
    226a:	8f 90       	pop	r8
    226c:	7f 90       	pop	r7
    226e:	08 95       	ret
    2270:	48 2d       	mov	r20, r8
    2272:	b8 01       	movw	r22, r16
    2274:	c5 01       	movw	r24, r10
    2276:	0e 94 5c 07 	call	0xeb8	; 0xeb8 <uECC_vli_cmp>
    227a:	81 30       	cpi	r24, 0x01	; 1
    227c:	e9 f6       	brne	.-70     	; 0x2238 <uECC_generate_random_int+0xa4>
    227e:	81 e0       	ldi	r24, 0x01	; 1
    2280:	90 e0       	ldi	r25, 0x00	; 0
    2282:	e8 cf       	rjmp	.-48     	; 0x2254 <uECC_generate_random_int+0xc0>

00002284 <bits2int>:
    2284:	8f 92       	push	r8
    2286:	9f 92       	push	r9
    2288:	af 92       	push	r10
    228a:	bf 92       	push	r11
    228c:	cf 92       	push	r12
    228e:	df 92       	push	r13
    2290:	ef 92       	push	r14
    2292:	ff 92       	push	r15
    2294:	0f 93       	push	r16
    2296:	1f 93       	push	r17
    2298:	cf 93       	push	r28
    229a:	df 93       	push	r29
    229c:	8c 01       	movw	r16, r24
    229e:	4b 01       	movw	r8, r22
    22a0:	69 01       	movw	r12, r18
    22a2:	f9 01       	movw	r30, r18
    22a4:	82 81       	ldd	r24, Z+2	; 0x02
    22a6:	93 81       	ldd	r25, Z+3	; 0x03
    22a8:	5c 01       	movw	r10, r24
    22aa:	f7 e0       	ldi	r31, 0x07	; 7
    22ac:	af 0e       	add	r10, r31
    22ae:	b1 1c       	adc	r11, r1
    22b0:	b7 fc       	sbrc	r11, 7
    22b2:	a5 c0       	rjmp	.+330    	; 0x23fe <bits2int+0x17a>
    22b4:	b5 94       	asr	r11
    22b6:	a7 94       	ror	r10
    22b8:	b5 94       	asr	r11
    22ba:	a7 94       	ror	r10
    22bc:	b5 94       	asr	r11
    22be:	a7 94       	ror	r10
    22c0:	ca 2d       	mov	r28, r10
    22c2:	db 2d       	mov	r29, r11
    22c4:	7e 01       	movw	r14, r28
    22c6:	4c 17       	cp	r20, r28
    22c8:	5d 07       	cpc	r21, r29
    22ca:	08 f4       	brcc	.+2      	; 0x22ce <bits2int+0x4a>
    22cc:	7a 01       	movw	r14, r20
    22ce:	6a 2d       	mov	r22, r10
    22d0:	c8 01       	movw	r24, r16
    22d2:	0e 94 60 04 	call	0x8c0	; 0x8c0 <uECC_vli_clear>
    22d6:	1e 14       	cp	r1, r14
    22d8:	1f 04       	cpc	r1, r15
    22da:	dc f4       	brge	.+54     	; 0x2312 <bits2int+0x8e>
    22dc:	97 01       	movw	r18, r14
    22de:	21 50       	subi	r18, 0x01	; 1
    22e0:	31 09       	sbc	r19, r1
    22e2:	60 e0       	ldi	r22, 0x00	; 0
    22e4:	70 e0       	ldi	r23, 0x00	; 0
    22e6:	40 e0       	ldi	r20, 0x00	; 0
    22e8:	80 e0       	ldi	r24, 0x00	; 0
    22ea:	90 e0       	ldi	r25, 0x00	; 0
    22ec:	f9 01       	movw	r30, r18
    22ee:	e6 1b       	sub	r30, r22
    22f0:	f7 0b       	sbc	r31, r23
    22f2:	e8 0d       	add	r30, r8
    22f4:	f9 1d       	adc	r31, r9
    22f6:	50 81       	ld	r21, Z
    22f8:	f8 01       	movw	r30, r16
    22fa:	e8 0f       	add	r30, r24
    22fc:	f9 1f       	adc	r31, r25
    22fe:	50 83       	st	Z, r21
    2300:	4f 5f       	subi	r20, 0xFF	; 255
    2302:	84 2f       	mov	r24, r20
    2304:	04 2e       	mov	r0, r20
    2306:	00 0c       	add	r0, r0
    2308:	99 0b       	sbc	r25, r25
    230a:	bc 01       	movw	r22, r24
    230c:	8e 15       	cp	r24, r14
    230e:	9f 05       	cpc	r25, r15
    2310:	6c f3       	brlt	.-38     	; 0x22ec <bits2int+0x68>
    2312:	ee 0c       	add	r14, r14
    2314:	ff 1c       	adc	r15, r15
    2316:	ee 0c       	add	r14, r14
    2318:	ff 1c       	adc	r15, r15
    231a:	ee 0c       	add	r14, r14
    231c:	ff 1c       	adc	r15, r15
    231e:	f6 01       	movw	r30, r12
    2320:	82 81       	ldd	r24, Z+2	; 0x02
    2322:	93 81       	ldd	r25, Z+3	; 0x03
    2324:	8e 15       	cp	r24, r14
    2326:	9f 05       	cpc	r25, r15
    2328:	08 f0       	brcs	.+2      	; 0x232c <bits2int+0xa8>
    232a:	5c c0       	rjmp	.+184    	; 0x23e4 <bits2int+0x160>
    232c:	e8 1a       	sub	r14, r24
    232e:	f9 0a       	sbc	r15, r25
    2330:	c0 0f       	add	r28, r16
    2332:	d1 1f       	adc	r29, r17
    2334:	0c 17       	cp	r16, r28
    2336:	1d 07       	cpc	r17, r29
    2338:	d0 f4       	brcc	.+52     	; 0x236e <bits2int+0xea>
    233a:	48 e0       	ldi	r20, 0x08	; 8
    233c:	50 e0       	ldi	r21, 0x00	; 0
    233e:	4e 19       	sub	r20, r14
    2340:	5f 09       	sbc	r21, r15
    2342:	60 e0       	ldi	r22, 0x00	; 0
    2344:	9a 91       	ld	r25, -Y
    2346:	89 2f       	mov	r24, r25
    2348:	90 e0       	ldi	r25, 0x00	; 0
    234a:	9c 01       	movw	r18, r24
    234c:	0e 2c       	mov	r0, r14
    234e:	02 c0       	rjmp	.+4      	; 0x2354 <bits2int+0xd0>
    2350:	35 95       	asr	r19
    2352:	27 95       	ror	r18
    2354:	0a 94       	dec	r0
    2356:	e2 f7       	brpl	.-8      	; 0x2350 <bits2int+0xcc>
    2358:	26 2b       	or	r18, r22
    235a:	28 83       	st	Y, r18
    235c:	04 2e       	mov	r0, r20
    235e:	01 c0       	rjmp	.+2      	; 0x2362 <bits2int+0xde>
    2360:	88 0f       	add	r24, r24
    2362:	0a 94       	dec	r0
    2364:	ea f7       	brpl	.-6      	; 0x2360 <bits2int+0xdc>
    2366:	68 2f       	mov	r22, r24
    2368:	c0 17       	cp	r28, r16
    236a:	d1 07       	cpc	r29, r17
    236c:	59 f7       	brne	.-42     	; 0x2344 <bits2int+0xc0>
    236e:	a6 01       	movw	r20, r12
    2370:	4c 5d       	subi	r20, 0xDC	; 220
    2372:	5f 4f       	sbci	r21, 0xFF	; 255
    2374:	2f ef       	ldi	r18, 0xFF	; 255
    2376:	2a 0d       	add	r18, r10
    2378:	27 fd       	sbrc	r18, 7
    237a:	23 c0       	rjmp	.+70     	; 0x23c2 <bits2int+0x13e>
    237c:	82 2f       	mov	r24, r18
    237e:	02 2e       	mov	r0, r18
    2380:	00 0c       	add	r0, r0
    2382:	99 0b       	sbc	r25, r25
    2384:	fa 01       	movw	r30, r20
    2386:	e8 0f       	add	r30, r24
    2388:	f9 1f       	adc	r31, r25
    238a:	30 81       	ld	r19, Z
    238c:	f8 01       	movw	r30, r16
    238e:	e8 0f       	add	r30, r24
    2390:	f9 1f       	adc	r31, r25
    2392:	80 81       	ld	r24, Z
    2394:	83 17       	cp	r24, r19
    2396:	30 f1       	brcs	.+76     	; 0x23e4 <bits2int+0x160>
    2398:	38 17       	cp	r19, r24
    239a:	88 f4       	brcc	.+34     	; 0x23be <bits2int+0x13a>
    239c:	12 c0       	rjmp	.+36     	; 0x23c2 <bits2int+0x13e>
    239e:	82 2f       	mov	r24, r18
    23a0:	02 2e       	mov	r0, r18
    23a2:	00 0c       	add	r0, r0
    23a4:	99 0b       	sbc	r25, r25
    23a6:	fa 01       	movw	r30, r20
    23a8:	e8 0f       	add	r30, r24
    23aa:	f9 1f       	adc	r31, r25
    23ac:	30 81       	ld	r19, Z
    23ae:	f8 01       	movw	r30, r16
    23b0:	e8 0f       	add	r30, r24
    23b2:	f9 1f       	adc	r31, r25
    23b4:	80 81       	ld	r24, Z
    23b6:	83 17       	cp	r24, r19
    23b8:	a8 f0       	brcs	.+42     	; 0x23e4 <bits2int+0x160>
    23ba:	38 17       	cp	r19, r24
    23bc:	10 f0       	brcs	.+4      	; 0x23c2 <bits2int+0x13e>
    23be:	21 50       	subi	r18, 0x01	; 1
    23c0:	70 f7       	brcc	.-36     	; 0x239e <bits2int+0x11a>
    23c2:	2a 2d       	mov	r18, r10
    23c4:	b8 01       	movw	r22, r16
    23c6:	c8 01       	movw	r24, r16
    23c8:	df 91       	pop	r29
    23ca:	cf 91       	pop	r28
    23cc:	1f 91       	pop	r17
    23ce:	0f 91       	pop	r16
    23d0:	ff 90       	pop	r15
    23d2:	ef 90       	pop	r14
    23d4:	df 90       	pop	r13
    23d6:	cf 90       	pop	r12
    23d8:	bf 90       	pop	r11
    23da:	af 90       	pop	r10
    23dc:	9f 90       	pop	r9
    23de:	8f 90       	pop	r8
    23e0:	0c 94 14 06 	jmp	0xc28	; 0xc28 <uECC_vli_sub>
    23e4:	df 91       	pop	r29
    23e6:	cf 91       	pop	r28
    23e8:	1f 91       	pop	r17
    23ea:	0f 91       	pop	r16
    23ec:	ff 90       	pop	r15
    23ee:	ef 90       	pop	r14
    23f0:	df 90       	pop	r13
    23f2:	cf 90       	pop	r12
    23f4:	bf 90       	pop	r11
    23f6:	af 90       	pop	r10
    23f8:	9f 90       	pop	r9
    23fa:	8f 90       	pop	r8
    23fc:	08 95       	ret
    23fe:	5c 01       	movw	r10, r24
    2400:	2e e0       	ldi	r18, 0x0E	; 14
    2402:	a2 0e       	add	r10, r18
    2404:	b1 1c       	adc	r11, r1
    2406:	56 cf       	rjmp	.-340    	; 0x22b4 <bits2int+0x30>

00002408 <vli_modInv_update>:
    2408:	0f 93       	push	r16
    240a:	1f 93       	push	r17
    240c:	cf 93       	push	r28
    240e:	df 93       	push	r29
    2410:	fc 01       	movw	r30, r24
    2412:	20 81       	ld	r18, Z
    2414:	20 fd       	sbrc	r18, 0
    2416:	07 c0       	rjmp	.+14     	; 0x2426 <vli_modInv_update+0x1e>
    2418:	64 2f       	mov	r22, r20
    241a:	df 91       	pop	r29
    241c:	cf 91       	pop	r28
    241e:	1f 91       	pop	r17
    2420:	0f 91       	pop	r16
    2422:	0c 94 d4 04 	jmp	0x9a8	; 0x9a8 <uECC_vli_rshift1>
    2426:	c4 2f       	mov	r28, r20
    2428:	ab 01       	movw	r20, r22
    242a:	8c 01       	movw	r16, r24
    242c:	2c 2f       	mov	r18, r28
    242e:	bc 01       	movw	r22, r24
    2430:	0e 94 43 05 	call	0xa86	; 0xa86 <uECC_vli_add>
    2434:	d8 2f       	mov	r29, r24
    2436:	6c 2f       	mov	r22, r28
    2438:	c8 01       	movw	r24, r16
    243a:	0e 94 d4 04 	call	0x9a8	; 0x9a8 <uECC_vli_rshift1>
    243e:	dd 23       	and	r29, r29
    2440:	49 f0       	breq	.+18     	; 0x2454 <vli_modInv_update+0x4c>
    2442:	ec 2f       	mov	r30, r28
    2444:	cc 0f       	add	r28, r28
    2446:	ff 0b       	sbc	r31, r31
    2448:	31 97       	sbiw	r30, 0x01	; 1
    244a:	e0 0f       	add	r30, r16
    244c:	f1 1f       	adc	r31, r17
    244e:	80 81       	ld	r24, Z
    2450:	80 68       	ori	r24, 0x80	; 128
    2452:	80 83       	st	Z, r24
    2454:	df 91       	pop	r29
    2456:	cf 91       	pop	r28
    2458:	1f 91       	pop	r17
    245a:	0f 91       	pop	r16
    245c:	08 95       	ret

0000245e <uECC_vli_modInv>:
    245e:	4f 92       	push	r4
    2460:	5f 92       	push	r5
    2462:	6f 92       	push	r6
    2464:	7f 92       	push	r7
    2466:	8f 92       	push	r8
    2468:	9f 92       	push	r9
    246a:	af 92       	push	r10
    246c:	bf 92       	push	r11
    246e:	cf 92       	push	r12
    2470:	df 92       	push	r13
    2472:	ef 92       	push	r14
    2474:	ff 92       	push	r15
    2476:	0f 93       	push	r16
    2478:	1f 93       	push	r17
    247a:	cf 93       	push	r28
    247c:	df 93       	push	r29
    247e:	cd b7       	in	r28, 0x3d	; 61
    2480:	de b7       	in	r29, 0x3e	; 62
    2482:	c0 58       	subi	r28, 0x80	; 128
    2484:	d1 09       	sbc	r29, r1
    2486:	0f b6       	in	r0, 0x3f	; 63
    2488:	f8 94       	cli
    248a:	de bf       	out	0x3e, r29	; 62
    248c:	0f be       	out	0x3f, r0	; 63
    248e:	cd bf       	out	0x3d, r28	; 61
    2490:	5c 01       	movw	r10, r24
    2492:	8a 01       	movw	r16, r20
    2494:	52 2e       	mov	r5, r18
    2496:	12 16       	cp	r1, r18
    2498:	0c f0       	brlt	.+2      	; 0x249c <uECC_vli_modInv+0x3e>
    249a:	3d c1       	rjmp	.+634    	; 0x2716 <uECC_vli_modInv+0x2b8>
    249c:	fb 01       	movw	r30, r22
    249e:	44 24       	eor	r4, r4
    24a0:	4a 94       	dec	r4
    24a2:	42 0e       	add	r4, r18
    24a4:	24 2d       	mov	r18, r4
    24a6:	30 e0       	ldi	r19, 0x00	; 0
    24a8:	2f 5f       	subi	r18, 0xFF	; 255
    24aa:	3f 4f       	sbci	r19, 0xFF	; 255
    24ac:	26 0f       	add	r18, r22
    24ae:	37 1f       	adc	r19, r23
    24b0:	80 e0       	ldi	r24, 0x00	; 0
    24b2:	91 91       	ld	r25, Z+
    24b4:	89 2b       	or	r24, r25
    24b6:	2e 17       	cp	r18, r30
    24b8:	3f 07       	cpc	r19, r31
    24ba:	d9 f7       	brne	.-10     	; 0x24b2 <uECC_vli_modInv+0x54>
    24bc:	88 23       	and	r24, r24
    24be:	09 f4       	brne	.+2      	; 0x24c2 <uECC_vli_modInv+0x64>
    24c0:	2a c1       	rjmp	.+596    	; 0x2716 <uECC_vli_modInv+0x2b8>
    24c2:	45 2d       	mov	r20, r5
    24c4:	ce 01       	movw	r24, r28
    24c6:	8f 59       	subi	r24, 0x9F	; 159
    24c8:	9f 4f       	sbci	r25, 0xFF	; 255
    24ca:	0e 94 87 04 	call	0x90e	; 0x90e <uECC_vli_set>
    24ce:	45 2d       	mov	r20, r5
    24d0:	b8 01       	movw	r22, r16
    24d2:	ce 01       	movw	r24, r28
    24d4:	8f 5b       	subi	r24, 0xBF	; 191
    24d6:	9f 4f       	sbci	r25, 0xFF	; 255
    24d8:	0e 94 87 04 	call	0x90e	; 0x90e <uECC_vli_set>
    24dc:	65 2d       	mov	r22, r5
    24de:	ce 01       	movw	r24, r28
    24e0:	81 96       	adiw	r24, 0x21	; 33
    24e2:	0e 94 60 04 	call	0x8c0	; 0x8c0 <uECC_vli_clear>
    24e6:	81 e0       	ldi	r24, 0x01	; 1
    24e8:	89 a3       	std	Y+33, r24	; 0x21
    24ea:	65 2d       	mov	r22, r5
    24ec:	ce 01       	movw	r24, r28
    24ee:	01 96       	adiw	r24, 0x01	; 1
    24f0:	0e 94 60 04 	call	0x8c0	; 0x8c0 <uECC_vli_clear>
    24f4:	64 2c       	mov	r6, r4
    24f6:	04 2c       	mov	r0, r4
    24f8:	00 0c       	add	r0, r0
    24fa:	77 08       	sbc	r7, r7
    24fc:	81 e6       	ldi	r24, 0x61	; 97
    24fe:	c8 2e       	mov	r12, r24
    2500:	d1 2c       	mov	r13, r1
    2502:	cc 0e       	add	r12, r28
    2504:	dd 1e       	adc	r13, r29
    2506:	c6 0c       	add	r12, r6
    2508:	d7 1c       	adc	r13, r7
    250a:	91 e4       	ldi	r25, 0x41	; 65
    250c:	e9 2e       	mov	r14, r25
    250e:	f1 2c       	mov	r15, r1
    2510:	ec 0e       	add	r14, r28
    2512:	fd 1e       	adc	r15, r29
    2514:	e6 0c       	add	r14, r6
    2516:	f7 1c       	adc	r15, r7
    2518:	88 24       	eor	r8, r8
    251a:	83 94       	inc	r8
    251c:	91 2c       	mov	r9, r1
    251e:	8c 0e       	add	r8, r28
    2520:	9d 1e       	adc	r9, r29
    2522:	86 0c       	add	r8, r6
    2524:	97 1c       	adc	r9, r7
    2526:	81 e2       	ldi	r24, 0x21	; 33
    2528:	90 e0       	ldi	r25, 0x00	; 0
    252a:	8c 0f       	add	r24, r28
    252c:	9d 1f       	adc	r25, r29
    252e:	68 0e       	add	r6, r24
    2530:	79 1e       	adc	r7, r25
    2532:	f6 01       	movw	r30, r12
    2534:	90 81       	ld	r25, Z
    2536:	f7 01       	movw	r30, r14
    2538:	80 81       	ld	r24, Z
    253a:	89 17       	cp	r24, r25
    253c:	e8 f1       	brcs	.+122    	; 0x25b8 <uECC_vli_modInv+0x15a>
    253e:	98 17       	cp	r25, r24
    2540:	08 f4       	brcc	.+2      	; 0x2544 <uECC_vli_modInv+0xe6>
    2542:	8c c0       	rjmp	.+280    	; 0x265c <uECC_vli_modInv+0x1fe>
    2544:	24 2d       	mov	r18, r4
    2546:	17 c0       	rjmp	.+46     	; 0x2576 <uECC_vli_modInv+0x118>
    2548:	82 2f       	mov	r24, r18
    254a:	02 2e       	mov	r0, r18
    254c:	00 0c       	add	r0, r0
    254e:	99 0b       	sbc	r25, r25
    2550:	e1 e6       	ldi	r30, 0x61	; 97
    2552:	f0 e0       	ldi	r31, 0x00	; 0
    2554:	ec 0f       	add	r30, r28
    2556:	fd 1f       	adc	r31, r29
    2558:	e8 0f       	add	r30, r24
    255a:	f9 1f       	adc	r31, r25
    255c:	30 81       	ld	r19, Z
    255e:	e1 e4       	ldi	r30, 0x41	; 65
    2560:	f0 e0       	ldi	r31, 0x00	; 0
    2562:	ec 0f       	add	r30, r28
    2564:	fd 1f       	adc	r31, r29
    2566:	e8 0f       	add	r30, r24
    2568:	f9 1f       	adc	r31, r25
    256a:	80 81       	ld	r24, Z
    256c:	83 17       	cp	r24, r19
    256e:	20 f1       	brcs	.+72     	; 0x25b8 <uECC_vli_modInv+0x15a>
    2570:	38 17       	cp	r19, r24
    2572:	08 f4       	brcc	.+2      	; 0x2576 <uECC_vli_modInv+0x118>
    2574:	73 c0       	rjmp	.+230    	; 0x265c <uECC_vli_modInv+0x1fe>
    2576:	21 50       	subi	r18, 0x01	; 1
    2578:	38 f7       	brcc	.-50     	; 0x2548 <uECC_vli_modInv+0xea>
    257a:	45 2d       	mov	r20, r5
    257c:	be 01       	movw	r22, r28
    257e:	6f 5d       	subi	r22, 0xDF	; 223
    2580:	7f 4f       	sbci	r23, 0xFF	; 255
    2582:	c5 01       	movw	r24, r10
    2584:	0e 94 87 04 	call	0x90e	; 0x90e <uECC_vli_set>
    2588:	c0 58       	subi	r28, 0x80	; 128
    258a:	df 4f       	sbci	r29, 0xFF	; 255
    258c:	0f b6       	in	r0, 0x3f	; 63
    258e:	f8 94       	cli
    2590:	de bf       	out	0x3e, r29	; 62
    2592:	0f be       	out	0x3f, r0	; 63
    2594:	cd bf       	out	0x3d, r28	; 61
    2596:	df 91       	pop	r29
    2598:	cf 91       	pop	r28
    259a:	1f 91       	pop	r17
    259c:	0f 91       	pop	r16
    259e:	ff 90       	pop	r15
    25a0:	ef 90       	pop	r14
    25a2:	df 90       	pop	r13
    25a4:	cf 90       	pop	r12
    25a6:	bf 90       	pop	r11
    25a8:	af 90       	pop	r10
    25aa:	9f 90       	pop	r9
    25ac:	8f 90       	pop	r8
    25ae:	7f 90       	pop	r7
    25b0:	6f 90       	pop	r6
    25b2:	5f 90       	pop	r5
    25b4:	4f 90       	pop	r4
    25b6:	08 95       	ret
    25b8:	91 e0       	ldi	r25, 0x01	; 1
    25ba:	a2 96       	adiw	r28, 0x22	; 34
    25bc:	8f ad       	ldd	r24, Y+63	; 0x3f
    25be:	a2 97       	sbiw	r28, 0x22	; 34
    25c0:	80 ff       	sbrs	r24, 0
    25c2:	52 c0       	rjmp	.+164    	; 0x2668 <uECC_vli_modInv+0x20a>
    25c4:	22 96       	adiw	r28, 0x02	; 2
    25c6:	8f ad       	ldd	r24, Y+63	; 0x3f
    25c8:	22 97       	sbiw	r28, 0x02	; 2
    25ca:	80 ff       	sbrs	r24, 0
    25cc:	54 c0       	rjmp	.+168    	; 0x2676 <uECC_vli_modInv+0x218>
    25ce:	25 2d       	mov	r18, r5
    25d0:	ae 01       	movw	r20, r28
    25d2:	91 30       	cpi	r25, 0x01	; 1
    25d4:	09 f0       	breq	.+2      	; 0x25d8 <uECC_vli_modInv+0x17a>
    25d6:	5b c0       	rjmp	.+182    	; 0x268e <uECC_vli_modInv+0x230>
    25d8:	4f 5b       	subi	r20, 0xBF	; 191
    25da:	5f 4f       	sbci	r21, 0xFF	; 255
    25dc:	be 01       	movw	r22, r28
    25de:	6f 59       	subi	r22, 0x9F	; 159
    25e0:	7f 4f       	sbci	r23, 0xFF	; 255
    25e2:	cb 01       	movw	r24, r22
    25e4:	0e 94 14 06 	call	0xc28	; 0xc28 <uECC_vli_sub>
    25e8:	65 2d       	mov	r22, r5
    25ea:	ce 01       	movw	r24, r28
    25ec:	8f 59       	subi	r24, 0x9F	; 159
    25ee:	9f 4f       	sbci	r25, 0xFF	; 255
    25f0:	0e 94 d4 04 	call	0x9a8	; 0x9a8 <uECC_vli_rshift1>
    25f4:	f3 01       	movw	r30, r6
    25f6:	90 81       	ld	r25, Z
    25f8:	f4 01       	movw	r30, r8
    25fa:	80 81       	ld	r24, Z
    25fc:	89 17       	cp	r24, r25
    25fe:	f0 f0       	brcs	.+60     	; 0x263c <uECC_vli_modInv+0x1de>
    2600:	98 17       	cp	r25, r24
    2602:	08 f4       	brcc	.+2      	; 0x2606 <uECC_vli_modInv+0x1a8>
    2604:	7f c0       	rjmp	.+254    	; 0x2704 <uECC_vli_modInv+0x2a6>
    2606:	24 2d       	mov	r18, r4
    2608:	17 c0       	rjmp	.+46     	; 0x2638 <uECC_vli_modInv+0x1da>
    260a:	82 2f       	mov	r24, r18
    260c:	02 2e       	mov	r0, r18
    260e:	00 0c       	add	r0, r0
    2610:	99 0b       	sbc	r25, r25
    2612:	e1 e2       	ldi	r30, 0x21	; 33
    2614:	f0 e0       	ldi	r31, 0x00	; 0
    2616:	ec 0f       	add	r30, r28
    2618:	fd 1f       	adc	r31, r29
    261a:	e8 0f       	add	r30, r24
    261c:	f9 1f       	adc	r31, r25
    261e:	30 81       	ld	r19, Z
    2620:	e1 e0       	ldi	r30, 0x01	; 1
    2622:	f0 e0       	ldi	r31, 0x00	; 0
    2624:	ec 0f       	add	r30, r28
    2626:	fd 1f       	adc	r31, r29
    2628:	e8 0f       	add	r30, r24
    262a:	f9 1f       	adc	r31, r25
    262c:	80 81       	ld	r24, Z
    262e:	83 17       	cp	r24, r19
    2630:	28 f0       	brcs	.+10     	; 0x263c <uECC_vli_modInv+0x1de>
    2632:	38 17       	cp	r19, r24
    2634:	08 f4       	brcc	.+2      	; 0x2638 <uECC_vli_modInv+0x1da>
    2636:	66 c0       	rjmp	.+204    	; 0x2704 <uECC_vli_modInv+0x2a6>
    2638:	21 50       	subi	r18, 0x01	; 1
    263a:	38 f7       	brcc	.-50     	; 0x260a <uECC_vli_modInv+0x1ac>
    263c:	25 2d       	mov	r18, r5
    263e:	ae 01       	movw	r20, r28
    2640:	4f 5f       	subi	r20, 0xFF	; 255
    2642:	5f 4f       	sbci	r21, 0xFF	; 255
    2644:	be 01       	movw	r22, r28
    2646:	6f 5d       	subi	r22, 0xDF	; 223
    2648:	7f 4f       	sbci	r23, 0xFF	; 255
    264a:	cb 01       	movw	r24, r22
    264c:	0e 94 14 06 	call	0xc28	; 0xc28 <uECC_vli_sub>
    2650:	45 2d       	mov	r20, r5
    2652:	b8 01       	movw	r22, r16
    2654:	ce 01       	movw	r24, r28
    2656:	81 96       	adiw	r24, 0x21	; 33
    2658:	d7 de       	rcall	.-594    	; 0x2408 <vli_modInv_update>
    265a:	6b cf       	rjmp	.-298    	; 0x2532 <uECC_vli_modInv+0xd4>
    265c:	9f ef       	ldi	r25, 0xFF	; 255
    265e:	a2 96       	adiw	r28, 0x22	; 34
    2660:	8f ad       	ldd	r24, Y+63	; 0x3f
    2662:	a2 97       	sbiw	r28, 0x22	; 34
    2664:	80 fd       	sbrc	r24, 0
    2666:	ae cf       	rjmp	.-164    	; 0x25c4 <uECC_vli_modInv+0x166>
    2668:	65 2d       	mov	r22, r5
    266a:	ce 01       	movw	r24, r28
    266c:	8f 59       	subi	r24, 0x9F	; 159
    266e:	9f 4f       	sbci	r25, 0xFF	; 255
    2670:	0e 94 d4 04 	call	0x9a8	; 0x9a8 <uECC_vli_rshift1>
    2674:	ed cf       	rjmp	.-38     	; 0x2650 <uECC_vli_modInv+0x1f2>
    2676:	65 2d       	mov	r22, r5
    2678:	ce 01       	movw	r24, r28
    267a:	8f 5b       	subi	r24, 0xBF	; 191
    267c:	9f 4f       	sbci	r25, 0xFF	; 255
    267e:	0e 94 d4 04 	call	0x9a8	; 0x9a8 <uECC_vli_rshift1>
    2682:	45 2d       	mov	r20, r5
    2684:	b8 01       	movw	r22, r16
    2686:	ce 01       	movw	r24, r28
    2688:	01 96       	adiw	r24, 0x01	; 1
    268a:	be de       	rcall	.-644    	; 0x2408 <vli_modInv_update>
    268c:	52 cf       	rjmp	.-348    	; 0x2532 <uECC_vli_modInv+0xd4>
    268e:	4f 59       	subi	r20, 0x9F	; 159
    2690:	5f 4f       	sbci	r21, 0xFF	; 255
    2692:	be 01       	movw	r22, r28
    2694:	6f 5b       	subi	r22, 0xBF	; 191
    2696:	7f 4f       	sbci	r23, 0xFF	; 255
    2698:	cb 01       	movw	r24, r22
    269a:	0e 94 14 06 	call	0xc28	; 0xc28 <uECC_vli_sub>
    269e:	65 2d       	mov	r22, r5
    26a0:	ce 01       	movw	r24, r28
    26a2:	8f 5b       	subi	r24, 0xBF	; 191
    26a4:	9f 4f       	sbci	r25, 0xFF	; 255
    26a6:	0e 94 d4 04 	call	0x9a8	; 0x9a8 <uECC_vli_rshift1>
    26aa:	f4 01       	movw	r30, r8
    26ac:	80 81       	ld	r24, Z
    26ae:	f3 01       	movw	r30, r6
    26b0:	90 81       	ld	r25, Z
    26b2:	98 17       	cp	r25, r24
    26b4:	e0 f0       	brcs	.+56     	; 0x26ee <uECC_vli_modInv+0x290>
    26b6:	89 17       	cp	r24, r25
    26b8:	98 f1       	brcs	.+102    	; 0x2720 <uECC_vli_modInv+0x2c2>
    26ba:	24 2d       	mov	r18, r4
    26bc:	16 c0       	rjmp	.+44     	; 0x26ea <uECC_vli_modInv+0x28c>
    26be:	82 2f       	mov	r24, r18
    26c0:	02 2e       	mov	r0, r18
    26c2:	00 0c       	add	r0, r0
    26c4:	99 0b       	sbc	r25, r25
    26c6:	e1 e0       	ldi	r30, 0x01	; 1
    26c8:	f0 e0       	ldi	r31, 0x00	; 0
    26ca:	ec 0f       	add	r30, r28
    26cc:	fd 1f       	adc	r31, r29
    26ce:	e8 0f       	add	r30, r24
    26d0:	f9 1f       	adc	r31, r25
    26d2:	30 81       	ld	r19, Z
    26d4:	e1 e2       	ldi	r30, 0x21	; 33
    26d6:	f0 e0       	ldi	r31, 0x00	; 0
    26d8:	ec 0f       	add	r30, r28
    26da:	fd 1f       	adc	r31, r29
    26dc:	e8 0f       	add	r30, r24
    26de:	f9 1f       	adc	r31, r25
    26e0:	80 81       	ld	r24, Z
    26e2:	83 17       	cp	r24, r19
    26e4:	20 f0       	brcs	.+8      	; 0x26ee <uECC_vli_modInv+0x290>
    26e6:	38 17       	cp	r19, r24
    26e8:	d8 f0       	brcs	.+54     	; 0x2720 <uECC_vli_modInv+0x2c2>
    26ea:	21 50       	subi	r18, 0x01	; 1
    26ec:	40 f7       	brcc	.-48     	; 0x26be <uECC_vli_modInv+0x260>
    26ee:	25 2d       	mov	r18, r5
    26f0:	ae 01       	movw	r20, r28
    26f2:	4f 5d       	subi	r20, 0xDF	; 223
    26f4:	5f 4f       	sbci	r21, 0xFF	; 255
    26f6:	be 01       	movw	r22, r28
    26f8:	6f 5f       	subi	r22, 0xFF	; 255
    26fa:	7f 4f       	sbci	r23, 0xFF	; 255
    26fc:	cb 01       	movw	r24, r22
    26fe:	0e 94 14 06 	call	0xc28	; 0xc28 <uECC_vli_sub>
    2702:	bf cf       	rjmp	.-130    	; 0x2682 <uECC_vli_modInv+0x224>
    2704:	25 2d       	mov	r18, r5
    2706:	a8 01       	movw	r20, r16
    2708:	be 01       	movw	r22, r28
    270a:	6f 5d       	subi	r22, 0xDF	; 223
    270c:	7f 4f       	sbci	r23, 0xFF	; 255
    270e:	cb 01       	movw	r24, r22
    2710:	0e 94 43 05 	call	0xa86	; 0xa86 <uECC_vli_add>
    2714:	93 cf       	rjmp	.-218    	; 0x263c <uECC_vli_modInv+0x1de>
    2716:	65 2d       	mov	r22, r5
    2718:	c5 01       	movw	r24, r10
    271a:	0e 94 60 04 	call	0x8c0	; 0x8c0 <uECC_vli_clear>
    271e:	34 cf       	rjmp	.-408    	; 0x2588 <uECC_vli_modInv+0x12a>
    2720:	25 2d       	mov	r18, r5
    2722:	a8 01       	movw	r20, r16
    2724:	be 01       	movw	r22, r28
    2726:	6f 5f       	subi	r22, 0xFF	; 255
    2728:	7f 4f       	sbci	r23, 0xFF	; 255
    272a:	cb 01       	movw	r24, r22
    272c:	0e 94 43 05 	call	0xa86	; 0xa86 <uECC_vli_add>
    2730:	de cf       	rjmp	.-68     	; 0x26ee <uECC_vli_modInv+0x290>

00002732 <EccPoint_mult>:
    2732:	2f 92       	push	r2
    2734:	3f 92       	push	r3
    2736:	4f 92       	push	r4
    2738:	5f 92       	push	r5
    273a:	6f 92       	push	r6
    273c:	7f 92       	push	r7
    273e:	8f 92       	push	r8
    2740:	9f 92       	push	r9
    2742:	af 92       	push	r10
    2744:	bf 92       	push	r11
    2746:	cf 92       	push	r12
    2748:	df 92       	push	r13
    274a:	ef 92       	push	r14
    274c:	ff 92       	push	r15
    274e:	0f 93       	push	r16
    2750:	1f 93       	push	r17
    2752:	cf 93       	push	r28
    2754:	df 93       	push	r29
    2756:	cd b7       	in	r28, 0x3d	; 61
    2758:	de b7       	in	r29, 0x3e	; 62
    275a:	cf 5e       	subi	r28, 0xEF	; 239
    275c:	d1 09       	sbc	r29, r1
    275e:	0f b6       	in	r0, 0x3f	; 63
    2760:	f8 94       	cli
    2762:	de bf       	out	0x3e, r29	; 62
    2764:	0f be       	out	0x3f, r0	; 63
    2766:	cd bf       	out	0x3d, r28	; 61
    2768:	c2 51       	subi	r28, 0x12	; 18
    276a:	df 4f       	sbci	r29, 0xFF	; 255
    276c:	99 83       	std	Y+1, r25	; 0x01
    276e:	88 83       	st	Y, r24
    2770:	ce 5e       	subi	r28, 0xEE	; 238
    2772:	d0 40       	sbci	r29, 0x00	; 0
    2774:	c8 51       	subi	r28, 0x18	; 24
    2776:	df 4f       	sbci	r29, 0xFF	; 255
    2778:	79 83       	std	Y+1, r23	; 0x01
    277a:	68 83       	st	Y, r22
    277c:	c8 5e       	subi	r28, 0xE8	; 232
    277e:	d0 40       	sbci	r29, 0x00	; 0
    2780:	cd 51       	subi	r28, 0x1D	; 29
    2782:	df 4f       	sbci	r29, 0xFF	; 255
    2784:	59 83       	std	Y+1, r21	; 0x01
    2786:	48 83       	st	Y, r20
    2788:	c3 5e       	subi	r28, 0xE3	; 227
    278a:	d0 40       	sbci	r29, 0x00	; 0
    278c:	69 01       	movw	r12, r18
    278e:	17 01       	movw	r2, r14
    2790:	d7 01       	movw	r26, r14
    2792:	bc 91       	ld	r27, X
    2794:	cb 51       	subi	r28, 0x1B	; 27
    2796:	df 4f       	sbci	r29, 0xFF	; 255
    2798:	b8 83       	st	Y, r27
    279a:	c5 5e       	subi	r28, 0xE5	; 229
    279c:	d0 40       	sbci	r29, 0x00	; 0
    279e:	4b 2f       	mov	r20, r27
    27a0:	81 e8       	ldi	r24, 0x81	; 129
    27a2:	90 e0       	ldi	r25, 0x00	; 0
    27a4:	8c 0f       	add	r24, r28
    27a6:	9d 1f       	adc	r25, r29
    27a8:	80 96       	adiw	r24, 0x20	; 32
    27aa:	0e 94 87 04 	call	0x90e	; 0x90e <uECC_vli_set>
    27ae:	cb 51       	subi	r28, 0x1B	; 27
    27b0:	df 4f       	sbci	r29, 0xFF	; 255
    27b2:	e8 81       	ld	r30, Y
    27b4:	c5 5e       	subi	r28, 0xE5	; 229
    27b6:	d0 40       	sbci	r29, 0x00	; 0
    27b8:	0e 2e       	mov	r0, r30
    27ba:	00 0c       	add	r0, r0
    27bc:	ff 0b       	sbc	r31, r31
    27be:	c6 51       	subi	r28, 0x16	; 22
    27c0:	df 4f       	sbci	r29, 0xFF	; 255
    27c2:	f9 83       	std	Y+1, r31	; 0x01
    27c4:	e8 83       	st	Y, r30
    27c6:	ca 5e       	subi	r28, 0xEA	; 234
    27c8:	d0 40       	sbci	r29, 0x00	; 0
    27ca:	c8 51       	subi	r28, 0x18	; 24
    27cc:	df 4f       	sbci	r29, 0xFF	; 255
    27ce:	28 81       	ld	r18, Y
    27d0:	39 81       	ldd	r19, Y+1	; 0x01
    27d2:	c8 5e       	subi	r28, 0xE8	; 232
    27d4:	d0 40       	sbci	r29, 0x00	; 0
    27d6:	2e 0f       	add	r18, r30
    27d8:	3f 1f       	adc	r19, r31
    27da:	c4 51       	subi	r28, 0x14	; 20
    27dc:	df 4f       	sbci	r29, 0xFF	; 255
    27de:	39 83       	std	Y+1, r19	; 0x01
    27e0:	28 83       	st	Y, r18
    27e2:	cc 5e       	subi	r28, 0xEC	; 236
    27e4:	d0 40       	sbci	r29, 0x00	; 0
    27e6:	cb 51       	subi	r28, 0x1B	; 27
    27e8:	df 4f       	sbci	r29, 0xFF	; 255
    27ea:	48 81       	ld	r20, Y
    27ec:	c5 5e       	subi	r28, 0xE5	; 229
    27ee:	d0 40       	sbci	r29, 0x00	; 0
    27f0:	b9 01       	movw	r22, r18
    27f2:	81 e4       	ldi	r24, 0x41	; 65
    27f4:	90 e0       	ldi	r25, 0x00	; 0
    27f6:	8c 0f       	add	r24, r28
    27f8:	9d 1f       	adc	r25, r29
    27fa:	80 96       	adiw	r24, 0x20	; 32
    27fc:	0e 94 87 04 	call	0x90e	; 0x90e <uECC_vli_set>
    2800:	d7 01       	movw	r26, r14
    2802:	bc 90       	ld	r11, X
    2804:	c1 14       	cp	r12, r1
    2806:	d1 04       	cpc	r13, r1
    2808:	09 f4       	brne	.+2      	; 0x280c <EccPoint_mult+0xda>
    280a:	fc c1       	rjmp	.+1016   	; 0x2c04 <EccPoint_mult+0x4d2>
    280c:	4b 2d       	mov	r20, r11
    280e:	b6 01       	movw	r22, r12
    2810:	fe 01       	movw	r30, r28
    2812:	31 96       	adiw	r30, 0x01	; 1
    2814:	cf 51       	subi	r28, 0x1F	; 31
    2816:	df 4f       	sbci	r29, 0xFF	; 255
    2818:	f9 83       	std	Y+1, r31	; 0x01
    281a:	e8 83       	st	Y, r30
    281c:	c1 5e       	subi	r28, 0xE1	; 225
    281e:	d0 40       	sbci	r29, 0x00	; 0
    2820:	cf 01       	movw	r24, r30
    2822:	0e 94 87 04 	call	0x90e	; 0x90e <uECC_vli_set>
    2826:	4b 2d       	mov	r20, r11
    2828:	81 e8       	ldi	r24, 0x81	; 129
    282a:	e8 2e       	mov	r14, r24
    282c:	f1 2c       	mov	r15, r1
    282e:	ec 0e       	add	r14, r28
    2830:	fd 1e       	adc	r15, r29
    2832:	30 e2       	ldi	r19, 0x20	; 32
    2834:	e3 0e       	add	r14, r19
    2836:	f1 1c       	adc	r15, r1
    2838:	b7 01       	movw	r22, r14
    283a:	ce 01       	movw	r24, r28
    283c:	8f 57       	subi	r24, 0x7F	; 127
    283e:	9f 4f       	sbci	r25, 0xFF	; 255
    2840:	0e 94 87 04 	call	0x90e	; 0x90e <uECC_vli_set>
    2844:	4b 2d       	mov	r20, r11
    2846:	91 e4       	ldi	r25, 0x41	; 65
    2848:	c9 2e       	mov	r12, r25
    284a:	d1 2c       	mov	r13, r1
    284c:	cc 0e       	add	r12, r28
    284e:	dd 1e       	adc	r13, r29
    2850:	80 e2       	ldi	r24, 0x20	; 32
    2852:	c8 0e       	add	r12, r24
    2854:	d1 1c       	adc	r13, r1
    2856:	b6 01       	movw	r22, r12
    2858:	ce 01       	movw	r24, r28
    285a:	8f 5b       	subi	r24, 0xBF	; 191
    285c:	9f 4f       	sbci	r25, 0xFF	; 255
    285e:	0e 94 87 04 	call	0x90e	; 0x90e <uECC_vli_set>
    2862:	91 01       	movw	r18, r2
    2864:	cf 51       	subi	r28, 0x1F	; 31
    2866:	df 4f       	sbci	r29, 0xFF	; 255
    2868:	48 81       	ld	r20, Y
    286a:	59 81       	ldd	r21, Y+1	; 0x01
    286c:	c1 5e       	subi	r28, 0xE1	; 225
    286e:	d0 40       	sbci	r29, 0x00	; 0
    2870:	b6 01       	movw	r22, r12
    2872:	c7 01       	movw	r24, r14
    2874:	a6 d9       	rcall	.-3252   	; 0x1bc2 <apply_z>
    2876:	f1 01       	movw	r30, r2
    2878:	ec 55       	subi	r30, 0x5C	; 92
    287a:	ff 4f       	sbci	r31, 0xFF	; 255
    287c:	01 90       	ld	r0, Z+
    287e:	f0 81       	ld	r31, Z
    2880:	e0 2d       	mov	r30, r0
    2882:	91 01       	movw	r18, r2
    2884:	cf 51       	subi	r28, 0x1F	; 31
    2886:	df 4f       	sbci	r29, 0xFF	; 255
    2888:	48 81       	ld	r20, Y
    288a:	59 81       	ldd	r21, Y+1	; 0x01
    288c:	c1 5e       	subi	r28, 0xE1	; 225
    288e:	d0 40       	sbci	r29, 0x00	; 0
    2890:	b6 01       	movw	r22, r12
    2892:	c7 01       	movw	r24, r14
    2894:	09 95       	icall
    2896:	91 01       	movw	r18, r2
    2898:	cf 51       	subi	r28, 0x1F	; 31
    289a:	df 4f       	sbci	r29, 0xFF	; 255
    289c:	48 81       	ld	r20, Y
    289e:	59 81       	ldd	r21, Y+1	; 0x01
    28a0:	c1 5e       	subi	r28, 0xE1	; 225
    28a2:	d0 40       	sbci	r29, 0x00	; 0
    28a4:	be 01       	movw	r22, r28
    28a6:	6f 5b       	subi	r22, 0xBF	; 191
    28a8:	7f 4f       	sbci	r23, 0xFF	; 255
    28aa:	ce 01       	movw	r24, r28
    28ac:	8f 57       	subi	r24, 0x7F	; 127
    28ae:	9f 4f       	sbci	r25, 0xFF	; 255
    28b0:	88 d9       	rcall	.-3312   	; 0x1bc2 <apply_z>
    28b2:	58 01       	movw	r10, r16
    28b4:	92 e0       	ldi	r25, 0x02	; 2
    28b6:	a9 1a       	sub	r10, r25
    28b8:	b1 08       	sbc	r11, r1
    28ba:	1a 14       	cp	r1, r10
    28bc:	1b 04       	cpc	r1, r11
    28be:	0c f0       	brlt	.+2      	; 0x28c2 <EccPoint_mult+0x190>
    28c0:	5f c0       	rjmp	.+190    	; 0x2980 <EccPoint_mult+0x24e>
    28c2:	44 24       	eor	r4, r4
    28c4:	43 94       	inc	r4
    28c6:	51 2c       	mov	r5, r1
    28c8:	f5 01       	movw	r30, r10
    28ca:	f5 95       	asr	r31
    28cc:	e7 95       	ror	r30
    28ce:	f5 95       	asr	r31
    28d0:	e7 95       	ror	r30
    28d2:	f5 95       	asr	r31
    28d4:	e7 95       	ror	r30
    28d6:	cd 51       	subi	r28, 0x1D	; 29
    28d8:	df 4f       	sbci	r29, 0xFF	; 255
    28da:	28 81       	ld	r18, Y
    28dc:	39 81       	ldd	r19, Y+1	; 0x01
    28de:	c3 5e       	subi	r28, 0xE3	; 227
    28e0:	d0 40       	sbci	r29, 0x00	; 0
    28e2:	e2 0f       	add	r30, r18
    28e4:	f3 1f       	adc	r31, r19
    28e6:	c5 01       	movw	r24, r10
    28e8:	87 70       	andi	r24, 0x07	; 7
    28ea:	99 27       	eor	r25, r25
    28ec:	d2 01       	movw	r26, r4
    28ee:	02 c0       	rjmp	.+4      	; 0x28f4 <EccPoint_mult+0x1c2>
    28f0:	aa 0f       	add	r26, r26
    28f2:	bb 1f       	adc	r27, r27
    28f4:	8a 95       	dec	r24
    28f6:	e2 f7       	brpl	.-8      	; 0x28f0 <EccPoint_mult+0x1be>
    28f8:	cd 01       	movw	r24, r26
    28fa:	90 81       	ld	r25, Z
    28fc:	89 23       	and	r24, r25
    28fe:	21 e0       	ldi	r18, 0x01	; 1
    2900:	30 e0       	ldi	r19, 0x00	; 0
    2902:	11 f0       	breq	.+4      	; 0x2908 <EccPoint_mult+0x1d6>
    2904:	20 e0       	ldi	r18, 0x00	; 0
    2906:	30 e0       	ldi	r19, 0x00	; 0
    2908:	39 01       	movw	r6, r18
    290a:	66 0c       	add	r6, r6
    290c:	77 1c       	adc	r7, r7
    290e:	62 94       	swap	r6
    2910:	72 94       	swap	r7
    2912:	80 ef       	ldi	r24, 0xF0	; 240
    2914:	78 22       	and	r7, r24
    2916:	76 24       	eor	r7, r6
    2918:	68 22       	and	r6, r24
    291a:	76 24       	eor	r7, r6
    291c:	91 e4       	ldi	r25, 0x41	; 65
    291e:	c9 2e       	mov	r12, r25
    2920:	d1 2c       	mov	r13, r1
    2922:	cc 0e       	add	r12, r28
    2924:	dd 1e       	adc	r13, r29
    2926:	c6 0c       	add	r12, r6
    2928:	d7 1c       	adc	r13, r7
    292a:	e1 e8       	ldi	r30, 0x81	; 129
    292c:	f0 e0       	ldi	r31, 0x00	; 0
    292e:	ec 0f       	add	r30, r28
    2930:	fd 1f       	adc	r31, r29
    2932:	6e 0e       	add	r6, r30
    2934:	7f 1e       	adc	r7, r31
    2936:	72 01       	movw	r14, r4
    2938:	e2 1a       	sub	r14, r18
    293a:	f3 0a       	sbc	r15, r19
    293c:	ee 0c       	add	r14, r14
    293e:	ff 1c       	adc	r15, r15
    2940:	e2 94       	swap	r14
    2942:	f2 94       	swap	r15
    2944:	20 ef       	ldi	r18, 0xF0	; 240
    2946:	f2 22       	and	r15, r18
    2948:	fe 24       	eor	r15, r14
    294a:	e2 22       	and	r14, r18
    294c:	fe 24       	eor	r15, r14
    294e:	31 e4       	ldi	r19, 0x41	; 65
    2950:	83 2e       	mov	r8, r19
    2952:	91 2c       	mov	r9, r1
    2954:	8c 0e       	add	r8, r28
    2956:	9d 1e       	adc	r9, r29
    2958:	8e 0c       	add	r8, r14
    295a:	9f 1c       	adc	r9, r15
    295c:	ee 0e       	add	r14, r30
    295e:	ff 1e       	adc	r15, r31
    2960:	81 01       	movw	r16, r2
    2962:	96 01       	movw	r18, r12
    2964:	a3 01       	movw	r20, r6
    2966:	b4 01       	movw	r22, r8
    2968:	c7 01       	movw	r24, r14
    296a:	7e da       	rcall	.-2820   	; 0x1e68 <XYcZ_addC>
    296c:	94 01       	movw	r18, r8
    296e:	a7 01       	movw	r20, r14
    2970:	b6 01       	movw	r22, r12
    2972:	c3 01       	movw	r24, r6
    2974:	9c d9       	rcall	.-3272   	; 0x1cae <XYcZ_add>
    2976:	f1 e0       	ldi	r31, 0x01	; 1
    2978:	af 1a       	sub	r10, r31
    297a:	b1 08       	sbc	r11, r1
    297c:	09 f0       	breq	.+2      	; 0x2980 <EccPoint_mult+0x24e>
    297e:	a4 cf       	rjmp	.-184    	; 0x28c8 <EccPoint_mult+0x196>
    2980:	cd 51       	subi	r28, 0x1D	; 29
    2982:	df 4f       	sbci	r29, 0xFF	; 255
    2984:	a8 81       	ld	r26, Y
    2986:	b9 81       	ldd	r27, Y+1	; 0x01
    2988:	c3 5e       	subi	r28, 0xE3	; 227
    298a:	d0 40       	sbci	r29, 0x00	; 0
    298c:	8c 91       	ld	r24, X
    298e:	80 95       	com	r24
    2990:	81 70       	andi	r24, 0x01	; 1
    2992:	ca 51       	subi	r28, 0x1A	; 26
    2994:	df 4f       	sbci	r29, 0xFF	; 255
    2996:	88 83       	st	Y, r24
    2998:	c6 5e       	subi	r28, 0xE6	; 230
    299a:	d0 40       	sbci	r29, 0x00	; 0
    299c:	c9 51       	subi	r28, 0x19	; 25
    299e:	df 4f       	sbci	r29, 0xFF	; 255
    29a0:	18 82       	st	Y, r1
    29a2:	c7 5e       	subi	r28, 0xE7	; 231
    29a4:	d0 40       	sbci	r29, 0x00	; 0
    29a6:	ca 51       	subi	r28, 0x1A	; 26
    29a8:	df 4f       	sbci	r29, 0xFF	; 255
    29aa:	48 80       	ld	r4, Y
    29ac:	59 80       	ldd	r5, Y+1	; 0x01
    29ae:	c6 5e       	subi	r28, 0xE6	; 230
    29b0:	d0 40       	sbci	r29, 0x00	; 0
    29b2:	44 0c       	add	r4, r4
    29b4:	55 1c       	adc	r5, r5
    29b6:	42 94       	swap	r4
    29b8:	52 94       	swap	r5
    29ba:	60 ef       	ldi	r22, 0xF0	; 240
    29bc:	56 22       	and	r5, r22
    29be:	54 24       	eor	r5, r4
    29c0:	46 22       	and	r4, r22
    29c2:	54 24       	eor	r5, r4
    29c4:	71 e4       	ldi	r23, 0x41	; 65
    29c6:	67 2e       	mov	r6, r23
    29c8:	71 2c       	mov	r7, r1
    29ca:	6c 0e       	add	r6, r28
    29cc:	7d 1e       	adc	r7, r29
    29ce:	64 0c       	add	r6, r4
    29d0:	75 1c       	adc	r7, r5
    29d2:	e1 e8       	ldi	r30, 0x81	; 129
    29d4:	f0 e0       	ldi	r31, 0x00	; 0
    29d6:	ec 0f       	add	r30, r28
    29d8:	fd 1f       	adc	r31, r29
    29da:	4e 0e       	add	r4, r30
    29dc:	5f 1e       	adc	r5, r31
    29de:	81 e0       	ldi	r24, 0x01	; 1
    29e0:	90 e0       	ldi	r25, 0x00	; 0
    29e2:	7c 01       	movw	r14, r24
    29e4:	ca 51       	subi	r28, 0x1A	; 26
    29e6:	df 4f       	sbci	r29, 0xFF	; 255
    29e8:	28 81       	ld	r18, Y
    29ea:	39 81       	ldd	r19, Y+1	; 0x01
    29ec:	c6 5e       	subi	r28, 0xE6	; 230
    29ee:	d0 40       	sbci	r29, 0x00	; 0
    29f0:	e2 1a       	sub	r14, r18
    29f2:	f3 0a       	sbc	r15, r19
    29f4:	ee 0c       	add	r14, r14
    29f6:	ff 1c       	adc	r15, r15
    29f8:	e2 94       	swap	r14
    29fa:	f2 94       	swap	r15
    29fc:	a0 ef       	ldi	r26, 0xF0	; 240
    29fe:	fa 22       	and	r15, r26
    2a00:	fe 24       	eor	r15, r14
    2a02:	ea 22       	and	r14, r26
    2a04:	fe 24       	eor	r15, r14
    2a06:	b1 e4       	ldi	r27, 0x41	; 65
    2a08:	cb 2e       	mov	r12, r27
    2a0a:	d1 2c       	mov	r13, r1
    2a0c:	cc 0e       	add	r12, r28
    2a0e:	dd 1e       	adc	r13, r29
    2a10:	ce 0c       	add	r12, r14
    2a12:	df 1c       	adc	r13, r15
    2a14:	ee 0e       	add	r14, r30
    2a16:	ff 1e       	adc	r15, r31
    2a18:	81 01       	movw	r16, r2
    2a1a:	93 01       	movw	r18, r6
    2a1c:	a2 01       	movw	r20, r4
    2a1e:	b6 01       	movw	r22, r12
    2a20:	c7 01       	movw	r24, r14
    2a22:	22 da       	rcall	.-3004   	; 0x1e68 <XYcZ_addC>
    2a24:	51 01       	movw	r10, r2
    2a26:	34 e0       	ldi	r19, 0x04	; 4
    2a28:	a3 0e       	add	r10, r19
    2a2a:	b1 1c       	adc	r11, r1
    2a2c:	61 e8       	ldi	r22, 0x81	; 129
    2a2e:	70 e0       	ldi	r23, 0x00	; 0
    2a30:	6c 0f       	add	r22, r28
    2a32:	7d 1f       	adc	r23, r29
    2a34:	60 5e       	subi	r22, 0xE0	; 224
    2a36:	7f 4f       	sbci	r23, 0xFF	; 255
    2a38:	cb 51       	subi	r28, 0x1B	; 27
    2a3a:	df 4f       	sbci	r29, 0xFF	; 255
    2a3c:	08 81       	ld	r16, Y
    2a3e:	c5 5e       	subi	r28, 0xE5	; 229
    2a40:	d0 40       	sbci	r29, 0x00	; 0
    2a42:	95 01       	movw	r18, r10
    2a44:	ae 01       	movw	r20, r28
    2a46:	4f 57       	subi	r20, 0x7F	; 127
    2a48:	5f 4f       	sbci	r21, 0xFF	; 255
    2a4a:	ce 01       	movw	r24, r28
    2a4c:	8f 53       	subi	r24, 0x3F	; 63
    2a4e:	9f 4f       	sbci	r25, 0xFF	; 255
    2a50:	0e 94 c6 07 	call	0xf8c	; 0xf8c <uECC_vli_modSub>
    2a54:	d1 01       	movw	r26, r2
    2a56:	2c 91       	ld	r18, X
    2a58:	a6 01       	movw	r20, r12
    2a5a:	be 01       	movw	r22, r28
    2a5c:	6f 53       	subi	r22, 0x3F	; 63
    2a5e:	7f 4f       	sbci	r23, 0xFF	; 255
    2a60:	cf 51       	subi	r28, 0x1F	; 31
    2a62:	df 4f       	sbci	r29, 0xFF	; 255
    2a64:	88 81       	ld	r24, Y
    2a66:	99 81       	ldd	r25, Y+1	; 0x01
    2a68:	c1 5e       	subi	r28, 0xE1	; 225
    2a6a:	d0 40       	sbci	r29, 0x00	; 0
    2a6c:	0e 94 e5 06 	call	0xdca	; 0xdca <uECC_vli_mult>
    2a70:	41 01       	movw	r8, r2
    2a72:	ba ea       	ldi	r27, 0xAA	; 170
    2a74:	8b 0e       	add	r8, r27
    2a76:	91 1c       	adc	r9, r1
    2a78:	d4 01       	movw	r26, r8
    2a7a:	ed 91       	ld	r30, X+
    2a7c:	fc 91       	ld	r31, X
    2a7e:	cf 51       	subi	r28, 0x1F	; 31
    2a80:	df 4f       	sbci	r29, 0xFF	; 255
    2a82:	68 81       	ld	r22, Y
    2a84:	79 81       	ldd	r23, Y+1	; 0x01
    2a86:	c1 5e       	subi	r28, 0xE1	; 225
    2a88:	d0 40       	sbci	r29, 0x00	; 0
    2a8a:	ce 01       	movw	r24, r28
    2a8c:	8f 53       	subi	r24, 0x3F	; 63
    2a8e:	9f 4f       	sbci	r25, 0xFF	; 255
    2a90:	09 95       	icall
    2a92:	f1 01       	movw	r30, r2
    2a94:	20 81       	ld	r18, Z
    2a96:	c8 51       	subi	r28, 0x18	; 24
    2a98:	df 4f       	sbci	r29, 0xFF	; 255
    2a9a:	48 81       	ld	r20, Y
    2a9c:	59 81       	ldd	r21, Y+1	; 0x01
    2a9e:	c8 5e       	subi	r28, 0xE8	; 232
    2aa0:	d0 40       	sbci	r29, 0x00	; 0
    2aa2:	be 01       	movw	r22, r28
    2aa4:	6f 53       	subi	r22, 0x3F	; 63
    2aa6:	7f 4f       	sbci	r23, 0xFF	; 255
    2aa8:	cf 51       	subi	r28, 0x1F	; 31
    2aaa:	df 4f       	sbci	r29, 0xFF	; 255
    2aac:	88 81       	ld	r24, Y
    2aae:	99 81       	ldd	r25, Y+1	; 0x01
    2ab0:	c1 5e       	subi	r28, 0xE1	; 225
    2ab2:	d0 40       	sbci	r29, 0x00	; 0
    2ab4:	0e 94 e5 06 	call	0xdca	; 0xdca <uECC_vli_mult>
    2ab8:	d4 01       	movw	r26, r8
    2aba:	ed 91       	ld	r30, X+
    2abc:	fc 91       	ld	r31, X
    2abe:	cf 51       	subi	r28, 0x1F	; 31
    2ac0:	df 4f       	sbci	r29, 0xFF	; 255
    2ac2:	68 81       	ld	r22, Y
    2ac4:	79 81       	ldd	r23, Y+1	; 0x01
    2ac6:	c1 5e       	subi	r28, 0xE1	; 225
    2ac8:	d0 40       	sbci	r29, 0x00	; 0
    2aca:	ce 01       	movw	r24, r28
    2acc:	8f 53       	subi	r24, 0x3F	; 63
    2ace:	9f 4f       	sbci	r25, 0xFF	; 255
    2ad0:	09 95       	icall
    2ad2:	cb 51       	subi	r28, 0x1B	; 27
    2ad4:	df 4f       	sbci	r29, 0xFF	; 255
    2ad6:	28 81       	ld	r18, Y
    2ad8:	c5 5e       	subi	r28, 0xE5	; 229
    2ada:	d0 40       	sbci	r29, 0x00	; 0
    2adc:	a5 01       	movw	r20, r10
    2ade:	be 01       	movw	r22, r28
    2ae0:	6f 53       	subi	r22, 0x3F	; 63
    2ae2:	7f 4f       	sbci	r23, 0xFF	; 255
    2ae4:	cb 01       	movw	r24, r22
    2ae6:	bb dc       	rcall	.-1674   	; 0x245e <uECC_vli_modInv>
    2ae8:	f1 01       	movw	r30, r2
    2aea:	20 81       	ld	r18, Z
    2aec:	c4 51       	subi	r28, 0x14	; 20
    2aee:	df 4f       	sbci	r29, 0xFF	; 255
    2af0:	48 81       	ld	r20, Y
    2af2:	59 81       	ldd	r21, Y+1	; 0x01
    2af4:	cc 5e       	subi	r28, 0xEC	; 236
    2af6:	d0 40       	sbci	r29, 0x00	; 0
    2af8:	be 01       	movw	r22, r28
    2afa:	6f 53       	subi	r22, 0x3F	; 63
    2afc:	7f 4f       	sbci	r23, 0xFF	; 255
    2afe:	cf 51       	subi	r28, 0x1F	; 31
    2b00:	df 4f       	sbci	r29, 0xFF	; 255
    2b02:	88 81       	ld	r24, Y
    2b04:	99 81       	ldd	r25, Y+1	; 0x01
    2b06:	c1 5e       	subi	r28, 0xE1	; 225
    2b08:	d0 40       	sbci	r29, 0x00	; 0
    2b0a:	0e 94 e5 06 	call	0xdca	; 0xdca <uECC_vli_mult>
    2b0e:	d4 01       	movw	r26, r8
    2b10:	ed 91       	ld	r30, X+
    2b12:	fc 91       	ld	r31, X
    2b14:	cf 51       	subi	r28, 0x1F	; 31
    2b16:	df 4f       	sbci	r29, 0xFF	; 255
    2b18:	68 81       	ld	r22, Y
    2b1a:	79 81       	ldd	r23, Y+1	; 0x01
    2b1c:	c1 5e       	subi	r28, 0xE1	; 225
    2b1e:	d0 40       	sbci	r29, 0x00	; 0
    2b20:	ce 01       	movw	r24, r28
    2b22:	8f 53       	subi	r24, 0x3F	; 63
    2b24:	9f 4f       	sbci	r25, 0xFF	; 255
    2b26:	09 95       	icall
    2b28:	f1 01       	movw	r30, r2
    2b2a:	20 81       	ld	r18, Z
    2b2c:	a7 01       	movw	r20, r14
    2b2e:	be 01       	movw	r22, r28
    2b30:	6f 53       	subi	r22, 0x3F	; 63
    2b32:	7f 4f       	sbci	r23, 0xFF	; 255
    2b34:	cf 51       	subi	r28, 0x1F	; 31
    2b36:	df 4f       	sbci	r29, 0xFF	; 255
    2b38:	88 81       	ld	r24, Y
    2b3a:	99 81       	ldd	r25, Y+1	; 0x01
    2b3c:	c1 5e       	subi	r28, 0xE1	; 225
    2b3e:	d0 40       	sbci	r29, 0x00	; 0
    2b40:	0e 94 e5 06 	call	0xdca	; 0xdca <uECC_vli_mult>
    2b44:	d4 01       	movw	r26, r8
    2b46:	ed 91       	ld	r30, X+
    2b48:	fc 91       	ld	r31, X
    2b4a:	cf 51       	subi	r28, 0x1F	; 31
    2b4c:	df 4f       	sbci	r29, 0xFF	; 255
    2b4e:	68 81       	ld	r22, Y
    2b50:	79 81       	ldd	r23, Y+1	; 0x01
    2b52:	c1 5e       	subi	r28, 0xE1	; 225
    2b54:	d0 40       	sbci	r29, 0x00	; 0
    2b56:	ce 01       	movw	r24, r28
    2b58:	8f 53       	subi	r24, 0x3F	; 63
    2b5a:	9f 4f       	sbci	r25, 0xFF	; 255
    2b5c:	09 95       	icall
    2b5e:	81 01       	movw	r16, r2
    2b60:	96 01       	movw	r18, r12
    2b62:	a7 01       	movw	r20, r14
    2b64:	b3 01       	movw	r22, r6
    2b66:	c2 01       	movw	r24, r4
    2b68:	a2 d8       	rcall	.-3772   	; 0x1cae <XYcZ_add>
    2b6a:	91 01       	movw	r18, r2
    2b6c:	ae 01       	movw	r20, r28
    2b6e:	4f 53       	subi	r20, 0x3F	; 63
    2b70:	5f 4f       	sbci	r21, 0xFF	; 255
    2b72:	be 01       	movw	r22, r28
    2b74:	6f 5b       	subi	r22, 0xBF	; 191
    2b76:	7f 4f       	sbci	r23, 0xFF	; 255
    2b78:	ce 01       	movw	r24, r28
    2b7a:	8f 57       	subi	r24, 0x7F	; 127
    2b7c:	9f 4f       	sbci	r25, 0xFF	; 255
    2b7e:	21 d8       	rcall	.-4030   	; 0x1bc2 <apply_z>
    2b80:	cb 51       	subi	r28, 0x1B	; 27
    2b82:	df 4f       	sbci	r29, 0xFF	; 255
    2b84:	48 81       	ld	r20, Y
    2b86:	c5 5e       	subi	r28, 0xE5	; 229
    2b88:	d0 40       	sbci	r29, 0x00	; 0
    2b8a:	be 01       	movw	r22, r28
    2b8c:	6f 57       	subi	r22, 0x7F	; 127
    2b8e:	7f 4f       	sbci	r23, 0xFF	; 255
    2b90:	c2 51       	subi	r28, 0x12	; 18
    2b92:	df 4f       	sbci	r29, 0xFF	; 255
    2b94:	88 81       	ld	r24, Y
    2b96:	99 81       	ldd	r25, Y+1	; 0x01
    2b98:	ce 5e       	subi	r28, 0xEE	; 238
    2b9a:	d0 40       	sbci	r29, 0x00	; 0
    2b9c:	0e 94 87 04 	call	0x90e	; 0x90e <uECC_vli_set>
    2ba0:	cb 51       	subi	r28, 0x1B	; 27
    2ba2:	df 4f       	sbci	r29, 0xFF	; 255
    2ba4:	48 81       	ld	r20, Y
    2ba6:	c5 5e       	subi	r28, 0xE5	; 229
    2ba8:	d0 40       	sbci	r29, 0x00	; 0
    2baa:	be 01       	movw	r22, r28
    2bac:	6f 5b       	subi	r22, 0xBF	; 191
    2bae:	7f 4f       	sbci	r23, 0xFF	; 255
    2bb0:	c2 51       	subi	r28, 0x12	; 18
    2bb2:	df 4f       	sbci	r29, 0xFF	; 255
    2bb4:	88 81       	ld	r24, Y
    2bb6:	99 81       	ldd	r25, Y+1	; 0x01
    2bb8:	ce 5e       	subi	r28, 0xEE	; 238
    2bba:	d0 40       	sbci	r29, 0x00	; 0
    2bbc:	c6 51       	subi	r28, 0x16	; 22
    2bbe:	df 4f       	sbci	r29, 0xFF	; 255
    2bc0:	e8 81       	ld	r30, Y
    2bc2:	f9 81       	ldd	r31, Y+1	; 0x01
    2bc4:	ca 5e       	subi	r28, 0xEA	; 234
    2bc6:	d0 40       	sbci	r29, 0x00	; 0
    2bc8:	8e 0f       	add	r24, r30
    2bca:	9f 1f       	adc	r25, r31
    2bcc:	0e 94 87 04 	call	0x90e	; 0x90e <uECC_vli_set>
    2bd0:	c1 51       	subi	r28, 0x11	; 17
    2bd2:	df 4f       	sbci	r29, 0xFF	; 255
    2bd4:	0f b6       	in	r0, 0x3f	; 63
    2bd6:	f8 94       	cli
    2bd8:	de bf       	out	0x3e, r29	; 62
    2bda:	0f be       	out	0x3f, r0	; 63
    2bdc:	cd bf       	out	0x3d, r28	; 61
    2bde:	df 91       	pop	r29
    2be0:	cf 91       	pop	r28
    2be2:	1f 91       	pop	r17
    2be4:	0f 91       	pop	r16
    2be6:	ff 90       	pop	r15
    2be8:	ef 90       	pop	r14
    2bea:	df 90       	pop	r13
    2bec:	cf 90       	pop	r12
    2bee:	bf 90       	pop	r11
    2bf0:	af 90       	pop	r10
    2bf2:	9f 90       	pop	r9
    2bf4:	8f 90       	pop	r8
    2bf6:	7f 90       	pop	r7
    2bf8:	6f 90       	pop	r6
    2bfa:	5f 90       	pop	r5
    2bfc:	4f 90       	pop	r4
    2bfe:	3f 90       	pop	r3
    2c00:	2f 90       	pop	r2
    2c02:	08 95       	ret
    2c04:	6b 2d       	mov	r22, r11
    2c06:	9e 01       	movw	r18, r28
    2c08:	2f 5f       	subi	r18, 0xFF	; 255
    2c0a:	3f 4f       	sbci	r19, 0xFF	; 255
    2c0c:	cf 51       	subi	r28, 0x1F	; 31
    2c0e:	df 4f       	sbci	r29, 0xFF	; 255
    2c10:	39 83       	std	Y+1, r19	; 0x01
    2c12:	28 83       	st	Y, r18
    2c14:	c1 5e       	subi	r28, 0xE1	; 225
    2c16:	d0 40       	sbci	r29, 0x00	; 0
    2c18:	c9 01       	movw	r24, r18
    2c1a:	0e 94 60 04 	call	0x8c0	; 0x8c0 <uECC_vli_clear>
    2c1e:	81 e0       	ldi	r24, 0x01	; 1
    2c20:	89 83       	std	Y+1, r24	; 0x01
    2c22:	01 ce       	rjmp	.-1022   	; 0x2826 <EccPoint_mult+0xf4>

00002c24 <uECC_sign_with_k>:
    2c24:	2f 92       	push	r2
    2c26:	3f 92       	push	r3
    2c28:	4f 92       	push	r4
    2c2a:	5f 92       	push	r5
    2c2c:	6f 92       	push	r6
    2c2e:	7f 92       	push	r7
    2c30:	8f 92       	push	r8
    2c32:	9f 92       	push	r9
    2c34:	af 92       	push	r10
    2c36:	bf 92       	push	r11
    2c38:	df 92       	push	r13
    2c3a:	ef 92       	push	r14
    2c3c:	ff 92       	push	r15
    2c3e:	0f 93       	push	r16
    2c40:	1f 93       	push	r17
    2c42:	cf 93       	push	r28
    2c44:	df 93       	push	r29
    2c46:	cd b7       	in	r28, 0x3d	; 61
    2c48:	de b7       	in	r29, 0x3e	; 62
    2c4a:	c2 5d       	subi	r28, 0xD2	; 210
    2c4c:	d1 09       	sbc	r29, r1
    2c4e:	0f b6       	in	r0, 0x3f	; 63
    2c50:	f8 94       	cli
    2c52:	de bf       	out	0x3e, r29	; 62
    2c54:	0f be       	out	0x3f, r0	; 63
    2c56:	cd bf       	out	0x3d, r28	; 61
    2c58:	5e 01       	movw	r10, r28
    2c5a:	e1 ea       	ldi	r30, 0xA1	; 161
    2c5c:	ae 0e       	add	r10, r30
    2c5e:	b1 1c       	adc	r11, r1
    2c60:	cf 53       	subi	r28, 0x3F	; 63
    2c62:	df 4f       	sbci	r29, 0xFF	; 255
    2c64:	b9 82       	std	Y+1, r11	; 0x01
    2c66:	a8 82       	st	Y, r10
    2c68:	c1 5c       	subi	r28, 0xC1	; 193
    2c6a:	d0 40       	sbci	r29, 0x00	; 0
    2c6c:	3e 01       	movw	r6, r28
    2c6e:	f1 e8       	ldi	r31, 0x81	; 129
    2c70:	6f 0e       	add	r6, r31
    2c72:	71 1c       	adc	r7, r1
    2c74:	cd 53       	subi	r28, 0x3D	; 61
    2c76:	df 4f       	sbci	r29, 0xFF	; 255
    2c78:	79 82       	std	Y+1, r7	; 0x01
    2c7a:	68 82       	st	Y, r6
    2c7c:	c3 5c       	subi	r28, 0xC3	; 195
    2c7e:	d0 40       	sbci	r29, 0x00	; 0
    2c80:	f7 01       	movw	r30, r14
    2c82:	d0 80       	ld	r13, Z
    2c84:	1d 14       	cp	r1, r13
    2c86:	9c f4       	brge	.+38     	; 0x2cae <uECC_sign_with_k+0x8a>
    2c88:	af ef       	ldi	r26, 0xFF	; 255
    2c8a:	ad 0d       	add	r26, r13
    2c8c:	b0 e0       	ldi	r27, 0x00	; 0
    2c8e:	2d 01       	movw	r4, r26
    2c90:	ff ef       	ldi	r31, 0xFF	; 255
    2c92:	4f 1a       	sub	r4, r31
    2c94:	5f 0a       	sbc	r5, r31
    2c96:	d9 01       	movw	r26, r18
    2c98:	a4 0d       	add	r26, r4
    2c9a:	b5 1d       	adc	r27, r5
    2c9c:	91 2c       	mov	r9, r1
    2c9e:	f9 01       	movw	r30, r18
    2ca0:	81 90       	ld	r8, Z+
    2ca2:	98 28       	or	r9, r8
    2ca4:	ea 17       	cp	r30, r26
    2ca6:	fb 07       	cpc	r31, r27
    2ca8:	d9 f7       	brne	.-10     	; 0x2ca0 <uECC_sign_with_k+0x7c>
    2caa:	91 10       	cpse	r9, r1
    2cac:	1b c0       	rjmp	.+54     	; 0x2ce4 <uECC_sign_with_k+0xc0>
    2cae:	80 e0       	ldi	r24, 0x00	; 0
    2cb0:	90 e0       	ldi	r25, 0x00	; 0
    2cb2:	ce 52       	subi	r28, 0x2E	; 46
    2cb4:	df 4f       	sbci	r29, 0xFF	; 255
    2cb6:	0f b6       	in	r0, 0x3f	; 63
    2cb8:	f8 94       	cli
    2cba:	de bf       	out	0x3e, r29	; 62
    2cbc:	0f be       	out	0x3f, r0	; 63
    2cbe:	cd bf       	out	0x3d, r28	; 61
    2cc0:	df 91       	pop	r29
    2cc2:	cf 91       	pop	r28
    2cc4:	1f 91       	pop	r17
    2cc6:	0f 91       	pop	r16
    2cc8:	ff 90       	pop	r15
    2cca:	ef 90       	pop	r14
    2ccc:	df 90       	pop	r13
    2cce:	bf 90       	pop	r11
    2cd0:	af 90       	pop	r10
    2cd2:	9f 90       	pop	r9
    2cd4:	8f 90       	pop	r8
    2cd6:	7f 90       	pop	r7
    2cd8:	6f 90       	pop	r6
    2cda:	5f 90       	pop	r5
    2cdc:	4f 90       	pop	r4
    2cde:	3f 90       	pop	r3
    2ce0:	2f 90       	pop	r2
    2ce2:	08 95       	ret
    2ce4:	f7 01       	movw	r30, r14
    2ce6:	02 80       	ldd	r0, Z+2	; 0x02
    2ce8:	f3 81       	ldd	r31, Z+3	; 0x03
    2cea:	e0 2d       	mov	r30, r0
    2cec:	c9 53       	subi	r28, 0x39	; 57
    2cee:	df 4f       	sbci	r29, 0xFF	; 255
    2cf0:	f9 83       	std	Y+1, r31	; 0x01
    2cf2:	e8 83       	st	Y, r30
    2cf4:	c7 5c       	subi	r28, 0xC7	; 199
    2cf6:	d0 40       	sbci	r29, 0x00	; 0
    2cf8:	37 96       	adiw	r30, 0x07	; 7
    2cfa:	f7 fd       	sbrc	r31, 7
    2cfc:	d6 c1       	rjmp	.+940    	; 0x30aa <uECC_sign_with_k+0x486>
    2cfe:	17 01       	movw	r2, r14
    2d00:	c5 53       	subi	r28, 0x35	; 53
    2d02:	df 4f       	sbci	r29, 0xFF	; 255
    2d04:	19 83       	std	Y+1, r17	; 0x01
    2d06:	08 83       	st	Y, r16
    2d08:	cb 5c       	subi	r28, 0xCB	; 203
    2d0a:	d0 40       	sbci	r29, 0x00	; 0
    2d0c:	49 01       	movw	r8, r18
    2d0e:	cf 52       	subi	r28, 0x2F	; 47
    2d10:	df 4f       	sbci	r29, 0xFF	; 255
    2d12:	59 83       	std	Y+1, r21	; 0x01
    2d14:	48 83       	st	Y, r20
    2d16:	c1 5d       	subi	r28, 0xD1	; 209
    2d18:	d0 40       	sbci	r29, 0x00	; 0
    2d1a:	c1 53       	subi	r28, 0x31	; 49
    2d1c:	df 4f       	sbci	r29, 0xFF	; 255
    2d1e:	79 83       	std	Y+1, r23	; 0x01
    2d20:	68 83       	st	Y, r22
    2d22:	cf 5c       	subi	r28, 0xCF	; 207
    2d24:	d0 40       	sbci	r29, 0x00	; 0
    2d26:	c3 53       	subi	r28, 0x33	; 51
    2d28:	df 4f       	sbci	r29, 0xFF	; 255
    2d2a:	99 83       	std	Y+1, r25	; 0x01
    2d2c:	88 83       	st	Y, r24
    2d2e:	cd 5c       	subi	r28, 0xCD	; 205
    2d30:	d0 40       	sbci	r29, 0x00	; 0
    2d32:	8f 01       	movw	r16, r30
    2d34:	15 95       	asr	r17
    2d36:	07 95       	ror	r16
    2d38:	15 95       	asr	r17
    2d3a:	07 95       	ror	r16
    2d3c:	15 95       	asr	r17
    2d3e:	07 95       	ror	r16
    2d40:	cb 53       	subi	r28, 0x3B	; 59
    2d42:	df 4f       	sbci	r29, 0xFF	; 255
    2d44:	19 83       	std	Y+1, r17	; 0x01
    2d46:	08 83       	st	Y, r16
    2d48:	c5 5c       	subi	r28, 0xC5	; 197
    2d4a:	d0 40       	sbci	r29, 0x00	; 0
    2d4c:	c7 01       	movw	r24, r14
    2d4e:	84 96       	adiw	r24, 0x24	; 36
    2d50:	c7 53       	subi	r28, 0x37	; 55
    2d52:	df 4f       	sbci	r29, 0xFF	; 255
    2d54:	99 83       	std	Y+1, r25	; 0x01
    2d56:	88 83       	st	Y, r24
    2d58:	c9 5c       	subi	r28, 0xC9	; 201
    2d5a:	d0 40       	sbci	r29, 0x00	; 0
    2d5c:	cb 53       	subi	r28, 0x3B	; 59
    2d5e:	df 4f       	sbci	r29, 0xFF	; 255
    2d60:	48 81       	ld	r20, Y
    2d62:	c5 5c       	subi	r28, 0xC5	; 197
    2d64:	d0 40       	sbci	r29, 0x00	; 0
    2d66:	b9 01       	movw	r22, r18
    2d68:	0e 94 5c 07 	call	0xeb8	; 0xeb8 <uECC_vli_cmp>
    2d6c:	81 30       	cpi	r24, 0x01	; 1
    2d6e:	09 f0       	breq	.+2      	; 0x2d72 <uECC_sign_with_k+0x14e>
    2d70:	9e cf       	rjmp	.-196    	; 0x2cae <uECC_sign_with_k+0x8a>
    2d72:	97 01       	movw	r18, r14
    2d74:	a3 01       	movw	r20, r6
    2d76:	b5 01       	movw	r22, r10
    2d78:	c4 01       	movw	r24, r8
    2d7a:	ad d9       	rcall	.-3238   	; 0x20d6 <regularize_k>
    2d7c:	c9 53       	subi	r28, 0x39	; 57
    2d7e:	df 4f       	sbci	r29, 0xFF	; 255
    2d80:	08 81       	ld	r16, Y
    2d82:	19 81       	ldd	r17, Y+1	; 0x01
    2d84:	c7 5c       	subi	r28, 0xC7	; 199
    2d86:	d0 40       	sbci	r29, 0x00	; 0
    2d88:	0f 5f       	subi	r16, 0xFF	; 255
    2d8a:	1f 4f       	sbci	r17, 0xFF	; 255
    2d8c:	21 e0       	ldi	r18, 0x01	; 1
    2d8e:	30 e0       	ldi	r19, 0x00	; 0
    2d90:	81 11       	cpse	r24, r1
    2d92:	93 c1       	rjmp	.+806    	; 0x30ba <uECC_sign_with_k+0x496>
    2d94:	22 0f       	add	r18, r18
    2d96:	33 1f       	adc	r19, r19
    2d98:	e1 ec       	ldi	r30, 0xC1	; 193
    2d9a:	f0 e0       	ldi	r31, 0x00	; 0
    2d9c:	ec 0f       	add	r30, r28
    2d9e:	fd 1f       	adc	r31, r29
    2da0:	e2 0f       	add	r30, r18
    2da2:	f3 1f       	adc	r31, r19
    2da4:	40 81       	ld	r20, Z
    2da6:	51 81       	ldd	r21, Z+1	; 0x01
    2da8:	71 01       	movw	r14, r2
    2daa:	20 e0       	ldi	r18, 0x00	; 0
    2dac:	30 e0       	ldi	r19, 0x00	; 0
    2dae:	b1 01       	movw	r22, r2
    2db0:	6c 5b       	subi	r22, 0xBC	; 188
    2db2:	7f 4f       	sbci	r23, 0xFF	; 255
    2db4:	ce 01       	movw	r24, r28
    2db6:	8f 5b       	subi	r24, 0xBF	; 191
    2db8:	9f 4f       	sbci	r25, 0xFF	; 255
    2dba:	bb dc       	rcall	.-1674   	; 0x2732 <EccPoint_mult>
    2dbc:	fe 01       	movw	r30, r28
    2dbe:	ef 5b       	subi	r30, 0xBF	; 191
    2dc0:	ff 4f       	sbci	r31, 0xFF	; 255
    2dc2:	df 01       	movw	r26, r30
    2dc4:	a4 0d       	add	r26, r4
    2dc6:	b5 1d       	adc	r27, r5
    2dc8:	80 e0       	ldi	r24, 0x00	; 0
    2dca:	91 91       	ld	r25, Z+
    2dcc:	89 2b       	or	r24, r25
    2dce:	ea 17       	cp	r30, r26
    2dd0:	fb 07       	cpc	r31, r27
    2dd2:	d9 f7       	brne	.-10     	; 0x2dca <uECC_sign_with_k+0x1a6>
    2dd4:	88 23       	and	r24, r24
    2dd6:	09 f4       	brne	.+2      	; 0x2dda <uECC_sign_with_k+0x1b6>
    2dd8:	6a cf       	rjmp	.-300    	; 0x2cae <uECC_sign_with_k+0x8a>
    2dda:	80 91 2e 05 	lds	r24, 0x052E	; 0x80052e <g_rng_function>
    2dde:	90 91 2f 05 	lds	r25, 0x052F	; 0x80052f <g_rng_function+0x1>
    2de2:	89 2b       	or	r24, r25
    2de4:	09 f4       	brne	.+2      	; 0x2de8 <uECC_sign_with_k+0x1c4>
    2de6:	6f c1       	rjmp	.+734    	; 0x30c6 <uECC_sign_with_k+0x4a2>
    2de8:	cb 53       	subi	r28, 0x3B	; 59
    2dea:	df 4f       	sbci	r29, 0xFF	; 255
    2dec:	48 81       	ld	r20, Y
    2dee:	c5 5c       	subi	r28, 0xC5	; 197
    2df0:	d0 40       	sbci	r29, 0x00	; 0
    2df2:	c7 53       	subi	r28, 0x37	; 55
    2df4:	df 4f       	sbci	r29, 0xFF	; 255
    2df6:	68 81       	ld	r22, Y
    2df8:	79 81       	ldd	r23, Y+1	; 0x01
    2dfa:	c9 5c       	subi	r28, 0xC9	; 201
    2dfc:	d0 40       	sbci	r29, 0x00	; 0
    2dfe:	c5 01       	movw	r24, r10
    2e00:	c9 d9       	rcall	.-3182   	; 0x2194 <uECC_generate_random_int>
    2e02:	89 2b       	or	r24, r25
    2e04:	09 f4       	brne	.+2      	; 0x2e08 <uECC_sign_with_k+0x1e4>
    2e06:	53 cf       	rjmp	.-346    	; 0x2cae <uECC_sign_with_k+0x8a>
    2e08:	cb 53       	subi	r28, 0x3B	; 59
    2e0a:	df 4f       	sbci	r29, 0xFF	; 255
    2e0c:	28 81       	ld	r18, Y
    2e0e:	c5 5c       	subi	r28, 0xC5	; 197
    2e10:	d0 40       	sbci	r29, 0x00	; 0
    2e12:	a5 01       	movw	r20, r10
    2e14:	b4 01       	movw	r22, r8
    2e16:	ce 01       	movw	r24, r28
    2e18:	01 96       	adiw	r24, 0x01	; 1
    2e1a:	0e 94 e5 06 	call	0xdca	; 0xdca <uECC_vli_mult>
    2e1e:	cb 53       	subi	r28, 0x3B	; 59
    2e20:	df 4f       	sbci	r29, 0xFF	; 255
    2e22:	28 81       	ld	r18, Y
    2e24:	c5 5c       	subi	r28, 0xC5	; 197
    2e26:	d0 40       	sbci	r29, 0x00	; 0
    2e28:	c7 53       	subi	r28, 0x37	; 55
    2e2a:	df 4f       	sbci	r29, 0xFF	; 255
    2e2c:	48 81       	ld	r20, Y
    2e2e:	59 81       	ldd	r21, Y+1	; 0x01
    2e30:	c9 5c       	subi	r28, 0xC9	; 201
    2e32:	d0 40       	sbci	r29, 0x00	; 0
    2e34:	be 01       	movw	r22, r28
    2e36:	6f 5f       	subi	r22, 0xFF	; 255
    2e38:	7f 4f       	sbci	r23, 0xFF	; 255
    2e3a:	c4 01       	movw	r24, r8
    2e3c:	0e 94 e1 07 	call	0xfc2	; 0xfc2 <uECC_vli_mmod>
    2e40:	cb 53       	subi	r28, 0x3B	; 59
    2e42:	df 4f       	sbci	r29, 0xFF	; 255
    2e44:	28 81       	ld	r18, Y
    2e46:	c5 5c       	subi	r28, 0xC5	; 197
    2e48:	d0 40       	sbci	r29, 0x00	; 0
    2e4a:	c7 53       	subi	r28, 0x37	; 55
    2e4c:	df 4f       	sbci	r29, 0xFF	; 255
    2e4e:	48 81       	ld	r20, Y
    2e50:	59 81       	ldd	r21, Y+1	; 0x01
    2e52:	c9 5c       	subi	r28, 0xC9	; 201
    2e54:	d0 40       	sbci	r29, 0x00	; 0
    2e56:	b4 01       	movw	r22, r8
    2e58:	c4 01       	movw	r24, r8
    2e5a:	01 db       	rcall	.-2558   	; 0x245e <uECC_vli_modInv>
    2e5c:	cb 53       	subi	r28, 0x3B	; 59
    2e5e:	df 4f       	sbci	r29, 0xFF	; 255
    2e60:	28 81       	ld	r18, Y
    2e62:	c5 5c       	subi	r28, 0xC5	; 197
    2e64:	d0 40       	sbci	r29, 0x00	; 0
    2e66:	a5 01       	movw	r20, r10
    2e68:	b4 01       	movw	r22, r8
    2e6a:	ce 01       	movw	r24, r28
    2e6c:	01 96       	adiw	r24, 0x01	; 1
    2e6e:	0e 94 e5 06 	call	0xdca	; 0xdca <uECC_vli_mult>
    2e72:	cb 53       	subi	r28, 0x3B	; 59
    2e74:	df 4f       	sbci	r29, 0xFF	; 255
    2e76:	28 81       	ld	r18, Y
    2e78:	c5 5c       	subi	r28, 0xC5	; 197
    2e7a:	d0 40       	sbci	r29, 0x00	; 0
    2e7c:	c7 53       	subi	r28, 0x37	; 55
    2e7e:	df 4f       	sbci	r29, 0xFF	; 255
    2e80:	48 81       	ld	r20, Y
    2e82:	59 81       	ldd	r21, Y+1	; 0x01
    2e84:	c9 5c       	subi	r28, 0xC9	; 201
    2e86:	d0 40       	sbci	r29, 0x00	; 0
    2e88:	be 01       	movw	r22, r28
    2e8a:	6f 5f       	subi	r22, 0xFF	; 255
    2e8c:	7f 4f       	sbci	r23, 0xFF	; 255
    2e8e:	c4 01       	movw	r24, r8
    2e90:	0e 94 e1 07 	call	0xfc2	; 0xfc2 <uECC_vli_mmod>
    2e94:	f1 01       	movw	r30, r2
    2e96:	21 81       	ldd	r18, Z+1	; 0x01
    2e98:	02 2e       	mov	r0, r18
    2e9a:	00 0c       	add	r0, r0
    2e9c:	33 0b       	sbc	r19, r19
    2e9e:	12 16       	cp	r1, r18
    2ea0:	13 06       	cpc	r1, r19
    2ea2:	34 f5       	brge	.+76     	; 0x2ef0 <uECC_sign_with_k+0x2cc>
    2ea4:	a9 01       	movw	r20, r18
    2ea6:	41 50       	subi	r20, 0x01	; 1
    2ea8:	51 09       	sbc	r21, r1
    2eaa:	e0 e0       	ldi	r30, 0x00	; 0
    2eac:	f0 e0       	ldi	r31, 0x00	; 0
    2eae:	60 e0       	ldi	r22, 0x00	; 0
    2eb0:	80 e0       	ldi	r24, 0x00	; 0
    2eb2:	90 e0       	ldi	r25, 0x00	; 0
    2eb4:	c5 53       	subi	r28, 0x35	; 53
    2eb6:	df 4f       	sbci	r29, 0xFF	; 255
    2eb8:	a8 81       	ld	r26, Y
    2eba:	b9 81       	ldd	r27, Y+1	; 0x01
    2ebc:	cb 5c       	subi	r28, 0xCB	; 203
    2ebe:	d0 40       	sbci	r29, 0x00	; 0
    2ec0:	8a 0f       	add	r24, r26
    2ec2:	9b 1f       	adc	r25, r27
    2ec4:	8a 01       	movw	r16, r20
    2ec6:	0e 1b       	sub	r16, r30
    2ec8:	1f 0b       	sbc	r17, r31
    2eca:	f8 01       	movw	r30, r16
    2ecc:	01 e4       	ldi	r16, 0x41	; 65
    2ece:	10 e0       	ldi	r17, 0x00	; 0
    2ed0:	0c 0f       	add	r16, r28
    2ed2:	1d 1f       	adc	r17, r29
    2ed4:	e0 0f       	add	r30, r16
    2ed6:	f1 1f       	adc	r31, r17
    2ed8:	70 81       	ld	r23, Z
    2eda:	fc 01       	movw	r30, r24
    2edc:	70 83       	st	Z, r23
    2ede:	6f 5f       	subi	r22, 0xFF	; 255
    2ee0:	86 2f       	mov	r24, r22
    2ee2:	06 2e       	mov	r0, r22
    2ee4:	00 0c       	add	r0, r0
    2ee6:	99 0b       	sbc	r25, r25
    2ee8:	fc 01       	movw	r30, r24
    2eea:	82 17       	cp	r24, r18
    2eec:	93 07       	cpc	r25, r19
    2eee:	44 f3       	brlt	.-48     	; 0x2ec0 <uECC_sign_with_k+0x29c>
    2ef0:	f1 01       	movw	r30, r2
    2ef2:	82 81       	ldd	r24, Z+2	; 0x02
    2ef4:	93 81       	ldd	r25, Z+3	; 0x03
    2ef6:	9c 01       	movw	r18, r24
    2ef8:	29 5f       	subi	r18, 0xF9	; 249
    2efa:	3f 4f       	sbci	r19, 0xFF	; 255
    2efc:	37 fd       	sbrc	r19, 7
    2efe:	e0 c0       	rjmp	.+448    	; 0x30c0 <uECC_sign_with_k+0x49c>
    2f00:	35 95       	asr	r19
    2f02:	27 95       	ror	r18
    2f04:	35 95       	asr	r19
    2f06:	27 95       	ror	r18
    2f08:	35 95       	asr	r19
    2f0a:	27 95       	ror	r18
    2f0c:	12 16       	cp	r1, r18
    2f0e:	13 06       	cpc	r1, r19
    2f10:	14 f5       	brge	.+68     	; 0x2f56 <uECC_sign_with_k+0x332>
    2f12:	a9 01       	movw	r20, r18
    2f14:	41 50       	subi	r20, 0x01	; 1
    2f16:	51 09       	sbc	r21, r1
    2f18:	e0 e0       	ldi	r30, 0x00	; 0
    2f1a:	f0 e0       	ldi	r31, 0x00	; 0
    2f1c:	60 e0       	ldi	r22, 0x00	; 0
    2f1e:	80 e0       	ldi	r24, 0x00	; 0
    2f20:	90 e0       	ldi	r25, 0x00	; 0
    2f22:	c3 53       	subi	r28, 0x33	; 51
    2f24:	df 4f       	sbci	r29, 0xFF	; 255
    2f26:	a8 81       	ld	r26, Y
    2f28:	b9 81       	ldd	r27, Y+1	; 0x01
    2f2a:	cd 5c       	subi	r28, 0xCD	; 205
    2f2c:	d0 40       	sbci	r29, 0x00	; 0
    2f2e:	8a 0d       	add	r24, r10
    2f30:	9b 1d       	adc	r25, r11
    2f32:	8a 01       	movw	r16, r20
    2f34:	0e 1b       	sub	r16, r30
    2f36:	1f 0b       	sbc	r17, r31
    2f38:	f8 01       	movw	r30, r16
    2f3a:	ea 0f       	add	r30, r26
    2f3c:	fb 1f       	adc	r31, r27
    2f3e:	70 81       	ld	r23, Z
    2f40:	fc 01       	movw	r30, r24
    2f42:	70 83       	st	Z, r23
    2f44:	6f 5f       	subi	r22, 0xFF	; 255
    2f46:	86 2f       	mov	r24, r22
    2f48:	06 2e       	mov	r0, r22
    2f4a:	00 0c       	add	r0, r0
    2f4c:	99 0b       	sbc	r25, r25
    2f4e:	fc 01       	movw	r30, r24
    2f50:	82 17       	cp	r24, r18
    2f52:	93 07       	cpc	r25, r19
    2f54:	64 f3       	brlt	.-40     	; 0x2f2e <uECC_sign_with_k+0x30a>
    2f56:	f3 01       	movw	r30, r6
    2f58:	cb 53       	subi	r28, 0x3B	; 59
    2f5a:	df 4f       	sbci	r29, 0xFF	; 255
    2f5c:	08 81       	ld	r16, Y
    2f5e:	c5 5c       	subi	r28, 0xC5	; 197
    2f60:	d0 40       	sbci	r29, 0x00	; 0
    2f62:	e0 0f       	add	r30, r16
    2f64:	f1 1d       	adc	r31, r1
    2f66:	07 fd       	sbrc	r16, 7
    2f68:	fa 95       	dec	r31
    2f6a:	31 97       	sbiw	r30, 0x01	; 1
    2f6c:	10 82       	st	Z, r1
    2f6e:	4d 2d       	mov	r20, r13
    2f70:	be 01       	movw	r22, r28
    2f72:	6f 5b       	subi	r22, 0xBF	; 191
    2f74:	7f 4f       	sbci	r23, 0xFF	; 255
    2f76:	c3 01       	movw	r24, r6
    2f78:	0e 94 87 04 	call	0x90e	; 0x90e <uECC_vli_set>
    2f7c:	cb 53       	subi	r28, 0x3B	; 59
    2f7e:	df 4f       	sbci	r29, 0xFF	; 255
    2f80:	28 81       	ld	r18, Y
    2f82:	c5 5c       	subi	r28, 0xC5	; 197
    2f84:	d0 40       	sbci	r29, 0x00	; 0
    2f86:	a3 01       	movw	r20, r6
    2f88:	b5 01       	movw	r22, r10
    2f8a:	ce 01       	movw	r24, r28
    2f8c:	01 96       	adiw	r24, 0x01	; 1
    2f8e:	0e 94 e5 06 	call	0xdca	; 0xdca <uECC_vli_mult>
    2f92:	cb 53       	subi	r28, 0x3B	; 59
    2f94:	df 4f       	sbci	r29, 0xFF	; 255
    2f96:	28 81       	ld	r18, Y
    2f98:	c5 5c       	subi	r28, 0xC5	; 197
    2f9a:	d0 40       	sbci	r29, 0x00	; 0
    2f9c:	c7 53       	subi	r28, 0x37	; 55
    2f9e:	df 4f       	sbci	r29, 0xFF	; 255
    2fa0:	48 81       	ld	r20, Y
    2fa2:	59 81       	ldd	r21, Y+1	; 0x01
    2fa4:	c9 5c       	subi	r28, 0xC9	; 201
    2fa6:	d0 40       	sbci	r29, 0x00	; 0
    2fa8:	be 01       	movw	r22, r28
    2faa:	6f 5f       	subi	r22, 0xFF	; 255
    2fac:	7f 4f       	sbci	r23, 0xFF	; 255
    2fae:	c3 01       	movw	r24, r6
    2fb0:	0e 94 e1 07 	call	0xfc2	; 0xfc2 <uECC_vli_mmod>
    2fb4:	91 01       	movw	r18, r2
    2fb6:	cf 52       	subi	r28, 0x2F	; 47
    2fb8:	df 4f       	sbci	r29, 0xFF	; 255
    2fba:	48 81       	ld	r20, Y
    2fbc:	59 81       	ldd	r21, Y+1	; 0x01
    2fbe:	c1 5d       	subi	r28, 0xD1	; 209
    2fc0:	d0 40       	sbci	r29, 0x00	; 0
    2fc2:	c1 53       	subi	r28, 0x31	; 49
    2fc4:	df 4f       	sbci	r29, 0xFF	; 255
    2fc6:	68 81       	ld	r22, Y
    2fc8:	79 81       	ldd	r23, Y+1	; 0x01
    2fca:	cf 5c       	subi	r28, 0xCF	; 207
    2fcc:	d0 40       	sbci	r29, 0x00	; 0
    2fce:	c5 01       	movw	r24, r10
    2fd0:	59 d9       	rcall	.-3406   	; 0x2284 <bits2int>
    2fd2:	cb 53       	subi	r28, 0x3B	; 59
    2fd4:	df 4f       	sbci	r29, 0xFF	; 255
    2fd6:	08 81       	ld	r16, Y
    2fd8:	c5 5c       	subi	r28, 0xC5	; 197
    2fda:	d0 40       	sbci	r29, 0x00	; 0
    2fdc:	c7 53       	subi	r28, 0x37	; 55
    2fde:	df 4f       	sbci	r29, 0xFF	; 255
    2fe0:	28 81       	ld	r18, Y
    2fe2:	39 81       	ldd	r19, Y+1	; 0x01
    2fe4:	c9 5c       	subi	r28, 0xC9	; 201
    2fe6:	d0 40       	sbci	r29, 0x00	; 0
    2fe8:	a3 01       	movw	r20, r6
    2fea:	b5 01       	movw	r22, r10
    2fec:	c3 01       	movw	r24, r6
    2fee:	0e 94 94 07 	call	0xf28	; 0xf28 <uECC_vli_modAdd>
    2ff2:	cb 53       	subi	r28, 0x3B	; 59
    2ff4:	df 4f       	sbci	r29, 0xFF	; 255
    2ff6:	28 81       	ld	r18, Y
    2ff8:	c5 5c       	subi	r28, 0xC5	; 197
    2ffa:	d0 40       	sbci	r29, 0x00	; 0
    2ffc:	a4 01       	movw	r20, r8
    2ffe:	b3 01       	movw	r22, r6
    3000:	ce 01       	movw	r24, r28
    3002:	01 96       	adiw	r24, 0x01	; 1
    3004:	0e 94 e5 06 	call	0xdca	; 0xdca <uECC_vli_mult>
    3008:	cb 53       	subi	r28, 0x3B	; 59
    300a:	df 4f       	sbci	r29, 0xFF	; 255
    300c:	28 81       	ld	r18, Y
    300e:	c5 5c       	subi	r28, 0xC5	; 197
    3010:	d0 40       	sbci	r29, 0x00	; 0
    3012:	c7 53       	subi	r28, 0x37	; 55
    3014:	df 4f       	sbci	r29, 0xFF	; 255
    3016:	48 81       	ld	r20, Y
    3018:	59 81       	ldd	r21, Y+1	; 0x01
    301a:	c9 5c       	subi	r28, 0xC9	; 201
    301c:	d0 40       	sbci	r29, 0x00	; 0
    301e:	be 01       	movw	r22, r28
    3020:	6f 5f       	subi	r22, 0xFF	; 255
    3022:	7f 4f       	sbci	r23, 0xFF	; 255
    3024:	c3 01       	movw	r24, r6
    3026:	0e 94 e1 07 	call	0xfc2	; 0xfc2 <uECC_vli_mmod>
    302a:	cb 53       	subi	r28, 0x3B	; 59
    302c:	df 4f       	sbci	r29, 0xFF	; 255
    302e:	68 81       	ld	r22, Y
    3030:	c5 5c       	subi	r28, 0xC5	; 197
    3032:	d0 40       	sbci	r29, 0x00	; 0
    3034:	c3 01       	movw	r24, r6
    3036:	0e 94 21 07 	call	0xe42	; 0xe42 <uECC_vli_numBits>
    303a:	f1 01       	movw	r30, r2
    303c:	61 81       	ldd	r22, Z+1	; 0x01
    303e:	06 2e       	mov	r0, r22
    3040:	00 0c       	add	r0, r0
    3042:	77 0b       	sbc	r23, r23
    3044:	9b 01       	movw	r18, r22
    3046:	22 0f       	add	r18, r18
    3048:	33 1f       	adc	r19, r19
    304a:	22 0f       	add	r18, r18
    304c:	33 1f       	adc	r19, r19
    304e:	22 0f       	add	r18, r18
    3050:	33 1f       	adc	r19, r19
    3052:	28 17       	cp	r18, r24
    3054:	39 07       	cpc	r19, r25
    3056:	0c f4       	brge	.+2      	; 0x305a <uECC_sign_with_k+0x436>
    3058:	2a ce       	rjmp	.-940    	; 0x2cae <uECC_sign_with_k+0x8a>
    305a:	16 16       	cp	r1, r22
    305c:	17 06       	cpc	r1, r23
    305e:	14 f5       	brge	.+68     	; 0x30a4 <uECC_sign_with_k+0x480>
    3060:	db 01       	movw	r26, r22
    3062:	11 97       	sbiw	r26, 0x01	; 1
    3064:	40 e0       	ldi	r20, 0x00	; 0
    3066:	50 e0       	ldi	r21, 0x00	; 0
    3068:	20 e0       	ldi	r18, 0x00	; 0
    306a:	80 e0       	ldi	r24, 0x00	; 0
    306c:	90 e0       	ldi	r25, 0x00	; 0
    306e:	c5 53       	subi	r28, 0x35	; 53
    3070:	df 4f       	sbci	r29, 0xFF	; 255
    3072:	08 81       	ld	r16, Y
    3074:	19 81       	ldd	r17, Y+1	; 0x01
    3076:	cb 5c       	subi	r28, 0xCB	; 203
    3078:	d0 40       	sbci	r29, 0x00	; 0
    307a:	06 0f       	add	r16, r22
    307c:	17 1f       	adc	r17, r23
    307e:	80 0f       	add	r24, r16
    3080:	91 1f       	adc	r25, r17
    3082:	fd 01       	movw	r30, r26
    3084:	e4 1b       	sub	r30, r20
    3086:	f5 0b       	sbc	r31, r21
    3088:	e6 0d       	add	r30, r6
    308a:	f7 1d       	adc	r31, r7
    308c:	30 81       	ld	r19, Z
    308e:	fc 01       	movw	r30, r24
    3090:	30 83       	st	Z, r19
    3092:	2f 5f       	subi	r18, 0xFF	; 255
    3094:	82 2f       	mov	r24, r18
    3096:	02 2e       	mov	r0, r18
    3098:	00 0c       	add	r0, r0
    309a:	99 0b       	sbc	r25, r25
    309c:	ac 01       	movw	r20, r24
    309e:	86 17       	cp	r24, r22
    30a0:	97 07       	cpc	r25, r23
    30a2:	6c f3       	brlt	.-38     	; 0x307e <uECC_sign_with_k+0x45a>
    30a4:	81 e0       	ldi	r24, 0x01	; 1
    30a6:	90 e0       	ldi	r25, 0x00	; 0
    30a8:	04 ce       	rjmp	.-1016   	; 0x2cb2 <uECC_sign_with_k+0x8e>
    30aa:	c9 53       	subi	r28, 0x39	; 57
    30ac:	df 4f       	sbci	r29, 0xFF	; 255
    30ae:	e8 81       	ld	r30, Y
    30b0:	f9 81       	ldd	r31, Y+1	; 0x01
    30b2:	c7 5c       	subi	r28, 0xC7	; 199
    30b4:	d0 40       	sbci	r29, 0x00	; 0
    30b6:	3e 96       	adiw	r30, 0x0e	; 14
    30b8:	22 ce       	rjmp	.-956    	; 0x2cfe <uECC_sign_with_k+0xda>
    30ba:	20 e0       	ldi	r18, 0x00	; 0
    30bc:	30 e0       	ldi	r19, 0x00	; 0
    30be:	6a ce       	rjmp	.-812    	; 0x2d94 <uECC_sign_with_k+0x170>
    30c0:	29 5f       	subi	r18, 0xF9	; 249
    30c2:	3f 4f       	sbci	r19, 0xFF	; 255
    30c4:	1d cf       	rjmp	.-454    	; 0x2f00 <uECC_sign_with_k+0x2dc>
    30c6:	cb 53       	subi	r28, 0x3B	; 59
    30c8:	df 4f       	sbci	r29, 0xFF	; 255
    30ca:	68 81       	ld	r22, Y
    30cc:	c5 5c       	subi	r28, 0xC5	; 197
    30ce:	d0 40       	sbci	r29, 0x00	; 0
    30d0:	c5 01       	movw	r24, r10
    30d2:	0e 94 60 04 	call	0x8c0	; 0x8c0 <uECC_vli_clear>
    30d6:	81 e0       	ldi	r24, 0x01	; 1
    30d8:	f5 01       	movw	r30, r10
    30da:	80 83       	st	Z, r24
    30dc:	95 ce       	rjmp	.-726    	; 0x2e08 <uECC_sign_with_k+0x1e4>

000030de <uECC_set_rng>:
    30de:	90 93 2f 05 	sts	0x052F, r25	; 0x80052f <g_rng_function+0x1>
    30e2:	80 93 2e 05 	sts	0x052E, r24	; 0x80052e <g_rng_function>
    30e6:	08 95       	ret

000030e8 <uECC_secp256r1>:
    30e8:	82 e2       	ldi	r24, 0x22	; 34
    30ea:	91 e0       	ldi	r25, 0x01	; 1
    30ec:	08 95       	ret

000030ee <uECC_shared_secret>:
    30ee:	2f 92       	push	r2
    30f0:	3f 92       	push	r3
    30f2:	4f 92       	push	r4
    30f4:	5f 92       	push	r5
    30f6:	6f 92       	push	r6
    30f8:	7f 92       	push	r7
    30fa:	8f 92       	push	r8
    30fc:	9f 92       	push	r9
    30fe:	af 92       	push	r10
    3100:	bf 92       	push	r11
    3102:	cf 92       	push	r12
    3104:	df 92       	push	r13
    3106:	ef 92       	push	r14
    3108:	ff 92       	push	r15
    310a:	0f 93       	push	r16
    310c:	1f 93       	push	r17
    310e:	cf 93       	push	r28
    3110:	df 93       	push	r29
    3112:	cd b7       	in	r28, 0x3d	; 61
    3114:	de b7       	in	r29, 0x3e	; 62
    3116:	c4 58       	subi	r28, 0x84	; 132
    3118:	d1 09       	sbc	r29, r1
    311a:	0f b6       	in	r0, 0x3f	; 63
    311c:	f8 94       	cli
    311e:	de bf       	out	0x3e, r29	; 62
    3120:	0f be       	out	0x3f, r0	; 63
    3122:	cd bf       	out	0x3d, r28	; 61
    3124:	3a 01       	movw	r6, r20
    3126:	49 01       	movw	r8, r18
    3128:	fe 01       	movw	r30, r28
    312a:	ef 59       	subi	r30, 0x9F	; 159
    312c:	ff 4f       	sbci	r31, 0xFF	; 255
    312e:	cf 57       	subi	r28, 0x7F	; 127
    3130:	df 4f       	sbci	r29, 0xFF	; 255
    3132:	f9 83       	std	Y+1, r31	; 0x01
    3134:	e8 83       	st	Y, r30
    3136:	c1 58       	subi	r28, 0x81	; 129
    3138:	d0 40       	sbci	r29, 0x00	; 0
    313a:	7e 01       	movw	r14, r28
    313c:	21 e4       	ldi	r18, 0x41	; 65
    313e:	e2 0e       	add	r14, r18
    3140:	f1 1c       	adc	r15, r1
    3142:	cd 57       	subi	r28, 0x7D	; 125
    3144:	df 4f       	sbci	r29, 0xFF	; 255
    3146:	f9 82       	std	Y+1, r15	; 0x01
    3148:	e8 82       	st	Y, r14
    314a:	c3 58       	subi	r28, 0x83	; 131
    314c:	d0 40       	sbci	r29, 0x00	; 0
    314e:	d4 01       	movw	r26, r8
    3150:	0c 91       	ld	r16, X
    3152:	11 96       	adiw	r26, 0x01	; 1
    3154:	ac 90       	ld	r10, X
    3156:	11 97       	sbiw	r26, 0x01	; 1
    3158:	12 96       	adiw	r26, 0x02	; 2
    315a:	2d 91       	ld	r18, X+
    315c:	3c 91       	ld	r19, X
    315e:	13 97       	sbiw	r26, 0x03	; 3
    3160:	d9 01       	movw	r26, r18
    3162:	17 96       	adiw	r26, 0x07	; 7
    3164:	b7 fd       	sbrc	r27, 7
    3166:	02 c1       	rjmp	.+516    	; 0x336c <uECC_shared_secret+0x27e>
    3168:	1d 01       	movw	r2, r26
    316a:	35 94       	asr	r3
    316c:	27 94       	ror	r2
    316e:	35 94       	asr	r3
    3170:	27 94       	ror	r2
    3172:	35 94       	asr	r3
    3174:	27 94       	ror	r2
    3176:	12 14       	cp	r1, r2
    3178:	13 04       	cpc	r1, r3
    317a:	f4 f4       	brge	.+60     	; 0x31b8 <uECC_shared_secret+0xca>
    317c:	61 01       	movw	r12, r2
    317e:	b1 e0       	ldi	r27, 0x01	; 1
    3180:	cb 1a       	sub	r12, r27
    3182:	d1 08       	sbc	r13, r1
    3184:	40 e0       	ldi	r20, 0x00	; 0
    3186:	50 e0       	ldi	r21, 0x00	; 0
    3188:	10 e0       	ldi	r17, 0x00	; 0
    318a:	20 e0       	ldi	r18, 0x00	; 0
    318c:	30 e0       	ldi	r19, 0x00	; 0
    318e:	2e 0f       	add	r18, r30
    3190:	3f 1f       	adc	r19, r31
    3192:	26 01       	movw	r4, r12
    3194:	44 1a       	sub	r4, r20
    3196:	55 0a       	sbc	r5, r21
    3198:	a2 01       	movw	r20, r4
    319a:	46 0f       	add	r20, r22
    319c:	57 1f       	adc	r21, r23
    319e:	da 01       	movw	r26, r20
    31a0:	4c 91       	ld	r20, X
    31a2:	d9 01       	movw	r26, r18
    31a4:	4c 93       	st	X, r20
    31a6:	1f 5f       	subi	r17, 0xFF	; 255
    31a8:	21 2f       	mov	r18, r17
    31aa:	01 2e       	mov	r0, r17
    31ac:	00 0c       	add	r0, r0
    31ae:	33 0b       	sbc	r19, r19
    31b0:	a9 01       	movw	r20, r18
    31b2:	22 15       	cp	r18, r2
    31b4:	33 05       	cpc	r19, r3
    31b6:	5c f3       	brlt	.-42     	; 0x318e <uECC_shared_secret+0xa0>
    31b8:	0a 2c       	mov	r0, r10
    31ba:	00 0c       	add	r0, r0
    31bc:	bb 08       	sbc	r11, r11
    31be:	1a 14       	cp	r1, r10
    31c0:	1b 04       	cpc	r1, r11
    31c2:	e4 f5       	brge	.+120    	; 0x323c <uECC_shared_secret+0x14e>
    31c4:	a5 01       	movw	r20, r10
    31c6:	41 50       	subi	r20, 0x01	; 1
    31c8:	51 09       	sbc	r21, r1
    31ca:	60 e0       	ldi	r22, 0x00	; 0
    31cc:	70 e0       	ldi	r23, 0x00	; 0
    31ce:	10 e0       	ldi	r17, 0x00	; 0
    31d0:	20 e0       	ldi	r18, 0x00	; 0
    31d2:	30 e0       	ldi	r19, 0x00	; 0
    31d4:	de 01       	movw	r26, r28
    31d6:	11 96       	adiw	r26, 0x01	; 1
    31d8:	6d 01       	movw	r12, r26
    31da:	2c 0d       	add	r18, r12
    31dc:	3d 1d       	adc	r19, r13
    31de:	da 01       	movw	r26, r20
    31e0:	a6 1b       	sub	r26, r22
    31e2:	b7 0b       	sbc	r27, r23
    31e4:	a8 0f       	add	r26, r24
    31e6:	b9 1f       	adc	r27, r25
    31e8:	6c 91       	ld	r22, X
    31ea:	d9 01       	movw	r26, r18
    31ec:	6c 93       	st	X, r22
    31ee:	1f 5f       	subi	r17, 0xFF	; 255
    31f0:	21 2f       	mov	r18, r17
    31f2:	01 2e       	mov	r0, r17
    31f4:	00 0c       	add	r0, r0
    31f6:	33 0b       	sbc	r19, r19
    31f8:	b9 01       	movw	r22, r18
    31fa:	2a 15       	cp	r18, r10
    31fc:	3b 05       	cpc	r19, r11
    31fe:	6c f3       	brlt	.-38     	; 0x31da <uECC_shared_secret+0xec>
    3200:	60 e0       	ldi	r22, 0x00	; 0
    3202:	70 e0       	ldi	r23, 0x00	; 0
    3204:	10 e0       	ldi	r17, 0x00	; 0
    3206:	20 e0       	ldi	r18, 0x00	; 0
    3208:	30 e0       	ldi	r19, 0x00	; 0
    320a:	8a 0d       	add	r24, r10
    320c:	9b 1d       	adc	r25, r11
    320e:	c0 0e       	add	r12, r16
    3210:	d1 1c       	adc	r13, r1
    3212:	07 fd       	sbrc	r16, 7
    3214:	da 94       	dec	r13
    3216:	2c 0d       	add	r18, r12
    3218:	3d 1d       	adc	r19, r13
    321a:	da 01       	movw	r26, r20
    321c:	a6 1b       	sub	r26, r22
    321e:	b7 0b       	sbc	r27, r23
    3220:	a8 0f       	add	r26, r24
    3222:	b9 1f       	adc	r27, r25
    3224:	6c 91       	ld	r22, X
    3226:	d9 01       	movw	r26, r18
    3228:	6c 93       	st	X, r22
    322a:	1f 5f       	subi	r17, 0xFF	; 255
    322c:	21 2f       	mov	r18, r17
    322e:	01 2e       	mov	r0, r17
    3230:	00 0c       	add	r0, r0
    3232:	33 0b       	sbc	r19, r19
    3234:	b9 01       	movw	r22, r18
    3236:	2a 15       	cp	r18, r10
    3238:	3b 05       	cpc	r19, r11
    323a:	6c f3       	brlt	.-38     	; 0x3216 <uECC_shared_secret+0x128>
    323c:	94 01       	movw	r18, r8
    323e:	a7 01       	movw	r20, r14
    3240:	bf 01       	movw	r22, r30
    3242:	cf 01       	movw	r24, r30
    3244:	0e 94 6b 10 	call	0x20d6	; 0x20d6 <regularize_k>
    3248:	18 2f       	mov	r17, r24
    324a:	80 91 2e 05 	lds	r24, 0x052E	; 0x80052e <g_rng_function>
    324e:	90 91 2f 05 	lds	r25, 0x052F	; 0x80052f <g_rng_function+0x1>
    3252:	89 2b       	or	r24, r25
    3254:	09 f4       	brne	.+2      	; 0x3258 <uECC_shared_secret+0x16a>
    3256:	8c c0       	rjmp	.+280    	; 0x3370 <uECC_shared_secret+0x282>
    3258:	e1 2f       	mov	r30, r17
    325a:	f0 e0       	ldi	r31, 0x00	; 0
    325c:	ee 0f       	add	r30, r30
    325e:	ff 1f       	adc	r31, r31
    3260:	61 e8       	ldi	r22, 0x81	; 129
    3262:	46 2e       	mov	r4, r22
    3264:	51 2c       	mov	r5, r1
    3266:	4c 0e       	add	r4, r28
    3268:	5d 1e       	adc	r5, r29
    326a:	e4 0d       	add	r30, r4
    326c:	f5 1d       	adc	r31, r5
    326e:	c0 80       	ld	r12, Z
    3270:	d1 80       	ldd	r13, Z+1	; 0x01
    3272:	40 2f       	mov	r20, r16
    3274:	b4 01       	movw	r22, r8
    3276:	6c 5f       	subi	r22, 0xFC	; 252
    3278:	7f 4f       	sbci	r23, 0xFF	; 255
    327a:	c6 01       	movw	r24, r12
    327c:	0e 94 ca 10 	call	0x2194	; 0x2194 <uECC_generate_random_int>
    3280:	00 97       	sbiw	r24, 0x00	; 0
    3282:	09 f4       	brne	.+2      	; 0x3286 <uECC_shared_secret+0x198>
    3284:	54 c0       	rjmp	.+168    	; 0x332e <uECC_shared_secret+0x240>
    3286:	d4 01       	movw	r26, r8
    3288:	12 96       	adiw	r26, 0x02	; 2
    328a:	2d 91       	ld	r18, X+
    328c:	3c 91       	ld	r19, X
    328e:	13 97       	sbiw	r26, 0x03	; 3
    3290:	2f 5f       	subi	r18, 0xFF	; 255
    3292:	3f 4f       	sbci	r19, 0xFF	; 255
    3294:	81 e0       	ldi	r24, 0x01	; 1
    3296:	90 e0       	ldi	r25, 0x00	; 0
    3298:	11 11       	cpse	r17, r1
    329a:	63 c0       	rjmp	.+198    	; 0x3362 <uECC_shared_secret+0x274>
    329c:	88 0f       	add	r24, r24
    329e:	99 1f       	adc	r25, r25
    32a0:	e1 e8       	ldi	r30, 0x81	; 129
    32a2:	f0 e0       	ldi	r31, 0x00	; 0
    32a4:	ec 0f       	add	r30, r28
    32a6:	fd 1f       	adc	r31, r29
    32a8:	e8 0f       	add	r30, r24
    32aa:	f9 1f       	adc	r31, r25
    32ac:	40 81       	ld	r20, Z
    32ae:	51 81       	ldd	r21, Z+1	; 0x01
    32b0:	74 01       	movw	r14, r8
    32b2:	89 01       	movw	r16, r18
    32b4:	96 01       	movw	r18, r12
    32b6:	fe 01       	movw	r30, r28
    32b8:	31 96       	adiw	r30, 0x01	; 1
    32ba:	6f 01       	movw	r12, r30
    32bc:	bf 01       	movw	r22, r30
    32be:	cf 01       	movw	r24, r30
    32c0:	38 da       	rcall	.-2960   	; 0x2732 <EccPoint_mult>
    32c2:	1a 14       	cp	r1, r10
    32c4:	1b 04       	cpc	r1, r11
    32c6:	dc f4       	brge	.+54     	; 0x32fe <uECC_shared_secret+0x210>
    32c8:	a5 01       	movw	r20, r10
    32ca:	41 50       	subi	r20, 0x01	; 1
    32cc:	51 09       	sbc	r21, r1
    32ce:	60 e0       	ldi	r22, 0x00	; 0
    32d0:	70 e0       	ldi	r23, 0x00	; 0
    32d2:	20 e0       	ldi	r18, 0x00	; 0
    32d4:	80 e0       	ldi	r24, 0x00	; 0
    32d6:	90 e0       	ldi	r25, 0x00	; 0
    32d8:	d3 01       	movw	r26, r6
    32da:	a8 0f       	add	r26, r24
    32dc:	b9 1f       	adc	r27, r25
    32de:	fa 01       	movw	r30, r20
    32e0:	e6 1b       	sub	r30, r22
    32e2:	f7 0b       	sbc	r31, r23
    32e4:	ec 0d       	add	r30, r12
    32e6:	fd 1d       	adc	r31, r13
    32e8:	30 81       	ld	r19, Z
    32ea:	3c 93       	st	X, r19
    32ec:	2f 5f       	subi	r18, 0xFF	; 255
    32ee:	82 2f       	mov	r24, r18
    32f0:	02 2e       	mov	r0, r18
    32f2:	00 0c       	add	r0, r0
    32f4:	99 0b       	sbc	r25, r25
    32f6:	bc 01       	movw	r22, r24
    32f8:	8a 15       	cp	r24, r10
    32fa:	9b 05       	cpc	r25, r11
    32fc:	6c f3       	brlt	.-38     	; 0x32d8 <uECC_shared_secret+0x1ea>
    32fe:	d4 01       	movw	r26, r8
    3300:	2c 91       	ld	r18, X
    3302:	22 0f       	add	r18, r18
    3304:	12 16       	cp	r1, r18
    3306:	bc f5       	brge	.+110    	; 0x3376 <uECC_shared_secret+0x288>
    3308:	f6 01       	movw	r30, r12
    330a:	21 50       	subi	r18, 0x01	; 1
    330c:	30 e0       	ldi	r19, 0x00	; 0
    330e:	2f 5f       	subi	r18, 0xFF	; 255
    3310:	3f 4f       	sbci	r19, 0xFF	; 255
    3312:	2c 0d       	add	r18, r12
    3314:	3d 1d       	adc	r19, r13
    3316:	80 e0       	ldi	r24, 0x00	; 0
    3318:	91 91       	ld	r25, Z+
    331a:	89 2b       	or	r24, r25
    331c:	e2 17       	cp	r30, r18
    331e:	f3 07       	cpc	r31, r19
    3320:	d9 f7       	brne	.-10     	; 0x3318 <uECC_shared_secret+0x22a>
    3322:	31 e0       	ldi	r19, 0x01	; 1
    3324:	20 e0       	ldi	r18, 0x00	; 0
    3326:	88 23       	and	r24, r24
    3328:	f9 f0       	breq	.+62     	; 0x3368 <uECC_shared_secret+0x27a>
    332a:	83 2f       	mov	r24, r19
    332c:	92 2f       	mov	r25, r18
    332e:	cc 57       	subi	r28, 0x7C	; 124
    3330:	df 4f       	sbci	r29, 0xFF	; 255
    3332:	0f b6       	in	r0, 0x3f	; 63
    3334:	f8 94       	cli
    3336:	de bf       	out	0x3e, r29	; 62
    3338:	0f be       	out	0x3f, r0	; 63
    333a:	cd bf       	out	0x3d, r28	; 61
    333c:	df 91       	pop	r29
    333e:	cf 91       	pop	r28
    3340:	1f 91       	pop	r17
    3342:	0f 91       	pop	r16
    3344:	ff 90       	pop	r15
    3346:	ef 90       	pop	r14
    3348:	df 90       	pop	r13
    334a:	cf 90       	pop	r12
    334c:	bf 90       	pop	r11
    334e:	af 90       	pop	r10
    3350:	9f 90       	pop	r9
    3352:	8f 90       	pop	r8
    3354:	7f 90       	pop	r7
    3356:	6f 90       	pop	r6
    3358:	5f 90       	pop	r5
    335a:	4f 90       	pop	r4
    335c:	3f 90       	pop	r3
    335e:	2f 90       	pop	r2
    3360:	08 95       	ret
    3362:	80 e0       	ldi	r24, 0x00	; 0
    3364:	90 e0       	ldi	r25, 0x00	; 0
    3366:	9a cf       	rjmp	.-204    	; 0x329c <uECC_shared_secret+0x1ae>
    3368:	30 e0       	ldi	r19, 0x00	; 0
    336a:	df cf       	rjmp	.-66     	; 0x332a <uECC_shared_secret+0x23c>
    336c:	17 96       	adiw	r26, 0x07	; 7
    336e:	fc ce       	rjmp	.-520    	; 0x3168 <uECC_shared_secret+0x7a>
    3370:	c1 2c       	mov	r12, r1
    3372:	d1 2c       	mov	r13, r1
    3374:	88 cf       	rjmp	.-240    	; 0x3286 <uECC_shared_secret+0x198>
    3376:	80 e0       	ldi	r24, 0x00	; 0
    3378:	90 e0       	ldi	r25, 0x00	; 0
    337a:	d9 cf       	rjmp	.-78     	; 0x332e <uECC_shared_secret+0x240>

0000337c <uECC_sign>:

int uECC_sign(const uint8_t *private_key,
              const uint8_t *message_hash,
              unsigned hash_size,
              uint8_t *signature,
              uECC_Curve curve) {
    337c:	3f 92       	push	r3
    337e:	4f 92       	push	r4
    3380:	5f 92       	push	r5
    3382:	6f 92       	push	r6
    3384:	7f 92       	push	r7
    3386:	8f 92       	push	r8
    3388:	9f 92       	push	r9
    338a:	af 92       	push	r10
    338c:	bf 92       	push	r11
    338e:	cf 92       	push	r12
    3390:	df 92       	push	r13
    3392:	ef 92       	push	r14
    3394:	ff 92       	push	r15
    3396:	0f 93       	push	r16
    3398:	1f 93       	push	r17
    339a:	cf 93       	push	r28
    339c:	df 93       	push	r29
    339e:	cd b7       	in	r28, 0x3d	; 61
    33a0:	de b7       	in	r29, 0x3e	; 62
    33a2:	a2 97       	sbiw	r28, 0x22	; 34
    33a4:	0f b6       	in	r0, 0x3f	; 63
    33a6:	f8 94       	cli
    33a8:	de bf       	out	0x3e, r29	; 62
    33aa:	0f be       	out	0x3f, r0	; 63
    33ac:	cd bf       	out	0x3d, r28	; 61
    33ae:	3c 01       	movw	r6, r24
    33b0:	4b 01       	movw	r8, r22
    33b2:	5a a3       	std	Y+34, r21	; 0x22
    33b4:	49 a3       	std	Y+33, r20	; 0x21
    33b6:	29 01       	movw	r4, r18
    33b8:	68 01       	movw	r12, r16
    33ba:	58 01       	movw	r10, r16
    33bc:	84 e2       	ldi	r24, 0x24	; 36
    33be:	a8 0e       	add	r10, r24
    33c0:	b1 1c       	adc	r11, r1
    33c2:	90 e4       	ldi	r25, 0x40	; 64
    33c4:	39 2e       	mov	r3, r25
    33c6:	1c c0       	rjmp	.+56     	; 0x3400 <uECC_sign+0x84>
    uECC_word_t k[uECC_MAX_WORDS];
    uECC_word_t tries;

    for (tries = 0; tries < uECC_RNG_MAX_TRIES; ++tries) {
        if (!uECC_generate_random_int(k, curve->n, BITS_TO_WORDS(curve->num_n_bits))) {
    33c8:	55 95       	asr	r21
    33ca:	47 95       	ror	r20
    33cc:	55 95       	asr	r21
    33ce:	47 95       	ror	r20
    33d0:	55 95       	asr	r21
    33d2:	47 95       	ror	r20
    33d4:	b5 01       	movw	r22, r10
    33d6:	ce 01       	movw	r24, r28
    33d8:	01 96       	adiw	r24, 0x01	; 1
    33da:	0e 94 ca 10 	call	0x2194	; 0x2194 <uECC_generate_random_int>
    33de:	89 2b       	or	r24, r25
    33e0:	d1 f0       	breq	.+52     	; 0x3416 <uECC_sign+0x9a>
            return 0;
        }

        if (uECC_sign_with_k(private_key, message_hash, hash_size, k, signature, curve)) {
    33e2:	76 01       	movw	r14, r12
    33e4:	82 01       	movw	r16, r4
    33e6:	9e 01       	movw	r18, r28
    33e8:	2f 5f       	subi	r18, 0xFF	; 255
    33ea:	3f 4f       	sbci	r19, 0xFF	; 255
    33ec:	49 a1       	ldd	r20, Y+33	; 0x21
    33ee:	5a a1       	ldd	r21, Y+34	; 0x22
    33f0:	b4 01       	movw	r22, r8
    33f2:	c3 01       	movw	r24, r6
    33f4:	17 dc       	rcall	.-2002   	; 0x2c24 <uECC_sign_with_k>
    33f6:	89 2b       	or	r24, r25
    33f8:	41 f5       	brne	.+80     	; 0x344a <uECC_sign+0xce>
    33fa:	3a 94       	dec	r3
              uint8_t *signature,
              uECC_Curve curve) {
    uECC_word_t k[uECC_MAX_WORDS];
    uECC_word_t tries;

    for (tries = 0; tries < uECC_RNG_MAX_TRIES; ++tries) {
    33fc:	33 20       	and	r3, r3
    33fe:	59 f0       	breq	.+22     	; 0x3416 <uECC_sign+0x9a>
        if (!uECC_generate_random_int(k, curve->n, BITS_TO_WORDS(curve->num_n_bits))) {
    3400:	f6 01       	movw	r30, r12
    3402:	82 81       	ldd	r24, Z+2	; 0x02
    3404:	93 81       	ldd	r25, Z+3	; 0x03
    3406:	ac 01       	movw	r20, r24
    3408:	49 5f       	subi	r20, 0xF9	; 249
    340a:	5f 4f       	sbci	r21, 0xFF	; 255
    340c:	57 ff       	sbrs	r21, 7
    340e:	dc cf       	rjmp	.-72     	; 0x33c8 <uECC_sign+0x4c>
    3410:	49 5f       	subi	r20, 0xF9	; 249
    3412:	5f 4f       	sbci	r21, 0xFF	; 255
    3414:	d9 cf       	rjmp	.-78     	; 0x33c8 <uECC_sign+0x4c>
            return 0;
    3416:	80 e0       	ldi	r24, 0x00	; 0
    3418:	90 e0       	ldi	r25, 0x00	; 0
        if (uECC_sign_with_k(private_key, message_hash, hash_size, k, signature, curve)) {
            return 1;
        }
    }
    return 0;
}
    341a:	a2 96       	adiw	r28, 0x22	; 34
    341c:	0f b6       	in	r0, 0x3f	; 63
    341e:	f8 94       	cli
    3420:	de bf       	out	0x3e, r29	; 62
    3422:	0f be       	out	0x3f, r0	; 63
    3424:	cd bf       	out	0x3d, r28	; 61
    3426:	df 91       	pop	r29
    3428:	cf 91       	pop	r28
    342a:	1f 91       	pop	r17
    342c:	0f 91       	pop	r16
    342e:	ff 90       	pop	r15
    3430:	ef 90       	pop	r14
    3432:	df 90       	pop	r13
    3434:	cf 90       	pop	r12
    3436:	bf 90       	pop	r11
    3438:	af 90       	pop	r10
    343a:	9f 90       	pop	r9
    343c:	8f 90       	pop	r8
    343e:	7f 90       	pop	r7
    3440:	6f 90       	pop	r6
    3442:	5f 90       	pop	r5
    3444:	4f 90       	pop	r4
    3446:	3f 90       	pop	r3
    3448:	08 95       	ret
        if (!uECC_generate_random_int(k, curve->n, BITS_TO_WORDS(curve->num_n_bits))) {
            return 0;
        }

        if (uECC_sign_with_k(private_key, message_hash, hash_size, k, signature, curve)) {
            return 1;
    344a:	81 e0       	ldi	r24, 0x01	; 1
    344c:	90 e0       	ldi	r25, 0x00	; 0
    344e:	e5 cf       	rjmp	.-54     	; 0x341a <uECC_sign+0x9e>

00003450 <hex_to_bytes>:
		*dest++ = table[c >> 4];
		*dest++ = table[c & 0x0f];
	}
}

void hex_to_bytes(char *src, uint8_t strlen, uint8_t dest[strlen/2]) {
    3450:	ff 92       	push	r15
    3452:	0f 93       	push	r16
    3454:	1f 93       	push	r17
    3456:	cf 93       	push	r28
    3458:	df 93       	push	r29
    345a:	f8 2e       	mov	r15, r24
    345c:	09 2f       	mov	r16, r25
    345e:	16 2f       	mov	r17, r22
    3460:	ea 01       	movw	r28, r20
	memset(dest, 0, strlen/2);
    3462:	46 2f       	mov	r20, r22
    3464:	46 95       	lsr	r20
    3466:	50 e0       	ldi	r21, 0x00	; 0
    3468:	60 e0       	ldi	r22, 0x00	; 0
    346a:	70 e0       	ldi	r23, 0x00	; 0
    346c:	ce 01       	movw	r24, r28
    346e:	0e 94 b7 34 	call	0x696e	; 0x696e <memset>
	uint8_t index = 0;
	while (index < strlen) {
    3472:	11 23       	and	r17, r17
    3474:	09 f4       	brne	.+2      	; 0x3478 <hex_to_bytes+0x28>
    3476:	4b c0       	rjmp	.+150    	; 0x350e <hex_to_bytes+0xbe>
    3478:	ef 2d       	mov	r30, r15
    347a:	f0 2f       	mov	r31, r16
    347c:	20 e0       	ldi	r18, 0x00	; 0
    347e:	30 e0       	ldi	r19, 0x00	; 0
    3480:	17 c0       	rjmp	.+46     	; 0x34b0 <hex_to_bytes+0x60>
    3482:	90 e0       	ldi	r25, 0x00	; 0
    3484:	c0 97       	sbiw	r24, 0x30	; 48
    3486:	b9 01       	movw	r22, r18
    3488:	61 70       	andi	r22, 0x01	; 1
    348a:	77 27       	eor	r23, r23
    348c:	66 0f       	add	r22, r22
    348e:	77 1f       	adc	r23, r23
    3490:	66 0f       	add	r22, r22
    3492:	77 1f       	adc	r23, r23
    3494:	01 c0       	rjmp	.+2      	; 0x3498 <hex_to_bytes+0x48>
    3496:	88 0f       	add	r24, r24
    3498:	6a 95       	dec	r22
    349a:	ea f7       	brpl	.-6      	; 0x3496 <hex_to_bytes+0x46>
		else if (c >= 'A' && c <= 'F')
		value = (10 + (c - 'A'));
		else if (c >= 'a' && c <= 'f')
		value = (10 + (c - 'a'));

		dest[(index/2)] += value << (((index + 1) % 2) * 4);
    349c:	94 2f       	mov	r25, r20
    349e:	96 95       	lsr	r25
    34a0:	de 01       	movw	r26, r28
    34a2:	a9 0f       	add	r26, r25
    34a4:	b1 1d       	adc	r27, r1
    34a6:	9c 91       	ld	r25, X
    34a8:	89 0f       	add	r24, r25
    34aa:	8c 93       	st	X, r24
}

void hex_to_bytes(char *src, uint8_t strlen, uint8_t dest[strlen/2]) {
	memset(dest, 0, strlen/2);
	uint8_t index = 0;
	while (index < strlen) {
    34ac:	21 17       	cp	r18, r17
    34ae:	78 f5       	brcc	.+94     	; 0x350e <hex_to_bytes+0xbe>
    34b0:	42 2f       	mov	r20, r18
		char c = src[index];
    34b2:	81 91       	ld	r24, Z+
    34b4:	2f 5f       	subi	r18, 0xFF	; 255
    34b6:	3f 4f       	sbci	r19, 0xFF	; 255
		int value = 0;
		if(c >= '0' && c <= '9')
    34b8:	90 ed       	ldi	r25, 0xD0	; 208
    34ba:	98 0f       	add	r25, r24
    34bc:	9a 30       	cpi	r25, 0x0A	; 10
    34be:	08 f3       	brcs	.-62     	; 0x3482 <hex_to_bytes+0x32>
		value = (c - '0');
		else if (c >= 'A' && c <= 'F')
    34c0:	9f eb       	ldi	r25, 0xBF	; 191
    34c2:	98 0f       	add	r25, r24
    34c4:	96 30       	cpi	r25, 0x06	; 6
    34c6:	70 f4       	brcc	.+28     	; 0x34e4 <hex_to_bytes+0x94>
    34c8:	90 e0       	ldi	r25, 0x00	; 0
    34ca:	c7 97       	sbiw	r24, 0x37	; 55
    34cc:	b9 01       	movw	r22, r18
    34ce:	61 70       	andi	r22, 0x01	; 1
    34d0:	77 27       	eor	r23, r23
    34d2:	66 0f       	add	r22, r22
    34d4:	77 1f       	adc	r23, r23
    34d6:	66 0f       	add	r22, r22
    34d8:	77 1f       	adc	r23, r23
    34da:	01 c0       	rjmp	.+2      	; 0x34de <hex_to_bytes+0x8e>
    34dc:	88 0f       	add	r24, r24
    34de:	6a 95       	dec	r22
    34e0:	ea f7       	brpl	.-6      	; 0x34dc <hex_to_bytes+0x8c>
    34e2:	dc cf       	rjmp	.-72     	; 0x349c <hex_to_bytes+0x4c>
		value = (10 + (c - 'A'));
		else if (c >= 'a' && c <= 'f')
    34e4:	9f e9       	ldi	r25, 0x9F	; 159
    34e6:	98 0f       	add	r25, r24
    34e8:	96 30       	cpi	r25, 0x06	; 6
    34ea:	78 f4       	brcc	.+30     	; 0x350a <hex_to_bytes+0xba>
    34ec:	90 e0       	ldi	r25, 0x00	; 0
    34ee:	87 55       	subi	r24, 0x57	; 87
    34f0:	91 09       	sbc	r25, r1
    34f2:	b9 01       	movw	r22, r18
    34f4:	61 70       	andi	r22, 0x01	; 1
    34f6:	77 27       	eor	r23, r23
    34f8:	66 0f       	add	r22, r22
    34fa:	77 1f       	adc	r23, r23
    34fc:	66 0f       	add	r22, r22
    34fe:	77 1f       	adc	r23, r23
    3500:	01 c0       	rjmp	.+2      	; 0x3504 <hex_to_bytes+0xb4>
    3502:	88 0f       	add	r24, r24
    3504:	6a 95       	dec	r22
    3506:	ea f7       	brpl	.-6      	; 0x3502 <hex_to_bytes+0xb2>
    3508:	c9 cf       	rjmp	.-110    	; 0x349c <hex_to_bytes+0x4c>
    350a:	80 e0       	ldi	r24, 0x00	; 0
    350c:	c7 cf       	rjmp	.-114    	; 0x349c <hex_to_bytes+0x4c>

		dest[(index/2)] += value << (((index + 1) % 2) * 4);

		index++;
	}
}
    350e:	df 91       	pop	r29
    3510:	cf 91       	pop	r28
    3512:	1f 91       	pop	r17
    3514:	0f 91       	pop	r16
    3516:	ff 90       	pop	r15
    3518:	08 95       	ret

0000351a <isotp_user_debug>:
#include "../uart_f.h"
#include "../can.h"

/* user implemented, print debug message */
void isotp_user_debug(const char* message){
	uart_puts(message);
    351a:	0c 94 a0 33 	jmp	0x6740	; 0x6740 <uart_puts>

0000351e <isotp_user_send_can>:
}

/* user implemented, send can message */
int  isotp_user_send_can(const uint32_t arbitration_id, const uint8_t* data, const uint8_t size){
    351e:	cf 93       	push	r28
    3520:	df 93       	push	r29
    3522:	00 d0       	rcall	.+0      	; 0x3524 <isotp_user_send_can+0x6>
    3524:	00 d0       	rcall	.+0      	; 0x3526 <isotp_user_send_can+0x8>
    3526:	00 d0       	rcall	.+0      	; 0x3528 <isotp_user_send_can+0xa>
    3528:	cd b7       	in	r28, 0x3d	; 61
    352a:	de b7       	in	r29, 0x3e	; 62
    352c:	6b 83       	std	Y+3, r22	; 0x03
    352e:	7c 83       	std	Y+4, r23	; 0x04
    3530:	8d 83       	std	Y+5, r24	; 0x05
    3532:	9e 83       	std	Y+6, r25	; 0x06
	can_msg_t message;
	can_id_t id;
	memcpy(id,&arbitration_id,2);
    3534:	7a 83       	std	Y+2, r23	; 0x02
    3536:	69 83       	std	Y+1, r22	; 0x01
	can_send_message(0, id, data, size);
    3538:	be 01       	movw	r22, r28
    353a:	6f 5f       	subi	r22, 0xFF	; 255
    353c:	7f 4f       	sbci	r23, 0xFF	; 255
    353e:	80 e0       	ldi	r24, 0x00	; 0
    3540:	0e 94 a9 02 	call	0x552	; 0x552 <can_send_message>
	return 0;
}
    3544:	80 e0       	ldi	r24, 0x00	; 0
    3546:	90 e0       	ldi	r25, 0x00	; 0
    3548:	26 96       	adiw	r28, 0x06	; 6
    354a:	0f b6       	in	r0, 0x3f	; 63
    354c:	f8 94       	cli
    354e:	de bf       	out	0x3e, r29	; 62
    3550:	0f be       	out	0x3f, r0	; 63
    3552:	cd bf       	out	0x3d, r28	; 61
    3554:	df 91       	pop	r29
    3556:	cf 91       	pop	r28
    3558:	08 95       	ret

0000355a <isotp_user_get_ms>:

/* user implemented, get millisecond */
uint32_t isotp_user_get_ms(void){
	return millis();
    355a:	0c 94 4f 04 	jmp	0x89e	; 0x89e <millis>

0000355e <isotp_send_flow_control.isra.3.constprop.5>:
    }

    return ms;
}

static int isotp_send_flow_control(IsoTpLink* link, uint8_t flow_status, uint8_t block_size, uint8_t st_min_ms) 
    355e:	cf 93       	push	r28
    3560:	df 93       	push	r29
    3562:	cd b7       	in	r28, 0x3d	; 61
    3564:	de b7       	in	r29, 0x3e	; 62
    3566:	28 97       	sbiw	r28, 0x08	; 8
    3568:	0f b6       	in	r0, 0x3f	; 63
    356a:	f8 94       	cli
    356c:	de bf       	out	0x3e, r29	; 62
    356e:	0f be       	out	0x3f, r0	; 63
    3570:	cd bf       	out	0x3d, r28	; 61
    IsoTpCanMessage message;
    int ret;

    /* setup message  */
    message.as.flow_control.type = ISOTP_PCI_TYPE_FLOW_CONTROL_FRAME;
    message.as.flow_control.FS = flow_status;
    3572:	62 95       	swap	r22
    3574:	60 7f       	andi	r22, 0xF0	; 240
    3576:	63 60       	ori	r22, 0x03	; 3
    3578:	69 83       	std	Y+1, r22	; 0x01
    message.as.flow_control.BS = block_size;
    357a:	4a 83       	std	Y+2, r20	; 0x02
    message.as.flow_control.STmin = isotp_ms_to_st_min(st_min_ms);
    357c:	1b 82       	std	Y+3, r1	; 0x03

    /* send message */
#ifdef ISO_TP_FRAME_PADDING
    (void)memset(message.as.flow_control.reserve, 0, sizeof(message.as.flow_control.reserve));
    357e:	fe 01       	movw	r30, r28
    3580:	34 96       	adiw	r30, 0x04	; 4
    3582:	25 e0       	ldi	r18, 0x05	; 5
    3584:	df 01       	movw	r26, r30
    3586:	1d 92       	st	X+, r1
    3588:	2a 95       	dec	r18
    358a:	e9 f7       	brne	.-6      	; 0x3586 <isotp_send_flow_control.isra.3.constprop.5+0x28>
    ret = isotp_user_send_can(link->send_arbitration_id,
    358c:	fc 01       	movw	r30, r24
    358e:	60 81       	ld	r22, Z
    3590:	71 81       	ldd	r23, Z+1	; 0x01
    3592:	82 81       	ldd	r24, Z+2	; 0x02
    3594:	93 81       	ldd	r25, Z+3	; 0x03
    3596:	28 e0       	ldi	r18, 0x08	; 8
    3598:	ae 01       	movw	r20, r28
    359a:	4f 5f       	subi	r20, 0xFF	; 255
    359c:	5f 4f       	sbci	r21, 0xFF	; 255
    359e:	bf df       	rcall	.-130    	; 0x351e <isotp_user_send_can>
                           message.as.data_array.ptr, 
                           3);
#endif

    return ret;
}
    35a0:	28 96       	adiw	r28, 0x08	; 8
    35a2:	0f b6       	in	r0, 0x3f	; 63
    35a4:	f8 94       	cli
    35a6:	de bf       	out	0x3e, r29	; 62
    35a8:	0f be       	out	0x3f, r0	; 63
    35aa:	cd bf       	out	0x3d, r28	; 61
    35ac:	df 91       	pop	r29
    35ae:	cf 91       	pop	r28
    35b0:	08 95       	ret

000035b2 <isotp_send_with_id>:
{
    return isotp_send_with_id(link, link->send_arbitration_id, payload, size);
}

int isotp_send_with_id(IsoTpLink *link, uint32_t id, const uint8_t payload[], uint16_t size)
{
    35b2:	8f 92       	push	r8
    35b4:	9f 92       	push	r9
    35b6:	af 92       	push	r10
    35b8:	bf 92       	push	r11
    35ba:	ef 92       	push	r14
    35bc:	ff 92       	push	r15
    35be:	0f 93       	push	r16
    35c0:	1f 93       	push	r17
    35c2:	cf 93       	push	r28
    35c4:	df 93       	push	r29
    35c6:	cd b7       	in	r28, 0x3d	; 61
    35c8:	de b7       	in	r29, 0x3e	; 62
    35ca:	28 97       	sbiw	r28, 0x08	; 8
    35cc:	0f b6       	in	r0, 0x3f	; 63
    35ce:	f8 94       	cli
    35d0:	de bf       	out	0x3e, r29	; 62
    35d2:	0f be       	out	0x3f, r0	; 63
    35d4:	cd bf       	out	0x3d, r28	; 61
    35d6:	7c 01       	movw	r14, r24
    35d8:	4a 01       	movw	r8, r20
    35da:	5b 01       	movw	r10, r22
    int ret;
    
    if (size > link->send_buf_size){
    35dc:	dc 01       	movw	r26, r24
    35de:	16 96       	adiw	r26, 0x06	; 6
    35e0:	8d 91       	ld	r24, X+
    35e2:	9c 91       	ld	r25, X
    35e4:	17 97       	sbiw	r26, 0x07	; 7
    35e6:	80 17       	cp	r24, r16
    35e8:	91 07       	cpc	r25, r17
    35ea:	08 f4       	brcc	.+2      	; 0x35ee <isotp_send_with_id+0x3c>
    35ec:	88 c0       	rjmp	.+272    	; 0x36fe <isotp_send_with_id+0x14c>
        isotp_user_debug("Message to big, increase ISO_TP_MAX_MESSAGE_SIZE to set a bigger buffer\n");
        return ISOTP_RET_OVERFLOW;
    }

    if (ISOTP_SEND_STATUS_INPROGRESS == link->send_status){
    35ee:	f7 01       	movw	r30, r14
    35f0:	83 8d       	ldd	r24, Z+27	; 0x1b
    35f2:	81 30       	cpi	r24, 0x01	; 1
    35f4:	09 f4       	brne	.+2      	; 0x35f8 <isotp_send_with_id+0x46>
    35f6:	8d c0       	rjmp	.+282    	; 0x3712 <isotp_send_with_id+0x160>
        isotp_user_debug("Abord previous message, which is sending in pregress\n");
        return ISOTP_RET_INPROGRESS;
    }

    /* copy into local buffer */
    link->send_size = size;
    35f8:	11 87       	std	Z+9, r17	; 0x09
    35fa:	00 87       	std	Z+8, r16	; 0x08
    link->send_offset = 0;
    35fc:	13 86       	std	Z+11, r1	; 0x0b
    35fe:	12 86       	std	Z+10, r1	; 0x0a
    (void)memcpy(link->send_buffer, payload, size);
    3600:	a8 01       	movw	r20, r16
    3602:	b9 01       	movw	r22, r18
    3604:	84 81       	ldd	r24, Z+4	; 0x04
    3606:	95 81       	ldd	r25, Z+5	; 0x05
    3608:	0e 94 9d 34 	call	0x693a	; 0x693a <memcpy>

    if(link->send_size < 8){
    360c:	f7 01       	movw	r30, r14
    360e:	00 85       	ldd	r16, Z+8	; 0x08
    3610:	11 85       	ldd	r17, Z+9	; 0x09
    3612:	08 30       	cpi	r16, 0x08	; 8
    3614:	11 05       	cpc	r17, r1
    3616:	08 f4       	brcc	.+2      	; 0x361a <isotp_send_with_id+0x68>
    3618:	51 c0       	rjmp	.+162    	; 0x36bc <isotp_send_with_id+0x10a>
    /* multi frame message length must greater than 7  */
    assert(link->send_size > 7);

    /* setup message  */
    message.as.first_frame.type = ISOTP_PCI_TYPE_FIRST_FRAME;
    message.as.first_frame.FF_DL_low  = (uint8_t)link->send_size;
    361a:	0a 83       	std	Y+2, r16	; 0x02
    message.as.first_frame.FF_DL_high = (uint8_t)(0x0F & (link->send_size >> 8));
    361c:	81 2f       	mov	r24, r17
    361e:	82 95       	swap	r24
    3620:	80 7f       	andi	r24, 0xF0	; 240
    3622:	81 60       	ori	r24, 0x01	; 1
    3624:	89 83       	std	Y+1, r24	; 0x01
    (void)memcpy(message.as.first_frame.data, 
    3626:	04 80       	ldd	r0, Z+4	; 0x04
    3628:	f5 81       	ldd	r31, Z+5	; 0x05
    362a:	e0 2d       	mov	r30, r0
    362c:	86 e0       	ldi	r24, 0x06	; 6
    362e:	de 01       	movw	r26, r28
    3630:	13 96       	adiw	r26, 0x03	; 3
    3632:	01 90       	ld	r0, Z+
    3634:	0d 92       	st	X+, r0
    3636:	8a 95       	dec	r24
    3638:	e1 f7       	brne	.-8      	; 0x3632 <isotp_send_with_id+0x80>
           link->send_buffer, 
           sizeof(message.as.first_frame.data));

    /* send message */
    ret = isotp_user_send_can(id,
    363a:	28 e0       	ldi	r18, 0x08	; 8
    363c:	ae 01       	movw	r20, r28
    363e:	4f 5f       	subi	r20, 0xFF	; 255
    3640:	5f 4f       	sbci	r21, 0xFF	; 255
    3642:	c5 01       	movw	r24, r10
    3644:	b4 01       	movw	r22, r8
    3646:	6b df       	rcall	.-298    	; 0x351e <isotp_user_send_can>
                           message.as.data_array.ptr, 
                           sizeof(message));
    if (ISOTP_RET_OK == ret){
    3648:	00 97       	sbiw	r24, 0x00	; 0
    364a:	39 f5       	brne	.+78     	; 0x369a <isotp_send_with_id+0xe8>
        link->send_offset += sizeof(message.as.first_frame.data);
    364c:	f7 01       	movw	r30, r14
    364e:	82 85       	ldd	r24, Z+10	; 0x0a
    3650:	93 85       	ldd	r25, Z+11	; 0x0b
    3652:	06 96       	adiw	r24, 0x06	; 6
    3654:	93 87       	std	Z+11, r25	; 0x0b
    3656:	82 87       	std	Z+10, r24	; 0x0a
        link->send_sn = 1;
    3658:	11 e0       	ldi	r17, 0x01	; 1
    365a:	14 87       	std	Z+12, r17	; 0x0c
        /* send multi-frame */
        ret = isotp_send_first_frame(link, id); 
        
        /* init multi-frame control flags */
        if (ISOTP_RET_OK == ret){
            link->send_bs_remain = 5;
    365c:	85 e0       	ldi	r24, 0x05	; 5
    365e:	90 e0       	ldi	r25, 0x00	; 0
    3660:	96 87       	std	Z+14, r25	; 0x0e
    3662:	85 87       	std	Z+13, r24	; 0x0d
            link->send_st_min = 0;
    3664:	17 86       	std	Z+15, r1	; 0x0f
            link->send_wtf_count = 0;
            link->send_timer_st = isotp_user_get_ms();
    3666:	10 8a       	std	Z+16, r1	; 0x10
    3668:	78 df       	rcall	.-272    	; 0x355a <isotp_user_get_ms>
    366a:	d7 01       	movw	r26, r14
    366c:	51 96       	adiw	r26, 0x11	; 17
    366e:	6d 93       	st	X+, r22
    3670:	7d 93       	st	X+, r23
    3672:	8d 93       	st	X+, r24
    3674:	9c 93       	st	X, r25
            link->send_timer_bs = isotp_user_get_ms() + ISO_TP_DEFAULT_RESPONSE_TIMEOUT;
    3676:	54 97       	sbiw	r26, 0x14	; 20
    3678:	70 df       	rcall	.-288    	; 0x355a <isotp_user_get_ms>
    367a:	dc 01       	movw	r26, r24
    367c:	cb 01       	movw	r24, r22
    367e:	8c 59       	subi	r24, 0x9C	; 156
    3680:	9f 4f       	sbci	r25, 0xFF	; 255
    3682:	af 4f       	sbci	r26, 0xFF	; 255
    3684:	bf 4f       	sbci	r27, 0xFF	; 255
    3686:	f7 01       	movw	r30, r14
    3688:	85 8b       	std	Z+21, r24	; 0x15
    368a:	96 8b       	std	Z+22, r25	; 0x16
    368c:	a7 8b       	std	Z+23, r26	; 0x17
    368e:	b0 8f       	std	Z+24, r27	; 0x18
            link->send_protocol_resault = ISOTP_PROTOCOL_RESAULT_OK;
    3690:	12 8e       	std	Z+26, r1	; 0x1a
    3692:	11 8e       	std	Z+25, r1	; 0x19
            link->send_status = ISOTP_SEND_STATUS_INPROGRESS;
    3694:	13 8f       	std	Z+27, r17	; 0x1b
    3696:	80 e0       	ldi	r24, 0x00	; 0
    3698:	90 e0       	ldi	r25, 0x00	; 0
        }
    }
    return ret;
}
    369a:	28 96       	adiw	r28, 0x08	; 8
    369c:	0f b6       	in	r0, 0x3f	; 63
    369e:	f8 94       	cli
    36a0:	de bf       	out	0x3e, r29	; 62
    36a2:	0f be       	out	0x3f, r0	; 63
    36a4:	cd bf       	out	0x3d, r28	; 61
    36a6:	df 91       	pop	r29
    36a8:	cf 91       	pop	r28
    36aa:	1f 91       	pop	r17
    36ac:	0f 91       	pop	r16
    36ae:	ff 90       	pop	r15
    36b0:	ef 90       	pop	r14
    36b2:	bf 90       	pop	r11
    36b4:	af 90       	pop	r10
    36b6:	9f 90       	pop	r9
    36b8:	8f 90       	pop	r8
    36ba:	08 95       	ret
    36bc:	64 81       	ldd	r22, Z+4	; 0x04
    36be:	75 81       	ldd	r23, Z+5	; 0x05
    /* multi frame message length must greater than 7  */
    assert(link->send_size <= 7);

    /* setup message  */
    message.as.single_frame.type = ISOTP_PCI_TYPE_SINGLE;
    message.as.single_frame.SF_DL = (uint8_t)link->send_size;
    36c0:	80 2f       	mov	r24, r16
    36c2:	82 95       	swap	r24
    36c4:	80 7f       	andi	r24, 0xF0	; 240
    36c6:	89 83       	std	Y+1, r24	; 0x01
    (void)memcpy(message.as.single_frame.data, link->send_buffer, link->send_size);
    36c8:	a8 01       	movw	r20, r16
    36ca:	ce 01       	movw	r24, r28
    36cc:	02 96       	adiw	r24, 0x02	; 2
    36ce:	0e 94 9d 34 	call	0x693a	; 0x693a <memcpy>

    /* send message */
#ifdef ISO_TP_FRAME_PADDING
    (void)memset(message.as.single_frame.data + link->send_size,
    36d2:	47 e0       	ldi	r20, 0x07	; 7
    36d4:	50 e0       	ldi	r21, 0x00	; 0
    36d6:	40 1b       	sub	r20, r16
    36d8:	51 0b       	sbc	r21, r17
    36da:	60 e0       	ldi	r22, 0x00	; 0
    36dc:	70 e0       	ldi	r23, 0x00	; 0
    36de:	82 e0       	ldi	r24, 0x02	; 2
    36e0:	90 e0       	ldi	r25, 0x00	; 0
    36e2:	8c 0f       	add	r24, r28
    36e4:	9d 1f       	adc	r25, r29
    36e6:	80 0f       	add	r24, r16
    36e8:	91 1f       	adc	r25, r17
    36ea:	0e 94 b7 34 	call	0x696e	; 0x696e <memset>
           0,
           sizeof(message.as.single_frame.data) - link->send_size);
    ret = isotp_user_send_can(id,
    36ee:	28 e0       	ldi	r18, 0x08	; 8
    36f0:	ae 01       	movw	r20, r28
    36f2:	4f 5f       	subi	r20, 0xFF	; 255
    36f4:	5f 4f       	sbci	r21, 0xFF	; 255
    36f6:	c5 01       	movw	r24, r10
    36f8:	b4 01       	movw	r22, r8
    36fa:	11 df       	rcall	.-478    	; 0x351e <isotp_user_send_can>
    36fc:	ce cf       	rjmp	.-100    	; 0x369a <isotp_send_with_id+0xe8>
int isotp_send_with_id(IsoTpLink *link, uint32_t id, const uint8_t payload[], uint16_t size)
{
    int ret;
    
    if (size > link->send_buf_size){
        isotp_user_debug("Message to big, increase ISO_TP_MAX_MESSAGE_SIZE to set a bigger buffer\n");
    36fe:	8e ec       	ldi	r24, 0xCE	; 206
    3700:	91 e0       	ldi	r25, 0x01	; 1
    3702:	9f 93       	push	r25
    3704:	8f 93       	push	r24
    3706:	09 df       	rcall	.-494    	; 0x351a <isotp_user_debug>
        return ISOTP_RET_OVERFLOW;
    3708:	0f 90       	pop	r0
    370a:	0f 90       	pop	r0
    370c:	8d ef       	ldi	r24, 0xFD	; 253
    370e:	9f ef       	ldi	r25, 0xFF	; 255
    }

    if (ISOTP_SEND_STATUS_INPROGRESS == link->send_status){
        isotp_user_debug("Abord previous message, which is sending in pregress\n");
    3710:	c4 cf       	rjmp	.-120    	; 0x369a <isotp_send_with_id+0xe8>
    3712:	87 e1       	ldi	r24, 0x17	; 23
    3714:	92 e0       	ldi	r25, 0x02	; 2
    3716:	9f 93       	push	r25
    3718:	8f 93       	push	r24
    371a:	ff de       	rcall	.-514    	; 0x351a <isotp_user_debug>
        return ISOTP_RET_INPROGRESS;
    371c:	0f 90       	pop	r0
    371e:	0f 90       	pop	r0
    3720:	8e ef       	ldi	r24, 0xFE	; 254
    3722:	9f ef       	ldi	r25, 0xFF	; 255
    3724:	ba cf       	rjmp	.-140    	; 0x369a <isotp_send_with_id+0xe8>

00003726 <isotp_send>:
    
    return ret;
}

int isotp_send(IsoTpLink *link, const uint8_t payload[], uint16_t size)
{
    3726:	0f 93       	push	r16
    3728:	1f 93       	push	r17
    372a:	9b 01       	movw	r18, r22
    372c:	8a 01       	movw	r16, r20
    return isotp_send_with_id(link, link->send_arbitration_id, payload, size);
    372e:	fc 01       	movw	r30, r24
    3730:	40 81       	ld	r20, Z
    3732:	51 81       	ldd	r21, Z+1	; 0x01
    3734:	62 81       	ldd	r22, Z+2	; 0x02
    3736:	73 81       	ldd	r23, Z+3	; 0x03
    3738:	3c df       	rcall	.-392    	; 0x35b2 <isotp_send_with_id>
}
    373a:	1f 91       	pop	r17
    373c:	0f 91       	pop	r16
    373e:	08 95       	ret

00003740 <isotp_on_can_message>:

    return ISOTP_RET_OK;
}

void isotp_on_can_message(IsoTpLink *link, uint8_t *data, uint8_t len)
{
    3740:	cf 92       	push	r12
    3742:	df 92       	push	r13
    3744:	ef 92       	push	r14
    3746:	ff 92       	push	r15
    3748:	0f 93       	push	r16
    374a:	1f 93       	push	r17
    374c:	cf 93       	push	r28
    374e:	df 93       	push	r29
    3750:	cd b7       	in	r28, 0x3d	; 61
    3752:	de b7       	in	r29, 0x3e	; 62
    3754:	28 97       	sbiw	r28, 0x08	; 8
    3756:	0f b6       	in	r0, 0x3f	; 63
    3758:	f8 94       	cli
    375a:	de bf       	out	0x3e, r29	; 62
    375c:	0f be       	out	0x3f, r0	; 63
    375e:	cd bf       	out	0x3d, r28	; 61
    3760:	8c 01       	movw	r16, r24
    IsoTpCanMessage message;
    int ret;
    
    if (len < 2 || len > 8){
    3762:	9e ef       	ldi	r25, 0xFE	; 254
    3764:	94 0f       	add	r25, r20
    3766:	97 30       	cpi	r25, 0x07	; 7
    3768:	78 f0       	brcs	.+30     	; 0x3788 <isotp_on_can_message+0x48>
        default:
            break;
    };
    
    return;
}
    376a:	28 96       	adiw	r28, 0x08	; 8
    376c:	0f b6       	in	r0, 0x3f	; 63
    376e:	f8 94       	cli
    3770:	de bf       	out	0x3e, r29	; 62
    3772:	0f be       	out	0x3f, r0	; 63
    3774:	cd bf       	out	0x3d, r28	; 61
    3776:	df 91       	pop	r29
    3778:	cf 91       	pop	r28
    377a:	1f 91       	pop	r17
    377c:	0f 91       	pop	r16
    377e:	ff 90       	pop	r15
    3780:	ef 90       	pop	r14
    3782:	df 90       	pop	r13
    3784:	cf 90       	pop	r12
    3786:	08 95       	ret
    3788:	f4 2e       	mov	r15, r20
    
    if (len < 2 || len > 8){
        return;
    }

    (void)memcpy(message.as.data_array.ptr, data, len);
    378a:	c4 2e       	mov	r12, r20
    378c:	d1 2c       	mov	r13, r1
    378e:	a6 01       	movw	r20, r12
    3790:	ce 01       	movw	r24, r28
    3792:	01 96       	adiw	r24, 0x01	; 1
    3794:	0e 94 9d 34 	call	0x693a	; 0x693a <memcpy>
    (void)memset(message.as.data_array.ptr + len, 0, sizeof(message.as.data_array.ptr) - len);
    3798:	48 e0       	ldi	r20, 0x08	; 8
    379a:	50 e0       	ldi	r21, 0x00	; 0
    379c:	4c 19       	sub	r20, r12
    379e:	5d 09       	sbc	r21, r13
    37a0:	60 e0       	ldi	r22, 0x00	; 0
    37a2:	70 e0       	ldi	r23, 0x00	; 0
    37a4:	81 e0       	ldi	r24, 0x01	; 1
    37a6:	90 e0       	ldi	r25, 0x00	; 0
    37a8:	8c 0f       	add	r24, r28
    37aa:	9d 1f       	adc	r25, r29
    37ac:	8c 0d       	add	r24, r12
    37ae:	9d 1d       	adc	r25, r13
    37b0:	0e 94 b7 34 	call	0x696e	; 0x696e <memset>

    switch(message.as.common.type) {
    37b4:	89 81       	ldd	r24, Y+1	; 0x01
    37b6:	98 2f       	mov	r25, r24
    37b8:	9f 70       	andi	r25, 0x0F	; 15
    37ba:	91 30       	cpi	r25, 0x01	; 1
    37bc:	09 f4       	brne	.+2      	; 0x37c0 <isotp_on_can_message+0x80>
    37be:	68 c0       	rjmp	.+208    	; 0x3890 <isotp_on_can_message+0x150>
    37c0:	08 f4       	brcc	.+2      	; 0x37c4 <isotp_on_can_message+0x84>
    37c2:	40 c0       	rjmp	.+128    	; 0x3844 <isotp_on_can_message+0x104>
    37c4:	92 30       	cpi	r25, 0x02	; 2
    37c6:	a1 f1       	breq	.+104    	; 0x3830 <isotp_on_can_message+0xf0>
    37c8:	93 30       	cpi	r25, 0x03	; 3
    37ca:	79 f6       	brne	.-98     	; 0x376a <isotp_on_can_message+0x2a>
            
            break;
        }
        case ISOTP_PCI_TYPE_FLOW_CONTROL_FRAME:
            /* handle fc frame only when sending in progress  */
            if (ISOTP_SEND_STATUS_INPROGRESS != link->send_status){
    37cc:	f8 01       	movw	r30, r16
    37ce:	83 8d       	ldd	r24, Z+27	; 0x1b
    37d0:	81 30       	cpi	r24, 0x01	; 1
    37d2:	59 f6       	brne	.-106    	; 0x376a <isotp_on_can_message+0x2a>
}

static int isotp_receive_flow_conrtrol_frame(IsoTpLink *link, IsoTpCanMessage *message, uint8_t len)
{
    /* check message length */
    if (len < 3){
    37d4:	f2 e0       	ldi	r31, 0x02	; 2
    37d6:	ff 16       	cp	r15, r31
    37d8:	09 f4       	brne	.+2      	; 0x37dc <isotp_on_can_message+0x9c>
    37da:	e9 c0       	rjmp	.+466    	; 0x39ae <isotp_on_can_message+0x26e>
            /* handle message */
            ret = isotp_receive_flow_conrtrol_frame(link, &message, len);
            
            if (ISOTP_RET_OK == ret){
                /* refresh bs timer */
                link->send_timer_bs = isotp_user_get_ms() + ISO_TP_DEFAULT_RESPONSE_TIMEOUT;
    37dc:	be de       	rcall	.-644    	; 0x355a <isotp_user_get_ms>
    37de:	dc 01       	movw	r26, r24
    37e0:	cb 01       	movw	r24, r22
    37e2:	8c 59       	subi	r24, 0x9C	; 156
    37e4:	9f 4f       	sbci	r25, 0xFF	; 255
    37e6:	af 4f       	sbci	r26, 0xFF	; 255
    37e8:	bf 4f       	sbci	r27, 0xFF	; 255
    37ea:	f8 01       	movw	r30, r16
    37ec:	85 8b       	std	Z+21, r24	; 0x15
    37ee:	96 8b       	std	Z+22, r25	; 0x16
    37f0:	a7 8b       	std	Z+23, r26	; 0x17
    37f2:	b0 8f       	std	Z+24, r27	; 0x18

                /* overflow */
                if (PCI_FLOW_STATUS_OVERFLOW == message.as.flow_control.FS) {
    37f4:	89 81       	ldd	r24, Y+1	; 0x01
    37f6:	80 7f       	andi	r24, 0xF0	; 240
    37f8:	80 32       	cpi	r24, 0x20	; 32
    37fa:	09 f4       	brne	.+2      	; 0x37fe <isotp_on_can_message+0xbe>
    37fc:	08 c1       	rjmp	.+528    	; 0x3a0e <isotp_on_can_message+0x2ce>
                    link->send_protocol_resault = ISOTP_PROTOCOL_RESAULT_BUFFER_OVFLW;
                    link->send_status = ISOTP_SEND_STATUS_ERROR;
                } 
                /* wait */
                else if (PCI_FLOW_STATUS_WAIT == message.as.flow_control.FS) {
    37fe:	80 31       	cpi	r24, 0x10	; 16
    3800:	09 f4       	brne	.+2      	; 0x3804 <isotp_on_can_message+0xc4>
    3802:	f7 c0       	rjmp	.+494    	; 0x39f2 <isotp_on_can_message+0x2b2>
                        link->send_protocol_resault = ISOTP_PROTOCOL_RESAULT_WFT_OVRN;
                        link->send_status = ISOTP_SEND_STATUS_ERROR;
                    }
                } 
                /* permit send */
                else if (PCI_FLOW_STATUS_CONTINUE == message.as.flow_control.FS){
    3804:	81 11       	cpse	r24, r1
    3806:	b1 cf       	rjmp	.-158    	; 0x376a <isotp_on_can_message+0x2a>
                    if (0 == message.as.flow_control.BS){
    3808:	8a 81       	ldd	r24, Y+2	; 0x02
    380a:	81 11       	cpse	r24, r1
    380c:	08 c1       	rjmp	.+528    	; 0x3a1e <isotp_on_can_message+0x2de>
                        link->send_bs_remain = ISOTP_INVALID_BS;
    380e:	8f ef       	ldi	r24, 0xFF	; 255
    3810:	9f ef       	ldi	r25, 0xFF	; 255
    3812:	f8 01       	movw	r30, r16
    3814:	96 87       	std	Z+14, r25	; 0x0e
    3816:	85 87       	std	Z+13, r24	; 0x0d
                    } else {
                        link->send_bs_remain = message.as.flow_control.BS;
                    }
                    link->send_st_min = isotp_st_min_to_ms(message.as.flow_control.STmin);
    3818:	8b 81       	ldd	r24, Y+3	; 0x03
/* st_min to msec  */
static uint8_t isotp_st_min_to_ms(uint8_t st_min) 
{
    uint8_t ms;
    
    if (st_min >= 0xF1 && st_min <= 0xF9){
    381a:	9f e0       	ldi	r25, 0x0F	; 15
    381c:	98 0f       	add	r25, r24
    381e:	99 30       	cpi	r25, 0x09	; 9
    3820:	08 f4       	brcc	.+2      	; 0x3824 <isotp_on_can_message+0xe4>
    3822:	02 c1       	rjmp	.+516    	; 0x3a28 <isotp_on_can_message+0x2e8>
        ms = 1;
    } else if (st_min <= 0x7F) {
    3824:	87 fd       	sbrc	r24, 7
    3826:	16 c1       	rjmp	.+556    	; 0x3a54 <isotp_on_can_message+0x314>
                    if (0 == message.as.flow_control.BS){
                        link->send_bs_remain = ISOTP_INVALID_BS;
                    } else {
                        link->send_bs_remain = message.as.flow_control.BS;
                    }
                    link->send_st_min = isotp_st_min_to_ms(message.as.flow_control.STmin);
    3828:	f8 01       	movw	r30, r16
    382a:	87 87       	std	Z+15, r24	; 0x0f
                    link->send_wtf_count = 0;
    382c:	10 8a       	std	Z+16, r1	; 0x10
    382e:	9d cf       	rjmp	.-198    	; 0x376a <isotp_on_can_message+0x2a>
            
            break;
        }
        case TSOTP_PCI_TYPE_CONSECUTIVE_FRAME: {
            /* check if in receiving status */
            if (ISOTP_RECEIVE_STATUS_INPROGRESS != link->receive_status){
    3830:	f8 01       	movw	r30, r16
    3832:	90 a9       	ldd	r25, Z+48	; 0x30
    3834:	91 30       	cpi	r25, 0x01	; 1
    3836:	09 f4       	brne	.+2      	; 0x383a <isotp_on_can_message+0xfa>
    3838:	6e c0       	rjmp	.+220    	; 0x3916 <isotp_on_can_message+0x1d6>
                link->receive_protocol_resault = ISOTP_PROTOCOL_RESAULT_UNEXP_PDU;
    383a:	8a ef       	ldi	r24, 0xFA	; 250
    383c:	9f ef       	ldi	r25, 0xFF	; 255
    383e:	97 a7       	std	Z+47, r25	; 0x2f
    3840:	86 a7       	std	Z+46, r24	; 0x2e
                break;
    3842:	93 cf       	rjmp	.-218    	; 0x376a <isotp_on_can_message+0x2a>
    (void)memset(message.as.data_array.ptr + len, 0, sizeof(message.as.data_array.ptr) - len);

    switch(message.as.common.type) {
        case ISOTP_PCI_TYPE_SINGLE: {
            /* update protocol resault */
            if (ISOTP_RECEIVE_STATUS_INPROGRESS == link->receive_status){
    3844:	f8 01       	movw	r30, r16
    3846:	90 a9       	ldd	r25, Z+48	; 0x30
    3848:	91 30       	cpi	r25, 0x01	; 1
    384a:	09 f4       	brne	.+2      	; 0x384e <isotp_on_can_message+0x10e>
    384c:	5f c0       	rjmp	.+190    	; 0x390c <isotp_on_can_message+0x1cc>
                link->receive_protocol_resault = ISOTP_PROTOCOL_RESAULT_UNEXP_PDU;
            } else {
                link->receive_protocol_resault = ISOTP_PROTOCOL_RESAULT_OK;
    384e:	f8 01       	movw	r30, r16
    3850:	17 a6       	std	Z+47, r1	; 0x2f
    3852:	16 a6       	std	Z+46, r1	; 0x2e
}

static int isotp_receive_single_frame(IsoTpLink *link, IsoTpCanMessage *message, uint8_t len)
{   
    /* check data length */
    if ((0 == message->as.single_frame.SF_DL) ||
    3854:	98 2f       	mov	r25, r24
    3856:	90 7f       	andi	r25, 0xF0	; 240
    3858:	09 f4       	brne	.+2      	; 0x385c <isotp_on_can_message+0x11c>
    385a:	b1 c0       	rjmp	.+354    	; 0x39be <isotp_on_can_message+0x27e>
        (message->as.single_frame.SF_DL > (len - 1))){
    385c:	82 95       	swap	r24
    385e:	8f 70       	andi	r24, 0x0F	; 15
}

static int isotp_receive_single_frame(IsoTpLink *link, IsoTpCanMessage *message, uint8_t len)
{   
    /* check data length */
    if ((0 == message->as.single_frame.SF_DL) ||
    3860:	48 2f       	mov	r20, r24
    3862:	50 e0       	ldi	r21, 0x00	; 0
    3864:	4c 15       	cp	r20, r12
    3866:	5d 05       	cpc	r21, r13
    3868:	0c f0       	brlt	.+2      	; 0x386c <isotp_on_can_message+0x12c>
    386a:	a9 c0       	rjmp	.+338    	; 0x39be <isotp_on_can_message+0x27e>
        isotp_user_debug("Single-frame length too small.");
        return ISOTP_RET_LENGTH;
    }

    /* copying data */
    (void)memcpy(link->receive_buffer, 
    386c:	be 01       	movw	r22, r28
    386e:	6e 5f       	subi	r22, 0xFE	; 254
    3870:	7f 4f       	sbci	r23, 0xFF	; 255
    3872:	f8 01       	movw	r30, r16
    3874:	80 a1       	ldd	r24, Z+32	; 0x20
    3876:	91 a1       	ldd	r25, Z+33	; 0x21
    3878:	0e 94 9d 34 	call	0x693a	; 0x693a <memcpy>
           message->as.single_frame.data, 
           message->as.single_frame.SF_DL);
    link->receive_size = message->as.single_frame.SF_DL;
    387c:	89 81       	ldd	r24, Y+1	; 0x01
    387e:	82 95       	swap	r24
    3880:	8f 70       	andi	r24, 0x0F	; 15
    3882:	90 e0       	ldi	r25, 0x00	; 0
    3884:	f8 01       	movw	r30, r16
    3886:	95 a3       	std	Z+37, r25	; 0x25
    3888:	84 a3       	std	Z+36, r24	; 0x24
            /* handle message */
            ret = isotp_receive_single_frame(link, &message, len);
            
            if (ISOTP_RET_OK == ret){
                /* change status */
                link->receive_status = ISOTP_RECEIVE_STATUS_FULL;
    388a:	82 e0       	ldi	r24, 0x02	; 2
    388c:	80 ab       	std	Z+48, r24	; 0x30
    388e:	6d cf       	rjmp	.-294    	; 0x376a <isotp_on_can_message+0x2a>
            }
            break;
        }
        case ISOTP_PCI_TYPE_FIRST_FRAME: {
            /* update protocol resault */
            if (ISOTP_RECEIVE_STATUS_INPROGRESS == link->receive_status){
    3890:	f8 01       	movw	r30, r16
    3892:	90 a9       	ldd	r25, Z+48	; 0x30
    3894:	91 30       	cpi	r25, 0x01	; 1
    3896:	a9 f1       	breq	.+106    	; 0x3902 <isotp_on_can_message+0x1c2>
                link->receive_protocol_resault = ISOTP_PROTOCOL_RESAULT_UNEXP_PDU;
            } else {
                link->receive_protocol_resault = ISOTP_PROTOCOL_RESAULT_OK;
    3898:	f8 01       	movw	r30, r16
    389a:	17 a6       	std	Z+47, r1	; 0x2f
    389c:	16 a6       	std	Z+46, r1	; 0x2e

static int isotp_receive_first_frame(IsoTpLink *link, IsoTpCanMessage *message, uint8_t len)
{
    uint16_t payload_length;

    if (8 != len){
    389e:	f8 e0       	ldi	r31, 0x08	; 8
    38a0:	ff 12       	cpse	r15, r31
    38a2:	95 c0       	rjmp	.+298    	; 0x39ce <isotp_on_can_message+0x28e>
        isotp_user_debug("First frame should be 8 byte lenght.");
        return ISOTP_RET_LENGTH;
    }

    /* check data length */
    payload_length = message->as.first_frame.FF_DL_high;
    38a4:	82 95       	swap	r24
    38a6:	8f 70       	andi	r24, 0x0F	; 15
    payload_length = (payload_length << 8) + message->as.first_frame.FF_DL_low;
    38a8:	90 e0       	ldi	r25, 0x00	; 0
    38aa:	98 2f       	mov	r25, r24
    38ac:	88 27       	eor	r24, r24
    38ae:	2a 81       	ldd	r18, Y+2	; 0x02
    38b0:	82 0f       	add	r24, r18
    38b2:	91 1d       	adc	r25, r1
        return ISOTP_RET_OVERFLOW;
    }
	*/
    
    /* copying data */
    (void)memcpy(link->receive_buffer, message->as.first_frame.data, sizeof(message->as.first_frame.data));
    38b4:	f8 01       	movw	r30, r16
    38b6:	a0 a1       	ldd	r26, Z+32	; 0x20
    38b8:	b1 a1       	ldd	r27, Z+33	; 0x21
    38ba:	26 e0       	ldi	r18, 0x06	; 6
    38bc:	fe 01       	movw	r30, r28
    38be:	33 96       	adiw	r30, 0x03	; 3
    38c0:	01 90       	ld	r0, Z+
    38c2:	0d 92       	st	X+, r0
    38c4:	2a 95       	dec	r18
    38c6:	e1 f7       	brne	.-8      	; 0x38c0 <isotp_on_can_message+0x180>
    link->receive_size = payload_length;
    38c8:	f8 01       	movw	r30, r16
    38ca:	95 a3       	std	Z+37, r25	; 0x25
    38cc:	84 a3       	std	Z+36, r24	; 0x24
    link->receive_offset = sizeof(message->as.first_frame.data);
    38ce:	86 e0       	ldi	r24, 0x06	; 6
    38d0:	90 e0       	ldi	r25, 0x00	; 0
    38d2:	97 a3       	std	Z+39, r25	; 0x27
    38d4:	86 a3       	std	Z+38, r24	; 0x26
    link->receive_sn = 1;
    38d6:	81 e0       	ldi	r24, 0x01	; 1
    38d8:	80 a7       	std	Z+40, r24	; 0x28
            }

            /* if receive successful */
            if (ISOTP_RET_OK == ret){
                /* change status */
                link->receive_status = ISOTP_RECEIVE_STATUS_INPROGRESS;
    38da:	80 ab       	std	Z+48, r24	; 0x30
                /* send fc frame */
                link->receive_bs_count = ISO_TP_DEFAULT_BLOCK_SIZE;					
    38dc:	8f e0       	ldi	r24, 0x0F	; 15
    38de:	81 a7       	std	Z+41, r24	; 0x29
                isotp_send_flow_control(link, PCI_FLOW_STATUS_CONTINUE, link->receive_bs_count, ISO_TP_DEFAULT_ST_MIN);
    38e0:	4f e0       	ldi	r20, 0x0F	; 15
    38e2:	60 e0       	ldi	r22, 0x00	; 0
    38e4:	c8 01       	movw	r24, r16
                /* refresh timer cs */
                link->receive_timer_cr = isotp_user_get_ms() + ISO_TP_DEFAULT_RESPONSE_TIMEOUT;
    38e6:	3b de       	rcall	.-906    	; 0x355e <isotp_send_flow_control.isra.3.constprop.5>
    38e8:	38 de       	rcall	.-912    	; 0x355a <isotp_user_get_ms>
    38ea:	dc 01       	movw	r26, r24
    38ec:	cb 01       	movw	r24, r22
    38ee:	8c 59       	subi	r24, 0x9C	; 156
    38f0:	9f 4f       	sbci	r25, 0xFF	; 255
    38f2:	af 4f       	sbci	r26, 0xFF	; 255
    38f4:	bf 4f       	sbci	r27, 0xFF	; 255
    38f6:	f8 01       	movw	r30, r16
    38f8:	82 a7       	std	Z+42, r24	; 0x2a
    38fa:	93 a7       	std	Z+43, r25	; 0x2b
    38fc:	a4 a7       	std	Z+44, r26	; 0x2c
    38fe:	b5 a7       	std	Z+45, r27	; 0x2d
    3900:	34 cf       	rjmp	.-408    	; 0x376a <isotp_on_can_message+0x2a>
            break;
        }
        case ISOTP_PCI_TYPE_FIRST_FRAME: {
            /* update protocol resault */
            if (ISOTP_RECEIVE_STATUS_INPROGRESS == link->receive_status){
                link->receive_protocol_resault = ISOTP_PROTOCOL_RESAULT_UNEXP_PDU;
    3902:	2a ef       	ldi	r18, 0xFA	; 250
    3904:	3f ef       	ldi	r19, 0xFF	; 255
    3906:	37 a7       	std	Z+47, r19	; 0x2f
    3908:	26 a7       	std	Z+46, r18	; 0x2e
    390a:	c9 cf       	rjmp	.-110    	; 0x389e <isotp_on_can_message+0x15e>

    switch(message.as.common.type) {
        case ISOTP_PCI_TYPE_SINGLE: {
            /* update protocol resault */
            if (ISOTP_RECEIVE_STATUS_INPROGRESS == link->receive_status){
                link->receive_protocol_resault = ISOTP_PROTOCOL_RESAULT_UNEXP_PDU;
    390c:	2a ef       	ldi	r18, 0xFA	; 250
    390e:	3f ef       	ldi	r19, 0xFF	; 255
    3910:	37 a7       	std	Z+47, r19	; 0x2f
    3912:	26 a7       	std	Z+46, r18	; 0x2e
    3914:	9f cf       	rjmp	.-194    	; 0x3854 <isotp_on_can_message+0x114>
static int isotp_receive_consecutive_frame(IsoTpLink *link, IsoTpCanMessage *message, uint8_t len)
{
    uint16_t remaining_bytes;
    
    /* check sn */
    if (link->receive_sn != message->as.consecutive_frame.SN){
    3916:	82 95       	swap	r24
    3918:	8f 70       	andi	r24, 0x0F	; 15
    391a:	f8 01       	movw	r30, r16
    391c:	90 a5       	ldd	r25, Z+40	; 0x28
    391e:	98 13       	cpse	r25, r24
    3920:	61 c0       	rjmp	.+194    	; 0x39e4 <isotp_on_can_message+0x2a4>
        return ISOTP_RET_WRONG_SN;
    }

    /* check data length */
    remaining_bytes = link->receive_size - link->receive_offset;
    3922:	86 a1       	ldd	r24, Z+38	; 0x26
    3924:	97 a1       	ldd	r25, Z+39	; 0x27
    3926:	e4 a0       	ldd	r14, Z+36	; 0x24
    3928:	f5 a0       	ldd	r15, Z+37	; 0x25
    392a:	e8 1a       	sub	r14, r24
    392c:	f9 0a       	sbc	r15, r25
    392e:	f8 e0       	ldi	r31, 0x08	; 8
    3930:	ef 16       	cp	r14, r31
    3932:	f1 04       	cpc	r15, r1
    3934:	18 f0       	brcs	.+6      	; 0x393c <isotp_on_can_message+0x1fc>
    3936:	27 e0       	ldi	r18, 0x07	; 7
    3938:	e2 2e       	mov	r14, r18
    393a:	f1 2c       	mov	r15, r1
    if (remaining_bytes > sizeof(message->as.consecutive_frame.data)){
        remaining_bytes = sizeof(message->as.consecutive_frame.data);
    }
    if (remaining_bytes > len - 1){
    393c:	21 e0       	ldi	r18, 0x01	; 1
    393e:	c2 1a       	sub	r12, r18
    3940:	d1 08       	sbc	r13, r1
    3942:	ce 14       	cp	r12, r14
    3944:	df 04       	cpc	r13, r15
    3946:	08 f4       	brcc	.+2      	; 0x394a <isotp_on_can_message+0x20a>
    3948:	7d c0       	rjmp	.+250    	; 0x3a44 <isotp_on_can_message+0x304>
        isotp_user_debug("Consecutive frame too short.");
        return ISOTP_RET_LENGTH;
    }

    /* copying data */
    (void)memcpy(link->receive_buffer + link->receive_offset, 
    394a:	f8 01       	movw	r30, r16
    394c:	20 a1       	ldd	r18, Z+32	; 0x20
    394e:	31 a1       	ldd	r19, Z+33	; 0x21
    3950:	a7 01       	movw	r20, r14
    3952:	be 01       	movw	r22, r28
    3954:	6e 5f       	subi	r22, 0xFE	; 254
    3956:	7f 4f       	sbci	r23, 0xFF	; 255
    3958:	82 0f       	add	r24, r18
    395a:	93 1f       	adc	r25, r19
    395c:	0e 94 9d 34 	call	0x693a	; 0x693a <memcpy>
           message->as.consecutive_frame.data,
           remaining_bytes);

    link->receive_offset += remaining_bytes;
    3960:	f8 01       	movw	r30, r16
    3962:	86 a1       	ldd	r24, Z+38	; 0x26
    3964:	97 a1       	ldd	r25, Z+39	; 0x27
    3966:	e8 0e       	add	r14, r24
    3968:	f9 1e       	adc	r15, r25
    396a:	f7 a2       	std	Z+39, r15	; 0x27
    396c:	e6 a2       	std	Z+38, r14	; 0x26
    if (++(link->receive_sn) > 0x0F){
    396e:	80 a5       	ldd	r24, Z+40	; 0x28
    3970:	8f 5f       	subi	r24, 0xFF	; 255
    3972:	80 31       	cpi	r24, 0x10	; 16
        link->receive_sn = 0;
    3974:	a0 f1       	brcs	.+104    	; 0x39de <isotp_on_can_message+0x29e>
            }

            /* if success */
            if (ISOTP_RET_OK == ret){
                /* refresh timer cs */
                link->receive_timer_cr = isotp_user_get_ms() + ISO_TP_DEFAULT_RESPONSE_TIMEOUT;
    3976:	10 a6       	std	Z+40, r1	; 0x28
    3978:	f0 dd       	rcall	.-1056   	; 0x355a <isotp_user_get_ms>
    397a:	dc 01       	movw	r26, r24
    397c:	cb 01       	movw	r24, r22
    397e:	8c 59       	subi	r24, 0x9C	; 156
    3980:	9f 4f       	sbci	r25, 0xFF	; 255
    3982:	af 4f       	sbci	r26, 0xFF	; 255
    3984:	bf 4f       	sbci	r27, 0xFF	; 255
    3986:	f8 01       	movw	r30, r16
    3988:	82 a7       	std	Z+42, r24	; 0x2a
    398a:	93 a7       	std	Z+43, r25	; 0x2b
    398c:	a4 a7       	std	Z+44, r26	; 0x2c
    398e:	b5 a7       	std	Z+45, r27	; 0x2d
                
                /* receive finished */
                if (link->receive_offset >= link->receive_size){
    3990:	26 a1       	ldd	r18, Z+38	; 0x26
    3992:	37 a1       	ldd	r19, Z+39	; 0x27
    3994:	84 a1       	ldd	r24, Z+36	; 0x24
    3996:	95 a1       	ldd	r25, Z+37	; 0x25
    3998:	28 17       	cp	r18, r24
    399a:	39 07       	cpc	r19, r25
    399c:	08 f0       	brcs	.+2      	; 0x39a0 <isotp_on_can_message+0x260>
    399e:	46 c0       	rjmp	.+140    	; 0x3a2c <isotp_on_can_message+0x2ec>
                    link->receive_status = ISOTP_RECEIVE_STATUS_FULL;
                } else {
                    /* send fc when bs reaches limit */
                    if (0 == --link->receive_bs_count){
    39a0:	f8 01       	movw	r30, r16
    39a2:	81 a5       	ldd	r24, Z+41	; 0x29
    39a4:	81 50       	subi	r24, 0x01	; 1
    39a6:	09 f4       	brne	.+2      	; 0x39aa <isotp_on_can_message+0x26a>
    39a8:	45 c0       	rjmp	.+138    	; 0x3a34 <isotp_on_can_message+0x2f4>
    39aa:	81 a7       	std	Z+41, r24	; 0x29
    39ac:	de ce       	rjmp	.-580    	; 0x376a <isotp_on_can_message+0x2a>

static int isotp_receive_flow_conrtrol_frame(IsoTpLink *link, IsoTpCanMessage *message, uint8_t len)
{
    /* check message length */
    if (len < 3){
        isotp_user_debug("Flow control frame too short.");
    39ae:	8e ea       	ldi	r24, 0xAE	; 174
    39b0:	92 e0       	ldi	r25, 0x02	; 2
    39b2:	9f 93       	push	r25
    39b4:	8f 93       	push	r24
    39b6:	b1 dd       	rcall	.-1182   	; 0x351a <isotp_user_debug>
    39b8:	0f 90       	pop	r0
    39ba:	0f 90       	pop	r0
    39bc:	d6 ce       	rjmp	.-596    	; 0x376a <isotp_on_can_message+0x2a>
static int isotp_receive_single_frame(IsoTpLink *link, IsoTpCanMessage *message, uint8_t len)
{   
    /* check data length */
    if ((0 == message->as.single_frame.SF_DL) ||
        (message->as.single_frame.SF_DL > (len - 1))){
        isotp_user_debug("Single-frame length too small.");
    39be:	8d e4       	ldi	r24, 0x4D	; 77
    39c0:	92 e0       	ldi	r25, 0x02	; 2
    39c2:	9f 93       	push	r25
    39c4:	8f 93       	push	r24
    39c6:	a9 dd       	rcall	.-1198   	; 0x351a <isotp_user_debug>
    39c8:	0f 90       	pop	r0
    39ca:	0f 90       	pop	r0
    39cc:	ce ce       	rjmp	.-612    	; 0x376a <isotp_on_can_message+0x2a>
static int isotp_receive_first_frame(IsoTpLink *link, IsoTpCanMessage *message, uint8_t len)
{
    uint16_t payload_length;

    if (8 != len){
        isotp_user_debug("First frame should be 8 byte lenght.");
    39ce:	8c e6       	ldi	r24, 0x6C	; 108
    39d0:	92 e0       	ldi	r25, 0x02	; 2
    39d2:	9f 93       	push	r25
    39d4:	8f 93       	push	r24
    39d6:	a1 dd       	rcall	.-1214   	; 0x351a <isotp_user_debug>
    39d8:	0f 90       	pop	r0
    39da:	0f 90       	pop	r0
    39dc:	c6 ce       	rjmp	.-628    	; 0x376a <isotp_on_can_message+0x2a>
    39de:	f8 01       	movw	r30, r16
    (void)memcpy(link->receive_buffer + link->receive_offset, 
           message->as.consecutive_frame.data,
           remaining_bytes);

    link->receive_offset += remaining_bytes;
    if (++(link->receive_sn) > 0x0F){
    39e0:	80 a7       	std	Z+40, r24	; 0x28
    39e2:	ca cf       	rjmp	.-108    	; 0x3978 <isotp_on_can_message+0x238>
    39e4:	8c ef       	ldi	r24, 0xFC	; 252
            /* handle message */
            ret = isotp_receive_consecutive_frame(link, &message, len);

            /* if wrong sn */
            if (ISOTP_RET_WRONG_SN == ret){
                link->receive_protocol_resault = ISOTP_PROTOCOL_RESAULT_WRONG_SN;
    39e6:	9f ef       	ldi	r25, 0xFF	; 255
    39e8:	f8 01       	movw	r30, r16
    39ea:	97 a7       	std	Z+47, r25	; 0x2f
    39ec:	86 a7       	std	Z+46, r24	; 0x2e
    39ee:	10 aa       	std	Z+48, r1	; 0x30
                link->receive_status = ISOTP_RECEIVE_STATUS_IDLE;
    39f0:	bc ce       	rjmp	.-648    	; 0x376a <isotp_on_can_message+0x2a>
                break;
    39f2:	f8 01       	movw	r30, r16
                    link->send_protocol_resault = ISOTP_PROTOCOL_RESAULT_BUFFER_OVFLW;
                    link->send_status = ISOTP_SEND_STATUS_ERROR;
                } 
                /* wait */
                else if (PCI_FLOW_STATUS_WAIT == message.as.flow_control.FS) {
                    link->send_wtf_count += 1;
    39f4:	80 89       	ldd	r24, Z+16	; 0x10
    39f6:	8f 5f       	subi	r24, 0xFF	; 255
    39f8:	80 8b       	std	Z+16, r24	; 0x10
    39fa:	82 30       	cpi	r24, 0x02	; 2
                    /* wati exceed allowed count */
                    if (link->send_wtf_count > ISO_TP_MAX_WFT_NUMBER){
    39fc:	08 f4       	brcc	.+2      	; 0x3a00 <isotp_on_can_message+0x2c0>
    39fe:	b5 ce       	rjmp	.-662    	; 0x376a <isotp_on_can_message+0x2a>
    3a00:	89 ef       	ldi	r24, 0xF9	; 249
                        link->send_protocol_resault = ISOTP_PROTOCOL_RESAULT_WFT_OVRN;
    3a02:	9f ef       	ldi	r25, 0xFF	; 255
    3a04:	92 8f       	std	Z+26, r25	; 0x1a
    3a06:	81 8f       	std	Z+25, r24	; 0x19
    3a08:	82 e0       	ldi	r24, 0x02	; 2
                        link->send_status = ISOTP_SEND_STATUS_ERROR;
    3a0a:	83 8f       	std	Z+27, r24	; 0x1b
    3a0c:	ae ce       	rjmp	.-676    	; 0x376a <isotp_on_can_message+0x2a>
    3a0e:	88 ef       	ldi	r24, 0xF8	; 248
                /* refresh bs timer */
                link->send_timer_bs = isotp_user_get_ms() + ISO_TP_DEFAULT_RESPONSE_TIMEOUT;

                /* overflow */
                if (PCI_FLOW_STATUS_OVERFLOW == message.as.flow_control.FS) {
                    link->send_protocol_resault = ISOTP_PROTOCOL_RESAULT_BUFFER_OVFLW;
    3a10:	9f ef       	ldi	r25, 0xFF	; 255
    3a12:	f8 01       	movw	r30, r16
    3a14:	92 8f       	std	Z+26, r25	; 0x1a
    3a16:	81 8f       	std	Z+25, r24	; 0x19
    3a18:	82 e0       	ldi	r24, 0x02	; 2
                    link->send_status = ISOTP_SEND_STATUS_ERROR;
    3a1a:	83 8f       	std	Z+27, r24	; 0x1b
    3a1c:	a6 ce       	rjmp	.-692    	; 0x376a <isotp_on_can_message+0x2a>
    3a1e:	90 e0       	ldi	r25, 0x00	; 0
                /* permit send */
                else if (PCI_FLOW_STATUS_CONTINUE == message.as.flow_control.FS){
                    if (0 == message.as.flow_control.BS){
                        link->send_bs_remain = ISOTP_INVALID_BS;
                    } else {
                        link->send_bs_remain = message.as.flow_control.BS;
    3a20:	f8 01       	movw	r30, r16
    3a22:	96 87       	std	Z+14, r25	; 0x0e
    3a24:	85 87       	std	Z+13, r24	; 0x0d
    3a26:	f8 ce       	rjmp	.-528    	; 0x3818 <isotp_on_can_message+0xd8>
    3a28:	81 e0       	ldi	r24, 0x01	; 1
static uint8_t isotp_st_min_to_ms(uint8_t st_min) 
{
    uint8_t ms;
    
    if (st_min >= 0xF1 && st_min <= 0xF9){
        ms = 1;
    3a2a:	fe ce       	rjmp	.-516    	; 0x3828 <isotp_on_can_message+0xe8>
    3a2c:	82 e0       	ldi	r24, 0x02	; 2
                /* refresh timer cs */
                link->receive_timer_cr = isotp_user_get_ms() + ISO_TP_DEFAULT_RESPONSE_TIMEOUT;
                
                /* receive finished */
                if (link->receive_offset >= link->receive_size){
                    link->receive_status = ISOTP_RECEIVE_STATUS_FULL;
    3a2e:	f8 01       	movw	r30, r16
    3a30:	80 ab       	std	Z+48, r24	; 0x30
    3a32:	9b ce       	rjmp	.-714    	; 0x376a <isotp_on_can_message+0x2a>
                } else {
                    /* send fc when bs reaches limit */
                    if (0 == --link->receive_bs_count){
                        link->receive_bs_count = ISO_TP_DEFAULT_BLOCK_SIZE;											
    3a34:	8f e0       	ldi	r24, 0x0F	; 15
    3a36:	f8 01       	movw	r30, r16
    3a38:	81 a7       	std	Z+41, r24	; 0x29
                        isotp_send_flow_control(link, PCI_FLOW_STATUS_CONTINUE, link->receive_bs_count, ISO_TP_DEFAULT_ST_MIN);
    3a3a:	4f e0       	ldi	r20, 0x0F	; 15
    3a3c:	60 e0       	ldi	r22, 0x00	; 0
    3a3e:	c8 01       	movw	r24, r16
    3a40:	8e dd       	rcall	.-1252   	; 0x355e <isotp_send_flow_control.isra.3.constprop.5>
    3a42:	93 ce       	rjmp	.-730    	; 0x376a <isotp_on_can_message+0x2a>
    remaining_bytes = link->receive_size - link->receive_offset;
    if (remaining_bytes > sizeof(message->as.consecutive_frame.data)){
        remaining_bytes = sizeof(message->as.consecutive_frame.data);
    }
    if (remaining_bytes > len - 1){
        isotp_user_debug("Consecutive frame too short.");
    3a44:	81 e9       	ldi	r24, 0x91	; 145
    3a46:	92 e0       	ldi	r25, 0x02	; 2
    3a48:	9f 93       	push	r25
    3a4a:	8f 93       	push	r24
    3a4c:	66 dd       	rcall	.-1332   	; 0x351a <isotp_user_debug>
    3a4e:	0f 90       	pop	r0
    3a50:	0f 90       	pop	r0
    3a52:	8b ce       	rjmp	.-746    	; 0x376a <isotp_on_can_message+0x2a>
    3a54:	80 e0       	ldi	r24, 0x00	; 0
    if (st_min >= 0xF1 && st_min <= 0xF9){
        ms = 1;
    } else if (st_min <= 0x7F) {
        ms = st_min;
    } else {
        ms = 0;
    3a56:	e8 ce       	rjmp	.-560    	; 0x3828 <isotp_on_can_message+0xe8>

00003a58 <isotp_receive>:
    3a58:	ef 92       	push	r14
    
    return;
}

int isotp_receive(IsoTpLink *link, uint8_t *payload, const uint16_t payload_size, uint16_t *out_size)
{
    3a5a:	ff 92       	push	r15
    3a5c:	0f 93       	push	r16
    3a5e:	1f 93       	push	r17
    3a60:	cf 93       	push	r28
    3a62:	df 93       	push	r29
    3a64:	fc 01       	movw	r30, r24
    uint16_t copylen;
    
    if (ISOTP_RECEIVE_STATUS_FULL != link->receive_status){
    3a66:	80 a9       	ldd	r24, Z+48	; 0x30
    3a68:	82 30       	cpi	r24, 0x02	; 2
    3a6a:	e1 f4       	brne	.+56     	; 0x3aa4 <isotp_receive+0x4c>
        return ISOTP_RET_NO_DATA;
    }

    copylen = link->receive_size;
    3a6c:	04 a1       	ldd	r16, Z+36	; 0x24
    3a6e:	15 a1       	ldd	r17, Z+37	; 0x25
    3a70:	40 17       	cp	r20, r16
    3a72:	51 07       	cpc	r21, r17
    3a74:	a8 f0       	brcs	.+42     	; 0x3aa0 <isotp_receive+0x48>
    3a76:	79 01       	movw	r14, r18
    3a78:	cb 01       	movw	r24, r22
    3a7a:	ef 01       	movw	r28, r30
    if (copylen > payload_size){
        copylen = payload_size;
    }

    memcpy(payload, link->receive_buffer, copylen);
    3a7c:	60 a1       	ldd	r22, Z+32	; 0x20
    3a7e:	71 a1       	ldd	r23, Z+33	; 0x21
    3a80:	a8 01       	movw	r20, r16
    3a82:	0e 94 9d 34 	call	0x693a	; 0x693a <memcpy>
    *out_size = copylen;
    3a86:	f7 01       	movw	r30, r14
    3a88:	11 83       	std	Z+1, r17	; 0x01
    3a8a:	00 83       	st	Z, r16

    link->receive_status = ISOTP_RECEIVE_STATUS_IDLE;
    3a8c:	18 aa       	std	Y+48, r1	; 0x30

    return ISOTP_RET_OK;
    3a8e:	80 e0       	ldi	r24, 0x00	; 0
    3a90:	90 e0       	ldi	r25, 0x00	; 0
}
    3a92:	df 91       	pop	r29
    3a94:	cf 91       	pop	r28
    3a96:	1f 91       	pop	r17
    3a98:	0f 91       	pop	r16
    3a9a:	ff 90       	pop	r15
    3a9c:	ef 90       	pop	r14
    3a9e:	08 95       	ret
    3aa0:	8a 01       	movw	r16, r20
    3aa2:	e9 cf       	rjmp	.-46     	; 0x3a76 <isotp_receive+0x1e>
int isotp_receive(IsoTpLink *link, uint8_t *payload, const uint16_t payload_size, uint16_t *out_size)
{
    uint16_t copylen;
    
    if (ISOTP_RECEIVE_STATUS_FULL != link->receive_status){
        return ISOTP_RET_NO_DATA;
    3aa4:	8b ef       	ldi	r24, 0xFB	; 251
    3aa6:	9f ef       	ldi	r25, 0xFF	; 255
    3aa8:	f4 cf       	rjmp	.-24     	; 0x3a92 <isotp_receive+0x3a>

00003aaa <isotp_init_link>:
}

void isotp_init_link(IsoTpLink *link, uint32_t sendid, 
                     uint8_t *sendbuf, uint16_t sendbufsize,
                     uint8_t *recvbuf, uint16_t recvbufsize)
{
    3aaa:	cf 92       	push	r12
    3aac:	df 92       	push	r13
    3aae:	ef 92       	push	r14
    3ab0:	ff 92       	push	r15
    3ab2:	0f 93       	push	r16
    3ab4:	1f 93       	push	r17
    3ab6:	fc 01       	movw	r30, r24
    memset(link, 0, sizeof(*link));
    3ab8:	81 e3       	ldi	r24, 0x31	; 49
    3aba:	df 01       	movw	r26, r30
    3abc:	1d 92       	st	X+, r1
    3abe:	8a 95       	dec	r24
    3ac0:	e9 f7       	brne	.-6      	; 0x3abc <isotp_init_link+0x12>
    link->receive_status = ISOTP_RECEIVE_STATUS_IDLE;
    3ac2:	10 aa       	std	Z+48, r1	; 0x30
    link->send_status = ISOTP_SEND_STATUS_IDLE;
    3ac4:	13 8e       	std	Z+27, r1	; 0x1b
    link->send_arbitration_id = sendid;
    3ac6:	40 83       	st	Z, r20
    3ac8:	51 83       	std	Z+1, r21	; 0x01
    3aca:	62 83       	std	Z+2, r22	; 0x02
    3acc:	73 83       	std	Z+3, r23	; 0x03
    link->send_buffer = sendbuf;
    3ace:	35 83       	std	Z+5, r19	; 0x05
    3ad0:	24 83       	std	Z+4, r18	; 0x04
    link->send_buf_size = sendbufsize;
    3ad2:	17 83       	std	Z+7, r17	; 0x07
    3ad4:	06 83       	std	Z+6, r16	; 0x06
    link->receive_buffer = recvbuf;
    3ad6:	f1 a2       	std	Z+33, r15	; 0x21
    3ad8:	e0 a2       	std	Z+32, r14	; 0x20
    link->recevie_buf_size = recvbufsize;
    3ada:	d3 a2       	std	Z+35, r13	; 0x23
    3adc:	c2 a2       	std	Z+34, r12	; 0x22
    
    return;
}
    3ade:	1f 91       	pop	r17
    3ae0:	0f 91       	pop	r16
    3ae2:	ff 90       	pop	r15
    3ae4:	ef 90       	pop	r14
    3ae6:	df 90       	pop	r13
    3ae8:	cf 90       	pop	r12
    3aea:	08 95       	ret

00003aec <isotp_poll>:

void isotp_poll(IsoTpLink *link)
{
    3aec:	cf 92       	push	r12
    3aee:	df 92       	push	r13
    3af0:	ef 92       	push	r14
    3af2:	ff 92       	push	r15
    3af4:	0f 93       	push	r16
    3af6:	1f 93       	push	r17
    3af8:	cf 93       	push	r28
    3afa:	df 93       	push	r29
    3afc:	cd b7       	in	r28, 0x3d	; 61
    3afe:	de b7       	in	r29, 0x3e	; 62
    3b00:	28 97       	sbiw	r28, 0x08	; 8
    3b02:	0f b6       	in	r0, 0x3f	; 63
    3b04:	f8 94       	cli
    3b06:	de bf       	out	0x3e, r29	; 62
    3b08:	0f be       	out	0x3f, r0	; 63
    3b0a:	cd bf       	out	0x3d, r28	; 61
    3b0c:	8c 01       	movw	r16, r24
    int ret;

    /* only polling when operation in progress */
    if (ISOTP_SEND_STATUS_INPROGRESS == link->send_status){
    3b0e:	fc 01       	movw	r30, r24
    3b10:	83 8d       	ldd	r24, Z+27	; 0x1b
    3b12:	81 30       	cpi	r24, 0x01	; 1
    3b14:	99 f0       	breq	.+38     	; 0x3b3c <isotp_poll+0x50>
            link->send_status = ISOTP_SEND_STATUS_ERROR;
        }
    }

    /* only polling when operation in progress */
    if (ISOTP_RECEIVE_STATUS_INPROGRESS == link->receive_status){
    3b16:	f8 01       	movw	r30, r16
    3b18:	80 a9       	ldd	r24, Z+48	; 0x30
    3b1a:	81 30       	cpi	r24, 0x01	; 1
    3b1c:	b1 f1       	breq	.+108    	; 0x3b8a <isotp_poll+0x9e>
            link->receive_status = ISOTP_RECEIVE_STATUS_IDLE;
        }
    }

    return;
}
    3b1e:	28 96       	adiw	r28, 0x08	; 8
    3b20:	0f b6       	in	r0, 0x3f	; 63
    3b22:	f8 94       	cli
    3b24:	de bf       	out	0x3e, r29	; 62
    3b26:	0f be       	out	0x3f, r0	; 63
    3b28:	cd bf       	out	0x3d, r28	; 61
    3b2a:	df 91       	pop	r29
    3b2c:	cf 91       	pop	r28
    3b2e:	1f 91       	pop	r17
    3b30:	0f 91       	pop	r16
    3b32:	ff 90       	pop	r15
    3b34:	ef 90       	pop	r14
    3b36:	df 90       	pop	r13
    3b38:	cf 90       	pop	r12
    3b3a:	08 95       	ret

    /* only polling when operation in progress */
    if (ISOTP_SEND_STATUS_INPROGRESS == link->send_status){

        /* continue send data */
        if (/* send data if bs_remain is invalid or bs_remain large than zero */
    3b3c:	85 85       	ldd	r24, Z+13	; 0x0d
    3b3e:	96 85       	ldd	r25, Z+14	; 0x0e
    3b40:	89 2b       	or	r24, r25
    3b42:	79 f0       	breq	.+30     	; 0x3b62 <isotp_poll+0x76>
            (ISOTP_INVALID_BS == link->send_bs_remain || link->send_bs_remain > 0) &&
    3b44:	87 85       	ldd	r24, Z+15	; 0x0f
    3b46:	88 23       	and	r24, r24
    3b48:	91 f1       	breq	.+100    	; 0x3bae <isotp_poll+0xc2>
            /* and if st_min is zero or go beyond interval time */
            (0 == link->send_st_min || (0 != link->send_st_min && IsoTpTimeAfter(isotp_user_get_ms(), link->send_timer_st)))){
    3b4a:	f8 01       	movw	r30, r16
    3b4c:	c1 88       	ldd	r12, Z+17	; 0x11
    3b4e:	d2 88       	ldd	r13, Z+18	; 0x12
    3b50:	e3 88       	ldd	r14, Z+19	; 0x13
    3b52:	f4 88       	ldd	r15, Z+20	; 0x14
    3b54:	02 dd       	rcall	.-1532   	; 0x355a <isotp_user_get_ms>
    3b56:	c6 1a       	sub	r12, r22
    3b58:	d7 0a       	sbc	r13, r23
    3b5a:	e8 0a       	sbc	r14, r24
    3b5c:	f9 0a       	sbc	r15, r25
    3b5e:	f7 fc       	sbrc	r15, 7
    3b60:	26 c0       	rjmp	.+76     	; 0x3bae <isotp_poll+0xc2>
                link->send_status = ISOTP_SEND_STATUS_ERROR;
            }
        }

        /* check timeout */
        if (IsoTpTimeAfter(isotp_user_get_ms(), link->send_timer_bs)){
    3b62:	f8 01       	movw	r30, r16
    3b64:	c5 88       	ldd	r12, Z+21	; 0x15
    3b66:	d6 88       	ldd	r13, Z+22	; 0x16
    3b68:	e7 88       	ldd	r14, Z+23	; 0x17
    3b6a:	f0 8c       	ldd	r15, Z+24	; 0x18
    3b6c:	f6 dc       	rcall	.-1556   	; 0x355a <isotp_user_get_ms>
    3b6e:	c6 1a       	sub	r12, r22
    3b70:	d7 0a       	sbc	r13, r23
    3b72:	e8 0a       	sbc	r14, r24
    3b74:	f9 0a       	sbc	r15, r25
    3b76:	f7 fe       	sbrs	r15, 7
    3b78:	ce cf       	rjmp	.-100    	; 0x3b16 <isotp_poll+0x2a>
            link->send_protocol_resault = ISOTP_PROTOCOL_RESAULT_TIMEOUT_BS;
    3b7a:	8e ef       	ldi	r24, 0xFE	; 254
    3b7c:	9f ef       	ldi	r25, 0xFF	; 255
    3b7e:	f8 01       	movw	r30, r16
    3b80:	92 8f       	std	Z+26, r25	; 0x1a
    3b82:	81 8f       	std	Z+25, r24	; 0x19
            link->send_status = ISOTP_SEND_STATUS_ERROR;
    3b84:	82 e0       	ldi	r24, 0x02	; 2
    3b86:	83 8f       	std	Z+27, r24	; 0x1b
    3b88:	c6 cf       	rjmp	.-116    	; 0x3b16 <isotp_poll+0x2a>

    /* only polling when operation in progress */
    if (ISOTP_RECEIVE_STATUS_INPROGRESS == link->receive_status){
        
        /* check timeout */
        if (IsoTpTimeAfter(isotp_user_get_ms(), link->receive_timer_cr)){
    3b8a:	c2 a4       	ldd	r12, Z+42	; 0x2a
    3b8c:	d3 a4       	ldd	r13, Z+43	; 0x2b
    3b8e:	e4 a4       	ldd	r14, Z+44	; 0x2c
    3b90:	f5 a4       	ldd	r15, Z+45	; 0x2d
    3b92:	e3 dc       	rcall	.-1594   	; 0x355a <isotp_user_get_ms>
    3b94:	c6 1a       	sub	r12, r22
    3b96:	d7 0a       	sbc	r13, r23
    3b98:	e8 0a       	sbc	r14, r24
    3b9a:	f9 0a       	sbc	r15, r25
    3b9c:	f7 fe       	sbrs	r15, 7
    3b9e:	bf cf       	rjmp	.-130    	; 0x3b1e <isotp_poll+0x32>
            link->receive_protocol_resault = ISOTP_PROTOCOL_RESAULT_TIMEOUT_CR;
    3ba0:	8d ef       	ldi	r24, 0xFD	; 253
    3ba2:	9f ef       	ldi	r25, 0xFF	; 255
    3ba4:	f8 01       	movw	r30, r16
    3ba6:	97 a7       	std	Z+47, r25	; 0x2f
    3ba8:	86 a7       	std	Z+46, r24	; 0x2e
            link->receive_status = ISOTP_RECEIVE_STATUS_IDLE;
    3baa:	10 aa       	std	Z+48, r1	; 0x30
        }
    }

    return;
    3bac:	b8 cf       	rjmp	.-144    	; 0x3b1e <isotp_poll+0x32>
	IsoTpCanMessage message;
    uint8_t data_length;
    int ret;

    /* multi frame message length must greater than 7  */
    assert(link->send_size > 7);
    3bae:	f8 01       	movw	r30, r16
    3bb0:	e0 84       	ldd	r14, Z+8	; 0x08
    3bb2:	f1 84       	ldd	r15, Z+9	; 0x09
    3bb4:	f8 e0       	ldi	r31, 0x08	; 8
    3bb6:	ef 16       	cp	r14, r31
    3bb8:	f1 04       	cpc	r15, r1
    3bba:	08 f4       	brcc	.+2      	; 0x3bbe <isotp_poll+0xd2>
    3bbc:	74 c0       	rjmp	.+232    	; 0x3ca6 <isotp_poll+0x1ba>

    /* setup message  */
    message.as.consecutive_frame.type = TSOTP_PCI_TYPE_CONSECUTIVE_FRAME;
    message.as.consecutive_frame.SN = link->send_sn;
    3bbe:	f8 01       	movw	r30, r16
    3bc0:	84 85       	ldd	r24, Z+12	; 0x0c
    3bc2:	82 95       	swap	r24
    3bc4:	80 7f       	andi	r24, 0xF0	; 240
    3bc6:	82 60       	ori	r24, 0x02	; 2
    3bc8:	89 83       	std	Y+1, r24	; 0x01
    data_length = link->send_size - link->send_offset;
    3bca:	22 85       	ldd	r18, Z+10	; 0x0a
    3bcc:	33 85       	ldd	r19, Z+11	; 0x0b
    3bce:	8e 2d       	mov	r24, r14
    3bd0:	82 1b       	sub	r24, r18
    if (data_length > sizeof(message.as.consecutive_frame.data)){
        data_length = sizeof(message.as.consecutive_frame.data);
    }
    (void)memcpy(message.as.consecutive_frame.data, link->send_buffer + link->send_offset, data_length);
    3bd2:	88 30       	cpi	r24, 0x08	; 8
    3bd4:	08 f0       	brcs	.+2      	; 0x3bd8 <isotp_poll+0xec>
    3bd6:	87 e0       	ldi	r24, 0x07	; 7
    3bd8:	e8 2e       	mov	r14, r24
    3bda:	f1 2c       	mov	r15, r1
    3bdc:	f8 01       	movw	r30, r16
    3bde:	64 81       	ldd	r22, Z+4	; 0x04
    3be0:	75 81       	ldd	r23, Z+5	; 0x05
    3be2:	62 0f       	add	r22, r18
    3be4:	73 1f       	adc	r23, r19
    3be6:	a7 01       	movw	r20, r14
    3be8:	ce 01       	movw	r24, r28
    3bea:	02 96       	adiw	r24, 0x02	; 2
    3bec:	0e 94 9d 34 	call	0x693a	; 0x693a <memcpy>

    /* send message */
#ifdef ISO_TP_FRAME_PADDING
    (void)memset(message.as.consecutive_frame.data + data_length,
    3bf0:	47 e0       	ldi	r20, 0x07	; 7
    3bf2:	50 e0       	ldi	r21, 0x00	; 0
    3bf4:	4e 19       	sub	r20, r14
    3bf6:	5f 09       	sbc	r21, r15
    3bf8:	60 e0       	ldi	r22, 0x00	; 0
    3bfa:	70 e0       	ldi	r23, 0x00	; 0
    3bfc:	82 e0       	ldi	r24, 0x02	; 2
    3bfe:	90 e0       	ldi	r25, 0x00	; 0
    3c00:	8c 0f       	add	r24, r28
    3c02:	9d 1f       	adc	r25, r29
    3c04:	8e 0d       	add	r24, r14
    3c06:	9f 1d       	adc	r25, r15
    3c08:	0e 94 b7 34 	call	0x696e	; 0x696e <memset>
           0,
           sizeof(message.as.consecutive_frame.data) - data_length);
    ret = isotp_user_send_can(link->send_arbitration_id,
    3c0c:	f8 01       	movw	r30, r16
    3c0e:	60 81       	ld	r22, Z
    3c10:	71 81       	ldd	r23, Z+1	; 0x01
    3c12:	82 81       	ldd	r24, Z+2	; 0x02
    3c14:	93 81       	ldd	r25, Z+3	; 0x03
    3c16:	28 e0       	ldi	r18, 0x08	; 8
    3c18:	ae 01       	movw	r20, r28
    3c1a:	4f 5f       	subi	r20, 0xFF	; 255
    3c1c:	5f 4f       	sbci	r21, 0xFF	; 255
    3c1e:	7f dc       	rcall	.-1794   	; 0x351e <isotp_user_send_can>
#else
    ret = isotp_user_send_can(link->send_arbitration_id,
                           message.as.data_array.ptr,
                           data_length + 1);
#endif
    if (ISOTP_RET_OK == ret){
    3c20:	89 2b       	or	r24, r25
    3c22:	d1 f5       	brne	.+116    	; 0x3c98 <isotp_poll+0x1ac>
        link->send_offset += data_length;
    3c24:	f8 01       	movw	r30, r16
    3c26:	82 85       	ldd	r24, Z+10	; 0x0a
    3c28:	93 85       	ldd	r25, Z+11	; 0x0b
    3c2a:	e8 0e       	add	r14, r24
    3c2c:	f9 1e       	adc	r15, r25
    3c2e:	f3 86       	std	Z+11, r15	; 0x0b
    3c30:	e2 86       	std	Z+10, r14	; 0x0a
        if (++(link->send_sn) > 0x0F){
    3c32:	84 85       	ldd	r24, Z+12	; 0x0c
    3c34:	8f 5f       	subi	r24, 0xFF	; 255
    3c36:	80 31       	cpi	r24, 0x10	; 16
    3c38:	98 f1       	brcs	.+102    	; 0x3ca0 <isotp_poll+0x1b4>
            link->send_sn = 0;
    3c3a:	14 86       	std	Z+12, r1	; 0x0c
            /* and if st_min is zero or go beyond interval time */
            (0 == link->send_st_min || (0 != link->send_st_min && IsoTpTimeAfter(isotp_user_get_ms(), link->send_timer_st)))){
            
            ret = isotp_send_consecutive_frame(link);
            if (ISOTP_RET_OK == ret){
                if (ISOTP_INVALID_BS != link->send_bs_remain){
    3c3c:	f8 01       	movw	r30, r16
    3c3e:	85 85       	ldd	r24, Z+13	; 0x0d
    3c40:	96 85       	ldd	r25, Z+14	; 0x0e
    3c42:	8f 3f       	cpi	r24, 0xFF	; 255
    3c44:	ff ef       	ldi	r31, 0xFF	; 255
    3c46:	9f 07       	cpc	r25, r31
    3c48:	21 f0       	breq	.+8      	; 0x3c52 <isotp_poll+0x166>
                    link->send_bs_remain -= 1;
    3c4a:	01 97       	sbiw	r24, 0x01	; 1
    3c4c:	f8 01       	movw	r30, r16
    3c4e:	96 87       	std	Z+14, r25	; 0x0e
                }
                link->send_timer_bs = isotp_user_get_ms() + ISO_TP_DEFAULT_RESPONSE_TIMEOUT;
    3c50:	85 87       	std	Z+13, r24	; 0x0d
    3c52:	83 dc       	rcall	.-1786   	; 0x355a <isotp_user_get_ms>
    3c54:	dc 01       	movw	r26, r24
    3c56:	cb 01       	movw	r24, r22
    3c58:	8c 59       	subi	r24, 0x9C	; 156
    3c5a:	9f 4f       	sbci	r25, 0xFF	; 255
    3c5c:	af 4f       	sbci	r26, 0xFF	; 255
    3c5e:	bf 4f       	sbci	r27, 0xFF	; 255
    3c60:	f8 01       	movw	r30, r16
    3c62:	85 8b       	std	Z+21, r24	; 0x15
    3c64:	96 8b       	std	Z+22, r25	; 0x16
    3c66:	a7 8b       	std	Z+23, r26	; 0x17
                link->send_timer_st = isotp_user_get_ms() + link->send_st_min;
    3c68:	b0 8f       	std	Z+24, r27	; 0x18
    3c6a:	77 dc       	rcall	.-1810   	; 0x355a <isotp_user_get_ms>
    3c6c:	f8 01       	movw	r30, r16
    3c6e:	27 85       	ldd	r18, Z+15	; 0x0f
    3c70:	dc 01       	movw	r26, r24
    3c72:	cb 01       	movw	r24, r22
    3c74:	82 0f       	add	r24, r18
    3c76:	91 1d       	adc	r25, r1
    3c78:	a1 1d       	adc	r26, r1
    3c7a:	b1 1d       	adc	r27, r1
    3c7c:	81 8b       	std	Z+17, r24	; 0x11
    3c7e:	92 8b       	std	Z+18, r25	; 0x12
    3c80:	a3 8b       	std	Z+19, r26	; 0x13
    3c82:	b4 8b       	std	Z+20, r27	; 0x14

                /* check if send finish */
                if (link->send_offset >= link->send_size){
    3c84:	22 85       	ldd	r18, Z+10	; 0x0a
    3c86:	33 85       	ldd	r19, Z+11	; 0x0b
    3c88:	80 85       	ldd	r24, Z+8	; 0x08
    3c8a:	91 85       	ldd	r25, Z+9	; 0x09
    3c8c:	28 17       	cp	r18, r24
    3c8e:	39 07       	cpc	r19, r25
    3c90:	08 f4       	brcc	.+2      	; 0x3c94 <isotp_poll+0x1a8>
    3c92:	67 cf       	rjmp	.-306    	; 0x3b62 <isotp_poll+0x76>
                    link->send_status = ISOTP_SEND_STATUS_IDLE;
    3c94:	13 8e       	std	Z+27, r1	; 0x1b
    3c96:	65 cf       	rjmp	.-310    	; 0x3b62 <isotp_poll+0x76>
                }
            } else {
                link->send_status = ISOTP_SEND_STATUS_ERROR;
    3c98:	82 e0       	ldi	r24, 0x02	; 2
    3c9a:	f8 01       	movw	r30, r16
    3c9c:	83 8f       	std	Z+27, r24	; 0x1b
    3c9e:	61 cf       	rjmp	.-318    	; 0x3b62 <isotp_poll+0x76>
                           message.as.data_array.ptr,
                           data_length + 1);
#endif
    if (ISOTP_RET_OK == ret){
        link->send_offset += data_length;
        if (++(link->send_sn) > 0x0F){
    3ca0:	f8 01       	movw	r30, r16
    3ca2:	84 87       	std	Z+12, r24	; 0x0c
    3ca4:	cb cf       	rjmp	.-106    	; 0x3c3c <isotp_poll+0x150>
	IsoTpCanMessage message;
    uint8_t data_length;
    int ret;

    /* multi frame message length must greater than 7  */
    assert(link->send_size > 7);
    3ca6:	0e 94 90 34 	call	0x6920	; 0x6920 <abort>

00003caa <isotpi_send>:
static uint8_t g_isotpRecvBuf[128];
static uint8_t g_isotpSendBuf[128];



int isotpi_send(can_id_t id, uint8_t payload_size , uint8_t payload[payload_size]){
    3caa:	8f 92       	push	r8
    3cac:	9f 92       	push	r9
    3cae:	bf 92       	push	r11
    3cb0:	cf 92       	push	r12
    3cb2:	df 92       	push	r13
    3cb4:	ef 92       	push	r14
    3cb6:	ff 92       	push	r15
    3cb8:	0f 93       	push	r16
    3cba:	1f 93       	push	r17
    3cbc:	cf 93       	push	r28
    3cbe:	df 93       	push	r29
    3cc0:	00 d0       	rcall	.+0      	; 0x3cc2 <isotpi_send+0x18>
    3cc2:	00 d0       	rcall	.+0      	; 0x3cc4 <isotpi_send+0x1a>
    3cc4:	cd b7       	in	r28, 0x3d	; 61
    3cc6:	de b7       	in	r29, 0x3e	; 62
    3cc8:	b6 2e       	mov	r11, r22
    3cca:	4a 01       	movw	r8, r20
	uint32_t arbitration_id = 0;
    3ccc:	19 82       	std	Y+1, r1	; 0x01
    3cce:	1a 82       	std	Y+2, r1	; 0x02
    3cd0:	1b 82       	std	Y+3, r1	; 0x03
    3cd2:	1c 82       	std	Y+4, r1	; 0x04
	memcpy(&arbitration_id,id,2);
    3cd4:	fc 01       	movw	r30, r24
    3cd6:	80 81       	ld	r24, Z
    3cd8:	91 81       	ldd	r25, Z+1	; 0x01
    3cda:	9a 83       	std	Y+2, r25	; 0x02
    3cdc:	89 83       	std	Y+1, r24	; 0x01
	isotp_init_link(&g_link,arbitration_id, g_isotpSendBuf, sizeof(g_isotpSendBuf),g_isotpRecvBuf, sizeof(g_isotpRecvBuf));
    3cde:	49 81       	ldd	r20, Y+1	; 0x01
    3ce0:	5a 81       	ldd	r21, Y+2	; 0x02
    3ce2:	6b 81       	ldd	r22, Y+3	; 0x03
    3ce4:	7c 81       	ldd	r23, Y+4	; 0x04
    3ce6:	80 e8       	ldi	r24, 0x80	; 128
    3ce8:	c8 2e       	mov	r12, r24
    3cea:	d1 2c       	mov	r13, r1
    3cec:	90 eb       	ldi	r25, 0xB0	; 176
    3cee:	e9 2e       	mov	r14, r25
    3cf0:	95 e0       	ldi	r25, 0x05	; 5
    3cf2:	f9 2e       	mov	r15, r25
    3cf4:	00 e8       	ldi	r16, 0x80	; 128
    3cf6:	10 e0       	ldi	r17, 0x00	; 0
    3cf8:	20 e3       	ldi	r18, 0x30	; 48
    3cfa:	35 e0       	ldi	r19, 0x05	; 5
    3cfc:	80 e3       	ldi	r24, 0x30	; 48
    3cfe:	96 e0       	ldi	r25, 0x06	; 6
    3d00:	d4 de       	rcall	.-600    	; 0x3aaa <isotp_init_link>
	return isotp_send(&g_link, payload, payload_size);
    3d02:	4b 2d       	mov	r20, r11
    3d04:	50 e0       	ldi	r21, 0x00	; 0
    3d06:	b4 01       	movw	r22, r8
    3d08:	80 e3       	ldi	r24, 0x30	; 48
    3d0a:	96 e0       	ldi	r25, 0x06	; 6
}
    3d0c:	0f 90       	pop	r0
    3d0e:	0f 90       	pop	r0
    3d10:	0f 90       	pop	r0
    3d12:	0f 90       	pop	r0
    3d14:	df 91       	pop	r29
    3d16:	cf 91       	pop	r28
    3d18:	1f 91       	pop	r17
    3d1a:	0f 91       	pop	r16
    3d1c:	ff 90       	pop	r15
    3d1e:	ef 90       	pop	r14
    3d20:	df 90       	pop	r13
    3d22:	cf 90       	pop	r12
    3d24:	bf 90       	pop	r11
    3d26:	9f 90       	pop	r9

int isotpi_send(can_id_t id, uint8_t payload_size , uint8_t payload[payload_size]){
	uint32_t arbitration_id = 0;
	memcpy(&arbitration_id,id,2);
	isotp_init_link(&g_link,arbitration_id, g_isotpSendBuf, sizeof(g_isotpSendBuf),g_isotpRecvBuf, sizeof(g_isotpRecvBuf));
	return isotp_send(&g_link, payload, payload_size);
    3d28:	8f 90       	pop	r8
    3d2a:	fd cc       	rjmp	.-1542   	; 0x3726 <isotp_send>

00003d2c <isotpi_receive>:
}

int isotpi_receive(can_id_t id, uint8_t payload_size , uint8_t payload[payload_size]){
    3d2c:	6f 92       	push	r6
    3d2e:	7f 92       	push	r7
    3d30:	8f 92       	push	r8
    3d32:	9f 92       	push	r9
    3d34:	bf 92       	push	r11
    3d36:	cf 92       	push	r12
    3d38:	df 92       	push	r13
    3d3a:	ef 92       	push	r14
    3d3c:	ff 92       	push	r15
    3d3e:	0f 93       	push	r16
    3d40:	1f 93       	push	r17
    3d42:	cf 93       	push	r28
    3d44:	df 93       	push	r29
    3d46:	cd b7       	in	r28, 0x3d	; 61
    3d48:	de b7       	in	r29, 0x3e	; 62
    3d4a:	2e 97       	sbiw	r28, 0x0e	; 14
    3d4c:	0f b6       	in	r0, 0x3f	; 63
    3d4e:	f8 94       	cli
    3d50:	de bf       	out	0x3e, r29	; 62
    3d52:	0f be       	out	0x3f, r0	; 63
    3d54:	cd bf       	out	0x3d, r28	; 61
    3d56:	4c 01       	movw	r8, r24
    3d58:	b6 2e       	mov	r11, r22
    3d5a:	3a 01       	movw	r6, r20
	uint32_t arbitration_id = 0;
    3d5c:	19 86       	std	Y+9, r1	; 0x09
    3d5e:	1a 86       	std	Y+10, r1	; 0x0a
    3d60:	1b 86       	std	Y+11, r1	; 0x0b
    3d62:	1c 86       	std	Y+12, r1	; 0x0c
	memcpy(&arbitration_id,id,2);
    3d64:	fc 01       	movw	r30, r24
    3d66:	80 81       	ld	r24, Z
    3d68:	91 81       	ldd	r25, Z+1	; 0x01
    3d6a:	9a 87       	std	Y+10, r25	; 0x0a
    3d6c:	89 87       	std	Y+9, r24	; 0x09
	isotp_init_link(&g_link,arbitration_id, g_isotpSendBuf, sizeof(g_isotpSendBuf),g_isotpRecvBuf, sizeof(g_isotpRecvBuf));
    3d6e:	49 85       	ldd	r20, Y+9	; 0x09
    3d70:	5a 85       	ldd	r21, Y+10	; 0x0a
    3d72:	6b 85       	ldd	r22, Y+11	; 0x0b
    3d74:	7c 85       	ldd	r23, Y+12	; 0x0c
    3d76:	80 e8       	ldi	r24, 0x80	; 128
    3d78:	c8 2e       	mov	r12, r24
    3d7a:	d1 2c       	mov	r13, r1
    3d7c:	90 eb       	ldi	r25, 0xB0	; 176
    3d7e:	e9 2e       	mov	r14, r25
    3d80:	95 e0       	ldi	r25, 0x05	; 5
    3d82:	f9 2e       	mov	r15, r25
    3d84:	00 e8       	ldi	r16, 0x80	; 128
    3d86:	10 e0       	ldi	r17, 0x00	; 0
    3d88:	20 e3       	ldi	r18, 0x30	; 48
    3d8a:	35 e0       	ldi	r19, 0x05	; 5
    3d8c:	80 e3       	ldi	r24, 0x30	; 48
    3d8e:	96 e0       	ldi	r25, 0x06	; 6
    3d90:	8c de       	rcall	.-744    	; 0x3aaa <isotp_init_link>
	can_msg_t message;
	can_receive_message(0,id,zero_mask,message,8);
    3d92:	08 e0       	ldi	r16, 0x08	; 8
    3d94:	10 e0       	ldi	r17, 0x00	; 0
    3d96:	9e 01       	movw	r18, r28
    3d98:	2f 5f       	subi	r18, 0xFF	; 255
    3d9a:	3f 4f       	sbci	r19, 0xFF	; 255
    3d9c:	4c ec       	ldi	r20, 0xCC	; 204
    3d9e:	52 e0       	ldi	r21, 0x02	; 2
    3da0:	b4 01       	movw	r22, r8
    3da2:	80 e0       	ldi	r24, 0x00	; 0
    3da4:	0e 94 2c 03 	call	0x658	; 0x658 <can_receive_message>
	isotp_on_can_message(&g_link, message, 8);
    3da8:	48 e0       	ldi	r20, 0x08	; 8
    3daa:	be 01       	movw	r22, r28
    3dac:	6f 5f       	subi	r22, 0xFF	; 255
    3dae:	7f 4f       	sbci	r23, 0xFF	; 255
    3db0:	80 e3       	ldi	r24, 0x30	; 48
    3db2:	96 e0       	ldi	r25, 0x06	; 6
    3db4:	c5 dc       	rcall	.-1654   	; 0x3740 <isotp_on_can_message>
	uint16_t out_size;
	return isotp_receive(&g_link, payload, payload_size, &out_size);
    3db6:	4b 2d       	mov	r20, r11
    3db8:	50 e0       	ldi	r21, 0x00	; 0
    3dba:	9e 01       	movw	r18, r28
    3dbc:	23 5f       	subi	r18, 0xF3	; 243
    3dbe:	3f 4f       	sbci	r19, 0xFF	; 255
    3dc0:	b3 01       	movw	r22, r6
    3dc2:	80 e3       	ldi	r24, 0x30	; 48
    3dc4:	96 e0       	ldi	r25, 0x06	; 6
    3dc6:	48 de       	rcall	.-880    	; 0x3a58 <isotp_receive>
}
    3dc8:	2e 96       	adiw	r28, 0x0e	; 14
    3dca:	0f b6       	in	r0, 0x3f	; 63
    3dcc:	f8 94       	cli
    3dce:	de bf       	out	0x3e, r29	; 62
    3dd0:	0f be       	out	0x3f, r0	; 63
    3dd2:	cd bf       	out	0x3d, r28	; 61
    3dd4:	df 91       	pop	r29
    3dd6:	cf 91       	pop	r28
    3dd8:	1f 91       	pop	r17
    3dda:	0f 91       	pop	r16
    3ddc:	ff 90       	pop	r15
    3dde:	ef 90       	pop	r14
    3de0:	df 90       	pop	r13
    3de2:	cf 90       	pop	r12
    3de4:	bf 90       	pop	r11
    3de6:	9f 90       	pop	r9
    3de8:	8f 90       	pop	r8
    3dea:	7f 90       	pop	r7
    3dec:	6f 90       	pop	r6
    3dee:	08 95       	ret

00003df0 <isotpi_send_multi>:

int isotpi_send_multi(can_id_t id, uint8_t payload_size ,uint8_t payload[payload_size]){
    3df0:	8f 92       	push	r8
    3df2:	9f 92       	push	r9
    3df4:	bf 92       	push	r11
    3df6:	cf 92       	push	r12
    3df8:	df 92       	push	r13
    3dfa:	ef 92       	push	r14
    3dfc:	ff 92       	push	r15
    3dfe:	0f 93       	push	r16
    3e00:	1f 93       	push	r17
    3e02:	cf 93       	push	r28
    3e04:	df 93       	push	r29
    3e06:	cd b7       	in	r28, 0x3d	; 61
    3e08:	de b7       	in	r29, 0x3e	; 62
    3e0a:	2f 97       	sbiw	r28, 0x0f	; 15
    3e0c:	0f b6       	in	r0, 0x3f	; 63
    3e0e:	f8 94       	cli
    3e10:	de bf       	out	0x3e, r29	; 62
    3e12:	0f be       	out	0x3f, r0	; 63
    3e14:	cd bf       	out	0x3d, r28	; 61
    3e16:	b6 2e       	mov	r11, r22
    3e18:	4a 01       	movw	r8, r20
	uint32_t arbitration_id = 0;
    3e1a:	19 86       	std	Y+9, r1	; 0x09
    3e1c:	1a 86       	std	Y+10, r1	; 0x0a
    3e1e:	1b 86       	std	Y+11, r1	; 0x0b
    3e20:	1c 86       	std	Y+12, r1	; 0x0c
	memcpy(&arbitration_id,id,2);
    3e22:	fc 01       	movw	r30, r24
    3e24:	80 81       	ld	r24, Z
    3e26:	91 81       	ldd	r25, Z+1	; 0x01
    3e28:	9a 87       	std	Y+10, r25	; 0x0a
    3e2a:	89 87       	std	Y+9, r24	; 0x09
	isotp_init_link(&g_link,arbitration_id, g_isotpSendBuf, sizeof(g_isotpSendBuf),g_isotpRecvBuf, sizeof(g_isotpRecvBuf));
    3e2c:	49 85       	ldd	r20, Y+9	; 0x09
    3e2e:	5a 85       	ldd	r21, Y+10	; 0x0a
    3e30:	6b 85       	ldd	r22, Y+11	; 0x0b
    3e32:	7c 85       	ldd	r23, Y+12	; 0x0c
    3e34:	80 e8       	ldi	r24, 0x80	; 128
    3e36:	c8 2e       	mov	r12, r24
    3e38:	d1 2c       	mov	r13, r1
    3e3a:	90 eb       	ldi	r25, 0xB0	; 176
    3e3c:	e9 2e       	mov	r14, r25
    3e3e:	95 e0       	ldi	r25, 0x05	; 5
    3e40:	f9 2e       	mov	r15, r25
    3e42:	00 e8       	ldi	r16, 0x80	; 128
    3e44:	10 e0       	ldi	r17, 0x00	; 0
    3e46:	20 e3       	ldi	r18, 0x30	; 48
    3e48:	35 e0       	ldi	r19, 0x05	; 5
    3e4a:	80 e3       	ldi	r24, 0x30	; 48
    3e4c:	96 e0       	ldi	r25, 0x06	; 6
    3e4e:	2d de       	rcall	.-934    	; 0x3aaa <isotp_init_link>

	can_enable_receive(1,zero_mask);
    3e50:	6c ec       	ldi	r22, 0xCC	; 204
    3e52:	72 e0       	ldi	r23, 0x02	; 2
    3e54:	81 e0       	ldi	r24, 0x01	; 1
    3e56:	0e 94 da 02 	call	0x5b4	; 0x5b4 <can_enable_receive>
	/* And send message with isotp_send */
	isotp_send(&g_link, payload, payload_size);
    3e5a:	4b 2d       	mov	r20, r11
    3e5c:	50 e0       	ldi	r21, 0x00	; 0
    3e5e:	b4 01       	movw	r22, r8
    3e60:	80 e3       	ldi	r24, 0x30	; 48
    3e62:	96 e0       	ldi	r25, 0x06	; 6
    3e64:	60 dc       	rcall	.-1856   	; 0x3726 <isotp_send>
	can_msg_t message;
	can_id_t message_id;
	uint8_t len;
	uint8_t mobnr;
	
	mobnr = can_wait_for_receive();
    3e66:	0e 94 22 03 	call	0x644	; 0x644 <can_wait_for_receive>
	
	can_retrieve_message(mobnr, message_id, message, &len);
    3e6a:	9e 01       	movw	r18, r28
    3e6c:	21 5f       	subi	r18, 0xF1	; 241
    3e6e:	3f 4f       	sbci	r19, 0xFF	; 255
    3e70:	ae 01       	movw	r20, r28
    3e72:	4f 5f       	subi	r20, 0xFF	; 255
    3e74:	5f 4f       	sbci	r21, 0xFF	; 255
    3e76:	be 01       	movw	r22, r28
    3e78:	63 5f       	subi	r22, 0xF3	; 243
    3e7a:	7f 4f       	sbci	r23, 0xFF	; 255
    3e7c:	0e 94 dc 03 	call	0x7b8	; 0x7b8 <can_retrieve_message>
	isotp_on_can_message(&g_link,message,len);
    3e80:	4f 85       	ldd	r20, Y+15	; 0x0f
    3e82:	be 01       	movw	r22, r28
    3e84:	6f 5f       	subi	r22, 0xFF	; 255
    3e86:	7f 4f       	sbci	r23, 0xFF	; 255
    3e88:	80 e3       	ldi	r24, 0x30	; 48
    3e8a:	96 e0       	ldi	r25, 0x06	; 6
    3e8c:	59 dc       	rcall	.-1870   	; 0x3740 <isotp_on_can_message>
    3e8e:	02 c0       	rjmp	.+4      	; 0x3e94 <isotpi_send_multi+0xa4>
		if(g_link.send_status == ISOTP_SEND_STATUS_IDLE){
			can_free_mob(1);
			return 0;
		}
		
		if(g_link.send_status == ISOTP_SEND_STATUS_ERROR){
    3e90:	82 30       	cpi	r24, 0x02	; 2
	can_retrieve_message(mobnr, message_id, message, &len);
	isotp_on_can_message(&g_link,message,len);
	
	while(1){
		
		isotp_poll(&g_link);
    3e92:	f1 f0       	breq	.+60     	; 0x3ed0 <isotpi_send_multi+0xe0>
    3e94:	80 e3       	ldi	r24, 0x30	; 48
    3e96:	96 e0       	ldi	r25, 0x06	; 6
    3e98:	29 de       	rcall	.-942    	; 0x3aec <isotp_poll>
		
		if(g_link.send_status == ISOTP_SEND_STATUS_IDLE){
    3e9a:	80 91 4b 06 	lds	r24, 0x064B	; 0x80064b <g_link+0x1b>
    3e9e:	81 11       	cpse	r24, r1
    3ea0:	f7 cf       	rjmp	.-18     	; 0x3e90 <isotpi_send_multi+0xa0>
			can_free_mob(1);
    3ea2:	81 e0       	ldi	r24, 0x01	; 1
    3ea4:	0e 94 a7 03 	call	0x74e	; 0x74e <can_free_mob>
			return 0;
    3ea8:	80 e0       	ldi	r24, 0x00	; 0
    3eaa:	90 e0       	ldi	r25, 0x00	; 0
			return 1;
		}
		
	}
	
}
    3eac:	2f 96       	adiw	r28, 0x0f	; 15
    3eae:	0f b6       	in	r0, 0x3f	; 63
    3eb0:	f8 94       	cli
    3eb2:	de bf       	out	0x3e, r29	; 62
    3eb4:	0f be       	out	0x3f, r0	; 63
    3eb6:	cd bf       	out	0x3d, r28	; 61
    3eb8:	df 91       	pop	r29
    3eba:	cf 91       	pop	r28
    3ebc:	1f 91       	pop	r17
    3ebe:	0f 91       	pop	r16
    3ec0:	ff 90       	pop	r15
    3ec2:	ef 90       	pop	r14
    3ec4:	df 90       	pop	r13
    3ec6:	cf 90       	pop	r12
    3ec8:	bf 90       	pop	r11
    3eca:	9f 90       	pop	r9
    3ecc:	8f 90       	pop	r8
    3ece:	08 95       	ret
			can_free_mob(1);
			return 0;
		}
		
		if(g_link.send_status == ISOTP_SEND_STATUS_ERROR){
			can_free_mob(1);
    3ed0:	81 e0       	ldi	r24, 0x01	; 1
    3ed2:	0e 94 a7 03 	call	0x74e	; 0x74e <can_free_mob>
			return 1;
    3ed6:	81 e0       	ldi	r24, 0x01	; 1
    3ed8:	90 e0       	ldi	r25, 0x00	; 0
    3eda:	e8 cf       	rjmp	.-48     	; 0x3eac <isotpi_send_multi+0xbc>

00003edc <isotpi_receive_multi>:
		
	}
	
}

int isotpi_receive_multi(can_id_t id_send, can_id_t id_rec, uint8_t payload_size, uint8_t payload[payload_size]){
    3edc:	7f 92       	push	r7
    3ede:	8f 92       	push	r8
    3ee0:	9f 92       	push	r9
    3ee2:	af 92       	push	r10
    3ee4:	bf 92       	push	r11
    3ee6:	cf 92       	push	r12
    3ee8:	df 92       	push	r13
    3eea:	ef 92       	push	r14
    3eec:	ff 92       	push	r15
    3eee:	0f 93       	push	r16
    3ef0:	1f 93       	push	r17
    3ef2:	cf 93       	push	r28
    3ef4:	df 93       	push	r29
    3ef6:	cd b7       	in	r28, 0x3d	; 61
    3ef8:	de b7       	in	r29, 0x3e	; 62
    3efa:	2f 97       	sbiw	r28, 0x0f	; 15
    3efc:	0f b6       	in	r0, 0x3f	; 63
    3efe:	f8 94       	cli
    3f00:	de bf       	out	0x3e, r29	; 62
    3f02:	0f be       	out	0x3f, r0	; 63
    3f04:	cd bf       	out	0x3d, r28	; 61
    3f06:	4b 01       	movw	r8, r22
    3f08:	74 2e       	mov	r7, r20
    3f0a:	59 01       	movw	r10, r18
	uint32_t arbitration_id = 0;
    3f0c:	19 86       	std	Y+9, r1	; 0x09
    3f0e:	1a 86       	std	Y+10, r1	; 0x0a
    3f10:	1b 86       	std	Y+11, r1	; 0x0b
    3f12:	1c 86       	std	Y+12, r1	; 0x0c
	memcpy(&arbitration_id,id_send,2);
    3f14:	fc 01       	movw	r30, r24
    3f16:	80 81       	ld	r24, Z
    3f18:	91 81       	ldd	r25, Z+1	; 0x01
    3f1a:	9a 87       	std	Y+10, r25	; 0x0a
    3f1c:	89 87       	std	Y+9, r24	; 0x09
	isotp_init_link(&g_link, arbitration_id, g_isotpSendBuf, sizeof(g_isotpSendBuf), g_isotpRecvBuf, sizeof(g_isotpRecvBuf));
    3f1e:	49 85       	ldd	r20, Y+9	; 0x09
    3f20:	5a 85       	ldd	r21, Y+10	; 0x0a
    3f22:	6b 85       	ldd	r22, Y+11	; 0x0b
    3f24:	7c 85       	ldd	r23, Y+12	; 0x0c
    3f26:	80 e8       	ldi	r24, 0x80	; 128
    3f28:	c8 2e       	mov	r12, r24
    3f2a:	d1 2c       	mov	r13, r1
    3f2c:	90 eb       	ldi	r25, 0xB0	; 176
    3f2e:	e9 2e       	mov	r14, r25
    3f30:	95 e0       	ldi	r25, 0x05	; 5
    3f32:	f9 2e       	mov	r15, r25
    3f34:	00 e8       	ldi	r16, 0x80	; 128
    3f36:	10 e0       	ldi	r17, 0x00	; 0
    3f38:	20 e3       	ldi	r18, 0x30	; 48
    3f3a:	35 e0       	ldi	r19, 0x05	; 5
    3f3c:	80 e3       	ldi	r24, 0x30	; 48
    3f3e:	96 e0       	ldi	r25, 0x06	; 6
    3f40:	b4 dd       	rcall	.-1176   	; 0x3aaa <isotp_init_link>
  
    while(1){
		uint8_t j;
		for(j=0; j<14; j++){
    3f42:	10 e0       	ldi	r17, 0x00	; 0
			can_enable_receive(j,zero_mask);
    3f44:	6c ec       	ldi	r22, 0xCC	; 204
    3f46:	72 e0       	ldi	r23, 0x02	; 2
    3f48:	81 2f       	mov	r24, r17
    3f4a:	0e 94 da 02 	call	0x5b4	; 0x5b4 <can_enable_receive>
	memcpy(&arbitration_id,id_send,2);
	isotp_init_link(&g_link, arbitration_id, g_isotpSendBuf, sizeof(g_isotpSendBuf), g_isotpRecvBuf, sizeof(g_isotpRecvBuf));
  
    while(1){
		uint8_t j;
		for(j=0; j<14; j++){
    3f4e:	1f 5f       	subi	r17, 0xFF	; 255
    3f50:	1e 30       	cpi	r17, 0x0E	; 14
    3f52:	c1 f7       	brne	.-16     	; 0x3f44 <isotpi_receive_multi+0x68>
		can_msg_t message;
		uint8_t size;
		
		while(1){
			
			mobnr = can_wait_for_receive();
    3f54:	0e 94 22 03 	call	0x644	; 0x644 <can_wait_for_receive>
			can_retrieve_message(mobnr, id_rec, message, &size);
    3f58:	9e 01       	movw	r18, r28
    3f5a:	21 5f       	subi	r18, 0xF1	; 241
    3f5c:	3f 4f       	sbci	r19, 0xFF	; 255
    3f5e:	ae 01       	movw	r20, r28
    3f60:	4f 5f       	subi	r20, 0xFF	; 255
    3f62:	5f 4f       	sbci	r21, 0xFF	; 255
    3f64:	b4 01       	movw	r22, r8
    3f66:	0e 94 dc 03 	call	0x7b8	; 0x7b8 <can_retrieve_message>
			isotp_on_can_message(&g_link, message, size);
    3f6a:	4f 85       	ldd	r20, Y+15	; 0x0f
    3f6c:	be 01       	movw	r22, r28
    3f6e:	6f 5f       	subi	r22, 0xFF	; 255
    3f70:	7f 4f       	sbci	r23, 0xFF	; 255
    3f72:	80 e3       	ldi	r24, 0x30	; 48
    3f74:	96 e0       	ldi	r25, 0x06	; 6
    3f76:	e4 db       	rcall	.-2104   	; 0x3740 <isotp_on_can_message>
        
			switch(g_link.receive_status){
    3f78:	80 91 60 06 	lds	r24, 0x0660	; 0x800660 <g_link+0x30>
    3f7c:	81 30       	cpi	r24, 0x01	; 1
    3f7e:	51 f3       	breq	.-44     	; 0x3f54 <isotpi_receive_multi+0x78>
    3f80:	82 30       	cpi	r24, 0x02	; 2
    3f82:	41 f7       	brne	.-48     	; 0x3f54 <isotpi_receive_multi+0x78>
    3f84:	10 e0       	ldi	r17, 0x00	; 0
				case ISOTP_RECEIVE_STATUS_INPROGRESS :
				break;
				case ISOTP_RECEIVE_STATUS_FULL :
				for(j=0; j<14; j++){
					can_free_mob(j);
    3f86:	81 2f       	mov	r24, r17
    3f88:	0e 94 a7 03 	call	0x74e	; 0x74e <can_free_mob>
        
			switch(g_link.receive_status){
				case ISOTP_RECEIVE_STATUS_INPROGRESS :
				break;
				case ISOTP_RECEIVE_STATUS_FULL :
				for(j=0; j<14; j++){
    3f8c:	1f 5f       	subi	r17, 0xFF	; 255
    3f8e:	1e 30       	cpi	r17, 0x0E	; 14
    3f90:	d1 f7       	brne	.-12     	; 0x3f86 <isotpi_receive_multi+0xaa>
					can_free_mob(j);
				}
				uint16_t out_size;
				uint8_t ret;
				return isotp_receive(&g_link, payload, payload_size, &out_size);
    3f92:	47 2d       	mov	r20, r7
    3f94:	50 e0       	ldi	r21, 0x00	; 0
    3f96:	9e 01       	movw	r18, r28
    3f98:	23 5f       	subi	r18, 0xF3	; 243
    3f9a:	3f 4f       	sbci	r19, 0xFF	; 255
    3f9c:	b5 01       	movw	r22, r10
    3f9e:	80 e3       	ldi	r24, 0x30	; 48
    3fa0:	96 e0       	ldi	r25, 0x06	; 6
    3fa2:	5a dd       	rcall	.-1356   	; 0x3a58 <isotp_receive>
			}
		} 
	}
	
}
    3fa4:	2f 96       	adiw	r28, 0x0f	; 15
    3fa6:	0f b6       	in	r0, 0x3f	; 63
    3fa8:	f8 94       	cli
    3faa:	de bf       	out	0x3e, r29	; 62
    3fac:	0f be       	out	0x3f, r0	; 63
    3fae:	cd bf       	out	0x3d, r28	; 61
    3fb0:	df 91       	pop	r29
    3fb2:	cf 91       	pop	r28
    3fb4:	1f 91       	pop	r17
    3fb6:	0f 91       	pop	r16
    3fb8:	ff 90       	pop	r15
    3fba:	ef 90       	pop	r14
    3fbc:	df 90       	pop	r13
    3fbe:	cf 90       	pop	r12
    3fc0:	bf 90       	pop	r11
    3fc2:	af 90       	pop	r10
    3fc4:	9f 90       	pop	r9
    3fc6:	8f 90       	pop	r8
    3fc8:	7f 90       	pop	r7
    3fca:	08 95       	ret

00003fcc <RNG>:
const char private_key4_hex[64] = "b2c950abc87a55442cc00f1e3ac38f81b7e95036fd191ea134ff616d9806e10c";

const char private_key5_hex[64] = "b08039a19079d5218465f6d97552bd70b8867423d67365b8431b6f213a197471";


int RNG(uint8_t *dest, unsigned size){
    3fcc:	0f 93       	push	r16
    3fce:	1f 93       	push	r17
    3fd0:	cf 93       	push	r28
    3fd2:	df 93       	push	r29
    3fd4:	8c 01       	movw	r16, r24
    3fd6:	eb 01       	movw	r28, r22
	while(size){
    3fd8:	20 97       	sbiw	r28, 0x00	; 0
    3fda:	39 f0       	breq	.+14     	; 0x3fea <RNG+0x1e>
		uint8_t val = (uint8_t) rand();
    3fdc:	0e 94 82 34 	call	0x6904	; 0x6904 <rand>
		*dest = val;
    3fe0:	f8 01       	movw	r30, r16
    3fe2:	81 93       	st	Z+, r24
    3fe4:	8f 01       	movw	r16, r30
		++dest;
		--size;
    3fe6:	21 97       	sbiw	r28, 0x01	; 1

const char private_key5_hex[64] = "b08039a19079d5218465f6d97552bd70b8867423d67365b8431b6f213a197471";


int RNG(uint8_t *dest, unsigned size){
	while(size){
    3fe8:	c9 f7       	brne	.-14     	; 0x3fdc <RNG+0x10>
		*dest = val;
		++dest;
		--size;
	}
	return 1;
}
    3fea:	81 e0       	ldi	r24, 0x01	; 1
    3fec:	90 e0       	ldi	r25, 0x00	; 0
    3fee:	df 91       	pop	r29
    3ff0:	cf 91       	pop	r28
    3ff2:	1f 91       	pop	r17
    3ff4:	0f 91       	pop	r16
    3ff6:	08 95       	ret

00003ff8 <get_private_key>:

static void get_private_key(uint8_t role, uint8_t private[32]){
	switch (role)
    3ff8:	82 30       	cpi	r24, 0x02	; 2
    3ffa:	f9 f0       	breq	.+62     	; 0x403a <get_private_key+0x42>
    3ffc:	48 f4       	brcc	.+18     	; 0x4010 <get_private_key+0x18>
    3ffe:	88 23       	and	r24, r24
    4000:	b9 f0       	breq	.+46     	; 0x4030 <get_private_key+0x38>
    4002:	81 30       	cpi	r24, 0x01	; 1
    4004:	79 f4       	brne	.+30     	; 0x4024 <get_private_key+0x2c>
	{
		case ADMIN_ROLE :
			hex_to_bytes(private_key1_hex, 64, private);
			break;
		case OEM_ROLE :
			hex_to_bytes(private_key2_hex, 64, private);
    4006:	ab 01       	movw	r20, r22
    4008:	60 e4       	ldi	r22, 0x40	; 64
    400a:	88 eb       	ldi	r24, 0xB8	; 184
    400c:	93 e0       	ldi	r25, 0x03	; 3
    400e:	20 ca       	rjmp	.-3008   	; 0x3450 <hex_to_bytes>
	}
	return 1;
}

static void get_private_key(uint8_t role, uint8_t private[32]){
	switch (role)
    4010:	83 30       	cpi	r24, 0x03	; 3
    4012:	49 f0       	breq	.+18     	; 0x4026 <get_private_key+0x2e>
    4014:	84 30       	cpi	r24, 0x04	; 4
    4016:	29 f4       	brne	.+10     	; 0x4022 <get_private_key+0x2a>
			break;
		case REPAIRMAN_ROLE :
			hex_to_bytes(private_key4_hex, 64, private);
			break;
		case OWNER_ROLE :
			hex_to_bytes(private_key5_hex, 64, private);
    4018:	ab 01       	movw	r20, r22
    401a:	60 e4       	ldi	r22, 0x40	; 64
    401c:	88 ef       	ldi	r24, 0xF8	; 248
    401e:	92 e0       	ldi	r25, 0x02	; 2
    4020:	17 ca       	rjmp	.-3026   	; 0x3450 <hex_to_bytes>
    4022:	08 95       	ret
    4024:	08 95       	ret
			break;
		case POLICEMAN_ROLE :
			hex_to_bytes(private_key3_hex, 64, private);
			break;
		case REPAIRMAN_ROLE :
			hex_to_bytes(private_key4_hex, 64, private);
    4026:	ab 01       	movw	r20, r22
    4028:	60 e4       	ldi	r22, 0x40	; 64
    402a:	88 e3       	ldi	r24, 0x38	; 56
    402c:	93 e0       	ldi	r25, 0x03	; 3
    402e:	10 ca       	rjmp	.-3040   	; 0x3450 <hex_to_bytes>

static void get_private_key(uint8_t role, uint8_t private[32]){
	switch (role)
	{
		case ADMIN_ROLE :
			hex_to_bytes(private_key1_hex, 64, private);
    4030:	ab 01       	movw	r20, r22
    4032:	60 e4       	ldi	r22, 0x40	; 64
    4034:	88 ef       	ldi	r24, 0xF8	; 248
    4036:	93 e0       	ldi	r25, 0x03	; 3
    4038:	0b ca       	rjmp	.-3050   	; 0x3450 <hex_to_bytes>
			break;
		case OEM_ROLE :
			hex_to_bytes(private_key2_hex, 64, private);
			break;
		case POLICEMAN_ROLE :
			hex_to_bytes(private_key3_hex, 64, private);
    403a:	ab 01       	movw	r20, r22
    403c:	60 e4       	ldi	r22, 0x40	; 64
    403e:	88 e7       	ldi	r24, 0x78	; 120
    4040:	93 e0       	ldi	r25, 0x03	; 3
    4042:	06 ca       	rjmp	.-3060   	; 0x3450 <hex_to_bytes>

00004044 <sign_challenge>:
			hex_to_bytes(private_key5_hex, 64, private);
			break;
	}
} 

int sign_challenge(uint8_t challenge[64], uint8_t signature[64], uint8_t role){
    4044:	af 92       	push	r10
    4046:	bf 92       	push	r11
    4048:	df 92       	push	r13
    404a:	ef 92       	push	r14
    404c:	ff 92       	push	r15
    404e:	0f 93       	push	r16
    4050:	1f 93       	push	r17
    4052:	cf 93       	push	r28
    4054:	df 93       	push	r29
    4056:	cd b7       	in	r28, 0x3d	; 61
    4058:	de b7       	in	r29, 0x3e	; 62
    405a:	c0 56       	subi	r28, 0x60	; 96
    405c:	d1 09       	sbc	r29, r1
    405e:	0f b6       	in	r0, 0x3f	; 63
    4060:	f8 94       	cli
    4062:	de bf       	out	0x3e, r29	; 62
    4064:	0f be       	out	0x3f, r0	; 63
    4066:	cd bf       	out	0x3d, r28	; 61
    4068:	5c 01       	movw	r10, r24
    406a:	7b 01       	movw	r14, r22
    406c:	d4 2e       	mov	r13, r20
	
	// Set RNG.
	uECC_set_rng(&RNG);
    406e:	86 ee       	ldi	r24, 0xE6	; 230
    4070:	9f e1       	ldi	r25, 0x1F	; 31
    4072:	35 d8       	rcall	.-3990   	; 0x30de <uECC_set_rng>
	const struct uECC_Curve_t *curve = uECC_secp256r1();
    4074:	39 d8       	rcall	.-3982   	; 0x30e8 <uECC_secp256r1>
    4076:	8c 01       	movw	r16, r24
    4078:	20 e0       	ldi	r18, 0x00	; 0
	uint8_t hash[64];
	
	// Hash the challenge first for extra security.
	sha512(hash, challenge, 512);
    407a:	32 e0       	ldi	r19, 0x02	; 2
    407c:	40 e0       	ldi	r20, 0x00	; 0
    407e:	50 e0       	ldi	r21, 0x00	; 0
    4080:	b5 01       	movw	r22, r10
    4082:	ce 01       	movw	r24, r28
    4084:	01 96       	adiw	r24, 0x01	; 1
    4086:	0e 94 00 33 	call	0x6600	; 0x6600 <sha512>
    408a:	be 01       	movw	r22, r28
	uint8_t private[32];
	
	// get the appropriate private key.
	get_private_key(role, private);
    408c:	6f 5b       	subi	r22, 0xBF	; 191
    408e:	7f 4f       	sbci	r23, 0xFF	; 255
    4090:	8d 2d       	mov	r24, r13
    4092:	b2 df       	rcall	.-156    	; 0x3ff8 <get_private_key>
    4094:	97 01       	movw	r18, r14

	if (!uECC_sign(private, hash, 64, signature, curve)) {
    4096:	40 e4       	ldi	r20, 0x40	; 64
    4098:	50 e0       	ldi	r21, 0x00	; 0
    409a:	be 01       	movw	r22, r28
    409c:	6f 5f       	subi	r22, 0xFF	; 255
    409e:	7f 4f       	sbci	r23, 0xFF	; 255
    40a0:	ce 01       	movw	r24, r28
    40a2:	8f 5b       	subi	r24, 0xBF	; 191
    40a4:	9f 4f       	sbci	r25, 0xFF	; 255
    40a6:	6a d9       	rcall	.-3372   	; 0x337c <uECC_sign>
    40a8:	89 2b       	or	r24, r25
    40aa:	99 f0       	breq	.+38     	; 0x40d2 <sign_challenge+0x8e>
    40ac:	80 e0       	ldi	r24, 0x00	; 0
		uart_puts("sign failed");
		return 1;
	}
	
	return 0;
    40ae:	90 e0       	ldi	r25, 0x00	; 0
    40b0:	c0 5a       	subi	r28, 0xA0	; 160
}
    40b2:	df 4f       	sbci	r29, 0xFF	; 255
    40b4:	0f b6       	in	r0, 0x3f	; 63
    40b6:	f8 94       	cli
    40b8:	de bf       	out	0x3e, r29	; 62
    40ba:	0f be       	out	0x3f, r0	; 63
    40bc:	cd bf       	out	0x3d, r28	; 61
    40be:	df 91       	pop	r29
    40c0:	cf 91       	pop	r28
    40c2:	1f 91       	pop	r17
    40c4:	0f 91       	pop	r16
    40c6:	ff 90       	pop	r15
    40c8:	ef 90       	pop	r14
    40ca:	df 90       	pop	r13
    40cc:	bf 90       	pop	r11
    40ce:	af 90       	pop	r10
    40d0:	08 95       	ret
    40d2:	8e ec       	ldi	r24, 0xCE	; 206
	
	// get the appropriate private key.
	get_private_key(role, private);

	if (!uECC_sign(private, hash, 64, signature, curve)) {
		uart_puts("sign failed");
    40d4:	92 e0       	ldi	r25, 0x02	; 2
    40d6:	0e 94 a0 33 	call	0x6740	; 0x6740 <uart_puts>
    40da:	81 e0       	ldi	r24, 0x01	; 1
		return 1;
    40dc:	90 e0       	ldi	r25, 0x00	; 0
    40de:	e8 cf       	rjmp	.-48     	; 0x40b0 <sign_challenge+0x6c>

000040e0 <sign_challenge_dummy>:
    40e0:	fc 01       	movw	r30, r24
}


int sign_challenge_dummy(uint8_t challenge[64], uint8_t signature[64], uint8_t role){
	// Send back the challange as dummy signature.
	memcpy(signature,challenge,64);
    40e2:	90 e4       	ldi	r25, 0x40	; 64
    40e4:	db 01       	movw	r26, r22
    40e6:	01 90       	ld	r0, Z+
    40e8:	0d 92       	st	X+, r0
    40ea:	9a 95       	dec	r25
    40ec:	e1 f7       	brne	.-8      	; 0x40e6 <sign_challenge_dummy+0x6>
	return 0;
}
    40ee:	80 e0       	ldi	r24, 0x00	; 0
    40f0:	90 e0       	ldi	r25, 0x00	; 0
    40f2:	08 95       	ret

000040f4 <calculate_shared_secret>:

int calculate_shared_secret(uint8_t public[64], uint8_t role, uint8_t secret[32]){
    40f4:	af 92       	push	r10
    40f6:	bf 92       	push	r11
    40f8:	df 92       	push	r13
    40fa:	ef 92       	push	r14
    40fc:	ff 92       	push	r15
    40fe:	0f 93       	push	r16
    4100:	1f 93       	push	r17
    4102:	cf 93       	push	r28
    4104:	df 93       	push	r29
    4106:	cd b7       	in	r28, 0x3d	; 61
    4108:	de b7       	in	r29, 0x3e	; 62
    410a:	c0 54       	subi	r28, 0x40	; 64
    410c:	d1 09       	sbc	r29, r1
    410e:	0f b6       	in	r0, 0x3f	; 63
    4110:	f8 94       	cli
    4112:	de bf       	out	0x3e, r29	; 62
    4114:	0f be       	out	0x3f, r0	; 63
    4116:	cd bf       	out	0x3d, r28	; 61
    4118:	8c 01       	movw	r16, r24
    411a:	d6 2e       	mov	r13, r22
    411c:	5a 01       	movw	r10, r20
	const struct uECC_Curve_t * curve = uECC_secp256r1();
    411e:	0e 94 74 18 	call	0x30e8	; 0x30e8 <uECC_secp256r1>
    4122:	7c 01       	movw	r14, r24
	
	//Generate Shared Secret.
	uint8_t private[32];
	
	//Use the appropriate private key
	get_private_key(role, private);
    4124:	be 01       	movw	r22, r28
    4126:	6f 5f       	subi	r22, 0xFF	; 255
    4128:	7f 4f       	sbci	r23, 0xFF	; 255
    412a:	8d 2d       	mov	r24, r13
    412c:	65 df       	rcall	.-310    	; 0x3ff8 <get_private_key>
	if(!uECC_shared_secret(public, private, secret_unhashed, curve)){
    412e:	97 01       	movw	r18, r14
    4130:	ae 01       	movw	r20, r28
    4132:	4f 5d       	subi	r20, 0xDF	; 223
    4134:	5f 4f       	sbci	r21, 0xFF	; 255
    4136:	be 01       	movw	r22, r28
    4138:	6f 5f       	subi	r22, 0xFF	; 255
    413a:	7f 4f       	sbci	r23, 0xFF	; 255
    413c:	c8 01       	movw	r24, r16
    413e:	0e 94 77 18 	call	0x30ee	; 0x30ee <uECC_shared_secret>
    4142:	89 2b       	or	r24, r25
    4144:	e1 f0       	breq	.+56     	; 0x417e <calculate_shared_secret+0x8a>
		return 1;
	}
	uint32_t len = 256;
	
	//Hash the secret for extra security.
	sha256(secret, secret_unhashed, len);
    4146:	20 e0       	ldi	r18, 0x00	; 0
    4148:	31 e0       	ldi	r19, 0x01	; 1
    414a:	40 e0       	ldi	r20, 0x00	; 0
    414c:	50 e0       	ldi	r21, 0x00	; 0
    414e:	be 01       	movw	r22, r28
    4150:	6f 5d       	subi	r22, 0xDF	; 223
    4152:	7f 4f       	sbci	r23, 0xFF	; 255
    4154:	c5 01       	movw	r24, r10
    4156:	21 d3       	rcall	.+1602   	; 0x479a <sha256>
	return 0;
    4158:	80 e0       	ldi	r24, 0x00	; 0
    415a:	90 e0       	ldi	r25, 0x00	; 0
}
    415c:	c0 5c       	subi	r28, 0xC0	; 192
    415e:	df 4f       	sbci	r29, 0xFF	; 255
    4160:	0f b6       	in	r0, 0x3f	; 63
    4162:	f8 94       	cli
    4164:	de bf       	out	0x3e, r29	; 62
    4166:	0f be       	out	0x3f, r0	; 63
    4168:	cd bf       	out	0x3d, r28	; 61
    416a:	df 91       	pop	r29
    416c:	cf 91       	pop	r28
    416e:	1f 91       	pop	r17
    4170:	0f 91       	pop	r16
    4172:	ff 90       	pop	r15
    4174:	ef 90       	pop	r14
    4176:	df 90       	pop	r13
    4178:	bf 90       	pop	r11
    417a:	af 90       	pop	r10
    417c:	08 95       	ret
	uint8_t private[32];
	
	//Use the appropriate private key
	get_private_key(role, private);
	if(!uECC_shared_secret(public, private, secret_unhashed, curve)){
		uart_puts("shared secret creation failed");
    417e:	8a ed       	ldi	r24, 0xDA	; 218
    4180:	92 e0       	ldi	r25, 0x02	; 2
    4182:	0e 94 a0 33 	call	0x6740	; 0x6740 <uart_puts>
		return 1;
    4186:	81 e0       	ldi	r24, 0x01	; 1
    4188:	90 e0       	ldi	r25, 0x00	; 0
    418a:	e8 cf       	rjmp	.-48     	; 0x415c <calculate_shared_secret+0x68>

0000418c <calculate_shared_secret_dummy>:
	//Hash the secret for extra security.
	sha256(secret, secret_unhashed, len);
	return 0;
}

int calculate_shared_secret_dummy(uint8_t public[64], uint8_t role, uint8_t secret[32]){
    418c:	fc 01       	movw	r30, r24
	//Send back the first part of the public key as dummy secret.
	memcpy(secret, public, 32);
    418e:	90 e2       	ldi	r25, 0x20	; 32
    4190:	da 01       	movw	r26, r20
    4192:	01 90       	ld	r0, Z+
    4194:	0d 92       	st	X+, r0
    4196:	9a 95       	dec	r25
    4198:	e1 f7       	brne	.-8      	; 0x4192 <calculate_shared_secret_dummy+0x6>
	return 0;
}
    419a:	80 e0       	ldi	r24, 0x00	; 0
    419c:	90 e0       	ldi	r25, 0x00	; 0
    419e:	08 95       	ret

000041a0 <__vector_5>:
	EIMSK = 1 << INT4 | 1 << INT5 | 1 << INT6 | 1 << INT7;
	
}

//INITIATE SCENARIO1	
ISR(INT4_vect){
    41a0:	1f 92       	push	r1
    41a2:	0f 92       	push	r0
    41a4:	0f b6       	in	r0, 0x3f	; 63
    41a6:	0f 92       	push	r0
    41a8:	11 24       	eor	r1, r1
    41aa:	0b b6       	in	r0, 0x3b	; 59
    41ac:	0f 92       	push	r0
    41ae:	2f 93       	push	r18
    41b0:	3f 93       	push	r19
    41b2:	4f 93       	push	r20
    41b4:	5f 93       	push	r21
    41b6:	6f 93       	push	r22
    41b8:	7f 93       	push	r23
    41ba:	8f 93       	push	r24
    41bc:	9f 93       	push	r25
    41be:	af 93       	push	r26
    41c0:	bf 93       	push	r27
    41c2:	ef 93       	push	r30
    41c4:	ff 93       	push	r31
	EIMSK &= ~(1 << INT4);
    41c6:	ec 98       	cbi	0x1d, 4	; 29
	uart_puts("Running scenario 1");
    41c8:	88 e3       	ldi	r24, 0x38	; 56
    41ca:	94 e0       	ldi	r25, 0x04	; 4
    41cc:	0e 94 a0 33 	call	0x6740	; 0x6740 <uart_puts>
	run_scenario = SCENARIO1;
    41d0:	81 e0       	ldi	r24, 0x01	; 1
    41d2:	80 93 61 06 	sts	0x0661, r24	; 0x800661 <run_scenario>
}
    41d6:	ff 91       	pop	r31
    41d8:	ef 91       	pop	r30
    41da:	bf 91       	pop	r27
    41dc:	af 91       	pop	r26
    41de:	9f 91       	pop	r25
    41e0:	8f 91       	pop	r24
    41e2:	7f 91       	pop	r23
    41e4:	6f 91       	pop	r22
    41e6:	5f 91       	pop	r21
    41e8:	4f 91       	pop	r20
    41ea:	3f 91       	pop	r19
    41ec:	2f 91       	pop	r18
    41ee:	0f 90       	pop	r0
    41f0:	0b be       	out	0x3b, r0	; 59
    41f2:	0f 90       	pop	r0
    41f4:	0f be       	out	0x3f, r0	; 63
    41f6:	0f 90       	pop	r0
    41f8:	1f 90       	pop	r1
    41fa:	18 95       	reti

000041fc <__vector_6>:

//INITIATE SCENARIO2
ISR(INT5_vect){
    41fc:	1f 92       	push	r1
    41fe:	0f 92       	push	r0
    4200:	0f b6       	in	r0, 0x3f	; 63
    4202:	0f 92       	push	r0
    4204:	11 24       	eor	r1, r1
    4206:	0b b6       	in	r0, 0x3b	; 59
    4208:	0f 92       	push	r0
    420a:	2f 93       	push	r18
    420c:	3f 93       	push	r19
    420e:	4f 93       	push	r20
    4210:	5f 93       	push	r21
    4212:	6f 93       	push	r22
    4214:	7f 93       	push	r23
    4216:	8f 93       	push	r24
    4218:	9f 93       	push	r25
    421a:	af 93       	push	r26
    421c:	bf 93       	push	r27
    421e:	ef 93       	push	r30
    4220:	ff 93       	push	r31
	EIMSK &= ~(1 << INT5);
    4222:	ed 98       	cbi	0x1d, 5	; 29
	uart_puts("Running scenario 2");
    4224:	8b e4       	ldi	r24, 0x4B	; 75
    4226:	94 e0       	ldi	r25, 0x04	; 4
    4228:	0e 94 a0 33 	call	0x6740	; 0x6740 <uart_puts>
	run_scenario = SCENARIO2;
    422c:	82 e0       	ldi	r24, 0x02	; 2
    422e:	80 93 61 06 	sts	0x0661, r24	; 0x800661 <run_scenario>
}
    4232:	ff 91       	pop	r31
    4234:	ef 91       	pop	r30
    4236:	bf 91       	pop	r27
    4238:	af 91       	pop	r26
    423a:	9f 91       	pop	r25
    423c:	8f 91       	pop	r24
    423e:	7f 91       	pop	r23
    4240:	6f 91       	pop	r22
    4242:	5f 91       	pop	r21
    4244:	4f 91       	pop	r20
    4246:	3f 91       	pop	r19
    4248:	2f 91       	pop	r18
    424a:	0f 90       	pop	r0
    424c:	0b be       	out	0x3b, r0	; 59
    424e:	0f 90       	pop	r0
    4250:	0f be       	out	0x3f, r0	; 63
    4252:	0f 90       	pop	r0
    4254:	1f 90       	pop	r1
    4256:	18 95       	reti

00004258 <__vector_7>:

//INITIATE SCENARIO3
ISR(INT6_vect){
    4258:	1f 92       	push	r1
    425a:	0f 92       	push	r0
    425c:	0f b6       	in	r0, 0x3f	; 63
    425e:	0f 92       	push	r0
    4260:	11 24       	eor	r1, r1
    4262:	0b b6       	in	r0, 0x3b	; 59
    4264:	0f 92       	push	r0
    4266:	2f 93       	push	r18
    4268:	3f 93       	push	r19
    426a:	4f 93       	push	r20
    426c:	5f 93       	push	r21
    426e:	6f 93       	push	r22
    4270:	7f 93       	push	r23
    4272:	8f 93       	push	r24
    4274:	9f 93       	push	r25
    4276:	af 93       	push	r26
    4278:	bf 93       	push	r27
    427a:	ef 93       	push	r30
    427c:	ff 93       	push	r31
	EIMSK &= ~(1 << INT6);
    427e:	ee 98       	cbi	0x1d, 6	; 29
	uart_puts("Running scenario 3");
    4280:	8e e5       	ldi	r24, 0x5E	; 94
    4282:	94 e0       	ldi	r25, 0x04	; 4
    4284:	0e 94 a0 33 	call	0x6740	; 0x6740 <uart_puts>
	run_scenario = SCENARIO3;
    4288:	83 e0       	ldi	r24, 0x03	; 3
    428a:	80 93 61 06 	sts	0x0661, r24	; 0x800661 <run_scenario>
}
    428e:	ff 91       	pop	r31
    4290:	ef 91       	pop	r30
    4292:	bf 91       	pop	r27
    4294:	af 91       	pop	r26
    4296:	9f 91       	pop	r25
    4298:	8f 91       	pop	r24
    429a:	7f 91       	pop	r23
    429c:	6f 91       	pop	r22
    429e:	5f 91       	pop	r21
    42a0:	4f 91       	pop	r20
    42a2:	3f 91       	pop	r19
    42a4:	2f 91       	pop	r18
    42a6:	0f 90       	pop	r0
    42a8:	0b be       	out	0x3b, r0	; 59
    42aa:	0f 90       	pop	r0
    42ac:	0f be       	out	0x3f, r0	; 63
    42ae:	0f 90       	pop	r0
    42b0:	1f 90       	pop	r1
    42b2:	18 95       	reti

000042b4 <__vector_8>:

//Not used.
ISR(INT7_vect){
    42b4:	1f 92       	push	r1
    42b6:	0f 92       	push	r0
    42b8:	0f b6       	in	r0, 0x3f	; 63
    42ba:	0f 92       	push	r0
    42bc:	11 24       	eor	r1, r1
	EIMSK &= ~(1 << INT7);
    42be:	ef 98       	cbi	0x1d, 7	; 29
	EIMSK |= 1 << INT7;
    42c0:	ef 9a       	sbi	0x1d, 7	; 29
}
    42c2:	0f 90       	pop	r0
    42c4:	0f be       	out	0x3f, r0	; 63
    42c6:	0f 90       	pop	r0
    42c8:	1f 90       	pop	r1
    42ca:	18 95       	reti

000042cc <authenticated_key_agreement>:
		
	Outputs:
		secret	- The calculated shared secret (ECDH).	

*/
int authenticated_key_agreement(uint8_t role, uint8_t secret[32]){
    42cc:	ef 92       	push	r14
    42ce:	ff 92       	push	r15
    42d0:	0f 93       	push	r16
    42d2:	1f 93       	push	r17
    42d4:	cf 93       	push	r28
    42d6:	df 93       	push	r29
    42d8:	cd b7       	in	r28, 0x3d	; 61
    42da:	de b7       	in	r29, 0x3e	; 62
    42dc:	c2 59       	subi	r28, 0x92	; 146
    42de:	d1 09       	sbc	r29, r1
    42e0:	0f b6       	in	r0, 0x3f	; 63
    42e2:	f8 94       	cli
    42e4:	de bf       	out	0x3e, r29	; 62
    42e6:	0f be       	out	0x3f, r0	; 63
    42e8:	cd bf       	out	0x3d, r28	; 61
    42ea:	18 2f       	mov	r17, r24
    42ec:	7b 01       	movw	r14, r22
	uart_puts("starting authentication");
    42ee:	81 e7       	ldi	r24, 0x71	; 113
    42f0:	94 e0       	ldi	r25, 0x04	; 4
    42f2:	0e 94 a0 33 	call	0x6740	; 0x6740 <uart_puts>
	
	//init authentication by sending role.
	can_msg_t init; 
	init[0]= role;
    42f6:	c7 57       	subi	r28, 0x77	; 119
    42f8:	df 4f       	sbci	r29, 0xFF	; 255
    42fa:	18 83       	st	Y, r17
    42fc:	c9 58       	subi	r28, 0x89	; 137
    42fe:	d0 40       	sbci	r29, 0x00	; 0
	isotpi_send(default_id, 7, init);
    4300:	ae 01       	movw	r20, r28
    4302:	47 57       	subi	r20, 0x77	; 119
    4304:	5f 4f       	sbci	r21, 0xFF	; 255
    4306:	67 e0       	ldi	r22, 0x07	; 7
    4308:	88 e2       	ldi	r24, 0x28	; 40
    430a:	95 e0       	ldi	r25, 0x05	; 5
    430c:	ce dc       	rcall	.-1636   	; 0x3caa <isotpi_send>
	uint8_t public[64];
	
	can_id_t id_tmp;
	//Receive generated public key.
	isotpi_receive_multi(default_id, id_tmp ,64, public);
    430e:	9e 01       	movw	r18, r28
    4310:	2f 5b       	subi	r18, 0xBF	; 191
    4312:	3f 4f       	sbci	r19, 0xFF	; 255
    4314:	40 e4       	ldi	r20, 0x40	; 64
    4316:	be 01       	movw	r22, r28
    4318:	6f 56       	subi	r22, 0x6F	; 111
    431a:	7f 4f       	sbci	r23, 0xFF	; 255
    431c:	88 e2       	ldi	r24, 0x28	; 40
    431e:	95 e0       	ldi	r25, 0x05	; 5
    4320:	dd dd       	rcall	.-1094   	; 0x3edc <isotpi_receive_multi>
	uart_puts("public key received");
    4322:	89 e8       	ldi	r24, 0x89	; 137
    4324:	94 e0       	ldi	r25, 0x04	; 4
    4326:	0e 94 a0 33 	call	0x6740	; 0x6740 <uart_puts>
	
	//Calculate shared secret.
	if(run_scenario == SCENARIO1){
    432a:	80 91 61 06 	lds	r24, 0x0661	; 0x800661 <run_scenario>
		calculate_shared_secret_dummy(public, role, secret);
    432e:	a7 01       	movw	r20, r14
    4330:	61 2f       	mov	r22, r17
	//Receive generated public key.
	isotpi_receive_multi(default_id, id_tmp ,64, public);
	uart_puts("public key received");
	
	//Calculate shared secret.
	if(run_scenario == SCENARIO1){
    4332:	81 30       	cpi	r24, 0x01	; 1
    4334:	09 f4       	brne	.+2      	; 0x4338 <authenticated_key_agreement+0x6c>
    4336:	52 c0       	rjmp	.+164    	; 0x43dc <authenticated_key_agreement+0x110>
		calculate_shared_secret_dummy(public, role, secret);
		_delay_ms(1000); // Introduce delay to mimic calculation time.
		}else{
		calculate_shared_secret(public, role, secret);
    4338:	ce 01       	movw	r24, r28
    433a:	8f 5b       	subi	r24, 0xBF	; 191
    433c:	9f 4f       	sbci	r25, 0xFF	; 255
    433e:	da de       	rcall	.-588    	; 0x40f4 <calculate_shared_secret>
	}
	
	//Sign the public key.
	uint8_t signature[64];
	if(run_scenario == SCENARIO1){
    4340:	80 91 61 06 	lds	r24, 0x0661	; 0x800661 <run_scenario>
		sign_challenge_dummy(public, signature, role);
    4344:	41 2f       	mov	r20, r17
    4346:	8e 01       	movw	r16, r28
    4348:	0f 5f       	subi	r16, 0xFF	; 255
    434a:	1f 4f       	sbci	r17, 0xFF	; 255
    434c:	b8 01       	movw	r22, r16
		calculate_shared_secret(public, role, secret);
	}
	
	//Sign the public key.
	uint8_t signature[64];
	if(run_scenario == SCENARIO1){
    434e:	81 30       	cpi	r24, 0x01	; 1
    4350:	b9 f1       	breq	.+110    	; 0x43c0 <authenticated_key_agreement+0xf4>
		sign_challenge_dummy(public, signature, role);
		_delay_ms(1000); // Introduce delay to mimic calculation time.
		}else{
		sign_challenge(public, signature, role);
    4352:	ce 01       	movw	r24, r28
    4354:	8f 5b       	subi	r24, 0xBF	; 191
    4356:	9f 4f       	sbci	r25, 0xFF	; 255
    4358:	75 de       	rcall	.-790    	; 0x4044 <sign_challenge>
	}
	
	//Send signature.
	isotpi_send_multi(default_id,64,signature);
    435a:	a8 01       	movw	r20, r16
    435c:	60 e4       	ldi	r22, 0x40	; 64
    435e:	70 e0       	ldi	r23, 0x00	; 0
    4360:	88 e2       	ldi	r24, 0x28	; 40
    4362:	95 e0       	ldi	r25, 0x05	; 5
    4364:	45 dd       	rcall	.-1398   	; 0x3df0 <isotpi_send_multi>
	uart_puts("signature sent");
    4366:	8d e9       	ldi	r24, 0x9D	; 157
    4368:	94 e0       	ldi	r25, 0x04	; 4
    436a:	0e 94 a0 33 	call	0x6740	; 0x6740 <uart_puts>
	uint8_t ack[8];
	
	//wait for acknowledgment.
	uint8_t len;
	isotpi_receive(default_id,7,ack);
    436e:	ae 01       	movw	r20, r28
    4370:	4f 57       	subi	r20, 0x7F	; 127
    4372:	5f 4f       	sbci	r21, 0xFF	; 255
    4374:	67 e0       	ldi	r22, 0x07	; 7
    4376:	88 e2       	ldi	r24, 0x28	; 40
    4378:	95 e0       	ldi	r25, 0x05	; 5
    437a:	d8 dc       	rcall	.-1616   	; 0x3d2c <isotpi_receive>
	if(ack[0] == ACK_POS){
    437c:	cf 57       	subi	r28, 0x7F	; 127
    437e:	df 4f       	sbci	r29, 0xFF	; 255
    4380:	88 81       	ld	r24, Y
    4382:	c1 58       	subi	r28, 0x81	; 129
    4384:	d0 40       	sbci	r29, 0x00	; 0
    4386:	88 23       	and	r24, r24
    4388:	a1 f0       	breq	.+40     	; 0x43b2 <authenticated_key_agreement+0xe6>
		uart_puts("Successfully authenticated!");
		}else{
		uart_puts("Authentication failed!");
    438a:	88 ec       	ldi	r24, 0xC8	; 200
    438c:	94 e0       	ldi	r25, 0x04	; 4
    438e:	0e 94 a0 33 	call	0x6740	; 0x6740 <uart_puts>
		return 1;
    4392:	81 e0       	ldi	r24, 0x01	; 1
    4394:	90 e0       	ldi	r25, 0x00	; 0
	}
	return 0;
}
    4396:	ce 56       	subi	r28, 0x6E	; 110
    4398:	df 4f       	sbci	r29, 0xFF	; 255
    439a:	0f b6       	in	r0, 0x3f	; 63
    439c:	f8 94       	cli
    439e:	de bf       	out	0x3e, r29	; 62
    43a0:	0f be       	out	0x3f, r0	; 63
    43a2:	cd bf       	out	0x3d, r28	; 61
    43a4:	df 91       	pop	r29
    43a6:	cf 91       	pop	r28
    43a8:	1f 91       	pop	r17
    43aa:	0f 91       	pop	r16
    43ac:	ff 90       	pop	r15
    43ae:	ef 90       	pop	r14
    43b0:	08 95       	ret
	
	//wait for acknowledgment.
	uint8_t len;
	isotpi_receive(default_id,7,ack);
	if(ack[0] == ACK_POS){
		uart_puts("Successfully authenticated!");
    43b2:	8c ea       	ldi	r24, 0xAC	; 172
    43b4:	94 e0       	ldi	r25, 0x04	; 4
    43b6:	0e 94 a0 33 	call	0x6740	; 0x6740 <uart_puts>
		}else{
		uart_puts("Authentication failed!");
		return 1;
	}
	return 0;
    43ba:	80 e0       	ldi	r24, 0x00	; 0
    43bc:	90 e0       	ldi	r25, 0x00	; 0
	}
	
	//Sign the public key.
	uint8_t signature[64];
	if(run_scenario == SCENARIO1){
		sign_challenge_dummy(public, signature, role);
    43be:	eb cf       	rjmp	.-42     	; 0x4396 <authenticated_key_agreement+0xca>
    43c0:	ce 01       	movw	r24, r28
    43c2:	8f 5b       	subi	r24, 0xBF	; 191
    43c4:	9f 4f       	sbci	r25, 0xFF	; 255
    43c6:	8c de       	rcall	.-744    	; 0x40e0 <sign_challenge_dummy>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    43c8:	2f ef       	ldi	r18, 0xFF	; 255
    43ca:	89 e6       	ldi	r24, 0x69	; 105
    43cc:	98 e1       	ldi	r25, 0x18	; 24
    43ce:	21 50       	subi	r18, 0x01	; 1
    43d0:	80 40       	sbci	r24, 0x00	; 0
    43d2:	90 40       	sbci	r25, 0x00	; 0
    43d4:	e1 f7       	brne	.-8      	; 0x43ce <authenticated_key_agreement+0x102>
    43d6:	00 c0       	rjmp	.+0      	; 0x43d8 <authenticated_key_agreement+0x10c>
    43d8:	00 00       	nop
	isotpi_receive_multi(default_id, id_tmp ,64, public);
	uart_puts("public key received");
	
	//Calculate shared secret.
	if(run_scenario == SCENARIO1){
		calculate_shared_secret_dummy(public, role, secret);
    43da:	bf cf       	rjmp	.-130    	; 0x435a <authenticated_key_agreement+0x8e>
    43dc:	ce 01       	movw	r24, r28
    43de:	8f 5b       	subi	r24, 0xBF	; 191
    43e0:	9f 4f       	sbci	r25, 0xFF	; 255
    43e2:	d4 de       	rcall	.-600    	; 0x418c <calculate_shared_secret_dummy>
    43e4:	2f ef       	ldi	r18, 0xFF	; 255
    43e6:	89 e6       	ldi	r24, 0x69	; 105
    43e8:	98 e1       	ldi	r25, 0x18	; 24
    43ea:	21 50       	subi	r18, 0x01	; 1
    43ec:	80 40       	sbci	r24, 0x00	; 0
    43ee:	90 40       	sbci	r25, 0x00	; 0
    43f0:	e1 f7       	brne	.-8      	; 0x43ea <authenticated_key_agreement+0x11e>
    43f2:	00 c0       	rjmp	.+0      	; 0x43f4 <authenticated_key_agreement+0x128>
    43f4:	00 00       	nop
    43f6:	a4 cf       	rjmp	.-184    	; 0x4340 <authenticated_key_agreement+0x74>

000043f8 <message_authentication>:
	Inputs:
		message	- The message that is to be forwarded by the gateway.
		id		- The identifier of the message.
		secret	- The shared secret (ECDH) that was established before.
*/
int message_authentication(can_msg_t message, can_id_t id, uint8_t secret[32]){	
    43f8:	af 92       	push	r10
    43fa:	bf 92       	push	r11
    43fc:	cf 92       	push	r12
    43fe:	df 92       	push	r13
    4400:	ef 92       	push	r14
    4402:	ff 92       	push	r15
    4404:	0f 93       	push	r16
    4406:	1f 93       	push	r17
    4408:	cf 93       	push	r28
    440a:	df 93       	push	r29
    440c:	cd b7       	in	r28, 0x3d	; 61
    440e:	de b7       	in	r29, 0x3e	; 62
    4410:	a8 97       	sbiw	r28, 0x28	; 40
    4412:	0f b6       	in	r0, 0x3f	; 63
    4414:	f8 94       	cli
    4416:	de bf       	out	0x3e, r29	; 62
    4418:	0f be       	out	0x3f, r0	; 63
    441a:	cd bf       	out	0x3d, r28	; 61
    441c:	6c 01       	movw	r12, r24
    441e:	cb 01       	movw	r24, r22
    4420:	5a 01       	movw	r10, r20
		
	//Send message you want to send to the vehicle network.
	isotpi_send_multi(id, 8, message);
    4422:	a6 01       	movw	r20, r12
    4424:	68 e0       	ldi	r22, 0x08	; 8
    4426:	70 e0       	ldi	r23, 0x00	; 0
    4428:	e3 dc       	rcall	.-1594   	; 0x3df0 <isotpi_send_multi>
	
	//Wait for acknowledgment.
	can_msg_t ack;
	isotpi_receive(default_id,7,ack);
    442a:	ae 01       	movw	r20, r28
    442c:	4f 5d       	subi	r20, 0xDF	; 223
    442e:	5f 4f       	sbci	r21, 0xFF	; 255
    4430:	67 e0       	ldi	r22, 0x07	; 7
    4432:	88 e2       	ldi	r24, 0x28	; 40
    4434:	95 e0       	ldi	r25, 0x05	; 5
    4436:	7a dc       	rcall	.-1804   	; 0x3d2c <isotpi_receive>
	
	if(ack[0] == ACK_POS){
    4438:	89 a1       	ldd	r24, Y+33	; 0x21
    443a:	81 11       	cpse	r24, r1
    443c:	49 c0       	rjmp	.+146    	; 0x44d0 <message_authentication+0xd8>
		uart_puts("permission granted!");
    443e:	8f ed       	ldi	r24, 0xDF	; 223
    4440:	94 e0       	ldi	r25, 0x04	; 4
    4442:	0e 94 a0 33 	call	0x6740	; 0x6740 <uart_puts>
	
	//Calculate and send Hmac of message.
	uint8_t mac[32];
	uint16_t klen = 256;
	uint32_t msglen = 64;
	hmac_sha256(mac, secret, klen ,message , msglen);
    4446:	10 e4       	ldi	r17, 0x40	; 64
    4448:	e1 2e       	mov	r14, r17
    444a:	f1 2c       	mov	r15, r1
    444c:	00 e0       	ldi	r16, 0x00	; 0
    444e:	10 e0       	ldi	r17, 0x00	; 0
    4450:	96 01       	movw	r18, r12
    4452:	40 e0       	ldi	r20, 0x00	; 0
    4454:	51 e0       	ldi	r21, 0x01	; 1
    4456:	b5 01       	movw	r22, r10
    4458:	ce 01       	movw	r24, r28
    445a:	01 96       	adiw	r24, 0x01	; 1
    445c:	b6 d0       	rcall	.+364    	; 0x45ca <hmac_sha256>
	isotpi_send_multi(default_id, 32, mac);
    445e:	ae 01       	movw	r20, r28
    4460:	4f 5f       	subi	r20, 0xFF	; 255
    4462:	5f 4f       	sbci	r21, 0xFF	; 255
    4464:	60 e2       	ldi	r22, 0x20	; 32
    4466:	70 e0       	ldi	r23, 0x00	; 0
    4468:	88 e2       	ldi	r24, 0x28	; 40
    446a:	95 e0       	ldi	r25, 0x05	; 5
    446c:	c1 dc       	rcall	.-1662   	; 0x3df0 <isotpi_send_multi>
	
	//wait for acknowledgment.
	isotpi_receive(default_id, 7, ack);
    446e:	ae 01       	movw	r20, r28
    4470:	4f 5d       	subi	r20, 0xDF	; 223
    4472:	5f 4f       	sbci	r21, 0xFF	; 255
    4474:	67 e0       	ldi	r22, 0x07	; 7
    4476:	88 e2       	ldi	r24, 0x28	; 40
    4478:	95 e0       	ldi	r25, 0x05	; 5
    447a:	58 dc       	rcall	.-1872   	; 0x3d2c <isotpi_receive>
	if(ack[0] == ACK_POS){
    447c:	89 a1       	ldd	r24, Y+33	; 0x21
    447e:	88 23       	and	r24, r24
    4480:	b9 f0       	breq	.+46     	; 0x44b0 <message_authentication+0xb8>
		uart_puts("message accepted!");
	}else{
		uart_puts("message denied!");
    4482:	88 e1       	ldi	r24, 0x18	; 24
    4484:	95 e0       	ldi	r25, 0x05	; 5
    4486:	0e 94 a0 33 	call	0x6740	; 0x6740 <uart_puts>
		return 1;
    448a:	81 e0       	ldi	r24, 0x01	; 1
    448c:	90 e0       	ldi	r25, 0x00	; 0
	}
	_delay_ms(500); // Wait some time for gateway to be ready to receive.
	
	return 0;
}
    448e:	a8 96       	adiw	r28, 0x28	; 40
    4490:	0f b6       	in	r0, 0x3f	; 63
    4492:	f8 94       	cli
    4494:	de bf       	out	0x3e, r29	; 62
    4496:	0f be       	out	0x3f, r0	; 63
    4498:	cd bf       	out	0x3d, r28	; 61
    449a:	df 91       	pop	r29
    449c:	cf 91       	pop	r28
    449e:	1f 91       	pop	r17
    44a0:	0f 91       	pop	r16
    44a2:	ff 90       	pop	r15
    44a4:	ef 90       	pop	r14
    44a6:	df 90       	pop	r13
    44a8:	cf 90       	pop	r12
    44aa:	bf 90       	pop	r11
    44ac:	af 90       	pop	r10
    44ae:	08 95       	ret
	isotpi_send_multi(default_id, 32, mac);
	
	//wait for acknowledgment.
	isotpi_receive(default_id, 7, ack);
	if(ack[0] == ACK_POS){
		uart_puts("message accepted!");
    44b0:	86 e0       	ldi	r24, 0x06	; 6
    44b2:	95 e0       	ldi	r25, 0x05	; 5
    44b4:	0e 94 a0 33 	call	0x6740	; 0x6740 <uart_puts>
    44b8:	2f ef       	ldi	r18, 0xFF	; 255
    44ba:	84 e3       	ldi	r24, 0x34	; 52
    44bc:	9c e0       	ldi	r25, 0x0C	; 12
    44be:	21 50       	subi	r18, 0x01	; 1
    44c0:	80 40       	sbci	r24, 0x00	; 0
    44c2:	90 40       	sbci	r25, 0x00	; 0
    44c4:	e1 f7       	brne	.-8      	; 0x44be <message_authentication+0xc6>
    44c6:	00 c0       	rjmp	.+0      	; 0x44c8 <message_authentication+0xd0>
    44c8:	00 00       	nop
    44ca:	80 e0       	ldi	r24, 0x00	; 0
    44cc:	90 e0       	ldi	r25, 0x00	; 0
    44ce:	df cf       	rjmp	.-66     	; 0x448e <message_authentication+0x96>
	isotpi_receive(default_id,7,ack);
	
	if(ack[0] == ACK_POS){
		uart_puts("permission granted!");
	}else{
		uart_puts("permission denied!");
    44d0:	83 ef       	ldi	r24, 0xF3	; 243
    44d2:	94 e0       	ldi	r25, 0x04	; 4
    44d4:	0e 94 a0 33 	call	0x6740	; 0x6740 <uart_puts>
		return 1;
    44d8:	81 e0       	ldi	r24, 0x01	; 1
    44da:	90 e0       	ldi	r25, 0x00	; 0
    44dc:	d8 cf       	rjmp	.-80     	; 0x448e <message_authentication+0x96>

000044de <run>:
	
	return 0;
}


int run(uint8_t role){
    44de:	af 92       	push	r10
    44e0:	bf 92       	push	r11
    44e2:	cf 92       	push	r12
    44e4:	df 92       	push	r13
    44e6:	ef 92       	push	r14
    44e8:	ff 92       	push	r15
    44ea:	1f 93       	push	r17
    44ec:	cf 93       	push	r28
    44ee:	df 93       	push	r29
    44f0:	cd b7       	in	r28, 0x3d	; 61
    44f2:	de b7       	in	r29, 0x3e	; 62
    44f4:	ee 97       	sbiw	r28, 0x3e	; 62
    44f6:	0f b6       	in	r0, 0x3f	; 63
    44f8:	f8 94       	cli
    44fa:	de bf       	out	0x3e, r29	; 62
    44fc:	0f be       	out	0x3f, r0	; 63
    44fe:	cd bf       	out	0x3d, r28	; 61
	uint8_t msgs[3][8] = { {1,1,1,1,1,1,1,1} , {2,2,2,2,2,2,2,2} , {3,3,3,3,3,3,3,3} };
    4500:	98 e1       	ldi	r25, 0x18	; 24
    4502:	e4 e0       	ldi	r30, 0x04	; 4
    4504:	f1 e0       	ldi	r31, 0x01	; 1
    4506:	de 01       	movw	r26, r28
    4508:	91 96       	adiw	r26, 0x21	; 33
    450a:	01 90       	ld	r0, Z+
    450c:	0d 92       	st	X+, r0
    450e:	9a 95       	dec	r25
    4510:	e1 f7       	brne	.-8      	; 0x450a <run+0x2c>
	uint8_t ids[3][2] = {{2,1},{4,2},{0,0}};
    4512:	96 e0       	ldi	r25, 0x06	; 6
    4514:	ec e1       	ldi	r30, 0x1C	; 28
    4516:	f1 e0       	ldi	r31, 0x01	; 1
    4518:	de 01       	movw	r26, r28
    451a:	d9 96       	adiw	r26, 0x39	; 57
    451c:	01 90       	ld	r0, Z+
    451e:	0d 92       	st	X+, r0
    4520:	9a 95       	dec	r25
    4522:	e1 f7       	brne	.-8      	; 0x451c <run+0x3e>
	uint8_t secret[32];
	
	uint8_t ret = 0;
	ret = authenticated_key_agreement(role, secret);
    4524:	be 01       	movw	r22, r28
    4526:	6f 5f       	subi	r22, 0xFF	; 255
    4528:	7f 4f       	sbci	r23, 0xFF	; 255
    452a:	d0 de       	rcall	.-608    	; 0x42cc <authenticated_key_agreement>
    452c:	18 2f       	mov	r17, r24
	
	if(ret != 0) return 1;
    452e:	81 11       	cpse	r24, r1
    4530:	2b c0       	rjmp	.+86     	; 0x4588 <run+0xaa>
    4532:	7e 01       	movw	r14, r28
    4534:	81 e2       	ldi	r24, 0x21	; 33
    4536:	e8 0e       	add	r14, r24
    4538:	f1 1c       	adc	r15, r1
    453a:	6e 01       	movw	r12, r28
    453c:	89 e3       	ldi	r24, 0x39	; 57
    453e:	c8 0e       	add	r12, r24
    4540:	d1 1c       	adc	r13, r1
    4542:	56 01       	movw	r10, r12
	
	for (uint8_t c=0;c<3;c++)
	{
		ret += message_authentication(msgs[c], ids[c], secret);
    4544:	ae 01       	movw	r20, r28
    4546:	4f 5f       	subi	r20, 0xFF	; 255
    4548:	5f 4f       	sbci	r21, 0xFF	; 255
    454a:	b6 01       	movw	r22, r12
    454c:	c7 01       	movw	r24, r14
    454e:	54 df       	rcall	.-344    	; 0x43f8 <message_authentication>
    4550:	18 0f       	add	r17, r24
    4552:	88 e0       	ldi	r24, 0x08	; 8
    4554:	e8 0e       	add	r14, r24
    4556:	f1 1c       	adc	r15, r1
    4558:	82 e0       	ldi	r24, 0x02	; 2
    455a:	c8 0e       	add	r12, r24
    455c:	d1 1c       	adc	r13, r1
	uint8_t ret = 0;
	ret = authenticated_key_agreement(role, secret);
	
	if(ret != 0) return 1;
	
	for (uint8_t c=0;c<3;c++)
    455e:	ea 14       	cp	r14, r10
    4560:	fb 04       	cpc	r15, r11
    4562:	81 f7       	brne	.-32     	; 0x4544 <run+0x66>
	{
		ret += message_authentication(msgs[c], ids[c], secret);
	}
	return ret;
    4564:	81 2f       	mov	r24, r17
    4566:	90 e0       	ldi	r25, 0x00	; 0
}
    4568:	ee 96       	adiw	r28, 0x3e	; 62
    456a:	0f b6       	in	r0, 0x3f	; 63
    456c:	f8 94       	cli
    456e:	de bf       	out	0x3e, r29	; 62
    4570:	0f be       	out	0x3f, r0	; 63
    4572:	cd bf       	out	0x3d, r28	; 61
    4574:	df 91       	pop	r29
    4576:	cf 91       	pop	r28
    4578:	1f 91       	pop	r17
    457a:	ff 90       	pop	r15
    457c:	ef 90       	pop	r14
    457e:	df 90       	pop	r13
    4580:	cf 90       	pop	r12
    4582:	bf 90       	pop	r11
    4584:	af 90       	pop	r10
    4586:	08 95       	ret
	uint8_t secret[32];
	
	uint8_t ret = 0;
	ret = authenticated_key_agreement(role, secret);
	
	if(ret != 0) return 1;
    4588:	81 e0       	ldi	r24, 0x01	; 1
    458a:	90 e0       	ldi	r25, 0x00	; 0
    458c:	ed cf       	rjmp	.-38     	; 0x4568 <run+0x8a>

0000458e <main>:


 int main()
 {	

	 uart_init();
    458e:	0e 94 94 33 	call	0x6728	; 0x6728 <uart_init>

volatile run_t run_scenario = NOTHING;

// Initialize buttons, which are used to initiate authentication sequence.		
void buttons_init(){
	DDRE = 0x00;
    4592:	1d b8       	out	0x0d, r1	; 13
	PORTE = 1 << PE4 | 1 << PE5 | 1 << PE6 | 1 << PE7;
    4594:	80 ef       	ldi	r24, 0xF0	; 240
    4596:	8e b9       	out	0x0e, r24	; 14
	EICRB = 0x00;
    4598:	10 92 6a 00 	sts	0x006A, r1	; 0x80006a <__TEXT_REGION_LENGTH__+0x7e006a>
	EIMSK = 1 << INT4 | 1 << INT5 | 1 << INT6 | 1 << INT7;
    459c:	8d bb       	out	0x1d, r24	; 29
 int main()
 {	

	 uart_init();
	 buttons_init();
	 can_init();
    459e:	0e 94 7a 02 	call	0x4f4	; 0x4f4 <can_init>
	 clock_Init();
    45a2:	0e 94 58 04 	call	0x8b0	; 0x8b0 <clock_Init>
	
	 while(1){
		run_t runlcl = run_scenario;
    45a6:	80 91 61 06 	lds	r24, 0x0661	; 0x800661 <run_scenario>
		switch(runlcl){
    45aa:	82 30       	cpi	r24, 0x02	; 2
    45ac:	21 f0       	breq	.+8      	; 0x45b6 <main+0x28>
    45ae:	83 30       	cpi	r24, 0x03	; 3
    45b0:	39 f0       	breq	.+14     	; 0x45c0 <main+0x32>
    45b2:	81 30       	cpi	r24, 0x01	; 1
    45b4:	c1 f7       	brne	.-16     	; 0x45a6 <main+0x18>
				run_scenario = NOTHING;
				break;
				
			//SCENARIO2: Use owner private key (Some messages will be denied).
			case SCENARIO2 :
				run(OWNER_ROLE);
    45b6:	84 e0       	ldi	r24, 0x04	; 4
    45b8:	92 df       	rcall	.-220    	; 0x44de <run>
				run_scenario = NOTHING;
    45ba:	10 92 61 06 	sts	0x0661, r1	; 0x800661 <run_scenario>
				break;
    45be:	f3 cf       	rjmp	.-26     	; 0x45a6 <main+0x18>
				
			//SCENARIO3: Use tester private key (all messages accepted).
			case SCENARIO3 :
				run(ADMIN_ROLE);
    45c0:	80 e0       	ldi	r24, 0x00	; 0
    45c2:	8d df       	rcall	.-230    	; 0x44de <run>
				run_scenario = NOTHING;
    45c4:	10 92 61 06 	sts	0x0661, r1	; 0x800661 <run_scenario>
				break;
    45c8:	ee cf       	rjmp	.-36     	; 0x45a6 <main+0x18>

000045ca <hmac_sha256>:

/*
 * keylength in bits!
 * message length in bits!
 */
void hmac_sha256(void *dest, const void *key, uint16_t keylength_b, const void *msg, uint32_t msglength_b){ /* a one-shot*/
    45ca:	2f 92       	push	r2
    45cc:	3f 92       	push	r3
    45ce:	4f 92       	push	r4
    45d0:	5f 92       	push	r5
    45d2:	6f 92       	push	r6
    45d4:	7f 92       	push	r7
    45d6:	8f 92       	push	r8
    45d8:	9f 92       	push	r9
    45da:	af 92       	push	r10
    45dc:	bf 92       	push	r11
    45de:	cf 92       	push	r12
    45e0:	df 92       	push	r13
    45e2:	ef 92       	push	r14
    45e4:	ff 92       	push	r15
    45e6:	0f 93       	push	r16
    45e8:	1f 93       	push	r17
    45ea:	cf 93       	push	r28
    45ec:	df 93       	push	r29
    45ee:	cd b7       	in	r28, 0x3d	; 61
    45f0:	de b7       	in	r29, 0x3e	; 62
    45f2:	c8 56       	subi	r28, 0x68	; 104
    45f4:	d1 09       	sbc	r29, r1
    45f6:	0f b6       	in	r0, 0x3f	; 63
    45f8:	f8 94       	cli
    45fa:	de bf       	out	0x3e, r29	; 62
    45fc:	0f be       	out	0x3f, r0	; 63
    45fe:	cd bf       	out	0x3d, r28	; 61
    4600:	4c 01       	movw	r8, r24
    4602:	19 01       	movw	r2, r18
    4604:	a9 96       	adiw	r28, 0x29	; 41
    4606:	ec ae       	std	Y+60, r14	; 0x3c
    4608:	fd ae       	std	Y+61, r15	; 0x3d
    460a:	0e af       	std	Y+62, r16	; 0x3e
    460c:	1f af       	std	Y+63, r17	; 0x3f
    460e:	a9 97       	sbiw	r28, 0x29	; 41
	sha256_ctx_t s;
	uint8_t i;
	uint8_t buffer[HMAC_SHA256_BLOCK_BYTES];
	
	memset(buffer, 0, HMAC_SHA256_BLOCK_BYTES);
    4610:	ce 01       	movw	r24, r28
    4612:	01 96       	adiw	r24, 0x01	; 1
    4614:	7c 01       	movw	r14, r24
    4616:	80 e4       	ldi	r24, 0x40	; 64
    4618:	d7 01       	movw	r26, r14
    461a:	1d 92       	st	X+, r1
    461c:	8a 95       	dec	r24
    461e:	e9 f7       	brne	.-6      	; 0x461a <hmac_sha256+0x50>
	
	/* if key is larger than a block we have to hash it*/
	if (keylength_b > SHA256_BLOCK_BITS){
    4620:	41 30       	cpi	r20, 0x01	; 1
    4622:	b2 e0       	ldi	r27, 0x02	; 2
    4624:	5b 07       	cpc	r21, r27
    4626:	08 f4       	brcc	.+2      	; 0x462a <hmac_sha256+0x60>
    4628:	9d c0       	rjmp	.+314    	; 0x4764 <hmac_sha256+0x19a>
		sha256((void*)buffer, key, keylength_b);
    462a:	9a 01       	movw	r18, r20
    462c:	40 e0       	ldi	r20, 0x00	; 0
    462e:	50 e0       	ldi	r21, 0x00	; 0
    4630:	c7 01       	movw	r24, r14
    4632:	b3 d0       	rcall	.+358    	; 0x479a <sha256>
    4634:	87 01       	movw	r16, r14
    4636:	6e 01       	movw	r12, r28
    4638:	e1 e4       	ldi	r30, 0x41	; 65
    463a:	ce 0e       	add	r12, r30
    463c:	d1 1c       	adc	r13, r1

/*
 * keylength in bits!
 * message length in bits!
 */
void hmac_sha256(void *dest, const void *key, uint16_t keylength_b, const void *msg, uint32_t msglength_b){ /* a one-shot*/
    463e:	f7 01       	movw	r30, r14
	} else {
		memcpy(buffer, key, (keylength_b+7)/8);
	}
	
	for (i=0; i<SHA256_BLOCK_BYTES; ++i){
		buffer[i] ^= IPAD;
    4640:	96 e3       	ldi	r25, 0x36	; 54
    4642:	80 81       	ld	r24, Z
    4644:	89 27       	eor	r24, r25
    4646:	81 93       	st	Z+, r24
		sha256((void*)buffer, key, keylength_b);
	} else {
		memcpy(buffer, key, (keylength_b+7)/8);
	}
	
	for (i=0; i<SHA256_BLOCK_BYTES; ++i){
    4648:	ec 15       	cp	r30, r12
    464a:	fd 05       	cpc	r31, r13
    464c:	d1 f7       	brne	.-12     	; 0x4642 <hmac_sha256+0x78>
		buffer[i] ^= IPAD;
	}
	sha256_init(&s);
    464e:	c6 01       	movw	r24, r12
    4650:	95 d0       	rcall	.+298    	; 0x477c <sha256_init>
	sha256_nextBlock(&s, buffer);
    4652:	b7 01       	movw	r22, r14
    4654:	c6 01       	movw	r24, r12
    4656:	9d d0       	rcall	.+314    	; 0x4792 <sha256_nextBlock>
	while (msglength_b >= HMAC_SHA256_BLOCK_BITS){
    4658:	a9 96       	adiw	r28, 0x29	; 41
    465a:	8c ad       	ldd	r24, Y+60	; 0x3c
    465c:	9d ad       	ldd	r25, Y+61	; 0x3d
    465e:	ae ad       	ldd	r26, Y+62	; 0x3e
    4660:	bf ad       	ldd	r27, Y+63	; 0x3f
    4662:	a9 97       	sbiw	r28, 0x29	; 41
    4664:	81 15       	cp	r24, r1
    4666:	e2 e0       	ldi	r30, 0x02	; 2
    4668:	9e 07       	cpc	r25, r30
    466a:	a1 05       	cpc	r26, r1
    466c:	b1 05       	cpc	r27, r1
    466e:	08 f4       	brcc	.+2      	; 0x4672 <hmac_sha256+0xa8>
    4670:	3e c0       	rjmp	.+124    	; 0x46ee <hmac_sha256+0x124>
    4672:	2c 01       	movw	r4, r24
    4674:	3d 01       	movw	r6, r26
		sha256_nextBlock(&s, msg);
    4676:	51 01       	movw	r10, r2
    4678:	b5 01       	movw	r22, r10
    467a:	c6 01       	movw	r24, r12
    467c:	8a d0       	rcall	.+276    	; 0x4792 <sha256_nextBlock>
		msg = (uint8_t*)msg + HMAC_SHA256_BLOCK_BYTES;
    467e:	f0 e4       	ldi	r31, 0x40	; 64
    4680:	af 0e       	add	r10, r31
    4682:	b1 1c       	adc	r11, r1
		msglength_b -=  HMAC_SHA256_BLOCK_BITS;
    4684:	22 e0       	ldi	r18, 0x02	; 2
    4686:	52 1a       	sub	r5, r18
    4688:	61 08       	sbc	r6, r1
    468a:	71 08       	sbc	r7, r1
	for (i=0; i<SHA256_BLOCK_BYTES; ++i){
		buffer[i] ^= IPAD;
	}
	sha256_init(&s);
	sha256_nextBlock(&s, buffer);
	while (msglength_b >= HMAC_SHA256_BLOCK_BITS){
    468c:	41 14       	cp	r4, r1
    468e:	82 e0       	ldi	r24, 0x02	; 2
    4690:	58 06       	cpc	r5, r24
    4692:	61 04       	cpc	r6, r1
    4694:	71 04       	cpc	r7, r1
    4696:	80 f7       	brcc	.-32     	; 0x4678 <hmac_sha256+0xae>
    4698:	a9 96       	adiw	r28, 0x29	; 41
    469a:	8c ad       	ldd	r24, Y+60	; 0x3c
    469c:	9d ad       	ldd	r25, Y+61	; 0x3d
    469e:	ae ad       	ldd	r26, Y+62	; 0x3e
    46a0:	bf ad       	ldd	r27, Y+63	; 0x3f
    46a2:	a9 97       	sbiw	r28, 0x29	; 41
    46a4:	92 50       	subi	r25, 0x02	; 2
    46a6:	a1 09       	sbc	r26, r1
    46a8:	b1 09       	sbc	r27, r1
    46aa:	29 e0       	ldi	r18, 0x09	; 9
    46ac:	b6 95       	lsr	r27
    46ae:	a7 95       	ror	r26
    46b0:	97 95       	ror	r25
    46b2:	87 95       	ror	r24
    46b4:	2a 95       	dec	r18
    46b6:	d1 f7       	brne	.-12     	; 0x46ac <hmac_sha256+0xe2>
    46b8:	01 96       	adiw	r24, 0x01	; 1
    46ba:	00 24       	eor	r0, r0
    46bc:	96 95       	lsr	r25
    46be:	87 95       	ror	r24
    46c0:	07 94       	ror	r0
    46c2:	96 95       	lsr	r25
    46c4:	87 95       	ror	r24
    46c6:	07 94       	ror	r0
    46c8:	98 2f       	mov	r25, r24
    46ca:	80 2d       	mov	r24, r0
    46cc:	28 0e       	add	r2, r24
    46ce:	39 1e       	adc	r3, r25
    46d0:	a9 96       	adiw	r28, 0x29	; 41
    46d2:	8c ad       	ldd	r24, Y+60	; 0x3c
    46d4:	9d ad       	ldd	r25, Y+61	; 0x3d
    46d6:	ae ad       	ldd	r26, Y+62	; 0x3e
    46d8:	bf ad       	ldd	r27, Y+63	; 0x3f
    46da:	a9 97       	sbiw	r28, 0x29	; 41
    46dc:	91 70       	andi	r25, 0x01	; 1
    46de:	aa 27       	eor	r26, r26
    46e0:	bb 27       	eor	r27, r27
    46e2:	a9 96       	adiw	r28, 0x29	; 41
    46e4:	8c af       	std	Y+60, r24	; 0x3c
    46e6:	9d af       	std	Y+61, r25	; 0x3d
    46e8:	ae af       	std	Y+62, r26	; 0x3e
    46ea:	bf af       	std	Y+63, r27	; 0x3f
    46ec:	a9 97       	sbiw	r28, 0x29	; 41
		sha256_nextBlock(&s, msg);
		msg = (uint8_t*)msg + HMAC_SHA256_BLOCK_BYTES;
		msglength_b -=  HMAC_SHA256_BLOCK_BITS;
	}
	sha256_lastBlock(&s, msg, msglength_b);
    46ee:	a7 96       	adiw	r28, 0x27	; 39
    46f0:	4e ad       	ldd	r20, Y+62	; 0x3e
    46f2:	5f ad       	ldd	r21, Y+63	; 0x3f
    46f4:	a7 97       	sbiw	r28, 0x27	; 39
    46f6:	b1 01       	movw	r22, r2
    46f8:	c6 01       	movw	r24, r12
    46fa:	4d d0       	rcall	.+154    	; 0x4796 <sha256_lastBlock>
	/* since buffer still contains key xor ipad we can do ... */
	for (i=0; i<HMAC_SHA256_BLOCK_BYTES; ++i){
		buffer[i] ^= IPAD ^ OPAD;
    46fc:	9a e6       	ldi	r25, 0x6A	; 106
    46fe:	d8 01       	movw	r26, r16
    4700:	8c 91       	ld	r24, X
    4702:	89 27       	eor	r24, r25
    4704:	f8 01       	movw	r30, r16
    4706:	81 93       	st	Z+, r24
    4708:	8f 01       	movw	r16, r30
		msg = (uint8_t*)msg + HMAC_SHA256_BLOCK_BYTES;
		msglength_b -=  HMAC_SHA256_BLOCK_BITS;
	}
	sha256_lastBlock(&s, msg, msglength_b);
	/* since buffer still contains key xor ipad we can do ... */
	for (i=0; i<HMAC_SHA256_BLOCK_BYTES; ++i){
    470a:	ec 15       	cp	r30, r12
    470c:	fd 05       	cpc	r31, r13
		buffer[i] ^= IPAD ^ OPAD;
	}
	sha256_ctx2hash(dest, &s); /* save inner hash temporary to dest */
    470e:	b9 f7       	brne	.-18     	; 0x46fe <hmac_sha256+0x134>
    4710:	bf 01       	movw	r22, r30
    4712:	c4 01       	movw	r24, r8
	sha256_init(&s);
    4714:	d4 d0       	rcall	.+424    	; 0x48be <sha256_ctx2hash>
    4716:	c8 01       	movw	r24, r16
    4718:	31 d0       	rcall	.+98     	; 0x477c <sha256_init>
	sha256_nextBlock(&s, buffer);
    471a:	b7 01       	movw	r22, r14
    471c:	c8 01       	movw	r24, r16
    471e:	39 d0       	rcall	.+114    	; 0x4792 <sha256_nextBlock>
	sha256_lastBlock(&s, dest, SHA256_HASH_BITS);
    4720:	40 e0       	ldi	r20, 0x00	; 0
    4722:	51 e0       	ldi	r21, 0x01	; 1
    4724:	b4 01       	movw	r22, r8
    4726:	c8 01       	movw	r24, r16
    4728:	36 d0       	rcall	.+108    	; 0x4796 <sha256_lastBlock>
    472a:	b8 01       	movw	r22, r16
	sha256_ctx2hash(dest, &s);
    472c:	c4 01       	movw	r24, r8
    472e:	c7 d0       	rcall	.+398    	; 0x48be <sha256_ctx2hash>
    4730:	c8 59       	subi	r28, 0x98	; 152
    4732:	df 4f       	sbci	r29, 0xFF	; 255
}
    4734:	0f b6       	in	r0, 0x3f	; 63
    4736:	f8 94       	cli
    4738:	de bf       	out	0x3e, r29	; 62
    473a:	0f be       	out	0x3f, r0	; 63
    473c:	cd bf       	out	0x3d, r28	; 61
    473e:	df 91       	pop	r29
    4740:	cf 91       	pop	r28
    4742:	1f 91       	pop	r17
    4744:	0f 91       	pop	r16
    4746:	ff 90       	pop	r15
    4748:	ef 90       	pop	r14
    474a:	df 90       	pop	r13
    474c:	cf 90       	pop	r12
    474e:	bf 90       	pop	r11
    4750:	af 90       	pop	r10
    4752:	9f 90       	pop	r9
    4754:	8f 90       	pop	r8
    4756:	7f 90       	pop	r7
    4758:	6f 90       	pop	r6
    475a:	5f 90       	pop	r5
    475c:	4f 90       	pop	r4
    475e:	3f 90       	pop	r3
    4760:	2f 90       	pop	r2
    4762:	08 95       	ret
    4764:	49 5f       	subi	r20, 0xF9	; 249
    4766:	5f 4f       	sbci	r21, 0xFF	; 255
	
	/* if key is larger than a block we have to hash it*/
	if (keylength_b > SHA256_BLOCK_BITS){
		sha256((void*)buffer, key, keylength_b);
	} else {
		memcpy(buffer, key, (keylength_b+7)/8);
    4768:	56 95       	lsr	r21
    476a:	47 95       	ror	r20
    476c:	56 95       	lsr	r21
    476e:	47 95       	ror	r20
    4770:	56 95       	lsr	r21
    4772:	47 95       	ror	r20
    4774:	c7 01       	movw	r24, r14
    4776:	0e 94 9d 34 	call	0x693a	; 0x693a <memcpy>
    477a:	5c cf       	rjmp	.-328    	; 0x4634 <hmac_sha256+0x6a>

0000477c <sha256_init>:
 * \c sh256_init c initialises the given sha256 context for hashing
 * @param state pointer to a sha256 context
 * @return none
 */
void sha256_init(sha256_ctx_t *state){
	state->length=0;
    477c:	fc 01       	movw	r30, r24
    477e:	10 a2       	std	Z+32, r1	; 0x20
    4780:	11 a2       	std	Z+33, r1	; 0x21
    4782:	12 a2       	std	Z+34, r1	; 0x22
    4784:	13 a2       	std	Z+35, r1	; 0x23
	memcpy_P(state->h, sha256_init_vector, 8*4);
    4786:	40 e2       	ldi	r20, 0x20	; 32
    4788:	50 e0       	ldi	r21, 0x00	; 0
    478a:	64 e9       	ldi	r22, 0x94	; 148
    478c:	70 e0       	ldi	r23, 0x00	; 0
    478e:	0c 94 94 34 	jmp	0x6928	; 0x6928 <memcpy_P>

00004792 <sha256_nextBlock>:
}

/*************************************************************************/
void sha256_nextBlock (sha256_ctx_t *state, const void *block){
	sha2_small_common_nextBlock(state, block);
    4792:	0c 94 1c 2f 	jmp	0x5e38	; 0x5e38 <sha2_small_common_nextBlock>

00004796 <sha256_lastBlock>:
}

/*************************************************************************/
void sha256_lastBlock (sha256_ctx_t *state, const void *block, uint16_t length_b){
	sha2_small_common_lastBlock(state, block, length_b);
    4796:	0c 94 33 32 	jmp	0x6466	; 0x6466 <sha2_small_common_lastBlock>

0000479a <sha256>:
/*************************************************************************/

/*
 * length in bits!
 */
void sha256(void *dest, const void *msg, uint32_t length_b){ /* length could be choosen longer but this is for µC */
    479a:	4f 92       	push	r4
    479c:	5f 92       	push	r5
    479e:	6f 92       	push	r6
    47a0:	7f 92       	push	r7
    47a2:	8f 92       	push	r8
    47a4:	9f 92       	push	r9
    47a6:	af 92       	push	r10
    47a8:	bf 92       	push	r11
    47aa:	cf 92       	push	r12
    47ac:	df 92       	push	r13
    47ae:	ef 92       	push	r14
    47b0:	ff 92       	push	r15
    47b2:	0f 93       	push	r16
    47b4:	1f 93       	push	r17
    47b6:	cf 93       	push	r28
    47b8:	df 93       	push	r29
    47ba:	cd b7       	in	r28, 0x3d	; 61
    47bc:	de b7       	in	r29, 0x3e	; 62
    47be:	a4 97       	sbiw	r28, 0x24	; 36
    47c0:	0f b6       	in	r0, 0x3f	; 63
    47c2:	f8 94       	cli
    47c4:	de bf       	out	0x3e, r29	; 62
    47c6:	0f be       	out	0x3f, r0	; 63
    47c8:	cd bf       	out	0x3d, r28	; 61
    47ca:	8c 01       	movw	r16, r24
    47cc:	6b 01       	movw	r12, r22
    47ce:	29 01       	movw	r4, r18
    47d0:	3a 01       	movw	r6, r20
 * \c sh256_init c initialises the given sha256 context for hashing
 * @param state pointer to a sha256 context
 * @return none
 */
void sha256_init(sha256_ctx_t *state){
	state->length=0;
    47d2:	19 a2       	std	Y+33, r1	; 0x21
    47d4:	1a a2       	std	Y+34, r1	; 0x22
    47d6:	1b a2       	std	Y+35, r1	; 0x23
    47d8:	1c a2       	std	Y+36, r1	; 0x24
	memcpy_P(state->h, sha256_init_vector, 8*4);
    47da:	40 e2       	ldi	r20, 0x20	; 32
    47dc:	50 e0       	ldi	r21, 0x00	; 0
    47de:	64 e9       	ldi	r22, 0x94	; 148
    47e0:	70 e0       	ldi	r23, 0x00	; 0
    47e2:	ce 01       	movw	r24, r28
    47e4:	01 96       	adiw	r24, 0x01	; 1
    47e6:	0e 94 94 34 	call	0x6928	; 0x6928 <memcpy_P>
 * length in bits!
 */
void sha256(void *dest, const void *msg, uint32_t length_b){ /* length could be choosen longer but this is for µC */
	sha256_ctx_t s;
	sha256_init(&s);
	while(length_b >= SHA256_BLOCK_BITS){
    47ea:	41 14       	cp	r4, r1
    47ec:	82 e0       	ldi	r24, 0x02	; 2
    47ee:	58 06       	cpc	r5, r24
    47f0:	61 04       	cpc	r6, r1
    47f2:	71 04       	cpc	r7, r1
    47f4:	88 f1       	brcs	.+98     	; 0x4858 <sha256+0xbe>
    47f6:	53 01       	movw	r10, r6
    47f8:	42 01       	movw	r8, r4
    47fa:	76 01       	movw	r14, r12
	memcpy_P(state->h, sha256_init_vector, 8*4);
}

/*************************************************************************/
void sha256_nextBlock (sha256_ctx_t *state, const void *block){
	sha2_small_common_nextBlock(state, block);
    47fc:	b7 01       	movw	r22, r14
    47fe:	ce 01       	movw	r24, r28
    4800:	01 96       	adiw	r24, 0x01	; 1
    4802:	0e 94 1c 2f 	call	0x5e38	; 0x5e38 <sha2_small_common_nextBlock>
void sha256(void *dest, const void *msg, uint32_t length_b){ /* length could be choosen longer but this is for µC */
	sha256_ctx_t s;
	sha256_init(&s);
	while(length_b >= SHA256_BLOCK_BITS){
		sha256_nextBlock(&s, msg);
		msg = (uint8_t*)msg + SHA256_BLOCK_BITS/8;
    4806:	80 e4       	ldi	r24, 0x40	; 64
    4808:	e8 0e       	add	r14, r24
    480a:	f1 1c       	adc	r15, r1
		length_b -= SHA256_BLOCK_BITS;
    480c:	82 e0       	ldi	r24, 0x02	; 2
    480e:	98 1a       	sub	r9, r24
    4810:	a1 08       	sbc	r10, r1
    4812:	b1 08       	sbc	r11, r1
 * length in bits!
 */
void sha256(void *dest, const void *msg, uint32_t length_b){ /* length could be choosen longer but this is for µC */
	sha256_ctx_t s;
	sha256_init(&s);
	while(length_b >= SHA256_BLOCK_BITS){
    4814:	81 14       	cp	r8, r1
    4816:	82 e0       	ldi	r24, 0x02	; 2
    4818:	98 06       	cpc	r9, r24
    481a:	a1 04       	cpc	r10, r1
    481c:	b1 04       	cpc	r11, r1
    481e:	70 f7       	brcc	.-36     	; 0x47fc <sha256+0x62>
    4820:	d3 01       	movw	r26, r6
    4822:	c2 01       	movw	r24, r4
    4824:	92 50       	subi	r25, 0x02	; 2
    4826:	a1 09       	sbc	r26, r1
    4828:	b1 09       	sbc	r27, r1
    482a:	29 e0       	ldi	r18, 0x09	; 9
    482c:	b6 95       	lsr	r27
    482e:	a7 95       	ror	r26
    4830:	97 95       	ror	r25
    4832:	87 95       	ror	r24
    4834:	2a 95       	dec	r18
    4836:	d1 f7       	brne	.-12     	; 0x482c <sha256+0x92>
    4838:	01 96       	adiw	r24, 0x01	; 1
    483a:	00 24       	eor	r0, r0
    483c:	96 95       	lsr	r25
    483e:	87 95       	ror	r24
    4840:	07 94       	ror	r0
    4842:	96 95       	lsr	r25
    4844:	87 95       	ror	r24
    4846:	07 94       	ror	r0
    4848:	98 2f       	mov	r25, r24
    484a:	80 2d       	mov	r24, r0
    484c:	c8 0e       	add	r12, r24
    484e:	d9 1e       	adc	r13, r25
    4850:	81 e0       	ldi	r24, 0x01	; 1
    4852:	58 22       	and	r5, r24
    4854:	66 24       	eor	r6, r6
    4856:	77 24       	eor	r7, r7
	sha2_small_common_nextBlock(state, block);
}

/*************************************************************************/
void sha256_lastBlock (sha256_ctx_t *state, const void *block, uint16_t length_b){
	sha2_small_common_lastBlock(state, block, length_b);
    4858:	a2 01       	movw	r20, r4
    485a:	b6 01       	movw	r22, r12
    485c:	ce 01       	movw	r24, r28
    485e:	01 96       	adiw	r24, 0x01	; 1
    4860:	0e 94 33 32 	call	0x6466	; 0x6466 <sha2_small_common_lastBlock>

/*************************************************************************/

void sha256_ctx2hash(void *dest, const sha256_ctx_t *state){
#if defined LITTLE_ENDIAN
	uint8_t i, j, *s=(uint8_t*)(state->h);
    4864:	9e 01       	movw	r18, r28
    4866:	2f 5f       	subi	r18, 0xFF	; 255
    4868:	3f 4f       	sbci	r19, 0xFF	; 255
    486a:	ae 01       	movw	r20, r28
    486c:	4f 5d       	subi	r20, 0xDF	; 223
    486e:	5f 4f       	sbci	r21, 0xFF	; 255
    4870:	f8 01       	movw	r30, r16
	i=8;
	do{
		j=3;
    4872:	83 e0       	ldi	r24, 0x03	; 3
		do{
			*((uint8_t*)dest) = s[j];
    4874:	d9 01       	movw	r26, r18
    4876:	a8 0f       	add	r26, r24
    4878:	b1 1d       	adc	r27, r1
    487a:	9c 91       	ld	r25, X
    487c:	91 93       	st	Z+, r25
			dest = (uint8_t*)dest + 1;
		}while(j--);
    487e:	81 50       	subi	r24, 0x01	; 1
    4880:	c8 f7       	brcc	.-14     	; 0x4874 <sha256+0xda>
    4882:	0c 5f       	subi	r16, 0xFC	; 252
    4884:	1f 4f       	sbci	r17, 0xFF	; 255
		s += 4;
    4886:	2c 5f       	subi	r18, 0xFC	; 252
    4888:	3f 4f       	sbci	r19, 0xFF	; 255
	}while(--i);
    488a:	24 17       	cp	r18, r20
    488c:	35 07       	cpc	r19, r21
    488e:	81 f7       	brne	.-32     	; 0x4870 <sha256+0xd6>
		msg = (uint8_t*)msg + SHA256_BLOCK_BITS/8;
		length_b -= SHA256_BLOCK_BITS;
	}
	sha256_lastBlock(&s, msg, length_b);
	sha256_ctx2hash(dest,&s);
}
    4890:	a4 96       	adiw	r28, 0x24	; 36
    4892:	0f b6       	in	r0, 0x3f	; 63
    4894:	f8 94       	cli
    4896:	de bf       	out	0x3e, r29	; 62
    4898:	0f be       	out	0x3f, r0	; 63
    489a:	cd bf       	out	0x3d, r28	; 61
    489c:	df 91       	pop	r29
    489e:	cf 91       	pop	r28
    48a0:	1f 91       	pop	r17
    48a2:	0f 91       	pop	r16
    48a4:	ff 90       	pop	r15
    48a6:	ef 90       	pop	r14
    48a8:	df 90       	pop	r13
    48aa:	cf 90       	pop	r12
    48ac:	bf 90       	pop	r11
    48ae:	af 90       	pop	r10
    48b0:	9f 90       	pop	r9
    48b2:	8f 90       	pop	r8
    48b4:	7f 90       	pop	r7
    48b6:	6f 90       	pop	r6
    48b8:	5f 90       	pop	r5
    48ba:	4f 90       	pop	r4
    48bc:	08 95       	ret

000048be <sha256_ctx2hash>:



/*************************************************************************/

void sha256_ctx2hash(void *dest, const sha256_ctx_t *state){
    48be:	cf 93       	push	r28
    48c0:	df 93       	push	r29
    48c2:	ac 01       	movw	r20, r24
    48c4:	ec 01       	movw	r28, r24
    48c6:	a0 96       	adiw	r28, 0x20	; 32
    48c8:	fa 01       	movw	r30, r20
#if defined LITTLE_ENDIAN
	uint8_t i, j, *s=(uint8_t*)(state->h);
	i=8;
	do{
		j=3;
    48ca:	93 e0       	ldi	r25, 0x03	; 3
		do{
			*((uint8_t*)dest) = s[j];
    48cc:	db 01       	movw	r26, r22
    48ce:	a9 0f       	add	r26, r25
    48d0:	b1 1d       	adc	r27, r1
    48d2:	2c 91       	ld	r18, X
    48d4:	21 93       	st	Z+, r18
			dest = (uint8_t*)dest + 1;
		}while(j--);
    48d6:	91 50       	subi	r25, 0x01	; 1
    48d8:	c8 f7       	brcc	.-14     	; 0x48cc <sha256_ctx2hash+0xe>
    48da:	4c 5f       	subi	r20, 0xFC	; 252
    48dc:	5f 4f       	sbci	r21, 0xFF	; 255
		s += 4;
    48de:	6c 5f       	subi	r22, 0xFC	; 252
    48e0:	7f 4f       	sbci	r23, 0xFF	; 255
	}while(--i);
    48e2:	c4 17       	cp	r28, r20
    48e4:	d5 07       	cpc	r29, r21
    48e6:	81 f7       	brne	.-32     	; 0x48c8 <sha256_ctx2hash+0xa>
#elif BIG_ENDIAN
	memcpy(dest, state->h, 32);
#else
# error unsupported endian type!
#endif
}
    48e8:	df 91       	pop	r29
    48ea:	cf 91       	pop	r28
    48ec:	08 95       	ret

000048ee <sha2_large_common_nextBlock>:
#define SIGMA_0(x) (rotr64((x), 28) ^ rotl64((x), 30) ^ rotl64((x), 25))
#define SIGMA_1(x) (rotr64((x), 14) ^ rotr64((x), 18) ^ rotl64((x), 23))
#define SIGMA_a(x) (rotr64((x),  1) ^ rotr64((x),  8) ^ ((x)>>7))
#define SIGMA_b(x) (rotr64((x), 19) ^ rotl64((x),  3) ^ ((x)>>6))

void sha2_large_common_nextBlock(sha2_large_common_ctx_t *ctx, const void *block){
    48ee:	2f 92       	push	r2
    48f0:	3f 92       	push	r3
    48f2:	4f 92       	push	r4
    48f4:	5f 92       	push	r5
    48f6:	6f 92       	push	r6
    48f8:	7f 92       	push	r7
    48fa:	8f 92       	push	r8
    48fc:	9f 92       	push	r9
    48fe:	af 92       	push	r10
    4900:	bf 92       	push	r11
    4902:	cf 92       	push	r12
    4904:	df 92       	push	r13
    4906:	ef 92       	push	r14
    4908:	ff 92       	push	r15
    490a:	0f 93       	push	r16
    490c:	1f 93       	push	r17
    490e:	cf 93       	push	r28
    4910:	df 93       	push	r29
    4912:	cd b7       	in	r28, 0x3d	; 61
    4914:	de b7       	in	r29, 0x3e	; 62
    4916:	c2 5f       	subi	r28, 0xF2	; 242
    4918:	d1 09       	sbc	r29, r1
    491a:	0f b6       	in	r0, 0x3f	; 63
    491c:	f8 94       	cli
    491e:	de bf       	out	0x3e, r29	; 62
    4920:	0f be       	out	0x3f, r0	; 63
    4922:	cd bf       	out	0x3d, r28	; 61
    4924:	cf 50       	subi	r28, 0x0F	; 15
    4926:	df 4f       	sbci	r29, 0xFF	; 255
    4928:	99 83       	std	Y+1, r25	; 0x01
    492a:	88 83       	st	Y, r24
    492c:	c1 5f       	subi	r28, 0xF1	; 241
    492e:	d0 40       	sbci	r29, 0x00	; 0
    4930:	c5 53       	subi	r28, 0x35	; 53
    4932:	df 4f       	sbci	r29, 0xFF	; 255
    4934:	79 83       	std	Y+1, r23	; 0x01
    4936:	68 83       	st	Y, r22
    4938:	cb 5c       	subi	r28, 0xCB	; 203
    493a:	d0 40       	sbci	r29, 0x00	; 0
    493c:	ce 01       	movw	r24, r28
    493e:	01 96       	adiw	r24, 0x01	; 1
    4940:	cb 51       	subi	r28, 0x1B	; 27
    4942:	df 4f       	sbci	r29, 0xFF	; 255
    4944:	99 83       	std	Y+1, r25	; 0x01
    4946:	88 83       	st	Y, r24
    4948:	c5 5e       	subi	r28, 0xE5	; 229
    494a:	d0 40       	sbci	r29, 0x00	; 0
    494c:	2e 01       	movw	r4, r28
    494e:	91 e8       	ldi	r25, 0x81	; 129
    4950:	49 0e       	add	r4, r25
    4952:	51 1c       	adc	r5, r1
    4954:	de 01       	movw	r26, r28
    4956:	11 96       	adiw	r26, 0x01	; 1
    4958:	c7 53       	subi	r28, 0x37	; 55
    495a:	df 4f       	sbci	r29, 0xFF	; 255
    495c:	b9 83       	std	Y+1, r27	; 0x01
    495e:	a8 83       	st	Y, r26
    4960:	c9 5c       	subi	r28, 0xC9	; 201
    4962:	d0 40       	sbci	r29, 0x00	; 0
	uint64_t t1, t2;
	const uint64_t *k=sha2_large_common_const;
	uint8_t i;
	i=16;
	do{
		w[16-i] = change_endian64(*((const uint64_t*)block));
    4964:	c5 53       	subi	r28, 0x35	; 53
    4966:	df 4f       	sbci	r29, 0xFF	; 255
    4968:	a8 81       	ld	r26, Y
    496a:	b9 81       	ldd	r27, Y+1	; 0x01
    496c:	cb 5c       	subi	r28, 0xCB	; 203
    496e:	d0 40       	sbci	r29, 0x00	; 0
    4970:	ec 91       	ld	r30, X
    4972:	11 96       	adiw	r26, 0x01	; 1
    4974:	9c 90       	ld	r9, X
    4976:	11 97       	sbiw	r26, 0x01	; 1
    4978:	12 96       	adiw	r26, 0x02	; 2
    497a:	ac 90       	ld	r10, X
    497c:	12 97       	sbiw	r26, 0x02	; 2
    497e:	13 96       	adiw	r26, 0x03	; 3
    4980:	bc 90       	ld	r11, X
    4982:	13 97       	sbiw	r26, 0x03	; 3
    4984:	14 96       	adiw	r26, 0x04	; 4
    4986:	cc 90       	ld	r12, X
    4988:	14 97       	sbiw	r26, 0x04	; 4
    498a:	15 96       	adiw	r26, 0x05	; 5
    498c:	dc 90       	ld	r13, X
    498e:	15 97       	sbiw	r26, 0x05	; 5
    4990:	16 96       	adiw	r26, 0x06	; 6
    4992:	2c 90       	ld	r2, X
    4994:	16 97       	sbiw	r26, 0x06	; 6
    4996:	17 96       	adiw	r26, 0x07	; 7
    4998:	3c 90       	ld	r3, X
    499a:	17 97       	sbiw	r26, 0x07	; 7
    499c:	18 96       	adiw	r26, 0x08	; 8
    499e:	c5 53       	subi	r28, 0x35	; 53
    49a0:	df 4f       	sbci	r29, 0xFF	; 255
    49a2:	b9 83       	std	Y+1, r27	; 0x01
    49a4:	a8 83       	st	Y, r26
    49a6:	cb 5c       	subi	r28, 0xCB	; 203
    49a8:	d0 40       	sbci	r29, 0x00	; 0
    49aa:	28 e0       	ldi	r18, 0x08	; 8
    49ac:	82 2e       	mov	r8, r18
};


static const
uint64_t change_endian64(uint64_t x){
	uint64_t r=0;
    49ae:	e1 2c       	mov	r14, r1
    49b0:	f1 2c       	mov	r15, r1
    49b2:	10 e0       	ldi	r17, 0x00	; 0
    49b4:	b0 e0       	ldi	r27, 0x00	; 0
    49b6:	a0 e0       	ldi	r26, 0x00	; 0
    49b8:	c3 53       	subi	r28, 0x33	; 51
    49ba:	df 4f       	sbci	r29, 0xFF	; 255
    49bc:	18 82       	st	Y, r1
    49be:	cd 5c       	subi	r28, 0xCD	; 205
    49c0:	d0 40       	sbci	r29, 0x00	; 0
    49c2:	61 2c       	mov	r6, r1
    49c4:	71 2c       	mov	r7, r1
	uint8_t i=8;
	do{
		r <<= 8;
    49c6:	97 01       	movw	r18, r14
    49c8:	41 2f       	mov	r20, r17
    49ca:	5b 2f       	mov	r21, r27
    49cc:	6a 2f       	mov	r22, r26
    49ce:	c3 53       	subi	r28, 0x33	; 51
    49d0:	df 4f       	sbci	r29, 0xFF	; 255
    49d2:	78 81       	ld	r23, Y
    49d4:	cd 5c       	subi	r28, 0xCD	; 205
    49d6:	d0 40       	sbci	r29, 0x00	; 0
    49d8:	c3 01       	movw	r24, r6
    49da:	08 e0       	ldi	r16, 0x08	; 8
    49dc:	0e 94 e0 33 	call	0x67c0	; 0x67c0 <__ashldi3>
		r |= 0xff&x;
    49e0:	ee 2e       	mov	r14, r30
    49e2:	e2 2a       	or	r14, r18
    49e4:	f3 2e       	mov	r15, r19
    49e6:	14 2f       	mov	r17, r20
    49e8:	b5 2f       	mov	r27, r21
    49ea:	a6 2f       	mov	r26, r22
    49ec:	c3 53       	subi	r28, 0x33	; 51
    49ee:	df 4f       	sbci	r29, 0xFF	; 255
    49f0:	78 83       	st	Y, r23
    49f2:	cd 5c       	subi	r28, 0xCD	; 205
    49f4:	d0 40       	sbci	r29, 0x00	; 0
    49f6:	3c 01       	movw	r6, r24
		x >>=8;
    49f8:	2e 2f       	mov	r18, r30
    49fa:	39 2d       	mov	r19, r9
    49fc:	a5 01       	movw	r20, r10
    49fe:	b6 01       	movw	r22, r12
    4a00:	c1 01       	movw	r24, r2
    4a02:	0e 94 fb 33 	call	0x67f6	; 0x67f6 <__lshrdi3>
    4a06:	e2 2f       	mov	r30, r18
    4a08:	93 2e       	mov	r9, r19
    4a0a:	5a 01       	movw	r10, r20
    4a0c:	6b 01       	movw	r12, r22
    4a0e:	1c 01       	movw	r2, r24
    4a10:	8a 94       	dec	r8
	}while(--i);
    4a12:	81 10       	cpse	r8, r1
    4a14:	d8 cf       	rjmp	.-80     	; 0x49c6 <sha2_large_common_nextBlock+0xd8>
	uint64_t t1, t2;
	const uint64_t *k=sha2_large_common_const;
	uint8_t i;
	i=16;
	do{
		w[16-i] = change_endian64(*((const uint64_t*)block));
    4a16:	c7 53       	subi	r28, 0x37	; 55
    4a18:	df 4f       	sbci	r29, 0xFF	; 255
    4a1a:	e8 81       	ld	r30, Y
    4a1c:	f9 81       	ldd	r31, Y+1	; 0x01
    4a1e:	c9 5c       	subi	r28, 0xC9	; 201
    4a20:	d0 40       	sbci	r29, 0x00	; 0
    4a22:	e0 82       	st	Z, r14
    4a24:	f1 82       	std	Z+1, r15	; 0x01
    4a26:	12 83       	std	Z+2, r17	; 0x02
    4a28:	b3 83       	std	Z+3, r27	; 0x03
    4a2a:	a4 83       	std	Z+4, r26	; 0x04
    4a2c:	c3 53       	subi	r28, 0x33	; 51
    4a2e:	df 4f       	sbci	r29, 0xFF	; 255
    4a30:	18 81       	ld	r17, Y
    4a32:	cd 5c       	subi	r28, 0xCD	; 205
    4a34:	d0 40       	sbci	r29, 0x00	; 0
    4a36:	15 83       	std	Z+5, r17	; 0x05
    4a38:	66 82       	std	Z+6, r6	; 0x06
    4a3a:	77 82       	std	Z+7, r7	; 0x07
    4a3c:	38 96       	adiw	r30, 0x08	; 8
    4a3e:	c7 53       	subi	r28, 0x37	; 55
    4a40:	df 4f       	sbci	r29, 0xFF	; 255
    4a42:	f9 83       	std	Y+1, r31	; 0x01
    4a44:	e8 83       	st	Y, r30
    4a46:	c9 5c       	subi	r28, 0xC9	; 201
    4a48:	d0 40       	sbci	r29, 0x00	; 0
		block = (uint8_t*)block + 8;
	}while(--i);
    4a4a:	e4 15       	cp	r30, r4
    4a4c:	f5 05       	cpc	r31, r5
    4a4e:	09 f0       	breq	.+2      	; 0x4a52 <sha2_large_common_nextBlock+0x164>
    4a50:	89 cf       	rjmp	.-238    	; 0x4964 <sha2_large_common_nextBlock+0x76>
	memcpy(a, ctx->h, 8*8);
    4a52:	80 e4       	ldi	r24, 0x40	; 64
    4a54:	cf 50       	subi	r28, 0x0F	; 15
    4a56:	df 4f       	sbci	r29, 0xFF	; 255
    4a58:	e8 81       	ld	r30, Y
    4a5a:	f9 81       	ldd	r31, Y+1	; 0x01
    4a5c:	c1 5f       	subi	r28, 0xF1	; 241
    4a5e:	d0 40       	sbci	r29, 0x00	; 0
    4a60:	d2 01       	movw	r26, r4
    4a62:	01 90       	ld	r0, Z+
    4a64:	0d 92       	st	X+, r0
    4a66:	8a 95       	dec	r24
    4a68:	e1 f7       	brne	.-8      	; 0x4a62 <sha2_large_common_nextBlock+0x174>
    4a6a:	d2 01       	movw	r26, r4
    4a6c:	90 96       	adiw	r26, 0x20	; 32
    4a6e:	bc 91       	ld	r27, X
    4a70:	c7 53       	subi	r28, 0x37	; 55
    4a72:	df 4f       	sbci	r29, 0xFF	; 255
    4a74:	b8 83       	st	Y, r27
    4a76:	c9 5c       	subi	r28, 0xC9	; 201
    4a78:	d0 40       	sbci	r29, 0x00	; 0
    4a7a:	f2 01       	movw	r30, r4
    4a7c:	f1 a1       	ldd	r31, Z+33	; 0x21
    4a7e:	c5 53       	subi	r28, 0x35	; 53
    4a80:	df 4f       	sbci	r29, 0xFF	; 255
    4a82:	f8 83       	st	Y, r31
    4a84:	cb 5c       	subi	r28, 0xCB	; 203
    4a86:	d0 40       	sbci	r29, 0x00	; 0
    4a88:	d2 01       	movw	r26, r4
    4a8a:	92 96       	adiw	r26, 0x22	; 34
    4a8c:	bc 91       	ld	r27, X
    4a8e:	c3 53       	subi	r28, 0x33	; 51
    4a90:	df 4f       	sbci	r29, 0xFF	; 255
    4a92:	b8 83       	st	Y, r27
    4a94:	cd 5c       	subi	r28, 0xCD	; 205
    4a96:	d0 40       	sbci	r29, 0x00	; 0
    4a98:	f2 01       	movw	r30, r4
    4a9a:	f3 a1       	ldd	r31, Z+35	; 0x23
    4a9c:	c2 53       	subi	r28, 0x32	; 50
    4a9e:	df 4f       	sbci	r29, 0xFF	; 255
    4aa0:	f8 83       	st	Y, r31
    4aa2:	ce 5c       	subi	r28, 0xCE	; 206
    4aa4:	d0 40       	sbci	r29, 0x00	; 0
    4aa6:	d2 01       	movw	r26, r4
    4aa8:	94 96       	adiw	r26, 0x24	; 36
    4aaa:	bc 91       	ld	r27, X
    4aac:	c1 53       	subi	r28, 0x31	; 49
    4aae:	df 4f       	sbci	r29, 0xFF	; 255
    4ab0:	b8 83       	st	Y, r27
    4ab2:	cf 5c       	subi	r28, 0xCF	; 207
    4ab4:	d0 40       	sbci	r29, 0x00	; 0
    4ab6:	f2 01       	movw	r30, r4
    4ab8:	25 a0       	ldd	r2, Z+37	; 0x25
    4aba:	36 a0       	ldd	r3, Z+38	; 0x26
    4abc:	67 a0       	ldd	r6, Z+39	; 0x27
    4abe:	f0 81       	ld	r31, Z
    4ac0:	c3 52       	subi	r28, 0x23	; 35
    4ac2:	df 4f       	sbci	r29, 0xFF	; 255
    4ac4:	f8 83       	st	Y, r31
    4ac6:	cd 5d       	subi	r28, 0xDD	; 221
    4ac8:	d0 40       	sbci	r29, 0x00	; 0
    4aca:	d2 01       	movw	r26, r4
    4acc:	11 96       	adiw	r26, 0x01	; 1
    4ace:	bc 91       	ld	r27, X
    4ad0:	c2 52       	subi	r28, 0x22	; 34
    4ad2:	df 4f       	sbci	r29, 0xFF	; 255
    4ad4:	b8 83       	st	Y, r27
    4ad6:	ce 5d       	subi	r28, 0xDE	; 222
    4ad8:	d0 40       	sbci	r29, 0x00	; 0
    4ada:	f2 01       	movw	r30, r4
    4adc:	f2 81       	ldd	r31, Z+2	; 0x02
    4ade:	c1 52       	subi	r28, 0x21	; 33
    4ae0:	df 4f       	sbci	r29, 0xFF	; 255
    4ae2:	f8 83       	st	Y, r31
    4ae4:	cf 5d       	subi	r28, 0xDF	; 223
    4ae6:	d0 40       	sbci	r29, 0x00	; 0
    4ae8:	d2 01       	movw	r26, r4
    4aea:	13 96       	adiw	r26, 0x03	; 3
    4aec:	bc 91       	ld	r27, X
    4aee:	c0 52       	subi	r28, 0x20	; 32
    4af0:	df 4f       	sbci	r29, 0xFF	; 255
    4af2:	b8 83       	st	Y, r27
    4af4:	c0 5e       	subi	r28, 0xE0	; 224
    4af6:	d0 40       	sbci	r29, 0x00	; 0
    4af8:	f2 01       	movw	r30, r4
    4afa:	f4 81       	ldd	r31, Z+4	; 0x04
    4afc:	cf 51       	subi	r28, 0x1F	; 31
    4afe:	df 4f       	sbci	r29, 0xFF	; 255
    4b00:	f8 83       	st	Y, r31
    4b02:	c1 5e       	subi	r28, 0xE1	; 225
    4b04:	d0 40       	sbci	r29, 0x00	; 0
    4b06:	d2 01       	movw	r26, r4
    4b08:	15 96       	adiw	r26, 0x05	; 5
    4b0a:	bc 91       	ld	r27, X
    4b0c:	ce 51       	subi	r28, 0x1E	; 30
    4b0e:	df 4f       	sbci	r29, 0xFF	; 255
    4b10:	b8 83       	st	Y, r27
    4b12:	c2 5e       	subi	r28, 0xE2	; 226
    4b14:	d0 40       	sbci	r29, 0x00	; 0
    4b16:	f2 01       	movw	r30, r4
    4b18:	f6 81       	ldd	r31, Z+6	; 0x06
    4b1a:	cd 51       	subi	r28, 0x1D	; 29
    4b1c:	df 4f       	sbci	r29, 0xFF	; 255
    4b1e:	f8 83       	st	Y, r31
    4b20:	c3 5e       	subi	r28, 0xE3	; 227
    4b22:	d0 40       	sbci	r29, 0x00	; 0
    4b24:	d2 01       	movw	r26, r4
    4b26:	17 96       	adiw	r26, 0x07	; 7
    4b28:	bc 91       	ld	r27, X
    4b2a:	cc 51       	subi	r28, 0x1C	; 28
    4b2c:	df 4f       	sbci	r29, 0xFF	; 255
    4b2e:	b8 83       	st	Y, r27
    4b30:	c4 5e       	subi	r28, 0xE4	; 228
    4b32:	d0 40       	sbci	r29, 0x00	; 0
    4b34:	e4 eb       	ldi	r30, 0xB4	; 180
    4b36:	f0 e0       	ldi	r31, 0x00	; 0
    4b38:	c8 51       	subi	r28, 0x18	; 24
    4b3a:	df 4f       	sbci	r29, 0xFF	; 255
    4b3c:	f9 83       	std	Y+1, r31	; 0x01
    4b3e:	e8 83       	st	Y, r30
    4b40:	c8 5e       	subi	r28, 0xE8	; 232
    4b42:	d0 40       	sbci	r29, 0x00	; 0
	for(i=0; i<80; ++i){
    4b44:	c9 51       	subi	r28, 0x19	; 25
    4b46:	df 4f       	sbci	r29, 0xFF	; 255
    4b48:	18 82       	st	Y, r1
    4b4a:	c7 5e       	subi	r28, 0xE7	; 231
    4b4c:	d0 40       	sbci	r29, 0x00	; 0
			memmove(&(w[0]), &(w[1]), 15*8);
			w[15] = wx;
		}
		t1 = a[7] + SIGMA_1(a[4]) + CH(a[4], a[5], a[6]) + pgm_read_uint64_t_P(k++) + wx;
		t2 = SIGMA_0(a[0]) + MAJ(a[0], a[1], a[2]);
		memmove(&(a[1]), &(a[0]), 7*8);
    4b4e:	c2 01       	movw	r24, r4
    4b50:	08 96       	adiw	r24, 0x08	; 8
    4b52:	c1 51       	subi	r28, 0x11	; 17
    4b54:	df 4f       	sbci	r29, 0xFF	; 255
    4b56:	99 83       	std	Y+1, r25	; 0x01
    4b58:	88 83       	st	Y, r24
    4b5a:	cf 5e       	subi	r28, 0xEF	; 239
    4b5c:	d0 40       	sbci	r29, 0x00	; 0
    4b5e:	c0 53       	subi	r28, 0x30	; 48
    4b60:	df 4f       	sbci	r29, 0xFF	; 255
    4b62:	38 82       	st	Y, r3
    4b64:	c0 5d       	subi	r28, 0xD0	; 208
    4b66:	d0 40       	sbci	r29, 0x00	; 0
    4b68:	cf 52       	subi	r28, 0x2F	; 47
    4b6a:	df 4f       	sbci	r29, 0xFF	; 255
    4b6c:	68 82       	st	Y, r6
    4b6e:	c1 5d       	subi	r28, 0xD1	; 209
    4b70:	d0 40       	sbci	r29, 0x00	; 0
    4b72:	fa c6       	rjmp	.+3572   	; 0x5968 <sha2_large_common_nextBlock+0x107a>
	memcpy(a, ctx->h, 8*8);
	for(i=0; i<80; ++i){
		if(i<16){
			wx=w[i];
		}else{
			wx = SIGMA_b(w[14]) + w[9] + SIGMA_a(w[1]) + w[0];
    4b74:	e2 96       	adiw	r28, 0x32	; 50
    4b76:	3f ac       	ldd	r3, Y+63	; 0x3f
    4b78:	e2 97       	sbiw	r28, 0x32	; 50
    4b7a:	e3 96       	adiw	r28, 0x33	; 51
    4b7c:	6f ac       	ldd	r6, Y+63	; 0x3f
    4b7e:	e3 97       	sbiw	r28, 0x33	; 51
    4b80:	e4 96       	adiw	r28, 0x34	; 52
    4b82:	7f ac       	ldd	r7, Y+63	; 0x3f
    4b84:	e4 97       	sbiw	r28, 0x34	; 52
    4b86:	e5 96       	adiw	r28, 0x35	; 53
    4b88:	8f ac       	ldd	r8, Y+63	; 0x3f
    4b8a:	e5 97       	sbiw	r28, 0x35	; 53
    4b8c:	e6 96       	adiw	r28, 0x36	; 54
    4b8e:	9f ac       	ldd	r9, Y+63	; 0x3f
    4b90:	e6 97       	sbiw	r28, 0x36	; 54
    4b92:	e7 96       	adiw	r28, 0x37	; 55
    4b94:	bf ad       	ldd	r27, Y+63	; 0x3f
    4b96:	e7 97       	sbiw	r28, 0x37	; 55
    4b98:	e8 96       	adiw	r28, 0x38	; 56
    4b9a:	af ad       	ldd	r26, Y+63	; 0x3f
    4b9c:	e8 97       	sbiw	r28, 0x38	; 56
    4b9e:	e9 96       	adiw	r28, 0x39	; 57
    4ba0:	ff ad       	ldd	r31, Y+63	; 0x3f
    4ba2:	e9 97       	sbiw	r28, 0x39	; 57
    4ba4:	e9 85       	ldd	r30, Y+9	; 0x09
    4ba6:	ce 52       	subi	r28, 0x2E	; 46
    4ba8:	df 4f       	sbci	r29, 0xFF	; 255
    4baa:	e8 83       	st	Y, r30
    4bac:	c2 5d       	subi	r28, 0xD2	; 210
    4bae:	d0 40       	sbci	r29, 0x00	; 0
    4bb0:	ea 85       	ldd	r30, Y+10	; 0x0a
    4bb2:	cd 52       	subi	r28, 0x2D	; 45
    4bb4:	df 4f       	sbci	r29, 0xFF	; 255
    4bb6:	e8 83       	st	Y, r30
    4bb8:	c3 5d       	subi	r28, 0xD3	; 211
    4bba:	d0 40       	sbci	r29, 0x00	; 0
    4bbc:	eb 85       	ldd	r30, Y+11	; 0x0b
    4bbe:	cc 52       	subi	r28, 0x2C	; 44
    4bc0:	df 4f       	sbci	r29, 0xFF	; 255
    4bc2:	e8 83       	st	Y, r30
    4bc4:	c4 5d       	subi	r28, 0xD4	; 212
    4bc6:	d0 40       	sbci	r29, 0x00	; 0
    4bc8:	ec 85       	ldd	r30, Y+12	; 0x0c
    4bca:	cb 52       	subi	r28, 0x2B	; 43
    4bcc:	df 4f       	sbci	r29, 0xFF	; 255
    4bce:	e8 83       	st	Y, r30
    4bd0:	c5 5d       	subi	r28, 0xD5	; 213
    4bd2:	d0 40       	sbci	r29, 0x00	; 0
    4bd4:	ed 85       	ldd	r30, Y+13	; 0x0d
    4bd6:	ca 52       	subi	r28, 0x2A	; 42
    4bd8:	df 4f       	sbci	r29, 0xFF	; 255
    4bda:	e8 83       	st	Y, r30
    4bdc:	c6 5d       	subi	r28, 0xD6	; 214
    4bde:	d0 40       	sbci	r29, 0x00	; 0
    4be0:	ee 85       	ldd	r30, Y+14	; 0x0e
    4be2:	c9 52       	subi	r28, 0x29	; 41
    4be4:	df 4f       	sbci	r29, 0xFF	; 255
    4be6:	e8 83       	st	Y, r30
    4be8:	c7 5d       	subi	r28, 0xD7	; 215
    4bea:	d0 40       	sbci	r29, 0x00	; 0
    4bec:	ef 85       	ldd	r30, Y+15	; 0x0f
    4bee:	c8 52       	subi	r28, 0x28	; 40
    4bf0:	df 4f       	sbci	r29, 0xFF	; 255
    4bf2:	e8 83       	st	Y, r30
    4bf4:	c8 5d       	subi	r28, 0xD8	; 216
    4bf6:	d0 40       	sbci	r29, 0x00	; 0
    4bf8:	e8 89       	ldd	r30, Y+16	; 0x10
    4bfa:	c7 52       	subi	r28, 0x27	; 39
    4bfc:	df 4f       	sbci	r29, 0xFF	; 255
    4bfe:	e8 83       	st	Y, r30
    4c00:	c9 5d       	subi	r28, 0xD9	; 217
    4c02:	d0 40       	sbci	r29, 0x00	; 0
    4c04:	2a 96       	adiw	r28, 0x0a	; 10
    4c06:	2f ad       	ldd	r18, Y+63	; 0x3f
    4c08:	2a 97       	sbiw	r28, 0x0a	; 10
    4c0a:	2b 96       	adiw	r28, 0x0b	; 11
    4c0c:	3f ad       	ldd	r19, Y+63	; 0x3f
    4c0e:	2b 97       	sbiw	r28, 0x0b	; 11
    4c10:	2c 96       	adiw	r28, 0x0c	; 12
    4c12:	4f ad       	ldd	r20, Y+63	; 0x3f
    4c14:	2c 97       	sbiw	r28, 0x0c	; 12
    4c16:	2d 96       	adiw	r28, 0x0d	; 13
    4c18:	5f ad       	ldd	r21, Y+63	; 0x3f
    4c1a:	2d 97       	sbiw	r28, 0x0d	; 13
    4c1c:	2e 96       	adiw	r28, 0x0e	; 14
    4c1e:	6f ad       	ldd	r22, Y+63	; 0x3f
    4c20:	2e 97       	sbiw	r28, 0x0e	; 14
    4c22:	2f 96       	adiw	r28, 0x0f	; 15
    4c24:	7f ad       	ldd	r23, Y+63	; 0x3f
    4c26:	2f 97       	sbiw	r28, 0x0f	; 15
    4c28:	60 96       	adiw	r28, 0x10	; 16
    4c2a:	8f ad       	ldd	r24, Y+63	; 0x3f
    4c2c:	60 97       	sbiw	r28, 0x10	; 16
    4c2e:	61 96       	adiw	r28, 0x11	; 17
    4c30:	9f ad       	ldd	r25, Y+63	; 0x3f
    4c32:	61 97       	sbiw	r28, 0x11	; 17
    4c34:	a9 80       	ldd	r10, Y+1	; 0x01
    4c36:	ba 80       	ldd	r11, Y+2	; 0x02
    4c38:	cb 80       	ldd	r12, Y+3	; 0x03
    4c3a:	dc 80       	ldd	r13, Y+4	; 0x04
    4c3c:	ed 80       	ldd	r14, Y+5	; 0x05
    4c3e:	fe 80       	ldd	r15, Y+6	; 0x06
    4c40:	0f 81       	ldd	r16, Y+7	; 0x07
    4c42:	18 85       	ldd	r17, Y+8	; 0x08
    4c44:	0e 94 32 34 	call	0x6864	; 0x6864 <__adddi3>
    4c48:	c6 52       	subi	r28, 0x26	; 38
    4c4a:	df 4f       	sbci	r29, 0xFF	; 255
    4c4c:	28 83       	st	Y, r18
    4c4e:	ca 5d       	subi	r28, 0xDA	; 218
    4c50:	d0 40       	sbci	r29, 0x00	; 0
    4c52:	c5 52       	subi	r28, 0x25	; 37
    4c54:	df 4f       	sbci	r29, 0xFF	; 255
    4c56:	38 83       	st	Y, r19
    4c58:	cb 5d       	subi	r28, 0xDB	; 219
    4c5a:	d0 40       	sbci	r29, 0x00	; 0
    4c5c:	c4 52       	subi	r28, 0x24	; 36
    4c5e:	df 4f       	sbci	r29, 0xFF	; 255
    4c60:	48 83       	st	Y, r20
    4c62:	cc 5d       	subi	r28, 0xDC	; 220
    4c64:	d0 40       	sbci	r29, 0x00	; 0
    4c66:	c6 51       	subi	r28, 0x16	; 22
    4c68:	df 4f       	sbci	r29, 0xFF	; 255
    4c6a:	58 83       	st	Y, r21
    4c6c:	ca 5e       	subi	r28, 0xEA	; 234
    4c6e:	d0 40       	sbci	r29, 0x00	; 0
    4c70:	c5 51       	subi	r28, 0x15	; 21
    4c72:	df 4f       	sbci	r29, 0xFF	; 255
    4c74:	68 83       	st	Y, r22
    4c76:	cb 5e       	subi	r28, 0xEB	; 235
    4c78:	d0 40       	sbci	r29, 0x00	; 0
    4c7a:	c4 51       	subi	r28, 0x14	; 20
    4c7c:	df 4f       	sbci	r29, 0xFF	; 255
    4c7e:	78 83       	st	Y, r23
    4c80:	cc 5e       	subi	r28, 0xEC	; 236
    4c82:	d0 40       	sbci	r29, 0x00	; 0
    4c84:	c3 51       	subi	r28, 0x13	; 19
    4c86:	df 4f       	sbci	r29, 0xFF	; 255
    4c88:	88 83       	st	Y, r24
    4c8a:	cd 5e       	subi	r28, 0xED	; 237
    4c8c:	d0 40       	sbci	r29, 0x00	; 0
    4c8e:	c2 51       	subi	r28, 0x12	; 18
    4c90:	df 4f       	sbci	r29, 0xFF	; 255
    4c92:	98 83       	st	Y, r25
    4c94:	ce 5e       	subi	r28, 0xEE	; 238
    4c96:	d0 40       	sbci	r29, 0x00	; 0
    4c98:	23 2d       	mov	r18, r3
    4c9a:	36 2d       	mov	r19, r6
    4c9c:	47 2d       	mov	r20, r7
    4c9e:	58 2d       	mov	r21, r8
    4ca0:	69 2d       	mov	r22, r9
    4ca2:	7b 2f       	mov	r23, r27
    4ca4:	8a 2f       	mov	r24, r26
    4ca6:	9f 2f       	mov	r25, r31
    4ca8:	03 e0       	ldi	r16, 0x03	; 3
    4caa:	0e 94 17 34 	call	0x682e	; 0x682e <__rotldi3>
    4cae:	59 01       	movw	r10, r18
    4cb0:	6a 01       	movw	r12, r20
    4cb2:	7b 01       	movw	r14, r22
    4cb4:	e8 2f       	mov	r30, r24
    4cb6:	19 2f       	mov	r17, r25
    4cb8:	23 2d       	mov	r18, r3
    4cba:	36 2d       	mov	r19, r6
    4cbc:	47 2d       	mov	r20, r7
    4cbe:	58 2d       	mov	r21, r8
    4cc0:	69 2d       	mov	r22, r9
    4cc2:	7b 2f       	mov	r23, r27
    4cc4:	8a 2f       	mov	r24, r26
    4cc6:	9f 2f       	mov	r25, r31
    4cc8:	0d e2       	ldi	r16, 0x2D	; 45
    4cca:	0e 94 17 34 	call	0x682e	; 0x682e <__rotldi3>
    4cce:	a2 26       	eor	r10, r18
    4cd0:	b3 26       	eor	r11, r19
    4cd2:	c4 26       	eor	r12, r20
    4cd4:	d5 26       	eor	r13, r21
    4cd6:	e6 26       	eor	r14, r22
    4cd8:	f7 26       	eor	r15, r23
    4cda:	e8 27       	eor	r30, r24
    4cdc:	19 27       	eor	r17, r25
    4cde:	23 2d       	mov	r18, r3
    4ce0:	36 2d       	mov	r19, r6
    4ce2:	47 2d       	mov	r20, r7
    4ce4:	58 2d       	mov	r21, r8
    4ce6:	69 2d       	mov	r22, r9
    4ce8:	7b 2f       	mov	r23, r27
    4cea:	8a 2f       	mov	r24, r26
    4cec:	9f 2f       	mov	r25, r31
    4cee:	06 e0       	ldi	r16, 0x06	; 6
    4cf0:	0e 94 fb 33 	call	0x67f6	; 0x67f6 <__lshrdi3>
    4cf4:	a2 26       	eor	r10, r18
    4cf6:	b3 26       	eor	r11, r19
    4cf8:	c4 26       	eor	r12, r20
    4cfa:	d5 26       	eor	r13, r21
    4cfc:	e6 26       	eor	r14, r22
    4cfe:	f7 26       	eor	r15, r23
    4d00:	0e 2f       	mov	r16, r30
    4d02:	08 27       	eor	r16, r24
    4d04:	19 27       	eor	r17, r25
    4d06:	c6 52       	subi	r28, 0x26	; 38
    4d08:	df 4f       	sbci	r29, 0xFF	; 255
    4d0a:	28 81       	ld	r18, Y
    4d0c:	ca 5d       	subi	r28, 0xDA	; 218
    4d0e:	d0 40       	sbci	r29, 0x00	; 0
    4d10:	c5 52       	subi	r28, 0x25	; 37
    4d12:	df 4f       	sbci	r29, 0xFF	; 255
    4d14:	38 81       	ld	r19, Y
    4d16:	cb 5d       	subi	r28, 0xDB	; 219
    4d18:	d0 40       	sbci	r29, 0x00	; 0
    4d1a:	c4 52       	subi	r28, 0x24	; 36
    4d1c:	df 4f       	sbci	r29, 0xFF	; 255
    4d1e:	48 81       	ld	r20, Y
    4d20:	cc 5d       	subi	r28, 0xDC	; 220
    4d22:	d0 40       	sbci	r29, 0x00	; 0
    4d24:	c6 51       	subi	r28, 0x16	; 22
    4d26:	df 4f       	sbci	r29, 0xFF	; 255
    4d28:	58 81       	ld	r21, Y
    4d2a:	ca 5e       	subi	r28, 0xEA	; 234
    4d2c:	d0 40       	sbci	r29, 0x00	; 0
    4d2e:	c5 51       	subi	r28, 0x15	; 21
    4d30:	df 4f       	sbci	r29, 0xFF	; 255
    4d32:	68 81       	ld	r22, Y
    4d34:	cb 5e       	subi	r28, 0xEB	; 235
    4d36:	d0 40       	sbci	r29, 0x00	; 0
    4d38:	c4 51       	subi	r28, 0x14	; 20
    4d3a:	df 4f       	sbci	r29, 0xFF	; 255
    4d3c:	78 81       	ld	r23, Y
    4d3e:	cc 5e       	subi	r28, 0xEC	; 236
    4d40:	d0 40       	sbci	r29, 0x00	; 0
    4d42:	c3 51       	subi	r28, 0x13	; 19
    4d44:	df 4f       	sbci	r29, 0xFF	; 255
    4d46:	88 81       	ld	r24, Y
    4d48:	cd 5e       	subi	r28, 0xED	; 237
    4d4a:	d0 40       	sbci	r29, 0x00	; 0
    4d4c:	c2 51       	subi	r28, 0x12	; 18
    4d4e:	df 4f       	sbci	r29, 0xFF	; 255
    4d50:	98 81       	ld	r25, Y
    4d52:	ce 5e       	subi	r28, 0xEE	; 238
    4d54:	d0 40       	sbci	r29, 0x00	; 0
    4d56:	0e 94 32 34 	call	0x6864	; 0x6864 <__adddi3>
    4d5a:	39 01       	movw	r6, r18
    4d5c:	4a 01       	movw	r8, r20
    4d5e:	b6 2f       	mov	r27, r22
    4d60:	a7 2f       	mov	r26, r23
    4d62:	f8 2f       	mov	r31, r24
    4d64:	e9 2f       	mov	r30, r25
    4d66:	ce 52       	subi	r28, 0x2E	; 46
    4d68:	df 4f       	sbci	r29, 0xFF	; 255
    4d6a:	28 81       	ld	r18, Y
    4d6c:	c2 5d       	subi	r28, 0xD2	; 210
    4d6e:	d0 40       	sbci	r29, 0x00	; 0
    4d70:	cd 52       	subi	r28, 0x2D	; 45
    4d72:	df 4f       	sbci	r29, 0xFF	; 255
    4d74:	38 81       	ld	r19, Y
    4d76:	c3 5d       	subi	r28, 0xD3	; 211
    4d78:	d0 40       	sbci	r29, 0x00	; 0
    4d7a:	cc 52       	subi	r28, 0x2C	; 44
    4d7c:	df 4f       	sbci	r29, 0xFF	; 255
    4d7e:	48 81       	ld	r20, Y
    4d80:	c4 5d       	subi	r28, 0xD4	; 212
    4d82:	d0 40       	sbci	r29, 0x00	; 0
    4d84:	cb 52       	subi	r28, 0x2B	; 43
    4d86:	df 4f       	sbci	r29, 0xFF	; 255
    4d88:	58 81       	ld	r21, Y
    4d8a:	c5 5d       	subi	r28, 0xD5	; 213
    4d8c:	d0 40       	sbci	r29, 0x00	; 0
    4d8e:	ca 52       	subi	r28, 0x2A	; 42
    4d90:	df 4f       	sbci	r29, 0xFF	; 255
    4d92:	68 81       	ld	r22, Y
    4d94:	c6 5d       	subi	r28, 0xD6	; 214
    4d96:	d0 40       	sbci	r29, 0x00	; 0
    4d98:	c9 52       	subi	r28, 0x29	; 41
    4d9a:	df 4f       	sbci	r29, 0xFF	; 255
    4d9c:	78 81       	ld	r23, Y
    4d9e:	c7 5d       	subi	r28, 0xD7	; 215
    4da0:	d0 40       	sbci	r29, 0x00	; 0
    4da2:	c8 52       	subi	r28, 0x28	; 40
    4da4:	df 4f       	sbci	r29, 0xFF	; 255
    4da6:	88 81       	ld	r24, Y
    4da8:	c8 5d       	subi	r28, 0xD8	; 216
    4daa:	d0 40       	sbci	r29, 0x00	; 0
    4dac:	c7 52       	subi	r28, 0x27	; 39
    4dae:	df 4f       	sbci	r29, 0xFF	; 255
    4db0:	98 81       	ld	r25, Y
    4db2:	c9 5d       	subi	r28, 0xD9	; 217
    4db4:	d0 40       	sbci	r29, 0x00	; 0
    4db6:	08 e3       	ldi	r16, 0x38	; 56
    4db8:	0e 94 17 34 	call	0x682e	; 0x682e <__rotldi3>
    4dbc:	59 01       	movw	r10, r18
    4dbe:	6a 01       	movw	r12, r20
    4dc0:	7b 01       	movw	r14, r22
    4dc2:	38 2e       	mov	r3, r24
    4dc4:	19 2f       	mov	r17, r25
    4dc6:	ce 52       	subi	r28, 0x2E	; 46
    4dc8:	df 4f       	sbci	r29, 0xFF	; 255
    4dca:	28 81       	ld	r18, Y
    4dcc:	c2 5d       	subi	r28, 0xD2	; 210
    4dce:	d0 40       	sbci	r29, 0x00	; 0
    4dd0:	cd 52       	subi	r28, 0x2D	; 45
    4dd2:	df 4f       	sbci	r29, 0xFF	; 255
    4dd4:	38 81       	ld	r19, Y
    4dd6:	c3 5d       	subi	r28, 0xD3	; 211
    4dd8:	d0 40       	sbci	r29, 0x00	; 0
    4dda:	cc 52       	subi	r28, 0x2C	; 44
    4ddc:	df 4f       	sbci	r29, 0xFF	; 255
    4dde:	48 81       	ld	r20, Y
    4de0:	c4 5d       	subi	r28, 0xD4	; 212
    4de2:	d0 40       	sbci	r29, 0x00	; 0
    4de4:	cb 52       	subi	r28, 0x2B	; 43
    4de6:	df 4f       	sbci	r29, 0xFF	; 255
    4de8:	58 81       	ld	r21, Y
    4dea:	c5 5d       	subi	r28, 0xD5	; 213
    4dec:	d0 40       	sbci	r29, 0x00	; 0
    4dee:	ca 52       	subi	r28, 0x2A	; 42
    4df0:	df 4f       	sbci	r29, 0xFF	; 255
    4df2:	68 81       	ld	r22, Y
    4df4:	c6 5d       	subi	r28, 0xD6	; 214
    4df6:	d0 40       	sbci	r29, 0x00	; 0
    4df8:	c9 52       	subi	r28, 0x29	; 41
    4dfa:	df 4f       	sbci	r29, 0xFF	; 255
    4dfc:	78 81       	ld	r23, Y
    4dfe:	c7 5d       	subi	r28, 0xD7	; 215
    4e00:	d0 40       	sbci	r29, 0x00	; 0
    4e02:	c8 52       	subi	r28, 0x28	; 40
    4e04:	df 4f       	sbci	r29, 0xFF	; 255
    4e06:	88 81       	ld	r24, Y
    4e08:	c8 5d       	subi	r28, 0xD8	; 216
    4e0a:	d0 40       	sbci	r29, 0x00	; 0
    4e0c:	c7 52       	subi	r28, 0x27	; 39
    4e0e:	df 4f       	sbci	r29, 0xFF	; 255
    4e10:	98 81       	ld	r25, Y
    4e12:	c9 5d       	subi	r28, 0xD9	; 217
    4e14:	d0 40       	sbci	r29, 0x00	; 0
    4e16:	0f e3       	ldi	r16, 0x3F	; 63
    4e18:	0e 94 17 34 	call	0x682e	; 0x682e <__rotldi3>
    4e1c:	a2 26       	eor	r10, r18
    4e1e:	b3 26       	eor	r11, r19
    4e20:	c4 26       	eor	r12, r20
    4e22:	d5 26       	eor	r13, r21
    4e24:	e6 26       	eor	r14, r22
    4e26:	f7 26       	eor	r15, r23
    4e28:	38 26       	eor	r3, r24
    4e2a:	19 27       	eor	r17, r25
    4e2c:	ce 52       	subi	r28, 0x2E	; 46
    4e2e:	df 4f       	sbci	r29, 0xFF	; 255
    4e30:	28 81       	ld	r18, Y
    4e32:	c2 5d       	subi	r28, 0xD2	; 210
    4e34:	d0 40       	sbci	r29, 0x00	; 0
    4e36:	cd 52       	subi	r28, 0x2D	; 45
    4e38:	df 4f       	sbci	r29, 0xFF	; 255
    4e3a:	38 81       	ld	r19, Y
    4e3c:	c3 5d       	subi	r28, 0xD3	; 211
    4e3e:	d0 40       	sbci	r29, 0x00	; 0
    4e40:	cc 52       	subi	r28, 0x2C	; 44
    4e42:	df 4f       	sbci	r29, 0xFF	; 255
    4e44:	48 81       	ld	r20, Y
    4e46:	c4 5d       	subi	r28, 0xD4	; 212
    4e48:	d0 40       	sbci	r29, 0x00	; 0
    4e4a:	cb 52       	subi	r28, 0x2B	; 43
    4e4c:	df 4f       	sbci	r29, 0xFF	; 255
    4e4e:	58 81       	ld	r21, Y
    4e50:	c5 5d       	subi	r28, 0xD5	; 213
    4e52:	d0 40       	sbci	r29, 0x00	; 0
    4e54:	ca 52       	subi	r28, 0x2A	; 42
    4e56:	df 4f       	sbci	r29, 0xFF	; 255
    4e58:	68 81       	ld	r22, Y
    4e5a:	c6 5d       	subi	r28, 0xD6	; 214
    4e5c:	d0 40       	sbci	r29, 0x00	; 0
    4e5e:	c9 52       	subi	r28, 0x29	; 41
    4e60:	df 4f       	sbci	r29, 0xFF	; 255
    4e62:	78 81       	ld	r23, Y
    4e64:	c7 5d       	subi	r28, 0xD7	; 215
    4e66:	d0 40       	sbci	r29, 0x00	; 0
    4e68:	c8 52       	subi	r28, 0x28	; 40
    4e6a:	df 4f       	sbci	r29, 0xFF	; 255
    4e6c:	88 81       	ld	r24, Y
    4e6e:	c8 5d       	subi	r28, 0xD8	; 216
    4e70:	d0 40       	sbci	r29, 0x00	; 0
    4e72:	c7 52       	subi	r28, 0x27	; 39
    4e74:	df 4f       	sbci	r29, 0xFF	; 255
    4e76:	98 81       	ld	r25, Y
    4e78:	c9 5d       	subi	r28, 0xD9	; 217
    4e7a:	d0 40       	sbci	r29, 0x00	; 0
    4e7c:	07 e0       	ldi	r16, 0x07	; 7
    4e7e:	0e 94 fb 33 	call	0x67f6	; 0x67f6 <__lshrdi3>
    4e82:	a2 26       	eor	r10, r18
    4e84:	b3 26       	eor	r11, r19
    4e86:	c4 26       	eor	r12, r20
    4e88:	d5 26       	eor	r13, r21
    4e8a:	e6 26       	eor	r14, r22
    4e8c:	f7 26       	eor	r15, r23
    4e8e:	03 2d       	mov	r16, r3
    4e90:	08 27       	eor	r16, r24
    4e92:	19 27       	eor	r17, r25
    4e94:	93 01       	movw	r18, r6
    4e96:	a4 01       	movw	r20, r8
    4e98:	6b 2f       	mov	r22, r27
    4e9a:	7a 2f       	mov	r23, r26
    4e9c:	8f 2f       	mov	r24, r31
    4e9e:	9e 2f       	mov	r25, r30
    4ea0:	0e 94 32 34 	call	0x6864	; 0x6864 <__adddi3>
    4ea4:	ce 52       	subi	r28, 0x2E	; 46
    4ea6:	df 4f       	sbci	r29, 0xFF	; 255
    4ea8:	28 83       	st	Y, r18
    4eaa:	c2 5d       	subi	r28, 0xD2	; 210
    4eac:	d0 40       	sbci	r29, 0x00	; 0
    4eae:	cd 52       	subi	r28, 0x2D	; 45
    4eb0:	df 4f       	sbci	r29, 0xFF	; 255
    4eb2:	38 83       	st	Y, r19
    4eb4:	c3 5d       	subi	r28, 0xD3	; 211
    4eb6:	d0 40       	sbci	r29, 0x00	; 0
    4eb8:	cc 52       	subi	r28, 0x2C	; 44
    4eba:	df 4f       	sbci	r29, 0xFF	; 255
    4ebc:	48 83       	st	Y, r20
    4ebe:	c4 5d       	subi	r28, 0xD4	; 212
    4ec0:	d0 40       	sbci	r29, 0x00	; 0
    4ec2:	cb 52       	subi	r28, 0x2B	; 43
    4ec4:	df 4f       	sbci	r29, 0xFF	; 255
    4ec6:	58 83       	st	Y, r21
    4ec8:	c5 5d       	subi	r28, 0xD5	; 213
    4eca:	d0 40       	sbci	r29, 0x00	; 0
    4ecc:	ca 52       	subi	r28, 0x2A	; 42
    4ece:	df 4f       	sbci	r29, 0xFF	; 255
    4ed0:	68 83       	st	Y, r22
    4ed2:	c6 5d       	subi	r28, 0xD6	; 214
    4ed4:	d0 40       	sbci	r29, 0x00	; 0
    4ed6:	c9 52       	subi	r28, 0x29	; 41
    4ed8:	df 4f       	sbci	r29, 0xFF	; 255
    4eda:	78 83       	st	Y, r23
    4edc:	c7 5d       	subi	r28, 0xD7	; 215
    4ede:	d0 40       	sbci	r29, 0x00	; 0
    4ee0:	c8 52       	subi	r28, 0x28	; 40
    4ee2:	df 4f       	sbci	r29, 0xFF	; 255
    4ee4:	88 83       	st	Y, r24
    4ee6:	c8 5d       	subi	r28, 0xD8	; 216
    4ee8:	d0 40       	sbci	r29, 0x00	; 0
    4eea:	c7 52       	subi	r28, 0x27	; 39
    4eec:	df 4f       	sbci	r29, 0xFF	; 255
    4eee:	98 83       	st	Y, r25
    4ef0:	c9 5d       	subi	r28, 0xD9	; 217
    4ef2:	d0 40       	sbci	r29, 0x00	; 0
			memmove(&(w[0]), &(w[1]), 15*8);
    4ef4:	48 e7       	ldi	r20, 0x78	; 120
    4ef6:	50 e0       	ldi	r21, 0x00	; 0
    4ef8:	be 01       	movw	r22, r28
    4efa:	67 5f       	subi	r22, 0xF7	; 247
    4efc:	7f 4f       	sbci	r23, 0xFF	; 255
    4efe:	ce 01       	movw	r24, r28
    4f00:	01 96       	adiw	r24, 0x01	; 1
    4f02:	0e 94 a6 34 	call	0x694c	; 0x694c <memmove>
			w[15] = wx;
    4f06:	ce 52       	subi	r28, 0x2E	; 46
    4f08:	df 4f       	sbci	r29, 0xFF	; 255
    4f0a:	f8 81       	ld	r31, Y
    4f0c:	c2 5d       	subi	r28, 0xD2	; 210
    4f0e:	d0 40       	sbci	r29, 0x00	; 0
    4f10:	ea 96       	adiw	r28, 0x3a	; 58
    4f12:	ff af       	std	Y+63, r31	; 0x3f
    4f14:	ea 97       	sbiw	r28, 0x3a	; 58
    4f16:	cd 52       	subi	r28, 0x2D	; 45
    4f18:	df 4f       	sbci	r29, 0xFF	; 255
    4f1a:	18 81       	ld	r17, Y
    4f1c:	c3 5d       	subi	r28, 0xD3	; 211
    4f1e:	d0 40       	sbci	r29, 0x00	; 0
    4f20:	eb 96       	adiw	r28, 0x3b	; 59
    4f22:	1f af       	std	Y+63, r17	; 0x3f
    4f24:	eb 97       	sbiw	r28, 0x3b	; 59
    4f26:	cc 52       	subi	r28, 0x2C	; 44
    4f28:	df 4f       	sbci	r29, 0xFF	; 255
    4f2a:	88 81       	ld	r24, Y
    4f2c:	c4 5d       	subi	r28, 0xD4	; 212
    4f2e:	d0 40       	sbci	r29, 0x00	; 0
    4f30:	ec 96       	adiw	r28, 0x3c	; 60
    4f32:	8f af       	std	Y+63, r24	; 0x3f
    4f34:	ec 97       	sbiw	r28, 0x3c	; 60
    4f36:	cb 52       	subi	r28, 0x2B	; 43
    4f38:	df 4f       	sbci	r29, 0xFF	; 255
    4f3a:	98 81       	ld	r25, Y
    4f3c:	c5 5d       	subi	r28, 0xD5	; 213
    4f3e:	d0 40       	sbci	r29, 0x00	; 0
    4f40:	ed 96       	adiw	r28, 0x3d	; 61
    4f42:	9f af       	std	Y+63, r25	; 0x3f
    4f44:	ed 97       	sbiw	r28, 0x3d	; 61
    4f46:	ca 52       	subi	r28, 0x2A	; 42
    4f48:	df 4f       	sbci	r29, 0xFF	; 255
    4f4a:	a8 81       	ld	r26, Y
    4f4c:	c6 5d       	subi	r28, 0xD6	; 214
    4f4e:	d0 40       	sbci	r29, 0x00	; 0
    4f50:	ee 96       	adiw	r28, 0x3e	; 62
    4f52:	af af       	std	Y+63, r26	; 0x3f
    4f54:	ee 97       	sbiw	r28, 0x3e	; 62
    4f56:	c9 52       	subi	r28, 0x29	; 41
    4f58:	df 4f       	sbci	r29, 0xFF	; 255
    4f5a:	b8 81       	ld	r27, Y
    4f5c:	c7 5d       	subi	r28, 0xD7	; 215
    4f5e:	d0 40       	sbci	r29, 0x00	; 0
    4f60:	ef 96       	adiw	r28, 0x3f	; 63
    4f62:	bf af       	std	Y+63, r27	; 0x3f
    4f64:	ef 97       	sbiw	r28, 0x3f	; 63
    4f66:	c8 52       	subi	r28, 0x28	; 40
    4f68:	df 4f       	sbci	r29, 0xFF	; 255
    4f6a:	e8 81       	ld	r30, Y
    4f6c:	c8 5d       	subi	r28, 0xD8	; 216
    4f6e:	d0 40       	sbci	r29, 0x00	; 0
    4f70:	c1 58       	subi	r28, 0x81	; 129
    4f72:	df 4f       	sbci	r29, 0xFF	; 255
    4f74:	e8 83       	st	Y, r30
    4f76:	cf 57       	subi	r28, 0x7F	; 127
    4f78:	d0 40       	sbci	r29, 0x00	; 0
    4f7a:	c7 52       	subi	r28, 0x27	; 39
    4f7c:	df 4f       	sbci	r29, 0xFF	; 255
    4f7e:	f8 81       	ld	r31, Y
    4f80:	c9 5d       	subi	r28, 0xD9	; 217
    4f82:	d0 40       	sbci	r29, 0x00	; 0
    4f84:	c0 58       	subi	r28, 0x80	; 128
    4f86:	df 4f       	sbci	r29, 0xFF	; 255
    4f88:	f8 83       	st	Y, r31
    4f8a:	c0 58       	subi	r28, 0x80	; 128
    4f8c:	d0 40       	sbci	r29, 0x00	; 0
		}
		t1 = a[7] + SIGMA_1(a[4]) + CH(a[4], a[5], a[6]) + pgm_read_uint64_t_P(k++) + wx;
    4f8e:	d2 01       	movw	r26, r4
    4f90:	d8 96       	adiw	r26, 0x38	; 56
    4f92:	2c 91       	ld	r18, X
    4f94:	d8 97       	sbiw	r26, 0x38	; 56
    4f96:	d9 96       	adiw	r26, 0x39	; 57
    4f98:	3c 91       	ld	r19, X
    4f9a:	d9 97       	sbiw	r26, 0x39	; 57
    4f9c:	da 96       	adiw	r26, 0x3a	; 58
    4f9e:	4c 91       	ld	r20, X
    4fa0:	da 97       	sbiw	r26, 0x3a	; 58
    4fa2:	db 96       	adiw	r26, 0x3b	; 59
    4fa4:	5c 91       	ld	r21, X
    4fa6:	db 97       	sbiw	r26, 0x3b	; 59
    4fa8:	dc 96       	adiw	r26, 0x3c	; 60
    4faa:	6c 91       	ld	r22, X
    4fac:	dc 97       	sbiw	r26, 0x3c	; 60
    4fae:	dd 96       	adiw	r26, 0x3d	; 61
    4fb0:	7c 91       	ld	r23, X
    4fb2:	dd 97       	sbiw	r26, 0x3d	; 61
    4fb4:	de 96       	adiw	r26, 0x3e	; 62
    4fb6:	8c 91       	ld	r24, X
    4fb8:	de 97       	sbiw	r26, 0x3e	; 62
    4fba:	df 96       	adiw	r26, 0x3f	; 63
    4fbc:	9c 91       	ld	r25, X
    4fbe:	c7 53       	subi	r28, 0x37	; 55
    4fc0:	df 4f       	sbci	r29, 0xFF	; 255
    4fc2:	e8 80       	ld	r14, Y
    4fc4:	c9 5c       	subi	r28, 0xC9	; 201
    4fc6:	d0 40       	sbci	r29, 0x00	; 0
    4fc8:	e0 94       	com	r14
    4fca:	c5 53       	subi	r28, 0x35	; 53
    4fcc:	df 4f       	sbci	r29, 0xFF	; 255
    4fce:	f8 80       	ld	r15, Y
    4fd0:	cb 5c       	subi	r28, 0xCB	; 203
    4fd2:	d0 40       	sbci	r29, 0x00	; 0
    4fd4:	f0 94       	com	r15
    4fd6:	c3 53       	subi	r28, 0x33	; 51
    4fd8:	df 4f       	sbci	r29, 0xFF	; 255
    4fda:	08 81       	ld	r16, Y
    4fdc:	cd 5c       	subi	r28, 0xCD	; 205
    4fde:	d0 40       	sbci	r29, 0x00	; 0
    4fe0:	00 95       	com	r16
    4fe2:	c2 53       	subi	r28, 0x32	; 50
    4fe4:	df 4f       	sbci	r29, 0xFF	; 255
    4fe6:	18 81       	ld	r17, Y
    4fe8:	ce 5c       	subi	r28, 0xCE	; 206
    4fea:	d0 40       	sbci	r29, 0x00	; 0
    4fec:	10 95       	com	r17
    4fee:	c1 53       	subi	r28, 0x31	; 49
    4ff0:	df 4f       	sbci	r29, 0xFF	; 255
    4ff2:	b8 81       	ld	r27, Y
    4ff4:	cf 5c       	subi	r28, 0xCF	; 207
    4ff6:	d0 40       	sbci	r29, 0x00	; 0
    4ff8:	b0 95       	com	r27
    4ffa:	a2 2d       	mov	r26, r2
    4ffc:	a0 95       	com	r26
    4ffe:	c0 53       	subi	r28, 0x30	; 48
    5000:	df 4f       	sbci	r29, 0xFF	; 255
    5002:	d8 80       	ld	r13, Y
    5004:	c0 5d       	subi	r28, 0xD0	; 208
    5006:	d0 40       	sbci	r29, 0x00	; 0
    5008:	d0 94       	com	r13
    500a:	cf 52       	subi	r28, 0x2F	; 47
    500c:	df 4f       	sbci	r29, 0xFF	; 255
    500e:	b8 80       	ld	r11, Y
    5010:	c1 5d       	subi	r28, 0xD1	; 209
    5012:	d0 40       	sbci	r29, 0x00	; 0
    5014:	b0 94       	com	r11
    5016:	f2 01       	movw	r30, r4
    5018:	60 a8       	ldd	r6, Z+48	; 0x30
    501a:	6e 20       	and	r6, r14
    501c:	81 a8       	ldd	r8, Z+49	; 0x31
    501e:	8f 20       	and	r8, r15
    5020:	a2 a8       	ldd	r10, Z+50	; 0x32
    5022:	a0 22       	and	r10, r16
    5024:	c3 a8       	ldd	r12, Z+51	; 0x33
    5026:	c1 22       	and	r12, r17
    5028:	e4 a8       	ldd	r14, Z+52	; 0x34
    502a:	eb 22       	and	r14, r27
    502c:	05 a9       	ldd	r16, Z+53	; 0x35
    502e:	0a 23       	and	r16, r26
    5030:	b6 a9       	ldd	r27, Z+54	; 0x36
    5032:	3b 2e       	mov	r3, r27
    5034:	3d 20       	and	r3, r13
    5036:	f7 a9       	ldd	r31, Z+55	; 0x37
    5038:	fb 21       	and	r31, r11
    503a:	c2 51       	subi	r28, 0x12	; 18
    503c:	df 4f       	sbci	r29, 0xFF	; 255
    503e:	f8 83       	st	Y, r31
    5040:	ce 5e       	subi	r28, 0xEE	; 238
    5042:	d0 40       	sbci	r29, 0x00	; 0
    5044:	d2 01       	movw	r26, r4
    5046:	98 96       	adiw	r26, 0x28	; 40
    5048:	7c 90       	ld	r7, X
    504a:	c7 53       	subi	r28, 0x37	; 55
    504c:	df 4f       	sbci	r29, 0xFF	; 255
    504e:	b8 81       	ld	r27, Y
    5050:	c9 5c       	subi	r28, 0xC9	; 201
    5052:	d0 40       	sbci	r29, 0x00	; 0
    5054:	7b 22       	and	r7, r27
    5056:	f2 01       	movw	r30, r4
    5058:	91 a4       	ldd	r9, Z+41	; 0x29
    505a:	c5 53       	subi	r28, 0x35	; 53
    505c:	df 4f       	sbci	r29, 0xFF	; 255
    505e:	f8 81       	ld	r31, Y
    5060:	cb 5c       	subi	r28, 0xCB	; 203
    5062:	d0 40       	sbci	r29, 0x00	; 0
    5064:	9f 22       	and	r9, r31
    5066:	d2 01       	movw	r26, r4
    5068:	9a 96       	adiw	r26, 0x2a	; 42
    506a:	bc 90       	ld	r11, X
    506c:	c3 53       	subi	r28, 0x33	; 51
    506e:	df 4f       	sbci	r29, 0xFF	; 255
    5070:	b8 81       	ld	r27, Y
    5072:	cd 5c       	subi	r28, 0xCD	; 205
    5074:	d0 40       	sbci	r29, 0x00	; 0
    5076:	bb 22       	and	r11, r27
    5078:	f2 01       	movw	r30, r4
    507a:	d3 a4       	ldd	r13, Z+43	; 0x2b
    507c:	c2 53       	subi	r28, 0x32	; 50
    507e:	df 4f       	sbci	r29, 0xFF	; 255
    5080:	f8 81       	ld	r31, Y
    5082:	ce 5c       	subi	r28, 0xCE	; 206
    5084:	d0 40       	sbci	r29, 0x00	; 0
    5086:	df 22       	and	r13, r31
    5088:	d2 01       	movw	r26, r4
    508a:	9c 96       	adiw	r26, 0x2c	; 44
    508c:	fc 90       	ld	r15, X
    508e:	c1 53       	subi	r28, 0x31	; 49
    5090:	df 4f       	sbci	r29, 0xFF	; 255
    5092:	b8 81       	ld	r27, Y
    5094:	cf 5c       	subi	r28, 0xCF	; 207
    5096:	d0 40       	sbci	r29, 0x00	; 0
    5098:	fb 22       	and	r15, r27
    509a:	f2 01       	movw	r30, r4
    509c:	15 a5       	ldd	r17, Z+45	; 0x2d
    509e:	12 21       	and	r17, r2
    50a0:	a6 a5       	ldd	r26, Z+46	; 0x2e
    50a2:	c0 53       	subi	r28, 0x30	; 48
    50a4:	df 4f       	sbci	r29, 0xFF	; 255
    50a6:	f8 81       	ld	r31, Y
    50a8:	c0 5d       	subi	r28, 0xD0	; 208
    50aa:	d0 40       	sbci	r29, 0x00	; 0
    50ac:	fa 23       	and	r31, r26
    50ae:	d2 01       	movw	r26, r4
    50b0:	9f 96       	adiw	r26, 0x2f	; 47
    50b2:	ec 91       	ld	r30, X
    50b4:	cf 52       	subi	r28, 0x2F	; 47
    50b6:	df 4f       	sbci	r29, 0xFF	; 255
    50b8:	b8 81       	ld	r27, Y
    50ba:	c1 5d       	subi	r28, 0xD1	; 209
    50bc:	d0 40       	sbci	r29, 0x00	; 0
    50be:	eb 23       	and	r30, r27
    50c0:	67 24       	eor	r6, r7
    50c2:	c6 52       	subi	r28, 0x26	; 38
    50c4:	df 4f       	sbci	r29, 0xFF	; 255
    50c6:	68 82       	st	Y, r6
    50c8:	ca 5d       	subi	r28, 0xDA	; 218
    50ca:	d0 40       	sbci	r29, 0x00	; 0
    50cc:	89 24       	eor	r8, r9
    50ce:	c5 52       	subi	r28, 0x25	; 37
    50d0:	df 4f       	sbci	r29, 0xFF	; 255
    50d2:	88 82       	st	Y, r8
    50d4:	cb 5d       	subi	r28, 0xDB	; 219
    50d6:	d0 40       	sbci	r29, 0x00	; 0
    50d8:	ab 24       	eor	r10, r11
    50da:	c4 52       	subi	r28, 0x24	; 36
    50dc:	df 4f       	sbci	r29, 0xFF	; 255
    50de:	a8 82       	st	Y, r10
    50e0:	cc 5d       	subi	r28, 0xDC	; 220
    50e2:	d0 40       	sbci	r29, 0x00	; 0
    50e4:	cd 24       	eor	r12, r13
    50e6:	c6 51       	subi	r28, 0x16	; 22
    50e8:	df 4f       	sbci	r29, 0xFF	; 255
    50ea:	c8 82       	st	Y, r12
    50ec:	ca 5e       	subi	r28, 0xEA	; 234
    50ee:	d0 40       	sbci	r29, 0x00	; 0
    50f0:	ef 24       	eor	r14, r15
    50f2:	c5 51       	subi	r28, 0x15	; 21
    50f4:	df 4f       	sbci	r29, 0xFF	; 255
    50f6:	e8 82       	st	Y, r14
    50f8:	cb 5e       	subi	r28, 0xEB	; 235
    50fa:	d0 40       	sbci	r29, 0x00	; 0
    50fc:	01 27       	eor	r16, r17
    50fe:	c4 51       	subi	r28, 0x14	; 20
    5100:	df 4f       	sbci	r29, 0xFF	; 255
    5102:	08 83       	st	Y, r16
    5104:	cc 5e       	subi	r28, 0xEC	; 236
    5106:	d0 40       	sbci	r29, 0x00	; 0
    5108:	f3 25       	eor	r31, r3
    510a:	c3 51       	subi	r28, 0x13	; 19
    510c:	df 4f       	sbci	r29, 0xFF	; 255
    510e:	f8 83       	st	Y, r31
    5110:	cd 5e       	subi	r28, 0xED	; 237
    5112:	d0 40       	sbci	r29, 0x00	; 0
    5114:	c2 51       	subi	r28, 0x12	; 18
    5116:	df 4f       	sbci	r29, 0xFF	; 255
    5118:	a8 81       	ld	r26, Y
    511a:	ce 5e       	subi	r28, 0xEE	; 238
    511c:	d0 40       	sbci	r29, 0x00	; 0
    511e:	ae 27       	eor	r26, r30
    5120:	c2 51       	subi	r28, 0x12	; 18
    5122:	df 4f       	sbci	r29, 0xFF	; 255
    5124:	a8 83       	st	Y, r26
    5126:	ce 5e       	subi	r28, 0xEE	; 238
    5128:	d0 40       	sbci	r29, 0x00	; 0
uint64_t pgm_read_uint64_t_P(const uint64_t * p){
	union {
		uint64_t v64;
		uint32_t v32[2];
	} ret;
	ret.v32[0] = pgm_read_dword(p);
    512a:	c8 51       	subi	r28, 0x18	; 24
    512c:	df 4f       	sbci	r29, 0xFF	; 255
    512e:	e8 81       	ld	r30, Y
    5130:	f9 81       	ldd	r31, Y+1	; 0x01
    5132:	c8 5e       	subi	r28, 0xE8	; 232
    5134:	d0 40       	sbci	r29, 0x00	; 0
    5136:	c5 90       	lpm	r12, Z+
    5138:	d5 90       	lpm	r13, Z+
    513a:	e5 90       	lpm	r14, Z+
    513c:	f4 90       	lpm	r15, Z
    513e:	ac 2c       	mov	r10, r12
    5140:	cf 53       	subi	r28, 0x3F	; 63
    5142:	df 4f       	sbci	r29, 0xFF	; 255
    5144:	c8 82       	st	Y, r12
    5146:	d9 82       	std	Y+1, r13	; 0x01
    5148:	ea 82       	std	Y+2, r14	; 0x02
    514a:	fb 82       	std	Y+3, r15	; 0x03
    514c:	c1 5c       	subi	r28, 0xC1	; 193
    514e:	d0 40       	sbci	r29, 0x00	; 0
	ret.v32[1] = pgm_read_dword((uint8_t*)p + 4);
    5150:	c8 51       	subi	r28, 0x18	; 24
    5152:	df 4f       	sbci	r29, 0xFF	; 255
    5154:	e8 81       	ld	r30, Y
    5156:	f9 81       	ldd	r31, Y+1	; 0x01
    5158:	c8 5e       	subi	r28, 0xE8	; 232
    515a:	d0 40       	sbci	r29, 0x00	; 0
    515c:	34 96       	adiw	r30, 0x04	; 4
    515e:	65 90       	lpm	r6, Z+
    5160:	75 90       	lpm	r7, Z+
    5162:	85 90       	lpm	r8, Z+
    5164:	94 90       	lpm	r9, Z
    5166:	e6 2c       	mov	r14, r6
    5168:	cb 53       	subi	r28, 0x3B	; 59
    516a:	df 4f       	sbci	r29, 0xFF	; 255
    516c:	68 82       	st	Y, r6
    516e:	79 82       	std	Y+1, r7	; 0x01
    5170:	8a 82       	std	Y+2, r8	; 0x02
    5172:	9b 82       	std	Y+3, r9	; 0x03
    5174:	c5 5c       	subi	r28, 0xC5	; 197
    5176:	d0 40       	sbci	r29, 0x00	; 0
    5178:	ce 53       	subi	r28, 0x3E	; 62
    517a:	df 4f       	sbci	r29, 0xFF	; 255
    517c:	b8 80       	ld	r11, Y
    517e:	c2 5c       	subi	r28, 0xC2	; 194
    5180:	d0 40       	sbci	r29, 0x00	; 0
    5182:	cd 53       	subi	r28, 0x3D	; 61
    5184:	df 4f       	sbci	r29, 0xFF	; 255
    5186:	c8 80       	ld	r12, Y
    5188:	c3 5c       	subi	r28, 0xC3	; 195
    518a:	d0 40       	sbci	r29, 0x00	; 0
    518c:	cc 53       	subi	r28, 0x3C	; 60
    518e:	df 4f       	sbci	r29, 0xFF	; 255
    5190:	d8 80       	ld	r13, Y
    5192:	c4 5c       	subi	r28, 0xC4	; 196
    5194:	d0 40       	sbci	r29, 0x00	; 0
    5196:	ca 53       	subi	r28, 0x3A	; 58
    5198:	df 4f       	sbci	r29, 0xFF	; 255
    519a:	f8 80       	ld	r15, Y
    519c:	c6 5c       	subi	r28, 0xC6	; 198
    519e:	d0 40       	sbci	r29, 0x00	; 0
    51a0:	c9 53       	subi	r28, 0x39	; 57
    51a2:	df 4f       	sbci	r29, 0xFF	; 255
    51a4:	08 81       	ld	r16, Y
    51a6:	c7 5c       	subi	r28, 0xC7	; 199
    51a8:	d0 40       	sbci	r29, 0x00	; 0
    51aa:	c8 53       	subi	r28, 0x38	; 56
    51ac:	df 4f       	sbci	r29, 0xFF	; 255
    51ae:	18 81       	ld	r17, Y
    51b0:	c8 5c       	subi	r28, 0xC8	; 200
    51b2:	d0 40       	sbci	r29, 0x00	; 0
    51b4:	0e 94 32 34 	call	0x6864	; 0x6864 <__adddi3>
    51b8:	39 01       	movw	r6, r18
    51ba:	4a 01       	movw	r8, r20
    51bc:	b6 2f       	mov	r27, r22
    51be:	a7 2f       	mov	r26, r23
    51c0:	f8 2f       	mov	r31, r24
    51c2:	e9 2f       	mov	r30, r25
    51c4:	c7 53       	subi	r28, 0x37	; 55
    51c6:	df 4f       	sbci	r29, 0xFF	; 255
    51c8:	28 81       	ld	r18, Y
    51ca:	c9 5c       	subi	r28, 0xC9	; 201
    51cc:	d0 40       	sbci	r29, 0x00	; 0
    51ce:	c5 53       	subi	r28, 0x35	; 53
    51d0:	df 4f       	sbci	r29, 0xFF	; 255
    51d2:	38 81       	ld	r19, Y
    51d4:	cb 5c       	subi	r28, 0xCB	; 203
    51d6:	d0 40       	sbci	r29, 0x00	; 0
    51d8:	c3 53       	subi	r28, 0x33	; 51
    51da:	df 4f       	sbci	r29, 0xFF	; 255
    51dc:	48 81       	ld	r20, Y
    51de:	cd 5c       	subi	r28, 0xCD	; 205
    51e0:	d0 40       	sbci	r29, 0x00	; 0
    51e2:	c2 53       	subi	r28, 0x32	; 50
    51e4:	df 4f       	sbci	r29, 0xFF	; 255
    51e6:	58 81       	ld	r21, Y
    51e8:	ce 5c       	subi	r28, 0xCE	; 206
    51ea:	d0 40       	sbci	r29, 0x00	; 0
    51ec:	c1 53       	subi	r28, 0x31	; 49
    51ee:	df 4f       	sbci	r29, 0xFF	; 255
    51f0:	68 81       	ld	r22, Y
    51f2:	cf 5c       	subi	r28, 0xCF	; 207
    51f4:	d0 40       	sbci	r29, 0x00	; 0
    51f6:	72 2d       	mov	r23, r2
    51f8:	c0 53       	subi	r28, 0x30	; 48
    51fa:	df 4f       	sbci	r29, 0xFF	; 255
    51fc:	88 81       	ld	r24, Y
    51fe:	c0 5d       	subi	r28, 0xD0	; 208
    5200:	d0 40       	sbci	r29, 0x00	; 0
    5202:	cf 52       	subi	r28, 0x2F	; 47
    5204:	df 4f       	sbci	r29, 0xFF	; 255
    5206:	98 81       	ld	r25, Y
    5208:	c1 5d       	subi	r28, 0xD1	; 209
    520a:	d0 40       	sbci	r29, 0x00	; 0
    520c:	0e e2       	ldi	r16, 0x2E	; 46
    520e:	0e 94 17 34 	call	0x682e	; 0x682e <__rotldi3>
    5212:	59 01       	movw	r10, r18
    5214:	6a 01       	movw	r12, r20
    5216:	7b 01       	movw	r14, r22
    5218:	38 2e       	mov	r3, r24
    521a:	19 2f       	mov	r17, r25
    521c:	c7 53       	subi	r28, 0x37	; 55
    521e:	df 4f       	sbci	r29, 0xFF	; 255
    5220:	28 81       	ld	r18, Y
    5222:	c9 5c       	subi	r28, 0xC9	; 201
    5224:	d0 40       	sbci	r29, 0x00	; 0
    5226:	c5 53       	subi	r28, 0x35	; 53
    5228:	df 4f       	sbci	r29, 0xFF	; 255
    522a:	38 81       	ld	r19, Y
    522c:	cb 5c       	subi	r28, 0xCB	; 203
    522e:	d0 40       	sbci	r29, 0x00	; 0
    5230:	c3 53       	subi	r28, 0x33	; 51
    5232:	df 4f       	sbci	r29, 0xFF	; 255
    5234:	48 81       	ld	r20, Y
    5236:	cd 5c       	subi	r28, 0xCD	; 205
    5238:	d0 40       	sbci	r29, 0x00	; 0
    523a:	c2 53       	subi	r28, 0x32	; 50
    523c:	df 4f       	sbci	r29, 0xFF	; 255
    523e:	58 81       	ld	r21, Y
    5240:	ce 5c       	subi	r28, 0xCE	; 206
    5242:	d0 40       	sbci	r29, 0x00	; 0
    5244:	c1 53       	subi	r28, 0x31	; 49
    5246:	df 4f       	sbci	r29, 0xFF	; 255
    5248:	68 81       	ld	r22, Y
    524a:	cf 5c       	subi	r28, 0xCF	; 207
    524c:	d0 40       	sbci	r29, 0x00	; 0
    524e:	72 2d       	mov	r23, r2
    5250:	c0 53       	subi	r28, 0x30	; 48
    5252:	df 4f       	sbci	r29, 0xFF	; 255
    5254:	88 81       	ld	r24, Y
    5256:	c0 5d       	subi	r28, 0xD0	; 208
    5258:	d0 40       	sbci	r29, 0x00	; 0
    525a:	cf 52       	subi	r28, 0x2F	; 47
    525c:	df 4f       	sbci	r29, 0xFF	; 255
    525e:	98 81       	ld	r25, Y
    5260:	c1 5d       	subi	r28, 0xD1	; 209
    5262:	d0 40       	sbci	r29, 0x00	; 0
    5264:	02 e3       	ldi	r16, 0x32	; 50
    5266:	0e 94 17 34 	call	0x682e	; 0x682e <__rotldi3>
    526a:	a2 26       	eor	r10, r18
    526c:	b3 26       	eor	r11, r19
    526e:	c4 26       	eor	r12, r20
    5270:	d5 26       	eor	r13, r21
    5272:	e6 26       	eor	r14, r22
    5274:	f7 26       	eor	r15, r23
    5276:	38 26       	eor	r3, r24
    5278:	19 27       	eor	r17, r25
    527a:	c7 53       	subi	r28, 0x37	; 55
    527c:	df 4f       	sbci	r29, 0xFF	; 255
    527e:	28 81       	ld	r18, Y
    5280:	c9 5c       	subi	r28, 0xC9	; 201
    5282:	d0 40       	sbci	r29, 0x00	; 0
    5284:	c5 53       	subi	r28, 0x35	; 53
    5286:	df 4f       	sbci	r29, 0xFF	; 255
    5288:	38 81       	ld	r19, Y
    528a:	cb 5c       	subi	r28, 0xCB	; 203
    528c:	d0 40       	sbci	r29, 0x00	; 0
    528e:	c3 53       	subi	r28, 0x33	; 51
    5290:	df 4f       	sbci	r29, 0xFF	; 255
    5292:	48 81       	ld	r20, Y
    5294:	cd 5c       	subi	r28, 0xCD	; 205
    5296:	d0 40       	sbci	r29, 0x00	; 0
    5298:	c2 53       	subi	r28, 0x32	; 50
    529a:	df 4f       	sbci	r29, 0xFF	; 255
    529c:	58 81       	ld	r21, Y
    529e:	ce 5c       	subi	r28, 0xCE	; 206
    52a0:	d0 40       	sbci	r29, 0x00	; 0
    52a2:	c1 53       	subi	r28, 0x31	; 49
    52a4:	df 4f       	sbci	r29, 0xFF	; 255
    52a6:	68 81       	ld	r22, Y
    52a8:	cf 5c       	subi	r28, 0xCF	; 207
    52aa:	d0 40       	sbci	r29, 0x00	; 0
    52ac:	72 2d       	mov	r23, r2
    52ae:	c0 53       	subi	r28, 0x30	; 48
    52b0:	df 4f       	sbci	r29, 0xFF	; 255
    52b2:	88 81       	ld	r24, Y
    52b4:	c0 5d       	subi	r28, 0xD0	; 208
    52b6:	d0 40       	sbci	r29, 0x00	; 0
    52b8:	cf 52       	subi	r28, 0x2F	; 47
    52ba:	df 4f       	sbci	r29, 0xFF	; 255
    52bc:	98 81       	ld	r25, Y
    52be:	c1 5d       	subi	r28, 0xD1	; 209
    52c0:	d0 40       	sbci	r29, 0x00	; 0
    52c2:	07 e1       	ldi	r16, 0x17	; 23
    52c4:	0e 94 17 34 	call	0x682e	; 0x682e <__rotldi3>
    52c8:	a2 26       	eor	r10, r18
    52ca:	b3 26       	eor	r11, r19
    52cc:	c4 26       	eor	r12, r20
    52ce:	d5 26       	eor	r13, r21
    52d0:	e6 26       	eor	r14, r22
    52d2:	f7 26       	eor	r15, r23
    52d4:	03 2d       	mov	r16, r3
    52d6:	08 27       	eor	r16, r24
    52d8:	19 27       	eor	r17, r25
    52da:	93 01       	movw	r18, r6
    52dc:	a4 01       	movw	r20, r8
    52de:	6b 2f       	mov	r22, r27
    52e0:	7a 2f       	mov	r23, r26
    52e2:	8f 2f       	mov	r24, r31
    52e4:	9e 2f       	mov	r25, r30
    52e6:	0e 94 32 34 	call	0x6864	; 0x6864 <__adddi3>
    52ea:	59 01       	movw	r10, r18
    52ec:	6a 01       	movw	r12, r20
    52ee:	7b 01       	movw	r14, r22
    52f0:	8c 01       	movw	r16, r24
		}else{
			wx = SIGMA_b(w[14]) + w[9] + SIGMA_a(w[1]) + w[0];
			memmove(&(w[0]), &(w[1]), 15*8);
			w[15] = wx;
		}
		t1 = a[7] + SIGMA_1(a[4]) + CH(a[4], a[5], a[6]) + pgm_read_uint64_t_P(k++) + wx;
    52f2:	c6 52       	subi	r28, 0x26	; 38
    52f4:	df 4f       	sbci	r29, 0xFF	; 255
    52f6:	28 81       	ld	r18, Y
    52f8:	ca 5d       	subi	r28, 0xDA	; 218
    52fa:	d0 40       	sbci	r29, 0x00	; 0
    52fc:	c5 52       	subi	r28, 0x25	; 37
    52fe:	df 4f       	sbci	r29, 0xFF	; 255
    5300:	38 81       	ld	r19, Y
    5302:	cb 5d       	subi	r28, 0xDB	; 219
    5304:	d0 40       	sbci	r29, 0x00	; 0
    5306:	c4 52       	subi	r28, 0x24	; 36
    5308:	df 4f       	sbci	r29, 0xFF	; 255
    530a:	48 81       	ld	r20, Y
    530c:	cc 5d       	subi	r28, 0xDC	; 220
    530e:	d0 40       	sbci	r29, 0x00	; 0
    5310:	c6 51       	subi	r28, 0x16	; 22
    5312:	df 4f       	sbci	r29, 0xFF	; 255
    5314:	58 81       	ld	r21, Y
    5316:	ca 5e       	subi	r28, 0xEA	; 234
    5318:	d0 40       	sbci	r29, 0x00	; 0
    531a:	c5 51       	subi	r28, 0x15	; 21
    531c:	df 4f       	sbci	r29, 0xFF	; 255
    531e:	68 81       	ld	r22, Y
    5320:	cb 5e       	subi	r28, 0xEB	; 235
    5322:	d0 40       	sbci	r29, 0x00	; 0
    5324:	c4 51       	subi	r28, 0x14	; 20
    5326:	df 4f       	sbci	r29, 0xFF	; 255
    5328:	78 81       	ld	r23, Y
    532a:	cc 5e       	subi	r28, 0xEC	; 236
    532c:	d0 40       	sbci	r29, 0x00	; 0
    532e:	c3 51       	subi	r28, 0x13	; 19
    5330:	df 4f       	sbci	r29, 0xFF	; 255
    5332:	88 81       	ld	r24, Y
    5334:	cd 5e       	subi	r28, 0xED	; 237
    5336:	d0 40       	sbci	r29, 0x00	; 0
    5338:	c2 51       	subi	r28, 0x12	; 18
    533a:	df 4f       	sbci	r29, 0xFF	; 255
    533c:	98 81       	ld	r25, Y
    533e:	ce 5e       	subi	r28, 0xEE	; 238
    5340:	d0 40       	sbci	r29, 0x00	; 0
    5342:	0e 94 32 34 	call	0x6864	; 0x6864 <__adddi3>
    5346:	ce 52       	subi	r28, 0x2E	; 46
    5348:	df 4f       	sbci	r29, 0xFF	; 255
    534a:	a8 80       	ld	r10, Y
    534c:	c2 5d       	subi	r28, 0xD2	; 210
    534e:	d0 40       	sbci	r29, 0x00	; 0
    5350:	cd 52       	subi	r28, 0x2D	; 45
    5352:	df 4f       	sbci	r29, 0xFF	; 255
    5354:	b8 80       	ld	r11, Y
    5356:	c3 5d       	subi	r28, 0xD3	; 211
    5358:	d0 40       	sbci	r29, 0x00	; 0
    535a:	cc 52       	subi	r28, 0x2C	; 44
    535c:	df 4f       	sbci	r29, 0xFF	; 255
    535e:	c8 80       	ld	r12, Y
    5360:	c4 5d       	subi	r28, 0xD4	; 212
    5362:	d0 40       	sbci	r29, 0x00	; 0
    5364:	cb 52       	subi	r28, 0x2B	; 43
    5366:	df 4f       	sbci	r29, 0xFF	; 255
    5368:	d8 80       	ld	r13, Y
    536a:	c5 5d       	subi	r28, 0xD5	; 213
    536c:	d0 40       	sbci	r29, 0x00	; 0
    536e:	ca 52       	subi	r28, 0x2A	; 42
    5370:	df 4f       	sbci	r29, 0xFF	; 255
    5372:	e8 80       	ld	r14, Y
    5374:	c6 5d       	subi	r28, 0xD6	; 214
    5376:	d0 40       	sbci	r29, 0x00	; 0
    5378:	c9 52       	subi	r28, 0x29	; 41
    537a:	df 4f       	sbci	r29, 0xFF	; 255
    537c:	f8 80       	ld	r15, Y
    537e:	c7 5d       	subi	r28, 0xD7	; 215
    5380:	d0 40       	sbci	r29, 0x00	; 0
    5382:	c8 52       	subi	r28, 0x28	; 40
    5384:	df 4f       	sbci	r29, 0xFF	; 255
    5386:	08 81       	ld	r16, Y
    5388:	c8 5d       	subi	r28, 0xD8	; 216
    538a:	d0 40       	sbci	r29, 0x00	; 0
    538c:	c7 52       	subi	r28, 0x27	; 39
    538e:	df 4f       	sbci	r29, 0xFF	; 255
    5390:	18 81       	ld	r17, Y
    5392:	c9 5d       	subi	r28, 0xD9	; 217
    5394:	d0 40       	sbci	r29, 0x00	; 0
    5396:	0e 94 32 34 	call	0x6864	; 0x6864 <__adddi3>
    539a:	92 2e       	mov	r9, r18
    539c:	c5 53       	subi	r28, 0x35	; 53
    539e:	df 4f       	sbci	r29, 0xFF	; 255
    53a0:	38 83       	st	Y, r19
    53a2:	cb 5c       	subi	r28, 0xCB	; 203
    53a4:	d0 40       	sbci	r29, 0x00	; 0
    53a6:	c3 53       	subi	r28, 0x33	; 51
    53a8:	df 4f       	sbci	r29, 0xFF	; 255
    53aa:	48 83       	st	Y, r20
    53ac:	cd 5c       	subi	r28, 0xCD	; 205
    53ae:	d0 40       	sbci	r29, 0x00	; 0
    53b0:	c2 53       	subi	r28, 0x32	; 50
    53b2:	df 4f       	sbci	r29, 0xFF	; 255
    53b4:	58 83       	st	Y, r21
    53b6:	ce 5c       	subi	r28, 0xCE	; 206
    53b8:	d0 40       	sbci	r29, 0x00	; 0
    53ba:	c1 53       	subi	r28, 0x31	; 49
    53bc:	df 4f       	sbci	r29, 0xFF	; 255
    53be:	68 83       	st	Y, r22
    53c0:	cf 5c       	subi	r28, 0xCF	; 207
    53c2:	d0 40       	sbci	r29, 0x00	; 0
    53c4:	c0 53       	subi	r28, 0x30	; 48
    53c6:	df 4f       	sbci	r29, 0xFF	; 255
    53c8:	78 83       	st	Y, r23
    53ca:	c0 5d       	subi	r28, 0xD0	; 208
    53cc:	d0 40       	sbci	r29, 0x00	; 0
    53ce:	cf 52       	subi	r28, 0x2F	; 47
    53d0:	df 4f       	sbci	r29, 0xFF	; 255
    53d2:	88 83       	st	Y, r24
    53d4:	c1 5d       	subi	r28, 0xD1	; 209
    53d6:	d0 40       	sbci	r29, 0x00	; 0
    53d8:	ce 52       	subi	r28, 0x2E	; 46
    53da:	df 4f       	sbci	r29, 0xFF	; 255
    53dc:	98 83       	st	Y, r25
    53de:	c2 5d       	subi	r28, 0xD2	; 210
    53e0:	d0 40       	sbci	r29, 0x00	; 0
		t2 = SIGMA_0(a[0]) + MAJ(a[0], a[1], a[2]);
    53e2:	f2 01       	movw	r30, r4
    53e4:	f0 85       	ldd	r31, Z+8	; 0x08
    53e6:	cd 52       	subi	r28, 0x2D	; 45
    53e8:	df 4f       	sbci	r29, 0xFF	; 255
    53ea:	f8 83       	st	Y, r31
    53ec:	c3 5d       	subi	r28, 0xD3	; 211
    53ee:	d0 40       	sbci	r29, 0x00	; 0
    53f0:	d2 01       	movw	r26, r4
    53f2:	19 96       	adiw	r26, 0x09	; 9
    53f4:	bc 91       	ld	r27, X
    53f6:	c7 53       	subi	r28, 0x37	; 55
    53f8:	df 4f       	sbci	r29, 0xFF	; 255
    53fa:	b8 83       	st	Y, r27
    53fc:	c9 5c       	subi	r28, 0xC9	; 201
    53fe:	d0 40       	sbci	r29, 0x00	; 0
    5400:	f2 01       	movw	r30, r4
    5402:	f2 85       	ldd	r31, Z+10	; 0x0a
    5404:	cc 52       	subi	r28, 0x2C	; 44
    5406:	df 4f       	sbci	r29, 0xFF	; 255
    5408:	f8 83       	st	Y, r31
    540a:	c4 5d       	subi	r28, 0xD4	; 212
    540c:	d0 40       	sbci	r29, 0x00	; 0
    540e:	d2 01       	movw	r26, r4
    5410:	1b 96       	adiw	r26, 0x0b	; 11
    5412:	bc 91       	ld	r27, X
    5414:	cb 52       	subi	r28, 0x2B	; 43
    5416:	df 4f       	sbci	r29, 0xFF	; 255
    5418:	b8 83       	st	Y, r27
    541a:	c5 5d       	subi	r28, 0xD5	; 213
    541c:	d0 40       	sbci	r29, 0x00	; 0
    541e:	f2 01       	movw	r30, r4
    5420:	f4 85       	ldd	r31, Z+12	; 0x0c
    5422:	ca 52       	subi	r28, 0x2A	; 42
    5424:	df 4f       	sbci	r29, 0xFF	; 255
    5426:	f8 83       	st	Y, r31
    5428:	c6 5d       	subi	r28, 0xD6	; 214
    542a:	d0 40       	sbci	r29, 0x00	; 0
    542c:	d2 01       	movw	r26, r4
    542e:	1d 96       	adiw	r26, 0x0d	; 13
    5430:	bc 91       	ld	r27, X
    5432:	c9 52       	subi	r28, 0x29	; 41
    5434:	df 4f       	sbci	r29, 0xFF	; 255
    5436:	b8 83       	st	Y, r27
    5438:	c7 5d       	subi	r28, 0xD7	; 215
    543a:	d0 40       	sbci	r29, 0x00	; 0
    543c:	f2 01       	movw	r30, r4
    543e:	f6 85       	ldd	r31, Z+14	; 0x0e
    5440:	c8 52       	subi	r28, 0x28	; 40
    5442:	df 4f       	sbci	r29, 0xFF	; 255
    5444:	f8 83       	st	Y, r31
    5446:	c8 5d       	subi	r28, 0xD8	; 216
    5448:	d0 40       	sbci	r29, 0x00	; 0
    544a:	d2 01       	movw	r26, r4
    544c:	1f 96       	adiw	r26, 0x0f	; 15
    544e:	bc 91       	ld	r27, X
    5450:	c7 52       	subi	r28, 0x27	; 39
    5452:	df 4f       	sbci	r29, 0xFF	; 255
    5454:	b8 83       	st	Y, r27
    5456:	c9 5d       	subi	r28, 0xD9	; 217
    5458:	d0 40       	sbci	r29, 0x00	; 0
    545a:	f2 01       	movw	r30, r4
    545c:	80 88       	ldd	r8, Z+16	; 0x10
    545e:	71 88       	ldd	r7, Z+17	; 0x11
    5460:	22 88       	ldd	r2, Z+18	; 0x12
    5462:	33 88       	ldd	r3, Z+19	; 0x13
    5464:	64 88       	ldd	r6, Z+20	; 0x14
    5466:	15 89       	ldd	r17, Z+21	; 0x15
    5468:	c6 52       	subi	r28, 0x26	; 38
    546a:	df 4f       	sbci	r29, 0xFF	; 255
    546c:	18 83       	st	Y, r17
    546e:	ca 5d       	subi	r28, 0xDA	; 218
    5470:	d0 40       	sbci	r29, 0x00	; 0
    5472:	16 89       	ldd	r17, Z+22	; 0x16
    5474:	c5 52       	subi	r28, 0x25	; 37
    5476:	df 4f       	sbci	r29, 0xFF	; 255
    5478:	18 83       	st	Y, r17
    547a:	cb 5d       	subi	r28, 0xDB	; 219
    547c:	d0 40       	sbci	r29, 0x00	; 0
    547e:	17 89       	ldd	r17, Z+23	; 0x17
    5480:	c4 52       	subi	r28, 0x24	; 36
    5482:	df 4f       	sbci	r29, 0xFF	; 255
    5484:	18 83       	st	Y, r17
    5486:	cc 5d       	subi	r28, 0xDC	; 220
    5488:	d0 40       	sbci	r29, 0x00	; 0
		memmove(&(a[1]), &(a[0]), 7*8);
    548a:	48 e3       	ldi	r20, 0x38	; 56
    548c:	50 e0       	ldi	r21, 0x00	; 0
    548e:	b2 01       	movw	r22, r4
    5490:	c1 51       	subi	r28, 0x11	; 17
    5492:	df 4f       	sbci	r29, 0xFF	; 255
    5494:	88 81       	ld	r24, Y
    5496:	99 81       	ldd	r25, Y+1	; 0x01
    5498:	cf 5e       	subi	r28, 0xEF	; 239
    549a:	d0 40       	sbci	r29, 0x00	; 0
    549c:	0e 94 a6 34 	call	0x694c	; 0x694c <memmove>
		a[0] = t1 + t2;
    54a0:	c3 52       	subi	r28, 0x23	; 35
    54a2:	df 4f       	sbci	r29, 0xFF	; 255
    54a4:	28 81       	ld	r18, Y
    54a6:	cd 5d       	subi	r28, 0xDD	; 221
    54a8:	d0 40       	sbci	r29, 0x00	; 0
    54aa:	c2 52       	subi	r28, 0x22	; 34
    54ac:	df 4f       	sbci	r29, 0xFF	; 255
    54ae:	38 81       	ld	r19, Y
    54b0:	ce 5d       	subi	r28, 0xDE	; 222
    54b2:	d0 40       	sbci	r29, 0x00	; 0
    54b4:	c1 52       	subi	r28, 0x21	; 33
    54b6:	df 4f       	sbci	r29, 0xFF	; 255
    54b8:	48 81       	ld	r20, Y
    54ba:	cf 5d       	subi	r28, 0xDF	; 223
    54bc:	d0 40       	sbci	r29, 0x00	; 0
    54be:	c0 52       	subi	r28, 0x20	; 32
    54c0:	df 4f       	sbci	r29, 0xFF	; 255
    54c2:	58 81       	ld	r21, Y
    54c4:	c0 5e       	subi	r28, 0xE0	; 224
    54c6:	d0 40       	sbci	r29, 0x00	; 0
    54c8:	cf 51       	subi	r28, 0x1F	; 31
    54ca:	df 4f       	sbci	r29, 0xFF	; 255
    54cc:	68 81       	ld	r22, Y
    54ce:	c1 5e       	subi	r28, 0xE1	; 225
    54d0:	d0 40       	sbci	r29, 0x00	; 0
    54d2:	ce 51       	subi	r28, 0x1E	; 30
    54d4:	df 4f       	sbci	r29, 0xFF	; 255
    54d6:	78 81       	ld	r23, Y
    54d8:	c2 5e       	subi	r28, 0xE2	; 226
    54da:	d0 40       	sbci	r29, 0x00	; 0
    54dc:	cd 51       	subi	r28, 0x1D	; 29
    54de:	df 4f       	sbci	r29, 0xFF	; 255
    54e0:	88 81       	ld	r24, Y
    54e2:	c3 5e       	subi	r28, 0xE3	; 227
    54e4:	d0 40       	sbci	r29, 0x00	; 0
    54e6:	cc 51       	subi	r28, 0x1C	; 28
    54e8:	df 4f       	sbci	r29, 0xFF	; 255
    54ea:	98 81       	ld	r25, Y
    54ec:	c4 5e       	subi	r28, 0xE4	; 228
    54ee:	d0 40       	sbci	r29, 0x00	; 0
    54f0:	0e e1       	ldi	r16, 0x1E	; 30
    54f2:	0e 94 17 34 	call	0x682e	; 0x682e <__rotldi3>
    54f6:	d2 2e       	mov	r13, r18
    54f8:	e3 2e       	mov	r14, r19
    54fa:	f4 2e       	mov	r15, r20
    54fc:	15 2f       	mov	r17, r21
    54fe:	b6 2f       	mov	r27, r22
    5500:	e7 2f       	mov	r30, r23
    5502:	a8 2f       	mov	r26, r24
    5504:	f9 2f       	mov	r31, r25
    5506:	c3 52       	subi	r28, 0x23	; 35
    5508:	df 4f       	sbci	r29, 0xFF	; 255
    550a:	28 81       	ld	r18, Y
    550c:	cd 5d       	subi	r28, 0xDD	; 221
    550e:	d0 40       	sbci	r29, 0x00	; 0
    5510:	c2 52       	subi	r28, 0x22	; 34
    5512:	df 4f       	sbci	r29, 0xFF	; 255
    5514:	38 81       	ld	r19, Y
    5516:	ce 5d       	subi	r28, 0xDE	; 222
    5518:	d0 40       	sbci	r29, 0x00	; 0
    551a:	c1 52       	subi	r28, 0x21	; 33
    551c:	df 4f       	sbci	r29, 0xFF	; 255
    551e:	48 81       	ld	r20, Y
    5520:	cf 5d       	subi	r28, 0xDF	; 223
    5522:	d0 40       	sbci	r29, 0x00	; 0
    5524:	c0 52       	subi	r28, 0x20	; 32
    5526:	df 4f       	sbci	r29, 0xFF	; 255
    5528:	58 81       	ld	r21, Y
    552a:	c0 5e       	subi	r28, 0xE0	; 224
    552c:	d0 40       	sbci	r29, 0x00	; 0
    552e:	cf 51       	subi	r28, 0x1F	; 31
    5530:	df 4f       	sbci	r29, 0xFF	; 255
    5532:	68 81       	ld	r22, Y
    5534:	c1 5e       	subi	r28, 0xE1	; 225
    5536:	d0 40       	sbci	r29, 0x00	; 0
    5538:	ce 51       	subi	r28, 0x1E	; 30
    553a:	df 4f       	sbci	r29, 0xFF	; 255
    553c:	78 81       	ld	r23, Y
    553e:	c2 5e       	subi	r28, 0xE2	; 226
    5540:	d0 40       	sbci	r29, 0x00	; 0
    5542:	cd 51       	subi	r28, 0x1D	; 29
    5544:	df 4f       	sbci	r29, 0xFF	; 255
    5546:	88 81       	ld	r24, Y
    5548:	c3 5e       	subi	r28, 0xE3	; 227
    554a:	d0 40       	sbci	r29, 0x00	; 0
    554c:	cc 51       	subi	r28, 0x1C	; 28
    554e:	df 4f       	sbci	r29, 0xFF	; 255
    5550:	98 81       	ld	r25, Y
    5552:	c4 5e       	subi	r28, 0xE4	; 228
    5554:	d0 40       	sbci	r29, 0x00	; 0
    5556:	04 e2       	ldi	r16, 0x24	; 36
    5558:	0e 94 17 34 	call	0x682e	; 0x682e <__rotldi3>
    555c:	d2 26       	eor	r13, r18
    555e:	e3 26       	eor	r14, r19
    5560:	f4 26       	eor	r15, r20
    5562:	15 27       	eor	r17, r21
    5564:	b6 27       	eor	r27, r22
    5566:	e7 27       	eor	r30, r23
    5568:	a8 27       	eor	r26, r24
    556a:	f9 27       	eor	r31, r25
    556c:	c3 52       	subi	r28, 0x23	; 35
    556e:	df 4f       	sbci	r29, 0xFF	; 255
    5570:	28 81       	ld	r18, Y
    5572:	cd 5d       	subi	r28, 0xDD	; 221
    5574:	d0 40       	sbci	r29, 0x00	; 0
    5576:	c2 52       	subi	r28, 0x22	; 34
    5578:	df 4f       	sbci	r29, 0xFF	; 255
    557a:	38 81       	ld	r19, Y
    557c:	ce 5d       	subi	r28, 0xDE	; 222
    557e:	d0 40       	sbci	r29, 0x00	; 0
    5580:	c1 52       	subi	r28, 0x21	; 33
    5582:	df 4f       	sbci	r29, 0xFF	; 255
    5584:	48 81       	ld	r20, Y
    5586:	cf 5d       	subi	r28, 0xDF	; 223
    5588:	d0 40       	sbci	r29, 0x00	; 0
    558a:	c0 52       	subi	r28, 0x20	; 32
    558c:	df 4f       	sbci	r29, 0xFF	; 255
    558e:	58 81       	ld	r21, Y
    5590:	c0 5e       	subi	r28, 0xE0	; 224
    5592:	d0 40       	sbci	r29, 0x00	; 0
    5594:	cf 51       	subi	r28, 0x1F	; 31
    5596:	df 4f       	sbci	r29, 0xFF	; 255
    5598:	68 81       	ld	r22, Y
    559a:	c1 5e       	subi	r28, 0xE1	; 225
    559c:	d0 40       	sbci	r29, 0x00	; 0
    559e:	ce 51       	subi	r28, 0x1E	; 30
    55a0:	df 4f       	sbci	r29, 0xFF	; 255
    55a2:	78 81       	ld	r23, Y
    55a4:	c2 5e       	subi	r28, 0xE2	; 226
    55a6:	d0 40       	sbci	r29, 0x00	; 0
    55a8:	cd 51       	subi	r28, 0x1D	; 29
    55aa:	df 4f       	sbci	r29, 0xFF	; 255
    55ac:	88 81       	ld	r24, Y
    55ae:	c3 5e       	subi	r28, 0xE3	; 227
    55b0:	d0 40       	sbci	r29, 0x00	; 0
    55b2:	cc 51       	subi	r28, 0x1C	; 28
    55b4:	df 4f       	sbci	r29, 0xFF	; 255
    55b6:	98 81       	ld	r25, Y
    55b8:	c4 5e       	subi	r28, 0xE4	; 228
    55ba:	d0 40       	sbci	r29, 0x00	; 0
    55bc:	09 e1       	ldi	r16, 0x19	; 25
    55be:	0e 94 17 34 	call	0x682e	; 0x682e <__rotldi3>
    55c2:	2d 25       	eor	r18, r13
    55c4:	3e 25       	eor	r19, r14
    55c6:	4f 25       	eor	r20, r15
    55c8:	51 27       	eor	r21, r17
    55ca:	6b 27       	eor	r22, r27
    55cc:	7e 27       	eor	r23, r30
    55ce:	cd 52       	subi	r28, 0x2D	; 45
    55d0:	df 4f       	sbci	r29, 0xFF	; 255
    55d2:	a8 80       	ld	r10, Y
    55d4:	c3 5d       	subi	r28, 0xD3	; 211
    55d6:	d0 40       	sbci	r29, 0x00	; 0
    55d8:	a8 24       	eor	r10, r8
    55da:	c7 53       	subi	r28, 0x37	; 55
    55dc:	df 4f       	sbci	r29, 0xFF	; 255
    55de:	b8 80       	ld	r11, Y
    55e0:	c9 5c       	subi	r28, 0xC9	; 201
    55e2:	d0 40       	sbci	r29, 0x00	; 0
    55e4:	b7 24       	eor	r11, r7
    55e6:	cc 52       	subi	r28, 0x2C	; 44
    55e8:	df 4f       	sbci	r29, 0xFF	; 255
    55ea:	c8 80       	ld	r12, Y
    55ec:	c4 5d       	subi	r28, 0xD4	; 212
    55ee:	d0 40       	sbci	r29, 0x00	; 0
    55f0:	c2 24       	eor	r12, r2
    55f2:	cb 52       	subi	r28, 0x2B	; 43
    55f4:	df 4f       	sbci	r29, 0xFF	; 255
    55f6:	d8 80       	ld	r13, Y
    55f8:	c5 5d       	subi	r28, 0xD5	; 213
    55fa:	d0 40       	sbci	r29, 0x00	; 0
    55fc:	d3 24       	eor	r13, r3
    55fe:	ca 52       	subi	r28, 0x2A	; 42
    5600:	df 4f       	sbci	r29, 0xFF	; 255
    5602:	e8 80       	ld	r14, Y
    5604:	c6 5d       	subi	r28, 0xD6	; 214
    5606:	d0 40       	sbci	r29, 0x00	; 0
    5608:	e6 24       	eor	r14, r6
    560a:	c9 52       	subi	r28, 0x29	; 41
    560c:	df 4f       	sbci	r29, 0xFF	; 255
    560e:	f8 80       	ld	r15, Y
    5610:	c7 5d       	subi	r28, 0xD7	; 215
    5612:	d0 40       	sbci	r29, 0x00	; 0
    5614:	c6 52       	subi	r28, 0x26	; 38
    5616:	df 4f       	sbci	r29, 0xFF	; 255
    5618:	18 81       	ld	r17, Y
    561a:	ca 5d       	subi	r28, 0xDA	; 218
    561c:	d0 40       	sbci	r29, 0x00	; 0
    561e:	f1 26       	eor	r15, r17
    5620:	c8 52       	subi	r28, 0x28	; 40
    5622:	df 4f       	sbci	r29, 0xFF	; 255
    5624:	08 81       	ld	r16, Y
    5626:	c8 5d       	subi	r28, 0xD8	; 216
    5628:	d0 40       	sbci	r29, 0x00	; 0
    562a:	c5 52       	subi	r28, 0x25	; 37
    562c:	df 4f       	sbci	r29, 0xFF	; 255
    562e:	18 81       	ld	r17, Y
    5630:	cb 5d       	subi	r28, 0xDB	; 219
    5632:	d0 40       	sbci	r29, 0x00	; 0
    5634:	01 27       	eor	r16, r17
    5636:	c7 52       	subi	r28, 0x27	; 39
    5638:	df 4f       	sbci	r29, 0xFF	; 255
    563a:	18 81       	ld	r17, Y
    563c:	c9 5d       	subi	r28, 0xD9	; 217
    563e:	d0 40       	sbci	r29, 0x00	; 0
    5640:	c4 52       	subi	r28, 0x24	; 36
    5642:	df 4f       	sbci	r29, 0xFF	; 255
    5644:	b8 81       	ld	r27, Y
    5646:	cc 5d       	subi	r28, 0xDC	; 220
    5648:	d0 40       	sbci	r29, 0x00	; 0
    564a:	1b 27       	eor	r17, r27
    564c:	c3 52       	subi	r28, 0x23	; 35
    564e:	df 4f       	sbci	r29, 0xFF	; 255
    5650:	e8 81       	ld	r30, Y
    5652:	cd 5d       	subi	r28, 0xDD	; 221
    5654:	d0 40       	sbci	r29, 0x00	; 0
    5656:	ae 22       	and	r10, r30
    5658:	c2 52       	subi	r28, 0x22	; 34
    565a:	df 4f       	sbci	r29, 0xFF	; 255
    565c:	b8 81       	ld	r27, Y
    565e:	ce 5d       	subi	r28, 0xDE	; 222
    5660:	d0 40       	sbci	r29, 0x00	; 0
    5662:	bb 22       	and	r11, r27
    5664:	c1 52       	subi	r28, 0x21	; 33
    5666:	df 4f       	sbci	r29, 0xFF	; 255
    5668:	e8 81       	ld	r30, Y
    566a:	cf 5d       	subi	r28, 0xDF	; 223
    566c:	d0 40       	sbci	r29, 0x00	; 0
    566e:	ce 22       	and	r12, r30
    5670:	c0 52       	subi	r28, 0x20	; 32
    5672:	df 4f       	sbci	r29, 0xFF	; 255
    5674:	b8 81       	ld	r27, Y
    5676:	c0 5e       	subi	r28, 0xE0	; 224
    5678:	d0 40       	sbci	r29, 0x00	; 0
    567a:	db 22       	and	r13, r27
    567c:	cf 51       	subi	r28, 0x1F	; 31
    567e:	df 4f       	sbci	r29, 0xFF	; 255
    5680:	e8 81       	ld	r30, Y
    5682:	c1 5e       	subi	r28, 0xE1	; 225
    5684:	d0 40       	sbci	r29, 0x00	; 0
    5686:	ee 22       	and	r14, r30
    5688:	ce 51       	subi	r28, 0x1E	; 30
    568a:	df 4f       	sbci	r29, 0xFF	; 255
    568c:	b8 81       	ld	r27, Y
    568e:	c2 5e       	subi	r28, 0xE2	; 226
    5690:	d0 40       	sbci	r29, 0x00	; 0
    5692:	fb 22       	and	r15, r27
    5694:	cd 51       	subi	r28, 0x1D	; 29
    5696:	df 4f       	sbci	r29, 0xFF	; 255
    5698:	e8 81       	ld	r30, Y
    569a:	c3 5e       	subi	r28, 0xE3	; 227
    569c:	d0 40       	sbci	r29, 0x00	; 0
    569e:	0e 23       	and	r16, r30
    56a0:	cc 51       	subi	r28, 0x1C	; 28
    56a2:	df 4f       	sbci	r29, 0xFF	; 255
    56a4:	b8 81       	ld	r27, Y
    56a6:	c4 5e       	subi	r28, 0xE4	; 228
    56a8:	d0 40       	sbci	r29, 0x00	; 0
    56aa:	b1 23       	and	r27, r17
    56ac:	c3 52       	subi	r28, 0x23	; 35
    56ae:	df 4f       	sbci	r29, 0xFF	; 255
    56b0:	b8 83       	st	Y, r27
    56b2:	cd 5d       	subi	r28, 0xDD	; 221
    56b4:	d0 40       	sbci	r29, 0x00	; 0
    56b6:	cd 52       	subi	r28, 0x2D	; 45
    56b8:	df 4f       	sbci	r29, 0xFF	; 255
    56ba:	e8 81       	ld	r30, Y
    56bc:	c3 5d       	subi	r28, 0xD3	; 211
    56be:	d0 40       	sbci	r29, 0x00	; 0
    56c0:	e8 21       	and	r30, r8
    56c2:	c7 53       	subi	r28, 0x37	; 55
    56c4:	df 4f       	sbci	r29, 0xFF	; 255
    56c6:	18 81       	ld	r17, Y
    56c8:	c9 5c       	subi	r28, 0xC9	; 201
    56ca:	d0 40       	sbci	r29, 0x00	; 0
    56cc:	17 21       	and	r17, r7
    56ce:	c7 53       	subi	r28, 0x37	; 55
    56d0:	df 4f       	sbci	r29, 0xFF	; 255
    56d2:	18 83       	st	Y, r17
    56d4:	c9 5c       	subi	r28, 0xC9	; 201
    56d6:	d0 40       	sbci	r29, 0x00	; 0
    56d8:	cc 52       	subi	r28, 0x2C	; 44
    56da:	df 4f       	sbci	r29, 0xFF	; 255
    56dc:	18 81       	ld	r17, Y
    56de:	c4 5d       	subi	r28, 0xD4	; 212
    56e0:	d0 40       	sbci	r29, 0x00	; 0
    56e2:	21 22       	and	r2, r17
    56e4:	cb 52       	subi	r28, 0x2B	; 43
    56e6:	df 4f       	sbci	r29, 0xFF	; 255
    56e8:	18 81       	ld	r17, Y
    56ea:	c5 5d       	subi	r28, 0xD5	; 213
    56ec:	d0 40       	sbci	r29, 0x00	; 0
    56ee:	31 22       	and	r3, r17
    56f0:	ca 52       	subi	r28, 0x2A	; 42
    56f2:	df 4f       	sbci	r29, 0xFF	; 255
    56f4:	18 81       	ld	r17, Y
    56f6:	c6 5d       	subi	r28, 0xD6	; 214
    56f8:	d0 40       	sbci	r29, 0x00	; 0
    56fa:	61 22       	and	r6, r17
    56fc:	c9 52       	subi	r28, 0x29	; 41
    56fe:	df 4f       	sbci	r29, 0xFF	; 255
    5700:	78 80       	ld	r7, Y
    5702:	c7 5d       	subi	r28, 0xD7	; 215
    5704:	d0 40       	sbci	r29, 0x00	; 0
    5706:	c6 52       	subi	r28, 0x26	; 38
    5708:	df 4f       	sbci	r29, 0xFF	; 255
    570a:	18 81       	ld	r17, Y
    570c:	ca 5d       	subi	r28, 0xDA	; 218
    570e:	d0 40       	sbci	r29, 0x00	; 0
    5710:	71 22       	and	r7, r17
    5712:	c8 52       	subi	r28, 0x28	; 40
    5714:	df 4f       	sbci	r29, 0xFF	; 255
    5716:	88 80       	ld	r8, Y
    5718:	c8 5d       	subi	r28, 0xD8	; 216
    571a:	d0 40       	sbci	r29, 0x00	; 0
    571c:	c5 52       	subi	r28, 0x25	; 37
    571e:	df 4f       	sbci	r29, 0xFF	; 255
    5720:	18 81       	ld	r17, Y
    5722:	cb 5d       	subi	r28, 0xDB	; 219
    5724:	d0 40       	sbci	r29, 0x00	; 0
    5726:	81 22       	and	r8, r17
    5728:	c7 52       	subi	r28, 0x27	; 39
    572a:	df 4f       	sbci	r29, 0xFF	; 255
    572c:	b8 81       	ld	r27, Y
    572e:	c9 5d       	subi	r28, 0xD9	; 217
    5730:	d0 40       	sbci	r29, 0x00	; 0
    5732:	c4 52       	subi	r28, 0x24	; 36
    5734:	df 4f       	sbci	r29, 0xFF	; 255
    5736:	18 81       	ld	r17, Y
    5738:	cc 5d       	subi	r28, 0xDC	; 220
    573a:	d0 40       	sbci	r29, 0x00	; 0
    573c:	b1 23       	and	r27, r17
    573e:	ae 26       	eor	r10, r30
    5740:	c7 53       	subi	r28, 0x37	; 55
    5742:	df 4f       	sbci	r29, 0xFF	; 255
    5744:	e8 81       	ld	r30, Y
    5746:	c9 5c       	subi	r28, 0xC9	; 201
    5748:	d0 40       	sbci	r29, 0x00	; 0
    574a:	be 26       	eor	r11, r30
    574c:	c2 24       	eor	r12, r2
    574e:	d3 24       	eor	r13, r3
    5750:	e6 24       	eor	r14, r6
    5752:	f7 24       	eor	r15, r7
    5754:	08 25       	eor	r16, r8
    5756:	c3 52       	subi	r28, 0x23	; 35
    5758:	df 4f       	sbci	r29, 0xFF	; 255
    575a:	18 81       	ld	r17, Y
    575c:	cd 5d       	subi	r28, 0xDD	; 221
    575e:	d0 40       	sbci	r29, 0x00	; 0
    5760:	1b 27       	eor	r17, r27
    5762:	8a 27       	eor	r24, r26
    5764:	9f 27       	eor	r25, r31
    5766:	0e 94 32 34 	call	0x6864	; 0x6864 <__adddi3>
    576a:	a9 2c       	mov	r10, r9
    576c:	c5 53       	subi	r28, 0x35	; 53
    576e:	df 4f       	sbci	r29, 0xFF	; 255
    5770:	b8 80       	ld	r11, Y
    5772:	cb 5c       	subi	r28, 0xCB	; 203
    5774:	d0 40       	sbci	r29, 0x00	; 0
    5776:	c3 53       	subi	r28, 0x33	; 51
    5778:	df 4f       	sbci	r29, 0xFF	; 255
    577a:	c8 80       	ld	r12, Y
    577c:	cd 5c       	subi	r28, 0xCD	; 205
    577e:	d0 40       	sbci	r29, 0x00	; 0
    5780:	c2 53       	subi	r28, 0x32	; 50
    5782:	df 4f       	sbci	r29, 0xFF	; 255
    5784:	d8 80       	ld	r13, Y
    5786:	ce 5c       	subi	r28, 0xCE	; 206
    5788:	d0 40       	sbci	r29, 0x00	; 0
    578a:	c1 53       	subi	r28, 0x31	; 49
    578c:	df 4f       	sbci	r29, 0xFF	; 255
    578e:	e8 80       	ld	r14, Y
    5790:	cf 5c       	subi	r28, 0xCF	; 207
    5792:	d0 40       	sbci	r29, 0x00	; 0
    5794:	c0 53       	subi	r28, 0x30	; 48
    5796:	df 4f       	sbci	r29, 0xFF	; 255
    5798:	f8 80       	ld	r15, Y
    579a:	c0 5d       	subi	r28, 0xD0	; 208
    579c:	d0 40       	sbci	r29, 0x00	; 0
    579e:	cf 52       	subi	r28, 0x2F	; 47
    57a0:	df 4f       	sbci	r29, 0xFF	; 255
    57a2:	08 81       	ld	r16, Y
    57a4:	c1 5d       	subi	r28, 0xD1	; 209
    57a6:	d0 40       	sbci	r29, 0x00	; 0
    57a8:	ce 52       	subi	r28, 0x2E	; 46
    57aa:	df 4f       	sbci	r29, 0xFF	; 255
    57ac:	18 81       	ld	r17, Y
    57ae:	c2 5d       	subi	r28, 0xD2	; 210
    57b0:	d0 40       	sbci	r29, 0x00	; 0
    57b2:	0e 94 32 34 	call	0x6864	; 0x6864 <__adddi3>
    57b6:	c3 52       	subi	r28, 0x23	; 35
    57b8:	df 4f       	sbci	r29, 0xFF	; 255
    57ba:	28 83       	st	Y, r18
    57bc:	cd 5d       	subi	r28, 0xDD	; 221
    57be:	d0 40       	sbci	r29, 0x00	; 0
    57c0:	c2 52       	subi	r28, 0x22	; 34
    57c2:	df 4f       	sbci	r29, 0xFF	; 255
    57c4:	38 83       	st	Y, r19
    57c6:	ce 5d       	subi	r28, 0xDE	; 222
    57c8:	d0 40       	sbci	r29, 0x00	; 0
    57ca:	c1 52       	subi	r28, 0x21	; 33
    57cc:	df 4f       	sbci	r29, 0xFF	; 255
    57ce:	48 83       	st	Y, r20
    57d0:	cf 5d       	subi	r28, 0xDF	; 223
    57d2:	d0 40       	sbci	r29, 0x00	; 0
    57d4:	c0 52       	subi	r28, 0x20	; 32
    57d6:	df 4f       	sbci	r29, 0xFF	; 255
    57d8:	58 83       	st	Y, r21
    57da:	c0 5e       	subi	r28, 0xE0	; 224
    57dc:	d0 40       	sbci	r29, 0x00	; 0
    57de:	cf 51       	subi	r28, 0x1F	; 31
    57e0:	df 4f       	sbci	r29, 0xFF	; 255
    57e2:	68 83       	st	Y, r22
    57e4:	c1 5e       	subi	r28, 0xE1	; 225
    57e6:	d0 40       	sbci	r29, 0x00	; 0
    57e8:	ce 51       	subi	r28, 0x1E	; 30
    57ea:	df 4f       	sbci	r29, 0xFF	; 255
    57ec:	78 83       	st	Y, r23
    57ee:	c2 5e       	subi	r28, 0xE2	; 226
    57f0:	d0 40       	sbci	r29, 0x00	; 0
    57f2:	cd 51       	subi	r28, 0x1D	; 29
    57f4:	df 4f       	sbci	r29, 0xFF	; 255
    57f6:	88 83       	st	Y, r24
    57f8:	c3 5e       	subi	r28, 0xE3	; 227
    57fa:	d0 40       	sbci	r29, 0x00	; 0
    57fc:	cc 51       	subi	r28, 0x1C	; 28
    57fe:	df 4f       	sbci	r29, 0xFF	; 255
    5800:	98 83       	st	Y, r25
    5802:	c4 5e       	subi	r28, 0xE4	; 228
    5804:	d0 40       	sbci	r29, 0x00	; 0
    5806:	d2 01       	movw	r26, r4
    5808:	2c 93       	st	X, r18
    580a:	11 96       	adiw	r26, 0x01	; 1
    580c:	3c 93       	st	X, r19
    580e:	11 97       	sbiw	r26, 0x01	; 1
    5810:	12 96       	adiw	r26, 0x02	; 2
    5812:	4c 93       	st	X, r20
    5814:	12 97       	sbiw	r26, 0x02	; 2
    5816:	13 96       	adiw	r26, 0x03	; 3
    5818:	5c 93       	st	X, r21
    581a:	13 97       	sbiw	r26, 0x03	; 3
    581c:	14 96       	adiw	r26, 0x04	; 4
    581e:	6c 93       	st	X, r22
    5820:	14 97       	sbiw	r26, 0x04	; 4
    5822:	15 96       	adiw	r26, 0x05	; 5
    5824:	7c 93       	st	X, r23
    5826:	15 97       	sbiw	r26, 0x05	; 5
    5828:	cd 51       	subi	r28, 0x1D	; 29
    582a:	df 4f       	sbci	r29, 0xFF	; 255
    582c:	f8 81       	ld	r31, Y
    582e:	c3 5e       	subi	r28, 0xE3	; 227
    5830:	d0 40       	sbci	r29, 0x00	; 0
    5832:	16 96       	adiw	r26, 0x06	; 6
    5834:	fc 93       	st	X, r31
    5836:	16 97       	sbiw	r26, 0x06	; 6
    5838:	cc 51       	subi	r28, 0x1C	; 28
    583a:	df 4f       	sbci	r29, 0xFF	; 255
    583c:	18 81       	ld	r17, Y
    583e:	c4 5e       	subi	r28, 0xE4	; 228
    5840:	d0 40       	sbci	r29, 0x00	; 0
    5842:	17 96       	adiw	r26, 0x07	; 7
    5844:	1c 93       	st	X, r17
    5846:	17 97       	sbiw	r26, 0x07	; 7
		a[4] += t1;
    5848:	29 2d       	mov	r18, r9
    584a:	3b 2d       	mov	r19, r11
    584c:	a6 01       	movw	r20, r12
    584e:	b7 01       	movw	r22, r14
    5850:	80 2f       	mov	r24, r16
    5852:	ce 52       	subi	r28, 0x2E	; 46
    5854:	df 4f       	sbci	r29, 0xFF	; 255
    5856:	98 81       	ld	r25, Y
    5858:	c2 5d       	subi	r28, 0xD2	; 210
    585a:	d0 40       	sbci	r29, 0x00	; 0
    585c:	90 96       	adiw	r26, 0x20	; 32
    585e:	ac 90       	ld	r10, X
    5860:	90 97       	sbiw	r26, 0x20	; 32
    5862:	91 96       	adiw	r26, 0x21	; 33
    5864:	bc 90       	ld	r11, X
    5866:	91 97       	sbiw	r26, 0x21	; 33
    5868:	92 96       	adiw	r26, 0x22	; 34
    586a:	cc 90       	ld	r12, X
    586c:	92 97       	sbiw	r26, 0x22	; 34
    586e:	93 96       	adiw	r26, 0x23	; 35
    5870:	dc 90       	ld	r13, X
    5872:	93 97       	sbiw	r26, 0x23	; 35
    5874:	94 96       	adiw	r26, 0x24	; 36
    5876:	ec 90       	ld	r14, X
    5878:	94 97       	sbiw	r26, 0x24	; 36
    587a:	95 96       	adiw	r26, 0x25	; 37
    587c:	fc 90       	ld	r15, X
    587e:	95 97       	sbiw	r26, 0x25	; 37
    5880:	96 96       	adiw	r26, 0x26	; 38
    5882:	0c 91       	ld	r16, X
    5884:	96 97       	sbiw	r26, 0x26	; 38
    5886:	97 96       	adiw	r26, 0x27	; 39
    5888:	1c 91       	ld	r17, X
    588a:	97 97       	sbiw	r26, 0x27	; 39
    588c:	eb d7       	rcall	.+4054   	; 0x6864 <__adddi3>
    588e:	c7 53       	subi	r28, 0x37	; 55
    5890:	df 4f       	sbci	r29, 0xFF	; 255
    5892:	28 83       	st	Y, r18
    5894:	c9 5c       	subi	r28, 0xC9	; 201
    5896:	d0 40       	sbci	r29, 0x00	; 0
    5898:	c5 53       	subi	r28, 0x35	; 53
    589a:	df 4f       	sbci	r29, 0xFF	; 255
    589c:	38 83       	st	Y, r19
    589e:	cb 5c       	subi	r28, 0xCB	; 203
    58a0:	d0 40       	sbci	r29, 0x00	; 0
    58a2:	c3 53       	subi	r28, 0x33	; 51
    58a4:	df 4f       	sbci	r29, 0xFF	; 255
    58a6:	48 83       	st	Y, r20
    58a8:	cd 5c       	subi	r28, 0xCD	; 205
    58aa:	d0 40       	sbci	r29, 0x00	; 0
    58ac:	c2 53       	subi	r28, 0x32	; 50
    58ae:	df 4f       	sbci	r29, 0xFF	; 255
    58b0:	58 83       	st	Y, r21
    58b2:	ce 5c       	subi	r28, 0xCE	; 206
    58b4:	d0 40       	sbci	r29, 0x00	; 0
    58b6:	c1 53       	subi	r28, 0x31	; 49
    58b8:	df 4f       	sbci	r29, 0xFF	; 255
    58ba:	68 83       	st	Y, r22
    58bc:	cf 5c       	subi	r28, 0xCF	; 207
    58be:	d0 40       	sbci	r29, 0x00	; 0
    58c0:	27 2e       	mov	r2, r23
    58c2:	c0 53       	subi	r28, 0x30	; 48
    58c4:	df 4f       	sbci	r29, 0xFF	; 255
    58c6:	88 83       	st	Y, r24
    58c8:	c0 5d       	subi	r28, 0xD0	; 208
    58ca:	d0 40       	sbci	r29, 0x00	; 0
    58cc:	cf 52       	subi	r28, 0x2F	; 47
    58ce:	df 4f       	sbci	r29, 0xFF	; 255
    58d0:	98 83       	st	Y, r25
    58d2:	c1 5d       	subi	r28, 0xD1	; 209
    58d4:	d0 40       	sbci	r29, 0x00	; 0
    58d6:	90 96       	adiw	r26, 0x20	; 32
    58d8:	2c 93       	st	X, r18
    58da:	90 97       	sbiw	r26, 0x20	; 32
    58dc:	91 96       	adiw	r26, 0x21	; 33
    58de:	3c 93       	st	X, r19
    58e0:	91 97       	sbiw	r26, 0x21	; 33
    58e2:	92 96       	adiw	r26, 0x22	; 34
    58e4:	4c 93       	st	X, r20
    58e6:	92 97       	sbiw	r26, 0x22	; 34
    58e8:	93 96       	adiw	r26, 0x23	; 35
    58ea:	5c 93       	st	X, r21
    58ec:	93 97       	sbiw	r26, 0x23	; 35
    58ee:	94 96       	adiw	r26, 0x24	; 36
    58f0:	6c 93       	st	X, r22
    58f2:	94 97       	sbiw	r26, 0x24	; 36
    58f4:	95 96       	adiw	r26, 0x25	; 37
    58f6:	2c 92       	st	X, r2
    58f8:	95 97       	sbiw	r26, 0x25	; 37
    58fa:	c0 53       	subi	r28, 0x30	; 48
    58fc:	df 4f       	sbci	r29, 0xFF	; 255
    58fe:	88 81       	ld	r24, Y
    5900:	c0 5d       	subi	r28, 0xD0	; 208
    5902:	d0 40       	sbci	r29, 0x00	; 0
    5904:	96 96       	adiw	r26, 0x26	; 38
    5906:	8c 93       	st	X, r24
    5908:	96 97       	sbiw	r26, 0x26	; 38
    590a:	cf 52       	subi	r28, 0x2F	; 47
    590c:	df 4f       	sbci	r29, 0xFF	; 255
    590e:	98 81       	ld	r25, Y
    5910:	c1 5d       	subi	r28, 0xD1	; 209
    5912:	d0 40       	sbci	r29, 0x00	; 0
    5914:	97 96       	adiw	r26, 0x27	; 39
    5916:	9c 93       	st	X, r25
	do{
		w[16-i] = change_endian64(*((const uint64_t*)block));
		block = (uint8_t*)block + 8;
	}while(--i);
	memcpy(a, ctx->h, 8*8);
	for(i=0; i<80; ++i){
    5918:	c9 51       	subi	r28, 0x19	; 25
    591a:	df 4f       	sbci	r29, 0xFF	; 255
    591c:	a8 81       	ld	r26, Y
    591e:	c7 5e       	subi	r28, 0xE7	; 231
    5920:	d0 40       	sbci	r29, 0x00	; 0
    5922:	af 5f       	subi	r26, 0xFF	; 255
    5924:	c9 51       	subi	r28, 0x19	; 25
    5926:	df 4f       	sbci	r29, 0xFF	; 255
    5928:	a8 83       	st	Y, r26
    592a:	c7 5e       	subi	r28, 0xE7	; 231
    592c:	d0 40       	sbci	r29, 0x00	; 0
    592e:	cb 51       	subi	r28, 0x1B	; 27
    5930:	df 4f       	sbci	r29, 0xFF	; 255
    5932:	e8 81       	ld	r30, Y
    5934:	f9 81       	ldd	r31, Y+1	; 0x01
    5936:	c5 5e       	subi	r28, 0xE5	; 229
    5938:	d0 40       	sbci	r29, 0x00	; 0
    593a:	38 96       	adiw	r30, 0x08	; 8
    593c:	cb 51       	subi	r28, 0x1B	; 27
    593e:	df 4f       	sbci	r29, 0xFF	; 255
    5940:	f9 83       	std	Y+1, r31	; 0x01
    5942:	e8 83       	st	Y, r30
    5944:	c5 5e       	subi	r28, 0xE5	; 229
    5946:	d0 40       	sbci	r29, 0x00	; 0
    5948:	c8 51       	subi	r28, 0x18	; 24
    594a:	df 4f       	sbci	r29, 0xFF	; 255
    594c:	88 81       	ld	r24, Y
    594e:	99 81       	ldd	r25, Y+1	; 0x01
    5950:	c8 5e       	subi	r28, 0xE8	; 232
    5952:	d0 40       	sbci	r29, 0x00	; 0
    5954:	08 96       	adiw	r24, 0x08	; 8
    5956:	c8 51       	subi	r28, 0x18	; 24
    5958:	df 4f       	sbci	r29, 0xFF	; 255
    595a:	99 83       	std	Y+1, r25	; 0x01
    595c:	88 83       	st	Y, r24
    595e:	c8 5e       	subi	r28, 0xE8	; 232
    5960:	d0 40       	sbci	r29, 0x00	; 0
    5962:	a0 35       	cpi	r26, 0x50	; 80
    5964:	09 f4       	brne	.+2      	; 0x5968 <sha2_large_common_nextBlock+0x107a>
    5966:	6c c0       	rjmp	.+216    	; 0x5a40 <sha2_large_common_nextBlock+0x1152>
		if(i<16){
    5968:	c9 51       	subi	r28, 0x19	; 25
    596a:	df 4f       	sbci	r29, 0xFF	; 255
    596c:	98 81       	ld	r25, Y
    596e:	c7 5e       	subi	r28, 0xE7	; 231
    5970:	d0 40       	sbci	r29, 0x00	; 0
    5972:	90 31       	cpi	r25, 0x10	; 16
    5974:	08 f0       	brcs	.+2      	; 0x5978 <sha2_large_common_nextBlock+0x108a>
    5976:	fe c8       	rjmp	.-3588   	; 0x4b74 <sha2_large_common_nextBlock+0x286>
			wx=w[i];
    5978:	cb 51       	subi	r28, 0x1B	; 27
    597a:	df 4f       	sbci	r29, 0xFF	; 255
    597c:	a8 81       	ld	r26, Y
    597e:	b9 81       	ldd	r27, Y+1	; 0x01
    5980:	c5 5e       	subi	r28, 0xE5	; 229
    5982:	d0 40       	sbci	r29, 0x00	; 0
    5984:	bc 91       	ld	r27, X
    5986:	ce 52       	subi	r28, 0x2E	; 46
    5988:	df 4f       	sbci	r29, 0xFF	; 255
    598a:	b8 83       	st	Y, r27
    598c:	c2 5d       	subi	r28, 0xD2	; 210
    598e:	d0 40       	sbci	r29, 0x00	; 0
    5990:	cb 51       	subi	r28, 0x1B	; 27
    5992:	df 4f       	sbci	r29, 0xFF	; 255
    5994:	e8 81       	ld	r30, Y
    5996:	f9 81       	ldd	r31, Y+1	; 0x01
    5998:	c5 5e       	subi	r28, 0xE5	; 229
    599a:	d0 40       	sbci	r29, 0x00	; 0
    599c:	f1 81       	ldd	r31, Z+1	; 0x01
    599e:	cd 52       	subi	r28, 0x2D	; 45
    59a0:	df 4f       	sbci	r29, 0xFF	; 255
    59a2:	f8 83       	st	Y, r31
    59a4:	c3 5d       	subi	r28, 0xD3	; 211
    59a6:	d0 40       	sbci	r29, 0x00	; 0
    59a8:	cb 51       	subi	r28, 0x1B	; 27
    59aa:	df 4f       	sbci	r29, 0xFF	; 255
    59ac:	a8 81       	ld	r26, Y
    59ae:	b9 81       	ldd	r27, Y+1	; 0x01
    59b0:	c5 5e       	subi	r28, 0xE5	; 229
    59b2:	d0 40       	sbci	r29, 0x00	; 0
    59b4:	12 96       	adiw	r26, 0x02	; 2
    59b6:	bc 91       	ld	r27, X
    59b8:	cc 52       	subi	r28, 0x2C	; 44
    59ba:	df 4f       	sbci	r29, 0xFF	; 255
    59bc:	b8 83       	st	Y, r27
    59be:	c4 5d       	subi	r28, 0xD4	; 212
    59c0:	d0 40       	sbci	r29, 0x00	; 0
    59c2:	cb 51       	subi	r28, 0x1B	; 27
    59c4:	df 4f       	sbci	r29, 0xFF	; 255
    59c6:	e8 81       	ld	r30, Y
    59c8:	f9 81       	ldd	r31, Y+1	; 0x01
    59ca:	c5 5e       	subi	r28, 0xE5	; 229
    59cc:	d0 40       	sbci	r29, 0x00	; 0
    59ce:	f3 81       	ldd	r31, Z+3	; 0x03
    59d0:	cb 52       	subi	r28, 0x2B	; 43
    59d2:	df 4f       	sbci	r29, 0xFF	; 255
    59d4:	f8 83       	st	Y, r31
    59d6:	c5 5d       	subi	r28, 0xD5	; 213
    59d8:	d0 40       	sbci	r29, 0x00	; 0
    59da:	cb 51       	subi	r28, 0x1B	; 27
    59dc:	df 4f       	sbci	r29, 0xFF	; 255
    59de:	a8 81       	ld	r26, Y
    59e0:	b9 81       	ldd	r27, Y+1	; 0x01
    59e2:	c5 5e       	subi	r28, 0xE5	; 229
    59e4:	d0 40       	sbci	r29, 0x00	; 0
    59e6:	14 96       	adiw	r26, 0x04	; 4
    59e8:	bc 91       	ld	r27, X
    59ea:	ca 52       	subi	r28, 0x2A	; 42
    59ec:	df 4f       	sbci	r29, 0xFF	; 255
    59ee:	b8 83       	st	Y, r27
    59f0:	c6 5d       	subi	r28, 0xD6	; 214
    59f2:	d0 40       	sbci	r29, 0x00	; 0
    59f4:	cb 51       	subi	r28, 0x1B	; 27
    59f6:	df 4f       	sbci	r29, 0xFF	; 255
    59f8:	e8 81       	ld	r30, Y
    59fa:	f9 81       	ldd	r31, Y+1	; 0x01
    59fc:	c5 5e       	subi	r28, 0xE5	; 229
    59fe:	d0 40       	sbci	r29, 0x00	; 0
    5a00:	f5 81       	ldd	r31, Z+5	; 0x05
    5a02:	c9 52       	subi	r28, 0x29	; 41
    5a04:	df 4f       	sbci	r29, 0xFF	; 255
    5a06:	f8 83       	st	Y, r31
    5a08:	c7 5d       	subi	r28, 0xD7	; 215
    5a0a:	d0 40       	sbci	r29, 0x00	; 0
    5a0c:	cb 51       	subi	r28, 0x1B	; 27
    5a0e:	df 4f       	sbci	r29, 0xFF	; 255
    5a10:	a8 81       	ld	r26, Y
    5a12:	b9 81       	ldd	r27, Y+1	; 0x01
    5a14:	c5 5e       	subi	r28, 0xE5	; 229
    5a16:	d0 40       	sbci	r29, 0x00	; 0
    5a18:	16 96       	adiw	r26, 0x06	; 6
    5a1a:	bc 91       	ld	r27, X
    5a1c:	c8 52       	subi	r28, 0x28	; 40
    5a1e:	df 4f       	sbci	r29, 0xFF	; 255
    5a20:	b8 83       	st	Y, r27
    5a22:	c8 5d       	subi	r28, 0xD8	; 216
    5a24:	d0 40       	sbci	r29, 0x00	; 0
    5a26:	cb 51       	subi	r28, 0x1B	; 27
    5a28:	df 4f       	sbci	r29, 0xFF	; 255
    5a2a:	e8 81       	ld	r30, Y
    5a2c:	f9 81       	ldd	r31, Y+1	; 0x01
    5a2e:	c5 5e       	subi	r28, 0xE5	; 229
    5a30:	d0 40       	sbci	r29, 0x00	; 0
    5a32:	f7 81       	ldd	r31, Z+7	; 0x07
    5a34:	c7 52       	subi	r28, 0x27	; 39
    5a36:	df 4f       	sbci	r29, 0xFF	; 255
    5a38:	f8 83       	st	Y, r31
    5a3a:	c9 5d       	subi	r28, 0xD9	; 217
    5a3c:	d0 40       	sbci	r29, 0x00	; 0
    5a3e:	a7 ca       	rjmp	.-2738   	; 0x4f8e <sha2_large_common_nextBlock+0x6a0>
    5a40:	97 e0       	ldi	r25, 0x07	; 7
    5a42:	99 2e       	mov	r9, r25
    5a44:	79 2c       	mov	r7, r9
    5a46:	cf 50       	subi	r28, 0x0F	; 15
    5a48:	df 4f       	sbci	r29, 0xFF	; 255
    5a4a:	88 80       	ld	r8, Y
    5a4c:	99 80       	ldd	r9, Y+1	; 0x01
    5a4e:	c1 5f       	subi	r28, 0xF1	; 241
    5a50:	d0 40       	sbci	r29, 0x00	; 0
    5a52:	a7 2d       	mov	r26, r7
    5a54:	b0 e0       	ldi	r27, 0x00	; 0
    5a56:	aa 0f       	add	r26, r26
    5a58:	bb 1f       	adc	r27, r27
    5a5a:	aa 0f       	add	r26, r26
    5a5c:	bb 1f       	adc	r27, r27
    5a5e:	aa 0f       	add	r26, r26
    5a60:	bb 1f       	adc	r27, r27
    5a62:	f4 01       	movw	r30, r8
    5a64:	ea 0f       	add	r30, r26
    5a66:	fb 1f       	adc	r31, r27
		a[0] = t1 + t2;
		a[4] += t1;
	}
	i=7;
	do{
		ctx->h[i] += a[i];
    5a68:	a4 0d       	add	r26, r4
    5a6a:	b5 1d       	adc	r27, r5
    5a6c:	20 81       	ld	r18, Z
    5a6e:	31 81       	ldd	r19, Z+1	; 0x01
    5a70:	42 81       	ldd	r20, Z+2	; 0x02
    5a72:	53 81       	ldd	r21, Z+3	; 0x03
    5a74:	64 81       	ldd	r22, Z+4	; 0x04
    5a76:	75 81       	ldd	r23, Z+5	; 0x05
    5a78:	86 81       	ldd	r24, Z+6	; 0x06
    5a7a:	97 81       	ldd	r25, Z+7	; 0x07
    5a7c:	ac 90       	ld	r10, X
    5a7e:	11 96       	adiw	r26, 0x01	; 1
    5a80:	bc 90       	ld	r11, X
    5a82:	11 97       	sbiw	r26, 0x01	; 1
    5a84:	12 96       	adiw	r26, 0x02	; 2
    5a86:	cc 90       	ld	r12, X
    5a88:	12 97       	sbiw	r26, 0x02	; 2
    5a8a:	13 96       	adiw	r26, 0x03	; 3
    5a8c:	dc 90       	ld	r13, X
    5a8e:	13 97       	sbiw	r26, 0x03	; 3
    5a90:	14 96       	adiw	r26, 0x04	; 4
    5a92:	ec 90       	ld	r14, X
    5a94:	14 97       	sbiw	r26, 0x04	; 4
    5a96:	15 96       	adiw	r26, 0x05	; 5
    5a98:	fc 90       	ld	r15, X
    5a9a:	15 97       	sbiw	r26, 0x05	; 5
    5a9c:	16 96       	adiw	r26, 0x06	; 6
    5a9e:	0c 91       	ld	r16, X
    5aa0:	16 97       	sbiw	r26, 0x06	; 6
    5aa2:	17 96       	adiw	r26, 0x07	; 7
    5aa4:	1c 91       	ld	r17, X
    5aa6:	de d6       	rcall	.+3516   	; 0x6864 <__adddi3>
    5aa8:	20 83       	st	Z, r18
    5aaa:	31 83       	std	Z+1, r19	; 0x01
    5aac:	42 83       	std	Z+2, r20	; 0x02
    5aae:	53 83       	std	Z+3, r21	; 0x03
    5ab0:	64 83       	std	Z+4, r22	; 0x04
    5ab2:	75 83       	std	Z+5, r23	; 0x05
    5ab4:	86 83       	std	Z+6, r24	; 0x06
    5ab6:	97 83       	std	Z+7, r25	; 0x07
	}while(i--);
    5ab8:	7a 94       	dec	r7
    5aba:	9f ef       	ldi	r25, 0xFF	; 255
    5abc:	79 12       	cpse	r7, r25
    5abe:	c9 cf       	rjmp	.-110    	; 0x5a52 <sha2_large_common_nextBlock+0x1164>
	ctx->length += 1;
    5ac0:	cf 50       	subi	r28, 0x0F	; 15
    5ac2:	df 4f       	sbci	r29, 0xFF	; 255
    5ac4:	e8 81       	ld	r30, Y
    5ac6:	f9 81       	ldd	r31, Y+1	; 0x01
    5ac8:	c1 5f       	subi	r28, 0xF1	; 241
    5aca:	d0 40       	sbci	r29, 0x00	; 0
    5acc:	e0 5c       	subi	r30, 0xC0	; 192
    5ace:	ff 4f       	sbci	r31, 0xFF	; 255
    5ad0:	80 81       	ld	r24, Z
    5ad2:	91 81       	ldd	r25, Z+1	; 0x01
    5ad4:	a2 81       	ldd	r26, Z+2	; 0x02
    5ad6:	b3 81       	ldd	r27, Z+3	; 0x03
    5ad8:	01 96       	adiw	r24, 0x01	; 1
    5ada:	a1 1d       	adc	r26, r1
    5adc:	b1 1d       	adc	r27, r1
    5ade:	80 83       	st	Z, r24
    5ae0:	91 83       	std	Z+1, r25	; 0x01
    5ae2:	a2 83       	std	Z+2, r26	; 0x02
    5ae4:	b3 83       	std	Z+3, r27	; 0x03
}
    5ae6:	ce 50       	subi	r28, 0x0E	; 14
    5ae8:	df 4f       	sbci	r29, 0xFF	; 255
    5aea:	0f b6       	in	r0, 0x3f	; 63
    5aec:	f8 94       	cli
    5aee:	de bf       	out	0x3e, r29	; 62
    5af0:	0f be       	out	0x3f, r0	; 63
    5af2:	cd bf       	out	0x3d, r28	; 61
    5af4:	df 91       	pop	r29
    5af6:	cf 91       	pop	r28
    5af8:	1f 91       	pop	r17
    5afa:	0f 91       	pop	r16
    5afc:	ff 90       	pop	r15
    5afe:	ef 90       	pop	r14
    5b00:	df 90       	pop	r13
    5b02:	cf 90       	pop	r12
    5b04:	bf 90       	pop	r11
    5b06:	af 90       	pop	r10
    5b08:	9f 90       	pop	r9
    5b0a:	8f 90       	pop	r8
    5b0c:	7f 90       	pop	r7
    5b0e:	6f 90       	pop	r6
    5b10:	5f 90       	pop	r5
    5b12:	4f 90       	pop	r4
    5b14:	3f 90       	pop	r3
    5b16:	2f 90       	pop	r2
    5b18:	08 95       	ret

00005b1a <sha2_large_common_lastBlock>:

void sha2_large_common_lastBlock(sha2_large_common_ctx_t *ctx, const void *block, uint16_t length_b){
    5b1a:	2f 92       	push	r2
    5b1c:	3f 92       	push	r3
    5b1e:	4f 92       	push	r4
    5b20:	5f 92       	push	r5
    5b22:	6f 92       	push	r6
    5b24:	7f 92       	push	r7
    5b26:	8f 92       	push	r8
    5b28:	9f 92       	push	r9
    5b2a:	af 92       	push	r10
    5b2c:	bf 92       	push	r11
    5b2e:	cf 92       	push	r12
    5b30:	df 92       	push	r13
    5b32:	ef 92       	push	r14
    5b34:	ff 92       	push	r15
    5b36:	0f 93       	push	r16
    5b38:	1f 93       	push	r17
    5b3a:	cf 93       	push	r28
    5b3c:	df 93       	push	r29
    5b3e:	cd b7       	in	r28, 0x3d	; 61
    5b40:	de b7       	in	r29, 0x3e	; 62
    5b42:	cb 58       	subi	r28, 0x8B	; 139
    5b44:	d1 09       	sbc	r29, r1
    5b46:	0f b6       	in	r0, 0x3f	; 63
    5b48:	f8 94       	cli
    5b4a:	de bf       	out	0x3e, r29	; 62
    5b4c:	0f be       	out	0x3f, r0	; 63
    5b4e:	cd bf       	out	0x3d, r28	; 61
    5b50:	c6 57       	subi	r28, 0x76	; 118
    5b52:	df 4f       	sbci	r29, 0xFF	; 255
    5b54:	99 83       	std	Y+1, r25	; 0x01
    5b56:	88 83       	st	Y, r24
    5b58:	ca 58       	subi	r28, 0x8A	; 138
    5b5a:	d0 40       	sbci	r29, 0x00	; 0
    5b5c:	c8 57       	subi	r28, 0x78	; 120
    5b5e:	df 4f       	sbci	r29, 0xFF	; 255
    5b60:	79 83       	std	Y+1, r23	; 0x01
    5b62:	68 83       	st	Y, r22
    5b64:	c8 58       	subi	r28, 0x88	; 136
    5b66:	d0 40       	sbci	r29, 0x00	; 0
    5b68:	ca 57       	subi	r28, 0x7A	; 122
    5b6a:	df 4f       	sbci	r29, 0xFF	; 255
    5b6c:	59 83       	std	Y+1, r21	; 0x01
    5b6e:	48 83       	st	Y, r20
    5b70:	c6 58       	subi	r28, 0x86	; 134
    5b72:	d0 40       	sbci	r29, 0x00	; 0
	while(length_b >= 1024){
    5b74:	41 15       	cp	r20, r1
    5b76:	24 e0       	ldi	r18, 0x04	; 4
    5b78:	52 07       	cpc	r21, r18
    5b7a:	d8 f1       	brcs	.+118    	; 0x5bf2 <sha2_large_common_lastBlock+0xd8>
    5b7c:	7a 01       	movw	r14, r20
    5b7e:	8b 01       	movw	r16, r22
    5b80:	6c 01       	movw	r12, r24
		sha2_large_common_nextBlock(ctx, block);
    5b82:	b8 01       	movw	r22, r16
    5b84:	c6 01       	movw	r24, r12
    5b86:	0e 94 77 24 	call	0x48ee	; 0x48ee <sha2_large_common_nextBlock>
		block = (uint8_t*)block + 1024/8;
    5b8a:	00 58       	subi	r16, 0x80	; 128
    5b8c:	1f 4f       	sbci	r17, 0xFF	; 255
		length_b -= 1024;
    5b8e:	34 e0       	ldi	r19, 0x04	; 4
    5b90:	f3 1a       	sub	r15, r19
	}while(i--);
	ctx->length += 1;
}

void sha2_large_common_lastBlock(sha2_large_common_ctx_t *ctx, const void *block, uint16_t length_b){
	while(length_b >= 1024){
    5b92:	e1 14       	cp	r14, r1
    5b94:	84 e0       	ldi	r24, 0x04	; 4
    5b96:	f8 06       	cpc	r15, r24
    5b98:	a0 f7       	brcc	.-24     	; 0x5b82 <sha2_large_common_lastBlock+0x68>
    5b9a:	ca 57       	subi	r28, 0x7A	; 122
    5b9c:	df 4f       	sbci	r29, 0xFF	; 255
    5b9e:	88 81       	ld	r24, Y
    5ba0:	99 81       	ldd	r25, Y+1	; 0x01
    5ba2:	c6 58       	subi	r28, 0x86	; 134
    5ba4:	d0 40       	sbci	r29, 0x00	; 0
    5ba6:	94 50       	subi	r25, 0x04	; 4
    5ba8:	89 2f       	mov	r24, r25
    5baa:	99 27       	eor	r25, r25
    5bac:	86 95       	lsr	r24
    5bae:	86 95       	lsr	r24
    5bb0:	01 96       	adiw	r24, 0x01	; 1
    5bb2:	96 95       	lsr	r25
    5bb4:	98 2f       	mov	r25, r24
    5bb6:	88 27       	eor	r24, r24
    5bb8:	97 95       	ror	r25
    5bba:	87 95       	ror	r24
    5bbc:	c8 57       	subi	r28, 0x78	; 120
    5bbe:	df 4f       	sbci	r29, 0xFF	; 255
    5bc0:	e8 81       	ld	r30, Y
    5bc2:	f9 81       	ldd	r31, Y+1	; 0x01
    5bc4:	c8 58       	subi	r28, 0x88	; 136
    5bc6:	d0 40       	sbci	r29, 0x00	; 0
    5bc8:	e8 0f       	add	r30, r24
    5bca:	f9 1f       	adc	r31, r25
    5bcc:	c8 57       	subi	r28, 0x78	; 120
    5bce:	df 4f       	sbci	r29, 0xFF	; 255
    5bd0:	f9 83       	std	Y+1, r31	; 0x01
    5bd2:	e8 83       	st	Y, r30
    5bd4:	c8 58       	subi	r28, 0x88	; 136
    5bd6:	d0 40       	sbci	r29, 0x00	; 0
    5bd8:	ca 57       	subi	r28, 0x7A	; 122
    5bda:	df 4f       	sbci	r29, 0xFF	; 255
    5bdc:	28 81       	ld	r18, Y
    5bde:	39 81       	ldd	r19, Y+1	; 0x01
    5be0:	c6 58       	subi	r28, 0x86	; 134
    5be2:	d0 40       	sbci	r29, 0x00	; 0
    5be4:	33 70       	andi	r19, 0x03	; 3
    5be6:	ca 57       	subi	r28, 0x7A	; 122
    5be8:	df 4f       	sbci	r29, 0xFF	; 255
    5bea:	39 83       	std	Y+1, r19	; 0x01
    5bec:	28 83       	st	Y, r18
    5bee:	c6 58       	subi	r28, 0x86	; 134
    5bf0:	d0 40       	sbci	r29, 0x00	; 0
		block = (uint8_t*)block + 1024/8;
		length_b -= 1024;
	}
	uint8_t buffer[1024/8];
	uint64_t len;
	len = ((uint64_t)ctx->length)*1024LL + length_b;
    5bf2:	c6 57       	subi	r28, 0x76	; 118
    5bf4:	df 4f       	sbci	r29, 0xFF	; 255
    5bf6:	e8 81       	ld	r30, Y
    5bf8:	f9 81       	ldd	r31, Y+1	; 0x01
    5bfa:	ca 58       	subi	r28, 0x8A	; 138
    5bfc:	d0 40       	sbci	r29, 0x00	; 0
    5bfe:	e0 5c       	subi	r30, 0xC0	; 192
    5c00:	ff 4f       	sbci	r31, 0xFF	; 255
    5c02:	80 80       	ld	r8, Z
    5c04:	91 80       	ldd	r9, Z+1	; 0x01
    5c06:	a2 80       	ldd	r10, Z+2	; 0x02
    5c08:	b3 80       	ldd	r11, Z+3	; 0x03
    5c0a:	94 01       	movw	r18, r8
    5c0c:	a5 01       	movw	r20, r10
    5c0e:	60 e0       	ldi	r22, 0x00	; 0
    5c10:	70 e0       	ldi	r23, 0x00	; 0
    5c12:	80 e0       	ldi	r24, 0x00	; 0
    5c14:	90 e0       	ldi	r25, 0x00	; 0
    5c16:	0a e0       	ldi	r16, 0x0A	; 10
    5c18:	d3 d5       	rcall	.+2982   	; 0x67c0 <__ashldi3>
    5c1a:	ca 57       	subi	r28, 0x7A	; 122
    5c1c:	df 4f       	sbci	r29, 0xFF	; 255
    5c1e:	e8 81       	ld	r30, Y
    5c20:	f9 81       	ldd	r31, Y+1	; 0x01
    5c22:	c6 58       	subi	r28, 0x86	; 134
    5c24:	d0 40       	sbci	r29, 0x00	; 0
    5c26:	5f 01       	movw	r10, r30
    5c28:	c1 2c       	mov	r12, r1
    5c2a:	d1 2c       	mov	r13, r1
    5c2c:	e1 2c       	mov	r14, r1
    5c2e:	f1 2c       	mov	r15, r1
    5c30:	00 e0       	ldi	r16, 0x00	; 0
    5c32:	10 e0       	ldi	r17, 0x00	; 0
    5c34:	17 d6       	rcall	.+3118   	; 0x6864 <__adddi3>
    5c36:	e2 2f       	mov	r30, r18
    5c38:	cc 57       	subi	r28, 0x7C	; 124
    5c3a:	df 4f       	sbci	r29, 0xFF	; 255
    5c3c:	38 83       	st	Y, r19
    5c3e:	c4 58       	subi	r28, 0x84	; 132
    5c40:	d0 40       	sbci	r29, 0x00	; 0
    5c42:	14 2f       	mov	r17, r20
    5c44:	b5 2f       	mov	r27, r21
    5c46:	a6 2f       	mov	r26, r22
    5c48:	cb 57       	subi	r28, 0x7B	; 123
    5c4a:	df 4f       	sbci	r29, 0xFF	; 255
    5c4c:	78 83       	st	Y, r23
    5c4e:	c5 58       	subi	r28, 0x85	; 133
    5c50:	d0 40       	sbci	r29, 0x00	; 0
    5c52:	1c 01       	movw	r2, r24
    5c54:	f8 e0       	ldi	r31, 0x08	; 8
};


static const
uint64_t change_endian64(uint64_t x){
	uint64_t r=0;
    5c56:	41 2c       	mov	r4, r1
    5c58:	51 2c       	mov	r5, r1
    5c5a:	61 2c       	mov	r6, r1
    5c5c:	71 2c       	mov	r7, r1
    5c5e:	81 2c       	mov	r8, r1
    5c60:	91 2c       	mov	r9, r1
    5c62:	a1 2c       	mov	r10, r1
	uint8_t i=8;
	do{
		r <<= 8;
    5c64:	2f 2d       	mov	r18, r15
    5c66:	34 2d       	mov	r19, r4
    5c68:	45 2d       	mov	r20, r5
    5c6a:	56 2d       	mov	r21, r6
    5c6c:	67 2d       	mov	r22, r7
    5c6e:	78 2d       	mov	r23, r8
    5c70:	89 2d       	mov	r24, r9
    5c72:	9a 2d       	mov	r25, r10
    5c74:	08 e0       	ldi	r16, 0x08	; 8
    5c76:	a4 d5       	rcall	.+2888   	; 0x67c0 <__ashldi3>
    5c78:	cf 57       	subi	r28, 0x7F	; 127
    5c7a:	df 4f       	sbci	r29, 0xFF	; 255
    5c7c:	38 83       	st	Y, r19
    5c7e:	c1 58       	subi	r28, 0x81	; 129
    5c80:	d0 40       	sbci	r29, 0x00	; 0
    5c82:	b4 2e       	mov	r11, r20
    5c84:	c5 2e       	mov	r12, r21
    5c86:	d6 2e       	mov	r13, r22
    5c88:	e7 2e       	mov	r14, r23
    5c8a:	ce 57       	subi	r28, 0x7E	; 126
    5c8c:	df 4f       	sbci	r29, 0xFF	; 255
    5c8e:	88 83       	st	Y, r24
    5c90:	c2 58       	subi	r28, 0x82	; 130
    5c92:	d0 40       	sbci	r29, 0x00	; 0
    5c94:	cd 57       	subi	r28, 0x7D	; 125
    5c96:	df 4f       	sbci	r29, 0xFF	; 255
    5c98:	98 83       	st	Y, r25
    5c9a:	c3 58       	subi	r28, 0x83	; 131
    5c9c:	d0 40       	sbci	r29, 0x00	; 0
		r |= 0xff&x;
    5c9e:	f2 2e       	mov	r15, r18
    5ca0:	fe 2a       	or	r15, r30
    5ca2:	43 2e       	mov	r4, r19
    5ca4:	54 2e       	mov	r5, r20
    5ca6:	36 01       	movw	r6, r12
    5ca8:	87 2e       	mov	r8, r23
    5caa:	98 2e       	mov	r9, r24
    5cac:	a9 2e       	mov	r10, r25
		x >>=8;
    5cae:	2e 2f       	mov	r18, r30
    5cb0:	cc 57       	subi	r28, 0x7C	; 124
    5cb2:	df 4f       	sbci	r29, 0xFF	; 255
    5cb4:	38 81       	ld	r19, Y
    5cb6:	c4 58       	subi	r28, 0x84	; 132
    5cb8:	d0 40       	sbci	r29, 0x00	; 0
    5cba:	41 2f       	mov	r20, r17
    5cbc:	5b 2f       	mov	r21, r27
    5cbe:	6a 2f       	mov	r22, r26
    5cc0:	cb 57       	subi	r28, 0x7B	; 123
    5cc2:	df 4f       	sbci	r29, 0xFF	; 255
    5cc4:	78 81       	ld	r23, Y
    5cc6:	c5 58       	subi	r28, 0x85	; 133
    5cc8:	d0 40       	sbci	r29, 0x00	; 0
    5cca:	c1 01       	movw	r24, r2
    5ccc:	94 d5       	rcall	.+2856   	; 0x67f6 <__lshrdi3>
    5cce:	e2 2f       	mov	r30, r18
    5cd0:	cc 57       	subi	r28, 0x7C	; 124
    5cd2:	df 4f       	sbci	r29, 0xFF	; 255
    5cd4:	38 83       	st	Y, r19
    5cd6:	c4 58       	subi	r28, 0x84	; 132
    5cd8:	d0 40       	sbci	r29, 0x00	; 0
    5cda:	14 2f       	mov	r17, r20
    5cdc:	b5 2f       	mov	r27, r21
    5cde:	a6 2f       	mov	r26, r22
    5ce0:	cb 57       	subi	r28, 0x7B	; 123
    5ce2:	df 4f       	sbci	r29, 0xFF	; 255
    5ce4:	78 83       	st	Y, r23
    5ce6:	c5 58       	subi	r28, 0x85	; 133
    5ce8:	d0 40       	sbci	r29, 0x00	; 0
    5cea:	1c 01       	movw	r2, r24
    5cec:	f1 50       	subi	r31, 0x01	; 1
	}while(--i);
    5cee:	09 f0       	breq	.+2      	; 0x5cf2 <sha2_large_common_lastBlock+0x1d8>
    5cf0:	b9 cf       	rjmp	.-142    	; 0x5c64 <sha2_large_common_lastBlock+0x14a>
	}
	uint8_t buffer[1024/8];
	uint64_t len;
	len = ((uint64_t)ctx->length)*1024LL + length_b;
	len = change_endian64(len);
	memset(buffer, 0, 1024/8);
    5cf2:	8e 01       	movw	r16, r28
    5cf4:	0f 5f       	subi	r16, 0xFF	; 255
    5cf6:	1f 4f       	sbci	r17, 0xFF	; 255
    5cf8:	80 e8       	ldi	r24, 0x80	; 128
    5cfa:	f8 01       	movw	r30, r16
    5cfc:	11 92       	st	Z+, r1
    5cfe:	8a 95       	dec	r24
    5d00:	e9 f7       	brne	.-6      	; 0x5cfc <sha2_large_common_lastBlock+0x1e2>
	memcpy(buffer, block, (length_b+7)/8);
    5d02:	ca 57       	subi	r28, 0x7A	; 122
    5d04:	df 4f       	sbci	r29, 0xFF	; 255
    5d06:	48 81       	ld	r20, Y
    5d08:	59 81       	ldd	r21, Y+1	; 0x01
    5d0a:	c6 58       	subi	r28, 0x86	; 134
    5d0c:	d0 40       	sbci	r29, 0x00	; 0
    5d0e:	49 5f       	subi	r20, 0xF9	; 249
    5d10:	5f 4f       	sbci	r21, 0xFF	; 255
    5d12:	56 95       	lsr	r21
    5d14:	47 95       	ror	r20
    5d16:	56 95       	lsr	r21
    5d18:	47 95       	ror	r20
    5d1a:	56 95       	lsr	r21
    5d1c:	47 95       	ror	r20
    5d1e:	c8 57       	subi	r28, 0x78	; 120
    5d20:	df 4f       	sbci	r29, 0xFF	; 255
    5d22:	68 81       	ld	r22, Y
    5d24:	79 81       	ldd	r23, Y+1	; 0x01
    5d26:	c8 58       	subi	r28, 0x88	; 136
    5d28:	d0 40       	sbci	r29, 0x00	; 0
    5d2a:	c8 01       	movw	r24, r16
    5d2c:	06 d6       	rcall	.+3084   	; 0x693a <memcpy>
	buffer[length_b/8] |= 0x80>>(length_b%8);
    5d2e:	ca 57       	subi	r28, 0x7A	; 122
    5d30:	df 4f       	sbci	r29, 0xFF	; 255
    5d32:	e8 81       	ld	r30, Y
    5d34:	f9 81       	ldd	r31, Y+1	; 0x01
    5d36:	c6 58       	subi	r28, 0x86	; 134
    5d38:	d0 40       	sbci	r29, 0x00	; 0
    5d3a:	f6 95       	lsr	r31
    5d3c:	e7 95       	ror	r30
    5d3e:	f6 95       	lsr	r31
    5d40:	e7 95       	ror	r30
    5d42:	f6 95       	lsr	r31
    5d44:	e7 95       	ror	r30
    5d46:	e0 0f       	add	r30, r16
    5d48:	f1 1f       	adc	r31, r17
    5d4a:	ca 57       	subi	r28, 0x7A	; 122
    5d4c:	df 4f       	sbci	r29, 0xFF	; 255
    5d4e:	28 81       	ld	r18, Y
    5d50:	39 81       	ldd	r19, Y+1	; 0x01
    5d52:	c6 58       	subi	r28, 0x86	; 134
    5d54:	d0 40       	sbci	r29, 0x00	; 0
    5d56:	27 70       	andi	r18, 0x07	; 7
    5d58:	33 27       	eor	r19, r19
    5d5a:	80 e8       	ldi	r24, 0x80	; 128
    5d5c:	90 e0       	ldi	r25, 0x00	; 0
    5d5e:	02 c0       	rjmp	.+4      	; 0x5d64 <sha2_large_common_lastBlock+0x24a>
    5d60:	95 95       	asr	r25
    5d62:	87 95       	ror	r24
    5d64:	2a 95       	dec	r18
    5d66:	e2 f7       	brpl	.-8      	; 0x5d60 <sha2_large_common_lastBlock+0x246>
    5d68:	90 81       	ld	r25, Z
    5d6a:	89 2b       	or	r24, r25
    5d6c:	80 83       	st	Z, r24
	if(length_b>1024-128-1){
    5d6e:	ca 57       	subi	r28, 0x7A	; 122
    5d70:	df 4f       	sbci	r29, 0xFF	; 255
    5d72:	28 81       	ld	r18, Y
    5d74:	39 81       	ldd	r19, Y+1	; 0x01
    5d76:	c6 58       	subi	r28, 0x86	; 134
    5d78:	d0 40       	sbci	r29, 0x00	; 0
    5d7a:	20 38       	cpi	r18, 0x80	; 128
    5d7c:	33 40       	sbci	r19, 0x03	; 3
    5d7e:	70 f0       	brcs	.+28     	; 0x5d9c <sha2_large_common_lastBlock+0x282>
		/* length goes into the next block */
		sha2_large_common_nextBlock(ctx, buffer);
    5d80:	b8 01       	movw	r22, r16
    5d82:	c6 57       	subi	r28, 0x76	; 118
    5d84:	df 4f       	sbci	r29, 0xFF	; 255
    5d86:	88 81       	ld	r24, Y
    5d88:	99 81       	ldd	r25, Y+1	; 0x01
    5d8a:	ca 58       	subi	r28, 0x8A	; 138
    5d8c:	d0 40       	sbci	r29, 0x00	; 0
    5d8e:	0e 94 77 24 	call	0x48ee	; 0x48ee <sha2_large_common_nextBlock>
		memset(buffer, 0, 120);
    5d92:	88 e7       	ldi	r24, 0x78	; 120
    5d94:	f8 01       	movw	r30, r16
    5d96:	11 92       	st	Z+, r1
    5d98:	8a 95       	dec	r24
    5d9a:	e9 f7       	brne	.-6      	; 0x5d96 <sha2_large_common_lastBlock+0x27c>
	}
	memcpy(&(buffer[128-8]), &len, 8);
    5d9c:	ea 96       	adiw	r28, 0x3a	; 58
    5d9e:	ff ae       	std	Y+63, r15	; 0x3f
    5da0:	ea 97       	sbiw	r28, 0x3a	; 58
    5da2:	cf 57       	subi	r28, 0x7F	; 127
    5da4:	df 4f       	sbci	r29, 0xFF	; 255
    5da6:	f8 81       	ld	r31, Y
    5da8:	c1 58       	subi	r28, 0x81	; 129
    5daa:	d0 40       	sbci	r29, 0x00	; 0
    5dac:	eb 96       	adiw	r28, 0x3b	; 59
    5dae:	ff af       	std	Y+63, r31	; 0x3f
    5db0:	eb 97       	sbiw	r28, 0x3b	; 59
    5db2:	ec 96       	adiw	r28, 0x3c	; 60
    5db4:	bf ae       	std	Y+63, r11	; 0x3f
    5db6:	ec 97       	sbiw	r28, 0x3c	; 60
    5db8:	ed 96       	adiw	r28, 0x3d	; 61
    5dba:	cf ae       	std	Y+63, r12	; 0x3f
    5dbc:	ed 97       	sbiw	r28, 0x3d	; 61
    5dbe:	ee 96       	adiw	r28, 0x3e	; 62
    5dc0:	df ae       	std	Y+63, r13	; 0x3f
    5dc2:	ee 97       	sbiw	r28, 0x3e	; 62
    5dc4:	ef 96       	adiw	r28, 0x3f	; 63
    5dc6:	ef ae       	std	Y+63, r14	; 0x3f
    5dc8:	ef 97       	sbiw	r28, 0x3f	; 63
    5dca:	ce 57       	subi	r28, 0x7E	; 126
    5dcc:	df 4f       	sbci	r29, 0xFF	; 255
    5dce:	28 81       	ld	r18, Y
    5dd0:	c2 58       	subi	r28, 0x82	; 130
    5dd2:	d0 40       	sbci	r29, 0x00	; 0
    5dd4:	c1 58       	subi	r28, 0x81	; 129
    5dd6:	df 4f       	sbci	r29, 0xFF	; 255
    5dd8:	28 83       	st	Y, r18
    5dda:	cf 57       	subi	r28, 0x7F	; 127
    5ddc:	d0 40       	sbci	r29, 0x00	; 0
    5dde:	cd 57       	subi	r28, 0x7D	; 125
    5de0:	df 4f       	sbci	r29, 0xFF	; 255
    5de2:	38 81       	ld	r19, Y
    5de4:	c3 58       	subi	r28, 0x83	; 131
    5de6:	d0 40       	sbci	r29, 0x00	; 0
    5de8:	c0 58       	subi	r28, 0x80	; 128
    5dea:	df 4f       	sbci	r29, 0xFF	; 255
    5dec:	38 83       	st	Y, r19
    5dee:	c0 58       	subi	r28, 0x80	; 128
    5df0:	d0 40       	sbci	r29, 0x00	; 0
	sha2_large_common_nextBlock(ctx, buffer);
    5df2:	b8 01       	movw	r22, r16
    5df4:	c6 57       	subi	r28, 0x76	; 118
    5df6:	df 4f       	sbci	r29, 0xFF	; 255
    5df8:	88 81       	ld	r24, Y
    5dfa:	99 81       	ldd	r25, Y+1	; 0x01
    5dfc:	ca 58       	subi	r28, 0x8A	; 138
    5dfe:	d0 40       	sbci	r29, 0x00	; 0
    5e00:	0e 94 77 24 	call	0x48ee	; 0x48ee <sha2_large_common_nextBlock>
}
    5e04:	c5 57       	subi	r28, 0x75	; 117
    5e06:	df 4f       	sbci	r29, 0xFF	; 255
    5e08:	0f b6       	in	r0, 0x3f	; 63
    5e0a:	f8 94       	cli
    5e0c:	de bf       	out	0x3e, r29	; 62
    5e0e:	0f be       	out	0x3f, r0	; 63
    5e10:	cd bf       	out	0x3d, r28	; 61
    5e12:	df 91       	pop	r29
    5e14:	cf 91       	pop	r28
    5e16:	1f 91       	pop	r17
    5e18:	0f 91       	pop	r16
    5e1a:	ff 90       	pop	r15
    5e1c:	ef 90       	pop	r14
    5e1e:	df 90       	pop	r13
    5e20:	cf 90       	pop	r12
    5e22:	bf 90       	pop	r11
    5e24:	af 90       	pop	r10
    5e26:	9f 90       	pop	r9
    5e28:	8f 90       	pop	r8
    5e2a:	7f 90       	pop	r7
    5e2c:	6f 90       	pop	r6
    5e2e:	5f 90       	pop	r5
    5e30:	4f 90       	pop	r4
    5e32:	3f 90       	pop	r3
    5e34:	2f 90       	pop	r2
    5e36:	08 95       	ret

00005e38 <sha2_small_common_nextBlock>:


/**
 * block must be, 512, Bit = 64, Byte, long !!!
 */
void sha2_small_common_nextBlock (sha2_small_common_ctx_t *state, const void *block){
    5e38:	2f 92       	push	r2
    5e3a:	3f 92       	push	r3
    5e3c:	4f 92       	push	r4
    5e3e:	5f 92       	push	r5
    5e40:	6f 92       	push	r6
    5e42:	7f 92       	push	r7
    5e44:	8f 92       	push	r8
    5e46:	9f 92       	push	r9
    5e48:	af 92       	push	r10
    5e4a:	bf 92       	push	r11
    5e4c:	cf 92       	push	r12
    5e4e:	df 92       	push	r13
    5e50:	ef 92       	push	r14
    5e52:	ff 92       	push	r15
    5e54:	0f 93       	push	r16
    5e56:	1f 93       	push	r17
    5e58:	cf 93       	push	r28
    5e5a:	df 93       	push	r29
    5e5c:	cd b7       	in	r28, 0x3d	; 61
    5e5e:	de b7       	in	r29, 0x3e	; 62
    5e60:	c2 57       	subi	r28, 0x72	; 114
    5e62:	d1 09       	sbc	r29, r1
    5e64:	0f b6       	in	r0, 0x3f	; 63
    5e66:	f8 94       	cli
    5e68:	de bf       	out	0x3e, r29	; 62
    5e6a:	0f be       	out	0x3f, r0	; 63
    5e6c:	cd bf       	out	0x3d, r28	; 61
    5e6e:	e3 96       	adiw	r28, 0x33	; 51
    5e70:	9f af       	std	Y+63, r25	; 0x3f
    5e72:	8e af       	std	Y+62, r24	; 0x3e
    5e74:	e3 97       	sbiw	r28, 0x33	; 51
    5e76:	db 01       	movw	r26, r22
    5e78:	8e 01       	movw	r16, r28
    5e7a:	0f 5f       	subi	r16, 0xFF	; 255
    5e7c:	1f 4f       	sbci	r17, 0xFF	; 255
    5e7e:	af 96       	adiw	r28, 0x2f	; 47
    5e80:	1f af       	std	Y+63, r17	; 0x3f
    5e82:	0e af       	std	Y+62, r16	; 0x3e
    5e84:	af 97       	sbiw	r28, 0x2f	; 47
    5e86:	1e 01       	movw	r2, r28
    5e88:	11 e4       	ldi	r17, 0x41	; 65
    5e8a:	21 0e       	add	r2, r17
    5e8c:	31 1c       	adc	r3, r1
    5e8e:	fe 01       	movw	r30, r28
    5e90:	31 96       	adiw	r30, 0x01	; 1
    5e92:	6d 91       	ld	r22, X+
    5e94:	7d 91       	ld	r23, X+
    5e96:	8d 91       	ld	r24, X+
    5e98:	9d 91       	ld	r25, X+
    5e9a:	8b d4       	rcall	.+2326   	; 0x67b2 <__bswapsi2>
	uint32_t a[8],t1,t2;

	/* init w */
#if defined LITTLE_ENDIAN
	for (i=0; i<16; ++i){
		w[i]= change_endian32(((uint32_t*)block)[i]);
    5e9c:	61 93       	st	Z+, r22
    5e9e:	71 93       	st	Z+, r23
    5ea0:	81 93       	st	Z+, r24
    5ea2:	91 93       	st	Z+, r25
	uint8_t  i;
	uint32_t a[8],t1,t2;

	/* init w */
#if defined LITTLE_ENDIAN
	for (i=0; i<16; ++i){
    5ea4:	e2 15       	cp	r30, r2
    5ea6:	f3 05       	cpc	r31, r3
    5ea8:	a1 f7       	brne	.-24     	; 0x5e92 <sha2_small_common_nextBlock+0x5a>
	for (i=16; i<64; ++i){
		w[i] = SIGMA_b(w[i-2]) + w[i-7] + SIGMA_a(w[i-15]) + w[i-16];
	}
*/
/* init working variables */
	memcpy((void*)a,(void*)(state->h), 8*4);
    5eaa:	80 e2       	ldi	r24, 0x20	; 32
    5eac:	e3 96       	adiw	r28, 0x33	; 51
    5eae:	ee ad       	ldd	r30, Y+62	; 0x3e
    5eb0:	ff ad       	ldd	r31, Y+63	; 0x3f
    5eb2:	e3 97       	sbiw	r28, 0x33	; 51
    5eb4:	de 01       	movw	r26, r28
    5eb6:	af 5b       	subi	r26, 0xBF	; 191
    5eb8:	bf 4f       	sbci	r27, 0xFF	; 255
    5eba:	01 90       	ld	r0, Z+
    5ebc:	0d 92       	st	X+, r0
    5ebe:	8a 95       	dec	r24
    5ec0:	e1 f7       	brne	.-8      	; 0x5eba <sha2_small_common_nextBlock+0x82>
    5ec2:	d1 01       	movw	r26, r2
    5ec4:	50 96       	adiw	r26, 0x10	; 16
    5ec6:	4d 90       	ld	r4, X+
    5ec8:	5d 90       	ld	r5, X+
    5eca:	6d 90       	ld	r6, X+
    5ecc:	7c 90       	ld	r7, X
    5ece:	53 97       	sbiw	r26, 0x13	; 19
    5ed0:	f1 01       	movw	r30, r2
    5ed2:	81 90       	ld	r8, Z+
    5ed4:	91 90       	ld	r9, Z+
    5ed6:	a1 90       	ld	r10, Z+
    5ed8:	b1 90       	ld	r11, Z+
    5eda:	e1 96       	adiw	r28, 0x31	; 49
    5edc:	ff af       	std	Y+63, r31	; 0x3f
    5ede:	ee af       	std	Y+62, r30	; 0x3e
    5ee0:	e1 97       	sbiw	r28, 0x31	; 49
    5ee2:	04 e3       	ldi	r16, 0x34	; 52
    5ee4:	13 e0       	ldi	r17, 0x03	; 3
    5ee6:	ad 96       	adiw	r28, 0x2d	; 45
    5ee8:	1f af       	std	Y+63, r17	; 0x3f
    5eea:	0e af       	std	Y+62, r16	; 0x3e
    5eec:	ad 97       	sbiw	r28, 0x2d	; 45
    5eee:	ab 96       	adiw	r28, 0x2b	; 43
    5ef0:	1f ae       	std	Y+63, r1	; 0x3f
    5ef2:	1e ae       	std	Y+62, r1	; 0x3e
    5ef4:	ab 97       	sbiw	r28, 0x2b	; 43
    5ef6:	53 c2       	rjmp	.+1190   	; 0x639e <sha2_small_common_nextBlock+0x566>
/* do the, fun stuff, */
	for (i=0; i<64; ++i){
		if(i<16){
			wx = w[i];
		}else{
			wx = SIGMA_b(w[14]) + w[9] + SIGMA_a(w[1]) + w[0];
    5ef8:	49 ad       	ldd	r20, Y+57	; 0x39
    5efa:	5a ad       	ldd	r21, Y+58	; 0x3a
    5efc:	6b ad       	ldd	r22, Y+59	; 0x3b
    5efe:	7c ad       	ldd	r23, Y+60	; 0x3c
    5f00:	8d 81       	ldd	r24, Y+5	; 0x05
    5f02:	9e 81       	ldd	r25, Y+6	; 0x06
    5f04:	af 81       	ldd	r26, Y+7	; 0x07
    5f06:	b8 85       	ldd	r27, Y+8	; 0x08
    5f08:	6a 01       	movw	r12, r20
    5f0a:	7b 01       	movw	r14, r22
    5f0c:	fd e0       	ldi	r31, 0x0D	; 13
    5f0e:	cc 0c       	add	r12, r12
    5f10:	dd 1c       	adc	r13, r13
    5f12:	ee 1c       	adc	r14, r14
    5f14:	ff 1c       	adc	r15, r15
    5f16:	fa 95       	dec	r31
    5f18:	d1 f7       	brne	.-12     	; 0x5f0e <sha2_small_common_nextBlock+0xd6>
    5f1a:	8a 01       	movw	r16, r20
    5f1c:	9b 01       	movw	r18, r22
    5f1e:	e3 e1       	ldi	r30, 0x13	; 19
    5f20:	36 95       	lsr	r19
    5f22:	27 95       	ror	r18
    5f24:	17 95       	ror	r17
    5f26:	07 95       	ror	r16
    5f28:	ea 95       	dec	r30
    5f2a:	d1 f7       	brne	.-12     	; 0x5f20 <sha2_small_common_nextBlock+0xe8>
    5f2c:	c0 2a       	or	r12, r16
    5f2e:	d1 2a       	or	r13, r17
    5f30:	e2 2a       	or	r14, r18
    5f32:	f3 2a       	or	r15, r19
    5f34:	a9 96       	adiw	r28, 0x29	; 41
    5f36:	cc ae       	std	Y+60, r12	; 0x3c
    5f38:	dd ae       	std	Y+61, r13	; 0x3d
    5f3a:	ee ae       	std	Y+62, r14	; 0x3e
    5f3c:	ff ae       	std	Y+63, r15	; 0x3f
    5f3e:	a9 97       	sbiw	r28, 0x29	; 41
    5f40:	7a 01       	movw	r14, r20
    5f42:	8b 01       	movw	r16, r22
    5f44:	ff e0       	ldi	r31, 0x0F	; 15
    5f46:	ee 0c       	add	r14, r14
    5f48:	ff 1c       	adc	r15, r15
    5f4a:	00 1f       	adc	r16, r16
    5f4c:	11 1f       	adc	r17, r17
    5f4e:	fa 95       	dec	r31
    5f50:	d1 f7       	brne	.-12     	; 0x5f46 <sha2_small_common_nextBlock+0x10e>
    5f52:	a5 96       	adiw	r28, 0x25	; 37
    5f54:	ec ae       	std	Y+60, r14	; 0x3c
    5f56:	fd ae       	std	Y+61, r15	; 0x3d
    5f58:	0e af       	std	Y+62, r16	; 0x3e
    5f5a:	1f af       	std	Y+63, r17	; 0x3f
    5f5c:	a5 97       	sbiw	r28, 0x25	; 37
    5f5e:	8a 01       	movw	r16, r20
    5f60:	9b 01       	movw	r18, r22
    5f62:	e1 e1       	ldi	r30, 0x11	; 17
    5f64:	36 95       	lsr	r19
    5f66:	27 95       	ror	r18
    5f68:	17 95       	ror	r17
    5f6a:	07 95       	ror	r16
    5f6c:	ea 95       	dec	r30
    5f6e:	d1 f7       	brne	.-12     	; 0x5f64 <sha2_small_common_nextBlock+0x12c>
    5f70:	a5 96       	adiw	r28, 0x25	; 37
    5f72:	cc ac       	ldd	r12, Y+60	; 0x3c
    5f74:	dd ac       	ldd	r13, Y+61	; 0x3d
    5f76:	ee ac       	ldd	r14, Y+62	; 0x3e
    5f78:	ff ac       	ldd	r15, Y+63	; 0x3f
    5f7a:	a5 97       	sbiw	r28, 0x25	; 37
    5f7c:	0c 29       	or	r16, r12
    5f7e:	1d 29       	or	r17, r13
    5f80:	2e 29       	or	r18, r14
    5f82:	3f 29       	or	r19, r15
    5f84:	a9 96       	adiw	r28, 0x29	; 41
    5f86:	cc ac       	ldd	r12, Y+60	; 0x3c
    5f88:	dd ac       	ldd	r13, Y+61	; 0x3d
    5f8a:	ee ac       	ldd	r14, Y+62	; 0x3e
    5f8c:	ff ac       	ldd	r15, Y+63	; 0x3f
    5f8e:	a9 97       	sbiw	r28, 0x29	; 41
    5f90:	0c 25       	eor	r16, r12
    5f92:	1d 25       	eor	r17, r13
    5f94:	2e 25       	eor	r18, r14
    5f96:	3f 25       	eor	r19, r15
    5f98:	fa e0       	ldi	r31, 0x0A	; 10
    5f9a:	76 95       	lsr	r23
    5f9c:	67 95       	ror	r22
    5f9e:	57 95       	ror	r21
    5fa0:	47 95       	ror	r20
    5fa2:	fa 95       	dec	r31
    5fa4:	d1 f7       	brne	.-12     	; 0x5f9a <sha2_small_common_nextBlock+0x162>
    5fa6:	40 27       	eor	r20, r16
    5fa8:	51 27       	eor	r21, r17
    5faa:	62 27       	eor	r22, r18
    5fac:	73 27       	eor	r23, r19
    5fae:	cd a0       	ldd	r12, Y+37	; 0x25
    5fb0:	de a0       	ldd	r13, Y+38	; 0x26
    5fb2:	ef a0       	ldd	r14, Y+39	; 0x27
    5fb4:	f8 a4       	ldd	r15, Y+40	; 0x28
    5fb6:	09 81       	ldd	r16, Y+1	; 0x01
    5fb8:	1a 81       	ldd	r17, Y+2	; 0x02
    5fba:	2b 81       	ldd	r18, Y+3	; 0x03
    5fbc:	3c 81       	ldd	r19, Y+4	; 0x04
    5fbe:	c0 0e       	add	r12, r16
    5fc0:	d1 1e       	adc	r13, r17
    5fc2:	e2 1e       	adc	r14, r18
    5fc4:	f3 1e       	adc	r15, r19
    5fc6:	c4 0e       	add	r12, r20
    5fc8:	d5 1e       	adc	r13, r21
    5fca:	e6 1e       	adc	r14, r22
    5fcc:	f7 1e       	adc	r15, r23
    5fce:	8c 01       	movw	r16, r24
    5fd0:	9d 01       	movw	r18, r26
    5fd2:	4e e0       	ldi	r20, 0x0E	; 14
    5fd4:	00 0f       	add	r16, r16
    5fd6:	11 1f       	adc	r17, r17
    5fd8:	22 1f       	adc	r18, r18
    5fda:	33 1f       	adc	r19, r19
    5fdc:	4a 95       	dec	r20
    5fde:	d1 f7       	brne	.-12     	; 0x5fd4 <sha2_small_common_nextBlock+0x19c>
    5fe0:	ac 01       	movw	r20, r24
    5fe2:	bd 01       	movw	r22, r26
    5fe4:	e2 e1       	ldi	r30, 0x12	; 18
    5fe6:	76 95       	lsr	r23
    5fe8:	67 95       	ror	r22
    5fea:	57 95       	ror	r21
    5fec:	47 95       	ror	r20
    5fee:	ea 95       	dec	r30
    5ff0:	d1 f7       	brne	.-12     	; 0x5fe6 <sha2_small_common_nextBlock+0x1ae>
    5ff2:	04 2b       	or	r16, r20
    5ff4:	15 2b       	or	r17, r21
    5ff6:	26 2b       	or	r18, r22
    5ff8:	37 2b       	or	r19, r23
    5ffa:	a5 96       	adiw	r28, 0x25	; 37
    5ffc:	0c af       	std	Y+60, r16	; 0x3c
    5ffe:	1d af       	std	Y+61, r17	; 0x3d
    6000:	2e af       	std	Y+62, r18	; 0x3e
    6002:	3f af       	std	Y+63, r19	; 0x3f
    6004:	a5 97       	sbiw	r28, 0x25	; 37
    6006:	ac 01       	movw	r20, r24
    6008:	bd 01       	movw	r22, r26
    600a:	f7 e0       	ldi	r31, 0x07	; 7
    600c:	76 95       	lsr	r23
    600e:	67 95       	ror	r22
    6010:	57 95       	ror	r21
    6012:	47 95       	ror	r20
    6014:	fa 95       	dec	r31
    6016:	d1 f7       	brne	.-12     	; 0x600c <sha2_small_common_nextBlock+0x1d4>
    6018:	8c 01       	movw	r16, r24
    601a:	9d 01       	movw	r18, r26
    601c:	e9 e1       	ldi	r30, 0x19	; 25
    601e:	00 0f       	add	r16, r16
    6020:	11 1f       	adc	r17, r17
    6022:	22 1f       	adc	r18, r18
    6024:	33 1f       	adc	r19, r19
    6026:	ea 95       	dec	r30
    6028:	d1 f7       	brne	.-12     	; 0x601e <sha2_small_common_nextBlock+0x1e6>
    602a:	04 2b       	or	r16, r20
    602c:	15 2b       	or	r17, r21
    602e:	26 2b       	or	r18, r22
    6030:	37 2b       	or	r19, r23
    6032:	a5 96       	adiw	r28, 0x25	; 37
    6034:	4c ad       	ldd	r20, Y+60	; 0x3c
    6036:	5d ad       	ldd	r21, Y+61	; 0x3d
    6038:	6e ad       	ldd	r22, Y+62	; 0x3e
    603a:	7f ad       	ldd	r23, Y+63	; 0x3f
    603c:	a5 97       	sbiw	r28, 0x25	; 37
    603e:	04 27       	eor	r16, r20
    6040:	15 27       	eor	r17, r21
    6042:	26 27       	eor	r18, r22
    6044:	37 27       	eor	r19, r23
    6046:	f3 e0       	ldi	r31, 0x03	; 3
    6048:	b6 95       	lsr	r27
    604a:	a7 95       	ror	r26
    604c:	97 95       	ror	r25
    604e:	87 95       	ror	r24
    6050:	fa 95       	dec	r31
    6052:	d1 f7       	brne	.-12     	; 0x6048 <sha2_small_common_nextBlock+0x210>
    6054:	08 27       	eor	r16, r24
    6056:	19 27       	eor	r17, r25
    6058:	2a 27       	eor	r18, r26
    605a:	3b 27       	eor	r19, r27
    605c:	c7 01       	movw	r24, r14
    605e:	b6 01       	movw	r22, r12
    6060:	60 0f       	add	r22, r16
    6062:	71 1f       	adc	r23, r17
    6064:	82 1f       	adc	r24, r18
    6066:	93 1f       	adc	r25, r19
    6068:	a9 96       	adiw	r28, 0x29	; 41
    606a:	6c af       	std	Y+60, r22	; 0x3c
    606c:	7d af       	std	Y+61, r23	; 0x3d
    606e:	8e af       	std	Y+62, r24	; 0x3e
    6070:	9f af       	std	Y+63, r25	; 0x3f
    6072:	a9 97       	sbiw	r28, 0x29	; 41
			memmove(&(w[0]), &(w[1]), 15*4);
    6074:	4c e3       	ldi	r20, 0x3C	; 60
    6076:	50 e0       	ldi	r21, 0x00	; 0
    6078:	be 01       	movw	r22, r28
    607a:	6b 5f       	subi	r22, 0xFB	; 251
    607c:	7f 4f       	sbci	r23, 0xFF	; 255
    607e:	ce 01       	movw	r24, r28
    6080:	01 96       	adiw	r24, 0x01	; 1
    6082:	64 d4       	rcall	.+2248   	; 0x694c <memmove>
			w[15] = wx;
    6084:	a9 96       	adiw	r28, 0x29	; 41
    6086:	cc ac       	ldd	r12, Y+60	; 0x3c
    6088:	dd ac       	ldd	r13, Y+61	; 0x3d
    608a:	ee ac       	ldd	r14, Y+62	; 0x3e
    608c:	ff ac       	ldd	r15, Y+63	; 0x3f
    608e:	a9 97       	sbiw	r28, 0x29	; 41
    6090:	21 96       	adiw	r28, 0x01	; 1
    6092:	cc ae       	std	Y+60, r12	; 0x3c
    6094:	dd ae       	std	Y+61, r13	; 0x3d
    6096:	ee ae       	std	Y+62, r14	; 0x3e
    6098:	ff ae       	std	Y+63, r15	; 0x3f
    609a:	21 97       	sbiw	r28, 0x01	; 1
		}
		t1 = a[7] + SIGMA_1(a[4]) + CH(a[4],a[5],a[6]) + pgm_read_dword(&k[i]) + wx;
    609c:	ad 96       	adiw	r28, 0x2d	; 45
    609e:	ee ad       	ldd	r30, Y+62	; 0x3e
    60a0:	ff ad       	ldd	r31, Y+63	; 0x3f
    60a2:	ad 97       	sbiw	r28, 0x2d	; 45
    60a4:	e5 90       	lpm	r14, Z+
    60a6:	f5 90       	lpm	r15, Z+
    60a8:	05 91       	lpm	r16, Z+
    60aa:	14 91       	lpm	r17, Z
    60ac:	a5 96       	adiw	r28, 0x25	; 37
    60ae:	ec ae       	std	Y+60, r14	; 0x3c
    60b0:	fd ae       	std	Y+61, r15	; 0x3d
    60b2:	0e af       	std	Y+62, r16	; 0x3e
    60b4:	1f af       	std	Y+63, r17	; 0x3f
    60b6:	a5 97       	sbiw	r28, 0x25	; 37
    60b8:	b3 01       	movw	r22, r6
    60ba:	a2 01       	movw	r20, r4
    60bc:	40 95       	com	r20
    60be:	50 95       	com	r21
    60c0:	60 95       	com	r22
    60c2:	70 95       	com	r23
    60c4:	f1 01       	movw	r30, r2
    60c6:	80 8d       	ldd	r24, Z+24	; 0x18
    60c8:	91 8d       	ldd	r25, Z+25	; 0x19
    60ca:	a2 8d       	ldd	r26, Z+26	; 0x1a
    60cc:	b3 8d       	ldd	r27, Z+27	; 0x1b
    60ce:	6a 01       	movw	r12, r20
    60d0:	7b 01       	movw	r14, r22
    60d2:	c8 22       	and	r12, r24
    60d4:	d9 22       	and	r13, r25
    60d6:	ea 22       	and	r14, r26
    60d8:	fb 22       	and	r15, r27
    60da:	44 89       	ldd	r20, Z+20	; 0x14
    60dc:	55 89       	ldd	r21, Z+21	; 0x15
    60de:	66 89       	ldd	r22, Z+22	; 0x16
    60e0:	77 89       	ldd	r23, Z+23	; 0x17
    60e2:	d3 01       	movw	r26, r6
    60e4:	c2 01       	movw	r24, r4
    60e6:	84 23       	and	r24, r20
    60e8:	95 23       	and	r25, r21
    60ea:	a6 23       	and	r26, r22
    60ec:	b7 23       	and	r27, r23
    60ee:	b7 01       	movw	r22, r14
    60f0:	a6 01       	movw	r20, r12
    60f2:	48 27       	eor	r20, r24
    60f4:	59 27       	eor	r21, r25
    60f6:	6a 27       	eor	r22, r26
    60f8:	7b 27       	eor	r23, r27
    60fa:	93 01       	movw	r18, r6
    60fc:	82 01       	movw	r16, r4
    60fe:	8b e0       	ldi	r24, 0x0B	; 11
    6100:	36 95       	lsr	r19
    6102:	27 95       	ror	r18
    6104:	17 95       	ror	r17
    6106:	07 95       	ror	r16
    6108:	8a 95       	dec	r24
    610a:	d1 f7       	brne	.-12     	; 0x6100 <sha2_small_common_nextBlock+0x2c8>
    610c:	d3 01       	movw	r26, r6
    610e:	c2 01       	movw	r24, r4
    6110:	07 2e       	mov	r0, r23
    6112:	75 e1       	ldi	r23, 0x15	; 21
    6114:	88 0f       	add	r24, r24
    6116:	99 1f       	adc	r25, r25
    6118:	aa 1f       	adc	r26, r26
    611a:	bb 1f       	adc	r27, r27
    611c:	7a 95       	dec	r23
    611e:	d1 f7       	brne	.-12     	; 0x6114 <sha2_small_common_nextBlock+0x2dc>
    6120:	70 2d       	mov	r23, r0
    6122:	08 2b       	or	r16, r24
    6124:	19 2b       	or	r17, r25
    6126:	2a 2b       	or	r18, r26
    6128:	3b 2b       	or	r19, r27
    612a:	73 01       	movw	r14, r6
    612c:	62 01       	movw	r12, r4
    612e:	86 e0       	ldi	r24, 0x06	; 6
    6130:	f6 94       	lsr	r15
    6132:	e7 94       	ror	r14
    6134:	d7 94       	ror	r13
    6136:	c7 94       	ror	r12
    6138:	8a 95       	dec	r24
    613a:	d1 f7       	brne	.-12     	; 0x6130 <sha2_small_common_nextBlock+0x2f8>
    613c:	d3 01       	movw	r26, r6
    613e:	c2 01       	movw	r24, r4
    6140:	07 2e       	mov	r0, r23
    6142:	7a e1       	ldi	r23, 0x1A	; 26
    6144:	88 0f       	add	r24, r24
    6146:	99 1f       	adc	r25, r25
    6148:	aa 1f       	adc	r26, r26
    614a:	bb 1f       	adc	r27, r27
    614c:	7a 95       	dec	r23
    614e:	d1 f7       	brne	.-12     	; 0x6144 <sha2_small_common_nextBlock+0x30c>
    6150:	70 2d       	mov	r23, r0
    6152:	8c 29       	or	r24, r12
    6154:	9d 29       	or	r25, r13
    6156:	ae 29       	or	r26, r14
    6158:	bf 29       	or	r27, r15
    615a:	80 27       	eor	r24, r16
    615c:	91 27       	eor	r25, r17
    615e:	a2 27       	eor	r26, r18
    6160:	b3 27       	eor	r27, r19
    6162:	93 01       	movw	r18, r6
    6164:	82 01       	movw	r16, r4
    6166:	00 0f       	add	r16, r16
    6168:	11 1f       	adc	r17, r17
    616a:	22 1f       	adc	r18, r18
    616c:	33 1f       	adc	r19, r19
    616e:	00 0f       	add	r16, r16
    6170:	11 1f       	adc	r17, r17
    6172:	22 1f       	adc	r18, r18
    6174:	33 1f       	adc	r19, r19
    6176:	00 0f       	add	r16, r16
    6178:	11 1f       	adc	r17, r17
    617a:	22 1f       	adc	r18, r18
    617c:	33 1f       	adc	r19, r19
    617e:	00 0f       	add	r16, r16
    6180:	11 1f       	adc	r17, r17
    6182:	22 1f       	adc	r18, r18
    6184:	33 1f       	adc	r19, r19
    6186:	00 0f       	add	r16, r16
    6188:	11 1f       	adc	r17, r17
    618a:	22 1f       	adc	r18, r18
    618c:	33 1f       	adc	r19, r19
    618e:	00 0f       	add	r16, r16
    6190:	11 1f       	adc	r17, r17
    6192:	22 1f       	adc	r18, r18
    6194:	33 1f       	adc	r19, r19
    6196:	00 0f       	add	r16, r16
    6198:	11 1f       	adc	r17, r17
    619a:	22 1f       	adc	r18, r18
    619c:	33 1f       	adc	r19, r19
    619e:	03 2e       	mov	r0, r19
    61a0:	39 e1       	ldi	r19, 0x19	; 25
    61a2:	76 94       	lsr	r7
    61a4:	67 94       	ror	r6
    61a6:	57 94       	ror	r5
    61a8:	47 94       	ror	r4
    61aa:	3a 95       	dec	r19
    61ac:	d1 f7       	brne	.-12     	; 0x61a2 <sha2_small_common_nextBlock+0x36a>
    61ae:	30 2d       	mov	r19, r0
    61b0:	04 29       	or	r16, r4
    61b2:	15 29       	or	r17, r5
    61b4:	26 29       	or	r18, r6
    61b6:	37 29       	or	r19, r7
    61b8:	80 27       	eor	r24, r16
    61ba:	91 27       	eor	r25, r17
    61bc:	a2 27       	eor	r26, r18
    61be:	b3 27       	eor	r27, r19
    61c0:	48 0f       	add	r20, r24
    61c2:	59 1f       	adc	r21, r25
    61c4:	6a 1f       	adc	r22, r26
    61c6:	7b 1f       	adc	r23, r27
    61c8:	84 8d       	ldd	r24, Z+28	; 0x1c
    61ca:	95 8d       	ldd	r25, Z+29	; 0x1d
    61cc:	a6 8d       	ldd	r26, Z+30	; 0x1e
    61ce:	b7 8d       	ldd	r27, Z+31	; 0x1f
    61d0:	48 0f       	add	r20, r24
    61d2:	59 1f       	adc	r21, r25
    61d4:	6a 1f       	adc	r22, r26
    61d6:	7b 1f       	adc	r23, r27
    61d8:	a9 96       	adiw	r28, 0x29	; 41
    61da:	cc ac       	ldd	r12, Y+60	; 0x3c
    61dc:	dd ac       	ldd	r13, Y+61	; 0x3d
    61de:	ee ac       	ldd	r14, Y+62	; 0x3e
    61e0:	ff ac       	ldd	r15, Y+63	; 0x3f
    61e2:	a9 97       	sbiw	r28, 0x29	; 41
    61e4:	c4 0e       	add	r12, r20
    61e6:	d5 1e       	adc	r13, r21
    61e8:	e6 1e       	adc	r14, r22
    61ea:	f7 1e       	adc	r15, r23
    61ec:	a5 96       	adiw	r28, 0x25	; 37
    61ee:	0c ad       	ldd	r16, Y+60	; 0x3c
    61f0:	1d ad       	ldd	r17, Y+61	; 0x3d
    61f2:	2e ad       	ldd	r18, Y+62	; 0x3e
    61f4:	3f ad       	ldd	r19, Y+63	; 0x3f
    61f6:	a5 97       	sbiw	r28, 0x25	; 37
    61f8:	0c 0d       	add	r16, r12
    61fa:	1d 1d       	adc	r17, r13
    61fc:	2e 1d       	adc	r18, r14
    61fe:	3f 1d       	adc	r19, r15
    6200:	a5 96       	adiw	r28, 0x25	; 37
    6202:	0c af       	std	Y+60, r16	; 0x3c
    6204:	1d af       	std	Y+61, r17	; 0x3d
    6206:	2e af       	std	Y+62, r18	; 0x3e
    6208:	3f af       	std	Y+63, r19	; 0x3f
    620a:	a5 97       	sbiw	r28, 0x25	; 37
		t2 = SIGMA_0(a[0]) + MAJ(a[0],a[1],a[2]);
    620c:	c4 80       	ldd	r12, Z+4	; 0x04
    620e:	d5 80       	ldd	r13, Z+5	; 0x05
    6210:	e6 80       	ldd	r14, Z+6	; 0x06
    6212:	f7 80       	ldd	r15, Z+7	; 0x07
    6214:	a9 96       	adiw	r28, 0x29	; 41
    6216:	cc ae       	std	Y+60, r12	; 0x3c
    6218:	dd ae       	std	Y+61, r13	; 0x3d
    621a:	ee ae       	std	Y+62, r14	; 0x3e
    621c:	ff ae       	std	Y+63, r15	; 0x3f
    621e:	a9 97       	sbiw	r28, 0x29	; 41
    6220:	c0 84       	ldd	r12, Z+8	; 0x08
    6222:	d1 84       	ldd	r13, Z+9	; 0x09
    6224:	e2 84       	ldd	r14, Z+10	; 0x0a
    6226:	f3 84       	ldd	r15, Z+11	; 0x0b
		memmove(&(a[1]), &(a[0]), 7*4); 	/* a[7]=a[6]; a[6]=a[5]; a[5]=a[4]; a[4]=a[3]; a[3]=a[2]; a[2]=a[1]; a[1]=a[0]; */
    6228:	4c e1       	ldi	r20, 0x1C	; 28
    622a:	50 e0       	ldi	r21, 0x00	; 0
    622c:	b1 01       	movw	r22, r2
    622e:	e1 96       	adiw	r28, 0x31	; 49
    6230:	8e ad       	ldd	r24, Y+62	; 0x3e
    6232:	9f ad       	ldd	r25, Y+63	; 0x3f
    6234:	e1 97       	sbiw	r28, 0x31	; 49
    6236:	8a d3       	rcall	.+1812   	; 0x694c <memmove>
		a[4] += t1;
    6238:	f1 01       	movw	r30, r2
    623a:	40 88       	ldd	r4, Z+16	; 0x10
    623c:	51 88       	ldd	r5, Z+17	; 0x11
    623e:	62 88       	ldd	r6, Z+18	; 0x12
    6240:	73 88       	ldd	r7, Z+19	; 0x13
    6242:	a5 96       	adiw	r28, 0x25	; 37
    6244:	0c ad       	ldd	r16, Y+60	; 0x3c
    6246:	1d ad       	ldd	r17, Y+61	; 0x3d
    6248:	2e ad       	ldd	r18, Y+62	; 0x3e
    624a:	3f ad       	ldd	r19, Y+63	; 0x3f
    624c:	a5 97       	sbiw	r28, 0x25	; 37
    624e:	40 0e       	add	r4, r16
    6250:	51 1e       	adc	r5, r17
    6252:	62 1e       	adc	r6, r18
    6254:	73 1e       	adc	r7, r19
    6256:	40 8a       	std	Z+16, r4	; 0x10
    6258:	51 8a       	std	Z+17, r5	; 0x11
    625a:	62 8a       	std	Z+18, r6	; 0x12
    625c:	73 8a       	std	Z+19, r7	; 0x13
		a[0] = t1 + t2;
    625e:	b5 01       	movw	r22, r10
    6260:	a4 01       	movw	r20, r8
    6262:	8d e0       	ldi	r24, 0x0D	; 13
    6264:	76 95       	lsr	r23
    6266:	67 95       	ror	r22
    6268:	57 95       	ror	r21
    626a:	47 95       	ror	r20
    626c:	8a 95       	dec	r24
    626e:	d1 f7       	brne	.-12     	; 0x6264 <sha2_small_common_nextBlock+0x42c>
    6270:	d5 01       	movw	r26, r10
    6272:	c4 01       	movw	r24, r8
    6274:	23 e1       	ldi	r18, 0x13	; 19
    6276:	88 0f       	add	r24, r24
    6278:	99 1f       	adc	r25, r25
    627a:	aa 1f       	adc	r26, r26
    627c:	bb 1f       	adc	r27, r27
    627e:	2a 95       	dec	r18
    6280:	d1 f7       	brne	.-12     	; 0x6276 <sha2_small_common_nextBlock+0x43e>
    6282:	84 2b       	or	r24, r20
    6284:	95 2b       	or	r25, r21
    6286:	a6 2b       	or	r26, r22
    6288:	b7 2b       	or	r27, r23
    628a:	b5 01       	movw	r22, r10
    628c:	a4 01       	movw	r20, r8
    628e:	76 95       	lsr	r23
    6290:	67 95       	ror	r22
    6292:	57 95       	ror	r21
    6294:	47 95       	ror	r20
    6296:	76 95       	lsr	r23
    6298:	67 95       	ror	r22
    629a:	57 95       	ror	r21
    629c:	47 95       	ror	r20
    629e:	95 01       	movw	r18, r10
    62a0:	84 01       	movw	r16, r8
    62a2:	ee e1       	ldi	r30, 0x1E	; 30
    62a4:	00 0f       	add	r16, r16
    62a6:	11 1f       	adc	r17, r17
    62a8:	22 1f       	adc	r18, r18
    62aa:	33 1f       	adc	r19, r19
    62ac:	ea 95       	dec	r30
    62ae:	d1 f7       	brne	.-12     	; 0x62a4 <sha2_small_common_nextBlock+0x46c>
    62b0:	40 2b       	or	r20, r16
    62b2:	51 2b       	or	r21, r17
    62b4:	62 2b       	or	r22, r18
    62b6:	73 2b       	or	r23, r19
    62b8:	48 27       	eor	r20, r24
    62ba:	59 27       	eor	r21, r25
    62bc:	6a 27       	eor	r22, r26
    62be:	7b 27       	eor	r23, r27
    62c0:	95 01       	movw	r18, r10
    62c2:	84 01       	movw	r16, r8
    62c4:	fa e0       	ldi	r31, 0x0A	; 10
    62c6:	00 0f       	add	r16, r16
    62c8:	11 1f       	adc	r17, r17
    62ca:	22 1f       	adc	r18, r18
    62cc:	33 1f       	adc	r19, r19
    62ce:	fa 95       	dec	r31
    62d0:	d1 f7       	brne	.-12     	; 0x62c6 <sha2_small_common_nextBlock+0x48e>
    62d2:	d5 01       	movw	r26, r10
    62d4:	c4 01       	movw	r24, r8
    62d6:	e6 e1       	ldi	r30, 0x16	; 22
    62d8:	b6 95       	lsr	r27
    62da:	a7 95       	ror	r26
    62dc:	97 95       	ror	r25
    62de:	87 95       	ror	r24
    62e0:	ea 95       	dec	r30
    62e2:	d1 f7       	brne	.-12     	; 0x62d8 <sha2_small_common_nextBlock+0x4a0>
    62e4:	80 2b       	or	r24, r16
    62e6:	91 2b       	or	r25, r17
    62e8:	a2 2b       	or	r26, r18
    62ea:	b3 2b       	or	r27, r19
    62ec:	48 27       	eor	r20, r24
    62ee:	59 27       	eor	r21, r25
    62f0:	6a 27       	eor	r22, r26
    62f2:	7b 27       	eor	r23, r27
    62f4:	a9 96       	adiw	r28, 0x29	; 41
    62f6:	8c ad       	ldd	r24, Y+60	; 0x3c
    62f8:	9d ad       	ldd	r25, Y+61	; 0x3d
    62fa:	ae ad       	ldd	r26, Y+62	; 0x3e
    62fc:	bf ad       	ldd	r27, Y+63	; 0x3f
    62fe:	a9 97       	sbiw	r28, 0x29	; 41
    6300:	8c 25       	eor	r24, r12
    6302:	9d 25       	eor	r25, r13
    6304:	ae 25       	eor	r26, r14
    6306:	bf 25       	eor	r27, r15
    6308:	88 21       	and	r24, r8
    630a:	99 21       	and	r25, r9
    630c:	aa 21       	and	r26, r10
    630e:	bb 21       	and	r27, r11
    6310:	a9 96       	adiw	r28, 0x29	; 41
    6312:	0c ad       	ldd	r16, Y+60	; 0x3c
    6314:	1d ad       	ldd	r17, Y+61	; 0x3d
    6316:	2e ad       	ldd	r18, Y+62	; 0x3e
    6318:	3f ad       	ldd	r19, Y+63	; 0x3f
    631a:	a9 97       	sbiw	r28, 0x29	; 41
    631c:	c0 22       	and	r12, r16
    631e:	d1 22       	and	r13, r17
    6320:	e2 22       	and	r14, r18
    6322:	f3 22       	and	r15, r19
    6324:	c8 26       	eor	r12, r24
    6326:	d9 26       	eor	r13, r25
    6328:	ea 26       	eor	r14, r26
    632a:	fb 26       	eor	r15, r27
    632c:	4c 0d       	add	r20, r12
    632e:	5d 1d       	adc	r21, r13
    6330:	6e 1d       	adc	r22, r14
    6332:	7f 1d       	adc	r23, r15
    6334:	a5 96       	adiw	r28, 0x25	; 37
    6336:	8c ac       	ldd	r8, Y+60	; 0x3c
    6338:	9d ac       	ldd	r9, Y+61	; 0x3d
    633a:	ae ac       	ldd	r10, Y+62	; 0x3e
    633c:	bf ac       	ldd	r11, Y+63	; 0x3f
    633e:	a5 97       	sbiw	r28, 0x25	; 37
    6340:	84 0e       	add	r8, r20
    6342:	95 1e       	adc	r9, r21
    6344:	a6 1e       	adc	r10, r22
    6346:	b7 1e       	adc	r11, r23
    6348:	d1 01       	movw	r26, r2
    634a:	8d 92       	st	X+, r8
    634c:	9d 92       	st	X+, r9
    634e:	ad 92       	st	X+, r10
    6350:	bc 92       	st	X, r11
    6352:	13 97       	sbiw	r26, 0x03	; 3
    6354:	ab 96       	adiw	r28, 0x2b	; 43
    6356:	0e ad       	ldd	r16, Y+62	; 0x3e
    6358:	1f ad       	ldd	r17, Y+63	; 0x3f
    635a:	ab 97       	sbiw	r28, 0x2b	; 43
    635c:	0f 5f       	subi	r16, 0xFF	; 255
    635e:	1f 4f       	sbci	r17, 0xFF	; 255
    6360:	ab 96       	adiw	r28, 0x2b	; 43
    6362:	1f af       	std	Y+63, r17	; 0x3f
    6364:	0e af       	std	Y+62, r16	; 0x3e
    6366:	ab 97       	sbiw	r28, 0x2b	; 43
    6368:	ad 96       	adiw	r28, 0x2d	; 45
    636a:	0e ad       	ldd	r16, Y+62	; 0x3e
    636c:	1f ad       	ldd	r17, Y+63	; 0x3f
    636e:	ad 97       	sbiw	r28, 0x2d	; 45
    6370:	0c 5f       	subi	r16, 0xFC	; 252
    6372:	1f 4f       	sbci	r17, 0xFF	; 255
    6374:	ad 96       	adiw	r28, 0x2d	; 45
    6376:	1f af       	std	Y+63, r17	; 0x3f
    6378:	0e af       	std	Y+62, r16	; 0x3e
    637a:	ad 97       	sbiw	r28, 0x2d	; 45
    637c:	af 96       	adiw	r28, 0x2f	; 47
    637e:	0e ad       	ldd	r16, Y+62	; 0x3e
    6380:	1f ad       	ldd	r17, Y+63	; 0x3f
    6382:	af 97       	sbiw	r28, 0x2f	; 47
    6384:	0c 5f       	subi	r16, 0xFC	; 252
    6386:	1f 4f       	sbci	r17, 0xFF	; 255
    6388:	af 96       	adiw	r28, 0x2f	; 47
    638a:	1f af       	std	Y+63, r17	; 0x3f
    638c:	0e af       	std	Y+62, r16	; 0x3e
    638e:	af 97       	sbiw	r28, 0x2f	; 47
*/
/* init working variables */
	memcpy((void*)a,(void*)(state->h), 8*4);

/* do the, fun stuff, */
	for (i=0; i<64; ++i){
    6390:	ab 96       	adiw	r28, 0x2b	; 43
    6392:	0e ad       	ldd	r16, Y+62	; 0x3e
    6394:	1f ad       	ldd	r17, Y+63	; 0x3f
    6396:	ab 97       	sbiw	r28, 0x2b	; 43
    6398:	00 34       	cpi	r16, 0x40	; 64
    639a:	11 05       	cpc	r17, r1
    639c:	a9 f0       	breq	.+42     	; 0x63c8 <sha2_small_common_nextBlock+0x590>
		if(i<16){
    639e:	aa 96       	adiw	r28, 0x2a	; 42
    63a0:	1f ad       	ldd	r17, Y+63	; 0x3f
    63a2:	aa 97       	sbiw	r28, 0x2a	; 42
    63a4:	10 31       	cpi	r17, 0x10	; 16
    63a6:	08 f0       	brcs	.+2      	; 0x63aa <sha2_small_common_nextBlock+0x572>
    63a8:	a7 cd       	rjmp	.-1202   	; 0x5ef8 <sha2_small_common_nextBlock+0xc0>
			wx = w[i];
    63aa:	af 96       	adiw	r28, 0x2f	; 47
    63ac:	ae ad       	ldd	r26, Y+62	; 0x3e
    63ae:	bf ad       	ldd	r27, Y+63	; 0x3f
    63b0:	af 97       	sbiw	r28, 0x2f	; 47
    63b2:	cd 90       	ld	r12, X+
    63b4:	dd 90       	ld	r13, X+
    63b6:	ed 90       	ld	r14, X+
    63b8:	fc 90       	ld	r15, X
    63ba:	a9 96       	adiw	r28, 0x29	; 41
    63bc:	cc ae       	std	Y+60, r12	; 0x3c
    63be:	dd ae       	std	Y+61, r13	; 0x3d
    63c0:	ee ae       	std	Y+62, r14	; 0x3e
    63c2:	ff ae       	std	Y+63, r15	; 0x3f
    63c4:	a9 97       	sbiw	r28, 0x29	; 41
    63c6:	6a ce       	rjmp	.-812    	; 0x609c <sha2_small_common_nextBlock+0x264>
    63c8:	e3 96       	adiw	r28, 0x33	; 51
    63ca:	ee ad       	ldd	r30, Y+62	; 0x3e
    63cc:	ff ad       	ldd	r31, Y+63	; 0x3f
    63ce:	e3 97       	sbiw	r28, 0x33	; 51
    63d0:	e1 96       	adiw	r28, 0x31	; 49
    63d2:	2e ad       	ldd	r18, Y+62	; 0x3e
    63d4:	3f ad       	ldd	r19, Y+63	; 0x3f
    63d6:	e1 97       	sbiw	r28, 0x31	; 49
    63d8:	10 e2       	ldi	r17, 0x20	; 32
    63da:	21 0e       	add	r2, r17
    63dc:	31 1c       	adc	r3, r1
    63de:	8f 01       	movw	r16, r30
    63e0:	d5 01       	movw	r26, r10
    63e2:	c4 01       	movw	r24, r8
    63e4:	06 c0       	rjmp	.+12     	; 0x63f2 <sha2_small_common_nextBlock+0x5ba>
    63e6:	f9 01       	movw	r30, r18
    63e8:	81 91       	ld	r24, Z+
    63ea:	91 91       	ld	r25, Z+
    63ec:	a1 91       	ld	r26, Z+
    63ee:	b1 91       	ld	r27, Z+
    63f0:	9f 01       	movw	r18, r30
		a[0] = t1 + t2;
	}

/* update, the, state, */
	for (i=0; i<8; ++i){
		state->h[i] += a[i];
    63f2:	f8 01       	movw	r30, r16
    63f4:	40 81       	ld	r20, Z
    63f6:	51 81       	ldd	r21, Z+1	; 0x01
    63f8:	62 81       	ldd	r22, Z+2	; 0x02
    63fa:	73 81       	ldd	r23, Z+3	; 0x03
    63fc:	84 0f       	add	r24, r20
    63fe:	95 1f       	adc	r25, r21
    6400:	a6 1f       	adc	r26, r22
    6402:	b7 1f       	adc	r27, r23
    6404:	81 93       	st	Z+, r24
    6406:	91 93       	st	Z+, r25
    6408:	a1 93       	st	Z+, r26
    640a:	b1 93       	st	Z+, r27
    640c:	8f 01       	movw	r16, r30
		a[4] += t1;
		a[0] = t1 + t2;
	}

/* update, the, state, */
	for (i=0; i<8; ++i){
    640e:	22 16       	cp	r2, r18
    6410:	33 06       	cpc	r3, r19
    6412:	49 f7       	brne	.-46     	; 0x63e6 <sha2_small_common_nextBlock+0x5ae>
		state->h[i] += a[i];
	}
	state->length += 1;
    6414:	e3 96       	adiw	r28, 0x33	; 51
    6416:	ee ad       	ldd	r30, Y+62	; 0x3e
    6418:	ff ad       	ldd	r31, Y+63	; 0x3f
    641a:	e3 97       	sbiw	r28, 0x33	; 51
    641c:	80 a1       	ldd	r24, Z+32	; 0x20
    641e:	91 a1       	ldd	r25, Z+33	; 0x21
    6420:	a2 a1       	ldd	r26, Z+34	; 0x22
    6422:	b3 a1       	ldd	r27, Z+35	; 0x23
    6424:	01 96       	adiw	r24, 0x01	; 1
    6426:	a1 1d       	adc	r26, r1
    6428:	b1 1d       	adc	r27, r1
    642a:	80 a3       	std	Z+32, r24	; 0x20
    642c:	91 a3       	std	Z+33, r25	; 0x21
    642e:	a2 a3       	std	Z+34, r26	; 0x22
    6430:	b3 a3       	std	Z+35, r27	; 0x23
}
    6432:	ce 58       	subi	r28, 0x8E	; 142
    6434:	df 4f       	sbci	r29, 0xFF	; 255
    6436:	0f b6       	in	r0, 0x3f	; 63
    6438:	f8 94       	cli
    643a:	de bf       	out	0x3e, r29	; 62
    643c:	0f be       	out	0x3f, r0	; 63
    643e:	cd bf       	out	0x3d, r28	; 61
    6440:	df 91       	pop	r29
    6442:	cf 91       	pop	r28
    6444:	1f 91       	pop	r17
    6446:	0f 91       	pop	r16
    6448:	ff 90       	pop	r15
    644a:	ef 90       	pop	r14
    644c:	df 90       	pop	r13
    644e:	cf 90       	pop	r12
    6450:	bf 90       	pop	r11
    6452:	af 90       	pop	r10
    6454:	9f 90       	pop	r9
    6456:	8f 90       	pop	r8
    6458:	7f 90       	pop	r7
    645a:	6f 90       	pop	r6
    645c:	5f 90       	pop	r5
    645e:	4f 90       	pop	r4
    6460:	3f 90       	pop	r3
    6462:	2f 90       	pop	r2
    6464:	08 95       	ret

00006466 <sha2_small_common_lastBlock>:


void sha2_small_common_lastBlock(sha2_small_common_ctx_t *state, const void *block, uint16_t length_b){
    6466:	8f 92       	push	r8
    6468:	9f 92       	push	r9
    646a:	af 92       	push	r10
    646c:	bf 92       	push	r11
    646e:	cf 92       	push	r12
    6470:	df 92       	push	r13
    6472:	ef 92       	push	r14
    6474:	ff 92       	push	r15
    6476:	0f 93       	push	r16
    6478:	1f 93       	push	r17
    647a:	cf 93       	push	r28
    647c:	df 93       	push	r29
    647e:	cd b7       	in	r28, 0x3d	; 61
    6480:	de b7       	in	r29, 0x3e	; 62
    6482:	c8 54       	subi	r28, 0x48	; 72
    6484:	d1 09       	sbc	r29, r1
    6486:	0f b6       	in	r0, 0x3f	; 63
    6488:	f8 94       	cli
    648a:	de bf       	out	0x3e, r29	; 62
    648c:	0f be       	out	0x3f, r0	; 63
    648e:	cd bf       	out	0x3d, r28	; 61
    6490:	8c 01       	movw	r16, r24
    6492:	5b 01       	movw	r10, r22
    6494:	4a 01       	movw	r8, r20
	uint8_t lb[512/8]; /* local block */
	uint64_t len;
	while(length_b>=512){
    6496:	6a 01       	movw	r12, r20
    6498:	41 15       	cp	r20, r1
    649a:	52 40       	sbci	r21, 0x02	; 2
    649c:	18 f1       	brcs	.+70     	; 0x64e4 <sha2_small_common_lastBlock+0x7e>
    649e:	7b 01       	movw	r14, r22
		sha2_small_common_nextBlock(state, block);
    64a0:	b7 01       	movw	r22, r14
    64a2:	c8 01       	movw	r24, r16
    64a4:	c9 dc       	rcall	.-1646   	; 0x5e38 <sha2_small_common_nextBlock>
		length_b -= 512;
    64a6:	92 e0       	ldi	r25, 0x02	; 2
    64a8:	d9 1a       	sub	r13, r25
		block = (uint8_t*)block+64;
    64aa:	e0 e4       	ldi	r30, 0x40	; 64
    64ac:	ee 0e       	add	r14, r30
    64ae:	f1 1c       	adc	r15, r1


void sha2_small_common_lastBlock(sha2_small_common_ctx_t *state, const void *block, uint16_t length_b){
	uint8_t lb[512/8]; /* local block */
	uint64_t len;
	while(length_b>=512){
    64b0:	c1 14       	cp	r12, r1
    64b2:	f2 e0       	ldi	r31, 0x02	; 2
    64b4:	df 06       	cpc	r13, r31
    64b6:	a0 f7       	brcc	.-24     	; 0x64a0 <sha2_small_common_lastBlock+0x3a>
    64b8:	64 01       	movw	r12, r8
    64ba:	81 e0       	ldi	r24, 0x01	; 1
    64bc:	d8 22       	and	r13, r24
    64be:	92 e0       	ldi	r25, 0x02	; 2
    64c0:	99 1a       	sub	r9, r25
    64c2:	89 2c       	mov	r8, r9
    64c4:	99 24       	eor	r9, r9
    64c6:	86 94       	lsr	r8
    64c8:	ef ef       	ldi	r30, 0xFF	; 255
    64ca:	8e 1a       	sub	r8, r30
    64cc:	9e 0a       	sbc	r9, r30
    64ce:	00 24       	eor	r0, r0
    64d0:	96 94       	lsr	r9
    64d2:	87 94       	ror	r8
    64d4:	07 94       	ror	r0
    64d6:	96 94       	lsr	r9
    64d8:	87 94       	ror	r8
    64da:	07 94       	ror	r0
    64dc:	98 2c       	mov	r9, r8
    64de:	80 2c       	mov	r8, r0
    64e0:	a8 0c       	add	r10, r8
    64e2:	b9 1c       	adc	r11, r9
		sha2_small_common_nextBlock(state, block);
		length_b -= 512;
		block = (uint8_t*)block+64;
	}
	len = state->length*512 + length_b;
    64e4:	f8 01       	movw	r30, r16
    64e6:	80 a1       	ldd	r24, Z+32	; 0x20
    64e8:	91 a1       	ldd	r25, Z+33	; 0x21
    64ea:	a2 a1       	ldd	r26, Z+34	; 0x22
    64ec:	b3 a1       	ldd	r27, Z+35	; 0x23
    64ee:	29 e0       	ldi	r18, 0x09	; 9
    64f0:	88 0f       	add	r24, r24
    64f2:	99 1f       	adc	r25, r25
    64f4:	aa 1f       	adc	r26, r26
    64f6:	bb 1f       	adc	r27, r27
    64f8:	2a 95       	dec	r18
    64fa:	d1 f7       	brne	.-12     	; 0x64f0 <sha2_small_common_lastBlock+0x8a>
    64fc:	8c 0d       	add	r24, r12
    64fe:	9d 1d       	adc	r25, r13
    6500:	a1 1d       	adc	r26, r1
    6502:	b1 1d       	adc	r27, r1
    6504:	9c 01       	movw	r18, r24
    6506:	ad 01       	movw	r20, r26
    6508:	22 96       	adiw	r28, 0x02	; 2
    650a:	8f af       	std	Y+63, r24	; 0x3f
    650c:	22 97       	sbiw	r28, 0x02	; 2
    650e:	23 96       	adiw	r28, 0x03	; 3
    6510:	3f af       	std	Y+63, r19	; 0x3f
    6512:	23 97       	sbiw	r28, 0x03	; 3
    6514:	24 96       	adiw	r28, 0x04	; 4
    6516:	4f af       	std	Y+63, r20	; 0x3f
    6518:	24 97       	sbiw	r28, 0x04	; 4
    651a:	25 96       	adiw	r28, 0x05	; 5
    651c:	5f af       	std	Y+63, r21	; 0x3f
    651e:	25 97       	sbiw	r28, 0x05	; 5
    6520:	26 96       	adiw	r28, 0x06	; 6
    6522:	1f ae       	std	Y+63, r1	; 0x3f
    6524:	26 97       	sbiw	r28, 0x06	; 6
    6526:	27 96       	adiw	r28, 0x07	; 7
    6528:	1f ae       	std	Y+63, r1	; 0x3f
    652a:	27 97       	sbiw	r28, 0x07	; 7
    652c:	28 96       	adiw	r28, 0x08	; 8
    652e:	1f ae       	std	Y+63, r1	; 0x3f
    6530:	28 97       	sbiw	r28, 0x08	; 8
    6532:	29 96       	adiw	r28, 0x09	; 9
    6534:	1f ae       	std	Y+63, r1	; 0x3f
    6536:	29 97       	sbiw	r28, 0x09	; 9
	memset(lb, 0, 64);
    6538:	30 e4       	ldi	r19, 0x40	; 64
    653a:	93 2e       	mov	r9, r19
    653c:	ce 01       	movw	r24, r28
    653e:	01 96       	adiw	r24, 0x01	; 1
    6540:	7c 01       	movw	r14, r24
    6542:	fc 01       	movw	r30, r24
    6544:	89 2d       	mov	r24, r9
    6546:	11 92       	st	Z+, r1
    6548:	8a 95       	dec	r24
    654a:	e9 f7       	brne	.-6      	; 0x6546 <sha2_small_common_lastBlock+0xe0>
	memcpy(lb, block, (length_b+7)/8);
    654c:	a6 01       	movw	r20, r12
    654e:	49 5f       	subi	r20, 0xF9	; 249
    6550:	5f 4f       	sbci	r21, 0xFF	; 255
    6552:	56 95       	lsr	r21
    6554:	47 95       	ror	r20
    6556:	56 95       	lsr	r21
    6558:	47 95       	ror	r20
    655a:	56 95       	lsr	r21
    655c:	47 95       	ror	r20
    655e:	b5 01       	movw	r22, r10
    6560:	c7 01       	movw	r24, r14
    6562:	eb d1       	rcall	.+982    	; 0x693a <memcpy>

	/* set the final one bit */
	lb[length_b/8] |= 0x80>>(length_b & 0x7);
    6564:	f6 01       	movw	r30, r12
    6566:	f6 95       	lsr	r31
    6568:	e7 95       	ror	r30
    656a:	f6 95       	lsr	r31
    656c:	e7 95       	ror	r30
    656e:	f6 95       	lsr	r31
    6570:	e7 95       	ror	r30
    6572:	ee 0d       	add	r30, r14
    6574:	ff 1d       	adc	r31, r15
    6576:	96 01       	movw	r18, r12
    6578:	27 70       	andi	r18, 0x07	; 7
    657a:	33 27       	eor	r19, r19
    657c:	80 e8       	ldi	r24, 0x80	; 128
    657e:	90 e0       	ldi	r25, 0x00	; 0
    6580:	02 c0       	rjmp	.+4      	; 0x6586 <sha2_small_common_lastBlock+0x120>
    6582:	95 95       	asr	r25
    6584:	87 95       	ror	r24
    6586:	2a 95       	dec	r18
    6588:	e2 f7       	brpl	.-8      	; 0x6582 <sha2_small_common_lastBlock+0x11c>
    658a:	90 81       	ld	r25, Z
    658c:	89 2b       	or	r24, r25
    658e:	80 83       	st	Z, r24
	/* pad with zeros */
	if (length_b>=512-64){ /* not enouth space for 64bit length value */
    6590:	90 ec       	ldi	r25, 0xC0	; 192
    6592:	c9 16       	cp	r12, r25
    6594:	91 e0       	ldi	r25, 0x01	; 1
    6596:	d9 06       	cpc	r13, r25
    6598:	58 f5       	brcc	.+86     	; 0x65f0 <sha2_small_common_lastBlock+0x18a>


void sha2_small_common_lastBlock(sha2_small_common_ctx_t *state, const void *block, uint16_t length_b){
	uint8_t lb[512/8]; /* local block */
	uint64_t len;
	while(length_b>=512){
    659a:	27 e0       	ldi	r18, 0x07	; 7
#if defined LITTLE_ENDIAN
	 	/* this is now rolled up */
	uint8_t i;
	i=7;
	do{
		lb[63-i] = ((uint8_t*)&len)[i];
    659c:	4f e3       	ldi	r20, 0x3F	; 63
    659e:	50 e0       	ldi	r21, 0x00	; 0
    65a0:	82 2f       	mov	r24, r18
    65a2:	90 e0       	ldi	r25, 0x00	; 0
    65a4:	fa 01       	movw	r30, r20
    65a6:	e8 1b       	sub	r30, r24
    65a8:	f9 0b       	sbc	r31, r25
    65aa:	ee 0d       	add	r30, r14
    65ac:	ff 1d       	adc	r31, r15
    65ae:	a1 e4       	ldi	r26, 0x41	; 65
    65b0:	b0 e0       	ldi	r27, 0x00	; 0
    65b2:	ac 0f       	add	r26, r28
    65b4:	bd 1f       	adc	r27, r29
    65b6:	a8 0f       	add	r26, r24
    65b8:	b9 1f       	adc	r27, r25
    65ba:	8c 91       	ld	r24, X
    65bc:	80 83       	st	Z, r24
	}while(i--);
    65be:	21 50       	subi	r18, 0x01	; 1
    65c0:	78 f7       	brcc	.-34     	; 0x65a0 <sha2_small_common_lastBlock+0x13a>
#elif defined BIG_ENDIAN
	*((uint64_t)&(lb[56])) = len;
#endif
	sha2_small_common_nextBlock(state, lb);
    65c2:	b7 01       	movw	r22, r14
    65c4:	c8 01       	movw	r24, r16
    65c6:	38 dc       	rcall	.-1936   	; 0x5e38 <sha2_small_common_nextBlock>
}
    65c8:	c8 5b       	subi	r28, 0xB8	; 184
    65ca:	df 4f       	sbci	r29, 0xFF	; 255
    65cc:	0f b6       	in	r0, 0x3f	; 63
    65ce:	f8 94       	cli
    65d0:	de bf       	out	0x3e, r29	; 62
    65d2:	0f be       	out	0x3f, r0	; 63
    65d4:	cd bf       	out	0x3d, r28	; 61
    65d6:	df 91       	pop	r29
    65d8:	cf 91       	pop	r28
    65da:	1f 91       	pop	r17
    65dc:	0f 91       	pop	r16
    65de:	ff 90       	pop	r15
    65e0:	ef 90       	pop	r14
    65e2:	df 90       	pop	r13
    65e4:	cf 90       	pop	r12
    65e6:	bf 90       	pop	r11
    65e8:	af 90       	pop	r10
    65ea:	9f 90       	pop	r9
    65ec:	8f 90       	pop	r8

	/* set the final one bit */
	lb[length_b/8] |= 0x80>>(length_b & 0x7);
	/* pad with zeros */
	if (length_b>=512-64){ /* not enouth space for 64bit length value */
		sha2_small_common_nextBlock(state, lb);
    65ee:	08 95       	ret
    65f0:	b7 01       	movw	r22, r14
    65f2:	c8 01       	movw	r24, r16
    65f4:	21 dc       	rcall	.-1982   	; 0x5e38 <sha2_small_common_nextBlock>
		memset(lb, 0, 64);
    65f6:	f7 01       	movw	r30, r14
    65f8:	11 92       	st	Z+, r1
    65fa:	9a 94       	dec	r9
    65fc:	e9 f7       	brne	.-6      	; 0x65f8 <sha2_small_common_lastBlock+0x192>
    65fe:	cd cf       	rjmp	.-102    	; 0x659a <sha2_small_common_lastBlock+0x134>

00006600 <sha512>:
		s += 8;
	}while(--i);
}


void sha512(void *dest, const void *msg, uint32_t length_b){
    6600:	2f 92       	push	r2
    6602:	3f 92       	push	r3
    6604:	4f 92       	push	r4
    6606:	5f 92       	push	r5
    6608:	6f 92       	push	r6
    660a:	7f 92       	push	r7
    660c:	8f 92       	push	r8
    660e:	9f 92       	push	r9
    6610:	af 92       	push	r10
    6612:	bf 92       	push	r11
    6614:	cf 92       	push	r12
    6616:	df 92       	push	r13
    6618:	ef 92       	push	r14
    661a:	ff 92       	push	r15
    661c:	0f 93       	push	r16
    661e:	1f 93       	push	r17
    6620:	cf 93       	push	r28
    6622:	df 93       	push	r29
    6624:	cd b7       	in	r28, 0x3d	; 61
    6626:	de b7       	in	r29, 0x3e	; 62
    6628:	c4 54       	subi	r28, 0x44	; 68
    662a:	d1 09       	sbc	r29, r1
    662c:	0f b6       	in	r0, 0x3f	; 63
    662e:	f8 94       	cli
    6630:	de bf       	out	0x3e, r29	; 62
    6632:	0f be       	out	0x3f, r0	; 63
    6634:	cd bf       	out	0x3d, r28	; 61
    6636:	4c 01       	movw	r8, r24
    6638:	1b 01       	movw	r2, r22
    663a:	29 01       	movw	r4, r18
    663c:	3a 01       	movw	r6, r20
0x510e527fade682d1LL, 0x9b05688c2b3e6c1fLL, 0x1f83d9abfb41bd6bLL, 0x5be0cd19137e2179LL
};


void sha512_init(sha512_ctx_t *ctx){
	ctx->length = 0;
    663e:	5e 01       	movw	r10, r28
    6640:	81 e4       	ldi	r24, 0x41	; 65
    6642:	a8 0e       	add	r10, r24
    6644:	b1 1c       	adc	r11, r1
    6646:	f5 01       	movw	r30, r10
    6648:	10 82       	st	Z, r1
    664a:	11 82       	std	Z+1, r1	; 0x01
    664c:	12 82       	std	Z+2, r1	; 0x02
    664e:	13 82       	std	Z+3, r1	; 0x03
	memcpy_P(ctx->h, sha512_init_values, 8*8);
    6650:	40 e4       	ldi	r20, 0x40	; 64
    6652:	50 e0       	ldi	r21, 0x00	; 0
    6654:	64 e3       	ldi	r22, 0x34	; 52
    6656:	74 e0       	ldi	r23, 0x04	; 4
    6658:	ce 01       	movw	r24, r28
    665a:	01 96       	adiw	r24, 0x01	; 1
    665c:	65 d1       	rcall	.+714    	; 0x6928 <memcpy_P>


void sha512(void *dest, const void *msg, uint32_t length_b){
	sha512_ctx_t ctx;
	sha512_init(&ctx);
	while(length_b >= 1024){
    665e:	41 14       	cp	r4, r1
    6660:	f4 e0       	ldi	r31, 0x04	; 4
    6662:	5f 06       	cpc	r5, r31
    6664:	61 04       	cpc	r6, r1
    6666:	71 04       	cpc	r7, r1
    6668:	60 f1       	brcs	.+88     	; 0x66c2 <sha512+0xc2>
    666a:	73 01       	movw	r14, r6
    666c:	62 01       	movw	r12, r4
    666e:	81 01       	movw	r16, r2
#include "sha2_large_common.h"
#include "sha512.h"


void sha512_nextBlock (sha512_ctx_t *ctx, const void *block){
	sha2_large_common_nextBlock(ctx, block);
    6670:	b8 01       	movw	r22, r16
    6672:	ce 01       	movw	r24, r28
    6674:	01 96       	adiw	r24, 0x01	; 1
    6676:	0e 94 77 24 	call	0x48ee	; 0x48ee <sha2_large_common_nextBlock>
void sha512(void *dest, const void *msg, uint32_t length_b){
	sha512_ctx_t ctx;
	sha512_init(&ctx);
	while(length_b >= 1024){
		sha512_nextBlock(&ctx, msg);
		msg = (uint8_t*)msg + 1024/8;
    667a:	00 58       	subi	r16, 0x80	; 128
    667c:	1f 4f       	sbci	r17, 0xFF	; 255
		length_b -= 1024;
    667e:	84 e0       	ldi	r24, 0x04	; 4
    6680:	d8 1a       	sub	r13, r24
    6682:	e1 08       	sbc	r14, r1
    6684:	f1 08       	sbc	r15, r1


void sha512(void *dest, const void *msg, uint32_t length_b){
	sha512_ctx_t ctx;
	sha512_init(&ctx);
	while(length_b >= 1024){
    6686:	c1 14       	cp	r12, r1
    6688:	e4 e0       	ldi	r30, 0x04	; 4
    668a:	de 06       	cpc	r13, r30
    668c:	e1 04       	cpc	r14, r1
    668e:	f1 04       	cpc	r15, r1
    6690:	78 f7       	brcc	.-34     	; 0x6670 <sha512+0x70>
    6692:	d3 01       	movw	r26, r6
    6694:	c2 01       	movw	r24, r4
    6696:	94 50       	subi	r25, 0x04	; 4
    6698:	a1 09       	sbc	r26, r1
    669a:	b1 09       	sbc	r27, r1
    669c:	2a e0       	ldi	r18, 0x0A	; 10
    669e:	b6 95       	lsr	r27
    66a0:	a7 95       	ror	r26
    66a2:	97 95       	ror	r25
    66a4:	87 95       	ror	r24
    66a6:	2a 95       	dec	r18
    66a8:	d1 f7       	brne	.-12     	; 0x669e <sha512+0x9e>
    66aa:	01 96       	adiw	r24, 0x01	; 1
    66ac:	96 95       	lsr	r25
    66ae:	98 2f       	mov	r25, r24
    66b0:	88 27       	eor	r24, r24
    66b2:	97 95       	ror	r25
    66b4:	87 95       	ror	r24
    66b6:	28 0e       	add	r2, r24
    66b8:	39 1e       	adc	r3, r25
    66ba:	f3 e0       	ldi	r31, 0x03	; 3
    66bc:	5f 22       	and	r5, r31
    66be:	66 24       	eor	r6, r6
    66c0:	77 24       	eor	r7, r7
void sha512_nextBlock (sha512_ctx_t *ctx, const void *block){
	sha2_large_common_nextBlock(ctx, block);
}

void sha512_lastBlock(sha512_ctx_t *ctx, const void *block, uint16_t length_b){
	sha2_large_common_lastBlock(ctx, block, length_b);
    66c2:	a2 01       	movw	r20, r4
    66c4:	b1 01       	movw	r22, r2
    66c6:	ce 01       	movw	r24, r28
    66c8:	01 96       	adiw	r24, 0x01	; 1
    66ca:	27 da       	rcall	.-2994   	; 0x5b1a <sha2_large_common_lastBlock>
	ctx->length = 0;
	memcpy_P(ctx->h, sha512_init_values, 8*8);
}

void sha512_ctx2hash(void *dest, const sha512_ctx_t *ctx){
	uint8_t i=8, j, *s = (uint8_t*)(ctx->h);
    66cc:	9e 01       	movw	r18, r28
    66ce:	2f 5f       	subi	r18, 0xFF	; 255
    66d0:	3f 4f       	sbci	r19, 0xFF	; 255
    66d2:	f4 01       	movw	r30, r8
	do{
		j=7;
    66d4:	87 e0       	ldi	r24, 0x07	; 7
		do{
			*((uint8_t*)dest) = s[j];
    66d6:	d9 01       	movw	r26, r18
    66d8:	a8 0f       	add	r26, r24
    66da:	b1 1d       	adc	r27, r1
    66dc:	9c 91       	ld	r25, X
    66de:	91 93       	st	Z+, r25
			dest = (uint8_t*)dest + 1;
		}while(j--);
    66e0:	81 50       	subi	r24, 0x01	; 1
    66e2:	c8 f7       	brcc	.-14     	; 0x66d6 <sha512+0xd6>
    66e4:	88 e0       	ldi	r24, 0x08	; 8
    66e6:	88 0e       	add	r8, r24
    66e8:	91 1c       	adc	r9, r1
		s += 8;
    66ea:	28 5f       	subi	r18, 0xF8	; 248
    66ec:	3f 4f       	sbci	r19, 0xFF	; 255
	}while(--i);
    66ee:	2a 15       	cp	r18, r10
    66f0:	3b 05       	cpc	r19, r11
    66f2:	79 f7       	brne	.-34     	; 0x66d2 <sha512+0xd2>
		msg = (uint8_t*)msg + 1024/8;
		length_b -= 1024;
	}
	sha512_lastBlock(&ctx, msg, length_b);
	sha512_ctx2hash(dest, &ctx);
}
    66f4:	cc 5b       	subi	r28, 0xBC	; 188
    66f6:	df 4f       	sbci	r29, 0xFF	; 255
    66f8:	0f b6       	in	r0, 0x3f	; 63
    66fa:	f8 94       	cli
    66fc:	de bf       	out	0x3e, r29	; 62
    66fe:	0f be       	out	0x3f, r0	; 63
    6700:	cd bf       	out	0x3d, r28	; 61
    6702:	df 91       	pop	r29
    6704:	cf 91       	pop	r28
    6706:	1f 91       	pop	r17
    6708:	0f 91       	pop	r16
    670a:	ff 90       	pop	r15
    670c:	ef 90       	pop	r14
    670e:	df 90       	pop	r13
    6710:	cf 90       	pop	r12
    6712:	bf 90       	pop	r11
    6714:	af 90       	pop	r10
    6716:	9f 90       	pop	r9
    6718:	8f 90       	pop	r8
    671a:	7f 90       	pop	r7
    671c:	6f 90       	pop	r6
    671e:	5f 90       	pop	r5
    6720:	4f 90       	pop	r4
    6722:	3f 90       	pop	r3
    6724:	2f 90       	pop	r2
    6726:	08 95       	ret

00006728 <uart_init>:
#include "uart_f.h"
#include "types.h"


void uart_init(){
	UBRR0H = (BAUD_PRESCALE >> 8); // Load upper 8-bits of the baud rate value into the high byte of the UBRR register
    6728:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
	UBRR0L = BAUD_PRESCALE; // Load lower 8-bits of the baud rate value into the low byte of the UBRR register
    672c:	83 e3       	ldi	r24, 0x33	; 51
    672e:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
	UCSR0C = (0<<UMSEL0) | (0<<UPM0) | (1<<USBS0) | (3<<UCSZ0);
    6732:	8e e0       	ldi	r24, 0x0E	; 14
    6734:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>
	UCSR0B = (1<<RXEN0) | (1<<TXEN0);
    6738:	88 e1       	ldi	r24, 0x18	; 24
    673a:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
    673e:	08 95       	ret

00006740 <uart_puts>:
}

void uart_puts(char* s){
    6740:	cf 93       	push	r28
    6742:	df 93       	push	r29
    6744:	1f 92       	push	r1
    6746:	cd b7       	in	r28, 0x3d	; 61
    6748:	de b7       	in	r29, 0x3e	; 62
    674a:	dc 01       	movw	r26, r24
	volatile uint8_t i;
	int len = strlen(s);
    674c:	fc 01       	movw	r30, r24
    674e:	01 90       	ld	r0, Z+
    6750:	00 20       	and	r0, r0
    6752:	e9 f7       	brne	.-6      	; 0x674e <uart_puts+0xe>
    6754:	31 97       	sbiw	r30, 0x01	; 1
    6756:	af 01       	movw	r20, r30
    6758:	48 1b       	sub	r20, r24
    675a:	59 0b       	sbc	r21, r25
	for (i = 0; i < len; i++){
    675c:	19 82       	std	Y+1, r1	; 0x01
    675e:	89 81       	ldd	r24, Y+1	; 0x01
    6760:	90 e0       	ldi	r25, 0x00	; 0
    6762:	84 17       	cp	r24, r20
    6764:	95 07       	cpc	r25, r21
    6766:	9c f4       	brge	.+38     	; 0x678e <uart_puts+0x4e>
		while(!( UCSR0A & 0X20));
    6768:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
    676c:	95 ff       	sbrs	r25, 5
    676e:	fc cf       	rjmp	.-8      	; 0x6768 <uart_puts+0x28>
		UDR0=s[i];
    6770:	99 81       	ldd	r25, Y+1	; 0x01
    6772:	fd 01       	movw	r30, r26
    6774:	e9 0f       	add	r30, r25
    6776:	f1 1d       	adc	r31, r1
    6778:	90 81       	ld	r25, Z
    677a:	90 93 c6 00 	sts	0x00C6, r25	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
}

void uart_puts(char* s){
	volatile uint8_t i;
	int len = strlen(s);
	for (i = 0; i < len; i++){
    677e:	99 81       	ldd	r25, Y+1	; 0x01
    6780:	9f 5f       	subi	r25, 0xFF	; 255
    6782:	99 83       	std	Y+1, r25	; 0x01
    6784:	29 81       	ldd	r18, Y+1	; 0x01
    6786:	30 e0       	ldi	r19, 0x00	; 0
    6788:	24 17       	cp	r18, r20
    678a:	35 07       	cpc	r19, r21
    678c:	6c f3       	brlt	.-38     	; 0x6768 <uart_puts+0x28>
		while(!( UCSR0A & 0X20));
		UDR0=s[i];
	}
	while(!( UCSR0A & 0X20));
    678e:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
    6792:	85 ff       	sbrs	r24, 5
    6794:	fc cf       	rjmp	.-8      	; 0x678e <uart_puts+0x4e>
	UDR0 = 13;
    6796:	8d e0       	ldi	r24, 0x0D	; 13
    6798:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
	while(!( UCSR0A & 0X20));
    679c:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
    67a0:	85 ff       	sbrs	r24, 5
    67a2:	fc cf       	rjmp	.-8      	; 0x679c <uart_puts+0x5c>
	UDR0 = 10;
    67a4:	8a e0       	ldi	r24, 0x0A	; 10
    67a6:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
}
    67aa:	0f 90       	pop	r0
    67ac:	df 91       	pop	r29
    67ae:	cf 91       	pop	r28
    67b0:	08 95       	ret

000067b2 <__bswapsi2>:
    67b2:	69 27       	eor	r22, r25
    67b4:	96 27       	eor	r25, r22
    67b6:	69 27       	eor	r22, r25
    67b8:	78 27       	eor	r23, r24
    67ba:	87 27       	eor	r24, r23
    67bc:	78 27       	eor	r23, r24
    67be:	08 95       	ret

000067c0 <__ashldi3>:
    67c0:	0f 93       	push	r16
    67c2:	08 30       	cpi	r16, 0x08	; 8
    67c4:	90 f0       	brcs	.+36     	; 0x67ea <__ashldi3+0x2a>
    67c6:	98 2f       	mov	r25, r24
    67c8:	87 2f       	mov	r24, r23
    67ca:	76 2f       	mov	r23, r22
    67cc:	65 2f       	mov	r22, r21
    67ce:	54 2f       	mov	r21, r20
    67d0:	43 2f       	mov	r20, r19
    67d2:	32 2f       	mov	r19, r18
    67d4:	22 27       	eor	r18, r18
    67d6:	08 50       	subi	r16, 0x08	; 8
    67d8:	f4 cf       	rjmp	.-24     	; 0x67c2 <__ashldi3+0x2>
    67da:	22 0f       	add	r18, r18
    67dc:	33 1f       	adc	r19, r19
    67de:	44 1f       	adc	r20, r20
    67e0:	55 1f       	adc	r21, r21
    67e2:	66 1f       	adc	r22, r22
    67e4:	77 1f       	adc	r23, r23
    67e6:	88 1f       	adc	r24, r24
    67e8:	99 1f       	adc	r25, r25
    67ea:	0a 95       	dec	r16
    67ec:	b2 f7       	brpl	.-20     	; 0x67da <__ashldi3+0x1a>
    67ee:	0f 91       	pop	r16
    67f0:	08 95       	ret

000067f2 <__ashrdi3>:
    67f2:	97 fb       	bst	r25, 7
    67f4:	10 f8       	bld	r1, 0

000067f6 <__lshrdi3>:
    67f6:	16 94       	lsr	r1
    67f8:	00 08       	sbc	r0, r0
    67fa:	0f 93       	push	r16
    67fc:	08 30       	cpi	r16, 0x08	; 8
    67fe:	98 f0       	brcs	.+38     	; 0x6826 <__lshrdi3+0x30>
    6800:	08 50       	subi	r16, 0x08	; 8
    6802:	23 2f       	mov	r18, r19
    6804:	34 2f       	mov	r19, r20
    6806:	45 2f       	mov	r20, r21
    6808:	56 2f       	mov	r21, r22
    680a:	67 2f       	mov	r22, r23
    680c:	78 2f       	mov	r23, r24
    680e:	89 2f       	mov	r24, r25
    6810:	90 2d       	mov	r25, r0
    6812:	f4 cf       	rjmp	.-24     	; 0x67fc <__lshrdi3+0x6>
    6814:	05 94       	asr	r0
    6816:	97 95       	ror	r25
    6818:	87 95       	ror	r24
    681a:	77 95       	ror	r23
    681c:	67 95       	ror	r22
    681e:	57 95       	ror	r21
    6820:	47 95       	ror	r20
    6822:	37 95       	ror	r19
    6824:	27 95       	ror	r18
    6826:	0a 95       	dec	r16
    6828:	aa f7       	brpl	.-22     	; 0x6814 <__lshrdi3+0x1e>
    682a:	0f 91       	pop	r16
    682c:	08 95       	ret

0000682e <__rotldi3>:
    682e:	0f 93       	push	r16
    6830:	08 30       	cpi	r16, 0x08	; 8
    6832:	a0 f0       	brcs	.+40     	; 0x685c <__rotldi3+0x2e>
    6834:	08 50       	subi	r16, 0x08	; 8
    6836:	09 2e       	mov	r0, r25
    6838:	98 2f       	mov	r25, r24
    683a:	87 2f       	mov	r24, r23
    683c:	76 2f       	mov	r23, r22
    683e:	65 2f       	mov	r22, r21
    6840:	54 2f       	mov	r21, r20
    6842:	43 2f       	mov	r20, r19
    6844:	32 2f       	mov	r19, r18
    6846:	20 2d       	mov	r18, r0
    6848:	f3 cf       	rjmp	.-26     	; 0x6830 <__rotldi3+0x2>
    684a:	22 0f       	add	r18, r18
    684c:	33 1f       	adc	r19, r19
    684e:	44 1f       	adc	r20, r20
    6850:	55 1f       	adc	r21, r21
    6852:	66 1f       	adc	r22, r22
    6854:	77 1f       	adc	r23, r23
    6856:	88 1f       	adc	r24, r24
    6858:	99 1f       	adc	r25, r25
    685a:	21 1d       	adc	r18, r1
    685c:	0a 95       	dec	r16
    685e:	aa f7       	brpl	.-22     	; 0x684a <__rotldi3+0x1c>
    6860:	0f 91       	pop	r16
    6862:	08 95       	ret

00006864 <__adddi3>:
    6864:	2a 0d       	add	r18, r10
    6866:	3b 1d       	adc	r19, r11
    6868:	4c 1d       	adc	r20, r12
    686a:	5d 1d       	adc	r21, r13
    686c:	6e 1d       	adc	r22, r14
    686e:	7f 1d       	adc	r23, r15
    6870:	80 1f       	adc	r24, r16
    6872:	91 1f       	adc	r25, r17
    6874:	08 95       	ret

00006876 <do_rand>:
    6876:	8f 92       	push	r8
    6878:	9f 92       	push	r9
    687a:	af 92       	push	r10
    687c:	bf 92       	push	r11
    687e:	cf 92       	push	r12
    6880:	df 92       	push	r13
    6882:	ef 92       	push	r14
    6884:	ff 92       	push	r15
    6886:	cf 93       	push	r28
    6888:	df 93       	push	r29
    688a:	ec 01       	movw	r28, r24
    688c:	68 81       	ld	r22, Y
    688e:	79 81       	ldd	r23, Y+1	; 0x01
    6890:	8a 81       	ldd	r24, Y+2	; 0x02
    6892:	9b 81       	ldd	r25, Y+3	; 0x03
    6894:	61 15       	cp	r22, r1
    6896:	71 05       	cpc	r23, r1
    6898:	81 05       	cpc	r24, r1
    689a:	91 05       	cpc	r25, r1
    689c:	21 f4       	brne	.+8      	; 0x68a6 <do_rand+0x30>
    689e:	64 e2       	ldi	r22, 0x24	; 36
    68a0:	79 ed       	ldi	r23, 0xD9	; 217
    68a2:	8b e5       	ldi	r24, 0x5B	; 91
    68a4:	97 e0       	ldi	r25, 0x07	; 7
    68a6:	2d e1       	ldi	r18, 0x1D	; 29
    68a8:	33 ef       	ldi	r19, 0xF3	; 243
    68aa:	41 e0       	ldi	r20, 0x01	; 1
    68ac:	50 e0       	ldi	r21, 0x00	; 0
    68ae:	66 d0       	rcall	.+204    	; 0x697c <__divmodsi4>
    68b0:	49 01       	movw	r8, r18
    68b2:	5a 01       	movw	r10, r20
    68b4:	9b 01       	movw	r18, r22
    68b6:	ac 01       	movw	r20, r24
    68b8:	a7 ea       	ldi	r26, 0xA7	; 167
    68ba:	b1 e4       	ldi	r27, 0x41	; 65
    68bc:	7b d0       	rcall	.+246    	; 0x69b4 <__muluhisi3>
    68be:	6b 01       	movw	r12, r22
    68c0:	7c 01       	movw	r14, r24
    68c2:	ac ee       	ldi	r26, 0xEC	; 236
    68c4:	b4 ef       	ldi	r27, 0xF4	; 244
    68c6:	a5 01       	movw	r20, r10
    68c8:	94 01       	movw	r18, r8
    68ca:	80 d0       	rcall	.+256    	; 0x69cc <__mulohisi3>
    68cc:	dc 01       	movw	r26, r24
    68ce:	cb 01       	movw	r24, r22
    68d0:	8c 0d       	add	r24, r12
    68d2:	9d 1d       	adc	r25, r13
    68d4:	ae 1d       	adc	r26, r14
    68d6:	bf 1d       	adc	r27, r15
    68d8:	b7 ff       	sbrs	r27, 7
    68da:	03 c0       	rjmp	.+6      	; 0x68e2 <do_rand+0x6c>
    68dc:	01 97       	sbiw	r24, 0x01	; 1
    68de:	a1 09       	sbc	r26, r1
    68e0:	b0 48       	sbci	r27, 0x80	; 128
    68e2:	88 83       	st	Y, r24
    68e4:	99 83       	std	Y+1, r25	; 0x01
    68e6:	aa 83       	std	Y+2, r26	; 0x02
    68e8:	bb 83       	std	Y+3, r27	; 0x03
    68ea:	9f 77       	andi	r25, 0x7F	; 127
    68ec:	df 91       	pop	r29
    68ee:	cf 91       	pop	r28
    68f0:	ff 90       	pop	r15
    68f2:	ef 90       	pop	r14
    68f4:	df 90       	pop	r13
    68f6:	cf 90       	pop	r12
    68f8:	bf 90       	pop	r11
    68fa:	af 90       	pop	r10
    68fc:	9f 90       	pop	r9
    68fe:	8f 90       	pop	r8
    6900:	08 95       	ret

00006902 <rand_r>:
    6902:	b9 cf       	rjmp	.-142    	; 0x6876 <do_rand>

00006904 <rand>:
    6904:	80 e0       	ldi	r24, 0x00	; 0
    6906:	91 e0       	ldi	r25, 0x01	; 1
    6908:	b6 cf       	rjmp	.-148    	; 0x6876 <do_rand>

0000690a <srand>:
    690a:	a0 e0       	ldi	r26, 0x00	; 0
    690c:	b0 e0       	ldi	r27, 0x00	; 0
    690e:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
    6912:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
    6916:	a0 93 02 01 	sts	0x0102, r26	; 0x800102 <__data_start+0x2>
    691a:	b0 93 03 01 	sts	0x0103, r27	; 0x800103 <__data_start+0x3>
    691e:	08 95       	ret

00006920 <abort>:
    6920:	81 e0       	ldi	r24, 0x01	; 1
    6922:	90 e0       	ldi	r25, 0x00	; 0
    6924:	f8 94       	cli
    6926:	87 c0       	rjmp	.+270    	; 0x6a36 <_exit>

00006928 <memcpy_P>:
    6928:	fb 01       	movw	r30, r22
    692a:	dc 01       	movw	r26, r24
    692c:	02 c0       	rjmp	.+4      	; 0x6932 <memcpy_P+0xa>
    692e:	05 90       	lpm	r0, Z+
    6930:	0d 92       	st	X+, r0
    6932:	41 50       	subi	r20, 0x01	; 1
    6934:	50 40       	sbci	r21, 0x00	; 0
    6936:	d8 f7       	brcc	.-10     	; 0x692e <memcpy_P+0x6>
    6938:	08 95       	ret

0000693a <memcpy>:
    693a:	fb 01       	movw	r30, r22
    693c:	dc 01       	movw	r26, r24
    693e:	02 c0       	rjmp	.+4      	; 0x6944 <memcpy+0xa>
    6940:	01 90       	ld	r0, Z+
    6942:	0d 92       	st	X+, r0
    6944:	41 50       	subi	r20, 0x01	; 1
    6946:	50 40       	sbci	r21, 0x00	; 0
    6948:	d8 f7       	brcc	.-10     	; 0x6940 <memcpy+0x6>
    694a:	08 95       	ret

0000694c <memmove>:
    694c:	68 17       	cp	r22, r24
    694e:	79 07       	cpc	r23, r25
    6950:	68 f4       	brcc	.+26     	; 0x696c <memmove+0x20>
    6952:	fb 01       	movw	r30, r22
    6954:	dc 01       	movw	r26, r24
    6956:	e4 0f       	add	r30, r20
    6958:	f5 1f       	adc	r31, r21
    695a:	a4 0f       	add	r26, r20
    695c:	b5 1f       	adc	r27, r21
    695e:	02 c0       	rjmp	.+4      	; 0x6964 <memmove+0x18>
    6960:	02 90       	ld	r0, -Z
    6962:	0e 92       	st	-X, r0
    6964:	41 50       	subi	r20, 0x01	; 1
    6966:	50 40       	sbci	r21, 0x00	; 0
    6968:	d8 f7       	brcc	.-10     	; 0x6960 <memmove+0x14>
    696a:	08 95       	ret
    696c:	e6 cf       	rjmp	.-52     	; 0x693a <memcpy>

0000696e <memset>:
    696e:	dc 01       	movw	r26, r24
    6970:	01 c0       	rjmp	.+2      	; 0x6974 <memset+0x6>
    6972:	6d 93       	st	X+, r22
    6974:	41 50       	subi	r20, 0x01	; 1
    6976:	50 40       	sbci	r21, 0x00	; 0
    6978:	e0 f7       	brcc	.-8      	; 0x6972 <memset+0x4>
    697a:	08 95       	ret

0000697c <__divmodsi4>:
    697c:	05 2e       	mov	r0, r21
    697e:	97 fb       	bst	r25, 7
    6980:	16 f4       	brtc	.+4      	; 0x6986 <__divmodsi4+0xa>
    6982:	00 94       	com	r0
    6984:	0f d0       	rcall	.+30     	; 0x69a4 <__negsi2>
    6986:	57 fd       	sbrc	r21, 7
    6988:	05 d0       	rcall	.+10     	; 0x6994 <__divmodsi4_neg2>
    698a:	24 d0       	rcall	.+72     	; 0x69d4 <__udivmodsi4>
    698c:	07 fc       	sbrc	r0, 7
    698e:	02 d0       	rcall	.+4      	; 0x6994 <__divmodsi4_neg2>
    6990:	46 f4       	brtc	.+16     	; 0x69a2 <__divmodsi4_exit>
    6992:	08 c0       	rjmp	.+16     	; 0x69a4 <__negsi2>

00006994 <__divmodsi4_neg2>:
    6994:	50 95       	com	r21
    6996:	40 95       	com	r20
    6998:	30 95       	com	r19
    699a:	21 95       	neg	r18
    699c:	3f 4f       	sbci	r19, 0xFF	; 255
    699e:	4f 4f       	sbci	r20, 0xFF	; 255
    69a0:	5f 4f       	sbci	r21, 0xFF	; 255

000069a2 <__divmodsi4_exit>:
    69a2:	08 95       	ret

000069a4 <__negsi2>:
    69a4:	90 95       	com	r25
    69a6:	80 95       	com	r24
    69a8:	70 95       	com	r23
    69aa:	61 95       	neg	r22
    69ac:	7f 4f       	sbci	r23, 0xFF	; 255
    69ae:	8f 4f       	sbci	r24, 0xFF	; 255
    69b0:	9f 4f       	sbci	r25, 0xFF	; 255
    69b2:	08 95       	ret

000069b4 <__muluhisi3>:
    69b4:	31 d0       	rcall	.+98     	; 0x6a18 <__umulhisi3>
    69b6:	a5 9f       	mul	r26, r21
    69b8:	90 0d       	add	r25, r0
    69ba:	b4 9f       	mul	r27, r20
    69bc:	90 0d       	add	r25, r0
    69be:	a4 9f       	mul	r26, r20
    69c0:	80 0d       	add	r24, r0
    69c2:	91 1d       	adc	r25, r1
    69c4:	11 24       	eor	r1, r1
    69c6:	08 95       	ret

000069c8 <__mulshisi3>:
    69c8:	b7 ff       	sbrs	r27, 7
    69ca:	f4 cf       	rjmp	.-24     	; 0x69b4 <__muluhisi3>

000069cc <__mulohisi3>:
    69cc:	f3 df       	rcall	.-26     	; 0x69b4 <__muluhisi3>
    69ce:	82 1b       	sub	r24, r18
    69d0:	93 0b       	sbc	r25, r19
    69d2:	08 95       	ret

000069d4 <__udivmodsi4>:
    69d4:	a1 e2       	ldi	r26, 0x21	; 33
    69d6:	1a 2e       	mov	r1, r26
    69d8:	aa 1b       	sub	r26, r26
    69da:	bb 1b       	sub	r27, r27
    69dc:	fd 01       	movw	r30, r26
    69de:	0d c0       	rjmp	.+26     	; 0x69fa <__udivmodsi4_ep>

000069e0 <__udivmodsi4_loop>:
    69e0:	aa 1f       	adc	r26, r26
    69e2:	bb 1f       	adc	r27, r27
    69e4:	ee 1f       	adc	r30, r30
    69e6:	ff 1f       	adc	r31, r31
    69e8:	a2 17       	cp	r26, r18
    69ea:	b3 07       	cpc	r27, r19
    69ec:	e4 07       	cpc	r30, r20
    69ee:	f5 07       	cpc	r31, r21
    69f0:	20 f0       	brcs	.+8      	; 0x69fa <__udivmodsi4_ep>
    69f2:	a2 1b       	sub	r26, r18
    69f4:	b3 0b       	sbc	r27, r19
    69f6:	e4 0b       	sbc	r30, r20
    69f8:	f5 0b       	sbc	r31, r21

000069fa <__udivmodsi4_ep>:
    69fa:	66 1f       	adc	r22, r22
    69fc:	77 1f       	adc	r23, r23
    69fe:	88 1f       	adc	r24, r24
    6a00:	99 1f       	adc	r25, r25
    6a02:	1a 94       	dec	r1
    6a04:	69 f7       	brne	.-38     	; 0x69e0 <__udivmodsi4_loop>
    6a06:	60 95       	com	r22
    6a08:	70 95       	com	r23
    6a0a:	80 95       	com	r24
    6a0c:	90 95       	com	r25
    6a0e:	9b 01       	movw	r18, r22
    6a10:	ac 01       	movw	r20, r24
    6a12:	bd 01       	movw	r22, r26
    6a14:	cf 01       	movw	r24, r30
    6a16:	08 95       	ret

00006a18 <__umulhisi3>:
    6a18:	a2 9f       	mul	r26, r18
    6a1a:	b0 01       	movw	r22, r0
    6a1c:	b3 9f       	mul	r27, r19
    6a1e:	c0 01       	movw	r24, r0
    6a20:	a3 9f       	mul	r26, r19
    6a22:	70 0d       	add	r23, r0
    6a24:	81 1d       	adc	r24, r1
    6a26:	11 24       	eor	r1, r1
    6a28:	91 1d       	adc	r25, r1
    6a2a:	b2 9f       	mul	r27, r18
    6a2c:	70 0d       	add	r23, r0
    6a2e:	81 1d       	adc	r24, r1
    6a30:	11 24       	eor	r1, r1
    6a32:	91 1d       	adc	r25, r1
    6a34:	08 95       	ret

00006a36 <_exit>:
    6a36:	f8 94       	cli

00006a38 <__stop_program>:
    6a38:	ff cf       	rjmp	.-2      	; 0x6a38 <__stop_program>
