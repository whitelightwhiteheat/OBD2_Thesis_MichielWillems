
Tester.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000424  00800100  00006b3a  00006bce  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00006b3a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000138  00800524  00800524  00006ff2  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00006ff2  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00007024  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000580  00000000  00000000  00007064  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000f60a  00000000  00000000  000075e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00002640  00000000  00000000  00016bee  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000432a  00000000  00000000  0001922e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00001af8  00000000  00000000  0001d558  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00001a7a  00000000  00000000  0001f050  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000d7f8  00000000  00000000  00020aca  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000770  00000000  00000000  0002e2c2  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	39 c2       	rjmp	.+1138   	; 0x474 <__ctors_end>
       2:	00 00       	nop
       4:	56 c2       	rjmp	.+1196   	; 0x4b2 <__bad_interrupt>
       6:	00 00       	nop
       8:	54 c2       	rjmp	.+1192   	; 0x4b2 <__bad_interrupt>
       a:	00 00       	nop
       c:	52 c2       	rjmp	.+1188   	; 0x4b2 <__bad_interrupt>
       e:	00 00       	nop
      10:	50 c2       	rjmp	.+1184   	; 0x4b2 <__bad_interrupt>
      12:	00 00       	nop
      14:	0c 94 02 21 	jmp	0x4204	; 0x4204 <__vector_5>
      18:	0c 94 3a 21 	jmp	0x4274	; 0x4274 <__vector_6>
      1c:	0c 94 72 21 	jmp	0x42e4	; 0x42e4 <__vector_7>
      20:	0c 94 aa 21 	jmp	0x4354	; 0x4354 <__vector_8>
      24:	46 c2       	rjmp	.+1164   	; 0x4b2 <__bad_interrupt>
      26:	00 00       	nop
      28:	44 c2       	rjmp	.+1160   	; 0x4b2 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	42 c2       	rjmp	.+1156   	; 0x4b2 <__bad_interrupt>
      2e:	00 00       	nop
      30:	40 c2       	rjmp	.+1152   	; 0x4b2 <__bad_interrupt>
      32:	00 00       	nop
      34:	3e c2       	rjmp	.+1148   	; 0x4b2 <__bad_interrupt>
      36:	00 00       	nop
      38:	3c c2       	rjmp	.+1144   	; 0x4b2 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	3a c2       	rjmp	.+1140   	; 0x4b2 <__bad_interrupt>
      3e:	00 00       	nop
      40:	31 c4       	rjmp	.+2146   	; 0x8a4 <__vector_16>
      42:	00 00       	nop
      44:	36 c2       	rjmp	.+1132   	; 0x4b2 <__bad_interrupt>
      46:	00 00       	nop
      48:	34 c2       	rjmp	.+1128   	; 0x4b2 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	32 c2       	rjmp	.+1124   	; 0x4b2 <__bad_interrupt>
      4e:	00 00       	nop
      50:	30 c2       	rjmp	.+1120   	; 0x4b2 <__bad_interrupt>
      52:	00 00       	nop
      54:	2e c2       	rjmp	.+1116   	; 0x4b2 <__bad_interrupt>
      56:	00 00       	nop
      58:	2c c2       	rjmp	.+1112   	; 0x4b2 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	2a c2       	rjmp	.+1108   	; 0x4b2 <__bad_interrupt>
      5e:	00 00       	nop
      60:	28 c2       	rjmp	.+1104   	; 0x4b2 <__bad_interrupt>
      62:	00 00       	nop
      64:	26 c2       	rjmp	.+1100   	; 0x4b2 <__bad_interrupt>
      66:	00 00       	nop
      68:	24 c2       	rjmp	.+1096   	; 0x4b2 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	22 c2       	rjmp	.+1092   	; 0x4b2 <__bad_interrupt>
      6e:	00 00       	nop
      70:	20 c2       	rjmp	.+1088   	; 0x4b2 <__bad_interrupt>
      72:	00 00       	nop
      74:	1e c2       	rjmp	.+1084   	; 0x4b2 <__bad_interrupt>
      76:	00 00       	nop
      78:	1c c2       	rjmp	.+1080   	; 0x4b2 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	1a c2       	rjmp	.+1076   	; 0x4b2 <__bad_interrupt>
      7e:	00 00       	nop
      80:	18 c2       	rjmp	.+1072   	; 0x4b2 <__bad_interrupt>
      82:	00 00       	nop
      84:	16 c2       	rjmp	.+1068   	; 0x4b2 <__bad_interrupt>
      86:	00 00       	nop
      88:	14 c2       	rjmp	.+1064   	; 0x4b2 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	12 c2       	rjmp	.+1060   	; 0x4b2 <__bad_interrupt>
      8e:	00 00       	nop
      90:	10 c2       	rjmp	.+1056   	; 0x4b2 <__bad_interrupt>
	...

00000094 <__trampolines_end>:
      94:	67 e6       	ldi	r22, 0x67	; 103
      96:	09 6a       	ori	r16, 0xA9	; 169
      98:	85 ae       	std	Z+61, r8	; 0x3d
      9a:	67 bb       	out	0x17, r22	; 23
      9c:	72 f3       	brmi	.-36     	; 0x7a <__SREG__+0x3b>
      9e:	6e 3c       	cpi	r22, 0xCE	; 206
      a0:	3a f5       	brpl	.+78     	; 0xf0 <sha2_large_common_const+0x3c>
      a2:	4f a5       	ldd	r20, Y+47	; 0x2f
      a4:	7f 52       	subi	r23, 0x2F	; 47
      a6:	0e 51       	subi	r16, 0x1E	; 30
      a8:	8c 68       	ori	r24, 0x8C	; 140
      aa:	05 9b       	sbis	0x00, 5	; 0
      ac:	ab d9       	rcall	.-3242   	; 0xfffff404 <__eeprom_end+0xff7ef404>
      ae:	83 1f       	adc	r24, r19
      b0:	19 cd       	rjmp	.-1486   	; 0xfffffae4 <__eeprom_end+0xff7efae4>
      b2:	e0 5b       	subi	r30, 0xB0	; 176

000000b4 <sha2_large_common_const>:
      b4:	22 ae 28 d7 98 2f 8a 42 cd 65 ef 23 91 44 37 71     ".(../.B.e.#.D7q
      c4:	2f 3b 4d ec cf fb c0 b5 bc db 89 81 a5 db b5 e9     /;M.............
      d4:	38 b5 48 f3 5b c2 56 39 19 d0 05 b6 f1 11 f1 59     8.H.[.V9.......Y
      e4:	9b 4f 19 af a4 82 3f 92 18 81 6d da d5 5e 1c ab     .O....?...m..^..
      f4:	42 02 03 a3 98 aa 07 d8 be 6f 70 45 01 5b 83 12     B........opE.[..
     104:	8c b2 e4 4e be 85 31 24 e2 b4 ff d5 c3 7d 0c 55     ...N..1$.....}.U
     114:	6f 89 7b f2 74 5d be 72 b1 96 16 3b fe b1 de 80     o.{.t].r...;....
     124:	35 12 c7 25 a7 06 dc 9b 94 26 69 cf 74 f1 9b c1     5..%.....&i.t...
     134:	d2 4a f1 9e c1 69 9b e4 e3 25 4f 38 86 47 be ef     .J...i...%O8.G..
     144:	b5 d5 8c 8b c6 9d c1 0f 65 9c ac 77 cc a1 0c 24     ........e..w...$
     154:	75 02 2b 59 6f 2c e9 2d 83 e4 a6 6e aa 84 74 4a     u.+Yo,.-...n..tJ
     164:	d4 fb 41 bd dc a9 b0 5c b5 53 11 83 da 88 f9 76     ..A....\.S.....v
     174:	ab df 66 ee 52 51 3e 98 10 32 b4 2d 6d c6 31 a8     ..f.RQ>..2.-m.1.
     184:	3f 21 fb 98 c8 27 03 b0 e4 0e ef be c7 7f 59 bf     ?!...'........Y.
     194:	c2 8f a8 3d f3 0b e0 c6 25 a7 0a 93 47 91 a7 d5     ...=....%...G...
     1a4:	6f 82 03 e0 51 63 ca 06 70 6e 0e 0a 67 29 29 14     o...Qc..pn..g)).
     1b4:	fc 2f d2 46 85 0a b7 27 26 c9 26 5c 38 21 1b 2e     ./.F...'&.&\8!..
     1c4:	ed 2a c4 5a fc 6d 2c 4d df b3 95 9d 13 0d 38 53     .*.Z.m,M......8S
     1d4:	de 63 af 8b 54 73 0a 65 a8 b2 77 3c bb 0a 6a 76     .c..Ts.e..w<..jv
     1e4:	e6 ae ed 47 2e c9 c2 81 3b 35 82 14 85 2c 72 92     ...G....;5...,r.
     1f4:	64 03 f1 4c a1 e8 bf a2 01 30 42 bc 4b 66 1a a8     d..L.....0B.Kf..
     204:	91 97 f8 d0 70 8b 4b c2 30 be 54 06 a3 51 6c c7     ....p.K.0.T..Ql.
     214:	18 52 ef d6 19 e8 92 d1 10 a9 65 55 24 06 99 d6     .R........eU$...
     224:	2a 20 71 57 85 35 0e f4 b8 d1 bb 32 70 a0 6a 10     * qW.5.....2p.j.
     234:	c8 d0 d2 b8 16 c1 a4 19 53 ab 41 51 08 6c 37 1e     ........S.AQ.l7.
     244:	99 eb 8e df 4c 77 48 27 a8 48 9b e1 b5 bc b0 34     ....LwH'.H.....4
     254:	63 5a c9 c5 b3 0c 1c 39 cb 8a 41 e3 4a aa d8 4e     cZ.....9..A.J..N
     264:	73 e3 63 77 4f ca 9c 5b a3 b8 b2 d6 f3 6f 2e 68     s.cwO..[.....o.h
     274:	fc b2 ef 5d ee 82 8f 74 60 2f 17 43 6f 63 a5 78     ...]...t`/.Coc.x
     284:	72 ab f0 a1 14 78 c8 84 ec 39 64 1a 08 02 c7 8c     r....x...9d.....
     294:	28 1e 63 23 fa ff be 90 e9 bd 82 de eb 6c 50 a4     (.c#.........lP.
     2a4:	15 79 c6 b2 f7 a3 f9 be 2b 53 72 e3 f2 78 71 c6     .y......+Sr..xq.
     2b4:	9c 61 26 ea ce 3e 27 ca 07 c2 c0 21 c7 b8 86 d1     .a&..>'....!....
     2c4:	1e eb e0 cd d6 7d da ea 78 d1 6e ee 7f 4f 7d f5     .....}..x.n..O}.
     2d4:	ba 6f 17 72 aa 67 f0 06 a6 98 c8 a2 c5 7d 63 0a     .o.r.g.......}c.
     2e4:	ae 0d f9 be 04 98 3f 11 1b 47 1c 13 35 0b 71 1b     ......?..G..5.q.
     2f4:	84 7d 04 23 f5 77 db 28 93 24 c7 40 7b ab ca 32     .}.#.w.(.$.@{..2
     304:	bc be c9 15 0a be 9e 3c 4c 0d 10 9c c4 67 1d 43     .......<L....g.C
     314:	b6 42 3e cb be d4 c5 4c 2a 7e 65 fc 9c 29 7f 59     .B>....L*~e..).Y
     324:	ec fa d6 3a ab 6f cb 5f 17 58 47 4a 8c 19 44 6c     ...:.o._.XGJ..Dl

00000334 <k>:
     334:	98 2f 8a 42 91 44 37 71 cf fb c0 b5 a5 db b5 e9     ./.B.D7q........
     344:	5b c2 56 39 f1 11 f1 59 a4 82 3f 92 d5 5e 1c ab     [.V9...Y..?..^..
     354:	98 aa 07 d8 01 5b 83 12 be 85 31 24 c3 7d 0c 55     .....[....1$.}.U
     364:	74 5d be 72 fe b1 de 80 a7 06 dc 9b 74 f1 9b c1     t].r........t...
     374:	c1 69 9b e4 86 47 be ef c6 9d c1 0f cc a1 0c 24     .i...G.........$
     384:	6f 2c e9 2d aa 84 74 4a dc a9 b0 5c da 88 f9 76     o,.-..tJ...\...v
     394:	52 51 3e 98 6d c6 31 a8 c8 27 03 b0 c7 7f 59 bf     RQ>.m.1..'....Y.
     3a4:	f3 0b e0 c6 47 91 a7 d5 51 63 ca 06 67 29 29 14     ....G...Qc..g)).
     3b4:	85 0a b7 27 38 21 1b 2e fc 6d 2c 4d 13 0d 38 53     ...'8!...m,M..8S
     3c4:	54 73 0a 65 bb 0a 6a 76 2e c9 c2 81 85 2c 72 92     Ts.e..jv.....,r.
     3d4:	a1 e8 bf a2 4b 66 1a a8 70 8b 4b c2 a3 51 6c c7     ....Kf..p.K..Ql.
     3e4:	19 e8 92 d1 24 06 99 d6 85 35 0e f4 70 a0 6a 10     ....$....5..p.j.
     3f4:	16 c1 a4 19 08 6c 37 1e 4c 77 48 27 b5 bc b0 34     .....l7.LwH'...4
     404:	b3 0c 1c 39 4a aa d8 4e 4f ca 9c 5b f3 6f 2e 68     ...9J..NO..[.o.h
     414:	ee 82 8f 74 6f 63 a5 78 14 78 c8 84 08 02 c7 8c     ...toc.x.x......
     424:	fa ff be 90 eb 6c 50 a4 f7 a3 f9 be f2 78 71 c6     .....lP......xq.

00000434 <sha512_init_values>:
     434:	08 c9 bc f3 67 e6 09 6a 3b a7 ca 84 85 ae 67 bb     ....g..j;.....g.
     444:	2b f8 94 fe 72 f3 6e 3c f1 36 1d 5f 3a f5 4f a5     +...r.n<.6._:.O.
     454:	d1 82 e6 ad 7f 52 0e 51 1f 6c 3e 2b 8c 68 05 9b     .....R.Q.l>+.h..
     464:	6b bd 41 fb ab d9 83 1f 79 21 7e 13 19 cd e0 5b     k.A.....y!~....[

00000474 <__ctors_end>:
     474:	11 24       	eor	r1, r1
     476:	1f be       	out	0x3f, r1	; 63
     478:	cf ef       	ldi	r28, 0xFF	; 255
     47a:	d0 e1       	ldi	r29, 0x10	; 16
     47c:	de bf       	out	0x3e, r29	; 62
     47e:	cd bf       	out	0x3d, r28	; 61

00000480 <__do_copy_data>:
     480:	15 e0       	ldi	r17, 0x05	; 5
     482:	a0 e0       	ldi	r26, 0x00	; 0
     484:	b1 e0       	ldi	r27, 0x01	; 1
     486:	ea e3       	ldi	r30, 0x3A	; 58
     488:	fb e6       	ldi	r31, 0x6B	; 107
     48a:	00 e0       	ldi	r16, 0x00	; 0
     48c:	0b bf       	out	0x3b, r16	; 59
     48e:	02 c0       	rjmp	.+4      	; 0x494 <__do_copy_data+0x14>
     490:	07 90       	elpm	r0, Z+
     492:	0d 92       	st	X+, r0
     494:	a4 32       	cpi	r26, 0x24	; 36
     496:	b1 07       	cpc	r27, r17
     498:	d9 f7       	brne	.-10     	; 0x490 <__do_copy_data+0x10>

0000049a <__do_clear_bss>:
     49a:	26 e0       	ldi	r18, 0x06	; 6
     49c:	a4 e2       	ldi	r26, 0x24	; 36
     49e:	b5 e0       	ldi	r27, 0x05	; 5
     4a0:	01 c0       	rjmp	.+2      	; 0x4a4 <.do_clear_bss_start>

000004a2 <.do_clear_bss_loop>:
     4a2:	1d 92       	st	X+, r1

000004a4 <.do_clear_bss_start>:
     4a4:	ac 35       	cpi	r26, 0x5C	; 92
     4a6:	b2 07       	cpc	r27, r18
     4a8:	e1 f7       	brne	.-8      	; 0x4a2 <.do_clear_bss_loop>
     4aa:	0e 94 f3 22 	call	0x45e6	; 0x45e6 <main>
     4ae:	0c 94 9b 35 	jmp	0x6b36	; 0x6b36 <_exit>

000004b2 <__bad_interrupt>:
     4b2:	a6 cd       	rjmp	.-1204   	; 0x0 <__vectors>

000004b4 <can_init>:
	}
}

void disable_mob_interrupt(uint8_t mobnr){
	if(mobnr > 7){
		CANIE1 &= ~(1 << (mobnr-8));
     4b4:	f8 94       	cli
     4b6:	81 e0       	ldi	r24, 0x01	; 1
     4b8:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
     4bc:	84 e3       	ldi	r24, 0x34	; 52
     4be:	80 93 db 00 	sts	0x00DB, r24	; 0x8000db <__TEXT_REGION_LENGTH__+0x7e00db>
     4c2:	10 92 da 00 	sts	0x00DA, r1	; 0x8000da <__TEXT_REGION_LENGTH__+0x7e00da>
     4c6:	20 e0       	ldi	r18, 0x00	; 0
     4c8:	82 2f       	mov	r24, r18
     4ca:	82 95       	swap	r24
     4cc:	80 7f       	andi	r24, 0xF0	; 240
     4ce:	80 93 ed 00 	sts	0x00ED, r24	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7e00ed>
     4d2:	10 92 ef 00 	sts	0x00EF, r1	; 0x8000ef <__TEXT_REGION_LENGTH__+0x7e00ef>
     4d6:	10 92 ee 00 	sts	0x00EE, r1	; 0x8000ee <__TEXT_REGION_LENGTH__+0x7e00ee>
     4da:	88 e0       	ldi	r24, 0x08	; 8
     4dc:	90 e0       	ldi	r25, 0x00	; 0
     4de:	10 92 fa 00 	sts	0x00FA, r1	; 0x8000fa <__TEXT_REGION_LENGTH__+0x7e00fa>
     4e2:	01 97       	sbiw	r24, 0x01	; 1
     4e4:	e1 f7       	brne	.-8      	; 0x4de <can_init+0x2a>
     4e6:	2f 5f       	subi	r18, 0xFF	; 255
     4e8:	2f 30       	cpi	r18, 0x0F	; 15
     4ea:	71 f7       	brne	.-36     	; 0x4c8 <can_init+0x14>
     4ec:	88 e0       	ldi	r24, 0x08	; 8
     4ee:	80 93 ed 00 	sts	0x00ED, r24	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7e00ed>
     4f2:	86 e0       	ldi	r24, 0x06	; 6
     4f4:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
     4f8:	8c e0       	ldi	r24, 0x0C	; 12
     4fa:	80 93 e3 00 	sts	0x00E3, r24	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7e00e3>
     4fe:	87 e3       	ldi	r24, 0x37	; 55
     500:	80 93 e4 00 	sts	0x00E4, r24	; 0x8000e4 <__TEXT_REGION_LENGTH__+0x7e00e4>
     504:	10 92 e5 00 	sts	0x00E5, r1	; 0x8000e5 <__TEXT_REGION_LENGTH__+0x7e00e5>
     508:	82 e0       	ldi	r24, 0x02	; 2
     50a:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
     50e:	78 94       	sei
     510:	08 95       	ret

00000512 <can_init_message>:
     512:	fc 01       	movw	r30, r24
     514:	49 30       	cpi	r20, 0x09	; 9
     516:	08 f0       	brcs	.+2      	; 0x51a <can_init_message+0x8>
     518:	48 e0       	ldi	r20, 0x08	; 8
     51a:	80 e1       	ldi	r24, 0x10	; 16
     51c:	68 9f       	mul	r22, r24
     51e:	b0 01       	movw	r22, r0
     520:	11 24       	eor	r1, r1
     522:	68 60       	ori	r22, 0x08	; 8
     524:	60 93 ed 00 	sts	0x00ED, r22	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7e00ed>
     528:	44 23       	and	r20, r20
     52a:	59 f0       	breq	.+22     	; 0x542 <can_init_message+0x30>
     52c:	90 e0       	ldi	r25, 0x00	; 0
     52e:	86 2f       	mov	r24, r22
     530:	89 2b       	or	r24, r25
     532:	80 93 ed 00 	sts	0x00ED, r24	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7e00ed>
     536:	81 91       	ld	r24, Z+
     538:	80 93 fa 00 	sts	0x00FA, r24	; 0x8000fa <__TEXT_REGION_LENGTH__+0x7e00fa>
     53c:	9f 5f       	subi	r25, 0xFF	; 255
     53e:	94 13       	cpse	r25, r20
     540:	f6 cf       	rjmp	.-20     	; 0x52e <can_init_message+0x1c>
     542:	60 93 ed 00 	sts	0x00ED, r22	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7e00ed>
     546:	80 91 ef 00 	lds	r24, 0x00EF	; 0x8000ef <__TEXT_REGION_LENGTH__+0x7e00ef>
     54a:	48 2b       	or	r20, r24
     54c:	40 93 ef 00 	sts	0x00EF, r20	; 0x8000ef <__TEXT_REGION_LENGTH__+0x7e00ef>
     550:	08 95       	ret

00000552 <can_send_message>:
     552:	fb 01       	movw	r30, r22
     554:	da 01       	movw	r26, r20
     556:	40 e1       	ldi	r20, 0x10	; 16
     558:	84 9f       	mul	r24, r20
     55a:	b0 01       	movw	r22, r0
     55c:	11 24       	eor	r1, r1
     55e:	68 60       	ori	r22, 0x08	; 8
     560:	60 93 ed 00 	sts	0x00ED, r22	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7e00ed>
     564:	90 81       	ld	r25, Z
     566:	92 95       	swap	r25
     568:	99 0f       	add	r25, r25
     56a:	90 7e       	andi	r25, 0xE0	; 224
     56c:	90 93 f2 00 	sts	0x00F2, r25	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7e00f2>
     570:	30 81       	ld	r19, Z
     572:	36 95       	lsr	r19
     574:	36 95       	lsr	r19
     576:	36 95       	lsr	r19
     578:	91 81       	ldd	r25, Z+1	; 0x01
     57a:	40 e2       	ldi	r20, 0x20	; 32
     57c:	94 9f       	mul	r25, r20
     57e:	b0 01       	movw	r22, r0
     580:	11 24       	eor	r1, r1
     582:	63 2b       	or	r22, r19
     584:	60 93 f3 00 	sts	0x00F3, r22	; 0x8000f3 <__TEXT_REGION_LENGTH__+0x7e00f3>
     588:	10 92 f0 00 	sts	0x00F0, r1	; 0x8000f0 <__TEXT_REGION_LENGTH__+0x7e00f0>
     58c:	42 2f       	mov	r20, r18
     58e:	68 2f       	mov	r22, r24
     590:	cd 01       	movw	r24, r26
     592:	bf df       	rcall	.-130    	; 0x512 <can_init_message>
     594:	80 91 ef 00 	lds	r24, 0x00EF	; 0x8000ef <__TEXT_REGION_LENGTH__+0x7e00ef>
     598:	80 64       	ori	r24, 0x40	; 64
     59a:	80 93 ef 00 	sts	0x00EF, r24	; 0x8000ef <__TEXT_REGION_LENGTH__+0x7e00ef>
     59e:	80 91 ee 00 	lds	r24, 0x00EE	; 0x8000ee <__TEXT_REGION_LENGTH__+0x7e00ee>
     5a2:	80 34       	cpi	r24, 0x40	; 64
     5a4:	e1 f7       	brne	.-8      	; 0x59e <can_send_message+0x4c>
     5a6:	10 92 ee 00 	sts	0x00EE, r1	; 0x8000ee <__TEXT_REGION_LENGTH__+0x7e00ee>
     5aa:	10 92 ef 00 	sts	0x00EF, r1	; 0x8000ef <__TEXT_REGION_LENGTH__+0x7e00ef>
     5ae:	80 e0       	ldi	r24, 0x00	; 0
     5b0:	90 e0       	ldi	r25, 0x00	; 0
     5b2:	08 95       	ret

000005b4 <can_enable_receive>:
		}else{
		CANIE2 &= ~(1 << mobnr);
	}
}

void can_enable_receive(uint8_t mobnr,can_mask_t mask){
     5b4:	fb 01       	movw	r30, r22
	CANCDMOB = 0x00;
	return 0;
}

void can_enable_mob_interrupt(uint8_t mobnr){
	if(mobnr > 7){ 
     5b6:	88 30       	cpi	r24, 0x08	; 8
     5b8:	a0 f5       	brcc	.+104    	; 0x622 <can_enable_receive+0x6e>
		CANIE1 |= 1 << (mobnr-8);
	}else{
		CANIE2 |= 1 << mobnr;
     5ba:	60 91 de 00 	lds	r22, 0x00DE	; 0x8000de <__TEXT_REGION_LENGTH__+0x7e00de>
     5be:	28 2f       	mov	r18, r24
     5c0:	30 e0       	ldi	r19, 0x00	; 0
     5c2:	41 e0       	ldi	r20, 0x01	; 1
     5c4:	50 e0       	ldi	r21, 0x00	; 0
     5c6:	da 01       	movw	r26, r20
     5c8:	02 c0       	rjmp	.+4      	; 0x5ce <can_enable_receive+0x1a>
     5ca:	aa 0f       	add	r26, r26
     5cc:	bb 1f       	adc	r27, r27
     5ce:	8a 95       	dec	r24
     5d0:	e2 f7       	brpl	.-8      	; 0x5ca <can_enable_receive+0x16>
     5d2:	cd 01       	movw	r24, r26
     5d4:	86 2b       	or	r24, r22
     5d6:	80 93 de 00 	sts	0x00DE, r24	; 0x8000de <__TEXT_REGION_LENGTH__+0x7e00de>
		sei();

}

static void set_page(uint8_t mobnr){
	CANPAGE = (mobnr << 4) | PAGE_MASK;
     5da:	22 95       	swap	r18
     5dc:	32 95       	swap	r19
     5de:	30 7f       	andi	r19, 0xF0	; 240
     5e0:	32 27       	eor	r19, r18
     5e2:	20 7f       	andi	r18, 0xF0	; 240
     5e4:	32 27       	eor	r19, r18
     5e6:	28 60       	ori	r18, 0x08	; 8
     5e8:	20 93 ed 00 	sts	0x00ED, r18	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7e00ed>
	CANIDM4 = (0 << RTRMSK) | (0 << IDEMSK);
}
*/

void can_init_mask (can_mask_t mask){
	CANIDM2 = mask[0] << 5;
     5ec:	80 81       	ld	r24, Z
     5ee:	82 95       	swap	r24
     5f0:	88 0f       	add	r24, r24
     5f2:	80 7e       	andi	r24, 0xE0	; 224
     5f4:	80 93 f6 00 	sts	0x00F6, r24	; 0x8000f6 <__TEXT_REGION_LENGTH__+0x7e00f6>
	CANIDM1 = mask[0] >> 3 | mask[1] << 5;
     5f8:	80 81       	ld	r24, Z
     5fa:	28 2f       	mov	r18, r24
     5fc:	26 95       	lsr	r18
     5fe:	26 95       	lsr	r18
     600:	26 95       	lsr	r18
     602:	91 81       	ldd	r25, Z+1	; 0x01
     604:	b0 e2       	ldi	r27, 0x20	; 32
     606:	9b 9f       	mul	r25, r27
     608:	c0 01       	movw	r24, r0
     60a:	11 24       	eor	r1, r1
     60c:	82 2b       	or	r24, r18
     60e:	80 93 f7 00 	sts	0x00F7, r24	; 0x8000f7 <__TEXT_REGION_LENGTH__+0x7e00f7>
	//RTRMSK = 0 : We don't use remote frames ever.
	//IDEMSK = 0 : we don't use the extended format.
	CANIDM4 = (0 << RTRMSK) | (0 << IDEMSK);
     612:	10 92 f4 00 	sts	0x00F4, r1	; 0x8000f4 <__TEXT_REGION_LENGTH__+0x7e00f4>

void can_enable_receive(uint8_t mobnr,can_mask_t mask){
	can_enable_mob_interrupt(mobnr);
	set_page(mobnr);
	can_init_mask(mask);
	CANCDMOB |= (1 << CONMOB1) | (1 << DLC3);
     616:	80 91 ef 00 	lds	r24, 0x00EF	; 0x8000ef <__TEXT_REGION_LENGTH__+0x7e00ef>
     61a:	88 68       	ori	r24, 0x88	; 136
     61c:	80 93 ef 00 	sts	0x00EF, r24	; 0x8000ef <__TEXT_REGION_LENGTH__+0x7e00ef>
     620:	08 95       	ret
	return 0;
}

void can_enable_mob_interrupt(uint8_t mobnr){
	if(mobnr > 7){ 
		CANIE1 |= 1 << (mobnr-8);
     622:	40 91 df 00 	lds	r20, 0x00DF	; 0x8000df <__TEXT_REGION_LENGTH__+0x7e00df>
     626:	28 2f       	mov	r18, r24
     628:	30 e0       	ldi	r19, 0x00	; 0
     62a:	b9 01       	movw	r22, r18
     62c:	68 50       	subi	r22, 0x08	; 8
     62e:	71 09       	sbc	r23, r1
     630:	81 e0       	ldi	r24, 0x01	; 1
     632:	90 e0       	ldi	r25, 0x00	; 0
     634:	01 c0       	rjmp	.+2      	; 0x638 <can_enable_receive+0x84>
     636:	88 0f       	add	r24, r24
     638:	6a 95       	dec	r22
     63a:	ea f7       	brpl	.-6      	; 0x636 <can_enable_receive+0x82>
     63c:	84 2b       	or	r24, r20
     63e:	80 93 df 00 	sts	0x00DF, r24	; 0x8000df <__TEXT_REGION_LENGTH__+0x7e00df>
     642:	cb cf       	rjmp	.-106    	; 0x5da <can_enable_receive+0x26>

00000644 <can_free_mob>:
		sei();

}

static void set_page(uint8_t mobnr){
	CANPAGE = (mobnr << 4) | PAGE_MASK;
     644:	48 2f       	mov	r20, r24
     646:	50 e0       	ldi	r21, 0x00	; 0
     648:	9a 01       	movw	r18, r20
     64a:	22 95       	swap	r18
     64c:	32 95       	swap	r19
     64e:	30 7f       	andi	r19, 0xF0	; 240
     650:	32 27       	eor	r19, r18
     652:	20 7f       	andi	r18, 0xF0	; 240
     654:	32 27       	eor	r19, r18
     656:	28 60       	ori	r18, 0x08	; 8
     658:	20 93 ed 00 	sts	0x00ED, r18	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7e00ed>
		CANIE2 |= 1 << mobnr;
	}
}

void disable_mob_interrupt(uint8_t mobnr){
	if(mobnr > 7){
     65c:	88 30       	cpi	r24, 0x08	; 8
     65e:	a0 f4       	brcc	.+40     	; 0x688 <can_free_mob+0x44>
		CANIE1 &= ~(1 << (mobnr-8));
		}else{
		CANIE2 &= ~(1 << mobnr);
     660:	40 91 de 00 	lds	r20, 0x00DE	; 0x8000de <__TEXT_REGION_LENGTH__+0x7e00de>
     664:	21 e0       	ldi	r18, 0x01	; 1
     666:	30 e0       	ldi	r19, 0x00	; 0
     668:	b9 01       	movw	r22, r18
     66a:	02 c0       	rjmp	.+4      	; 0x670 <can_free_mob+0x2c>
     66c:	66 0f       	add	r22, r22
     66e:	77 1f       	adc	r23, r23
     670:	8a 95       	dec	r24
     672:	e2 f7       	brpl	.-8      	; 0x66c <can_free_mob+0x28>
     674:	cb 01       	movw	r24, r22
     676:	80 95       	com	r24
     678:	84 23       	and	r24, r20
     67a:	80 93 de 00 	sts	0x00DE, r24	; 0x8000de <__TEXT_REGION_LENGTH__+0x7e00de>
}

void can_free_mob(uint8_t mobnr){
	set_page(mobnr);
	disable_mob_interrupt(mobnr);
	CANSTMOB = 0x00;
     67e:	10 92 ee 00 	sts	0x00EE, r1	; 0x8000ee <__TEXT_REGION_LENGTH__+0x7e00ee>
	CANCDMOB = 0x00;
     682:	10 92 ef 00 	sts	0x00EF, r1	; 0x8000ef <__TEXT_REGION_LENGTH__+0x7e00ef>
     686:	08 95       	ret
	}
}

void disable_mob_interrupt(uint8_t mobnr){
	if(mobnr > 7){
		CANIE1 &= ~(1 << (mobnr-8));
     688:	20 91 df 00 	lds	r18, 0x00DF	; 0x8000df <__TEXT_REGION_LENGTH__+0x7e00df>
     68c:	48 50       	subi	r20, 0x08	; 8
     68e:	51 09       	sbc	r21, r1
     690:	81 e0       	ldi	r24, 0x01	; 1
     692:	90 e0       	ldi	r25, 0x00	; 0
     694:	01 c0       	rjmp	.+2      	; 0x698 <can_free_mob+0x54>
     696:	88 0f       	add	r24, r24
     698:	4a 95       	dec	r20
     69a:	ea f7       	brpl	.-6      	; 0x696 <can_free_mob+0x52>
     69c:	80 95       	com	r24
     69e:	82 23       	and	r24, r18
     6a0:	80 93 df 00 	sts	0x00DF, r24	; 0x8000df <__TEXT_REGION_LENGTH__+0x7e00df>
}

void can_free_mob(uint8_t mobnr){
	set_page(mobnr);
	disable_mob_interrupt(mobnr);
	CANSTMOB = 0x00;
     6a4:	10 92 ee 00 	sts	0x00EE, r1	; 0x8000ee <__TEXT_REGION_LENGTH__+0x7e00ee>
	CANCDMOB = 0x00;
     6a8:	10 92 ef 00 	sts	0x00EF, r1	; 0x8000ef <__TEXT_REGION_LENGTH__+0x7e00ef>
     6ac:	08 95       	ret

000006ae <can_wait_for_receive>:
}

int can_wait_for_receive(){
	while((CANGIT & INTR_MASK) != (1 << CANIT));
     6ae:	80 91 da 00 	lds	r24, 0x00DA	; 0x8000da <__TEXT_REGION_LENGTH__+0x7e00da>
     6b2:	87 ff       	sbrs	r24, 7
     6b4:	fc cf       	rjmp	.-8      	; 0x6ae <can_wait_for_receive>
	return (CANHPMOB >> 4);
     6b6:	80 91 ec 00 	lds	r24, 0x00EC	; 0x8000ec <__TEXT_REGION_LENGTH__+0x7e00ec>
     6ba:	82 95       	swap	r24
     6bc:	8f 70       	andi	r24, 0x0F	; 15
}
     6be:	90 e0       	ldi	r25, 0x00	; 0
     6c0:	08 95       	ret

000006c2 <can_receive_message2>:

int can_receive_message2(uint8_t mobnr, can_id_t id, can_msg_t message, uint8_t *size){
     6c2:	cf 93       	push	r28
     6c4:	df 93       	push	r29
     6c6:	d9 01       	movw	r26, r18
		sei();

}

static void set_page(uint8_t mobnr){
	CANPAGE = (mobnr << 4) | PAGE_MASK;
     6c8:	90 e1       	ldi	r25, 0x10	; 16
     6ca:	89 9f       	mul	r24, r25
     6cc:	f0 01       	movw	r30, r0
     6ce:	11 24       	eor	r1, r1
     6d0:	e8 60       	ori	r30, 0x08	; 8
     6d2:	e0 93 ed 00 	sts	0x00ED, r30	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7e00ed>
	return (CANHPMOB >> 4);
}

int can_receive_message2(uint8_t mobnr, can_id_t id, can_msg_t message, uint8_t *size){
	set_page(mobnr);
	if((CANGIT & INTR_MASK) != (1 << CANIT)) return 1;
     6d6:	90 91 da 00 	lds	r25, 0x00DA	; 0x8000da <__TEXT_REGION_LENGTH__+0x7e00da>
     6da:	97 fd       	sbrc	r25, 7
     6dc:	05 c0       	rjmp	.+10     	; 0x6e8 <can_receive_message2+0x26>
     6de:	81 e0       	ldi	r24, 0x01	; 1
     6e0:	90 e0       	ldi	r25, 0x00	; 0
	can_get_message(mobnr, message);
	can_get_size(mobnr,size);
	can_get_id(mobnr,id);
	can_free_mob(mobnr);
	return 0;
}
     6e2:	df 91       	pop	r29
     6e4:	cf 91       	pop	r28
     6e6:	08 95       	ret
}

int can_receive_message2(uint8_t mobnr, can_id_t id, can_msg_t message, uint8_t *size){
	set_page(mobnr);
	if((CANGIT & INTR_MASK) != (1 << CANIT)) return 1;
	if((CANSTMOB & RXOK_MASK) != (1 << RXOK)) return 2;
     6e8:	90 91 ee 00 	lds	r25, 0x00EE	; 0x8000ee <__TEXT_REGION_LENGTH__+0x7e00ee>
     6ec:	95 fd       	sbrc	r25, 5
     6ee:	05 c0       	rjmp	.+10     	; 0x6fa <can_receive_message2+0x38>
     6f0:	82 e0       	ldi	r24, 0x02	; 2
     6f2:	90 e0       	ldi	r25, 0x00	; 0
	can_get_message(mobnr, message);
	can_get_size(mobnr,size);
	can_get_id(mobnr,id);
	can_free_mob(mobnr);
	return 0;
}
     6f4:	df 91       	pop	r29
     6f6:	cf 91       	pop	r28
     6f8:	08 95       	ret
		sei();

}

static void set_page(uint8_t mobnr){
	CANPAGE = (mobnr << 4) | PAGE_MASK;
     6fa:	e0 93 ed 00 	sts	0x00ED, r30	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7e00ed>
}

void can_get_message(uint8_t mobnr , uint8_t *message){
	set_page(mobnr);
	uint8_t j;
	for(j=0; j<8; j++){
     6fe:	90 e0       	ldi	r25, 0x00	; 0
static void set_page(uint8_t mobnr){
	CANPAGE = (mobnr << 4) | PAGE_MASK;
}

static void set_page_indx(uint8_t indx, uint8_t mobnr){
	CANPAGE = (mobnr << 4) | PAGE_MASK | indx;
     700:	3e 2f       	mov	r19, r30
     702:	39 2b       	or	r19, r25
     704:	30 93 ed 00 	sts	0x00ED, r19	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7e00ed>
void can_get_message(uint8_t mobnr , uint8_t *message){
	set_page(mobnr);
	uint8_t j;
	for(j=0; j<8; j++){
		set_page_indx(j, mobnr);
		*message = CANMSG;
     708:	30 91 fa 00 	lds	r19, 0x00FA	; 0x8000fa <__TEXT_REGION_LENGTH__+0x7e00fa>
     70c:	ea 01       	movw	r28, r20
     70e:	39 93       	st	Y+, r19
     710:	ae 01       	movw	r20, r28
}

void can_get_message(uint8_t mobnr , uint8_t *message){
	set_page(mobnr);
	uint8_t j;
	for(j=0; j<8; j++){
     712:	9f 5f       	subi	r25, 0xFF	; 255
     714:	98 30       	cpi	r25, 0x08	; 8
     716:	a1 f7       	brne	.-24     	; 0x700 <can_receive_message2+0x3e>
static void set_page(uint8_t mobnr){
	CANPAGE = (mobnr << 4) | PAGE_MASK;
}

static void set_page_indx(uint8_t indx, uint8_t mobnr){
	CANPAGE = (mobnr << 4) | PAGE_MASK | indx;
     718:	e0 93 ed 00 	sts	0x00ED, r30	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7e00ed>
		sei();

}

static void set_page(uint8_t mobnr){
	CANPAGE = (mobnr << 4) | PAGE_MASK;
     71c:	e0 93 ed 00 	sts	0x00ED, r30	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7e00ed>
}

void can_get_size(uint8_t mobnr, uint8_t *size){
	set_page(mobnr);
	uint8_t mask = 0x0F;
	*size = CANCDMOB & 0x0F;
     720:	90 91 ef 00 	lds	r25, 0x00EF	; 0x8000ef <__TEXT_REGION_LENGTH__+0x7e00ef>
     724:	9f 70       	andi	r25, 0x0F	; 15
     726:	9c 93       	st	X, r25
		sei();

}

static void set_page(uint8_t mobnr){
	CANPAGE = (mobnr << 4) | PAGE_MASK;
     728:	e0 93 ed 00 	sts	0x00ED, r30	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7e00ed>
	uart_puts(hex);
}

void can_get_id(uint8_t mobnr, can_id_t id){
	set_page(mobnr);
	id[0] = CANIDT2 >> 5 | CANIDT1 << 3;
     72c:	20 91 f2 00 	lds	r18, 0x00F2	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7e00f2>
     730:	90 91 f3 00 	lds	r25, 0x00F3	; 0x8000f3 <__TEXT_REGION_LENGTH__+0x7e00f3>
     734:	22 95       	swap	r18
     736:	26 95       	lsr	r18
     738:	27 70       	andi	r18, 0x07	; 7
     73a:	99 0f       	add	r25, r25
     73c:	99 0f       	add	r25, r25
     73e:	99 0f       	add	r25, r25
     740:	92 2b       	or	r25, r18
     742:	fb 01       	movw	r30, r22
     744:	90 83       	st	Z, r25
	id[1] = CANIDT1 >> 5;
     746:	90 91 f3 00 	lds	r25, 0x00F3	; 0x8000f3 <__TEXT_REGION_LENGTH__+0x7e00f3>
     74a:	92 95       	swap	r25
     74c:	96 95       	lsr	r25
     74e:	97 70       	andi	r25, 0x07	; 7
     750:	91 83       	std	Z+1, r25	; 0x01
	if((CANGIT & INTR_MASK) != (1 << CANIT)) return 1;
	if((CANSTMOB & RXOK_MASK) != (1 << RXOK)) return 2;
	can_get_message(mobnr, message);
	can_get_size(mobnr,size);
	can_get_id(mobnr,id);
	can_free_mob(mobnr);
     752:	78 df       	rcall	.-272    	; 0x644 <can_free_mob>
	return 0;
     754:	80 e0       	ldi	r24, 0x00	; 0
     756:	90 e0       	ldi	r25, 0x00	; 0
}
     758:	df 91       	pop	r29
     75a:	cf 91       	pop	r28
     75c:	08 95       	ret

0000075e <can_receive_message>:

int can_receive_message( uint8_t mobnr, can_id_t id, can_mask_t mask, can_msg_t message , uint8_t *len){
     75e:	0f 93       	push	r16
     760:	1f 93       	push	r17
     762:	cf 93       	push	r28
     764:	df 93       	push	r29
     766:	eb 01       	movw	r28, r22
     768:	da 01       	movw	r26, r20
     76a:	f9 01       	movw	r30, r18
		sei();

}

static void set_page(uint8_t mobnr){
	CANPAGE = (mobnr << 4) | PAGE_MASK;
     76c:	40 e1       	ldi	r20, 0x10	; 16
     76e:	84 9f       	mul	r24, r20
     770:	90 01       	movw	r18, r0
     772:	11 24       	eor	r1, r1
     774:	92 2f       	mov	r25, r18
     776:	98 60       	ori	r25, 0x08	; 8
     778:	90 93 ed 00 	sts	0x00ED, r25	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7e00ed>
	return 0;
}

int can_receive_message( uint8_t mobnr, can_id_t id, can_mask_t mask, can_msg_t message , uint8_t *len){
	set_page(mobnr);
	CANIE2 = (1 << mobnr);
     77c:	21 e0       	ldi	r18, 0x01	; 1
     77e:	30 e0       	ldi	r19, 0x00	; 0
     780:	01 c0       	rjmp	.+2      	; 0x784 <can_receive_message+0x26>
     782:	22 0f       	add	r18, r18
     784:	8a 95       	dec	r24
     786:	ea f7       	brpl	.-6      	; 0x782 <can_receive_message+0x24>
     788:	20 93 de 00 	sts	0x00DE, r18	; 0x8000de <__TEXT_REGION_LENGTH__+0x7e00de>
	id[0] = CANIDT2 >> 5 | CANIDT1 << 3;
	id[1] = CANIDT1 >> 5;
}

void can_init_id ( can_id_t id){
	CANIDT2 = id[0] << 5;
     78c:	88 81       	ld	r24, Y
     78e:	82 95       	swap	r24
     790:	88 0f       	add	r24, r24
     792:	80 7e       	andi	r24, 0xE0	; 224
     794:	80 93 f2 00 	sts	0x00F2, r24	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7e00f2>
	CANIDT1 = id[0] >> 3 | id[1] << 5;
     798:	28 81       	ld	r18, Y
     79a:	42 2f       	mov	r20, r18
     79c:	46 95       	lsr	r20
     79e:	46 95       	lsr	r20
     7a0:	46 95       	lsr	r20
     7a2:	89 81       	ldd	r24, Y+1	; 0x01
     7a4:	50 e2       	ldi	r21, 0x20	; 32
     7a6:	85 9f       	mul	r24, r21
     7a8:	90 01       	movw	r18, r0
     7aa:	11 24       	eor	r1, r1
     7ac:	24 2b       	or	r18, r20
     7ae:	20 93 f3 00 	sts	0x00F3, r18	; 0x8000f3 <__TEXT_REGION_LENGTH__+0x7e00f3>
	//not a remote frame.
	CANIDT4 = 0 << RTRTAG;
     7b2:	10 92 f0 00 	sts	0x00F0, r1	; 0x8000f0 <__TEXT_REGION_LENGTH__+0x7e00f0>
	CANIDM4 = (0 << RTRMSK) | (0 << IDEMSK);
}
*/

void can_init_mask (can_mask_t mask){
	CANIDM2 = mask[0] << 5;
     7b6:	8c 91       	ld	r24, X
     7b8:	82 95       	swap	r24
     7ba:	88 0f       	add	r24, r24
     7bc:	80 7e       	andi	r24, 0xE0	; 224
     7be:	80 93 f6 00 	sts	0x00F6, r24	; 0x8000f6 <__TEXT_REGION_LENGTH__+0x7e00f6>
	CANIDM1 = mask[0] >> 3 | mask[1] << 5;
     7c2:	2c 91       	ld	r18, X
     7c4:	52 2f       	mov	r21, r18
     7c6:	56 95       	lsr	r21
     7c8:	56 95       	lsr	r21
     7ca:	56 95       	lsr	r21
     7cc:	11 96       	adiw	r26, 0x01	; 1
     7ce:	8c 91       	ld	r24, X
     7d0:	40 e2       	ldi	r20, 0x20	; 32
     7d2:	84 9f       	mul	r24, r20
     7d4:	90 01       	movw	r18, r0
     7d6:	11 24       	eor	r1, r1
     7d8:	25 2b       	or	r18, r21
     7da:	20 93 f7 00 	sts	0x00F7, r18	; 0x8000f7 <__TEXT_REGION_LENGTH__+0x7e00f7>
	//RTRMSK = 0 : We don't use remote frames ever.
	//IDEMSK = 0 : we don't use the extended format.
	CANIDM4 = (0 << RTRMSK) | (0 << IDEMSK);
     7de:	10 92 f4 00 	sts	0x00F4, r1	; 0x8000f4 <__TEXT_REGION_LENGTH__+0x7e00f4>
	set_page(mobnr);
	CANIE2 = (1 << mobnr);
	can_init_id(id);
	can_init_mask(mask);
	//CAN standard rev 2.0 A (identifiers length = 11 bits)
	CANCDMOB = (1 << CONMOB1) | (1 << DLC3); //enable reception and data length code = 8 bytes
     7e2:	88 e8       	ldi	r24, 0x88	; 136
     7e4:	80 93 ef 00 	sts	0x00EF, r24	; 0x8000ef <__TEXT_REGION_LENGTH__+0x7e00ef>
	//wait for interrupt
	while((CANGIT & INTR_MASK) != (1 << CANIT));
     7e8:	80 91 da 00 	lds	r24, 0x00DA	; 0x8000da <__TEXT_REGION_LENGTH__+0x7e00da>
     7ec:	87 ff       	sbrs	r24, 7
     7ee:	fc cf       	rjmp	.-8      	; 0x7e8 <can_receive_message+0x8a>
	//check if it is the right interrupt.
	if((CANSTMOB & RXOK_MASK) != (1 << RXOK)) return 1;
     7f0:	80 91 ee 00 	lds	r24, 0x00EE	; 0x8000ee <__TEXT_REGION_LENGTH__+0x7e00ee>
     7f4:	85 ff       	sbrs	r24, 5
     7f6:	27 c0       	rjmp	.+78     	; 0x846 <can_receive_message+0xe8>
		sei();

}

static void set_page(uint8_t mobnr){
	CANPAGE = (mobnr << 4) | PAGE_MASK;
     7f8:	90 93 ed 00 	sts	0x00ED, r25	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7e00ed>
}

void can_get_message(uint8_t mobnr , uint8_t *message){
	set_page(mobnr);
	uint8_t j;
	for(j=0; j<8; j++){
     7fc:	80 e0       	ldi	r24, 0x00	; 0
static void set_page(uint8_t mobnr){
	CANPAGE = (mobnr << 4) | PAGE_MASK;
}

static void set_page_indx(uint8_t indx, uint8_t mobnr){
	CANPAGE = (mobnr << 4) | PAGE_MASK | indx;
     7fe:	29 2f       	mov	r18, r25
     800:	28 2b       	or	r18, r24
     802:	20 93 ed 00 	sts	0x00ED, r18	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7e00ed>
void can_get_message(uint8_t mobnr , uint8_t *message){
	set_page(mobnr);
	uint8_t j;
	for(j=0; j<8; j++){
		set_page_indx(j, mobnr);
		*message = CANMSG;
     806:	20 91 fa 00 	lds	r18, 0x00FA	; 0x8000fa <__TEXT_REGION_LENGTH__+0x7e00fa>
     80a:	21 93       	st	Z+, r18
}

void can_get_message(uint8_t mobnr , uint8_t *message){
	set_page(mobnr);
	uint8_t j;
	for(j=0; j<8; j++){
     80c:	8f 5f       	subi	r24, 0xFF	; 255
     80e:	88 30       	cpi	r24, 0x08	; 8
     810:	b1 f7       	brne	.-20     	; 0x7fe <can_receive_message+0xa0>
static void set_page(uint8_t mobnr){
	CANPAGE = (mobnr << 4) | PAGE_MASK;
}

static void set_page_indx(uint8_t indx, uint8_t mobnr){
	CANPAGE = (mobnr << 4) | PAGE_MASK | indx;
     812:	90 93 ed 00 	sts	0x00ED, r25	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7e00ed>
		sei();

}

static void set_page(uint8_t mobnr){
	CANPAGE = (mobnr << 4) | PAGE_MASK;
     816:	90 93 ed 00 	sts	0x00ED, r25	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7e00ed>
}

void can_get_size(uint8_t mobnr, uint8_t *size){
	set_page(mobnr);
	uint8_t mask = 0x0F;
	*size = CANCDMOB & 0x0F;
     81a:	80 91 ef 00 	lds	r24, 0x00EF	; 0x8000ef <__TEXT_REGION_LENGTH__+0x7e00ef>
     81e:	8f 70       	andi	r24, 0x0F	; 15
     820:	f8 01       	movw	r30, r16
     822:	80 83       	st	Z, r24
	
	can_get_message(mobnr, message);
	can_get_size(mobnr, len);
	
	//reset mob.
	CANSTMOB = 0x00;
     824:	10 92 ee 00 	sts	0x00EE, r1	; 0x8000ee <__TEXT_REGION_LENGTH__+0x7e00ee>
	CANCDMOB = 0x00;
     828:	10 92 ef 00 	sts	0x00EF, r1	; 0x8000ef <__TEXT_REGION_LENGTH__+0x7e00ef>
	//reset interrupt enable
	CANIE2 = 0x00;
     82c:	10 92 de 00 	sts	0x00DE, r1	; 0x8000de <__TEXT_REGION_LENGTH__+0x7e00de>
	//reset interrupt register.
	CANGIT = CANGIT;
     830:	80 91 da 00 	lds	r24, 0x00DA	; 0x8000da <__TEXT_REGION_LENGTH__+0x7e00da>
     834:	80 93 da 00 	sts	0x00DA, r24	; 0x8000da <__TEXT_REGION_LENGTH__+0x7e00da>
	//retrieve message.
	return 0;
     838:	80 e0       	ldi	r24, 0x00	; 0
     83a:	90 e0       	ldi	r25, 0x00	; 0
}
     83c:	df 91       	pop	r29
     83e:	cf 91       	pop	r28
     840:	1f 91       	pop	r17
     842:	0f 91       	pop	r16
     844:	08 95       	ret
	//CAN standard rev 2.0 A (identifiers length = 11 bits)
	CANCDMOB = (1 << CONMOB1) | (1 << DLC3); //enable reception and data length code = 8 bytes
	//wait for interrupt
	while((CANGIT & INTR_MASK) != (1 << CANIT));
	//check if it is the right interrupt.
	if((CANSTMOB & RXOK_MASK) != (1 << RXOK)) return 1;
     846:	81 e0       	ldi	r24, 0x01	; 1
     848:	90 e0       	ldi	r25, 0x00	; 0
	CANIE2 = 0x00;
	//reset interrupt register.
	CANGIT = CANGIT;
	//retrieve message.
	return 0;
}
     84a:	df 91       	pop	r29
     84c:	cf 91       	pop	r28
     84e:	1f 91       	pop	r17
     850:	0f 91       	pop	r16
     852:	08 95       	ret

00000854 <can_send_frame_buffer>:

int can_send_frame_buffer( uint8_t *message, uint8_t buff_len ){
     854:	ef 92       	push	r14
     856:	ff 92       	push	r15
     858:	0f 93       	push	r16
     85a:	1f 93       	push	r17
     85c:	cf 93       	push	r28
     85e:	df 93       	push	r29
     860:	00 d0       	rcall	.+0      	; 0x862 <can_send_frame_buffer+0xe>
     862:	cd b7       	in	r28, 0x3d	; 61
     864:	de b7       	in	r29, 0x3e	; 62
     866:	7c 01       	movw	r14, r24
     868:	06 2f       	mov	r16, r22
	uint8_t j = 0;
	for(j=0; j<buff_len; j++){
     86a:	66 23       	and	r22, r22
     86c:	81 f0       	breq	.+32     	; 0x88e <can_send_frame_buffer+0x3a>
     86e:	10 e0       	ldi	r17, 0x00	; 0
		can_id_t id = {j , 0x00};
     870:	19 83       	std	Y+1, r17	; 0x01
     872:	1a 82       	std	Y+2, r1	; 0x02
		can_send_message(j,id,message,8);
     874:	28 e0       	ldi	r18, 0x08	; 8
     876:	a7 01       	movw	r20, r14
     878:	be 01       	movw	r22, r28
     87a:	6f 5f       	subi	r22, 0xFF	; 255
     87c:	7f 4f       	sbci	r23, 0xFF	; 255
     87e:	81 2f       	mov	r24, r17
     880:	68 de       	rcall	.-816    	; 0x552 <can_send_message>
		message = message + 8;
     882:	88 e0       	ldi	r24, 0x08	; 8
     884:	e8 0e       	add	r14, r24
     886:	f1 1c       	adc	r15, r1
	return 0;
}

int can_send_frame_buffer( uint8_t *message, uint8_t buff_len ){
	uint8_t j = 0;
	for(j=0; j<buff_len; j++){
     888:	1f 5f       	subi	r17, 0xFF	; 255
     88a:	01 13       	cpse	r16, r17
     88c:	f1 cf       	rjmp	.-30     	; 0x870 <can_send_frame_buffer+0x1c>
		can_id_t id = {j , 0x00};
		can_send_message(j,id,message,8);
		message = message + 8;
	}
	return 0;
}
     88e:	80 e0       	ldi	r24, 0x00	; 0
     890:	90 e0       	ldi	r25, 0x00	; 0
     892:	0f 90       	pop	r0
     894:	0f 90       	pop	r0
     896:	df 91       	pop	r29
     898:	cf 91       	pop	r28
     89a:	1f 91       	pop	r17
     89c:	0f 91       	pop	r16
     89e:	ff 90       	pop	r15
     8a0:	ef 90       	pop	r14
     8a2:	08 95       	ret

000008a4 <__vector_16>:
#include <interrupt.h>

volatile uint32_t ms = 0;

ISR(TIMER0_COMP_vect)
{
     8a4:	1f 92       	push	r1
     8a6:	0f 92       	push	r0
     8a8:	0f b6       	in	r0, 0x3f	; 63
     8aa:	0f 92       	push	r0
     8ac:	11 24       	eor	r1, r1
     8ae:	8f 93       	push	r24
     8b0:	9f 93       	push	r25
     8b2:	af 93       	push	r26
     8b4:	bf 93       	push	r27
	ms = ms+1;
     8b6:	80 91 24 05 	lds	r24, 0x0524	; 0x800524 <__data_end>
     8ba:	90 91 25 05 	lds	r25, 0x0525	; 0x800525 <__data_end+0x1>
     8be:	a0 91 26 05 	lds	r26, 0x0526	; 0x800526 <__data_end+0x2>
     8c2:	b0 91 27 05 	lds	r27, 0x0527	; 0x800527 <__data_end+0x3>
     8c6:	01 96       	adiw	r24, 0x01	; 1
     8c8:	a1 1d       	adc	r26, r1
     8ca:	b1 1d       	adc	r27, r1
     8cc:	80 93 24 05 	sts	0x0524, r24	; 0x800524 <__data_end>
     8d0:	90 93 25 05 	sts	0x0525, r25	; 0x800525 <__data_end+0x1>
     8d4:	a0 93 26 05 	sts	0x0526, r26	; 0x800526 <__data_end+0x2>
     8d8:	b0 93 27 05 	sts	0x0527, r27	; 0x800527 <__data_end+0x3>
}
     8dc:	bf 91       	pop	r27
     8de:	af 91       	pop	r26
     8e0:	9f 91       	pop	r25
     8e2:	8f 91       	pop	r24
     8e4:	0f 90       	pop	r0
     8e6:	0f be       	out	0x3f, r0	; 63
     8e8:	0f 90       	pop	r0
     8ea:	1f 90       	pop	r1
     8ec:	18 95       	reti

000008ee <millis>:

unsigned long int millis(void)
{
	return ms;
     8ee:	60 91 24 05 	lds	r22, 0x0524	; 0x800524 <__data_end>
     8f2:	70 91 25 05 	lds	r23, 0x0525	; 0x800525 <__data_end+0x1>
     8f6:	80 91 26 05 	lds	r24, 0x0526	; 0x800526 <__data_end+0x2>
     8fa:	90 91 27 05 	lds	r25, 0x0527	; 0x800527 <__data_end+0x3>
}
     8fe:	08 95       	ret

00000900 <clock_Init>:

void clock_Init(void)
{
	OCR0A = 61;
     900:	8d e3       	ldi	r24, 0x3D	; 61
     902:	87 bd       	out	0x27, r24	; 39
	TIMSK0 = 1 << OCIE0A;
     904:	82 e0       	ldi	r24, 0x02	; 2
     906:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__TEXT_REGION_LENGTH__+0x7e006e>
	TCCR0A = 1 << WGM00 | 1 << WGM01 | 1 << CS01 | 1 << CS00;
     90a:	8b e4       	ldi	r24, 0x4B	; 75
     90c:	84 bd       	out	0x24, r24	; 36
     90e:	08 95       	ret

00000910 <uECC_vli_clear>:
    uECC_word_t _private[uECC_MAX_WORDS];
    uECC_word_t _public[uECC_MAX_WORDS * 2];
#endif

#if uECC_VLI_NATIVE_LITTLE_ENDIAN == 0
    uECC_vli_bytesToNative(_private, private_key, BITS_TO_BYTES(curve->num_n_bits));
     910:	dc 01       	movw	r26, r24
     912:	ee ea       	ldi	r30, 0xAE	; 174
     914:	f4 e0       	ldi	r31, 0x04	; 4
     916:	e6 1b       	sub	r30, r22
     918:	f1 09       	sbc	r31, r1
     91a:	09 94       	ijmp
     91c:	1d 92       	st	X+, r1
     91e:	1d 92       	st	X+, r1
     920:	1d 92       	st	X+, r1
     922:	1d 92       	st	X+, r1
     924:	1d 92       	st	X+, r1
     926:	1d 92       	st	X+, r1
     928:	1d 92       	st	X+, r1
     92a:	1d 92       	st	X+, r1
     92c:	1d 92       	st	X+, r1
     92e:	1d 92       	st	X+, r1
     930:	1d 92       	st	X+, r1
     932:	1d 92       	st	X+, r1
     934:	1d 92       	st	X+, r1
     936:	1d 92       	st	X+, r1
     938:	1d 92       	st	X+, r1
     93a:	1d 92       	st	X+, r1
     93c:	1d 92       	st	X+, r1
     93e:	1d 92       	st	X+, r1
     940:	1d 92       	st	X+, r1
     942:	1d 92       	st	X+, r1
     944:	1d 92       	st	X+, r1
     946:	1d 92       	st	X+, r1
     948:	1d 92       	st	X+, r1
     94a:	1d 92       	st	X+, r1
     94c:	1d 92       	st	X+, r1
     94e:	1d 92       	st	X+, r1
     950:	1d 92       	st	X+, r1
     952:	1d 92       	st	X+, r1
     954:	1d 92       	st	X+, r1
     956:	1d 92       	st	X+, r1
     958:	1d 92       	st	X+, r1
     95a:	1d 92       	st	X+, r1
     95c:	08 95       	ret

0000095e <uECC_vli_set>:
     95e:	cf 93       	push	r28
     960:	df 93       	push	r29
     962:	44 0f       	add	r20, r20
     964:	eb 01       	movw	r28, r22
     966:	dc 01       	movw	r26, r24
     968:	e9 ef       	ldi	r30, 0xF9	; 249
     96a:	f4 e0       	ldi	r31, 0x04	; 4
     96c:	e4 1b       	sub	r30, r20
     96e:	f1 09       	sbc	r31, r1
     970:	09 94       	ijmp
     972:	09 90       	ld	r0, Y+
     974:	0d 92       	st	X+, r0
     976:	09 90       	ld	r0, Y+
     978:	0d 92       	st	X+, r0
     97a:	09 90       	ld	r0, Y+
     97c:	0d 92       	st	X+, r0
     97e:	09 90       	ld	r0, Y+
     980:	0d 92       	st	X+, r0
     982:	09 90       	ld	r0, Y+
     984:	0d 92       	st	X+, r0
     986:	09 90       	ld	r0, Y+
     988:	0d 92       	st	X+, r0
     98a:	09 90       	ld	r0, Y+
     98c:	0d 92       	st	X+, r0
     98e:	09 90       	ld	r0, Y+
     990:	0d 92       	st	X+, r0
     992:	09 90       	ld	r0, Y+
     994:	0d 92       	st	X+, r0
     996:	09 90       	ld	r0, Y+
     998:	0d 92       	st	X+, r0
     99a:	09 90       	ld	r0, Y+
     99c:	0d 92       	st	X+, r0
     99e:	09 90       	ld	r0, Y+
     9a0:	0d 92       	st	X+, r0
     9a2:	09 90       	ld	r0, Y+
     9a4:	0d 92       	st	X+, r0
     9a6:	09 90       	ld	r0, Y+
     9a8:	0d 92       	st	X+, r0
     9aa:	09 90       	ld	r0, Y+
     9ac:	0d 92       	st	X+, r0
     9ae:	09 90       	ld	r0, Y+
     9b0:	0d 92       	st	X+, r0
     9b2:	09 90       	ld	r0, Y+
     9b4:	0d 92       	st	X+, r0
     9b6:	09 90       	ld	r0, Y+
     9b8:	0d 92       	st	X+, r0
     9ba:	09 90       	ld	r0, Y+
     9bc:	0d 92       	st	X+, r0
     9be:	09 90       	ld	r0, Y+
     9c0:	0d 92       	st	X+, r0
     9c2:	09 90       	ld	r0, Y+
     9c4:	0d 92       	st	X+, r0
     9c6:	09 90       	ld	r0, Y+
     9c8:	0d 92       	st	X+, r0
     9ca:	09 90       	ld	r0, Y+
     9cc:	0d 92       	st	X+, r0
     9ce:	09 90       	ld	r0, Y+
     9d0:	0d 92       	st	X+, r0
     9d2:	09 90       	ld	r0, Y+
     9d4:	0d 92       	st	X+, r0
     9d6:	09 90       	ld	r0, Y+
     9d8:	0d 92       	st	X+, r0
     9da:	09 90       	ld	r0, Y+
     9dc:	0d 92       	st	X+, r0
     9de:	09 90       	ld	r0, Y+
     9e0:	0d 92       	st	X+, r0
     9e2:	09 90       	ld	r0, Y+
     9e4:	0d 92       	st	X+, r0
     9e6:	09 90       	ld	r0, Y+
     9e8:	0d 92       	st	X+, r0
     9ea:	09 90       	ld	r0, Y+
     9ec:	0d 92       	st	X+, r0
     9ee:	09 90       	ld	r0, Y+
     9f0:	0d 92       	st	X+, r0
     9f2:	df 91       	pop	r29
     9f4:	cf 91       	pop	r28
     9f6:	08 95       	ret

000009f8 <uECC_vli_rshift1>:
     9f8:	26 2f       	mov	r18, r22
     9fa:	32 e0       	ldi	r19, 0x02	; 2
     9fc:	63 9f       	mul	r22, r19
     9fe:	20 0d       	add	r18, r0
     a00:	11 24       	eor	r1, r1
     a02:	23 50       	subi	r18, 0x03	; 3
     a04:	dc 01       	movw	r26, r24
     a06:	ea e6       	ldi	r30, 0x6A	; 106
     a08:	f5 e0       	ldi	r31, 0x05	; 5
     a0a:	e2 1b       	sub	r30, r18
     a0c:	f1 09       	sbc	r31, r1
     a0e:	a6 0f       	add	r26, r22
     a10:	b1 1d       	adc	r27, r1
     a12:	0e 90       	ld	r0, -X
     a14:	06 94       	lsr	r0
     a16:	0c 92       	st	X, r0
     a18:	09 94       	ijmp
     a1a:	0e 90       	ld	r0, -X
     a1c:	07 94       	ror	r0
     a1e:	0c 92       	st	X, r0
     a20:	0e 90       	ld	r0, -X
     a22:	07 94       	ror	r0
     a24:	0c 92       	st	X, r0
     a26:	0e 90       	ld	r0, -X
     a28:	07 94       	ror	r0
     a2a:	0c 92       	st	X, r0
     a2c:	0e 90       	ld	r0, -X
     a2e:	07 94       	ror	r0
     a30:	0c 92       	st	X, r0
     a32:	0e 90       	ld	r0, -X
     a34:	07 94       	ror	r0
     a36:	0c 92       	st	X, r0
     a38:	0e 90       	ld	r0, -X
     a3a:	07 94       	ror	r0
     a3c:	0c 92       	st	X, r0
     a3e:	0e 90       	ld	r0, -X
     a40:	07 94       	ror	r0
     a42:	0c 92       	st	X, r0
     a44:	0e 90       	ld	r0, -X
     a46:	07 94       	ror	r0
     a48:	0c 92       	st	X, r0
     a4a:	0e 90       	ld	r0, -X
     a4c:	07 94       	ror	r0
     a4e:	0c 92       	st	X, r0
     a50:	0e 90       	ld	r0, -X
     a52:	07 94       	ror	r0
     a54:	0c 92       	st	X, r0
     a56:	0e 90       	ld	r0, -X
     a58:	07 94       	ror	r0
     a5a:	0c 92       	st	X, r0
     a5c:	0e 90       	ld	r0, -X
     a5e:	07 94       	ror	r0
     a60:	0c 92       	st	X, r0
     a62:	0e 90       	ld	r0, -X
     a64:	07 94       	ror	r0
     a66:	0c 92       	st	X, r0
     a68:	0e 90       	ld	r0, -X
     a6a:	07 94       	ror	r0
     a6c:	0c 92       	st	X, r0
     a6e:	0e 90       	ld	r0, -X
     a70:	07 94       	ror	r0
     a72:	0c 92       	st	X, r0
     a74:	0e 90       	ld	r0, -X
     a76:	07 94       	ror	r0
     a78:	0c 92       	st	X, r0
     a7a:	0e 90       	ld	r0, -X
     a7c:	07 94       	ror	r0
     a7e:	0c 92       	st	X, r0
     a80:	0e 90       	ld	r0, -X
     a82:	07 94       	ror	r0
     a84:	0c 92       	st	X, r0
     a86:	0e 90       	ld	r0, -X
     a88:	07 94       	ror	r0
     a8a:	0c 92       	st	X, r0
     a8c:	0e 90       	ld	r0, -X
     a8e:	07 94       	ror	r0
     a90:	0c 92       	st	X, r0
     a92:	0e 90       	ld	r0, -X
     a94:	07 94       	ror	r0
     a96:	0c 92       	st	X, r0
     a98:	0e 90       	ld	r0, -X
     a9a:	07 94       	ror	r0
     a9c:	0c 92       	st	X, r0
     a9e:	0e 90       	ld	r0, -X
     aa0:	07 94       	ror	r0
     aa2:	0c 92       	st	X, r0
     aa4:	0e 90       	ld	r0, -X
     aa6:	07 94       	ror	r0
     aa8:	0c 92       	st	X, r0
     aaa:	0e 90       	ld	r0, -X
     aac:	07 94       	ror	r0
     aae:	0c 92       	st	X, r0
     ab0:	0e 90       	ld	r0, -X
     ab2:	07 94       	ror	r0
     ab4:	0c 92       	st	X, r0
     ab6:	0e 90       	ld	r0, -X
     ab8:	07 94       	ror	r0
     aba:	0c 92       	st	X, r0
     abc:	0e 90       	ld	r0, -X
     abe:	07 94       	ror	r0
     ac0:	0c 92       	st	X, r0
     ac2:	0e 90       	ld	r0, -X
     ac4:	07 94       	ror	r0
     ac6:	0c 92       	st	X, r0
     ac8:	0e 90       	ld	r0, -X
     aca:	07 94       	ror	r0
     acc:	0c 92       	st	X, r0
     ace:	0e 90       	ld	r0, -X
     ad0:	07 94       	ror	r0
     ad2:	0c 92       	st	X, r0
     ad4:	08 95       	ret

00000ad6 <uECC_vli_add>:
     ad6:	cf 93       	push	r28
     ad8:	df 93       	push	r29
     ada:	22 0f       	add	r18, r18
     adc:	db 01       	movw	r26, r22
     ade:	ea 01       	movw	r28, r20
     ae0:	ac 01       	movw	r20, r24
     ae2:	e7 eb       	ldi	r30, 0xB7	; 183
     ae4:	f5 e0       	ldi	r31, 0x05	; 5
     ae6:	e2 1b       	sub	r30, r18
     ae8:	f1 09       	sbc	r31, r1
     aea:	88 94       	clc
     aec:	09 94       	ijmp
     aee:	fa 01       	movw	r30, r20
     af0:	3e c0       	rjmp	.+124    	; 0xb6e <add_90_32>
     af2:	fa 01       	movw	r30, r20
     af4:	40 c0       	rjmp	.+128    	; 0xb76 <add_90_31>
     af6:	fa 01       	movw	r30, r20
     af8:	42 c0       	rjmp	.+132    	; 0xb7e <add_90_30>
     afa:	fa 01       	movw	r30, r20
     afc:	44 c0       	rjmp	.+136    	; 0xb86 <add_90_29>
     afe:	fa 01       	movw	r30, r20
     b00:	46 c0       	rjmp	.+140    	; 0xb8e <add_90_28>
     b02:	fa 01       	movw	r30, r20
     b04:	48 c0       	rjmp	.+144    	; 0xb96 <add_90_27>
     b06:	fa 01       	movw	r30, r20
     b08:	4a c0       	rjmp	.+148    	; 0xb9e <add_90_26>
     b0a:	fa 01       	movw	r30, r20
     b0c:	4c c0       	rjmp	.+152    	; 0xba6 <add_90_25>
     b0e:	fa 01       	movw	r30, r20
     b10:	4e c0       	rjmp	.+156    	; 0xbae <add_90_24>
     b12:	fa 01       	movw	r30, r20
     b14:	50 c0       	rjmp	.+160    	; 0xbb6 <add_90_23>
     b16:	fa 01       	movw	r30, r20
     b18:	52 c0       	rjmp	.+164    	; 0xbbe <add_90_22>
     b1a:	fa 01       	movw	r30, r20
     b1c:	54 c0       	rjmp	.+168    	; 0xbc6 <add_90_21>
     b1e:	fa 01       	movw	r30, r20
     b20:	56 c0       	rjmp	.+172    	; 0xbce <add_90_20>
     b22:	fa 01       	movw	r30, r20
     b24:	58 c0       	rjmp	.+176    	; 0xbd6 <add_90_19>
     b26:	fa 01       	movw	r30, r20
     b28:	5a c0       	rjmp	.+180    	; 0xbde <add_90_18>
     b2a:	fa 01       	movw	r30, r20
     b2c:	5c c0       	rjmp	.+184    	; 0xbe6 <add_90_17>
     b2e:	fa 01       	movw	r30, r20
     b30:	5e c0       	rjmp	.+188    	; 0xbee <add_90_16>
     b32:	fa 01       	movw	r30, r20
     b34:	60 c0       	rjmp	.+192    	; 0xbf6 <add_90_15>
     b36:	fa 01       	movw	r30, r20
     b38:	62 c0       	rjmp	.+196    	; 0xbfe <add_90_14>
     b3a:	fa 01       	movw	r30, r20
     b3c:	64 c0       	rjmp	.+200    	; 0xc06 <add_90_13>
     b3e:	fa 01       	movw	r30, r20
     b40:	66 c0       	rjmp	.+204    	; 0xc0e <add_90_12>
     b42:	fa 01       	movw	r30, r20
     b44:	68 c0       	rjmp	.+208    	; 0xc16 <add_90_11>
     b46:	fa 01       	movw	r30, r20
     b48:	6a c0       	rjmp	.+212    	; 0xc1e <add_90_10>
     b4a:	fa 01       	movw	r30, r20
     b4c:	6c c0       	rjmp	.+216    	; 0xc26 <add_90_9>
     b4e:	fa 01       	movw	r30, r20
     b50:	6e c0       	rjmp	.+220    	; 0xc2e <add_90_8>
     b52:	fa 01       	movw	r30, r20
     b54:	70 c0       	rjmp	.+224    	; 0xc36 <add_90_7>
     b56:	fa 01       	movw	r30, r20
     b58:	72 c0       	rjmp	.+228    	; 0xc3e <add_90_6>
     b5a:	fa 01       	movw	r30, r20
     b5c:	74 c0       	rjmp	.+232    	; 0xc46 <add_90_5>
     b5e:	fa 01       	movw	r30, r20
     b60:	76 c0       	rjmp	.+236    	; 0xc4e <add_90_4>
     b62:	fa 01       	movw	r30, r20
     b64:	78 c0       	rjmp	.+240    	; 0xc56 <add_90_3>
     b66:	fa 01       	movw	r30, r20
     b68:	7a c0       	rjmp	.+244    	; 0xc5e <add_90_2>
     b6a:	fa 01       	movw	r30, r20
     b6c:	7c c0       	rjmp	.+248    	; 0xc66 <add_90_1>

00000b6e <add_90_32>:
     b6e:	8d 91       	ld	r24, X+
     b70:	99 91       	ld	r25, Y+
     b72:	89 1f       	adc	r24, r25
     b74:	81 93       	st	Z+, r24

00000b76 <add_90_31>:
     b76:	8d 91       	ld	r24, X+
     b78:	99 91       	ld	r25, Y+
     b7a:	89 1f       	adc	r24, r25
     b7c:	81 93       	st	Z+, r24

00000b7e <add_90_30>:
     b7e:	8d 91       	ld	r24, X+
     b80:	99 91       	ld	r25, Y+
     b82:	89 1f       	adc	r24, r25
     b84:	81 93       	st	Z+, r24

00000b86 <add_90_29>:
     b86:	8d 91       	ld	r24, X+
     b88:	99 91       	ld	r25, Y+
     b8a:	89 1f       	adc	r24, r25
     b8c:	81 93       	st	Z+, r24

00000b8e <add_90_28>:
     b8e:	8d 91       	ld	r24, X+
     b90:	99 91       	ld	r25, Y+
     b92:	89 1f       	adc	r24, r25
     b94:	81 93       	st	Z+, r24

00000b96 <add_90_27>:
     b96:	8d 91       	ld	r24, X+
     b98:	99 91       	ld	r25, Y+
     b9a:	89 1f       	adc	r24, r25
     b9c:	81 93       	st	Z+, r24

00000b9e <add_90_26>:
     b9e:	8d 91       	ld	r24, X+
     ba0:	99 91       	ld	r25, Y+
     ba2:	89 1f       	adc	r24, r25
     ba4:	81 93       	st	Z+, r24

00000ba6 <add_90_25>:
     ba6:	8d 91       	ld	r24, X+
     ba8:	99 91       	ld	r25, Y+
     baa:	89 1f       	adc	r24, r25
     bac:	81 93       	st	Z+, r24

00000bae <add_90_24>:
     bae:	8d 91       	ld	r24, X+
     bb0:	99 91       	ld	r25, Y+
     bb2:	89 1f       	adc	r24, r25
     bb4:	81 93       	st	Z+, r24

00000bb6 <add_90_23>:
     bb6:	8d 91       	ld	r24, X+
     bb8:	99 91       	ld	r25, Y+
     bba:	89 1f       	adc	r24, r25
     bbc:	81 93       	st	Z+, r24

00000bbe <add_90_22>:
     bbe:	8d 91       	ld	r24, X+
     bc0:	99 91       	ld	r25, Y+
     bc2:	89 1f       	adc	r24, r25
     bc4:	81 93       	st	Z+, r24

00000bc6 <add_90_21>:
     bc6:	8d 91       	ld	r24, X+
     bc8:	99 91       	ld	r25, Y+
     bca:	89 1f       	adc	r24, r25
     bcc:	81 93       	st	Z+, r24

00000bce <add_90_20>:
     bce:	8d 91       	ld	r24, X+
     bd0:	99 91       	ld	r25, Y+
     bd2:	89 1f       	adc	r24, r25
     bd4:	81 93       	st	Z+, r24

00000bd6 <add_90_19>:
     bd6:	8d 91       	ld	r24, X+
     bd8:	99 91       	ld	r25, Y+
     bda:	89 1f       	adc	r24, r25
     bdc:	81 93       	st	Z+, r24

00000bde <add_90_18>:
     bde:	8d 91       	ld	r24, X+
     be0:	99 91       	ld	r25, Y+
     be2:	89 1f       	adc	r24, r25
     be4:	81 93       	st	Z+, r24

00000be6 <add_90_17>:
     be6:	8d 91       	ld	r24, X+
     be8:	99 91       	ld	r25, Y+
     bea:	89 1f       	adc	r24, r25
     bec:	81 93       	st	Z+, r24

00000bee <add_90_16>:
     bee:	8d 91       	ld	r24, X+
     bf0:	99 91       	ld	r25, Y+
     bf2:	89 1f       	adc	r24, r25
     bf4:	81 93       	st	Z+, r24

00000bf6 <add_90_15>:
     bf6:	8d 91       	ld	r24, X+
     bf8:	99 91       	ld	r25, Y+
     bfa:	89 1f       	adc	r24, r25
     bfc:	81 93       	st	Z+, r24

00000bfe <add_90_14>:
     bfe:	8d 91       	ld	r24, X+
     c00:	99 91       	ld	r25, Y+
     c02:	89 1f       	adc	r24, r25
     c04:	81 93       	st	Z+, r24

00000c06 <add_90_13>:
     c06:	8d 91       	ld	r24, X+
     c08:	99 91       	ld	r25, Y+
     c0a:	89 1f       	adc	r24, r25
     c0c:	81 93       	st	Z+, r24

00000c0e <add_90_12>:
     c0e:	8d 91       	ld	r24, X+
     c10:	99 91       	ld	r25, Y+
     c12:	89 1f       	adc	r24, r25
     c14:	81 93       	st	Z+, r24

00000c16 <add_90_11>:
     c16:	8d 91       	ld	r24, X+
     c18:	99 91       	ld	r25, Y+
     c1a:	89 1f       	adc	r24, r25
     c1c:	81 93       	st	Z+, r24

00000c1e <add_90_10>:
     c1e:	8d 91       	ld	r24, X+
     c20:	99 91       	ld	r25, Y+
     c22:	89 1f       	adc	r24, r25
     c24:	81 93       	st	Z+, r24

00000c26 <add_90_9>:
     c26:	8d 91       	ld	r24, X+
     c28:	99 91       	ld	r25, Y+
     c2a:	89 1f       	adc	r24, r25
     c2c:	81 93       	st	Z+, r24

00000c2e <add_90_8>:
     c2e:	8d 91       	ld	r24, X+
     c30:	99 91       	ld	r25, Y+
     c32:	89 1f       	adc	r24, r25
     c34:	81 93       	st	Z+, r24

00000c36 <add_90_7>:
     c36:	8d 91       	ld	r24, X+
     c38:	99 91       	ld	r25, Y+
     c3a:	89 1f       	adc	r24, r25
     c3c:	81 93       	st	Z+, r24

00000c3e <add_90_6>:
     c3e:	8d 91       	ld	r24, X+
     c40:	99 91       	ld	r25, Y+
     c42:	89 1f       	adc	r24, r25
     c44:	81 93       	st	Z+, r24

00000c46 <add_90_5>:
     c46:	8d 91       	ld	r24, X+
     c48:	99 91       	ld	r25, Y+
     c4a:	89 1f       	adc	r24, r25
     c4c:	81 93       	st	Z+, r24

00000c4e <add_90_4>:
     c4e:	8d 91       	ld	r24, X+
     c50:	99 91       	ld	r25, Y+
     c52:	89 1f       	adc	r24, r25
     c54:	81 93       	st	Z+, r24

00000c56 <add_90_3>:
     c56:	8d 91       	ld	r24, X+
     c58:	99 91       	ld	r25, Y+
     c5a:	89 1f       	adc	r24, r25
     c5c:	81 93       	st	Z+, r24

00000c5e <add_90_2>:
     c5e:	8d 91       	ld	r24, X+
     c60:	99 91       	ld	r25, Y+
     c62:	89 1f       	adc	r24, r25
     c64:	81 93       	st	Z+, r24

00000c66 <add_90_1>:
     c66:	8d 91       	ld	r24, X+
     c68:	99 91       	ld	r25, Y+
     c6a:	89 1f       	adc	r24, r25
     c6c:	81 93       	st	Z+, r24
     c6e:	81 2d       	mov	r24, r1
     c70:	88 1f       	adc	r24, r24
     c72:	df 91       	pop	r29
     c74:	cf 91       	pop	r28
     c76:	08 95       	ret

00000c78 <uECC_vli_sub>:
     c78:	cf 93       	push	r28
     c7a:	df 93       	push	r29
     c7c:	22 0f       	add	r18, r18
     c7e:	db 01       	movw	r26, r22
     c80:	ea 01       	movw	r28, r20
     c82:	ac 01       	movw	r20, r24
     c84:	e8 e8       	ldi	r30, 0x88	; 136
     c86:	f6 e0       	ldi	r31, 0x06	; 6
     c88:	e2 1b       	sub	r30, r18
     c8a:	f1 09       	sbc	r31, r1
     c8c:	88 94       	clc
     c8e:	09 94       	ijmp
     c90:	fa 01       	movw	r30, r20
     c92:	3e c0       	rjmp	.+124    	; 0xd10 <sub_130_32>
     c94:	fa 01       	movw	r30, r20
     c96:	40 c0       	rjmp	.+128    	; 0xd18 <sub_130_31>
     c98:	fa 01       	movw	r30, r20
     c9a:	42 c0       	rjmp	.+132    	; 0xd20 <sub_130_30>
     c9c:	fa 01       	movw	r30, r20
     c9e:	44 c0       	rjmp	.+136    	; 0xd28 <sub_130_29>
     ca0:	fa 01       	movw	r30, r20
     ca2:	46 c0       	rjmp	.+140    	; 0xd30 <sub_130_28>
     ca4:	fa 01       	movw	r30, r20
     ca6:	48 c0       	rjmp	.+144    	; 0xd38 <sub_130_27>
     ca8:	fa 01       	movw	r30, r20
     caa:	4a c0       	rjmp	.+148    	; 0xd40 <sub_130_26>
     cac:	fa 01       	movw	r30, r20
     cae:	4c c0       	rjmp	.+152    	; 0xd48 <sub_130_25>
     cb0:	fa 01       	movw	r30, r20
     cb2:	4e c0       	rjmp	.+156    	; 0xd50 <sub_130_24>
     cb4:	fa 01       	movw	r30, r20
     cb6:	50 c0       	rjmp	.+160    	; 0xd58 <sub_130_23>
     cb8:	fa 01       	movw	r30, r20
     cba:	52 c0       	rjmp	.+164    	; 0xd60 <sub_130_22>
     cbc:	fa 01       	movw	r30, r20
     cbe:	54 c0       	rjmp	.+168    	; 0xd68 <sub_130_21>
     cc0:	fa 01       	movw	r30, r20
     cc2:	56 c0       	rjmp	.+172    	; 0xd70 <sub_130_20>
     cc4:	fa 01       	movw	r30, r20
     cc6:	58 c0       	rjmp	.+176    	; 0xd78 <sub_130_19>
     cc8:	fa 01       	movw	r30, r20
     cca:	5a c0       	rjmp	.+180    	; 0xd80 <sub_130_18>
     ccc:	fa 01       	movw	r30, r20
     cce:	5c c0       	rjmp	.+184    	; 0xd88 <sub_130_17>
     cd0:	fa 01       	movw	r30, r20
     cd2:	5e c0       	rjmp	.+188    	; 0xd90 <sub_130_16>
     cd4:	fa 01       	movw	r30, r20
     cd6:	60 c0       	rjmp	.+192    	; 0xd98 <sub_130_15>
     cd8:	fa 01       	movw	r30, r20
     cda:	62 c0       	rjmp	.+196    	; 0xda0 <sub_130_14>
     cdc:	fa 01       	movw	r30, r20
     cde:	64 c0       	rjmp	.+200    	; 0xda8 <sub_130_13>
     ce0:	fa 01       	movw	r30, r20
     ce2:	66 c0       	rjmp	.+204    	; 0xdb0 <sub_130_12>
     ce4:	fa 01       	movw	r30, r20
     ce6:	68 c0       	rjmp	.+208    	; 0xdb8 <sub_130_11>
     ce8:	fa 01       	movw	r30, r20
     cea:	6a c0       	rjmp	.+212    	; 0xdc0 <sub_130_10>
     cec:	fa 01       	movw	r30, r20
     cee:	6c c0       	rjmp	.+216    	; 0xdc8 <sub_130_9>
     cf0:	fa 01       	movw	r30, r20
     cf2:	6e c0       	rjmp	.+220    	; 0xdd0 <sub_130_8>
     cf4:	fa 01       	movw	r30, r20
     cf6:	70 c0       	rjmp	.+224    	; 0xdd8 <sub_130_7>
     cf8:	fa 01       	movw	r30, r20
     cfa:	72 c0       	rjmp	.+228    	; 0xde0 <sub_130_6>
     cfc:	fa 01       	movw	r30, r20
     cfe:	74 c0       	rjmp	.+232    	; 0xde8 <sub_130_5>
     d00:	fa 01       	movw	r30, r20
     d02:	76 c0       	rjmp	.+236    	; 0xdf0 <sub_130_4>
     d04:	fa 01       	movw	r30, r20
     d06:	78 c0       	rjmp	.+240    	; 0xdf8 <sub_130_3>
     d08:	fa 01       	movw	r30, r20
     d0a:	7a c0       	rjmp	.+244    	; 0xe00 <sub_130_2>
     d0c:	fa 01       	movw	r30, r20
     d0e:	7c c0       	rjmp	.+248    	; 0xe08 <sub_130_1>

00000d10 <sub_130_32>:
     d10:	8d 91       	ld	r24, X+
     d12:	99 91       	ld	r25, Y+
     d14:	89 0b       	sbc	r24, r25
     d16:	81 93       	st	Z+, r24

00000d18 <sub_130_31>:
     d18:	8d 91       	ld	r24, X+
     d1a:	99 91       	ld	r25, Y+
     d1c:	89 0b       	sbc	r24, r25
     d1e:	81 93       	st	Z+, r24

00000d20 <sub_130_30>:
     d20:	8d 91       	ld	r24, X+
     d22:	99 91       	ld	r25, Y+
     d24:	89 0b       	sbc	r24, r25
     d26:	81 93       	st	Z+, r24

00000d28 <sub_130_29>:
     d28:	8d 91       	ld	r24, X+
     d2a:	99 91       	ld	r25, Y+
     d2c:	89 0b       	sbc	r24, r25
     d2e:	81 93       	st	Z+, r24

00000d30 <sub_130_28>:
     d30:	8d 91       	ld	r24, X+
     d32:	99 91       	ld	r25, Y+
     d34:	89 0b       	sbc	r24, r25
     d36:	81 93       	st	Z+, r24

00000d38 <sub_130_27>:
     d38:	8d 91       	ld	r24, X+
     d3a:	99 91       	ld	r25, Y+
     d3c:	89 0b       	sbc	r24, r25
     d3e:	81 93       	st	Z+, r24

00000d40 <sub_130_26>:
     d40:	8d 91       	ld	r24, X+
     d42:	99 91       	ld	r25, Y+
     d44:	89 0b       	sbc	r24, r25
     d46:	81 93       	st	Z+, r24

00000d48 <sub_130_25>:
     d48:	8d 91       	ld	r24, X+
     d4a:	99 91       	ld	r25, Y+
     d4c:	89 0b       	sbc	r24, r25
     d4e:	81 93       	st	Z+, r24

00000d50 <sub_130_24>:
     d50:	8d 91       	ld	r24, X+
     d52:	99 91       	ld	r25, Y+
     d54:	89 0b       	sbc	r24, r25
     d56:	81 93       	st	Z+, r24

00000d58 <sub_130_23>:
     d58:	8d 91       	ld	r24, X+
     d5a:	99 91       	ld	r25, Y+
     d5c:	89 0b       	sbc	r24, r25
     d5e:	81 93       	st	Z+, r24

00000d60 <sub_130_22>:
     d60:	8d 91       	ld	r24, X+
     d62:	99 91       	ld	r25, Y+
     d64:	89 0b       	sbc	r24, r25
     d66:	81 93       	st	Z+, r24

00000d68 <sub_130_21>:
     d68:	8d 91       	ld	r24, X+
     d6a:	99 91       	ld	r25, Y+
     d6c:	89 0b       	sbc	r24, r25
     d6e:	81 93       	st	Z+, r24

00000d70 <sub_130_20>:
     d70:	8d 91       	ld	r24, X+
     d72:	99 91       	ld	r25, Y+
     d74:	89 0b       	sbc	r24, r25
     d76:	81 93       	st	Z+, r24

00000d78 <sub_130_19>:
     d78:	8d 91       	ld	r24, X+
     d7a:	99 91       	ld	r25, Y+
     d7c:	89 0b       	sbc	r24, r25
     d7e:	81 93       	st	Z+, r24

00000d80 <sub_130_18>:
     d80:	8d 91       	ld	r24, X+
     d82:	99 91       	ld	r25, Y+
     d84:	89 0b       	sbc	r24, r25
     d86:	81 93       	st	Z+, r24

00000d88 <sub_130_17>:
     d88:	8d 91       	ld	r24, X+
     d8a:	99 91       	ld	r25, Y+
     d8c:	89 0b       	sbc	r24, r25
     d8e:	81 93       	st	Z+, r24

00000d90 <sub_130_16>:
     d90:	8d 91       	ld	r24, X+
     d92:	99 91       	ld	r25, Y+
     d94:	89 0b       	sbc	r24, r25
     d96:	81 93       	st	Z+, r24

00000d98 <sub_130_15>:
     d98:	8d 91       	ld	r24, X+
     d9a:	99 91       	ld	r25, Y+
     d9c:	89 0b       	sbc	r24, r25
     d9e:	81 93       	st	Z+, r24

00000da0 <sub_130_14>:
     da0:	8d 91       	ld	r24, X+
     da2:	99 91       	ld	r25, Y+
     da4:	89 0b       	sbc	r24, r25
     da6:	81 93       	st	Z+, r24

00000da8 <sub_130_13>:
     da8:	8d 91       	ld	r24, X+
     daa:	99 91       	ld	r25, Y+
     dac:	89 0b       	sbc	r24, r25
     dae:	81 93       	st	Z+, r24

00000db0 <sub_130_12>:
     db0:	8d 91       	ld	r24, X+
     db2:	99 91       	ld	r25, Y+
     db4:	89 0b       	sbc	r24, r25
     db6:	81 93       	st	Z+, r24

00000db8 <sub_130_11>:
     db8:	8d 91       	ld	r24, X+
     dba:	99 91       	ld	r25, Y+
     dbc:	89 0b       	sbc	r24, r25
     dbe:	81 93       	st	Z+, r24

00000dc0 <sub_130_10>:
     dc0:	8d 91       	ld	r24, X+
     dc2:	99 91       	ld	r25, Y+
     dc4:	89 0b       	sbc	r24, r25
     dc6:	81 93       	st	Z+, r24

00000dc8 <sub_130_9>:
     dc8:	8d 91       	ld	r24, X+
     dca:	99 91       	ld	r25, Y+
     dcc:	89 0b       	sbc	r24, r25
     dce:	81 93       	st	Z+, r24

00000dd0 <sub_130_8>:
     dd0:	8d 91       	ld	r24, X+
     dd2:	99 91       	ld	r25, Y+
     dd4:	89 0b       	sbc	r24, r25
     dd6:	81 93       	st	Z+, r24

00000dd8 <sub_130_7>:
     dd8:	8d 91       	ld	r24, X+
     dda:	99 91       	ld	r25, Y+
     ddc:	89 0b       	sbc	r24, r25
     dde:	81 93       	st	Z+, r24

00000de0 <sub_130_6>:
     de0:	8d 91       	ld	r24, X+
     de2:	99 91       	ld	r25, Y+
     de4:	89 0b       	sbc	r24, r25
     de6:	81 93       	st	Z+, r24

00000de8 <sub_130_5>:
     de8:	8d 91       	ld	r24, X+
     dea:	99 91       	ld	r25, Y+
     dec:	89 0b       	sbc	r24, r25
     dee:	81 93       	st	Z+, r24

00000df0 <sub_130_4>:
     df0:	8d 91       	ld	r24, X+
     df2:	99 91       	ld	r25, Y+
     df4:	89 0b       	sbc	r24, r25
     df6:	81 93       	st	Z+, r24

00000df8 <sub_130_3>:
     df8:	8d 91       	ld	r24, X+
     dfa:	99 91       	ld	r25, Y+
     dfc:	89 0b       	sbc	r24, r25
     dfe:	81 93       	st	Z+, r24

00000e00 <sub_130_2>:
     e00:	8d 91       	ld	r24, X+
     e02:	99 91       	ld	r25, Y+
     e04:	89 0b       	sbc	r24, r25
     e06:	81 93       	st	Z+, r24

00000e08 <sub_130_1>:
     e08:	8d 91       	ld	r24, X+
     e0a:	99 91       	ld	r25, Y+
     e0c:	89 0b       	sbc	r24, r25
     e0e:	81 93       	st	Z+, r24
     e10:	81 2d       	mov	r24, r1
     e12:	88 1f       	adc	r24, r24
     e14:	df 91       	pop	r29
     e16:	cf 91       	pop	r28
     e18:	08 95       	ret

00000e1a <uECC_vli_mult>:
     e1a:	cf 93       	push	r28
     e1c:	df 93       	push	r29
     e1e:	fc 01       	movw	r30, r24
     e20:	db 01       	movw	r26, r22
     e22:	ea 01       	movw	r28, r20
     e24:	90 e0       	ldi	r25, 0x00	; 0
     e26:	89 2f       	mov	r24, r25
     e28:	39 2f       	mov	r19, r25
     e2a:	49 2f       	mov	r20, r25
     e2c:	51 e0       	ldi	r21, 0x01	; 1
     e2e:	60 e0       	ldi	r22, 0x00	; 0
     e30:	c5 0f       	add	r28, r21
     e32:	d4 1f       	adc	r29, r20
     e34:	0d 90       	ld	r0, X+
     e36:	1a 90       	ld	r1, -Y
     e38:	01 9c       	mul	r0, r1
     e3a:	90 0d       	add	r25, r0
     e3c:	81 1d       	adc	r24, r1
     e3e:	34 1f       	adc	r19, r20
     e40:	63 95       	inc	r22
     e42:	65 17       	cp	r22, r21
     e44:	b8 f3       	brcs	.-18     	; 0xe34 <uECC_vli_mult+0x1a>
     e46:	a5 1b       	sub	r26, r21
     e48:	b4 0b       	sbc	r27, r20
     e4a:	91 93       	st	Z+, r25
     e4c:	98 2f       	mov	r25, r24
     e4e:	83 2f       	mov	r24, r19
     e50:	34 2f       	mov	r19, r20
     e52:	53 95       	inc	r21
     e54:	52 17       	cp	r21, r18
     e56:	58 f3       	brcs	.-42     	; 0xe2e <uECC_vli_mult+0x14>
     e58:	52 2f       	mov	r21, r18
     e5a:	c2 0f       	add	r28, r18
     e5c:	d4 1f       	adc	r29, r20
     e5e:	60 e0       	ldi	r22, 0x00	; 0
     e60:	0d 90       	ld	r0, X+
     e62:	1a 90       	ld	r1, -Y
     e64:	01 9c       	mul	r0, r1
     e66:	90 0d       	add	r25, r0
     e68:	81 1d       	adc	r24, r1
     e6a:	34 1f       	adc	r19, r20
     e6c:	63 95       	inc	r22
     e6e:	65 17       	cp	r22, r21
     e70:	b8 f3       	brcs	.-18     	; 0xe60 <uECC_vli_mult+0x46>
     e72:	c5 0f       	add	r28, r21
     e74:	d4 1f       	adc	r29, r20
     e76:	91 93       	st	Z+, r25
     e78:	98 2f       	mov	r25, r24
     e7a:	83 2f       	mov	r24, r19
     e7c:	34 2f       	mov	r19, r20
     e7e:	5a 95       	dec	r21
     e80:	a5 1b       	sub	r26, r21
     e82:	b4 0b       	sbc	r27, r20
     e84:	54 17       	cp	r21, r20
     e86:	59 f7       	brne	.-42     	; 0xe5e <uECC_vli_mult+0x44>
     e88:	91 93       	st	Z+, r25
     e8a:	11 24       	eor	r1, r1
     e8c:	df 91       	pop	r29
     e8e:	cf 91       	pop	r28
     e90:	08 95       	ret

00000e92 <uECC_vli_numBits>:
     e92:	9c 01       	movw	r18, r24
     e94:	61 50       	subi	r22, 0x01	; 1
     e96:	67 fd       	sbrc	r22, 7
     e98:	16 c0       	rjmp	.+44     	; 0xec6 <uECC_vli_numBits+0x34>
     e9a:	fc 01       	movw	r30, r24
     e9c:	e6 0f       	add	r30, r22
     e9e:	f1 1d       	adc	r31, r1
     ea0:	67 fd       	sbrc	r22, 7
     ea2:	fa 95       	dec	r31
     ea4:	80 81       	ld	r24, Z
     ea6:	88 23       	and	r24, r24
     ea8:	49 f0       	breq	.+18     	; 0xebc <uECC_vli_numBits+0x2a>
     eaa:	0d c0       	rjmp	.+26     	; 0xec6 <uECC_vli_numBits+0x34>
     eac:	f9 01       	movw	r30, r18
     eae:	e6 0f       	add	r30, r22
     eb0:	f1 1d       	adc	r31, r1
     eb2:	67 fd       	sbrc	r22, 7
     eb4:	fa 95       	dec	r31
     eb6:	90 81       	ld	r25, Z
     eb8:	91 11       	cpse	r25, r1
     eba:	05 c0       	rjmp	.+10     	; 0xec6 <uECC_vli_numBits+0x34>
     ebc:	61 50       	subi	r22, 0x01	; 1
     ebe:	b0 f7       	brcc	.-20     	; 0xeac <uECC_vli_numBits+0x1a>
     ec0:	80 e0       	ldi	r24, 0x00	; 0
     ec2:	90 e0       	ldi	r25, 0x00	; 0
     ec4:	08 95       	ret
     ec6:	6f 5f       	subi	r22, 0xFF	; 255
     ec8:	d9 f3       	breq	.-10     	; 0xec0 <uECC_vli_numBits+0x2e>
     eca:	06 2e       	mov	r0, r22
     ecc:	00 0c       	add	r0, r0
     ece:	77 0b       	sbc	r23, r23
     ed0:	26 0f       	add	r18, r22
     ed2:	37 1f       	adc	r19, r23
     ed4:	f9 01       	movw	r30, r18
     ed6:	31 97       	sbiw	r30, 0x01	; 1
     ed8:	80 81       	ld	r24, Z
     eda:	88 23       	and	r24, r24
     edc:	91 f0       	breq	.+36     	; 0xf02 <uECC_vli_numBits+0x70>
     ede:	90 e0       	ldi	r25, 0x00	; 0
     ee0:	86 95       	lsr	r24
     ee2:	9f 5f       	subi	r25, 0xFF	; 255
     ee4:	81 11       	cpse	r24, r1
     ee6:	fc cf       	rjmp	.-8      	; 0xee0 <uECC_vli_numBits+0x4e>
     ee8:	89 2f       	mov	r24, r25
     eea:	90 e0       	ldi	r25, 0x00	; 0
     eec:	61 50       	subi	r22, 0x01	; 1
     eee:	71 09       	sbc	r23, r1
     ef0:	66 0f       	add	r22, r22
     ef2:	77 1f       	adc	r23, r23
     ef4:	66 0f       	add	r22, r22
     ef6:	77 1f       	adc	r23, r23
     ef8:	66 0f       	add	r22, r22
     efa:	77 1f       	adc	r23, r23
     efc:	86 0f       	add	r24, r22
     efe:	97 1f       	adc	r25, r23
     f00:	08 95       	ret
     f02:	80 e0       	ldi	r24, 0x00	; 0
     f04:	90 e0       	ldi	r25, 0x00	; 0
     f06:	f2 cf       	rjmp	.-28     	; 0xeec <uECC_vli_numBits+0x5a>

00000f08 <uECC_vli_cmp>:
     f08:	1f 93       	push	r17
     f0a:	cf 93       	push	r28
     f0c:	df 93       	push	r29
     f0e:	cd b7       	in	r28, 0x3d	; 61
     f10:	de b7       	in	r29, 0x3e	; 62
     f12:	a0 97       	sbiw	r28, 0x20	; 32
     f14:	0f b6       	in	r0, 0x3f	; 63
     f16:	f8 94       	cli
     f18:	de bf       	out	0x3e, r29	; 62
     f1a:	0f be       	out	0x3f, r0	; 63
     f1c:	cd bf       	out	0x3d, r28	; 61
     f1e:	14 2f       	mov	r17, r20
     f20:	24 2f       	mov	r18, r20
     f22:	ab 01       	movw	r20, r22
     f24:	bc 01       	movw	r22, r24
     f26:	ce 01       	movw	r24, r28
     f28:	01 96       	adiw	r24, 0x01	; 1
     f2a:	a6 de       	rcall	.-692    	; 0xc78 <uECC_vli_sub>
     f2c:	41 e0       	ldi	r20, 0x01	; 1
     f2e:	81 11       	cpse	r24, r1
     f30:	01 c0       	rjmp	.+2      	; 0xf34 <uECC_vli_cmp+0x2c>
     f32:	40 e0       	ldi	r20, 0x00	; 0
     f34:	11 16       	cp	r1, r17
     f36:	f4 f4       	brge	.+60     	; 0xf74 <uECC_vli_cmp+0x6c>
     f38:	fe 01       	movw	r30, r28
     f3a:	31 96       	adiw	r30, 0x01	; 1
     f3c:	11 50       	subi	r17, 0x01	; 1
     f3e:	21 2f       	mov	r18, r17
     f40:	30 e0       	ldi	r19, 0x00	; 0
     f42:	2f 5f       	subi	r18, 0xFF	; 255
     f44:	3f 4f       	sbci	r19, 0xFF	; 255
     f46:	2e 0f       	add	r18, r30
     f48:	3f 1f       	adc	r19, r31
     f4a:	90 e0       	ldi	r25, 0x00	; 0
     f4c:	81 91       	ld	r24, Z+
     f4e:	98 2b       	or	r25, r24
     f50:	2e 17       	cp	r18, r30
     f52:	3f 07       	cpc	r19, r31
     f54:	d9 f7       	brne	.-10     	; 0xf4c <uECC_vli_cmp+0x44>
     f56:	81 e0       	ldi	r24, 0x01	; 1
     f58:	99 23       	and	r25, r25
     f5a:	61 f0       	breq	.+24     	; 0xf74 <uECC_vli_cmp+0x6c>
     f5c:	44 0f       	add	r20, r20
     f5e:	84 1b       	sub	r24, r20
     f60:	a0 96       	adiw	r28, 0x20	; 32
     f62:	0f b6       	in	r0, 0x3f	; 63
     f64:	f8 94       	cli
     f66:	de bf       	out	0x3e, r29	; 62
     f68:	0f be       	out	0x3f, r0	; 63
     f6a:	cd bf       	out	0x3d, r28	; 61
     f6c:	df 91       	pop	r29
     f6e:	cf 91       	pop	r28
     f70:	1f 91       	pop	r17
     f72:	08 95       	ret
     f74:	80 e0       	ldi	r24, 0x00	; 0
     f76:	f2 cf       	rjmp	.-28     	; 0xf5c <uECC_vli_cmp+0x54>

00000f78 <uECC_vli_modAdd>:
     f78:	ef 92       	push	r14
     f7a:	ff 92       	push	r15
     f7c:	0f 93       	push	r16
     f7e:	cf 93       	push	r28
     f80:	df 93       	push	r29
     f82:	ec 01       	movw	r28, r24
     f84:	79 01       	movw	r14, r18
     f86:	20 2f       	mov	r18, r16
     f88:	a6 dd       	rcall	.-1204   	; 0xad6 <uECC_vli_add>
     f8a:	81 11       	cpse	r24, r1
     f8c:	1d c0       	rjmp	.+58     	; 0xfc8 <uECC_vli_modAdd+0x50>
     f8e:	2f ef       	ldi	r18, 0xFF	; 255
     f90:	20 0f       	add	r18, r16
     f92:	27 fd       	sbrc	r18, 7
     f94:	19 c0       	rjmp	.+50     	; 0xfc8 <uECC_vli_modAdd+0x50>
     f96:	04 c0       	rjmp	.+8      	; 0xfa0 <uECC_vli_modAdd+0x28>
     f98:	38 17       	cp	r19, r24
     f9a:	b0 f0       	brcs	.+44     	; 0xfc8 <uECC_vli_modAdd+0x50>
     f9c:	21 50       	subi	r18, 0x01	; 1
     f9e:	a0 f0       	brcs	.+40     	; 0xfc8 <uECC_vli_modAdd+0x50>
     fa0:	82 2f       	mov	r24, r18
     fa2:	02 2e       	mov	r0, r18
     fa4:	00 0c       	add	r0, r0
     fa6:	99 0b       	sbc	r25, r25
     fa8:	f7 01       	movw	r30, r14
     faa:	e8 0f       	add	r30, r24
     fac:	f9 1f       	adc	r31, r25
     fae:	30 81       	ld	r19, Z
     fb0:	fe 01       	movw	r30, r28
     fb2:	e8 0f       	add	r30, r24
     fb4:	f9 1f       	adc	r31, r25
     fb6:	80 81       	ld	r24, Z
     fb8:	83 17       	cp	r24, r19
     fba:	70 f7       	brcc	.-36     	; 0xf98 <uECC_vli_modAdd+0x20>
     fbc:	df 91       	pop	r29
     fbe:	cf 91       	pop	r28
     fc0:	0f 91       	pop	r16
     fc2:	ff 90       	pop	r15
     fc4:	ef 90       	pop	r14
     fc6:	08 95       	ret
     fc8:	20 2f       	mov	r18, r16
     fca:	a7 01       	movw	r20, r14
     fcc:	be 01       	movw	r22, r28
     fce:	ce 01       	movw	r24, r28
     fd0:	df 91       	pop	r29
     fd2:	cf 91       	pop	r28
     fd4:	0f 91       	pop	r16
     fd6:	ff 90       	pop	r15
     fd8:	ef 90       	pop	r14
     fda:	4e ce       	rjmp	.-868    	; 0xc78 <uECC_vli_sub>

00000fdc <uECC_vli_modSub>:
     fdc:	ef 92       	push	r14
     fde:	ff 92       	push	r15
     fe0:	0f 93       	push	r16
     fe2:	cf 93       	push	r28
     fe4:	df 93       	push	r29
     fe6:	ec 01       	movw	r28, r24
     fe8:	79 01       	movw	r14, r18
     fea:	20 2f       	mov	r18, r16
     fec:	45 de       	rcall	.-886    	; 0xc78 <uECC_vli_sub>
     fee:	81 11       	cpse	r24, r1
     ff0:	06 c0       	rjmp	.+12     	; 0xffe <uECC_vli_modSub+0x22>
     ff2:	df 91       	pop	r29
     ff4:	cf 91       	pop	r28
     ff6:	0f 91       	pop	r16
     ff8:	ff 90       	pop	r15
     ffa:	ef 90       	pop	r14
     ffc:	08 95       	ret
     ffe:	20 2f       	mov	r18, r16
    1000:	a7 01       	movw	r20, r14
    1002:	be 01       	movw	r22, r28
    1004:	ce 01       	movw	r24, r28
    1006:	df 91       	pop	r29
    1008:	cf 91       	pop	r28
    100a:	0f 91       	pop	r16
    100c:	ff 90       	pop	r15
    100e:	ef 90       	pop	r14
    1010:	62 cd       	rjmp	.-1340   	; 0xad6 <uECC_vli_add>

00001012 <uECC_vli_mmod>:
    1012:	2f 92       	push	r2
    1014:	3f 92       	push	r3
    1016:	4f 92       	push	r4
    1018:	5f 92       	push	r5
    101a:	6f 92       	push	r6
    101c:	7f 92       	push	r7
    101e:	8f 92       	push	r8
    1020:	9f 92       	push	r9
    1022:	af 92       	push	r10
    1024:	bf 92       	push	r11
    1026:	cf 92       	push	r12
    1028:	df 92       	push	r13
    102a:	ef 92       	push	r14
    102c:	ff 92       	push	r15
    102e:	0f 93       	push	r16
    1030:	1f 93       	push	r17
    1032:	cf 93       	push	r28
    1034:	df 93       	push	r29
    1036:	cd b7       	in	r28, 0x3d	; 61
    1038:	de b7       	in	r29, 0x3e	; 62
    103a:	c7 58       	subi	r28, 0x87	; 135
    103c:	d1 09       	sbc	r29, r1
    103e:	0f b6       	in	r0, 0x3f	; 63
    1040:	f8 94       	cli
    1042:	de bf       	out	0x3e, r29	; 62
    1044:	0f be       	out	0x3f, r0	; 63
    1046:	cd bf       	out	0x3d, r28	; 61
    1048:	cb 57       	subi	r28, 0x7B	; 123
    104a:	df 4f       	sbci	r29, 0xFF	; 255
    104c:	99 83       	std	Y+1, r25	; 0x01
    104e:	88 83       	st	Y, r24
    1050:	c5 58       	subi	r28, 0x85	; 133
    1052:	d0 40       	sbci	r29, 0x00	; 0
    1054:	b6 2e       	mov	r11, r22
    1056:	a7 2e       	mov	r10, r23
    1058:	94 2e       	mov	r9, r20
    105a:	55 2e       	mov	r5, r21
    105c:	82 2e       	mov	r8, r18
    105e:	ce 01       	movw	r24, r28
    1060:	01 96       	adiw	r24, 0x01	; 1
    1062:	cf 57       	subi	r28, 0x7F	; 127
    1064:	df 4f       	sbci	r29, 0xFF	; 255
    1066:	99 83       	std	Y+1, r25	; 0x01
    1068:	88 83       	st	Y, r24
    106a:	c1 58       	subi	r28, 0x81	; 129
    106c:	d0 40       	sbci	r29, 0x00	; 0
    106e:	cd 57       	subi	r28, 0x7D	; 125
    1070:	df 4f       	sbci	r29, 0xFF	; 255
    1072:	68 83       	st	Y, r22
    1074:	c3 58       	subi	r28, 0x83	; 131
    1076:	d0 40       	sbci	r29, 0x00	; 0
    1078:	cc 57       	subi	r28, 0x7C	; 124
    107a:	df 4f       	sbci	r29, 0xFF	; 255
    107c:	78 83       	st	Y, r23
    107e:	c4 58       	subi	r28, 0x84	; 132
    1080:	d0 40       	sbci	r29, 0x00	; 0
    1082:	02 2f       	mov	r16, r18
    1084:	02 2e       	mov	r0, r18
    1086:	00 0c       	add	r0, r0
    1088:	11 0b       	sbc	r17, r17
    108a:	62 2f       	mov	r22, r18
    108c:	84 2f       	mov	r24, r20
    108e:	95 2f       	mov	r25, r21
    1090:	00 df       	rcall	.-512    	; 0xe92 <uECC_vli_numBits>
    1092:	78 01       	movw	r14, r16
    1094:	e2 94       	swap	r14
    1096:	f2 94       	swap	r15
    1098:	20 ef       	ldi	r18, 0xF0	; 240
    109a:	f2 22       	and	r15, r18
    109c:	fe 24       	eor	r15, r14
    109e:	e2 22       	and	r14, r18
    10a0:	fe 24       	eor	r15, r14
    10a2:	e8 1a       	sub	r14, r24
    10a4:	f9 0a       	sbc	r15, r25
    10a6:	b7 01       	movw	r22, r14
    10a8:	f7 fc       	sbrc	r15, 7
    10aa:	00 c1       	rjmp	.+512    	; 0x12ac <__stack+0x1ad>
    10ac:	3b 01       	movw	r6, r22
    10ae:	75 94       	asr	r7
    10b0:	67 94       	ror	r6
    10b2:	75 94       	asr	r7
    10b4:	67 94       	ror	r6
    10b6:	75 94       	asr	r7
    10b8:	67 94       	ror	r6
    10ba:	a7 01       	movw	r20, r14
    10bc:	47 70       	andi	r20, 0x07	; 7
    10be:	50 78       	andi	r21, 0x80	; 128
    10c0:	57 fd       	sbrc	r21, 7
    10c2:	f7 c0       	rjmp	.+494    	; 0x12b2 <__stack+0x1b3>
    10c4:	d4 2e       	mov	r13, r20
    10c6:	66 2d       	mov	r22, r6
    10c8:	ce 01       	movw	r24, r28
    10ca:	8f 5b       	subi	r24, 0xBF	; 191
    10cc:	9f 4f       	sbci	r25, 0xFF	; 255
    10ce:	20 dc       	rcall	.-1984   	; 0x910 <uECC_vli_clear>
    10d0:	1d 14       	cp	r1, r13
    10d2:	0c f0       	brlt	.+2      	; 0x10d6 <uECC_vli_mmod+0xc4>
    10d4:	f5 c0       	rjmp	.+490    	; 0x12c0 <__stack+0x1c1>
    10d6:	88 20       	and	r8, r8
    10d8:	a9 f1       	breq	.+106    	; 0x1144 <__stack+0x45>
    10da:	4d 2d       	mov	r20, r13
    10dc:	dd 0c       	add	r13, r13
    10de:	55 0b       	sbc	r21, r21
    10e0:	88 e0       	ldi	r24, 0x08	; 8
    10e2:	90 e0       	ldi	r25, 0x00	; 0
    10e4:	6c 01       	movw	r12, r24
    10e6:	c4 1a       	sub	r12, r20
    10e8:	d5 0a       	sbc	r13, r21
    10ea:	a9 2d       	mov	r26, r9
    10ec:	b5 2d       	mov	r27, r5
    10ee:	66 2d       	mov	r22, r6
    10f0:	66 0c       	add	r6, r6
    10f2:	77 0b       	sbc	r23, r23
    10f4:	e1 e4       	ldi	r30, 0x41	; 65
    10f6:	f0 e0       	ldi	r31, 0x00	; 0
    10f8:	ec 0f       	add	r30, r28
    10fa:	fd 1f       	adc	r31, r29
    10fc:	e6 0f       	add	r30, r22
    10fe:	f7 1f       	adc	r31, r23
    1100:	8f ef       	ldi	r24, 0xFF	; 255
    1102:	88 0d       	add	r24, r8
    1104:	90 e0       	ldi	r25, 0x00	; 0
    1106:	01 96       	adiw	r24, 0x01	; 1
    1108:	68 0f       	add	r22, r24
    110a:	79 1f       	adc	r23, r25
    110c:	81 e4       	ldi	r24, 0x41	; 65
    110e:	28 2e       	mov	r2, r24
    1110:	31 2c       	mov	r3, r1
    1112:	2c 0e       	add	r2, r28
    1114:	3d 1e       	adc	r3, r29
    1116:	62 0d       	add	r22, r2
    1118:	73 1d       	adc	r23, r3
    111a:	91 2c       	mov	r9, r1
    111c:	8d 91       	ld	r24, X+
    111e:	90 e0       	ldi	r25, 0x00	; 0
    1120:	9c 01       	movw	r18, r24
    1122:	04 2e       	mov	r0, r20
    1124:	01 c0       	rjmp	.+2      	; 0x1128 <__stack+0x29>
    1126:	22 0f       	add	r18, r18
    1128:	0a 94       	dec	r0
    112a:	ea f7       	brpl	.-6      	; 0x1126 <__stack+0x27>
    112c:	29 29       	or	r18, r9
    112e:	21 93       	st	Z+, r18
    1130:	0c 2c       	mov	r0, r12
    1132:	02 c0       	rjmp	.+4      	; 0x1138 <__stack+0x39>
    1134:	95 95       	asr	r25
    1136:	87 95       	ror	r24
    1138:	0a 94       	dec	r0
    113a:	e2 f7       	brpl	.-8      	; 0x1134 <__stack+0x35>
    113c:	98 2e       	mov	r9, r24
    113e:	6e 17       	cp	r22, r30
    1140:	7f 07       	cpc	r23, r31
    1142:	61 f7       	brne	.-40     	; 0x111c <__stack+0x1d>
    1144:	f7 fc       	sbrc	r15, 7
    1146:	ca c0       	rjmp	.+404    	; 0x12dc <__stack+0x1dd>
    1148:	38 01       	movw	r6, r16
    114a:	21 e0       	ldi	r18, 0x01	; 1
    114c:	62 1a       	sub	r6, r18
    114e:	71 08       	sbc	r7, r1
    1150:	61 e4       	ldi	r22, 0x41	; 65
    1152:	c6 2e       	mov	r12, r22
    1154:	d1 2c       	mov	r13, r1
    1156:	cc 0e       	add	r12, r28
    1158:	dd 1e       	adc	r13, r29
    115a:	c0 0e       	add	r12, r16
    115c:	d1 1e       	adc	r13, r17
    115e:	00 0f       	add	r16, r16
    1160:	11 1f       	adc	r17, r17
    1162:	99 24       	eor	r9, r9
    1164:	93 94       	inc	r9
    1166:	aa 24       	eor	r10, r10
    1168:	a3 94       	inc	r10
    116a:	b1 2c       	mov	r11, r1
    116c:	81 e4       	ldi	r24, 0x41	; 65
    116e:	90 e0       	ldi	r25, 0x00	; 0
    1170:	8c 0f       	add	r24, r28
    1172:	9d 1f       	adc	r25, r29
    1174:	68 0e       	add	r6, r24
    1176:	79 1e       	adc	r7, r25
    1178:	26 01       	movw	r4, r12
    117a:	10 16       	cp	r1, r16
    117c:	11 06       	cpc	r1, r17
    117e:	0c f0       	brlt	.+2      	; 0x1182 <__stack+0x83>
    1180:	93 c0       	rjmp	.+294    	; 0x12a8 <__stack+0x1a9>
    1182:	89 2d       	mov	r24, r9
    1184:	90 e0       	ldi	r25, 0x00	; 0
    1186:	fc 01       	movw	r30, r24
    1188:	ee 0f       	add	r30, r30
    118a:	ff 1f       	adc	r31, r31
    118c:	31 e8       	ldi	r19, 0x81	; 129
    118e:	23 2e       	mov	r2, r19
    1190:	31 2c       	mov	r3, r1
    1192:	2c 0e       	add	r2, r28
    1194:	3d 1e       	adc	r3, r29
    1196:	e2 0d       	add	r30, r2
    1198:	f3 1d       	adc	r31, r3
    119a:	60 81       	ld	r22, Z
    119c:	71 81       	ldd	r23, Z+1	; 0x01
    119e:	f5 01       	movw	r30, r10
    11a0:	e8 1b       	sub	r30, r24
    11a2:	f9 0b       	sbc	r31, r25
    11a4:	ee 0f       	add	r30, r30
    11a6:	ff 1f       	adc	r31, r31
    11a8:	e2 0d       	add	r30, r2
    11aa:	f3 1d       	adc	r31, r3
    11ac:	40 81       	ld	r20, Z
    11ae:	51 81       	ldd	r21, Z+1	; 0x01
    11b0:	20 e0       	ldi	r18, 0x00	; 0
    11b2:	30 e0       	ldi	r19, 0x00	; 0
    11b4:	a0 e0       	ldi	r26, 0x00	; 0
    11b6:	b0 e0       	ldi	r27, 0x00	; 0
    11b8:	80 e0       	ldi	r24, 0x00	; 0
    11ba:	90 e0       	ldi	r25, 0x00	; 0
    11bc:	fb 01       	movw	r30, r22
    11be:	e8 0f       	add	r30, r24
    11c0:	f9 1f       	adc	r31, r25
    11c2:	20 80       	ld	r2, Z
    11c4:	c9 57       	subi	r28, 0x79	; 121
    11c6:	df 4f       	sbci	r29, 0xFF	; 255
    11c8:	28 82       	st	Y, r2
    11ca:	c7 58       	subi	r28, 0x87	; 135
    11cc:	d0 40       	sbci	r29, 0x00	; 0
    11ce:	e1 e4       	ldi	r30, 0x41	; 65
    11d0:	f0 e0       	ldi	r31, 0x00	; 0
    11d2:	ec 0f       	add	r30, r28
    11d4:	fd 1f       	adc	r31, r29
    11d6:	2e 0f       	add	r18, r30
    11d8:	3f 1f       	adc	r19, r31
    11da:	f9 01       	movw	r30, r18
    11dc:	20 81       	ld	r18, Z
    11de:	22 1a       	sub	r2, r18
    11e0:	22 2d       	mov	r18, r2
    11e2:	2b 1b       	sub	r18, r27
    11e4:	c9 57       	subi	r28, 0x79	; 121
    11e6:	df 4f       	sbci	r29, 0xFF	; 255
    11e8:	f8 81       	ld	r31, Y
    11ea:	c7 58       	subi	r28, 0x87	; 135
    11ec:	d0 40       	sbci	r29, 0x00	; 0
    11ee:	f2 17       	cp	r31, r18
    11f0:	21 f0       	breq	.+8      	; 0x11fa <__stack+0xfb>
    11f2:	b1 e0       	ldi	r27, 0x01	; 1
    11f4:	f2 17       	cp	r31, r18
    11f6:	08 f0       	brcs	.+2      	; 0x11fa <__stack+0xfb>
    11f8:	b0 e0       	ldi	r27, 0x00	; 0
    11fa:	fa 01       	movw	r30, r20
    11fc:	e8 0f       	add	r30, r24
    11fe:	f9 1f       	adc	r31, r25
    1200:	20 83       	st	Z, r18
    1202:	af 5f       	subi	r26, 0xFF	; 255
    1204:	8a 2f       	mov	r24, r26
    1206:	0a 2e       	mov	r0, r26
    1208:	00 0c       	add	r0, r0
    120a:	99 0b       	sbc	r25, r25
    120c:	9c 01       	movw	r18, r24
    120e:	80 17       	cp	r24, r16
    1210:	91 07       	cpc	r25, r17
    1212:	a4 f2       	brlt	.-88     	; 0x11bc <__stack+0xbd>
    1214:	33 24       	eor	r3, r3
    1216:	33 94       	inc	r3
    1218:	9b 12       	cpse	r9, r27
    121a:	31 2c       	mov	r3, r1
    121c:	93 2c       	mov	r9, r3
    121e:	68 2d       	mov	r22, r8
    1220:	ce 01       	movw	r24, r28
    1222:	8f 5b       	subi	r24, 0xBF	; 191
    1224:	9f 4f       	sbci	r25, 0xFF	; 255
    1226:	e8 db       	rcall	.-2096   	; 0x9f8 <uECC_vli_rshift1>
    1228:	f2 01       	movw	r30, r4
    122a:	80 81       	ld	r24, Z
    122c:	f0 e8       	ldi	r31, 0x80	; 128
    122e:	8f 9f       	mul	r24, r31
    1230:	c0 01       	movw	r24, r0
    1232:	11 24       	eor	r1, r1
    1234:	f3 01       	movw	r30, r6
    1236:	90 81       	ld	r25, Z
    1238:	89 2b       	or	r24, r25
    123a:	80 83       	st	Z, r24
    123c:	68 2d       	mov	r22, r8
    123e:	c6 01       	movw	r24, r12
    1240:	db db       	rcall	.-2122   	; 0x9f8 <uECC_vli_rshift1>
    1242:	f1 e0       	ldi	r31, 0x01	; 1
    1244:	ef 1a       	sub	r14, r31
    1246:	f1 08       	sbc	r15, r1
    1248:	08 f0       	brcs	.+2      	; 0x124c <__stack+0x14d>
    124a:	97 cf       	rjmp	.-210    	; 0x117a <__stack+0x7b>
    124c:	e3 2d       	mov	r30, r3
    124e:	f0 e0       	ldi	r31, 0x00	; 0
    1250:	ee 0f       	add	r30, r30
    1252:	ff 1f       	adc	r31, r31
    1254:	81 e8       	ldi	r24, 0x81	; 129
    1256:	90 e0       	ldi	r25, 0x00	; 0
    1258:	8c 0f       	add	r24, r28
    125a:	9d 1f       	adc	r25, r29
    125c:	e8 0f       	add	r30, r24
    125e:	f9 1f       	adc	r31, r25
    1260:	60 81       	ld	r22, Z
    1262:	71 81       	ldd	r23, Z+1	; 0x01
    1264:	48 2d       	mov	r20, r8
    1266:	cb 57       	subi	r28, 0x7B	; 123
    1268:	df 4f       	sbci	r29, 0xFF	; 255
    126a:	88 81       	ld	r24, Y
    126c:	99 81       	ldd	r25, Y+1	; 0x01
    126e:	c5 58       	subi	r28, 0x85	; 133
    1270:	d0 40       	sbci	r29, 0x00	; 0
    1272:	75 db       	rcall	.-2326   	; 0x95e <uECC_vli_set>
    1274:	c9 57       	subi	r28, 0x79	; 121
    1276:	df 4f       	sbci	r29, 0xFF	; 255
    1278:	0f b6       	in	r0, 0x3f	; 63
    127a:	f8 94       	cli
    127c:	de bf       	out	0x3e, r29	; 62
    127e:	0f be       	out	0x3f, r0	; 63
    1280:	cd bf       	out	0x3d, r28	; 61
    1282:	df 91       	pop	r29
    1284:	cf 91       	pop	r28
    1286:	1f 91       	pop	r17
    1288:	0f 91       	pop	r16
    128a:	ff 90       	pop	r15
    128c:	ef 90       	pop	r14
    128e:	df 90       	pop	r13
    1290:	cf 90       	pop	r12
    1292:	bf 90       	pop	r11
    1294:	af 90       	pop	r10
    1296:	9f 90       	pop	r9
    1298:	8f 90       	pop	r8
    129a:	7f 90       	pop	r7
    129c:	6f 90       	pop	r6
    129e:	5f 90       	pop	r5
    12a0:	4f 90       	pop	r4
    12a2:	3f 90       	pop	r3
    12a4:	2f 90       	pop	r2
    12a6:	08 95       	ret
    12a8:	b0 e0       	ldi	r27, 0x00	; 0
    12aa:	b4 cf       	rjmp	.-152    	; 0x1214 <__stack+0x115>
    12ac:	69 5f       	subi	r22, 0xF9	; 249
    12ae:	7f 4f       	sbci	r23, 0xFF	; 255
    12b0:	fd ce       	rjmp	.-518    	; 0x10ac <uECC_vli_mmod+0x9a>
    12b2:	41 50       	subi	r20, 0x01	; 1
    12b4:	51 09       	sbc	r21, r1
    12b6:	48 6f       	ori	r20, 0xF8	; 248
    12b8:	5f 6f       	ori	r21, 0xFF	; 255
    12ba:	4f 5f       	subi	r20, 0xFF	; 255
    12bc:	5f 4f       	sbci	r21, 0xFF	; 255
    12be:	02 cf       	rjmp	.-508    	; 0x10c4 <uECC_vli_mmod+0xb2>
    12c0:	48 2d       	mov	r20, r8
    12c2:	69 2d       	mov	r22, r9
    12c4:	75 2d       	mov	r23, r5
    12c6:	81 e4       	ldi	r24, 0x41	; 65
    12c8:	90 e0       	ldi	r25, 0x00	; 0
    12ca:	8c 0f       	add	r24, r28
    12cc:	9d 1f       	adc	r25, r29
    12ce:	86 0d       	add	r24, r6
    12d0:	91 1d       	adc	r25, r1
    12d2:	67 fc       	sbrc	r6, 7
    12d4:	9a 95       	dec	r25
    12d6:	43 db       	rcall	.-2426   	; 0x95e <uECC_vli_set>
    12d8:	f7 fe       	sbrs	r15, 7
    12da:	36 cf       	rjmp	.-404    	; 0x1148 <__stack+0x49>
    12dc:	6b 2d       	mov	r22, r11
    12de:	7a 2d       	mov	r23, r10
    12e0:	c1 cf       	rjmp	.-126    	; 0x1264 <__stack+0x165>

000012e2 <double_jacobian_default>:
    12e2:	4f 92       	push	r4
    12e4:	5f 92       	push	r5
    12e6:	6f 92       	push	r6
    12e8:	7f 92       	push	r7
    12ea:	8f 92       	push	r8
    12ec:	9f 92       	push	r9
    12ee:	af 92       	push	r10
    12f0:	bf 92       	push	r11
    12f2:	cf 92       	push	r12
    12f4:	df 92       	push	r13
    12f6:	ef 92       	push	r14
    12f8:	ff 92       	push	r15
    12fa:	0f 93       	push	r16
    12fc:	1f 93       	push	r17
    12fe:	cf 93       	push	r28
    1300:	df 93       	push	r29
    1302:	cd b7       	in	r28, 0x3d	; 61
    1304:	de b7       	in	r29, 0x3e	; 62
    1306:	c0 58       	subi	r28, 0x80	; 128
    1308:	d1 09       	sbc	r29, r1
    130a:	0f b6       	in	r0, 0x3f	; 63
    130c:	f8 94       	cli
    130e:	de bf       	out	0x3e, r29	; 62
    1310:	0f be       	out	0x3f, r0	; 63
    1312:	cd bf       	out	0x3d, r28	; 61
    1314:	6c 01       	movw	r12, r24
    1316:	59 01       	movw	r10, r18
    1318:	d9 01       	movw	r26, r18
    131a:	1c 91       	ld	r17, X
    131c:	11 16       	cp	r1, r17
    131e:	7c f4       	brge	.+30     	; 0x133e <double_jacobian_default+0x5c>
    1320:	fa 01       	movw	r30, r20
    1322:	af ef       	ldi	r26, 0xFF	; 255
    1324:	a1 0f       	add	r26, r17
    1326:	b0 e0       	ldi	r27, 0x00	; 0
    1328:	11 96       	adiw	r26, 0x01	; 1
    132a:	a4 0f       	add	r26, r20
    132c:	b5 1f       	adc	r27, r21
    132e:	90 e0       	ldi	r25, 0x00	; 0
    1330:	31 91       	ld	r19, Z+
    1332:	93 2b       	or	r25, r19
    1334:	ea 17       	cp	r30, r26
    1336:	fb 07       	cpc	r31, r27
    1338:	d9 f7       	brne	.-10     	; 0x1330 <double_jacobian_default+0x4e>
    133a:	91 11       	cpse	r25, r1
    133c:	18 c0       	rjmp	.+48     	; 0x136e <double_jacobian_default+0x8c>
    133e:	c0 58       	subi	r28, 0x80	; 128
    1340:	df 4f       	sbci	r29, 0xFF	; 255
    1342:	0f b6       	in	r0, 0x3f	; 63
    1344:	f8 94       	cli
    1346:	de bf       	out	0x3e, r29	; 62
    1348:	0f be       	out	0x3f, r0	; 63
    134a:	cd bf       	out	0x3d, r28	; 61
    134c:	df 91       	pop	r29
    134e:	cf 91       	pop	r28
    1350:	1f 91       	pop	r17
    1352:	0f 91       	pop	r16
    1354:	ff 90       	pop	r15
    1356:	ef 90       	pop	r14
    1358:	df 90       	pop	r13
    135a:	cf 90       	pop	r12
    135c:	bf 90       	pop	r11
    135e:	af 90       	pop	r10
    1360:	9f 90       	pop	r9
    1362:	8f 90       	pop	r8
    1364:	7f 90       	pop	r7
    1366:	6f 90       	pop	r6
    1368:	5f 90       	pop	r5
    136a:	4f 90       	pop	r4
    136c:	08 95       	ret
    136e:	7a 01       	movw	r14, r20
    1370:	4b 01       	movw	r8, r22
    1372:	21 2f       	mov	r18, r17
    1374:	ab 01       	movw	r20, r22
    1376:	ce 01       	movw	r24, r28
    1378:	01 96       	adiw	r24, 0x01	; 1
    137a:	4f dd       	rcall	.-1378   	; 0xe1a <uECC_vli_mult>
    137c:	25 01       	movw	r4, r10
    137e:	ba ea       	ldi	r27, 0xAA	; 170
    1380:	4b 0e       	add	r4, r27
    1382:	51 1c       	adc	r5, r1
    1384:	d2 01       	movw	r26, r4
    1386:	ed 91       	ld	r30, X+
    1388:	fc 91       	ld	r31, X
    138a:	be 01       	movw	r22, r28
    138c:	6f 5f       	subi	r22, 0xFF	; 255
    138e:	7f 4f       	sbci	r23, 0xFF	; 255
    1390:	ce 01       	movw	r24, r28
    1392:	8f 59       	subi	r24, 0x9F	; 159
    1394:	9f 4f       	sbci	r25, 0xFF	; 255
    1396:	09 95       	icall
    1398:	f5 01       	movw	r30, r10
    139a:	20 81       	ld	r18, Z
    139c:	ae 01       	movw	r20, r28
    139e:	4f 59       	subi	r20, 0x9F	; 159
    13a0:	5f 4f       	sbci	r21, 0xFF	; 255
    13a2:	b6 01       	movw	r22, r12
    13a4:	ce 01       	movw	r24, r28
    13a6:	01 96       	adiw	r24, 0x01	; 1
    13a8:	38 dd       	rcall	.-1424   	; 0xe1a <uECC_vli_mult>
    13aa:	d2 01       	movw	r26, r4
    13ac:	ed 91       	ld	r30, X+
    13ae:	fc 91       	ld	r31, X
    13b0:	be 01       	movw	r22, r28
    13b2:	6f 5f       	subi	r22, 0xFF	; 255
    13b4:	7f 4f       	sbci	r23, 0xFF	; 255
    13b6:	ce 01       	movw	r24, r28
    13b8:	8f 5b       	subi	r24, 0xBF	; 191
    13ba:	9f 4f       	sbci	r25, 0xFF	; 255
    13bc:	09 95       	icall
    13be:	f5 01       	movw	r30, r10
    13c0:	20 81       	ld	r18, Z
    13c2:	ae 01       	movw	r20, r28
    13c4:	4f 59       	subi	r20, 0x9F	; 159
    13c6:	5f 4f       	sbci	r21, 0xFF	; 255
    13c8:	ba 01       	movw	r22, r20
    13ca:	ce 01       	movw	r24, r28
    13cc:	01 96       	adiw	r24, 0x01	; 1
    13ce:	25 dd       	rcall	.-1462   	; 0xe1a <uECC_vli_mult>
    13d0:	d2 01       	movw	r26, r4
    13d2:	ed 91       	ld	r30, X+
    13d4:	fc 91       	ld	r31, X
    13d6:	be 01       	movw	r22, r28
    13d8:	6f 5f       	subi	r22, 0xFF	; 255
    13da:	7f 4f       	sbci	r23, 0xFF	; 255
    13dc:	ce 01       	movw	r24, r28
    13de:	8f 59       	subi	r24, 0x9F	; 159
    13e0:	9f 4f       	sbci	r25, 0xFF	; 255
    13e2:	09 95       	icall
    13e4:	f5 01       	movw	r30, r10
    13e6:	20 81       	ld	r18, Z
    13e8:	a7 01       	movw	r20, r14
    13ea:	b4 01       	movw	r22, r8
    13ec:	ce 01       	movw	r24, r28
    13ee:	01 96       	adiw	r24, 0x01	; 1
    13f0:	14 dd       	rcall	.-1496   	; 0xe1a <uECC_vli_mult>
    13f2:	d2 01       	movw	r26, r4
    13f4:	ed 91       	ld	r30, X+
    13f6:	fc 91       	ld	r31, X
    13f8:	be 01       	movw	r22, r28
    13fa:	6f 5f       	subi	r22, 0xFF	; 255
    13fc:	7f 4f       	sbci	r23, 0xFF	; 255
    13fe:	c4 01       	movw	r24, r8
    1400:	09 95       	icall
    1402:	f5 01       	movw	r30, r10
    1404:	20 81       	ld	r18, Z
    1406:	a7 01       	movw	r20, r14
    1408:	b7 01       	movw	r22, r14
    140a:	ce 01       	movw	r24, r28
    140c:	01 96       	adiw	r24, 0x01	; 1
    140e:	05 dd       	rcall	.-1526   	; 0xe1a <uECC_vli_mult>
    1410:	d2 01       	movw	r26, r4
    1412:	ed 91       	ld	r30, X+
    1414:	fc 91       	ld	r31, X
    1416:	be 01       	movw	r22, r28
    1418:	6f 5f       	subi	r22, 0xFF	; 255
    141a:	7f 4f       	sbci	r23, 0xFF	; 255
    141c:	c7 01       	movw	r24, r14
    141e:	09 95       	icall
    1420:	35 01       	movw	r6, r10
    1422:	b4 e0       	ldi	r27, 0x04	; 4
    1424:	6b 0e       	add	r6, r27
    1426:	71 1c       	adc	r7, r1
    1428:	01 2f       	mov	r16, r17
    142a:	93 01       	movw	r18, r6
    142c:	a7 01       	movw	r20, r14
    142e:	b6 01       	movw	r22, r12
    1430:	c6 01       	movw	r24, r12
    1432:	a2 dd       	rcall	.-1212   	; 0xf78 <uECC_vli_modAdd>
    1434:	93 01       	movw	r18, r6
    1436:	a7 01       	movw	r20, r14
    1438:	b7 01       	movw	r22, r14
    143a:	c7 01       	movw	r24, r14
    143c:	9d dd       	rcall	.-1222   	; 0xf78 <uECC_vli_modAdd>
    143e:	93 01       	movw	r18, r6
    1440:	a7 01       	movw	r20, r14
    1442:	b6 01       	movw	r22, r12
    1444:	c7 01       	movw	r24, r14
    1446:	ca dd       	rcall	.-1132   	; 0xfdc <uECC_vli_modSub>
    1448:	f5 01       	movw	r30, r10
    144a:	20 81       	ld	r18, Z
    144c:	a7 01       	movw	r20, r14
    144e:	b6 01       	movw	r22, r12
    1450:	ce 01       	movw	r24, r28
    1452:	01 96       	adiw	r24, 0x01	; 1
    1454:	e2 dc       	rcall	.-1596   	; 0xe1a <uECC_vli_mult>
    1456:	d2 01       	movw	r26, r4
    1458:	ed 91       	ld	r30, X+
    145a:	fc 91       	ld	r31, X
    145c:	be 01       	movw	r22, r28
    145e:	6f 5f       	subi	r22, 0xFF	; 255
    1460:	7f 4f       	sbci	r23, 0xFF	; 255
    1462:	c6 01       	movw	r24, r12
    1464:	09 95       	icall
    1466:	93 01       	movw	r18, r6
    1468:	a6 01       	movw	r20, r12
    146a:	b6 01       	movw	r22, r12
    146c:	c7 01       	movw	r24, r14
    146e:	84 dd       	rcall	.-1272   	; 0xf78 <uECC_vli_modAdd>
    1470:	93 01       	movw	r18, r6
    1472:	a7 01       	movw	r20, r14
    1474:	b6 01       	movw	r22, r12
    1476:	c6 01       	movw	r24, r12
    1478:	7f dd       	rcall	.-1282   	; 0xf78 <uECC_vli_modAdd>
    147a:	f6 01       	movw	r30, r12
    147c:	80 81       	ld	r24, Z
    147e:	80 fd       	sbrc	r24, 0
    1480:	4f c0       	rjmp	.+158    	; 0x1520 <double_jacobian_default+0x23e>
    1482:	61 2f       	mov	r22, r17
    1484:	c6 01       	movw	r24, r12
    1486:	b8 da       	rcall	.-2704   	; 0x9f8 <uECC_vli_rshift1>
    1488:	d5 01       	movw	r26, r10
    148a:	2c 91       	ld	r18, X
    148c:	a6 01       	movw	r20, r12
    148e:	b6 01       	movw	r22, r12
    1490:	ce 01       	movw	r24, r28
    1492:	01 96       	adiw	r24, 0x01	; 1
    1494:	c2 dc       	rcall	.-1660   	; 0xe1a <uECC_vli_mult>
    1496:	d2 01       	movw	r26, r4
    1498:	ed 91       	ld	r30, X+
    149a:	fc 91       	ld	r31, X
    149c:	be 01       	movw	r22, r28
    149e:	6f 5f       	subi	r22, 0xFF	; 255
    14a0:	7f 4f       	sbci	r23, 0xFF	; 255
    14a2:	c7 01       	movw	r24, r14
    14a4:	09 95       	icall
    14a6:	01 2f       	mov	r16, r17
    14a8:	93 01       	movw	r18, r6
    14aa:	ae 01       	movw	r20, r28
    14ac:	4f 5b       	subi	r20, 0xBF	; 191
    14ae:	5f 4f       	sbci	r21, 0xFF	; 255
    14b0:	b7 01       	movw	r22, r14
    14b2:	c7 01       	movw	r24, r14
    14b4:	93 dd       	rcall	.-1242   	; 0xfdc <uECC_vli_modSub>
    14b6:	93 01       	movw	r18, r6
    14b8:	ae 01       	movw	r20, r28
    14ba:	4f 5b       	subi	r20, 0xBF	; 191
    14bc:	5f 4f       	sbci	r21, 0xFF	; 255
    14be:	b7 01       	movw	r22, r14
    14c0:	c7 01       	movw	r24, r14
    14c2:	8c dd       	rcall	.-1256   	; 0xfdc <uECC_vli_modSub>
    14c4:	93 01       	movw	r18, r6
    14c6:	a7 01       	movw	r20, r14
    14c8:	be 01       	movw	r22, r28
    14ca:	6f 5b       	subi	r22, 0xBF	; 191
    14cc:	7f 4f       	sbci	r23, 0xFF	; 255
    14ce:	cb 01       	movw	r24, r22
    14d0:	85 dd       	rcall	.-1270   	; 0xfdc <uECC_vli_modSub>
    14d2:	f5 01       	movw	r30, r10
    14d4:	20 81       	ld	r18, Z
    14d6:	ae 01       	movw	r20, r28
    14d8:	4f 5b       	subi	r20, 0xBF	; 191
    14da:	5f 4f       	sbci	r21, 0xFF	; 255
    14dc:	b6 01       	movw	r22, r12
    14de:	ce 01       	movw	r24, r28
    14e0:	01 96       	adiw	r24, 0x01	; 1
    14e2:	9b dc       	rcall	.-1738   	; 0xe1a <uECC_vli_mult>
    14e4:	d2 01       	movw	r26, r4
    14e6:	ed 91       	ld	r30, X+
    14e8:	fc 91       	ld	r31, X
    14ea:	be 01       	movw	r22, r28
    14ec:	6f 5f       	subi	r22, 0xFF	; 255
    14ee:	7f 4f       	sbci	r23, 0xFF	; 255
    14f0:	c6 01       	movw	r24, r12
    14f2:	09 95       	icall
    14f4:	93 01       	movw	r18, r6
    14f6:	ae 01       	movw	r20, r28
    14f8:	4f 59       	subi	r20, 0x9F	; 159
    14fa:	5f 4f       	sbci	r21, 0xFF	; 255
    14fc:	b6 01       	movw	r22, r12
    14fe:	ca 01       	movw	r24, r20
    1500:	6d dd       	rcall	.-1318   	; 0xfdc <uECC_vli_modSub>
    1502:	41 2f       	mov	r20, r17
    1504:	b7 01       	movw	r22, r14
    1506:	c6 01       	movw	r24, r12
    1508:	2a da       	rcall	.-2988   	; 0x95e <uECC_vli_set>
    150a:	41 2f       	mov	r20, r17
    150c:	b4 01       	movw	r22, r8
    150e:	c7 01       	movw	r24, r14
    1510:	26 da       	rcall	.-2996   	; 0x95e <uECC_vli_set>
    1512:	41 2f       	mov	r20, r17
    1514:	be 01       	movw	r22, r28
    1516:	6f 59       	subi	r22, 0x9F	; 159
    1518:	7f 4f       	sbci	r23, 0xFF	; 255
    151a:	c4 01       	movw	r24, r8
    151c:	20 da       	rcall	.-3008   	; 0x95e <uECC_vli_set>
    151e:	0f cf       	rjmp	.-482    	; 0x133e <double_jacobian_default+0x5c>
    1520:	21 2f       	mov	r18, r17
    1522:	a3 01       	movw	r20, r6
    1524:	b6 01       	movw	r22, r12
    1526:	c6 01       	movw	r24, r12
    1528:	d6 da       	rcall	.-2644   	; 0xad6 <uECC_vli_add>
    152a:	08 2f       	mov	r16, r24
    152c:	61 2f       	mov	r22, r17
    152e:	c6 01       	movw	r24, r12
    1530:	63 da       	rcall	.-2874   	; 0x9f8 <uECC_vli_rshift1>
    1532:	e1 2f       	mov	r30, r17
    1534:	01 2e       	mov	r0, r17
    1536:	00 0c       	add	r0, r0
    1538:	ff 0b       	sbc	r31, r31
    153a:	31 97       	sbiw	r30, 0x01	; 1
    153c:	ec 0d       	add	r30, r12
    153e:	fd 1d       	adc	r31, r13
    1540:	20 e8       	ldi	r18, 0x80	; 128
    1542:	02 9f       	mul	r16, r18
    1544:	c0 01       	movw	r24, r0
    1546:	11 24       	eor	r1, r1
    1548:	00 81       	ld	r16, Z
    154a:	08 2b       	or	r16, r24
    154c:	00 83       	st	Z, r16
    154e:	9c cf       	rjmp	.-200    	; 0x1488 <double_jacobian_default+0x1a6>

00001550 <x_side_default>:
    1550:	4f 92       	push	r4
    1552:	5f 92       	push	r5
    1554:	6f 92       	push	r6
    1556:	7f 92       	push	r7
    1558:	8f 92       	push	r8
    155a:	9f 92       	push	r9
    155c:	af 92       	push	r10
    155e:	bf 92       	push	r11
    1560:	cf 92       	push	r12
    1562:	df 92       	push	r13
    1564:	ef 92       	push	r14
    1566:	ff 92       	push	r15
    1568:	0f 93       	push	r16
    156a:	1f 93       	push	r17
    156c:	cf 93       	push	r28
    156e:	df 93       	push	r29
    1570:	cd b7       	in	r28, 0x3d	; 61
    1572:	de b7       	in	r29, 0x3e	; 62
    1574:	c0 56       	subi	r28, 0x60	; 96
    1576:	d1 09       	sbc	r29, r1
    1578:	0f b6       	in	r0, 0x3f	; 63
    157a:	f8 94       	cli
    157c:	de bf       	out	0x3e, r29	; 62
    157e:	0f be       	out	0x3f, r0	; 63
    1580:	cd bf       	out	0x3d, r28	; 61
    1582:	7c 01       	movw	r14, r24
    1584:	5b 01       	movw	r10, r22
    1586:	6a 01       	movw	r12, r20
    1588:	4e 01       	movw	r8, r28
    158a:	81 e4       	ldi	r24, 0x41	; 65
    158c:	88 0e       	add	r8, r24
    158e:	91 1c       	adc	r9, r1
    1590:	80 e2       	ldi	r24, 0x20	; 32
    1592:	d4 01       	movw	r26, r8
    1594:	1d 92       	st	X+, r1
    1596:	8a 95       	dec	r24
    1598:	e9 f7       	brne	.-6      	; 0x1594 <x_side_default+0x44>
    159a:	83 e0       	ldi	r24, 0x03	; 3
    159c:	f4 01       	movw	r30, r8
    159e:	80 83       	st	Z, r24
    15a0:	da 01       	movw	r26, r20
    15a2:	1c 91       	ld	r17, X
    15a4:	21 2f       	mov	r18, r17
    15a6:	ab 01       	movw	r20, r22
    15a8:	ce 01       	movw	r24, r28
    15aa:	01 96       	adiw	r24, 0x01	; 1
    15ac:	36 dc       	rcall	.-1940   	; 0xe1a <uECC_vli_mult>
    15ae:	26 01       	movw	r4, r12
    15b0:	ba ea       	ldi	r27, 0xAA	; 170
    15b2:	4b 0e       	add	r4, r27
    15b4:	51 1c       	adc	r5, r1
    15b6:	d2 01       	movw	r26, r4
    15b8:	ed 91       	ld	r30, X+
    15ba:	fc 91       	ld	r31, X
    15bc:	be 01       	movw	r22, r28
    15be:	6f 5f       	subi	r22, 0xFF	; 255
    15c0:	7f 4f       	sbci	r23, 0xFF	; 255
    15c2:	c7 01       	movw	r24, r14
    15c4:	09 95       	icall
    15c6:	36 01       	movw	r6, r12
    15c8:	b4 e0       	ldi	r27, 0x04	; 4
    15ca:	6b 0e       	add	r6, r27
    15cc:	71 1c       	adc	r7, r1
    15ce:	01 2f       	mov	r16, r17
    15d0:	93 01       	movw	r18, r6
    15d2:	a4 01       	movw	r20, r8
    15d4:	b7 01       	movw	r22, r14
    15d6:	c7 01       	movw	r24, r14
    15d8:	01 dd       	rcall	.-1534   	; 0xfdc <uECC_vli_modSub>
    15da:	f6 01       	movw	r30, r12
    15dc:	20 81       	ld	r18, Z
    15de:	a5 01       	movw	r20, r10
    15e0:	b7 01       	movw	r22, r14
    15e2:	ce 01       	movw	r24, r28
    15e4:	01 96       	adiw	r24, 0x01	; 1
    15e6:	19 dc       	rcall	.-1998   	; 0xe1a <uECC_vli_mult>
    15e8:	d2 01       	movw	r26, r4
    15ea:	ed 91       	ld	r30, X+
    15ec:	fc 91       	ld	r31, X
    15ee:	be 01       	movw	r22, r28
    15f0:	6f 5f       	subi	r22, 0xFF	; 255
    15f2:	7f 4f       	sbci	r23, 0xFF	; 255
    15f4:	c7 01       	movw	r24, r14
    15f6:	09 95       	icall
    15f8:	a6 01       	movw	r20, r12
    15fa:	4c 57       	subi	r20, 0x7C	; 124
    15fc:	5f 4f       	sbci	r21, 0xFF	; 255
    15fe:	93 01       	movw	r18, r6
    1600:	b7 01       	movw	r22, r14
    1602:	c7 01       	movw	r24, r14
    1604:	b9 dc       	rcall	.-1678   	; 0xf78 <uECC_vli_modAdd>
    1606:	c0 5a       	subi	r28, 0xA0	; 160
    1608:	df 4f       	sbci	r29, 0xFF	; 255
    160a:	0f b6       	in	r0, 0x3f	; 63
    160c:	f8 94       	cli
    160e:	de bf       	out	0x3e, r29	; 62
    1610:	0f be       	out	0x3f, r0	; 63
    1612:	cd bf       	out	0x3d, r28	; 61
    1614:	df 91       	pop	r29
    1616:	cf 91       	pop	r28
    1618:	1f 91       	pop	r17
    161a:	0f 91       	pop	r16
    161c:	ff 90       	pop	r15
    161e:	ef 90       	pop	r14
    1620:	df 90       	pop	r13
    1622:	cf 90       	pop	r12
    1624:	bf 90       	pop	r11
    1626:	af 90       	pop	r10
    1628:	9f 90       	pop	r9
    162a:	8f 90       	pop	r8
    162c:	7f 90       	pop	r7
    162e:	6f 90       	pop	r6
    1630:	5f 90       	pop	r5
    1632:	4f 90       	pop	r4
    1634:	08 95       	ret

00001636 <mod_sqrt_default>:
    1636:	3f 92       	push	r3
    1638:	4f 92       	push	r4
    163a:	5f 92       	push	r5
    163c:	6f 92       	push	r6
    163e:	7f 92       	push	r7
    1640:	8f 92       	push	r8
    1642:	9f 92       	push	r9
    1644:	af 92       	push	r10
    1646:	bf 92       	push	r11
    1648:	cf 92       	push	r12
    164a:	df 92       	push	r13
    164c:	ef 92       	push	r14
    164e:	ff 92       	push	r15
    1650:	0f 93       	push	r16
    1652:	1f 93       	push	r17
    1654:	cf 93       	push	r28
    1656:	df 93       	push	r29
    1658:	cd b7       	in	r28, 0x3d	; 61
    165a:	de b7       	in	r29, 0x3e	; 62
    165c:	c0 58       	subi	r28, 0x80	; 128
    165e:	d1 09       	sbc	r29, r1
    1660:	0f b6       	in	r0, 0x3f	; 63
    1662:	f8 94       	cli
    1664:	de bf       	out	0x3e, r29	; 62
    1666:	0f be       	out	0x3f, r0	; 63
    1668:	cd bf       	out	0x3d, r28	; 61
    166a:	2c 01       	movw	r4, r24
    166c:	6b 01       	movw	r12, r22
    166e:	5e 01       	movw	r10, r28
    1670:	21 e6       	ldi	r18, 0x61	; 97
    1672:	a2 0e       	add	r10, r18
    1674:	b1 1c       	adc	r11, r1
    1676:	90 e2       	ldi	r25, 0x20	; 32
    1678:	d5 01       	movw	r26, r10
    167a:	e9 2f       	mov	r30, r25
    167c:	1d 92       	st	X+, r1
    167e:	ea 95       	dec	r30
    1680:	e9 f7       	brne	.-6      	; 0x167c <mod_sqrt_default+0x46>
    1682:	81 e0       	ldi	r24, 0x01	; 1
    1684:	d5 01       	movw	r26, r10
    1686:	8c 93       	st	X, r24
    1688:	7e 01       	movw	r14, r28
    168a:	b1 e4       	ldi	r27, 0x41	; 65
    168c:	eb 0e       	add	r14, r27
    168e:	f1 1c       	adc	r15, r1
    1690:	f7 01       	movw	r30, r14
    1692:	11 92       	st	Z+, r1
    1694:	9a 95       	dec	r25
    1696:	e9 f7       	brne	.-6      	; 0x1692 <mod_sqrt_default+0x5c>
    1698:	d7 01       	movw	r26, r14
    169a:	8c 93       	st	X, r24
    169c:	fb 01       	movw	r30, r22
    169e:	30 80       	ld	r3, Z
    16a0:	6c 5f       	subi	r22, 0xFC	; 252
    16a2:	7f 4f       	sbci	r23, 0xFF	; 255
    16a4:	23 2d       	mov	r18, r3
    16a6:	a5 01       	movw	r20, r10
    16a8:	c5 01       	movw	r24, r10
    16aa:	15 da       	rcall	.-3030   	; 0xad6 <uECC_vli_add>
    16ac:	63 2d       	mov	r22, r3
    16ae:	c5 01       	movw	r24, r10
    16b0:	f0 db       	rcall	.-2080   	; 0xe92 <uECC_vli_numBits>
    16b2:	8c 01       	movw	r16, r24
    16b4:	01 50       	subi	r16, 0x01	; 1
    16b6:	11 09       	sbc	r17, r1
    16b8:	02 30       	cpi	r16, 0x02	; 2
    16ba:	11 05       	cpc	r17, r1
    16bc:	0c f4       	brge	.+2      	; 0x16c0 <mod_sqrt_default+0x8a>
    16be:	46 c0       	rjmp	.+140    	; 0x174c <mod_sqrt_default+0x116>
    16c0:	96 01       	movw	r18, r12
    16c2:	26 55       	subi	r18, 0x56	; 86
    16c4:	3f 4f       	sbci	r19, 0xFF	; 255
    16c6:	39 01       	movw	r6, r18
    16c8:	88 24       	eor	r8, r8
    16ca:	83 94       	inc	r8
    16cc:	91 2c       	mov	r9, r1
    16ce:	05 c0       	rjmp	.+10     	; 0x16da <mod_sqrt_default+0xa4>
    16d0:	01 50       	subi	r16, 0x01	; 1
    16d2:	11 09       	sbc	r17, r1
    16d4:	01 30       	cpi	r16, 0x01	; 1
    16d6:	11 05       	cpc	r17, r1
    16d8:	c9 f1       	breq	.+114    	; 0x174c <mod_sqrt_default+0x116>
    16da:	d6 01       	movw	r26, r12
    16dc:	2c 91       	ld	r18, X
    16de:	a7 01       	movw	r20, r14
    16e0:	b7 01       	movw	r22, r14
    16e2:	ce 01       	movw	r24, r28
    16e4:	01 96       	adiw	r24, 0x01	; 1
    16e6:	99 db       	rcall	.-2254   	; 0xe1a <uECC_vli_mult>
    16e8:	d3 01       	movw	r26, r6
    16ea:	ed 91       	ld	r30, X+
    16ec:	fc 91       	ld	r31, X
    16ee:	be 01       	movw	r22, r28
    16f0:	6f 5f       	subi	r22, 0xFF	; 255
    16f2:	7f 4f       	sbci	r23, 0xFF	; 255
    16f4:	c7 01       	movw	r24, r14
    16f6:	09 95       	icall
    16f8:	f8 01       	movw	r30, r16
    16fa:	f5 95       	asr	r31
    16fc:	e7 95       	ror	r30
    16fe:	f5 95       	asr	r31
    1700:	e7 95       	ror	r30
    1702:	f5 95       	asr	r31
    1704:	e7 95       	ror	r30
    1706:	ea 0d       	add	r30, r10
    1708:	fb 1d       	adc	r31, r11
    170a:	c8 01       	movw	r24, r16
    170c:	87 70       	andi	r24, 0x07	; 7
    170e:	99 27       	eor	r25, r25
    1710:	94 01       	movw	r18, r8
    1712:	02 c0       	rjmp	.+4      	; 0x1718 <mod_sqrt_default+0xe2>
    1714:	22 0f       	add	r18, r18
    1716:	33 1f       	adc	r19, r19
    1718:	8a 95       	dec	r24
    171a:	e2 f7       	brpl	.-8      	; 0x1714 <mod_sqrt_default+0xde>
    171c:	c9 01       	movw	r24, r18
    171e:	90 81       	ld	r25, Z
    1720:	89 23       	and	r24, r25
    1722:	b1 f2       	breq	.-84     	; 0x16d0 <mod_sqrt_default+0x9a>
    1724:	d6 01       	movw	r26, r12
    1726:	2c 91       	ld	r18, X
    1728:	a2 01       	movw	r20, r4
    172a:	b7 01       	movw	r22, r14
    172c:	ce 01       	movw	r24, r28
    172e:	01 96       	adiw	r24, 0x01	; 1
    1730:	74 db       	rcall	.-2328   	; 0xe1a <uECC_vli_mult>
    1732:	d3 01       	movw	r26, r6
    1734:	ed 91       	ld	r30, X+
    1736:	fc 91       	ld	r31, X
    1738:	be 01       	movw	r22, r28
    173a:	6f 5f       	subi	r22, 0xFF	; 255
    173c:	7f 4f       	sbci	r23, 0xFF	; 255
    173e:	c7 01       	movw	r24, r14
    1740:	09 95       	icall
    1742:	01 50       	subi	r16, 0x01	; 1
    1744:	11 09       	sbc	r17, r1
    1746:	01 30       	cpi	r16, 0x01	; 1
    1748:	11 05       	cpc	r17, r1
    174a:	39 f6       	brne	.-114    	; 0x16da <mod_sqrt_default+0xa4>
    174c:	43 2d       	mov	r20, r3
    174e:	b7 01       	movw	r22, r14
    1750:	c2 01       	movw	r24, r4
    1752:	05 d9       	rcall	.-3574   	; 0x95e <uECC_vli_set>
    1754:	c0 58       	subi	r28, 0x80	; 128
    1756:	df 4f       	sbci	r29, 0xFF	; 255
    1758:	0f b6       	in	r0, 0x3f	; 63
    175a:	f8 94       	cli
    175c:	de bf       	out	0x3e, r29	; 62
    175e:	0f be       	out	0x3f, r0	; 63
    1760:	cd bf       	out	0x3d, r28	; 61
    1762:	df 91       	pop	r29
    1764:	cf 91       	pop	r28
    1766:	1f 91       	pop	r17
    1768:	0f 91       	pop	r16
    176a:	ff 90       	pop	r15
    176c:	ef 90       	pop	r14
    176e:	df 90       	pop	r13
    1770:	cf 90       	pop	r12
    1772:	bf 90       	pop	r11
    1774:	af 90       	pop	r10
    1776:	9f 90       	pop	r9
    1778:	8f 90       	pop	r8
    177a:	7f 90       	pop	r7
    177c:	6f 90       	pop	r6
    177e:	5f 90       	pop	r5
    1780:	4f 90       	pop	r4
    1782:	3f 90       	pop	r3
    1784:	08 95       	ret

00001786 <vli_mmod_fast_secp256r1>:
    1786:	df 92       	push	r13
    1788:	ef 92       	push	r14
    178a:	ff 92       	push	r15
    178c:	0f 93       	push	r16
    178e:	1f 93       	push	r17
    1790:	cf 93       	push	r28
    1792:	df 93       	push	r29
    1794:	cd b7       	in	r28, 0x3d	; 61
    1796:	de b7       	in	r29, 0x3e	; 62
    1798:	a0 97       	sbiw	r28, 0x20	; 32
    179a:	0f b6       	in	r0, 0x3f	; 63
    179c:	f8 94       	cli
    179e:	de bf       	out	0x3e, r29	; 62
    17a0:	0f be       	out	0x3f, r0	; 63
    17a2:	cd bf       	out	0x3d, r28	; 61
    17a4:	7c 01       	movw	r14, r24
    17a6:	8b 01       	movw	r16, r22
    17a8:	40 e2       	ldi	r20, 0x20	; 32
    17aa:	d9 d8       	rcall	.-3662   	; 0x95e <uECC_vli_set>
    17ac:	1c 82       	std	Y+4, r1	; 0x04
    17ae:	1b 82       	std	Y+3, r1	; 0x03
    17b0:	1a 82       	std	Y+2, r1	; 0x02
    17b2:	19 82       	std	Y+1, r1	; 0x01
    17b4:	18 86       	std	Y+8, r1	; 0x08
    17b6:	1f 82       	std	Y+7, r1	; 0x07
    17b8:	1e 82       	std	Y+6, r1	; 0x06
    17ba:	1d 82       	std	Y+5, r1	; 0x05
    17bc:	1c 86       	std	Y+12, r1	; 0x0c
    17be:	1b 86       	std	Y+11, r1	; 0x0b
    17c0:	1a 86       	std	Y+10, r1	; 0x0a
    17c2:	19 86       	std	Y+9, r1	; 0x09
    17c4:	f8 01       	movw	r30, r16
    17c6:	84 a5       	ldd	r24, Z+44	; 0x2c
    17c8:	8d 87       	std	Y+13, r24	; 0x0d
    17ca:	85 a5       	ldd	r24, Z+45	; 0x2d
    17cc:	8e 87       	std	Y+14, r24	; 0x0e
    17ce:	86 a5       	ldd	r24, Z+46	; 0x2e
    17d0:	8f 87       	std	Y+15, r24	; 0x0f
    17d2:	87 a5       	ldd	r24, Z+47	; 0x2f
    17d4:	88 8b       	std	Y+16, r24	; 0x10
    17d6:	80 a9       	ldd	r24, Z+48	; 0x30
    17d8:	89 8b       	std	Y+17, r24	; 0x11
    17da:	81 a9       	ldd	r24, Z+49	; 0x31
    17dc:	8a 8b       	std	Y+18, r24	; 0x12
    17de:	82 a9       	ldd	r24, Z+50	; 0x32
    17e0:	8b 8b       	std	Y+19, r24	; 0x13
    17e2:	83 a9       	ldd	r24, Z+51	; 0x33
    17e4:	8c 8b       	std	Y+20, r24	; 0x14
    17e6:	84 a9       	ldd	r24, Z+52	; 0x34
    17e8:	8d 8b       	std	Y+21, r24	; 0x15
    17ea:	85 a9       	ldd	r24, Z+53	; 0x35
    17ec:	8e 8b       	std	Y+22, r24	; 0x16
    17ee:	86 a9       	ldd	r24, Z+54	; 0x36
    17f0:	8f 8b       	std	Y+23, r24	; 0x17
    17f2:	87 a9       	ldd	r24, Z+55	; 0x37
    17f4:	88 8f       	std	Y+24, r24	; 0x18
    17f6:	80 ad       	ldd	r24, Z+56	; 0x38
    17f8:	89 8f       	std	Y+25, r24	; 0x19
    17fa:	81 ad       	ldd	r24, Z+57	; 0x39
    17fc:	8a 8f       	std	Y+26, r24	; 0x1a
    17fe:	82 ad       	ldd	r24, Z+58	; 0x3a
    1800:	8b 8f       	std	Y+27, r24	; 0x1b
    1802:	83 ad       	ldd	r24, Z+59	; 0x3b
    1804:	8c 8f       	std	Y+28, r24	; 0x1c
    1806:	84 ad       	ldd	r24, Z+60	; 0x3c
    1808:	8d 8f       	std	Y+29, r24	; 0x1d
    180a:	85 ad       	ldd	r24, Z+61	; 0x3d
    180c:	8e 8f       	std	Y+30, r24	; 0x1e
    180e:	86 ad       	ldd	r24, Z+62	; 0x3e
    1810:	8f 8f       	std	Y+31, r24	; 0x1f
    1812:	87 ad       	ldd	r24, Z+63	; 0x3f
    1814:	88 a3       	std	Y+32, r24	; 0x20
    1816:	20 e2       	ldi	r18, 0x20	; 32
    1818:	ae 01       	movw	r20, r28
    181a:	4f 5f       	subi	r20, 0xFF	; 255
    181c:	5f 4f       	sbci	r21, 0xFF	; 255
    181e:	ba 01       	movw	r22, r20
    1820:	ca 01       	movw	r24, r20
    1822:	59 d9       	rcall	.-3406   	; 0xad6 <uECC_vli_add>
    1824:	d8 2e       	mov	r13, r24
    1826:	20 e2       	ldi	r18, 0x20	; 32
    1828:	ae 01       	movw	r20, r28
    182a:	4f 5f       	subi	r20, 0xFF	; 255
    182c:	5f 4f       	sbci	r21, 0xFF	; 255
    182e:	b7 01       	movw	r22, r14
    1830:	c7 01       	movw	r24, r14
    1832:	51 d9       	rcall	.-3422   	; 0xad6 <uECC_vli_add>
    1834:	d8 0e       	add	r13, r24
    1836:	f8 01       	movw	r30, r16
    1838:	80 a9       	ldd	r24, Z+48	; 0x30
    183a:	8d 87       	std	Y+13, r24	; 0x0d
    183c:	81 a9       	ldd	r24, Z+49	; 0x31
    183e:	8e 87       	std	Y+14, r24	; 0x0e
    1840:	82 a9       	ldd	r24, Z+50	; 0x32
    1842:	8f 87       	std	Y+15, r24	; 0x0f
    1844:	83 a9       	ldd	r24, Z+51	; 0x33
    1846:	88 8b       	std	Y+16, r24	; 0x10
    1848:	84 a9       	ldd	r24, Z+52	; 0x34
    184a:	89 8b       	std	Y+17, r24	; 0x11
    184c:	85 a9       	ldd	r24, Z+53	; 0x35
    184e:	8a 8b       	std	Y+18, r24	; 0x12
    1850:	86 a9       	ldd	r24, Z+54	; 0x36
    1852:	8b 8b       	std	Y+19, r24	; 0x13
    1854:	87 a9       	ldd	r24, Z+55	; 0x37
    1856:	8c 8b       	std	Y+20, r24	; 0x14
    1858:	80 ad       	ldd	r24, Z+56	; 0x38
    185a:	8d 8b       	std	Y+21, r24	; 0x15
    185c:	81 ad       	ldd	r24, Z+57	; 0x39
    185e:	8e 8b       	std	Y+22, r24	; 0x16
    1860:	82 ad       	ldd	r24, Z+58	; 0x3a
    1862:	8f 8b       	std	Y+23, r24	; 0x17
    1864:	83 ad       	ldd	r24, Z+59	; 0x3b
    1866:	88 8f       	std	Y+24, r24	; 0x18
    1868:	84 ad       	ldd	r24, Z+60	; 0x3c
    186a:	89 8f       	std	Y+25, r24	; 0x19
    186c:	85 ad       	ldd	r24, Z+61	; 0x3d
    186e:	8a 8f       	std	Y+26, r24	; 0x1a
    1870:	86 ad       	ldd	r24, Z+62	; 0x3e
    1872:	8b 8f       	std	Y+27, r24	; 0x1b
    1874:	87 ad       	ldd	r24, Z+63	; 0x3f
    1876:	8c 8f       	std	Y+28, r24	; 0x1c
    1878:	18 a2       	std	Y+32, r1	; 0x20
    187a:	1f 8e       	std	Y+31, r1	; 0x1f
    187c:	1e 8e       	std	Y+30, r1	; 0x1e
    187e:	1d 8e       	std	Y+29, r1	; 0x1d
    1880:	20 e2       	ldi	r18, 0x20	; 32
    1882:	ae 01       	movw	r20, r28
    1884:	4f 5f       	subi	r20, 0xFF	; 255
    1886:	5f 4f       	sbci	r21, 0xFF	; 255
    1888:	ba 01       	movw	r22, r20
    188a:	ca 01       	movw	r24, r20
    188c:	24 d9       	rcall	.-3512   	; 0xad6 <uECC_vli_add>
    188e:	d8 0e       	add	r13, r24
    1890:	20 e2       	ldi	r18, 0x20	; 32
    1892:	ae 01       	movw	r20, r28
    1894:	4f 5f       	subi	r20, 0xFF	; 255
    1896:	5f 4f       	sbci	r21, 0xFF	; 255
    1898:	b7 01       	movw	r22, r14
    189a:	c7 01       	movw	r24, r14
    189c:	1c d9       	rcall	.-3528   	; 0xad6 <uECC_vli_add>
    189e:	d8 0e       	add	r13, r24
    18a0:	f8 01       	movw	r30, r16
    18a2:	80 a1       	ldd	r24, Z+32	; 0x20
    18a4:	89 83       	std	Y+1, r24	; 0x01
    18a6:	81 a1       	ldd	r24, Z+33	; 0x21
    18a8:	8a 83       	std	Y+2, r24	; 0x02
    18aa:	82 a1       	ldd	r24, Z+34	; 0x22
    18ac:	8b 83       	std	Y+3, r24	; 0x03
    18ae:	83 a1       	ldd	r24, Z+35	; 0x23
    18b0:	8c 83       	std	Y+4, r24	; 0x04
    18b2:	84 a1       	ldd	r24, Z+36	; 0x24
    18b4:	8d 83       	std	Y+5, r24	; 0x05
    18b6:	85 a1       	ldd	r24, Z+37	; 0x25
    18b8:	8e 83       	std	Y+6, r24	; 0x06
    18ba:	86 a1       	ldd	r24, Z+38	; 0x26
    18bc:	8f 83       	std	Y+7, r24	; 0x07
    18be:	87 a1       	ldd	r24, Z+39	; 0x27
    18c0:	88 87       	std	Y+8, r24	; 0x08
    18c2:	80 a5       	ldd	r24, Z+40	; 0x28
    18c4:	89 87       	std	Y+9, r24	; 0x09
    18c6:	81 a5       	ldd	r24, Z+41	; 0x29
    18c8:	8a 87       	std	Y+10, r24	; 0x0a
    18ca:	82 a5       	ldd	r24, Z+42	; 0x2a
    18cc:	8b 87       	std	Y+11, r24	; 0x0b
    18ce:	83 a5       	ldd	r24, Z+43	; 0x2b
    18d0:	8c 87       	std	Y+12, r24	; 0x0c
    18d2:	18 8a       	std	Y+16, r1	; 0x10
    18d4:	1f 86       	std	Y+15, r1	; 0x0f
    18d6:	1e 86       	std	Y+14, r1	; 0x0e
    18d8:	1d 86       	std	Y+13, r1	; 0x0d
    18da:	1c 8a       	std	Y+20, r1	; 0x14
    18dc:	1b 8a       	std	Y+19, r1	; 0x13
    18de:	1a 8a       	std	Y+18, r1	; 0x12
    18e0:	19 8a       	std	Y+17, r1	; 0x11
    18e2:	18 8e       	std	Y+24, r1	; 0x18
    18e4:	1f 8a       	std	Y+23, r1	; 0x17
    18e6:	1e 8a       	std	Y+22, r1	; 0x16
    18e8:	1d 8a       	std	Y+21, r1	; 0x15
    18ea:	80 ad       	ldd	r24, Z+56	; 0x38
    18ec:	89 8f       	std	Y+25, r24	; 0x19
    18ee:	81 ad       	ldd	r24, Z+57	; 0x39
    18f0:	8a 8f       	std	Y+26, r24	; 0x1a
    18f2:	82 ad       	ldd	r24, Z+58	; 0x3a
    18f4:	8b 8f       	std	Y+27, r24	; 0x1b
    18f6:	83 ad       	ldd	r24, Z+59	; 0x3b
    18f8:	8c 8f       	std	Y+28, r24	; 0x1c
    18fa:	84 ad       	ldd	r24, Z+60	; 0x3c
    18fc:	8d 8f       	std	Y+29, r24	; 0x1d
    18fe:	85 ad       	ldd	r24, Z+61	; 0x3d
    1900:	8e 8f       	std	Y+30, r24	; 0x1e
    1902:	86 ad       	ldd	r24, Z+62	; 0x3e
    1904:	8f 8f       	std	Y+31, r24	; 0x1f
    1906:	87 ad       	ldd	r24, Z+63	; 0x3f
    1908:	88 a3       	std	Y+32, r24	; 0x20
    190a:	20 e2       	ldi	r18, 0x20	; 32
    190c:	ae 01       	movw	r20, r28
    190e:	4f 5f       	subi	r20, 0xFF	; 255
    1910:	5f 4f       	sbci	r21, 0xFF	; 255
    1912:	b7 01       	movw	r22, r14
    1914:	c7 01       	movw	r24, r14
    1916:	df d8       	rcall	.-3650   	; 0xad6 <uECC_vli_add>
    1918:	d8 0e       	add	r13, r24
    191a:	f8 01       	movw	r30, r16
    191c:	84 a1       	ldd	r24, Z+36	; 0x24
    191e:	89 83       	std	Y+1, r24	; 0x01
    1920:	85 a1       	ldd	r24, Z+37	; 0x25
    1922:	8a 83       	std	Y+2, r24	; 0x02
    1924:	86 a1       	ldd	r24, Z+38	; 0x26
    1926:	8b 83       	std	Y+3, r24	; 0x03
    1928:	87 a1       	ldd	r24, Z+39	; 0x27
    192a:	8c 83       	std	Y+4, r24	; 0x04
    192c:	80 a5       	ldd	r24, Z+40	; 0x28
    192e:	8d 83       	std	Y+5, r24	; 0x05
    1930:	81 a5       	ldd	r24, Z+41	; 0x29
    1932:	8e 83       	std	Y+6, r24	; 0x06
    1934:	82 a5       	ldd	r24, Z+42	; 0x2a
    1936:	8f 83       	std	Y+7, r24	; 0x07
    1938:	83 a5       	ldd	r24, Z+43	; 0x2b
    193a:	88 87       	std	Y+8, r24	; 0x08
    193c:	84 a5       	ldd	r24, Z+44	; 0x2c
    193e:	89 87       	std	Y+9, r24	; 0x09
    1940:	85 a5       	ldd	r24, Z+45	; 0x2d
    1942:	8a 87       	std	Y+10, r24	; 0x0a
    1944:	86 a5       	ldd	r24, Z+46	; 0x2e
    1946:	8b 87       	std	Y+11, r24	; 0x0b
    1948:	87 a5       	ldd	r24, Z+47	; 0x2f
    194a:	8c 87       	std	Y+12, r24	; 0x0c
    194c:	34 a9       	ldd	r19, Z+52	; 0x34
    194e:	3d 87       	std	Y+13, r19	; 0x0d
    1950:	25 a9       	ldd	r18, Z+53	; 0x35
    1952:	2e 87       	std	Y+14, r18	; 0x0e
    1954:	96 a9       	ldd	r25, Z+54	; 0x36
    1956:	9f 87       	std	Y+15, r25	; 0x0f
    1958:	87 a9       	ldd	r24, Z+55	; 0x37
    195a:	88 8b       	std	Y+16, r24	; 0x10
    195c:	40 ad       	ldd	r20, Z+56	; 0x38
    195e:	49 8b       	std	Y+17, r20	; 0x11
    1960:	41 ad       	ldd	r20, Z+57	; 0x39
    1962:	4a 8b       	std	Y+18, r20	; 0x12
    1964:	42 ad       	ldd	r20, Z+58	; 0x3a
    1966:	4b 8b       	std	Y+19, r20	; 0x13
    1968:	43 ad       	ldd	r20, Z+59	; 0x3b
    196a:	4c 8b       	std	Y+20, r20	; 0x14
    196c:	44 ad       	ldd	r20, Z+60	; 0x3c
    196e:	4d 8b       	std	Y+21, r20	; 0x15
    1970:	45 ad       	ldd	r20, Z+61	; 0x3d
    1972:	4e 8b       	std	Y+22, r20	; 0x16
    1974:	46 ad       	ldd	r20, Z+62	; 0x3e
    1976:	4f 8b       	std	Y+23, r20	; 0x17
    1978:	47 ad       	ldd	r20, Z+63	; 0x3f
    197a:	48 8f       	std	Y+24, r20	; 0x18
    197c:	39 8f       	std	Y+25, r19	; 0x19
    197e:	2a 8f       	std	Y+26, r18	; 0x1a
    1980:	9b 8f       	std	Y+27, r25	; 0x1b
    1982:	8c 8f       	std	Y+28, r24	; 0x1c
    1984:	80 a1       	ldd	r24, Z+32	; 0x20
    1986:	8d 8f       	std	Y+29, r24	; 0x1d
    1988:	81 a1       	ldd	r24, Z+33	; 0x21
    198a:	8e 8f       	std	Y+30, r24	; 0x1e
    198c:	82 a1       	ldd	r24, Z+34	; 0x22
    198e:	8f 8f       	std	Y+31, r24	; 0x1f
    1990:	83 a1       	ldd	r24, Z+35	; 0x23
    1992:	88 a3       	std	Y+32, r24	; 0x20
    1994:	20 e2       	ldi	r18, 0x20	; 32
    1996:	ae 01       	movw	r20, r28
    1998:	4f 5f       	subi	r20, 0xFF	; 255
    199a:	5f 4f       	sbci	r21, 0xFF	; 255
    199c:	b7 01       	movw	r22, r14
    199e:	c7 01       	movw	r24, r14
    19a0:	9a d8       	rcall	.-3788   	; 0xad6 <uECC_vli_add>
    19a2:	d8 0e       	add	r13, r24
    19a4:	f8 01       	movw	r30, r16
    19a6:	84 a5       	ldd	r24, Z+44	; 0x2c
    19a8:	89 83       	std	Y+1, r24	; 0x01
    19aa:	85 a5       	ldd	r24, Z+45	; 0x2d
    19ac:	8a 83       	std	Y+2, r24	; 0x02
    19ae:	86 a5       	ldd	r24, Z+46	; 0x2e
    19b0:	8b 83       	std	Y+3, r24	; 0x03
    19b2:	87 a5       	ldd	r24, Z+47	; 0x2f
    19b4:	8c 83       	std	Y+4, r24	; 0x04
    19b6:	80 a9       	ldd	r24, Z+48	; 0x30
    19b8:	8d 83       	std	Y+5, r24	; 0x05
    19ba:	81 a9       	ldd	r24, Z+49	; 0x31
    19bc:	8e 83       	std	Y+6, r24	; 0x06
    19be:	82 a9       	ldd	r24, Z+50	; 0x32
    19c0:	8f 83       	std	Y+7, r24	; 0x07
    19c2:	83 a9       	ldd	r24, Z+51	; 0x33
    19c4:	88 87       	std	Y+8, r24	; 0x08
    19c6:	84 a9       	ldd	r24, Z+52	; 0x34
    19c8:	89 87       	std	Y+9, r24	; 0x09
    19ca:	85 a9       	ldd	r24, Z+53	; 0x35
    19cc:	8a 87       	std	Y+10, r24	; 0x0a
    19ce:	86 a9       	ldd	r24, Z+54	; 0x36
    19d0:	8b 87       	std	Y+11, r24	; 0x0b
    19d2:	87 a9       	ldd	r24, Z+55	; 0x37
    19d4:	8c 87       	std	Y+12, r24	; 0x0c
    19d6:	18 8a       	std	Y+16, r1	; 0x10
    19d8:	1f 86       	std	Y+15, r1	; 0x0f
    19da:	1e 86       	std	Y+14, r1	; 0x0e
    19dc:	1d 86       	std	Y+13, r1	; 0x0d
    19de:	1c 8a       	std	Y+20, r1	; 0x14
    19e0:	1b 8a       	std	Y+19, r1	; 0x13
    19e2:	1a 8a       	std	Y+18, r1	; 0x12
    19e4:	19 8a       	std	Y+17, r1	; 0x11
    19e6:	18 8e       	std	Y+24, r1	; 0x18
    19e8:	1f 8a       	std	Y+23, r1	; 0x17
    19ea:	1e 8a       	std	Y+22, r1	; 0x16
    19ec:	1d 8a       	std	Y+21, r1	; 0x15
    19ee:	80 a1       	ldd	r24, Z+32	; 0x20
    19f0:	89 8f       	std	Y+25, r24	; 0x19
    19f2:	81 a1       	ldd	r24, Z+33	; 0x21
    19f4:	8a 8f       	std	Y+26, r24	; 0x1a
    19f6:	82 a1       	ldd	r24, Z+34	; 0x22
    19f8:	8b 8f       	std	Y+27, r24	; 0x1b
    19fa:	83 a1       	ldd	r24, Z+35	; 0x23
    19fc:	8c 8f       	std	Y+28, r24	; 0x1c
    19fe:	80 a5       	ldd	r24, Z+40	; 0x28
    1a00:	8d 8f       	std	Y+29, r24	; 0x1d
    1a02:	81 a5       	ldd	r24, Z+41	; 0x29
    1a04:	8e 8f       	std	Y+30, r24	; 0x1e
    1a06:	82 a5       	ldd	r24, Z+42	; 0x2a
    1a08:	8f 8f       	std	Y+31, r24	; 0x1f
    1a0a:	83 a5       	ldd	r24, Z+43	; 0x2b
    1a0c:	88 a3       	std	Y+32, r24	; 0x20
    1a0e:	20 e2       	ldi	r18, 0x20	; 32
    1a10:	ae 01       	movw	r20, r28
    1a12:	4f 5f       	subi	r20, 0xFF	; 255
    1a14:	5f 4f       	sbci	r21, 0xFF	; 255
    1a16:	b7 01       	movw	r22, r14
    1a18:	c7 01       	movw	r24, r14
    1a1a:	2e d9       	rcall	.-3492   	; 0xc78 <uECC_vli_sub>
    1a1c:	d8 1a       	sub	r13, r24
    1a1e:	f8 01       	movw	r30, r16
    1a20:	80 a9       	ldd	r24, Z+48	; 0x30
    1a22:	89 83       	std	Y+1, r24	; 0x01
    1a24:	81 a9       	ldd	r24, Z+49	; 0x31
    1a26:	8a 83       	std	Y+2, r24	; 0x02
    1a28:	82 a9       	ldd	r24, Z+50	; 0x32
    1a2a:	8b 83       	std	Y+3, r24	; 0x03
    1a2c:	83 a9       	ldd	r24, Z+51	; 0x33
    1a2e:	8c 83       	std	Y+4, r24	; 0x04
    1a30:	84 a9       	ldd	r24, Z+52	; 0x34
    1a32:	8d 83       	std	Y+5, r24	; 0x05
    1a34:	85 a9       	ldd	r24, Z+53	; 0x35
    1a36:	8e 83       	std	Y+6, r24	; 0x06
    1a38:	86 a9       	ldd	r24, Z+54	; 0x36
    1a3a:	8f 83       	std	Y+7, r24	; 0x07
    1a3c:	87 a9       	ldd	r24, Z+55	; 0x37
    1a3e:	88 87       	std	Y+8, r24	; 0x08
    1a40:	80 ad       	ldd	r24, Z+56	; 0x38
    1a42:	89 87       	std	Y+9, r24	; 0x09
    1a44:	81 ad       	ldd	r24, Z+57	; 0x39
    1a46:	8a 87       	std	Y+10, r24	; 0x0a
    1a48:	82 ad       	ldd	r24, Z+58	; 0x3a
    1a4a:	8b 87       	std	Y+11, r24	; 0x0b
    1a4c:	83 ad       	ldd	r24, Z+59	; 0x3b
    1a4e:	8c 87       	std	Y+12, r24	; 0x0c
    1a50:	84 ad       	ldd	r24, Z+60	; 0x3c
    1a52:	8d 87       	std	Y+13, r24	; 0x0d
    1a54:	85 ad       	ldd	r24, Z+61	; 0x3d
    1a56:	8e 87       	std	Y+14, r24	; 0x0e
    1a58:	86 ad       	ldd	r24, Z+62	; 0x3e
    1a5a:	8f 87       	std	Y+15, r24	; 0x0f
    1a5c:	87 ad       	ldd	r24, Z+63	; 0x3f
    1a5e:	88 8b       	std	Y+16, r24	; 0x10
    1a60:	1c 8a       	std	Y+20, r1	; 0x14
    1a62:	1b 8a       	std	Y+19, r1	; 0x13
    1a64:	1a 8a       	std	Y+18, r1	; 0x12
    1a66:	19 8a       	std	Y+17, r1	; 0x11
    1a68:	18 8e       	std	Y+24, r1	; 0x18
    1a6a:	1f 8a       	std	Y+23, r1	; 0x17
    1a6c:	1e 8a       	std	Y+22, r1	; 0x16
    1a6e:	1d 8a       	std	Y+21, r1	; 0x15
    1a70:	84 a1       	ldd	r24, Z+36	; 0x24
    1a72:	89 8f       	std	Y+25, r24	; 0x19
    1a74:	85 a1       	ldd	r24, Z+37	; 0x25
    1a76:	8a 8f       	std	Y+26, r24	; 0x1a
    1a78:	86 a1       	ldd	r24, Z+38	; 0x26
    1a7a:	8b 8f       	std	Y+27, r24	; 0x1b
    1a7c:	87 a1       	ldd	r24, Z+39	; 0x27
    1a7e:	8c 8f       	std	Y+28, r24	; 0x1c
    1a80:	84 a5       	ldd	r24, Z+44	; 0x2c
    1a82:	8d 8f       	std	Y+29, r24	; 0x1d
    1a84:	85 a5       	ldd	r24, Z+45	; 0x2d
    1a86:	8e 8f       	std	Y+30, r24	; 0x1e
    1a88:	86 a5       	ldd	r24, Z+46	; 0x2e
    1a8a:	8f 8f       	std	Y+31, r24	; 0x1f
    1a8c:	87 a5       	ldd	r24, Z+47	; 0x2f
    1a8e:	88 a3       	std	Y+32, r24	; 0x20
    1a90:	20 e2       	ldi	r18, 0x20	; 32
    1a92:	ae 01       	movw	r20, r28
    1a94:	4f 5f       	subi	r20, 0xFF	; 255
    1a96:	5f 4f       	sbci	r21, 0xFF	; 255
    1a98:	b7 01       	movw	r22, r14
    1a9a:	c7 01       	movw	r24, r14
    1a9c:	ed d8       	rcall	.-3622   	; 0xc78 <uECC_vli_sub>
    1a9e:	d8 1a       	sub	r13, r24
    1aa0:	f8 01       	movw	r30, r16
    1aa2:	84 a9       	ldd	r24, Z+52	; 0x34
    1aa4:	89 83       	std	Y+1, r24	; 0x01
    1aa6:	85 a9       	ldd	r24, Z+53	; 0x35
    1aa8:	8a 83       	std	Y+2, r24	; 0x02
    1aaa:	86 a9       	ldd	r24, Z+54	; 0x36
    1aac:	8b 83       	std	Y+3, r24	; 0x03
    1aae:	87 a9       	ldd	r24, Z+55	; 0x37
    1ab0:	8c 83       	std	Y+4, r24	; 0x04
    1ab2:	80 ad       	ldd	r24, Z+56	; 0x38
    1ab4:	8d 83       	std	Y+5, r24	; 0x05
    1ab6:	81 ad       	ldd	r24, Z+57	; 0x39
    1ab8:	8e 83       	std	Y+6, r24	; 0x06
    1aba:	82 ad       	ldd	r24, Z+58	; 0x3a
    1abc:	8f 83       	std	Y+7, r24	; 0x07
    1abe:	83 ad       	ldd	r24, Z+59	; 0x3b
    1ac0:	88 87       	std	Y+8, r24	; 0x08
    1ac2:	84 ad       	ldd	r24, Z+60	; 0x3c
    1ac4:	89 87       	std	Y+9, r24	; 0x09
    1ac6:	85 ad       	ldd	r24, Z+61	; 0x3d
    1ac8:	8a 87       	std	Y+10, r24	; 0x0a
    1aca:	86 ad       	ldd	r24, Z+62	; 0x3e
    1acc:	8b 87       	std	Y+11, r24	; 0x0b
    1ace:	87 ad       	ldd	r24, Z+63	; 0x3f
    1ad0:	8c 87       	std	Y+12, r24	; 0x0c
    1ad2:	80 a1       	ldd	r24, Z+32	; 0x20
    1ad4:	8d 87       	std	Y+13, r24	; 0x0d
    1ad6:	81 a1       	ldd	r24, Z+33	; 0x21
    1ad8:	8e 87       	std	Y+14, r24	; 0x0e
    1ada:	82 a1       	ldd	r24, Z+34	; 0x22
    1adc:	8f 87       	std	Y+15, r24	; 0x0f
    1ade:	83 a1       	ldd	r24, Z+35	; 0x23
    1ae0:	88 8b       	std	Y+16, r24	; 0x10
    1ae2:	84 a1       	ldd	r24, Z+36	; 0x24
    1ae4:	89 8b       	std	Y+17, r24	; 0x11
    1ae6:	85 a1       	ldd	r24, Z+37	; 0x25
    1ae8:	8a 8b       	std	Y+18, r24	; 0x12
    1aea:	86 a1       	ldd	r24, Z+38	; 0x26
    1aec:	8b 8b       	std	Y+19, r24	; 0x13
    1aee:	87 a1       	ldd	r24, Z+39	; 0x27
    1af0:	8c 8b       	std	Y+20, r24	; 0x14
    1af2:	80 a5       	ldd	r24, Z+40	; 0x28
    1af4:	8d 8b       	std	Y+21, r24	; 0x15
    1af6:	81 a5       	ldd	r24, Z+41	; 0x29
    1af8:	8e 8b       	std	Y+22, r24	; 0x16
    1afa:	82 a5       	ldd	r24, Z+42	; 0x2a
    1afc:	8f 8b       	std	Y+23, r24	; 0x17
    1afe:	83 a5       	ldd	r24, Z+43	; 0x2b
    1b00:	88 8f       	std	Y+24, r24	; 0x18
    1b02:	1c 8e       	std	Y+28, r1	; 0x1c
    1b04:	1b 8e       	std	Y+27, r1	; 0x1b
    1b06:	1a 8e       	std	Y+26, r1	; 0x1a
    1b08:	19 8e       	std	Y+25, r1	; 0x19
    1b0a:	80 a9       	ldd	r24, Z+48	; 0x30
    1b0c:	8d 8f       	std	Y+29, r24	; 0x1d
    1b0e:	81 a9       	ldd	r24, Z+49	; 0x31
    1b10:	8e 8f       	std	Y+30, r24	; 0x1e
    1b12:	82 a9       	ldd	r24, Z+50	; 0x32
    1b14:	8f 8f       	std	Y+31, r24	; 0x1f
    1b16:	83 a9       	ldd	r24, Z+51	; 0x33
    1b18:	88 a3       	std	Y+32, r24	; 0x20
    1b1a:	20 e2       	ldi	r18, 0x20	; 32
    1b1c:	ae 01       	movw	r20, r28
    1b1e:	4f 5f       	subi	r20, 0xFF	; 255
    1b20:	5f 4f       	sbci	r21, 0xFF	; 255
    1b22:	b7 01       	movw	r22, r14
    1b24:	c7 01       	movw	r24, r14
    1b26:	a8 d8       	rcall	.-3760   	; 0xc78 <uECC_vli_sub>
    1b28:	d8 1a       	sub	r13, r24
    1b2a:	f8 01       	movw	r30, r16
    1b2c:	80 ad       	ldd	r24, Z+56	; 0x38
    1b2e:	89 83       	std	Y+1, r24	; 0x01
    1b30:	81 ad       	ldd	r24, Z+57	; 0x39
    1b32:	8a 83       	std	Y+2, r24	; 0x02
    1b34:	82 ad       	ldd	r24, Z+58	; 0x3a
    1b36:	8b 83       	std	Y+3, r24	; 0x03
    1b38:	83 ad       	ldd	r24, Z+59	; 0x3b
    1b3a:	8c 83       	std	Y+4, r24	; 0x04
    1b3c:	84 ad       	ldd	r24, Z+60	; 0x3c
    1b3e:	8d 83       	std	Y+5, r24	; 0x05
    1b40:	85 ad       	ldd	r24, Z+61	; 0x3d
    1b42:	8e 83       	std	Y+6, r24	; 0x06
    1b44:	86 ad       	ldd	r24, Z+62	; 0x3e
    1b46:	8f 83       	std	Y+7, r24	; 0x07
    1b48:	87 ad       	ldd	r24, Z+63	; 0x3f
    1b4a:	88 87       	std	Y+8, r24	; 0x08
    1b4c:	1c 86       	std	Y+12, r1	; 0x0c
    1b4e:	1b 86       	std	Y+11, r1	; 0x0b
    1b50:	1a 86       	std	Y+10, r1	; 0x0a
    1b52:	19 86       	std	Y+9, r1	; 0x09
    1b54:	84 a1       	ldd	r24, Z+36	; 0x24
    1b56:	8d 87       	std	Y+13, r24	; 0x0d
    1b58:	85 a1       	ldd	r24, Z+37	; 0x25
    1b5a:	8e 87       	std	Y+14, r24	; 0x0e
    1b5c:	86 a1       	ldd	r24, Z+38	; 0x26
    1b5e:	8f 87       	std	Y+15, r24	; 0x0f
    1b60:	87 a1       	ldd	r24, Z+39	; 0x27
    1b62:	88 8b       	std	Y+16, r24	; 0x10
    1b64:	80 a5       	ldd	r24, Z+40	; 0x28
    1b66:	89 8b       	std	Y+17, r24	; 0x11
    1b68:	81 a5       	ldd	r24, Z+41	; 0x29
    1b6a:	8a 8b       	std	Y+18, r24	; 0x12
    1b6c:	82 a5       	ldd	r24, Z+42	; 0x2a
    1b6e:	8b 8b       	std	Y+19, r24	; 0x13
    1b70:	83 a5       	ldd	r24, Z+43	; 0x2b
    1b72:	8c 8b       	std	Y+20, r24	; 0x14
    1b74:	84 a5       	ldd	r24, Z+44	; 0x2c
    1b76:	8d 8b       	std	Y+21, r24	; 0x15
    1b78:	85 a5       	ldd	r24, Z+45	; 0x2d
    1b7a:	8e 8b       	std	Y+22, r24	; 0x16
    1b7c:	86 a5       	ldd	r24, Z+46	; 0x2e
    1b7e:	8f 8b       	std	Y+23, r24	; 0x17
    1b80:	87 a5       	ldd	r24, Z+47	; 0x2f
    1b82:	88 8f       	std	Y+24, r24	; 0x18
    1b84:	1c 8e       	std	Y+28, r1	; 0x1c
    1b86:	1b 8e       	std	Y+27, r1	; 0x1b
    1b88:	1a 8e       	std	Y+26, r1	; 0x1a
    1b8a:	19 8e       	std	Y+25, r1	; 0x19
    1b8c:	84 a9       	ldd	r24, Z+52	; 0x34
    1b8e:	8d 8f       	std	Y+29, r24	; 0x1d
    1b90:	85 a9       	ldd	r24, Z+53	; 0x35
    1b92:	8e 8f       	std	Y+30, r24	; 0x1e
    1b94:	86 a9       	ldd	r24, Z+54	; 0x36
    1b96:	8f 8f       	std	Y+31, r24	; 0x1f
    1b98:	87 a9       	ldd	r24, Z+55	; 0x37
    1b9a:	88 a3       	std	Y+32, r24	; 0x20
    1b9c:	20 e2       	ldi	r18, 0x20	; 32
    1b9e:	ae 01       	movw	r20, r28
    1ba0:	4f 5f       	subi	r20, 0xFF	; 255
    1ba2:	5f 4f       	sbci	r21, 0xFF	; 255
    1ba4:	b7 01       	movw	r22, r14
    1ba6:	c7 01       	movw	r24, r14
    1ba8:	67 d8       	rcall	.-3890   	; 0xc78 <uECC_vli_sub>
    1baa:	d8 1a       	sub	r13, r24
    1bac:	d7 fc       	sbrc	r13, 7
    1bae:	19 c0       	rjmp	.+50     	; 0x1be2 <vli_mmod_fast_secp256r1+0x45c>
    1bb0:	87 01       	movw	r16, r14
    1bb2:	00 5e       	subi	r16, 0xE0	; 224
    1bb4:	1f 4f       	sbci	r17, 0xFF	; 255
    1bb6:	d1 10       	cpse	r13, r1
    1bb8:	0c c0       	rjmp	.+24     	; 0x1bd2 <vli_mmod_fast_secp256r1+0x44c>
    1bba:	ae e2       	ldi	r26, 0x2E	; 46
    1bbc:	b1 e0       	ldi	r27, 0x01	; 1
    1bbe:	f8 01       	movw	r30, r16
    1bc0:	9e 91       	ld	r25, -X
    1bc2:	82 91       	ld	r24, -Z
    1bc4:	89 17       	cp	r24, r25
    1bc6:	b8 f0       	brcs	.+46     	; 0x1bf6 <vli_mmod_fast_secp256r1+0x470>
    1bc8:	98 17       	cp	r25, r24
    1bca:	18 f0       	brcs	.+6      	; 0x1bd2 <vli_mmod_fast_secp256r1+0x44c>
    1bcc:	ee 15       	cp	r30, r14
    1bce:	ff 05       	cpc	r31, r15
    1bd0:	b9 f7       	brne	.-18     	; 0x1bc0 <vli_mmod_fast_secp256r1+0x43a>
    1bd2:	20 e2       	ldi	r18, 0x20	; 32
    1bd4:	4e e0       	ldi	r20, 0x0E	; 14
    1bd6:	51 e0       	ldi	r21, 0x01	; 1
    1bd8:	b7 01       	movw	r22, r14
    1bda:	c7 01       	movw	r24, r14
    1bdc:	4d d8       	rcall	.-3942   	; 0xc78 <uECC_vli_sub>
    1bde:	d8 1a       	sub	r13, r24
    1be0:	ea cf       	rjmp	.-44     	; 0x1bb6 <vli_mmod_fast_secp256r1+0x430>
    1be2:	20 e2       	ldi	r18, 0x20	; 32
    1be4:	4e e0       	ldi	r20, 0x0E	; 14
    1be6:	51 e0       	ldi	r21, 0x01	; 1
    1be8:	b7 01       	movw	r22, r14
    1bea:	c7 01       	movw	r24, r14
    1bec:	0e 94 6b 05 	call	0xad6	; 0xad6 <uECC_vli_add>
    1bf0:	d8 0e       	add	r13, r24
    1bf2:	d7 fc       	sbrc	r13, 7
    1bf4:	f6 cf       	rjmp	.-20     	; 0x1be2 <vli_mmod_fast_secp256r1+0x45c>
    1bf6:	a0 96       	adiw	r28, 0x20	; 32
    1bf8:	0f b6       	in	r0, 0x3f	; 63
    1bfa:	f8 94       	cli
    1bfc:	de bf       	out	0x3e, r29	; 62
    1bfe:	0f be       	out	0x3f, r0	; 63
    1c00:	cd bf       	out	0x3d, r28	; 61
    1c02:	df 91       	pop	r29
    1c04:	cf 91       	pop	r28
    1c06:	1f 91       	pop	r17
    1c08:	0f 91       	pop	r16
    1c0a:	ff 90       	pop	r15
    1c0c:	ef 90       	pop	r14
    1c0e:	df 90       	pop	r13
    1c10:	08 95       	ret

00001c12 <apply_z>:
    1c12:	8f 92       	push	r8
    1c14:	9f 92       	push	r9
    1c16:	af 92       	push	r10
    1c18:	bf 92       	push	r11
    1c1a:	cf 92       	push	r12
    1c1c:	df 92       	push	r13
    1c1e:	ef 92       	push	r14
    1c20:	ff 92       	push	r15
    1c22:	0f 93       	push	r16
    1c24:	1f 93       	push	r17
    1c26:	cf 93       	push	r28
    1c28:	df 93       	push	r29
    1c2a:	cd b7       	in	r28, 0x3d	; 61
    1c2c:	de b7       	in	r29, 0x3e	; 62
    1c2e:	c0 56       	subi	r28, 0x60	; 96
    1c30:	d1 09       	sbc	r29, r1
    1c32:	0f b6       	in	r0, 0x3f	; 63
    1c34:	f8 94       	cli
    1c36:	de bf       	out	0x3e, r29	; 62
    1c38:	0f be       	out	0x3f, r0	; 63
    1c3a:	cd bf       	out	0x3d, r28	; 61
    1c3c:	4c 01       	movw	r8, r24
    1c3e:	5b 01       	movw	r10, r22
    1c40:	6a 01       	movw	r12, r20
    1c42:	89 01       	movw	r16, r18
    1c44:	d9 01       	movw	r26, r18
    1c46:	2c 91       	ld	r18, X
    1c48:	ba 01       	movw	r22, r20
    1c4a:	ce 01       	movw	r24, r28
    1c4c:	01 96       	adiw	r24, 0x01	; 1
    1c4e:	e5 d8       	rcall	.-3638   	; 0xe1a <uECC_vli_mult>
    1c50:	78 01       	movw	r14, r16
    1c52:	ba ea       	ldi	r27, 0xAA	; 170
    1c54:	eb 0e       	add	r14, r27
    1c56:	f1 1c       	adc	r15, r1
    1c58:	d7 01       	movw	r26, r14
    1c5a:	ed 91       	ld	r30, X+
    1c5c:	fc 91       	ld	r31, X
    1c5e:	be 01       	movw	r22, r28
    1c60:	6f 5f       	subi	r22, 0xFF	; 255
    1c62:	7f 4f       	sbci	r23, 0xFF	; 255
    1c64:	ce 01       	movw	r24, r28
    1c66:	8f 5b       	subi	r24, 0xBF	; 191
    1c68:	9f 4f       	sbci	r25, 0xFF	; 255
    1c6a:	09 95       	icall
    1c6c:	f8 01       	movw	r30, r16
    1c6e:	20 81       	ld	r18, Z
    1c70:	ae 01       	movw	r20, r28
    1c72:	4f 5b       	subi	r20, 0xBF	; 191
    1c74:	5f 4f       	sbci	r21, 0xFF	; 255
    1c76:	b4 01       	movw	r22, r8
    1c78:	ce 01       	movw	r24, r28
    1c7a:	01 96       	adiw	r24, 0x01	; 1
    1c7c:	ce d8       	rcall	.-3684   	; 0xe1a <uECC_vli_mult>
    1c7e:	d7 01       	movw	r26, r14
    1c80:	ed 91       	ld	r30, X+
    1c82:	fc 91       	ld	r31, X
    1c84:	be 01       	movw	r22, r28
    1c86:	6f 5f       	subi	r22, 0xFF	; 255
    1c88:	7f 4f       	sbci	r23, 0xFF	; 255
    1c8a:	c4 01       	movw	r24, r8
    1c8c:	09 95       	icall
    1c8e:	f8 01       	movw	r30, r16
    1c90:	20 81       	ld	r18, Z
    1c92:	a6 01       	movw	r20, r12
    1c94:	be 01       	movw	r22, r28
    1c96:	6f 5b       	subi	r22, 0xBF	; 191
    1c98:	7f 4f       	sbci	r23, 0xFF	; 255
    1c9a:	ce 01       	movw	r24, r28
    1c9c:	01 96       	adiw	r24, 0x01	; 1
    1c9e:	bd d8       	rcall	.-3718   	; 0xe1a <uECC_vli_mult>
    1ca0:	d7 01       	movw	r26, r14
    1ca2:	ed 91       	ld	r30, X+
    1ca4:	fc 91       	ld	r31, X
    1ca6:	be 01       	movw	r22, r28
    1ca8:	6f 5f       	subi	r22, 0xFF	; 255
    1caa:	7f 4f       	sbci	r23, 0xFF	; 255
    1cac:	ce 01       	movw	r24, r28
    1cae:	8f 5b       	subi	r24, 0xBF	; 191
    1cb0:	9f 4f       	sbci	r25, 0xFF	; 255
    1cb2:	09 95       	icall
    1cb4:	f8 01       	movw	r30, r16
    1cb6:	20 81       	ld	r18, Z
    1cb8:	ae 01       	movw	r20, r28
    1cba:	4f 5b       	subi	r20, 0xBF	; 191
    1cbc:	5f 4f       	sbci	r21, 0xFF	; 255
    1cbe:	b5 01       	movw	r22, r10
    1cc0:	ce 01       	movw	r24, r28
    1cc2:	01 96       	adiw	r24, 0x01	; 1
    1cc4:	aa d8       	rcall	.-3756   	; 0xe1a <uECC_vli_mult>
    1cc6:	d7 01       	movw	r26, r14
    1cc8:	ed 91       	ld	r30, X+
    1cca:	fc 91       	ld	r31, X
    1ccc:	be 01       	movw	r22, r28
    1cce:	6f 5f       	subi	r22, 0xFF	; 255
    1cd0:	7f 4f       	sbci	r23, 0xFF	; 255
    1cd2:	c5 01       	movw	r24, r10
    1cd4:	09 95       	icall
    1cd6:	c0 5a       	subi	r28, 0xA0	; 160
    1cd8:	df 4f       	sbci	r29, 0xFF	; 255
    1cda:	0f b6       	in	r0, 0x3f	; 63
    1cdc:	f8 94       	cli
    1cde:	de bf       	out	0x3e, r29	; 62
    1ce0:	0f be       	out	0x3f, r0	; 63
    1ce2:	cd bf       	out	0x3d, r28	; 61
    1ce4:	df 91       	pop	r29
    1ce6:	cf 91       	pop	r28
    1ce8:	1f 91       	pop	r17
    1cea:	0f 91       	pop	r16
    1cec:	ff 90       	pop	r15
    1cee:	ef 90       	pop	r14
    1cf0:	df 90       	pop	r13
    1cf2:	cf 90       	pop	r12
    1cf4:	bf 90       	pop	r11
    1cf6:	af 90       	pop	r10
    1cf8:	9f 90       	pop	r9
    1cfa:	8f 90       	pop	r8
    1cfc:	08 95       	ret

00001cfe <XYcZ_add>:
    1cfe:	2f 92       	push	r2
    1d00:	3f 92       	push	r3
    1d02:	4f 92       	push	r4
    1d04:	5f 92       	push	r5
    1d06:	6f 92       	push	r6
    1d08:	7f 92       	push	r7
    1d0a:	8f 92       	push	r8
    1d0c:	9f 92       	push	r9
    1d0e:	af 92       	push	r10
    1d10:	bf 92       	push	r11
    1d12:	cf 92       	push	r12
    1d14:	df 92       	push	r13
    1d16:	ef 92       	push	r14
    1d18:	ff 92       	push	r15
    1d1a:	0f 93       	push	r16
    1d1c:	1f 93       	push	r17
    1d1e:	cf 93       	push	r28
    1d20:	df 93       	push	r29
    1d22:	cd b7       	in	r28, 0x3d	; 61
    1d24:	de b7       	in	r29, 0x3e	; 62
    1d26:	c0 56       	subi	r28, 0x60	; 96
    1d28:	d1 09       	sbc	r29, r1
    1d2a:	0f b6       	in	r0, 0x3f	; 63
    1d2c:	f8 94       	cli
    1d2e:	de bf       	out	0x3e, r29	; 62
    1d30:	0f be       	out	0x3f, r0	; 63
    1d32:	cd bf       	out	0x3d, r28	; 61
    1d34:	3c 01       	movw	r6, r24
    1d36:	2b 01       	movw	r4, r22
    1d38:	7a 01       	movw	r14, r20
    1d3a:	59 01       	movw	r10, r18
    1d3c:	68 01       	movw	r12, r16
    1d3e:	d8 01       	movw	r26, r16
    1d40:	1c 91       	ld	r17, X
    1d42:	46 01       	movw	r8, r12
    1d44:	b4 e0       	ldi	r27, 0x04	; 4
    1d46:	8b 0e       	add	r8, r27
    1d48:	91 1c       	adc	r9, r1
    1d4a:	01 2f       	mov	r16, r17
    1d4c:	94 01       	movw	r18, r8
    1d4e:	ac 01       	movw	r20, r24
    1d50:	b7 01       	movw	r22, r14
    1d52:	ce 01       	movw	r24, r28
    1d54:	8f 5b       	subi	r24, 0xBF	; 191
    1d56:	9f 4f       	sbci	r25, 0xFF	; 255
    1d58:	41 d9       	rcall	.-3454   	; 0xfdc <uECC_vli_modSub>
    1d5a:	f6 01       	movw	r30, r12
    1d5c:	20 81       	ld	r18, Z
    1d5e:	ae 01       	movw	r20, r28
    1d60:	4f 5b       	subi	r20, 0xBF	; 191
    1d62:	5f 4f       	sbci	r21, 0xFF	; 255
    1d64:	ba 01       	movw	r22, r20
    1d66:	ce 01       	movw	r24, r28
    1d68:	01 96       	adiw	r24, 0x01	; 1
    1d6a:	57 d8       	rcall	.-3922   	; 0xe1a <uECC_vli_mult>
    1d6c:	16 01       	movw	r2, r12
    1d6e:	fa ea       	ldi	r31, 0xAA	; 170
    1d70:	2f 0e       	add	r2, r31
    1d72:	31 1c       	adc	r3, r1
    1d74:	d1 01       	movw	r26, r2
    1d76:	ed 91       	ld	r30, X+
    1d78:	fc 91       	ld	r31, X
    1d7a:	be 01       	movw	r22, r28
    1d7c:	6f 5f       	subi	r22, 0xFF	; 255
    1d7e:	7f 4f       	sbci	r23, 0xFF	; 255
    1d80:	ce 01       	movw	r24, r28
    1d82:	8f 5b       	subi	r24, 0xBF	; 191
    1d84:	9f 4f       	sbci	r25, 0xFF	; 255
    1d86:	09 95       	icall
    1d88:	f6 01       	movw	r30, r12
    1d8a:	20 81       	ld	r18, Z
    1d8c:	ae 01       	movw	r20, r28
    1d8e:	4f 5b       	subi	r20, 0xBF	; 191
    1d90:	5f 4f       	sbci	r21, 0xFF	; 255
    1d92:	b3 01       	movw	r22, r6
    1d94:	ce 01       	movw	r24, r28
    1d96:	01 96       	adiw	r24, 0x01	; 1
    1d98:	40 d8       	rcall	.-3968   	; 0xe1a <uECC_vli_mult>
    1d9a:	d1 01       	movw	r26, r2
    1d9c:	ed 91       	ld	r30, X+
    1d9e:	fc 91       	ld	r31, X
    1da0:	be 01       	movw	r22, r28
    1da2:	6f 5f       	subi	r22, 0xFF	; 255
    1da4:	7f 4f       	sbci	r23, 0xFF	; 255
    1da6:	c3 01       	movw	r24, r6
    1da8:	09 95       	icall
    1daa:	f6 01       	movw	r30, r12
    1dac:	20 81       	ld	r18, Z
    1dae:	ae 01       	movw	r20, r28
    1db0:	4f 5b       	subi	r20, 0xBF	; 191
    1db2:	5f 4f       	sbci	r21, 0xFF	; 255
    1db4:	b7 01       	movw	r22, r14
    1db6:	ce 01       	movw	r24, r28
    1db8:	01 96       	adiw	r24, 0x01	; 1
    1dba:	2f d8       	rcall	.-4002   	; 0xe1a <uECC_vli_mult>
    1dbc:	d1 01       	movw	r26, r2
    1dbe:	ed 91       	ld	r30, X+
    1dc0:	fc 91       	ld	r31, X
    1dc2:	be 01       	movw	r22, r28
    1dc4:	6f 5f       	subi	r22, 0xFF	; 255
    1dc6:	7f 4f       	sbci	r23, 0xFF	; 255
    1dc8:	c7 01       	movw	r24, r14
    1dca:	09 95       	icall
    1dcc:	94 01       	movw	r18, r8
    1dce:	a2 01       	movw	r20, r4
    1dd0:	b5 01       	movw	r22, r10
    1dd2:	c5 01       	movw	r24, r10
    1dd4:	03 d9       	rcall	.-3578   	; 0xfdc <uECC_vli_modSub>
    1dd6:	f6 01       	movw	r30, r12
    1dd8:	20 81       	ld	r18, Z
    1dda:	a5 01       	movw	r20, r10
    1ddc:	b5 01       	movw	r22, r10
    1dde:	ce 01       	movw	r24, r28
    1de0:	01 96       	adiw	r24, 0x01	; 1
    1de2:	1b d8       	rcall	.-4042   	; 0xe1a <uECC_vli_mult>
    1de4:	d1 01       	movw	r26, r2
    1de6:	ed 91       	ld	r30, X+
    1de8:	fc 91       	ld	r31, X
    1dea:	be 01       	movw	r22, r28
    1dec:	6f 5f       	subi	r22, 0xFF	; 255
    1dee:	7f 4f       	sbci	r23, 0xFF	; 255
    1df0:	ce 01       	movw	r24, r28
    1df2:	8f 5b       	subi	r24, 0xBF	; 191
    1df4:	9f 4f       	sbci	r25, 0xFF	; 255
    1df6:	09 95       	icall
    1df8:	94 01       	movw	r18, r8
    1dfa:	a3 01       	movw	r20, r6
    1dfc:	be 01       	movw	r22, r28
    1dfe:	6f 5b       	subi	r22, 0xBF	; 191
    1e00:	7f 4f       	sbci	r23, 0xFF	; 255
    1e02:	cb 01       	movw	r24, r22
    1e04:	eb d8       	rcall	.-3626   	; 0xfdc <uECC_vli_modSub>
    1e06:	94 01       	movw	r18, r8
    1e08:	a7 01       	movw	r20, r14
    1e0a:	be 01       	movw	r22, r28
    1e0c:	6f 5b       	subi	r22, 0xBF	; 191
    1e0e:	7f 4f       	sbci	r23, 0xFF	; 255
    1e10:	cb 01       	movw	r24, r22
    1e12:	e4 d8       	rcall	.-3640   	; 0xfdc <uECC_vli_modSub>
    1e14:	94 01       	movw	r18, r8
    1e16:	a3 01       	movw	r20, r6
    1e18:	b7 01       	movw	r22, r14
    1e1a:	c7 01       	movw	r24, r14
    1e1c:	df d8       	rcall	.-3650   	; 0xfdc <uECC_vli_modSub>
    1e1e:	f6 01       	movw	r30, r12
    1e20:	20 81       	ld	r18, Z
    1e22:	a7 01       	movw	r20, r14
    1e24:	b2 01       	movw	r22, r4
    1e26:	ce 01       	movw	r24, r28
    1e28:	01 96       	adiw	r24, 0x01	; 1
    1e2a:	0e 94 0d 07 	call	0xe1a	; 0xe1a <uECC_vli_mult>
    1e2e:	d1 01       	movw	r26, r2
    1e30:	ed 91       	ld	r30, X+
    1e32:	fc 91       	ld	r31, X
    1e34:	be 01       	movw	r22, r28
    1e36:	6f 5f       	subi	r22, 0xFF	; 255
    1e38:	7f 4f       	sbci	r23, 0xFF	; 255
    1e3a:	c2 01       	movw	r24, r4
    1e3c:	09 95       	icall
    1e3e:	94 01       	movw	r18, r8
    1e40:	ae 01       	movw	r20, r28
    1e42:	4f 5b       	subi	r20, 0xBF	; 191
    1e44:	5f 4f       	sbci	r21, 0xFF	; 255
    1e46:	b3 01       	movw	r22, r6
    1e48:	c7 01       	movw	r24, r14
    1e4a:	c8 d8       	rcall	.-3696   	; 0xfdc <uECC_vli_modSub>
    1e4c:	f6 01       	movw	r30, r12
    1e4e:	20 81       	ld	r18, Z
    1e50:	a7 01       	movw	r20, r14
    1e52:	b5 01       	movw	r22, r10
    1e54:	ce 01       	movw	r24, r28
    1e56:	01 96       	adiw	r24, 0x01	; 1
    1e58:	0e 94 0d 07 	call	0xe1a	; 0xe1a <uECC_vli_mult>
    1e5c:	d1 01       	movw	r26, r2
    1e5e:	ed 91       	ld	r30, X+
    1e60:	fc 91       	ld	r31, X
    1e62:	be 01       	movw	r22, r28
    1e64:	6f 5f       	subi	r22, 0xFF	; 255
    1e66:	7f 4f       	sbci	r23, 0xFF	; 255
    1e68:	c5 01       	movw	r24, r10
    1e6a:	09 95       	icall
    1e6c:	94 01       	movw	r18, r8
    1e6e:	a2 01       	movw	r20, r4
    1e70:	b5 01       	movw	r22, r10
    1e72:	c5 01       	movw	r24, r10
    1e74:	b3 d8       	rcall	.-3738   	; 0xfdc <uECC_vli_modSub>
    1e76:	41 2f       	mov	r20, r17
    1e78:	be 01       	movw	r22, r28
    1e7a:	6f 5b       	subi	r22, 0xBF	; 191
    1e7c:	7f 4f       	sbci	r23, 0xFF	; 255
    1e7e:	c7 01       	movw	r24, r14
    1e80:	0e 94 af 04 	call	0x95e	; 0x95e <uECC_vli_set>
    1e84:	c0 5a       	subi	r28, 0xA0	; 160
    1e86:	df 4f       	sbci	r29, 0xFF	; 255
    1e88:	0f b6       	in	r0, 0x3f	; 63
    1e8a:	f8 94       	cli
    1e8c:	de bf       	out	0x3e, r29	; 62
    1e8e:	0f be       	out	0x3f, r0	; 63
    1e90:	cd bf       	out	0x3d, r28	; 61
    1e92:	df 91       	pop	r29
    1e94:	cf 91       	pop	r28
    1e96:	1f 91       	pop	r17
    1e98:	0f 91       	pop	r16
    1e9a:	ff 90       	pop	r15
    1e9c:	ef 90       	pop	r14
    1e9e:	df 90       	pop	r13
    1ea0:	cf 90       	pop	r12
    1ea2:	bf 90       	pop	r11
    1ea4:	af 90       	pop	r10
    1ea6:	9f 90       	pop	r9
    1ea8:	8f 90       	pop	r8
    1eaa:	7f 90       	pop	r7
    1eac:	6f 90       	pop	r6
    1eae:	5f 90       	pop	r5
    1eb0:	4f 90       	pop	r4
    1eb2:	3f 90       	pop	r3
    1eb4:	2f 90       	pop	r2
    1eb6:	08 95       	ret

00001eb8 <XYcZ_addC>:
    1eb8:	2f 92       	push	r2
    1eba:	3f 92       	push	r3
    1ebc:	4f 92       	push	r4
    1ebe:	5f 92       	push	r5
    1ec0:	6f 92       	push	r6
    1ec2:	7f 92       	push	r7
    1ec4:	8f 92       	push	r8
    1ec6:	9f 92       	push	r9
    1ec8:	af 92       	push	r10
    1eca:	bf 92       	push	r11
    1ecc:	cf 92       	push	r12
    1ece:	df 92       	push	r13
    1ed0:	ef 92       	push	r14
    1ed2:	ff 92       	push	r15
    1ed4:	0f 93       	push	r16
    1ed6:	1f 93       	push	r17
    1ed8:	cf 93       	push	r28
    1eda:	df 93       	push	r29
    1edc:	cd b7       	in	r28, 0x3d	; 61
    1ede:	de b7       	in	r29, 0x3e	; 62
    1ee0:	c0 5a       	subi	r28, 0xA0	; 160
    1ee2:	d1 09       	sbc	r29, r1
    1ee4:	0f b6       	in	r0, 0x3f	; 63
    1ee6:	f8 94       	cli
    1ee8:	de bf       	out	0x3e, r29	; 62
    1eea:	0f be       	out	0x3f, r0	; 63
    1eec:	cd bf       	out	0x3d, r28	; 61
    1eee:	4c 01       	movw	r8, r24
    1ef0:	3b 01       	movw	r6, r22
    1ef2:	5a 01       	movw	r10, r20
    1ef4:	69 01       	movw	r12, r18
    1ef6:	28 01       	movw	r4, r16
    1ef8:	d8 01       	movw	r26, r16
    1efa:	1c 91       	ld	r17, X
    1efc:	72 01       	movw	r14, r4
    1efe:	b4 e0       	ldi	r27, 0x04	; 4
    1f00:	eb 0e       	add	r14, r27
    1f02:	f1 1c       	adc	r15, r1
    1f04:	01 2f       	mov	r16, r17
    1f06:	97 01       	movw	r18, r14
    1f08:	ac 01       	movw	r20, r24
    1f0a:	b5 01       	movw	r22, r10
    1f0c:	ce 01       	movw	r24, r28
    1f0e:	8f 57       	subi	r24, 0x7F	; 127
    1f10:	9f 4f       	sbci	r25, 0xFF	; 255
    1f12:	64 d8       	rcall	.-3896   	; 0xfdc <uECC_vli_modSub>
    1f14:	f2 01       	movw	r30, r4
    1f16:	20 81       	ld	r18, Z
    1f18:	ae 01       	movw	r20, r28
    1f1a:	4f 57       	subi	r20, 0x7F	; 127
    1f1c:	5f 4f       	sbci	r21, 0xFF	; 255
    1f1e:	ba 01       	movw	r22, r20
    1f20:	ce 01       	movw	r24, r28
    1f22:	01 96       	adiw	r24, 0x01	; 1
    1f24:	0e 94 0d 07 	call	0xe1a	; 0xe1a <uECC_vli_mult>
    1f28:	12 01       	movw	r2, r4
    1f2a:	fa ea       	ldi	r31, 0xAA	; 170
    1f2c:	2f 0e       	add	r2, r31
    1f2e:	31 1c       	adc	r3, r1
    1f30:	d1 01       	movw	r26, r2
    1f32:	ed 91       	ld	r30, X+
    1f34:	fc 91       	ld	r31, X
    1f36:	be 01       	movw	r22, r28
    1f38:	6f 5f       	subi	r22, 0xFF	; 255
    1f3a:	7f 4f       	sbci	r23, 0xFF	; 255
    1f3c:	ce 01       	movw	r24, r28
    1f3e:	8f 57       	subi	r24, 0x7F	; 127
    1f40:	9f 4f       	sbci	r25, 0xFF	; 255
    1f42:	09 95       	icall
    1f44:	f2 01       	movw	r30, r4
    1f46:	20 81       	ld	r18, Z
    1f48:	ae 01       	movw	r20, r28
    1f4a:	4f 57       	subi	r20, 0x7F	; 127
    1f4c:	5f 4f       	sbci	r21, 0xFF	; 255
    1f4e:	b4 01       	movw	r22, r8
    1f50:	ce 01       	movw	r24, r28
    1f52:	01 96       	adiw	r24, 0x01	; 1
    1f54:	0e 94 0d 07 	call	0xe1a	; 0xe1a <uECC_vli_mult>
    1f58:	d1 01       	movw	r26, r2
    1f5a:	ed 91       	ld	r30, X+
    1f5c:	fc 91       	ld	r31, X
    1f5e:	be 01       	movw	r22, r28
    1f60:	6f 5f       	subi	r22, 0xFF	; 255
    1f62:	7f 4f       	sbci	r23, 0xFF	; 255
    1f64:	c4 01       	movw	r24, r8
    1f66:	09 95       	icall
    1f68:	f2 01       	movw	r30, r4
    1f6a:	20 81       	ld	r18, Z
    1f6c:	ae 01       	movw	r20, r28
    1f6e:	4f 57       	subi	r20, 0x7F	; 127
    1f70:	5f 4f       	sbci	r21, 0xFF	; 255
    1f72:	b5 01       	movw	r22, r10
    1f74:	ce 01       	movw	r24, r28
    1f76:	01 96       	adiw	r24, 0x01	; 1
    1f78:	0e 94 0d 07 	call	0xe1a	; 0xe1a <uECC_vli_mult>
    1f7c:	d1 01       	movw	r26, r2
    1f7e:	ed 91       	ld	r30, X+
    1f80:	fc 91       	ld	r31, X
    1f82:	be 01       	movw	r22, r28
    1f84:	6f 5f       	subi	r22, 0xFF	; 255
    1f86:	7f 4f       	sbci	r23, 0xFF	; 255
    1f88:	c5 01       	movw	r24, r10
    1f8a:	09 95       	icall
    1f8c:	97 01       	movw	r18, r14
    1f8e:	a3 01       	movw	r20, r6
    1f90:	b6 01       	movw	r22, r12
    1f92:	ce 01       	movw	r24, r28
    1f94:	8f 57       	subi	r24, 0x7F	; 127
    1f96:	9f 4f       	sbci	r25, 0xFF	; 255
    1f98:	0e 94 bc 07 	call	0xf78	; 0xf78 <uECC_vli_modAdd>
    1f9c:	97 01       	movw	r18, r14
    1f9e:	a3 01       	movw	r20, r6
    1fa0:	b6 01       	movw	r22, r12
    1fa2:	c6 01       	movw	r24, r12
    1fa4:	1b d8       	rcall	.-4042   	; 0xfdc <uECC_vli_modSub>
    1fa6:	97 01       	movw	r18, r14
    1fa8:	a4 01       	movw	r20, r8
    1faa:	b5 01       	movw	r22, r10
    1fac:	ce 01       	movw	r24, r28
    1fae:	8f 59       	subi	r24, 0x9F	; 159
    1fb0:	9f 4f       	sbci	r25, 0xFF	; 255
    1fb2:	14 d8       	rcall	.-4056   	; 0xfdc <uECC_vli_modSub>
    1fb4:	f2 01       	movw	r30, r4
    1fb6:	20 81       	ld	r18, Z
    1fb8:	ae 01       	movw	r20, r28
    1fba:	4f 59       	subi	r20, 0x9F	; 159
    1fbc:	5f 4f       	sbci	r21, 0xFF	; 255
    1fbe:	b3 01       	movw	r22, r6
    1fc0:	ce 01       	movw	r24, r28
    1fc2:	01 96       	adiw	r24, 0x01	; 1
    1fc4:	0e 94 0d 07 	call	0xe1a	; 0xe1a <uECC_vli_mult>
    1fc8:	d1 01       	movw	r26, r2
    1fca:	ed 91       	ld	r30, X+
    1fcc:	fc 91       	ld	r31, X
    1fce:	be 01       	movw	r22, r28
    1fd0:	6f 5f       	subi	r22, 0xFF	; 255
    1fd2:	7f 4f       	sbci	r23, 0xFF	; 255
    1fd4:	c3 01       	movw	r24, r6
    1fd6:	09 95       	icall
    1fd8:	97 01       	movw	r18, r14
    1fda:	a5 01       	movw	r20, r10
    1fdc:	b4 01       	movw	r22, r8
    1fde:	ce 01       	movw	r24, r28
    1fe0:	8f 59       	subi	r24, 0x9F	; 159
    1fe2:	9f 4f       	sbci	r25, 0xFF	; 255
    1fe4:	0e 94 bc 07 	call	0xf78	; 0xf78 <uECC_vli_modAdd>
    1fe8:	f2 01       	movw	r30, r4
    1fea:	20 81       	ld	r18, Z
    1fec:	a6 01       	movw	r20, r12
    1fee:	b6 01       	movw	r22, r12
    1ff0:	ce 01       	movw	r24, r28
    1ff2:	01 96       	adiw	r24, 0x01	; 1
    1ff4:	0e 94 0d 07 	call	0xe1a	; 0xe1a <uECC_vli_mult>
    1ff8:	d1 01       	movw	r26, r2
    1ffa:	ed 91       	ld	r30, X+
    1ffc:	fc 91       	ld	r31, X
    1ffe:	be 01       	movw	r22, r28
    2000:	6f 5f       	subi	r22, 0xFF	; 255
    2002:	7f 4f       	sbci	r23, 0xFF	; 255
    2004:	c5 01       	movw	r24, r10
    2006:	09 95       	icall
    2008:	97 01       	movw	r18, r14
    200a:	ae 01       	movw	r20, r28
    200c:	4f 59       	subi	r20, 0x9F	; 159
    200e:	5f 4f       	sbci	r21, 0xFF	; 255
    2010:	b5 01       	movw	r22, r10
    2012:	c5 01       	movw	r24, r10
    2014:	0e 94 ee 07 	call	0xfdc	; 0xfdc <uECC_vli_modSub>
    2018:	97 01       	movw	r18, r14
    201a:	a5 01       	movw	r20, r10
    201c:	b4 01       	movw	r22, r8
    201e:	ce 01       	movw	r24, r28
    2020:	8f 5b       	subi	r24, 0xBF	; 191
    2022:	9f 4f       	sbci	r25, 0xFF	; 255
    2024:	0e 94 ee 07 	call	0xfdc	; 0xfdc <uECC_vli_modSub>
    2028:	f2 01       	movw	r30, r4
    202a:	20 81       	ld	r18, Z
    202c:	ae 01       	movw	r20, r28
    202e:	4f 5b       	subi	r20, 0xBF	; 191
    2030:	5f 4f       	sbci	r21, 0xFF	; 255
    2032:	b6 01       	movw	r22, r12
    2034:	ce 01       	movw	r24, r28
    2036:	01 96       	adiw	r24, 0x01	; 1
    2038:	0e 94 0d 07 	call	0xe1a	; 0xe1a <uECC_vli_mult>
    203c:	d1 01       	movw	r26, r2
    203e:	ed 91       	ld	r30, X+
    2040:	fc 91       	ld	r31, X
    2042:	be 01       	movw	r22, r28
    2044:	6f 5f       	subi	r22, 0xFF	; 255
    2046:	7f 4f       	sbci	r23, 0xFF	; 255
    2048:	c6 01       	movw	r24, r12
    204a:	09 95       	icall
    204c:	97 01       	movw	r18, r14
    204e:	a3 01       	movw	r20, r6
    2050:	b6 01       	movw	r22, r12
    2052:	c6 01       	movw	r24, r12
    2054:	0e 94 ee 07 	call	0xfdc	; 0xfdc <uECC_vli_modSub>
    2058:	f2 01       	movw	r30, r4
    205a:	20 81       	ld	r18, Z
    205c:	ae 01       	movw	r20, r28
    205e:	4f 57       	subi	r20, 0x7F	; 127
    2060:	5f 4f       	sbci	r21, 0xFF	; 255
    2062:	ba 01       	movw	r22, r20
    2064:	ce 01       	movw	r24, r28
    2066:	01 96       	adiw	r24, 0x01	; 1
    2068:	0e 94 0d 07 	call	0xe1a	; 0xe1a <uECC_vli_mult>
    206c:	d1 01       	movw	r26, r2
    206e:	ed 91       	ld	r30, X+
    2070:	fc 91       	ld	r31, X
    2072:	be 01       	movw	r22, r28
    2074:	6f 5f       	subi	r22, 0xFF	; 255
    2076:	7f 4f       	sbci	r23, 0xFF	; 255
    2078:	ce 01       	movw	r24, r28
    207a:	8f 5b       	subi	r24, 0xBF	; 191
    207c:	9f 4f       	sbci	r25, 0xFF	; 255
    207e:	09 95       	icall
    2080:	97 01       	movw	r18, r14
    2082:	ae 01       	movw	r20, r28
    2084:	4f 59       	subi	r20, 0x9F	; 159
    2086:	5f 4f       	sbci	r21, 0xFF	; 255
    2088:	be 01       	movw	r22, r28
    208a:	6f 5b       	subi	r22, 0xBF	; 191
    208c:	7f 4f       	sbci	r23, 0xFF	; 255
    208e:	cb 01       	movw	r24, r22
    2090:	0e 94 ee 07 	call	0xfdc	; 0xfdc <uECC_vli_modSub>
    2094:	97 01       	movw	r18, r14
    2096:	a4 01       	movw	r20, r8
    2098:	be 01       	movw	r22, r28
    209a:	6f 5b       	subi	r22, 0xBF	; 191
    209c:	7f 4f       	sbci	r23, 0xFF	; 255
    209e:	ce 01       	movw	r24, r28
    20a0:	8f 59       	subi	r24, 0x9F	; 159
    20a2:	9f 4f       	sbci	r25, 0xFF	; 255
    20a4:	0e 94 ee 07 	call	0xfdc	; 0xfdc <uECC_vli_modSub>
    20a8:	f2 01       	movw	r30, r4
    20aa:	20 81       	ld	r18, Z
    20ac:	ae 01       	movw	r20, r28
    20ae:	4f 57       	subi	r20, 0x7F	; 127
    20b0:	5f 4f       	sbci	r21, 0xFF	; 255
    20b2:	be 01       	movw	r22, r28
    20b4:	6f 59       	subi	r22, 0x9F	; 159
    20b6:	7f 4f       	sbci	r23, 0xFF	; 255
    20b8:	ce 01       	movw	r24, r28
    20ba:	01 96       	adiw	r24, 0x01	; 1
    20bc:	0e 94 0d 07 	call	0xe1a	; 0xe1a <uECC_vli_mult>
    20c0:	d1 01       	movw	r26, r2
    20c2:	ed 91       	ld	r30, X+
    20c4:	fc 91       	ld	r31, X
    20c6:	be 01       	movw	r22, r28
    20c8:	6f 5f       	subi	r22, 0xFF	; 255
    20ca:	7f 4f       	sbci	r23, 0xFF	; 255
    20cc:	ce 01       	movw	r24, r28
    20ce:	8f 59       	subi	r24, 0x9F	; 159
    20d0:	9f 4f       	sbci	r25, 0xFF	; 255
    20d2:	09 95       	icall
    20d4:	97 01       	movw	r18, r14
    20d6:	a3 01       	movw	r20, r6
    20d8:	be 01       	movw	r22, r28
    20da:	6f 59       	subi	r22, 0x9F	; 159
    20dc:	7f 4f       	sbci	r23, 0xFF	; 255
    20de:	c3 01       	movw	r24, r6
    20e0:	0e 94 ee 07 	call	0xfdc	; 0xfdc <uECC_vli_modSub>
    20e4:	41 2f       	mov	r20, r17
    20e6:	be 01       	movw	r22, r28
    20e8:	6f 5b       	subi	r22, 0xBF	; 191
    20ea:	7f 4f       	sbci	r23, 0xFF	; 255
    20ec:	c4 01       	movw	r24, r8
    20ee:	0e 94 af 04 	call	0x95e	; 0x95e <uECC_vli_set>
    20f2:	c0 56       	subi	r28, 0x60	; 96
    20f4:	df 4f       	sbci	r29, 0xFF	; 255
    20f6:	0f b6       	in	r0, 0x3f	; 63
    20f8:	f8 94       	cli
    20fa:	de bf       	out	0x3e, r29	; 62
    20fc:	0f be       	out	0x3f, r0	; 63
    20fe:	cd bf       	out	0x3d, r28	; 61
    2100:	df 91       	pop	r29
    2102:	cf 91       	pop	r28
    2104:	1f 91       	pop	r17
    2106:	0f 91       	pop	r16
    2108:	ff 90       	pop	r15
    210a:	ef 90       	pop	r14
    210c:	df 90       	pop	r13
    210e:	cf 90       	pop	r12
    2110:	bf 90       	pop	r11
    2112:	af 90       	pop	r10
    2114:	9f 90       	pop	r9
    2116:	8f 90       	pop	r8
    2118:	7f 90       	pop	r7
    211a:	6f 90       	pop	r6
    211c:	5f 90       	pop	r5
    211e:	4f 90       	pop	r4
    2120:	3f 90       	pop	r3
    2122:	2f 90       	pop	r2
    2124:	08 95       	ret

00002126 <regularize_k>:
    2126:	9f 92       	push	r9
    2128:	af 92       	push	r10
    212a:	bf 92       	push	r11
    212c:	cf 92       	push	r12
    212e:	df 92       	push	r13
    2130:	ef 92       	push	r14
    2132:	ff 92       	push	r15
    2134:	0f 93       	push	r16
    2136:	1f 93       	push	r17
    2138:	cf 93       	push	r28
    213a:	df 93       	push	r29
    213c:	6b 01       	movw	r12, r22
    213e:	5a 01       	movw	r10, r20
    2140:	f9 01       	movw	r30, r18
    2142:	e2 80       	ldd	r14, Z+2	; 0x02
    2144:	f3 80       	ldd	r15, Z+3	; 0x03
    2146:	e7 01       	movw	r28, r14
    2148:	27 96       	adiw	r28, 0x07	; 7
    214a:	d7 fd       	sbrc	r29, 7
    214c:	47 c0       	rjmp	.+142    	; 0x21dc <regularize_k+0xb6>
    214e:	d5 95       	asr	r29
    2150:	c7 95       	ror	r28
    2152:	d5 95       	asr	r29
    2154:	c7 95       	ror	r28
    2156:	d5 95       	asr	r29
    2158:	c7 95       	ror	r28
    215a:	89 01       	movw	r16, r18
    215c:	0c 5d       	subi	r16, 0xDC	; 220
    215e:	1f 4f       	sbci	r17, 0xFF	; 255
    2160:	2c 2f       	mov	r18, r28
    2162:	a8 01       	movw	r20, r16
    2164:	bc 01       	movw	r22, r24
    2166:	c6 01       	movw	r24, r12
    2168:	0e 94 6b 05 	call	0xad6	; 0xad6 <uECC_vli_add>
    216c:	98 2e       	mov	r9, r24
    216e:	81 11       	cpse	r24, r1
    2170:	32 c0       	rjmp	.+100    	; 0x21d6 <regularize_k+0xb0>
    2172:	28 e0       	ldi	r18, 0x08	; 8
    2174:	c2 02       	muls	r28, r18
    2176:	c0 01       	movw	r24, r0
    2178:	11 24       	eor	r1, r1
    217a:	e8 16       	cp	r14, r24
    217c:	f9 06       	cpc	r15, r25
    217e:	c4 f4       	brge	.+48     	; 0x21b0 <regularize_k+0x8a>
    2180:	f7 01       	movw	r30, r14
    2182:	f5 95       	asr	r31
    2184:	e7 95       	ror	r30
    2186:	f5 95       	asr	r31
    2188:	e7 95       	ror	r30
    218a:	f5 95       	asr	r31
    218c:	e7 95       	ror	r30
    218e:	ec 0d       	add	r30, r12
    2190:	fd 1d       	adc	r31, r13
    2192:	37 e0       	ldi	r19, 0x07	; 7
    2194:	e3 22       	and	r14, r19
    2196:	ff 24       	eor	r15, r15
    2198:	81 e0       	ldi	r24, 0x01	; 1
    219a:	90 e0       	ldi	r25, 0x00	; 0
    219c:	01 c0       	rjmp	.+2      	; 0x21a0 <regularize_k+0x7a>
    219e:	88 0f       	add	r24, r24
    21a0:	ea 94       	dec	r14
    21a2:	ea f7       	brpl	.-6      	; 0x219e <regularize_k+0x78>
    21a4:	90 81       	ld	r25, Z
    21a6:	89 23       	and	r24, r25
    21a8:	99 24       	eor	r9, r9
    21aa:	93 94       	inc	r9
    21ac:	88 23       	and	r24, r24
    21ae:	c1 f0       	breq	.+48     	; 0x21e0 <regularize_k+0xba>
    21b0:	2c 2f       	mov	r18, r28
    21b2:	a8 01       	movw	r20, r16
    21b4:	b6 01       	movw	r22, r12
    21b6:	c5 01       	movw	r24, r10
    21b8:	0e 94 6b 05 	call	0xad6	; 0xad6 <uECC_vli_add>
    21bc:	89 2d       	mov	r24, r9
    21be:	df 91       	pop	r29
    21c0:	cf 91       	pop	r28
    21c2:	1f 91       	pop	r17
    21c4:	0f 91       	pop	r16
    21c6:	ff 90       	pop	r15
    21c8:	ef 90       	pop	r14
    21ca:	df 90       	pop	r13
    21cc:	cf 90       	pop	r12
    21ce:	bf 90       	pop	r11
    21d0:	af 90       	pop	r10
    21d2:	9f 90       	pop	r9
    21d4:	08 95       	ret
    21d6:	99 24       	eor	r9, r9
    21d8:	93 94       	inc	r9
    21da:	ea cf       	rjmp	.-44     	; 0x21b0 <regularize_k+0x8a>
    21dc:	27 96       	adiw	r28, 0x07	; 7
    21de:	b7 cf       	rjmp	.-146    	; 0x214e <regularize_k+0x28>
    21e0:	91 2c       	mov	r9, r1
    21e2:	e6 cf       	rjmp	.-52     	; 0x21b0 <regularize_k+0x8a>

000021e4 <uECC_generate_random_int>:
    21e4:	7f 92       	push	r7
    21e6:	8f 92       	push	r8
    21e8:	9f 92       	push	r9
    21ea:	af 92       	push	r10
    21ec:	bf 92       	push	r11
    21ee:	cf 92       	push	r12
    21f0:	df 92       	push	r13
    21f2:	ef 92       	push	r14
    21f4:	ff 92       	push	r15
    21f6:	0f 93       	push	r16
    21f8:	1f 93       	push	r17
    21fa:	cf 93       	push	r28
    21fc:	df 93       	push	r29
    21fe:	8c 01       	movw	r16, r24
    2200:	5b 01       	movw	r10, r22
    2202:	84 2e       	mov	r8, r20
    2204:	64 2f       	mov	r22, r20
    2206:	c5 01       	movw	r24, r10
    2208:	0e 94 49 07 	call	0xe92	; 0xe92 <uECC_vli_numBits>
    220c:	e0 91 28 05 	lds	r30, 0x0528	; 0x800528 <g_rng_function>
    2210:	f0 91 29 05 	lds	r31, 0x0529	; 0x800529 <g_rng_function+0x1>
    2214:	30 97       	sbiw	r30, 0x00	; 0
    2216:	09 f4       	brne	.+2      	; 0x221a <uECC_generate_random_int+0x36>
    2218:	43 c0       	rjmp	.+134    	; 0x22a0 <uECC_generate_random_int+0xbc>
    221a:	c8 2c       	mov	r12, r8
    221c:	08 2c       	mov	r0, r8
    221e:	00 0c       	add	r0, r0
    2220:	dd 08       	sbc	r13, r13
    2222:	96 01       	movw	r18, r12
    2224:	22 0f       	add	r18, r18
    2226:	33 1f       	adc	r19, r19
    2228:	22 0f       	add	r18, r18
    222a:	33 1f       	adc	r19, r19
    222c:	22 0f       	add	r18, r18
    222e:	33 1f       	adc	r19, r19
    2230:	28 1b       	sub	r18, r24
    2232:	39 0b       	sbc	r19, r25
    2234:	8f ef       	ldi	r24, 0xFF	; 255
    2236:	90 e0       	ldi	r25, 0x00	; 0
    2238:	02 c0       	rjmp	.+4      	; 0x223e <uECC_generate_random_int+0x5a>
    223a:	95 95       	asr	r25
    223c:	87 95       	ror	r24
    223e:	2a 95       	dec	r18
    2240:	e2 f7       	brpl	.-8      	; 0x223a <uECC_generate_random_int+0x56>
    2242:	78 2e       	mov	r7, r24
    2244:	50 e4       	ldi	r21, 0x40	; 64
    2246:	95 2e       	mov	r9, r21
    2248:	76 01       	movw	r14, r12
    224a:	81 e0       	ldi	r24, 0x01	; 1
    224c:	e8 1a       	sub	r14, r24
    224e:	f1 08       	sbc	r15, r1
    2250:	e0 0e       	add	r14, r16
    2252:	f1 1e       	adc	r15, r17
    2254:	cf ef       	ldi	r28, 0xFF	; 255
    2256:	c8 0d       	add	r28, r8
    2258:	d0 e0       	ldi	r29, 0x00	; 0
    225a:	21 96       	adiw	r28, 0x01	; 1
    225c:	c0 0f       	add	r28, r16
    225e:	d1 1f       	adc	r29, r17
    2260:	b6 01       	movw	r22, r12
    2262:	c8 01       	movw	r24, r16
    2264:	09 95       	icall
    2266:	89 2b       	or	r24, r25
    2268:	d9 f0       	breq	.+54     	; 0x22a0 <uECC_generate_random_int+0xbc>
    226a:	f7 01       	movw	r30, r14
    226c:	80 81       	ld	r24, Z
    226e:	87 21       	and	r24, r7
    2270:	80 83       	st	Z, r24
    2272:	18 14       	cp	r1, r8
    2274:	4c f4       	brge	.+18     	; 0x2288 <uECC_generate_random_int+0xa4>
    2276:	f8 01       	movw	r30, r16
    2278:	80 e0       	ldi	r24, 0x00	; 0
    227a:	91 91       	ld	r25, Z+
    227c:	89 2b       	or	r24, r25
    227e:	ec 17       	cp	r30, r28
    2280:	fd 07       	cpc	r31, r29
    2282:	d9 f7       	brne	.-10     	; 0x227a <uECC_generate_random_int+0x96>
    2284:	81 11       	cpse	r24, r1
    2286:	1c c0       	rjmp	.+56     	; 0x22c0 <uECC_generate_random_int+0xdc>
    2288:	9a 94       	dec	r9
    228a:	99 20       	and	r9, r9
    228c:	49 f0       	breq	.+18     	; 0x22a0 <uECC_generate_random_int+0xbc>
    228e:	e0 91 28 05 	lds	r30, 0x0528	; 0x800528 <g_rng_function>
    2292:	f0 91 29 05 	lds	r31, 0x0529	; 0x800529 <g_rng_function+0x1>
    2296:	b6 01       	movw	r22, r12
    2298:	c8 01       	movw	r24, r16
    229a:	09 95       	icall
    229c:	89 2b       	or	r24, r25
    229e:	29 f7       	brne	.-54     	; 0x226a <uECC_generate_random_int+0x86>
    22a0:	80 e0       	ldi	r24, 0x00	; 0
    22a2:	90 e0       	ldi	r25, 0x00	; 0
    22a4:	df 91       	pop	r29
    22a6:	cf 91       	pop	r28
    22a8:	1f 91       	pop	r17
    22aa:	0f 91       	pop	r16
    22ac:	ff 90       	pop	r15
    22ae:	ef 90       	pop	r14
    22b0:	df 90       	pop	r13
    22b2:	cf 90       	pop	r12
    22b4:	bf 90       	pop	r11
    22b6:	af 90       	pop	r10
    22b8:	9f 90       	pop	r9
    22ba:	8f 90       	pop	r8
    22bc:	7f 90       	pop	r7
    22be:	08 95       	ret
    22c0:	48 2d       	mov	r20, r8
    22c2:	b8 01       	movw	r22, r16
    22c4:	c5 01       	movw	r24, r10
    22c6:	0e 94 84 07 	call	0xf08	; 0xf08 <uECC_vli_cmp>
    22ca:	81 30       	cpi	r24, 0x01	; 1
    22cc:	e9 f6       	brne	.-70     	; 0x2288 <uECC_generate_random_int+0xa4>
    22ce:	81 e0       	ldi	r24, 0x01	; 1
    22d0:	90 e0       	ldi	r25, 0x00	; 0
    22d2:	e8 cf       	rjmp	.-48     	; 0x22a4 <uECC_generate_random_int+0xc0>

000022d4 <bits2int>:
    22d4:	8f 92       	push	r8
    22d6:	9f 92       	push	r9
    22d8:	af 92       	push	r10
    22da:	bf 92       	push	r11
    22dc:	cf 92       	push	r12
    22de:	df 92       	push	r13
    22e0:	ef 92       	push	r14
    22e2:	ff 92       	push	r15
    22e4:	0f 93       	push	r16
    22e6:	1f 93       	push	r17
    22e8:	cf 93       	push	r28
    22ea:	df 93       	push	r29
    22ec:	8c 01       	movw	r16, r24
    22ee:	4b 01       	movw	r8, r22
    22f0:	69 01       	movw	r12, r18
    22f2:	f9 01       	movw	r30, r18
    22f4:	82 81       	ldd	r24, Z+2	; 0x02
    22f6:	93 81       	ldd	r25, Z+3	; 0x03
    22f8:	5c 01       	movw	r10, r24
    22fa:	f7 e0       	ldi	r31, 0x07	; 7
    22fc:	af 0e       	add	r10, r31
    22fe:	b1 1c       	adc	r11, r1
    2300:	b7 fc       	sbrc	r11, 7
    2302:	a5 c0       	rjmp	.+330    	; 0x244e <bits2int+0x17a>
    2304:	b5 94       	asr	r11
    2306:	a7 94       	ror	r10
    2308:	b5 94       	asr	r11
    230a:	a7 94       	ror	r10
    230c:	b5 94       	asr	r11
    230e:	a7 94       	ror	r10
    2310:	ca 2d       	mov	r28, r10
    2312:	db 2d       	mov	r29, r11
    2314:	7e 01       	movw	r14, r28
    2316:	4c 17       	cp	r20, r28
    2318:	5d 07       	cpc	r21, r29
    231a:	08 f4       	brcc	.+2      	; 0x231e <bits2int+0x4a>
    231c:	7a 01       	movw	r14, r20
    231e:	6a 2d       	mov	r22, r10
    2320:	c8 01       	movw	r24, r16
    2322:	0e 94 88 04 	call	0x910	; 0x910 <uECC_vli_clear>
    2326:	1e 14       	cp	r1, r14
    2328:	1f 04       	cpc	r1, r15
    232a:	dc f4       	brge	.+54     	; 0x2362 <bits2int+0x8e>
    232c:	97 01       	movw	r18, r14
    232e:	21 50       	subi	r18, 0x01	; 1
    2330:	31 09       	sbc	r19, r1
    2332:	60 e0       	ldi	r22, 0x00	; 0
    2334:	70 e0       	ldi	r23, 0x00	; 0
    2336:	40 e0       	ldi	r20, 0x00	; 0
    2338:	80 e0       	ldi	r24, 0x00	; 0
    233a:	90 e0       	ldi	r25, 0x00	; 0
    233c:	f9 01       	movw	r30, r18
    233e:	e6 1b       	sub	r30, r22
    2340:	f7 0b       	sbc	r31, r23
    2342:	e8 0d       	add	r30, r8
    2344:	f9 1d       	adc	r31, r9
    2346:	50 81       	ld	r21, Z
    2348:	f8 01       	movw	r30, r16
    234a:	e8 0f       	add	r30, r24
    234c:	f9 1f       	adc	r31, r25
    234e:	50 83       	st	Z, r21
    2350:	4f 5f       	subi	r20, 0xFF	; 255
    2352:	84 2f       	mov	r24, r20
    2354:	04 2e       	mov	r0, r20
    2356:	00 0c       	add	r0, r0
    2358:	99 0b       	sbc	r25, r25
    235a:	bc 01       	movw	r22, r24
    235c:	8e 15       	cp	r24, r14
    235e:	9f 05       	cpc	r25, r15
    2360:	6c f3       	brlt	.-38     	; 0x233c <bits2int+0x68>
    2362:	ee 0c       	add	r14, r14
    2364:	ff 1c       	adc	r15, r15
    2366:	ee 0c       	add	r14, r14
    2368:	ff 1c       	adc	r15, r15
    236a:	ee 0c       	add	r14, r14
    236c:	ff 1c       	adc	r15, r15
    236e:	f6 01       	movw	r30, r12
    2370:	82 81       	ldd	r24, Z+2	; 0x02
    2372:	93 81       	ldd	r25, Z+3	; 0x03
    2374:	8e 15       	cp	r24, r14
    2376:	9f 05       	cpc	r25, r15
    2378:	08 f0       	brcs	.+2      	; 0x237c <bits2int+0xa8>
    237a:	5c c0       	rjmp	.+184    	; 0x2434 <bits2int+0x160>
    237c:	e8 1a       	sub	r14, r24
    237e:	f9 0a       	sbc	r15, r25
    2380:	c0 0f       	add	r28, r16
    2382:	d1 1f       	adc	r29, r17
    2384:	0c 17       	cp	r16, r28
    2386:	1d 07       	cpc	r17, r29
    2388:	d0 f4       	brcc	.+52     	; 0x23be <bits2int+0xea>
    238a:	48 e0       	ldi	r20, 0x08	; 8
    238c:	50 e0       	ldi	r21, 0x00	; 0
    238e:	4e 19       	sub	r20, r14
    2390:	5f 09       	sbc	r21, r15
    2392:	60 e0       	ldi	r22, 0x00	; 0
    2394:	9a 91       	ld	r25, -Y
    2396:	89 2f       	mov	r24, r25
    2398:	90 e0       	ldi	r25, 0x00	; 0
    239a:	9c 01       	movw	r18, r24
    239c:	0e 2c       	mov	r0, r14
    239e:	02 c0       	rjmp	.+4      	; 0x23a4 <bits2int+0xd0>
    23a0:	35 95       	asr	r19
    23a2:	27 95       	ror	r18
    23a4:	0a 94       	dec	r0
    23a6:	e2 f7       	brpl	.-8      	; 0x23a0 <bits2int+0xcc>
    23a8:	26 2b       	or	r18, r22
    23aa:	28 83       	st	Y, r18
    23ac:	04 2e       	mov	r0, r20
    23ae:	01 c0       	rjmp	.+2      	; 0x23b2 <bits2int+0xde>
    23b0:	88 0f       	add	r24, r24
    23b2:	0a 94       	dec	r0
    23b4:	ea f7       	brpl	.-6      	; 0x23b0 <bits2int+0xdc>
    23b6:	68 2f       	mov	r22, r24
    23b8:	c0 17       	cp	r28, r16
    23ba:	d1 07       	cpc	r29, r17
    23bc:	59 f7       	brne	.-42     	; 0x2394 <bits2int+0xc0>
    23be:	a6 01       	movw	r20, r12
    23c0:	4c 5d       	subi	r20, 0xDC	; 220
    23c2:	5f 4f       	sbci	r21, 0xFF	; 255
    23c4:	2f ef       	ldi	r18, 0xFF	; 255
    23c6:	2a 0d       	add	r18, r10
    23c8:	27 fd       	sbrc	r18, 7
    23ca:	23 c0       	rjmp	.+70     	; 0x2412 <bits2int+0x13e>
    23cc:	82 2f       	mov	r24, r18
    23ce:	02 2e       	mov	r0, r18
    23d0:	00 0c       	add	r0, r0
    23d2:	99 0b       	sbc	r25, r25
    23d4:	fa 01       	movw	r30, r20
    23d6:	e8 0f       	add	r30, r24
    23d8:	f9 1f       	adc	r31, r25
    23da:	30 81       	ld	r19, Z
    23dc:	f8 01       	movw	r30, r16
    23de:	e8 0f       	add	r30, r24
    23e0:	f9 1f       	adc	r31, r25
    23e2:	80 81       	ld	r24, Z
    23e4:	83 17       	cp	r24, r19
    23e6:	30 f1       	brcs	.+76     	; 0x2434 <bits2int+0x160>
    23e8:	38 17       	cp	r19, r24
    23ea:	88 f4       	brcc	.+34     	; 0x240e <bits2int+0x13a>
    23ec:	12 c0       	rjmp	.+36     	; 0x2412 <bits2int+0x13e>
    23ee:	82 2f       	mov	r24, r18
    23f0:	02 2e       	mov	r0, r18
    23f2:	00 0c       	add	r0, r0
    23f4:	99 0b       	sbc	r25, r25
    23f6:	fa 01       	movw	r30, r20
    23f8:	e8 0f       	add	r30, r24
    23fa:	f9 1f       	adc	r31, r25
    23fc:	30 81       	ld	r19, Z
    23fe:	f8 01       	movw	r30, r16
    2400:	e8 0f       	add	r30, r24
    2402:	f9 1f       	adc	r31, r25
    2404:	80 81       	ld	r24, Z
    2406:	83 17       	cp	r24, r19
    2408:	a8 f0       	brcs	.+42     	; 0x2434 <bits2int+0x160>
    240a:	38 17       	cp	r19, r24
    240c:	10 f0       	brcs	.+4      	; 0x2412 <bits2int+0x13e>
    240e:	21 50       	subi	r18, 0x01	; 1
    2410:	70 f7       	brcc	.-36     	; 0x23ee <bits2int+0x11a>
    2412:	2a 2d       	mov	r18, r10
    2414:	b8 01       	movw	r22, r16
    2416:	c8 01       	movw	r24, r16
    2418:	df 91       	pop	r29
    241a:	cf 91       	pop	r28
    241c:	1f 91       	pop	r17
    241e:	0f 91       	pop	r16
    2420:	ff 90       	pop	r15
    2422:	ef 90       	pop	r14
    2424:	df 90       	pop	r13
    2426:	cf 90       	pop	r12
    2428:	bf 90       	pop	r11
    242a:	af 90       	pop	r10
    242c:	9f 90       	pop	r9
    242e:	8f 90       	pop	r8
    2430:	0c 94 3c 06 	jmp	0xc78	; 0xc78 <uECC_vli_sub>
    2434:	df 91       	pop	r29
    2436:	cf 91       	pop	r28
    2438:	1f 91       	pop	r17
    243a:	0f 91       	pop	r16
    243c:	ff 90       	pop	r15
    243e:	ef 90       	pop	r14
    2440:	df 90       	pop	r13
    2442:	cf 90       	pop	r12
    2444:	bf 90       	pop	r11
    2446:	af 90       	pop	r10
    2448:	9f 90       	pop	r9
    244a:	8f 90       	pop	r8
    244c:	08 95       	ret
    244e:	5c 01       	movw	r10, r24
    2450:	2e e0       	ldi	r18, 0x0E	; 14
    2452:	a2 0e       	add	r10, r18
    2454:	b1 1c       	adc	r11, r1
    2456:	56 cf       	rjmp	.-340    	; 0x2304 <bits2int+0x30>

00002458 <vli_modInv_update>:
    2458:	0f 93       	push	r16
    245a:	1f 93       	push	r17
    245c:	cf 93       	push	r28
    245e:	df 93       	push	r29
    2460:	fc 01       	movw	r30, r24
    2462:	20 81       	ld	r18, Z
    2464:	20 fd       	sbrc	r18, 0
    2466:	07 c0       	rjmp	.+14     	; 0x2476 <vli_modInv_update+0x1e>
    2468:	64 2f       	mov	r22, r20
    246a:	df 91       	pop	r29
    246c:	cf 91       	pop	r28
    246e:	1f 91       	pop	r17
    2470:	0f 91       	pop	r16
    2472:	0c 94 fc 04 	jmp	0x9f8	; 0x9f8 <uECC_vli_rshift1>
    2476:	c4 2f       	mov	r28, r20
    2478:	ab 01       	movw	r20, r22
    247a:	8c 01       	movw	r16, r24
    247c:	2c 2f       	mov	r18, r28
    247e:	bc 01       	movw	r22, r24
    2480:	0e 94 6b 05 	call	0xad6	; 0xad6 <uECC_vli_add>
    2484:	d8 2f       	mov	r29, r24
    2486:	6c 2f       	mov	r22, r28
    2488:	c8 01       	movw	r24, r16
    248a:	0e 94 fc 04 	call	0x9f8	; 0x9f8 <uECC_vli_rshift1>
    248e:	dd 23       	and	r29, r29
    2490:	49 f0       	breq	.+18     	; 0x24a4 <vli_modInv_update+0x4c>
    2492:	ec 2f       	mov	r30, r28
    2494:	cc 0f       	add	r28, r28
    2496:	ff 0b       	sbc	r31, r31
    2498:	31 97       	sbiw	r30, 0x01	; 1
    249a:	e0 0f       	add	r30, r16
    249c:	f1 1f       	adc	r31, r17
    249e:	80 81       	ld	r24, Z
    24a0:	80 68       	ori	r24, 0x80	; 128
    24a2:	80 83       	st	Z, r24
    24a4:	df 91       	pop	r29
    24a6:	cf 91       	pop	r28
    24a8:	1f 91       	pop	r17
    24aa:	0f 91       	pop	r16
    24ac:	08 95       	ret

000024ae <uECC_vli_modInv>:
    24ae:	4f 92       	push	r4
    24b0:	5f 92       	push	r5
    24b2:	6f 92       	push	r6
    24b4:	7f 92       	push	r7
    24b6:	8f 92       	push	r8
    24b8:	9f 92       	push	r9
    24ba:	af 92       	push	r10
    24bc:	bf 92       	push	r11
    24be:	cf 92       	push	r12
    24c0:	df 92       	push	r13
    24c2:	ef 92       	push	r14
    24c4:	ff 92       	push	r15
    24c6:	0f 93       	push	r16
    24c8:	1f 93       	push	r17
    24ca:	cf 93       	push	r28
    24cc:	df 93       	push	r29
    24ce:	cd b7       	in	r28, 0x3d	; 61
    24d0:	de b7       	in	r29, 0x3e	; 62
    24d2:	c0 58       	subi	r28, 0x80	; 128
    24d4:	d1 09       	sbc	r29, r1
    24d6:	0f b6       	in	r0, 0x3f	; 63
    24d8:	f8 94       	cli
    24da:	de bf       	out	0x3e, r29	; 62
    24dc:	0f be       	out	0x3f, r0	; 63
    24de:	cd bf       	out	0x3d, r28	; 61
    24e0:	5c 01       	movw	r10, r24
    24e2:	8a 01       	movw	r16, r20
    24e4:	52 2e       	mov	r5, r18
    24e6:	12 16       	cp	r1, r18
    24e8:	0c f0       	brlt	.+2      	; 0x24ec <uECC_vli_modInv+0x3e>
    24ea:	3d c1       	rjmp	.+634    	; 0x2766 <uECC_vli_modInv+0x2b8>
    24ec:	fb 01       	movw	r30, r22
    24ee:	44 24       	eor	r4, r4
    24f0:	4a 94       	dec	r4
    24f2:	42 0e       	add	r4, r18
    24f4:	24 2d       	mov	r18, r4
    24f6:	30 e0       	ldi	r19, 0x00	; 0
    24f8:	2f 5f       	subi	r18, 0xFF	; 255
    24fa:	3f 4f       	sbci	r19, 0xFF	; 255
    24fc:	26 0f       	add	r18, r22
    24fe:	37 1f       	adc	r19, r23
    2500:	80 e0       	ldi	r24, 0x00	; 0
    2502:	91 91       	ld	r25, Z+
    2504:	89 2b       	or	r24, r25
    2506:	2e 17       	cp	r18, r30
    2508:	3f 07       	cpc	r19, r31
    250a:	d9 f7       	brne	.-10     	; 0x2502 <uECC_vli_modInv+0x54>
    250c:	88 23       	and	r24, r24
    250e:	09 f4       	brne	.+2      	; 0x2512 <uECC_vli_modInv+0x64>
    2510:	2a c1       	rjmp	.+596    	; 0x2766 <uECC_vli_modInv+0x2b8>
    2512:	45 2d       	mov	r20, r5
    2514:	ce 01       	movw	r24, r28
    2516:	8f 59       	subi	r24, 0x9F	; 159
    2518:	9f 4f       	sbci	r25, 0xFF	; 255
    251a:	0e 94 af 04 	call	0x95e	; 0x95e <uECC_vli_set>
    251e:	45 2d       	mov	r20, r5
    2520:	b8 01       	movw	r22, r16
    2522:	ce 01       	movw	r24, r28
    2524:	8f 5b       	subi	r24, 0xBF	; 191
    2526:	9f 4f       	sbci	r25, 0xFF	; 255
    2528:	0e 94 af 04 	call	0x95e	; 0x95e <uECC_vli_set>
    252c:	65 2d       	mov	r22, r5
    252e:	ce 01       	movw	r24, r28
    2530:	81 96       	adiw	r24, 0x21	; 33
    2532:	0e 94 88 04 	call	0x910	; 0x910 <uECC_vli_clear>
    2536:	81 e0       	ldi	r24, 0x01	; 1
    2538:	89 a3       	std	Y+33, r24	; 0x21
    253a:	65 2d       	mov	r22, r5
    253c:	ce 01       	movw	r24, r28
    253e:	01 96       	adiw	r24, 0x01	; 1
    2540:	0e 94 88 04 	call	0x910	; 0x910 <uECC_vli_clear>
    2544:	64 2c       	mov	r6, r4
    2546:	04 2c       	mov	r0, r4
    2548:	00 0c       	add	r0, r0
    254a:	77 08       	sbc	r7, r7
    254c:	81 e6       	ldi	r24, 0x61	; 97
    254e:	c8 2e       	mov	r12, r24
    2550:	d1 2c       	mov	r13, r1
    2552:	cc 0e       	add	r12, r28
    2554:	dd 1e       	adc	r13, r29
    2556:	c6 0c       	add	r12, r6
    2558:	d7 1c       	adc	r13, r7
    255a:	91 e4       	ldi	r25, 0x41	; 65
    255c:	e9 2e       	mov	r14, r25
    255e:	f1 2c       	mov	r15, r1
    2560:	ec 0e       	add	r14, r28
    2562:	fd 1e       	adc	r15, r29
    2564:	e6 0c       	add	r14, r6
    2566:	f7 1c       	adc	r15, r7
    2568:	88 24       	eor	r8, r8
    256a:	83 94       	inc	r8
    256c:	91 2c       	mov	r9, r1
    256e:	8c 0e       	add	r8, r28
    2570:	9d 1e       	adc	r9, r29
    2572:	86 0c       	add	r8, r6
    2574:	97 1c       	adc	r9, r7
    2576:	81 e2       	ldi	r24, 0x21	; 33
    2578:	90 e0       	ldi	r25, 0x00	; 0
    257a:	8c 0f       	add	r24, r28
    257c:	9d 1f       	adc	r25, r29
    257e:	68 0e       	add	r6, r24
    2580:	79 1e       	adc	r7, r25
    2582:	f6 01       	movw	r30, r12
    2584:	90 81       	ld	r25, Z
    2586:	f7 01       	movw	r30, r14
    2588:	80 81       	ld	r24, Z
    258a:	89 17       	cp	r24, r25
    258c:	e8 f1       	brcs	.+122    	; 0x2608 <uECC_vli_modInv+0x15a>
    258e:	98 17       	cp	r25, r24
    2590:	08 f4       	brcc	.+2      	; 0x2594 <uECC_vli_modInv+0xe6>
    2592:	8c c0       	rjmp	.+280    	; 0x26ac <uECC_vli_modInv+0x1fe>
    2594:	24 2d       	mov	r18, r4
    2596:	17 c0       	rjmp	.+46     	; 0x25c6 <uECC_vli_modInv+0x118>
    2598:	82 2f       	mov	r24, r18
    259a:	02 2e       	mov	r0, r18
    259c:	00 0c       	add	r0, r0
    259e:	99 0b       	sbc	r25, r25
    25a0:	e1 e6       	ldi	r30, 0x61	; 97
    25a2:	f0 e0       	ldi	r31, 0x00	; 0
    25a4:	ec 0f       	add	r30, r28
    25a6:	fd 1f       	adc	r31, r29
    25a8:	e8 0f       	add	r30, r24
    25aa:	f9 1f       	adc	r31, r25
    25ac:	30 81       	ld	r19, Z
    25ae:	e1 e4       	ldi	r30, 0x41	; 65
    25b0:	f0 e0       	ldi	r31, 0x00	; 0
    25b2:	ec 0f       	add	r30, r28
    25b4:	fd 1f       	adc	r31, r29
    25b6:	e8 0f       	add	r30, r24
    25b8:	f9 1f       	adc	r31, r25
    25ba:	80 81       	ld	r24, Z
    25bc:	83 17       	cp	r24, r19
    25be:	20 f1       	brcs	.+72     	; 0x2608 <uECC_vli_modInv+0x15a>
    25c0:	38 17       	cp	r19, r24
    25c2:	08 f4       	brcc	.+2      	; 0x25c6 <uECC_vli_modInv+0x118>
    25c4:	73 c0       	rjmp	.+230    	; 0x26ac <uECC_vli_modInv+0x1fe>
    25c6:	21 50       	subi	r18, 0x01	; 1
    25c8:	38 f7       	brcc	.-50     	; 0x2598 <uECC_vli_modInv+0xea>
    25ca:	45 2d       	mov	r20, r5
    25cc:	be 01       	movw	r22, r28
    25ce:	6f 5d       	subi	r22, 0xDF	; 223
    25d0:	7f 4f       	sbci	r23, 0xFF	; 255
    25d2:	c5 01       	movw	r24, r10
    25d4:	0e 94 af 04 	call	0x95e	; 0x95e <uECC_vli_set>
    25d8:	c0 58       	subi	r28, 0x80	; 128
    25da:	df 4f       	sbci	r29, 0xFF	; 255
    25dc:	0f b6       	in	r0, 0x3f	; 63
    25de:	f8 94       	cli
    25e0:	de bf       	out	0x3e, r29	; 62
    25e2:	0f be       	out	0x3f, r0	; 63
    25e4:	cd bf       	out	0x3d, r28	; 61
    25e6:	df 91       	pop	r29
    25e8:	cf 91       	pop	r28
    25ea:	1f 91       	pop	r17
    25ec:	0f 91       	pop	r16
    25ee:	ff 90       	pop	r15
    25f0:	ef 90       	pop	r14
    25f2:	df 90       	pop	r13
    25f4:	cf 90       	pop	r12
    25f6:	bf 90       	pop	r11
    25f8:	af 90       	pop	r10
    25fa:	9f 90       	pop	r9
    25fc:	8f 90       	pop	r8
    25fe:	7f 90       	pop	r7
    2600:	6f 90       	pop	r6
    2602:	5f 90       	pop	r5
    2604:	4f 90       	pop	r4
    2606:	08 95       	ret
    2608:	91 e0       	ldi	r25, 0x01	; 1
    260a:	a2 96       	adiw	r28, 0x22	; 34
    260c:	8f ad       	ldd	r24, Y+63	; 0x3f
    260e:	a2 97       	sbiw	r28, 0x22	; 34
    2610:	80 ff       	sbrs	r24, 0
    2612:	52 c0       	rjmp	.+164    	; 0x26b8 <uECC_vli_modInv+0x20a>
    2614:	22 96       	adiw	r28, 0x02	; 2
    2616:	8f ad       	ldd	r24, Y+63	; 0x3f
    2618:	22 97       	sbiw	r28, 0x02	; 2
    261a:	80 ff       	sbrs	r24, 0
    261c:	54 c0       	rjmp	.+168    	; 0x26c6 <uECC_vli_modInv+0x218>
    261e:	25 2d       	mov	r18, r5
    2620:	ae 01       	movw	r20, r28
    2622:	91 30       	cpi	r25, 0x01	; 1
    2624:	09 f0       	breq	.+2      	; 0x2628 <uECC_vli_modInv+0x17a>
    2626:	5b c0       	rjmp	.+182    	; 0x26de <uECC_vli_modInv+0x230>
    2628:	4f 5b       	subi	r20, 0xBF	; 191
    262a:	5f 4f       	sbci	r21, 0xFF	; 255
    262c:	be 01       	movw	r22, r28
    262e:	6f 59       	subi	r22, 0x9F	; 159
    2630:	7f 4f       	sbci	r23, 0xFF	; 255
    2632:	cb 01       	movw	r24, r22
    2634:	0e 94 3c 06 	call	0xc78	; 0xc78 <uECC_vli_sub>
    2638:	65 2d       	mov	r22, r5
    263a:	ce 01       	movw	r24, r28
    263c:	8f 59       	subi	r24, 0x9F	; 159
    263e:	9f 4f       	sbci	r25, 0xFF	; 255
    2640:	0e 94 fc 04 	call	0x9f8	; 0x9f8 <uECC_vli_rshift1>
    2644:	f3 01       	movw	r30, r6
    2646:	90 81       	ld	r25, Z
    2648:	f4 01       	movw	r30, r8
    264a:	80 81       	ld	r24, Z
    264c:	89 17       	cp	r24, r25
    264e:	f0 f0       	brcs	.+60     	; 0x268c <uECC_vli_modInv+0x1de>
    2650:	98 17       	cp	r25, r24
    2652:	08 f4       	brcc	.+2      	; 0x2656 <uECC_vli_modInv+0x1a8>
    2654:	7f c0       	rjmp	.+254    	; 0x2754 <uECC_vli_modInv+0x2a6>
    2656:	24 2d       	mov	r18, r4
    2658:	17 c0       	rjmp	.+46     	; 0x2688 <uECC_vli_modInv+0x1da>
    265a:	82 2f       	mov	r24, r18
    265c:	02 2e       	mov	r0, r18
    265e:	00 0c       	add	r0, r0
    2660:	99 0b       	sbc	r25, r25
    2662:	e1 e2       	ldi	r30, 0x21	; 33
    2664:	f0 e0       	ldi	r31, 0x00	; 0
    2666:	ec 0f       	add	r30, r28
    2668:	fd 1f       	adc	r31, r29
    266a:	e8 0f       	add	r30, r24
    266c:	f9 1f       	adc	r31, r25
    266e:	30 81       	ld	r19, Z
    2670:	e1 e0       	ldi	r30, 0x01	; 1
    2672:	f0 e0       	ldi	r31, 0x00	; 0
    2674:	ec 0f       	add	r30, r28
    2676:	fd 1f       	adc	r31, r29
    2678:	e8 0f       	add	r30, r24
    267a:	f9 1f       	adc	r31, r25
    267c:	80 81       	ld	r24, Z
    267e:	83 17       	cp	r24, r19
    2680:	28 f0       	brcs	.+10     	; 0x268c <uECC_vli_modInv+0x1de>
    2682:	38 17       	cp	r19, r24
    2684:	08 f4       	brcc	.+2      	; 0x2688 <uECC_vli_modInv+0x1da>
    2686:	66 c0       	rjmp	.+204    	; 0x2754 <uECC_vli_modInv+0x2a6>
    2688:	21 50       	subi	r18, 0x01	; 1
    268a:	38 f7       	brcc	.-50     	; 0x265a <uECC_vli_modInv+0x1ac>
    268c:	25 2d       	mov	r18, r5
    268e:	ae 01       	movw	r20, r28
    2690:	4f 5f       	subi	r20, 0xFF	; 255
    2692:	5f 4f       	sbci	r21, 0xFF	; 255
    2694:	be 01       	movw	r22, r28
    2696:	6f 5d       	subi	r22, 0xDF	; 223
    2698:	7f 4f       	sbci	r23, 0xFF	; 255
    269a:	cb 01       	movw	r24, r22
    269c:	0e 94 3c 06 	call	0xc78	; 0xc78 <uECC_vli_sub>
    26a0:	45 2d       	mov	r20, r5
    26a2:	b8 01       	movw	r22, r16
    26a4:	ce 01       	movw	r24, r28
    26a6:	81 96       	adiw	r24, 0x21	; 33
    26a8:	d7 de       	rcall	.-594    	; 0x2458 <vli_modInv_update>
    26aa:	6b cf       	rjmp	.-298    	; 0x2582 <uECC_vli_modInv+0xd4>
    26ac:	9f ef       	ldi	r25, 0xFF	; 255
    26ae:	a2 96       	adiw	r28, 0x22	; 34
    26b0:	8f ad       	ldd	r24, Y+63	; 0x3f
    26b2:	a2 97       	sbiw	r28, 0x22	; 34
    26b4:	80 fd       	sbrc	r24, 0
    26b6:	ae cf       	rjmp	.-164    	; 0x2614 <uECC_vli_modInv+0x166>
    26b8:	65 2d       	mov	r22, r5
    26ba:	ce 01       	movw	r24, r28
    26bc:	8f 59       	subi	r24, 0x9F	; 159
    26be:	9f 4f       	sbci	r25, 0xFF	; 255
    26c0:	0e 94 fc 04 	call	0x9f8	; 0x9f8 <uECC_vli_rshift1>
    26c4:	ed cf       	rjmp	.-38     	; 0x26a0 <uECC_vli_modInv+0x1f2>
    26c6:	65 2d       	mov	r22, r5
    26c8:	ce 01       	movw	r24, r28
    26ca:	8f 5b       	subi	r24, 0xBF	; 191
    26cc:	9f 4f       	sbci	r25, 0xFF	; 255
    26ce:	0e 94 fc 04 	call	0x9f8	; 0x9f8 <uECC_vli_rshift1>
    26d2:	45 2d       	mov	r20, r5
    26d4:	b8 01       	movw	r22, r16
    26d6:	ce 01       	movw	r24, r28
    26d8:	01 96       	adiw	r24, 0x01	; 1
    26da:	be de       	rcall	.-644    	; 0x2458 <vli_modInv_update>
    26dc:	52 cf       	rjmp	.-348    	; 0x2582 <uECC_vli_modInv+0xd4>
    26de:	4f 59       	subi	r20, 0x9F	; 159
    26e0:	5f 4f       	sbci	r21, 0xFF	; 255
    26e2:	be 01       	movw	r22, r28
    26e4:	6f 5b       	subi	r22, 0xBF	; 191
    26e6:	7f 4f       	sbci	r23, 0xFF	; 255
    26e8:	cb 01       	movw	r24, r22
    26ea:	0e 94 3c 06 	call	0xc78	; 0xc78 <uECC_vli_sub>
    26ee:	65 2d       	mov	r22, r5
    26f0:	ce 01       	movw	r24, r28
    26f2:	8f 5b       	subi	r24, 0xBF	; 191
    26f4:	9f 4f       	sbci	r25, 0xFF	; 255
    26f6:	0e 94 fc 04 	call	0x9f8	; 0x9f8 <uECC_vli_rshift1>
    26fa:	f4 01       	movw	r30, r8
    26fc:	80 81       	ld	r24, Z
    26fe:	f3 01       	movw	r30, r6
    2700:	90 81       	ld	r25, Z
    2702:	98 17       	cp	r25, r24
    2704:	e0 f0       	brcs	.+56     	; 0x273e <uECC_vli_modInv+0x290>
    2706:	89 17       	cp	r24, r25
    2708:	98 f1       	brcs	.+102    	; 0x2770 <uECC_vli_modInv+0x2c2>
    270a:	24 2d       	mov	r18, r4
    270c:	16 c0       	rjmp	.+44     	; 0x273a <uECC_vli_modInv+0x28c>
    270e:	82 2f       	mov	r24, r18
    2710:	02 2e       	mov	r0, r18
    2712:	00 0c       	add	r0, r0
    2714:	99 0b       	sbc	r25, r25
    2716:	e1 e0       	ldi	r30, 0x01	; 1
    2718:	f0 e0       	ldi	r31, 0x00	; 0
    271a:	ec 0f       	add	r30, r28
    271c:	fd 1f       	adc	r31, r29
    271e:	e8 0f       	add	r30, r24
    2720:	f9 1f       	adc	r31, r25
    2722:	30 81       	ld	r19, Z
    2724:	e1 e2       	ldi	r30, 0x21	; 33
    2726:	f0 e0       	ldi	r31, 0x00	; 0
    2728:	ec 0f       	add	r30, r28
    272a:	fd 1f       	adc	r31, r29
    272c:	e8 0f       	add	r30, r24
    272e:	f9 1f       	adc	r31, r25
    2730:	80 81       	ld	r24, Z
    2732:	83 17       	cp	r24, r19
    2734:	20 f0       	brcs	.+8      	; 0x273e <uECC_vli_modInv+0x290>
    2736:	38 17       	cp	r19, r24
    2738:	d8 f0       	brcs	.+54     	; 0x2770 <uECC_vli_modInv+0x2c2>
    273a:	21 50       	subi	r18, 0x01	; 1
    273c:	40 f7       	brcc	.-48     	; 0x270e <uECC_vli_modInv+0x260>
    273e:	25 2d       	mov	r18, r5
    2740:	ae 01       	movw	r20, r28
    2742:	4f 5d       	subi	r20, 0xDF	; 223
    2744:	5f 4f       	sbci	r21, 0xFF	; 255
    2746:	be 01       	movw	r22, r28
    2748:	6f 5f       	subi	r22, 0xFF	; 255
    274a:	7f 4f       	sbci	r23, 0xFF	; 255
    274c:	cb 01       	movw	r24, r22
    274e:	0e 94 3c 06 	call	0xc78	; 0xc78 <uECC_vli_sub>
    2752:	bf cf       	rjmp	.-130    	; 0x26d2 <uECC_vli_modInv+0x224>
    2754:	25 2d       	mov	r18, r5
    2756:	a8 01       	movw	r20, r16
    2758:	be 01       	movw	r22, r28
    275a:	6f 5d       	subi	r22, 0xDF	; 223
    275c:	7f 4f       	sbci	r23, 0xFF	; 255
    275e:	cb 01       	movw	r24, r22
    2760:	0e 94 6b 05 	call	0xad6	; 0xad6 <uECC_vli_add>
    2764:	93 cf       	rjmp	.-218    	; 0x268c <uECC_vli_modInv+0x1de>
    2766:	65 2d       	mov	r22, r5
    2768:	c5 01       	movw	r24, r10
    276a:	0e 94 88 04 	call	0x910	; 0x910 <uECC_vli_clear>
    276e:	34 cf       	rjmp	.-408    	; 0x25d8 <uECC_vli_modInv+0x12a>
    2770:	25 2d       	mov	r18, r5
    2772:	a8 01       	movw	r20, r16
    2774:	be 01       	movw	r22, r28
    2776:	6f 5f       	subi	r22, 0xFF	; 255
    2778:	7f 4f       	sbci	r23, 0xFF	; 255
    277a:	cb 01       	movw	r24, r22
    277c:	0e 94 6b 05 	call	0xad6	; 0xad6 <uECC_vli_add>
    2780:	de cf       	rjmp	.-68     	; 0x273e <uECC_vli_modInv+0x290>

00002782 <EccPoint_mult>:
    2782:	2f 92       	push	r2
    2784:	3f 92       	push	r3
    2786:	4f 92       	push	r4
    2788:	5f 92       	push	r5
    278a:	6f 92       	push	r6
    278c:	7f 92       	push	r7
    278e:	8f 92       	push	r8
    2790:	9f 92       	push	r9
    2792:	af 92       	push	r10
    2794:	bf 92       	push	r11
    2796:	cf 92       	push	r12
    2798:	df 92       	push	r13
    279a:	ef 92       	push	r14
    279c:	ff 92       	push	r15
    279e:	0f 93       	push	r16
    27a0:	1f 93       	push	r17
    27a2:	cf 93       	push	r28
    27a4:	df 93       	push	r29
    27a6:	cd b7       	in	r28, 0x3d	; 61
    27a8:	de b7       	in	r29, 0x3e	; 62
    27aa:	cf 5e       	subi	r28, 0xEF	; 239
    27ac:	d1 09       	sbc	r29, r1
    27ae:	0f b6       	in	r0, 0x3f	; 63
    27b0:	f8 94       	cli
    27b2:	de bf       	out	0x3e, r29	; 62
    27b4:	0f be       	out	0x3f, r0	; 63
    27b6:	cd bf       	out	0x3d, r28	; 61
    27b8:	c2 51       	subi	r28, 0x12	; 18
    27ba:	df 4f       	sbci	r29, 0xFF	; 255
    27bc:	99 83       	std	Y+1, r25	; 0x01
    27be:	88 83       	st	Y, r24
    27c0:	ce 5e       	subi	r28, 0xEE	; 238
    27c2:	d0 40       	sbci	r29, 0x00	; 0
    27c4:	c8 51       	subi	r28, 0x18	; 24
    27c6:	df 4f       	sbci	r29, 0xFF	; 255
    27c8:	79 83       	std	Y+1, r23	; 0x01
    27ca:	68 83       	st	Y, r22
    27cc:	c8 5e       	subi	r28, 0xE8	; 232
    27ce:	d0 40       	sbci	r29, 0x00	; 0
    27d0:	cd 51       	subi	r28, 0x1D	; 29
    27d2:	df 4f       	sbci	r29, 0xFF	; 255
    27d4:	59 83       	std	Y+1, r21	; 0x01
    27d6:	48 83       	st	Y, r20
    27d8:	c3 5e       	subi	r28, 0xE3	; 227
    27da:	d0 40       	sbci	r29, 0x00	; 0
    27dc:	69 01       	movw	r12, r18
    27de:	17 01       	movw	r2, r14
    27e0:	d7 01       	movw	r26, r14
    27e2:	bc 91       	ld	r27, X
    27e4:	cb 51       	subi	r28, 0x1B	; 27
    27e6:	df 4f       	sbci	r29, 0xFF	; 255
    27e8:	b8 83       	st	Y, r27
    27ea:	c5 5e       	subi	r28, 0xE5	; 229
    27ec:	d0 40       	sbci	r29, 0x00	; 0
    27ee:	4b 2f       	mov	r20, r27
    27f0:	81 e8       	ldi	r24, 0x81	; 129
    27f2:	90 e0       	ldi	r25, 0x00	; 0
    27f4:	8c 0f       	add	r24, r28
    27f6:	9d 1f       	adc	r25, r29
    27f8:	80 96       	adiw	r24, 0x20	; 32
    27fa:	0e 94 af 04 	call	0x95e	; 0x95e <uECC_vli_set>
    27fe:	cb 51       	subi	r28, 0x1B	; 27
    2800:	df 4f       	sbci	r29, 0xFF	; 255
    2802:	e8 81       	ld	r30, Y
    2804:	c5 5e       	subi	r28, 0xE5	; 229
    2806:	d0 40       	sbci	r29, 0x00	; 0
    2808:	0e 2e       	mov	r0, r30
    280a:	00 0c       	add	r0, r0
    280c:	ff 0b       	sbc	r31, r31
    280e:	c6 51       	subi	r28, 0x16	; 22
    2810:	df 4f       	sbci	r29, 0xFF	; 255
    2812:	f9 83       	std	Y+1, r31	; 0x01
    2814:	e8 83       	st	Y, r30
    2816:	ca 5e       	subi	r28, 0xEA	; 234
    2818:	d0 40       	sbci	r29, 0x00	; 0
    281a:	c8 51       	subi	r28, 0x18	; 24
    281c:	df 4f       	sbci	r29, 0xFF	; 255
    281e:	28 81       	ld	r18, Y
    2820:	39 81       	ldd	r19, Y+1	; 0x01
    2822:	c8 5e       	subi	r28, 0xE8	; 232
    2824:	d0 40       	sbci	r29, 0x00	; 0
    2826:	2e 0f       	add	r18, r30
    2828:	3f 1f       	adc	r19, r31
    282a:	c4 51       	subi	r28, 0x14	; 20
    282c:	df 4f       	sbci	r29, 0xFF	; 255
    282e:	39 83       	std	Y+1, r19	; 0x01
    2830:	28 83       	st	Y, r18
    2832:	cc 5e       	subi	r28, 0xEC	; 236
    2834:	d0 40       	sbci	r29, 0x00	; 0
    2836:	cb 51       	subi	r28, 0x1B	; 27
    2838:	df 4f       	sbci	r29, 0xFF	; 255
    283a:	48 81       	ld	r20, Y
    283c:	c5 5e       	subi	r28, 0xE5	; 229
    283e:	d0 40       	sbci	r29, 0x00	; 0
    2840:	b9 01       	movw	r22, r18
    2842:	81 e4       	ldi	r24, 0x41	; 65
    2844:	90 e0       	ldi	r25, 0x00	; 0
    2846:	8c 0f       	add	r24, r28
    2848:	9d 1f       	adc	r25, r29
    284a:	80 96       	adiw	r24, 0x20	; 32
    284c:	0e 94 af 04 	call	0x95e	; 0x95e <uECC_vli_set>
    2850:	d7 01       	movw	r26, r14
    2852:	bc 90       	ld	r11, X
    2854:	c1 14       	cp	r12, r1
    2856:	d1 04       	cpc	r13, r1
    2858:	09 f4       	brne	.+2      	; 0x285c <EccPoint_mult+0xda>
    285a:	fc c1       	rjmp	.+1016   	; 0x2c54 <EccPoint_mult+0x4d2>
    285c:	4b 2d       	mov	r20, r11
    285e:	b6 01       	movw	r22, r12
    2860:	fe 01       	movw	r30, r28
    2862:	31 96       	adiw	r30, 0x01	; 1
    2864:	cf 51       	subi	r28, 0x1F	; 31
    2866:	df 4f       	sbci	r29, 0xFF	; 255
    2868:	f9 83       	std	Y+1, r31	; 0x01
    286a:	e8 83       	st	Y, r30
    286c:	c1 5e       	subi	r28, 0xE1	; 225
    286e:	d0 40       	sbci	r29, 0x00	; 0
    2870:	cf 01       	movw	r24, r30
    2872:	0e 94 af 04 	call	0x95e	; 0x95e <uECC_vli_set>
    2876:	4b 2d       	mov	r20, r11
    2878:	81 e8       	ldi	r24, 0x81	; 129
    287a:	e8 2e       	mov	r14, r24
    287c:	f1 2c       	mov	r15, r1
    287e:	ec 0e       	add	r14, r28
    2880:	fd 1e       	adc	r15, r29
    2882:	30 e2       	ldi	r19, 0x20	; 32
    2884:	e3 0e       	add	r14, r19
    2886:	f1 1c       	adc	r15, r1
    2888:	b7 01       	movw	r22, r14
    288a:	ce 01       	movw	r24, r28
    288c:	8f 57       	subi	r24, 0x7F	; 127
    288e:	9f 4f       	sbci	r25, 0xFF	; 255
    2890:	0e 94 af 04 	call	0x95e	; 0x95e <uECC_vli_set>
    2894:	4b 2d       	mov	r20, r11
    2896:	91 e4       	ldi	r25, 0x41	; 65
    2898:	c9 2e       	mov	r12, r25
    289a:	d1 2c       	mov	r13, r1
    289c:	cc 0e       	add	r12, r28
    289e:	dd 1e       	adc	r13, r29
    28a0:	80 e2       	ldi	r24, 0x20	; 32
    28a2:	c8 0e       	add	r12, r24
    28a4:	d1 1c       	adc	r13, r1
    28a6:	b6 01       	movw	r22, r12
    28a8:	ce 01       	movw	r24, r28
    28aa:	8f 5b       	subi	r24, 0xBF	; 191
    28ac:	9f 4f       	sbci	r25, 0xFF	; 255
    28ae:	0e 94 af 04 	call	0x95e	; 0x95e <uECC_vli_set>
    28b2:	91 01       	movw	r18, r2
    28b4:	cf 51       	subi	r28, 0x1F	; 31
    28b6:	df 4f       	sbci	r29, 0xFF	; 255
    28b8:	48 81       	ld	r20, Y
    28ba:	59 81       	ldd	r21, Y+1	; 0x01
    28bc:	c1 5e       	subi	r28, 0xE1	; 225
    28be:	d0 40       	sbci	r29, 0x00	; 0
    28c0:	b6 01       	movw	r22, r12
    28c2:	c7 01       	movw	r24, r14
    28c4:	a6 d9       	rcall	.-3252   	; 0x1c12 <apply_z>
    28c6:	f1 01       	movw	r30, r2
    28c8:	ec 55       	subi	r30, 0x5C	; 92
    28ca:	ff 4f       	sbci	r31, 0xFF	; 255
    28cc:	01 90       	ld	r0, Z+
    28ce:	f0 81       	ld	r31, Z
    28d0:	e0 2d       	mov	r30, r0
    28d2:	91 01       	movw	r18, r2
    28d4:	cf 51       	subi	r28, 0x1F	; 31
    28d6:	df 4f       	sbci	r29, 0xFF	; 255
    28d8:	48 81       	ld	r20, Y
    28da:	59 81       	ldd	r21, Y+1	; 0x01
    28dc:	c1 5e       	subi	r28, 0xE1	; 225
    28de:	d0 40       	sbci	r29, 0x00	; 0
    28e0:	b6 01       	movw	r22, r12
    28e2:	c7 01       	movw	r24, r14
    28e4:	09 95       	icall
    28e6:	91 01       	movw	r18, r2
    28e8:	cf 51       	subi	r28, 0x1F	; 31
    28ea:	df 4f       	sbci	r29, 0xFF	; 255
    28ec:	48 81       	ld	r20, Y
    28ee:	59 81       	ldd	r21, Y+1	; 0x01
    28f0:	c1 5e       	subi	r28, 0xE1	; 225
    28f2:	d0 40       	sbci	r29, 0x00	; 0
    28f4:	be 01       	movw	r22, r28
    28f6:	6f 5b       	subi	r22, 0xBF	; 191
    28f8:	7f 4f       	sbci	r23, 0xFF	; 255
    28fa:	ce 01       	movw	r24, r28
    28fc:	8f 57       	subi	r24, 0x7F	; 127
    28fe:	9f 4f       	sbci	r25, 0xFF	; 255
    2900:	88 d9       	rcall	.-3312   	; 0x1c12 <apply_z>
    2902:	58 01       	movw	r10, r16
    2904:	92 e0       	ldi	r25, 0x02	; 2
    2906:	a9 1a       	sub	r10, r25
    2908:	b1 08       	sbc	r11, r1
    290a:	1a 14       	cp	r1, r10
    290c:	1b 04       	cpc	r1, r11
    290e:	0c f0       	brlt	.+2      	; 0x2912 <EccPoint_mult+0x190>
    2910:	5f c0       	rjmp	.+190    	; 0x29d0 <EccPoint_mult+0x24e>
    2912:	44 24       	eor	r4, r4
    2914:	43 94       	inc	r4
    2916:	51 2c       	mov	r5, r1
    2918:	f5 01       	movw	r30, r10
    291a:	f5 95       	asr	r31
    291c:	e7 95       	ror	r30
    291e:	f5 95       	asr	r31
    2920:	e7 95       	ror	r30
    2922:	f5 95       	asr	r31
    2924:	e7 95       	ror	r30
    2926:	cd 51       	subi	r28, 0x1D	; 29
    2928:	df 4f       	sbci	r29, 0xFF	; 255
    292a:	28 81       	ld	r18, Y
    292c:	39 81       	ldd	r19, Y+1	; 0x01
    292e:	c3 5e       	subi	r28, 0xE3	; 227
    2930:	d0 40       	sbci	r29, 0x00	; 0
    2932:	e2 0f       	add	r30, r18
    2934:	f3 1f       	adc	r31, r19
    2936:	c5 01       	movw	r24, r10
    2938:	87 70       	andi	r24, 0x07	; 7
    293a:	99 27       	eor	r25, r25
    293c:	d2 01       	movw	r26, r4
    293e:	02 c0       	rjmp	.+4      	; 0x2944 <EccPoint_mult+0x1c2>
    2940:	aa 0f       	add	r26, r26
    2942:	bb 1f       	adc	r27, r27
    2944:	8a 95       	dec	r24
    2946:	e2 f7       	brpl	.-8      	; 0x2940 <EccPoint_mult+0x1be>
    2948:	cd 01       	movw	r24, r26
    294a:	90 81       	ld	r25, Z
    294c:	89 23       	and	r24, r25
    294e:	21 e0       	ldi	r18, 0x01	; 1
    2950:	30 e0       	ldi	r19, 0x00	; 0
    2952:	11 f0       	breq	.+4      	; 0x2958 <EccPoint_mult+0x1d6>
    2954:	20 e0       	ldi	r18, 0x00	; 0
    2956:	30 e0       	ldi	r19, 0x00	; 0
    2958:	39 01       	movw	r6, r18
    295a:	66 0c       	add	r6, r6
    295c:	77 1c       	adc	r7, r7
    295e:	62 94       	swap	r6
    2960:	72 94       	swap	r7
    2962:	80 ef       	ldi	r24, 0xF0	; 240
    2964:	78 22       	and	r7, r24
    2966:	76 24       	eor	r7, r6
    2968:	68 22       	and	r6, r24
    296a:	76 24       	eor	r7, r6
    296c:	91 e4       	ldi	r25, 0x41	; 65
    296e:	c9 2e       	mov	r12, r25
    2970:	d1 2c       	mov	r13, r1
    2972:	cc 0e       	add	r12, r28
    2974:	dd 1e       	adc	r13, r29
    2976:	c6 0c       	add	r12, r6
    2978:	d7 1c       	adc	r13, r7
    297a:	e1 e8       	ldi	r30, 0x81	; 129
    297c:	f0 e0       	ldi	r31, 0x00	; 0
    297e:	ec 0f       	add	r30, r28
    2980:	fd 1f       	adc	r31, r29
    2982:	6e 0e       	add	r6, r30
    2984:	7f 1e       	adc	r7, r31
    2986:	72 01       	movw	r14, r4
    2988:	e2 1a       	sub	r14, r18
    298a:	f3 0a       	sbc	r15, r19
    298c:	ee 0c       	add	r14, r14
    298e:	ff 1c       	adc	r15, r15
    2990:	e2 94       	swap	r14
    2992:	f2 94       	swap	r15
    2994:	20 ef       	ldi	r18, 0xF0	; 240
    2996:	f2 22       	and	r15, r18
    2998:	fe 24       	eor	r15, r14
    299a:	e2 22       	and	r14, r18
    299c:	fe 24       	eor	r15, r14
    299e:	31 e4       	ldi	r19, 0x41	; 65
    29a0:	83 2e       	mov	r8, r19
    29a2:	91 2c       	mov	r9, r1
    29a4:	8c 0e       	add	r8, r28
    29a6:	9d 1e       	adc	r9, r29
    29a8:	8e 0c       	add	r8, r14
    29aa:	9f 1c       	adc	r9, r15
    29ac:	ee 0e       	add	r14, r30
    29ae:	ff 1e       	adc	r15, r31
    29b0:	81 01       	movw	r16, r2
    29b2:	96 01       	movw	r18, r12
    29b4:	a3 01       	movw	r20, r6
    29b6:	b4 01       	movw	r22, r8
    29b8:	c7 01       	movw	r24, r14
    29ba:	7e da       	rcall	.-2820   	; 0x1eb8 <XYcZ_addC>
    29bc:	94 01       	movw	r18, r8
    29be:	a7 01       	movw	r20, r14
    29c0:	b6 01       	movw	r22, r12
    29c2:	c3 01       	movw	r24, r6
    29c4:	9c d9       	rcall	.-3272   	; 0x1cfe <XYcZ_add>
    29c6:	f1 e0       	ldi	r31, 0x01	; 1
    29c8:	af 1a       	sub	r10, r31
    29ca:	b1 08       	sbc	r11, r1
    29cc:	09 f0       	breq	.+2      	; 0x29d0 <EccPoint_mult+0x24e>
    29ce:	a4 cf       	rjmp	.-184    	; 0x2918 <EccPoint_mult+0x196>
    29d0:	cd 51       	subi	r28, 0x1D	; 29
    29d2:	df 4f       	sbci	r29, 0xFF	; 255
    29d4:	a8 81       	ld	r26, Y
    29d6:	b9 81       	ldd	r27, Y+1	; 0x01
    29d8:	c3 5e       	subi	r28, 0xE3	; 227
    29da:	d0 40       	sbci	r29, 0x00	; 0
    29dc:	8c 91       	ld	r24, X
    29de:	80 95       	com	r24
    29e0:	81 70       	andi	r24, 0x01	; 1
    29e2:	ca 51       	subi	r28, 0x1A	; 26
    29e4:	df 4f       	sbci	r29, 0xFF	; 255
    29e6:	88 83       	st	Y, r24
    29e8:	c6 5e       	subi	r28, 0xE6	; 230
    29ea:	d0 40       	sbci	r29, 0x00	; 0
    29ec:	c9 51       	subi	r28, 0x19	; 25
    29ee:	df 4f       	sbci	r29, 0xFF	; 255
    29f0:	18 82       	st	Y, r1
    29f2:	c7 5e       	subi	r28, 0xE7	; 231
    29f4:	d0 40       	sbci	r29, 0x00	; 0
    29f6:	ca 51       	subi	r28, 0x1A	; 26
    29f8:	df 4f       	sbci	r29, 0xFF	; 255
    29fa:	48 80       	ld	r4, Y
    29fc:	59 80       	ldd	r5, Y+1	; 0x01
    29fe:	c6 5e       	subi	r28, 0xE6	; 230
    2a00:	d0 40       	sbci	r29, 0x00	; 0
    2a02:	44 0c       	add	r4, r4
    2a04:	55 1c       	adc	r5, r5
    2a06:	42 94       	swap	r4
    2a08:	52 94       	swap	r5
    2a0a:	60 ef       	ldi	r22, 0xF0	; 240
    2a0c:	56 22       	and	r5, r22
    2a0e:	54 24       	eor	r5, r4
    2a10:	46 22       	and	r4, r22
    2a12:	54 24       	eor	r5, r4
    2a14:	71 e4       	ldi	r23, 0x41	; 65
    2a16:	67 2e       	mov	r6, r23
    2a18:	71 2c       	mov	r7, r1
    2a1a:	6c 0e       	add	r6, r28
    2a1c:	7d 1e       	adc	r7, r29
    2a1e:	64 0c       	add	r6, r4
    2a20:	75 1c       	adc	r7, r5
    2a22:	e1 e8       	ldi	r30, 0x81	; 129
    2a24:	f0 e0       	ldi	r31, 0x00	; 0
    2a26:	ec 0f       	add	r30, r28
    2a28:	fd 1f       	adc	r31, r29
    2a2a:	4e 0e       	add	r4, r30
    2a2c:	5f 1e       	adc	r5, r31
    2a2e:	81 e0       	ldi	r24, 0x01	; 1
    2a30:	90 e0       	ldi	r25, 0x00	; 0
    2a32:	7c 01       	movw	r14, r24
    2a34:	ca 51       	subi	r28, 0x1A	; 26
    2a36:	df 4f       	sbci	r29, 0xFF	; 255
    2a38:	28 81       	ld	r18, Y
    2a3a:	39 81       	ldd	r19, Y+1	; 0x01
    2a3c:	c6 5e       	subi	r28, 0xE6	; 230
    2a3e:	d0 40       	sbci	r29, 0x00	; 0
    2a40:	e2 1a       	sub	r14, r18
    2a42:	f3 0a       	sbc	r15, r19
    2a44:	ee 0c       	add	r14, r14
    2a46:	ff 1c       	adc	r15, r15
    2a48:	e2 94       	swap	r14
    2a4a:	f2 94       	swap	r15
    2a4c:	a0 ef       	ldi	r26, 0xF0	; 240
    2a4e:	fa 22       	and	r15, r26
    2a50:	fe 24       	eor	r15, r14
    2a52:	ea 22       	and	r14, r26
    2a54:	fe 24       	eor	r15, r14
    2a56:	b1 e4       	ldi	r27, 0x41	; 65
    2a58:	cb 2e       	mov	r12, r27
    2a5a:	d1 2c       	mov	r13, r1
    2a5c:	cc 0e       	add	r12, r28
    2a5e:	dd 1e       	adc	r13, r29
    2a60:	ce 0c       	add	r12, r14
    2a62:	df 1c       	adc	r13, r15
    2a64:	ee 0e       	add	r14, r30
    2a66:	ff 1e       	adc	r15, r31
    2a68:	81 01       	movw	r16, r2
    2a6a:	93 01       	movw	r18, r6
    2a6c:	a2 01       	movw	r20, r4
    2a6e:	b6 01       	movw	r22, r12
    2a70:	c7 01       	movw	r24, r14
    2a72:	22 da       	rcall	.-3004   	; 0x1eb8 <XYcZ_addC>
    2a74:	51 01       	movw	r10, r2
    2a76:	34 e0       	ldi	r19, 0x04	; 4
    2a78:	a3 0e       	add	r10, r19
    2a7a:	b1 1c       	adc	r11, r1
    2a7c:	61 e8       	ldi	r22, 0x81	; 129
    2a7e:	70 e0       	ldi	r23, 0x00	; 0
    2a80:	6c 0f       	add	r22, r28
    2a82:	7d 1f       	adc	r23, r29
    2a84:	60 5e       	subi	r22, 0xE0	; 224
    2a86:	7f 4f       	sbci	r23, 0xFF	; 255
    2a88:	cb 51       	subi	r28, 0x1B	; 27
    2a8a:	df 4f       	sbci	r29, 0xFF	; 255
    2a8c:	08 81       	ld	r16, Y
    2a8e:	c5 5e       	subi	r28, 0xE5	; 229
    2a90:	d0 40       	sbci	r29, 0x00	; 0
    2a92:	95 01       	movw	r18, r10
    2a94:	ae 01       	movw	r20, r28
    2a96:	4f 57       	subi	r20, 0x7F	; 127
    2a98:	5f 4f       	sbci	r21, 0xFF	; 255
    2a9a:	ce 01       	movw	r24, r28
    2a9c:	8f 53       	subi	r24, 0x3F	; 63
    2a9e:	9f 4f       	sbci	r25, 0xFF	; 255
    2aa0:	0e 94 ee 07 	call	0xfdc	; 0xfdc <uECC_vli_modSub>
    2aa4:	d1 01       	movw	r26, r2
    2aa6:	2c 91       	ld	r18, X
    2aa8:	a6 01       	movw	r20, r12
    2aaa:	be 01       	movw	r22, r28
    2aac:	6f 53       	subi	r22, 0x3F	; 63
    2aae:	7f 4f       	sbci	r23, 0xFF	; 255
    2ab0:	cf 51       	subi	r28, 0x1F	; 31
    2ab2:	df 4f       	sbci	r29, 0xFF	; 255
    2ab4:	88 81       	ld	r24, Y
    2ab6:	99 81       	ldd	r25, Y+1	; 0x01
    2ab8:	c1 5e       	subi	r28, 0xE1	; 225
    2aba:	d0 40       	sbci	r29, 0x00	; 0
    2abc:	0e 94 0d 07 	call	0xe1a	; 0xe1a <uECC_vli_mult>
    2ac0:	41 01       	movw	r8, r2
    2ac2:	ba ea       	ldi	r27, 0xAA	; 170
    2ac4:	8b 0e       	add	r8, r27
    2ac6:	91 1c       	adc	r9, r1
    2ac8:	d4 01       	movw	r26, r8
    2aca:	ed 91       	ld	r30, X+
    2acc:	fc 91       	ld	r31, X
    2ace:	cf 51       	subi	r28, 0x1F	; 31
    2ad0:	df 4f       	sbci	r29, 0xFF	; 255
    2ad2:	68 81       	ld	r22, Y
    2ad4:	79 81       	ldd	r23, Y+1	; 0x01
    2ad6:	c1 5e       	subi	r28, 0xE1	; 225
    2ad8:	d0 40       	sbci	r29, 0x00	; 0
    2ada:	ce 01       	movw	r24, r28
    2adc:	8f 53       	subi	r24, 0x3F	; 63
    2ade:	9f 4f       	sbci	r25, 0xFF	; 255
    2ae0:	09 95       	icall
    2ae2:	f1 01       	movw	r30, r2
    2ae4:	20 81       	ld	r18, Z
    2ae6:	c8 51       	subi	r28, 0x18	; 24
    2ae8:	df 4f       	sbci	r29, 0xFF	; 255
    2aea:	48 81       	ld	r20, Y
    2aec:	59 81       	ldd	r21, Y+1	; 0x01
    2aee:	c8 5e       	subi	r28, 0xE8	; 232
    2af0:	d0 40       	sbci	r29, 0x00	; 0
    2af2:	be 01       	movw	r22, r28
    2af4:	6f 53       	subi	r22, 0x3F	; 63
    2af6:	7f 4f       	sbci	r23, 0xFF	; 255
    2af8:	cf 51       	subi	r28, 0x1F	; 31
    2afa:	df 4f       	sbci	r29, 0xFF	; 255
    2afc:	88 81       	ld	r24, Y
    2afe:	99 81       	ldd	r25, Y+1	; 0x01
    2b00:	c1 5e       	subi	r28, 0xE1	; 225
    2b02:	d0 40       	sbci	r29, 0x00	; 0
    2b04:	0e 94 0d 07 	call	0xe1a	; 0xe1a <uECC_vli_mult>
    2b08:	d4 01       	movw	r26, r8
    2b0a:	ed 91       	ld	r30, X+
    2b0c:	fc 91       	ld	r31, X
    2b0e:	cf 51       	subi	r28, 0x1F	; 31
    2b10:	df 4f       	sbci	r29, 0xFF	; 255
    2b12:	68 81       	ld	r22, Y
    2b14:	79 81       	ldd	r23, Y+1	; 0x01
    2b16:	c1 5e       	subi	r28, 0xE1	; 225
    2b18:	d0 40       	sbci	r29, 0x00	; 0
    2b1a:	ce 01       	movw	r24, r28
    2b1c:	8f 53       	subi	r24, 0x3F	; 63
    2b1e:	9f 4f       	sbci	r25, 0xFF	; 255
    2b20:	09 95       	icall
    2b22:	cb 51       	subi	r28, 0x1B	; 27
    2b24:	df 4f       	sbci	r29, 0xFF	; 255
    2b26:	28 81       	ld	r18, Y
    2b28:	c5 5e       	subi	r28, 0xE5	; 229
    2b2a:	d0 40       	sbci	r29, 0x00	; 0
    2b2c:	a5 01       	movw	r20, r10
    2b2e:	be 01       	movw	r22, r28
    2b30:	6f 53       	subi	r22, 0x3F	; 63
    2b32:	7f 4f       	sbci	r23, 0xFF	; 255
    2b34:	cb 01       	movw	r24, r22
    2b36:	bb dc       	rcall	.-1674   	; 0x24ae <uECC_vli_modInv>
    2b38:	f1 01       	movw	r30, r2
    2b3a:	20 81       	ld	r18, Z
    2b3c:	c4 51       	subi	r28, 0x14	; 20
    2b3e:	df 4f       	sbci	r29, 0xFF	; 255
    2b40:	48 81       	ld	r20, Y
    2b42:	59 81       	ldd	r21, Y+1	; 0x01
    2b44:	cc 5e       	subi	r28, 0xEC	; 236
    2b46:	d0 40       	sbci	r29, 0x00	; 0
    2b48:	be 01       	movw	r22, r28
    2b4a:	6f 53       	subi	r22, 0x3F	; 63
    2b4c:	7f 4f       	sbci	r23, 0xFF	; 255
    2b4e:	cf 51       	subi	r28, 0x1F	; 31
    2b50:	df 4f       	sbci	r29, 0xFF	; 255
    2b52:	88 81       	ld	r24, Y
    2b54:	99 81       	ldd	r25, Y+1	; 0x01
    2b56:	c1 5e       	subi	r28, 0xE1	; 225
    2b58:	d0 40       	sbci	r29, 0x00	; 0
    2b5a:	0e 94 0d 07 	call	0xe1a	; 0xe1a <uECC_vli_mult>
    2b5e:	d4 01       	movw	r26, r8
    2b60:	ed 91       	ld	r30, X+
    2b62:	fc 91       	ld	r31, X
    2b64:	cf 51       	subi	r28, 0x1F	; 31
    2b66:	df 4f       	sbci	r29, 0xFF	; 255
    2b68:	68 81       	ld	r22, Y
    2b6a:	79 81       	ldd	r23, Y+1	; 0x01
    2b6c:	c1 5e       	subi	r28, 0xE1	; 225
    2b6e:	d0 40       	sbci	r29, 0x00	; 0
    2b70:	ce 01       	movw	r24, r28
    2b72:	8f 53       	subi	r24, 0x3F	; 63
    2b74:	9f 4f       	sbci	r25, 0xFF	; 255
    2b76:	09 95       	icall
    2b78:	f1 01       	movw	r30, r2
    2b7a:	20 81       	ld	r18, Z
    2b7c:	a7 01       	movw	r20, r14
    2b7e:	be 01       	movw	r22, r28
    2b80:	6f 53       	subi	r22, 0x3F	; 63
    2b82:	7f 4f       	sbci	r23, 0xFF	; 255
    2b84:	cf 51       	subi	r28, 0x1F	; 31
    2b86:	df 4f       	sbci	r29, 0xFF	; 255
    2b88:	88 81       	ld	r24, Y
    2b8a:	99 81       	ldd	r25, Y+1	; 0x01
    2b8c:	c1 5e       	subi	r28, 0xE1	; 225
    2b8e:	d0 40       	sbci	r29, 0x00	; 0
    2b90:	0e 94 0d 07 	call	0xe1a	; 0xe1a <uECC_vli_mult>
    2b94:	d4 01       	movw	r26, r8
    2b96:	ed 91       	ld	r30, X+
    2b98:	fc 91       	ld	r31, X
    2b9a:	cf 51       	subi	r28, 0x1F	; 31
    2b9c:	df 4f       	sbci	r29, 0xFF	; 255
    2b9e:	68 81       	ld	r22, Y
    2ba0:	79 81       	ldd	r23, Y+1	; 0x01
    2ba2:	c1 5e       	subi	r28, 0xE1	; 225
    2ba4:	d0 40       	sbci	r29, 0x00	; 0
    2ba6:	ce 01       	movw	r24, r28
    2ba8:	8f 53       	subi	r24, 0x3F	; 63
    2baa:	9f 4f       	sbci	r25, 0xFF	; 255
    2bac:	09 95       	icall
    2bae:	81 01       	movw	r16, r2
    2bb0:	96 01       	movw	r18, r12
    2bb2:	a7 01       	movw	r20, r14
    2bb4:	b3 01       	movw	r22, r6
    2bb6:	c2 01       	movw	r24, r4
    2bb8:	a2 d8       	rcall	.-3772   	; 0x1cfe <XYcZ_add>
    2bba:	91 01       	movw	r18, r2
    2bbc:	ae 01       	movw	r20, r28
    2bbe:	4f 53       	subi	r20, 0x3F	; 63
    2bc0:	5f 4f       	sbci	r21, 0xFF	; 255
    2bc2:	be 01       	movw	r22, r28
    2bc4:	6f 5b       	subi	r22, 0xBF	; 191
    2bc6:	7f 4f       	sbci	r23, 0xFF	; 255
    2bc8:	ce 01       	movw	r24, r28
    2bca:	8f 57       	subi	r24, 0x7F	; 127
    2bcc:	9f 4f       	sbci	r25, 0xFF	; 255
    2bce:	21 d8       	rcall	.-4030   	; 0x1c12 <apply_z>
    2bd0:	cb 51       	subi	r28, 0x1B	; 27
    2bd2:	df 4f       	sbci	r29, 0xFF	; 255
    2bd4:	48 81       	ld	r20, Y
    2bd6:	c5 5e       	subi	r28, 0xE5	; 229
    2bd8:	d0 40       	sbci	r29, 0x00	; 0
    2bda:	be 01       	movw	r22, r28
    2bdc:	6f 57       	subi	r22, 0x7F	; 127
    2bde:	7f 4f       	sbci	r23, 0xFF	; 255
    2be0:	c2 51       	subi	r28, 0x12	; 18
    2be2:	df 4f       	sbci	r29, 0xFF	; 255
    2be4:	88 81       	ld	r24, Y
    2be6:	99 81       	ldd	r25, Y+1	; 0x01
    2be8:	ce 5e       	subi	r28, 0xEE	; 238
    2bea:	d0 40       	sbci	r29, 0x00	; 0
    2bec:	0e 94 af 04 	call	0x95e	; 0x95e <uECC_vli_set>
    2bf0:	cb 51       	subi	r28, 0x1B	; 27
    2bf2:	df 4f       	sbci	r29, 0xFF	; 255
    2bf4:	48 81       	ld	r20, Y
    2bf6:	c5 5e       	subi	r28, 0xE5	; 229
    2bf8:	d0 40       	sbci	r29, 0x00	; 0
    2bfa:	be 01       	movw	r22, r28
    2bfc:	6f 5b       	subi	r22, 0xBF	; 191
    2bfe:	7f 4f       	sbci	r23, 0xFF	; 255
    2c00:	c2 51       	subi	r28, 0x12	; 18
    2c02:	df 4f       	sbci	r29, 0xFF	; 255
    2c04:	88 81       	ld	r24, Y
    2c06:	99 81       	ldd	r25, Y+1	; 0x01
    2c08:	ce 5e       	subi	r28, 0xEE	; 238
    2c0a:	d0 40       	sbci	r29, 0x00	; 0
    2c0c:	c6 51       	subi	r28, 0x16	; 22
    2c0e:	df 4f       	sbci	r29, 0xFF	; 255
    2c10:	e8 81       	ld	r30, Y
    2c12:	f9 81       	ldd	r31, Y+1	; 0x01
    2c14:	ca 5e       	subi	r28, 0xEA	; 234
    2c16:	d0 40       	sbci	r29, 0x00	; 0
    2c18:	8e 0f       	add	r24, r30
    2c1a:	9f 1f       	adc	r25, r31
    2c1c:	0e 94 af 04 	call	0x95e	; 0x95e <uECC_vli_set>
    2c20:	c1 51       	subi	r28, 0x11	; 17
    2c22:	df 4f       	sbci	r29, 0xFF	; 255
    2c24:	0f b6       	in	r0, 0x3f	; 63
    2c26:	f8 94       	cli
    2c28:	de bf       	out	0x3e, r29	; 62
    2c2a:	0f be       	out	0x3f, r0	; 63
    2c2c:	cd bf       	out	0x3d, r28	; 61
    2c2e:	df 91       	pop	r29
    2c30:	cf 91       	pop	r28
    2c32:	1f 91       	pop	r17
    2c34:	0f 91       	pop	r16
    2c36:	ff 90       	pop	r15
    2c38:	ef 90       	pop	r14
    2c3a:	df 90       	pop	r13
    2c3c:	cf 90       	pop	r12
    2c3e:	bf 90       	pop	r11
    2c40:	af 90       	pop	r10
    2c42:	9f 90       	pop	r9
    2c44:	8f 90       	pop	r8
    2c46:	7f 90       	pop	r7
    2c48:	6f 90       	pop	r6
    2c4a:	5f 90       	pop	r5
    2c4c:	4f 90       	pop	r4
    2c4e:	3f 90       	pop	r3
    2c50:	2f 90       	pop	r2
    2c52:	08 95       	ret
    2c54:	6b 2d       	mov	r22, r11
    2c56:	9e 01       	movw	r18, r28
    2c58:	2f 5f       	subi	r18, 0xFF	; 255
    2c5a:	3f 4f       	sbci	r19, 0xFF	; 255
    2c5c:	cf 51       	subi	r28, 0x1F	; 31
    2c5e:	df 4f       	sbci	r29, 0xFF	; 255
    2c60:	39 83       	std	Y+1, r19	; 0x01
    2c62:	28 83       	st	Y, r18
    2c64:	c1 5e       	subi	r28, 0xE1	; 225
    2c66:	d0 40       	sbci	r29, 0x00	; 0
    2c68:	c9 01       	movw	r24, r18
    2c6a:	0e 94 88 04 	call	0x910	; 0x910 <uECC_vli_clear>
    2c6e:	81 e0       	ldi	r24, 0x01	; 1
    2c70:	89 83       	std	Y+1, r24	; 0x01
    2c72:	01 ce       	rjmp	.-1022   	; 0x2876 <EccPoint_mult+0xf4>

00002c74 <uECC_sign_with_k>:
    2c74:	2f 92       	push	r2
    2c76:	3f 92       	push	r3
    2c78:	4f 92       	push	r4
    2c7a:	5f 92       	push	r5
    2c7c:	6f 92       	push	r6
    2c7e:	7f 92       	push	r7
    2c80:	8f 92       	push	r8
    2c82:	9f 92       	push	r9
    2c84:	af 92       	push	r10
    2c86:	bf 92       	push	r11
    2c88:	df 92       	push	r13
    2c8a:	ef 92       	push	r14
    2c8c:	ff 92       	push	r15
    2c8e:	0f 93       	push	r16
    2c90:	1f 93       	push	r17
    2c92:	cf 93       	push	r28
    2c94:	df 93       	push	r29
    2c96:	cd b7       	in	r28, 0x3d	; 61
    2c98:	de b7       	in	r29, 0x3e	; 62
    2c9a:	c2 5d       	subi	r28, 0xD2	; 210
    2c9c:	d1 09       	sbc	r29, r1
    2c9e:	0f b6       	in	r0, 0x3f	; 63
    2ca0:	f8 94       	cli
    2ca2:	de bf       	out	0x3e, r29	; 62
    2ca4:	0f be       	out	0x3f, r0	; 63
    2ca6:	cd bf       	out	0x3d, r28	; 61
    2ca8:	5e 01       	movw	r10, r28
    2caa:	e1 ea       	ldi	r30, 0xA1	; 161
    2cac:	ae 0e       	add	r10, r30
    2cae:	b1 1c       	adc	r11, r1
    2cb0:	cf 53       	subi	r28, 0x3F	; 63
    2cb2:	df 4f       	sbci	r29, 0xFF	; 255
    2cb4:	b9 82       	std	Y+1, r11	; 0x01
    2cb6:	a8 82       	st	Y, r10
    2cb8:	c1 5c       	subi	r28, 0xC1	; 193
    2cba:	d0 40       	sbci	r29, 0x00	; 0
    2cbc:	3e 01       	movw	r6, r28
    2cbe:	f1 e8       	ldi	r31, 0x81	; 129
    2cc0:	6f 0e       	add	r6, r31
    2cc2:	71 1c       	adc	r7, r1
    2cc4:	cd 53       	subi	r28, 0x3D	; 61
    2cc6:	df 4f       	sbci	r29, 0xFF	; 255
    2cc8:	79 82       	std	Y+1, r7	; 0x01
    2cca:	68 82       	st	Y, r6
    2ccc:	c3 5c       	subi	r28, 0xC3	; 195
    2cce:	d0 40       	sbci	r29, 0x00	; 0
    2cd0:	f7 01       	movw	r30, r14
    2cd2:	d0 80       	ld	r13, Z
    2cd4:	1d 14       	cp	r1, r13
    2cd6:	9c f4       	brge	.+38     	; 0x2cfe <uECC_sign_with_k+0x8a>
    2cd8:	af ef       	ldi	r26, 0xFF	; 255
    2cda:	ad 0d       	add	r26, r13
    2cdc:	b0 e0       	ldi	r27, 0x00	; 0
    2cde:	2d 01       	movw	r4, r26
    2ce0:	ff ef       	ldi	r31, 0xFF	; 255
    2ce2:	4f 1a       	sub	r4, r31
    2ce4:	5f 0a       	sbc	r5, r31
    2ce6:	d9 01       	movw	r26, r18
    2ce8:	a4 0d       	add	r26, r4
    2cea:	b5 1d       	adc	r27, r5
    2cec:	91 2c       	mov	r9, r1
    2cee:	f9 01       	movw	r30, r18
    2cf0:	81 90       	ld	r8, Z+
    2cf2:	98 28       	or	r9, r8
    2cf4:	ea 17       	cp	r30, r26
    2cf6:	fb 07       	cpc	r31, r27
    2cf8:	d9 f7       	brne	.-10     	; 0x2cf0 <uECC_sign_with_k+0x7c>
    2cfa:	91 10       	cpse	r9, r1
    2cfc:	1b c0       	rjmp	.+54     	; 0x2d34 <uECC_sign_with_k+0xc0>
    2cfe:	80 e0       	ldi	r24, 0x00	; 0
    2d00:	90 e0       	ldi	r25, 0x00	; 0
    2d02:	ce 52       	subi	r28, 0x2E	; 46
    2d04:	df 4f       	sbci	r29, 0xFF	; 255
    2d06:	0f b6       	in	r0, 0x3f	; 63
    2d08:	f8 94       	cli
    2d0a:	de bf       	out	0x3e, r29	; 62
    2d0c:	0f be       	out	0x3f, r0	; 63
    2d0e:	cd bf       	out	0x3d, r28	; 61
    2d10:	df 91       	pop	r29
    2d12:	cf 91       	pop	r28
    2d14:	1f 91       	pop	r17
    2d16:	0f 91       	pop	r16
    2d18:	ff 90       	pop	r15
    2d1a:	ef 90       	pop	r14
    2d1c:	df 90       	pop	r13
    2d1e:	bf 90       	pop	r11
    2d20:	af 90       	pop	r10
    2d22:	9f 90       	pop	r9
    2d24:	8f 90       	pop	r8
    2d26:	7f 90       	pop	r7
    2d28:	6f 90       	pop	r6
    2d2a:	5f 90       	pop	r5
    2d2c:	4f 90       	pop	r4
    2d2e:	3f 90       	pop	r3
    2d30:	2f 90       	pop	r2
    2d32:	08 95       	ret
    2d34:	f7 01       	movw	r30, r14
    2d36:	02 80       	ldd	r0, Z+2	; 0x02
    2d38:	f3 81       	ldd	r31, Z+3	; 0x03
    2d3a:	e0 2d       	mov	r30, r0
    2d3c:	c9 53       	subi	r28, 0x39	; 57
    2d3e:	df 4f       	sbci	r29, 0xFF	; 255
    2d40:	f9 83       	std	Y+1, r31	; 0x01
    2d42:	e8 83       	st	Y, r30
    2d44:	c7 5c       	subi	r28, 0xC7	; 199
    2d46:	d0 40       	sbci	r29, 0x00	; 0
    2d48:	37 96       	adiw	r30, 0x07	; 7
    2d4a:	f7 fd       	sbrc	r31, 7
    2d4c:	d6 c1       	rjmp	.+940    	; 0x30fa <uECC_sign_with_k+0x486>
    2d4e:	17 01       	movw	r2, r14
    2d50:	c5 53       	subi	r28, 0x35	; 53
    2d52:	df 4f       	sbci	r29, 0xFF	; 255
    2d54:	19 83       	std	Y+1, r17	; 0x01
    2d56:	08 83       	st	Y, r16
    2d58:	cb 5c       	subi	r28, 0xCB	; 203
    2d5a:	d0 40       	sbci	r29, 0x00	; 0
    2d5c:	49 01       	movw	r8, r18
    2d5e:	cf 52       	subi	r28, 0x2F	; 47
    2d60:	df 4f       	sbci	r29, 0xFF	; 255
    2d62:	59 83       	std	Y+1, r21	; 0x01
    2d64:	48 83       	st	Y, r20
    2d66:	c1 5d       	subi	r28, 0xD1	; 209
    2d68:	d0 40       	sbci	r29, 0x00	; 0
    2d6a:	c1 53       	subi	r28, 0x31	; 49
    2d6c:	df 4f       	sbci	r29, 0xFF	; 255
    2d6e:	79 83       	std	Y+1, r23	; 0x01
    2d70:	68 83       	st	Y, r22
    2d72:	cf 5c       	subi	r28, 0xCF	; 207
    2d74:	d0 40       	sbci	r29, 0x00	; 0
    2d76:	c3 53       	subi	r28, 0x33	; 51
    2d78:	df 4f       	sbci	r29, 0xFF	; 255
    2d7a:	99 83       	std	Y+1, r25	; 0x01
    2d7c:	88 83       	st	Y, r24
    2d7e:	cd 5c       	subi	r28, 0xCD	; 205
    2d80:	d0 40       	sbci	r29, 0x00	; 0
    2d82:	8f 01       	movw	r16, r30
    2d84:	15 95       	asr	r17
    2d86:	07 95       	ror	r16
    2d88:	15 95       	asr	r17
    2d8a:	07 95       	ror	r16
    2d8c:	15 95       	asr	r17
    2d8e:	07 95       	ror	r16
    2d90:	cb 53       	subi	r28, 0x3B	; 59
    2d92:	df 4f       	sbci	r29, 0xFF	; 255
    2d94:	19 83       	std	Y+1, r17	; 0x01
    2d96:	08 83       	st	Y, r16
    2d98:	c5 5c       	subi	r28, 0xC5	; 197
    2d9a:	d0 40       	sbci	r29, 0x00	; 0
    2d9c:	c7 01       	movw	r24, r14
    2d9e:	84 96       	adiw	r24, 0x24	; 36
    2da0:	c7 53       	subi	r28, 0x37	; 55
    2da2:	df 4f       	sbci	r29, 0xFF	; 255
    2da4:	99 83       	std	Y+1, r25	; 0x01
    2da6:	88 83       	st	Y, r24
    2da8:	c9 5c       	subi	r28, 0xC9	; 201
    2daa:	d0 40       	sbci	r29, 0x00	; 0
    2dac:	cb 53       	subi	r28, 0x3B	; 59
    2dae:	df 4f       	sbci	r29, 0xFF	; 255
    2db0:	48 81       	ld	r20, Y
    2db2:	c5 5c       	subi	r28, 0xC5	; 197
    2db4:	d0 40       	sbci	r29, 0x00	; 0
    2db6:	b9 01       	movw	r22, r18
    2db8:	0e 94 84 07 	call	0xf08	; 0xf08 <uECC_vli_cmp>
    2dbc:	81 30       	cpi	r24, 0x01	; 1
    2dbe:	09 f0       	breq	.+2      	; 0x2dc2 <uECC_sign_with_k+0x14e>
    2dc0:	9e cf       	rjmp	.-196    	; 0x2cfe <uECC_sign_with_k+0x8a>
    2dc2:	97 01       	movw	r18, r14
    2dc4:	a3 01       	movw	r20, r6
    2dc6:	b5 01       	movw	r22, r10
    2dc8:	c4 01       	movw	r24, r8
    2dca:	ad d9       	rcall	.-3238   	; 0x2126 <regularize_k>
    2dcc:	c9 53       	subi	r28, 0x39	; 57
    2dce:	df 4f       	sbci	r29, 0xFF	; 255
    2dd0:	08 81       	ld	r16, Y
    2dd2:	19 81       	ldd	r17, Y+1	; 0x01
    2dd4:	c7 5c       	subi	r28, 0xC7	; 199
    2dd6:	d0 40       	sbci	r29, 0x00	; 0
    2dd8:	0f 5f       	subi	r16, 0xFF	; 255
    2dda:	1f 4f       	sbci	r17, 0xFF	; 255
    2ddc:	21 e0       	ldi	r18, 0x01	; 1
    2dde:	30 e0       	ldi	r19, 0x00	; 0
    2de0:	81 11       	cpse	r24, r1
    2de2:	93 c1       	rjmp	.+806    	; 0x310a <uECC_sign_with_k+0x496>
    2de4:	22 0f       	add	r18, r18
    2de6:	33 1f       	adc	r19, r19
    2de8:	e1 ec       	ldi	r30, 0xC1	; 193
    2dea:	f0 e0       	ldi	r31, 0x00	; 0
    2dec:	ec 0f       	add	r30, r28
    2dee:	fd 1f       	adc	r31, r29
    2df0:	e2 0f       	add	r30, r18
    2df2:	f3 1f       	adc	r31, r19
    2df4:	40 81       	ld	r20, Z
    2df6:	51 81       	ldd	r21, Z+1	; 0x01
    2df8:	71 01       	movw	r14, r2
    2dfa:	20 e0       	ldi	r18, 0x00	; 0
    2dfc:	30 e0       	ldi	r19, 0x00	; 0
    2dfe:	b1 01       	movw	r22, r2
    2e00:	6c 5b       	subi	r22, 0xBC	; 188
    2e02:	7f 4f       	sbci	r23, 0xFF	; 255
    2e04:	ce 01       	movw	r24, r28
    2e06:	8f 5b       	subi	r24, 0xBF	; 191
    2e08:	9f 4f       	sbci	r25, 0xFF	; 255
    2e0a:	bb dc       	rcall	.-1674   	; 0x2782 <EccPoint_mult>
    2e0c:	fe 01       	movw	r30, r28
    2e0e:	ef 5b       	subi	r30, 0xBF	; 191
    2e10:	ff 4f       	sbci	r31, 0xFF	; 255
    2e12:	df 01       	movw	r26, r30
    2e14:	a4 0d       	add	r26, r4
    2e16:	b5 1d       	adc	r27, r5
    2e18:	80 e0       	ldi	r24, 0x00	; 0
    2e1a:	91 91       	ld	r25, Z+
    2e1c:	89 2b       	or	r24, r25
    2e1e:	ea 17       	cp	r30, r26
    2e20:	fb 07       	cpc	r31, r27
    2e22:	d9 f7       	brne	.-10     	; 0x2e1a <uECC_sign_with_k+0x1a6>
    2e24:	88 23       	and	r24, r24
    2e26:	09 f4       	brne	.+2      	; 0x2e2a <uECC_sign_with_k+0x1b6>
    2e28:	6a cf       	rjmp	.-300    	; 0x2cfe <uECC_sign_with_k+0x8a>
    2e2a:	80 91 28 05 	lds	r24, 0x0528	; 0x800528 <g_rng_function>
    2e2e:	90 91 29 05 	lds	r25, 0x0529	; 0x800529 <g_rng_function+0x1>
    2e32:	89 2b       	or	r24, r25
    2e34:	09 f4       	brne	.+2      	; 0x2e38 <uECC_sign_with_k+0x1c4>
    2e36:	6f c1       	rjmp	.+734    	; 0x3116 <uECC_sign_with_k+0x4a2>
    2e38:	cb 53       	subi	r28, 0x3B	; 59
    2e3a:	df 4f       	sbci	r29, 0xFF	; 255
    2e3c:	48 81       	ld	r20, Y
    2e3e:	c5 5c       	subi	r28, 0xC5	; 197
    2e40:	d0 40       	sbci	r29, 0x00	; 0
    2e42:	c7 53       	subi	r28, 0x37	; 55
    2e44:	df 4f       	sbci	r29, 0xFF	; 255
    2e46:	68 81       	ld	r22, Y
    2e48:	79 81       	ldd	r23, Y+1	; 0x01
    2e4a:	c9 5c       	subi	r28, 0xC9	; 201
    2e4c:	d0 40       	sbci	r29, 0x00	; 0
    2e4e:	c5 01       	movw	r24, r10
    2e50:	c9 d9       	rcall	.-3182   	; 0x21e4 <uECC_generate_random_int>
    2e52:	89 2b       	or	r24, r25
    2e54:	09 f4       	brne	.+2      	; 0x2e58 <uECC_sign_with_k+0x1e4>
    2e56:	53 cf       	rjmp	.-346    	; 0x2cfe <uECC_sign_with_k+0x8a>
    2e58:	cb 53       	subi	r28, 0x3B	; 59
    2e5a:	df 4f       	sbci	r29, 0xFF	; 255
    2e5c:	28 81       	ld	r18, Y
    2e5e:	c5 5c       	subi	r28, 0xC5	; 197
    2e60:	d0 40       	sbci	r29, 0x00	; 0
    2e62:	a5 01       	movw	r20, r10
    2e64:	b4 01       	movw	r22, r8
    2e66:	ce 01       	movw	r24, r28
    2e68:	01 96       	adiw	r24, 0x01	; 1
    2e6a:	0e 94 0d 07 	call	0xe1a	; 0xe1a <uECC_vli_mult>
    2e6e:	cb 53       	subi	r28, 0x3B	; 59
    2e70:	df 4f       	sbci	r29, 0xFF	; 255
    2e72:	28 81       	ld	r18, Y
    2e74:	c5 5c       	subi	r28, 0xC5	; 197
    2e76:	d0 40       	sbci	r29, 0x00	; 0
    2e78:	c7 53       	subi	r28, 0x37	; 55
    2e7a:	df 4f       	sbci	r29, 0xFF	; 255
    2e7c:	48 81       	ld	r20, Y
    2e7e:	59 81       	ldd	r21, Y+1	; 0x01
    2e80:	c9 5c       	subi	r28, 0xC9	; 201
    2e82:	d0 40       	sbci	r29, 0x00	; 0
    2e84:	be 01       	movw	r22, r28
    2e86:	6f 5f       	subi	r22, 0xFF	; 255
    2e88:	7f 4f       	sbci	r23, 0xFF	; 255
    2e8a:	c4 01       	movw	r24, r8
    2e8c:	0e 94 09 08 	call	0x1012	; 0x1012 <uECC_vli_mmod>
    2e90:	cb 53       	subi	r28, 0x3B	; 59
    2e92:	df 4f       	sbci	r29, 0xFF	; 255
    2e94:	28 81       	ld	r18, Y
    2e96:	c5 5c       	subi	r28, 0xC5	; 197
    2e98:	d0 40       	sbci	r29, 0x00	; 0
    2e9a:	c7 53       	subi	r28, 0x37	; 55
    2e9c:	df 4f       	sbci	r29, 0xFF	; 255
    2e9e:	48 81       	ld	r20, Y
    2ea0:	59 81       	ldd	r21, Y+1	; 0x01
    2ea2:	c9 5c       	subi	r28, 0xC9	; 201
    2ea4:	d0 40       	sbci	r29, 0x00	; 0
    2ea6:	b4 01       	movw	r22, r8
    2ea8:	c4 01       	movw	r24, r8
    2eaa:	01 db       	rcall	.-2558   	; 0x24ae <uECC_vli_modInv>
    2eac:	cb 53       	subi	r28, 0x3B	; 59
    2eae:	df 4f       	sbci	r29, 0xFF	; 255
    2eb0:	28 81       	ld	r18, Y
    2eb2:	c5 5c       	subi	r28, 0xC5	; 197
    2eb4:	d0 40       	sbci	r29, 0x00	; 0
    2eb6:	a5 01       	movw	r20, r10
    2eb8:	b4 01       	movw	r22, r8
    2eba:	ce 01       	movw	r24, r28
    2ebc:	01 96       	adiw	r24, 0x01	; 1
    2ebe:	0e 94 0d 07 	call	0xe1a	; 0xe1a <uECC_vli_mult>
    2ec2:	cb 53       	subi	r28, 0x3B	; 59
    2ec4:	df 4f       	sbci	r29, 0xFF	; 255
    2ec6:	28 81       	ld	r18, Y
    2ec8:	c5 5c       	subi	r28, 0xC5	; 197
    2eca:	d0 40       	sbci	r29, 0x00	; 0
    2ecc:	c7 53       	subi	r28, 0x37	; 55
    2ece:	df 4f       	sbci	r29, 0xFF	; 255
    2ed0:	48 81       	ld	r20, Y
    2ed2:	59 81       	ldd	r21, Y+1	; 0x01
    2ed4:	c9 5c       	subi	r28, 0xC9	; 201
    2ed6:	d0 40       	sbci	r29, 0x00	; 0
    2ed8:	be 01       	movw	r22, r28
    2eda:	6f 5f       	subi	r22, 0xFF	; 255
    2edc:	7f 4f       	sbci	r23, 0xFF	; 255
    2ede:	c4 01       	movw	r24, r8
    2ee0:	0e 94 09 08 	call	0x1012	; 0x1012 <uECC_vli_mmod>
    2ee4:	f1 01       	movw	r30, r2
    2ee6:	21 81       	ldd	r18, Z+1	; 0x01
    2ee8:	02 2e       	mov	r0, r18
    2eea:	00 0c       	add	r0, r0
    2eec:	33 0b       	sbc	r19, r19
    2eee:	12 16       	cp	r1, r18
    2ef0:	13 06       	cpc	r1, r19
    2ef2:	34 f5       	brge	.+76     	; 0x2f40 <uECC_sign_with_k+0x2cc>
    2ef4:	a9 01       	movw	r20, r18
    2ef6:	41 50       	subi	r20, 0x01	; 1
    2ef8:	51 09       	sbc	r21, r1
    2efa:	e0 e0       	ldi	r30, 0x00	; 0
    2efc:	f0 e0       	ldi	r31, 0x00	; 0
    2efe:	60 e0       	ldi	r22, 0x00	; 0
    2f00:	80 e0       	ldi	r24, 0x00	; 0
    2f02:	90 e0       	ldi	r25, 0x00	; 0
    2f04:	c5 53       	subi	r28, 0x35	; 53
    2f06:	df 4f       	sbci	r29, 0xFF	; 255
    2f08:	a8 81       	ld	r26, Y
    2f0a:	b9 81       	ldd	r27, Y+1	; 0x01
    2f0c:	cb 5c       	subi	r28, 0xCB	; 203
    2f0e:	d0 40       	sbci	r29, 0x00	; 0
    2f10:	8a 0f       	add	r24, r26
    2f12:	9b 1f       	adc	r25, r27
    2f14:	8a 01       	movw	r16, r20
    2f16:	0e 1b       	sub	r16, r30
    2f18:	1f 0b       	sbc	r17, r31
    2f1a:	f8 01       	movw	r30, r16
    2f1c:	01 e4       	ldi	r16, 0x41	; 65
    2f1e:	10 e0       	ldi	r17, 0x00	; 0
    2f20:	0c 0f       	add	r16, r28
    2f22:	1d 1f       	adc	r17, r29
    2f24:	e0 0f       	add	r30, r16
    2f26:	f1 1f       	adc	r31, r17
    2f28:	70 81       	ld	r23, Z
    2f2a:	fc 01       	movw	r30, r24
    2f2c:	70 83       	st	Z, r23
    2f2e:	6f 5f       	subi	r22, 0xFF	; 255
    2f30:	86 2f       	mov	r24, r22
    2f32:	06 2e       	mov	r0, r22
    2f34:	00 0c       	add	r0, r0
    2f36:	99 0b       	sbc	r25, r25
    2f38:	fc 01       	movw	r30, r24
    2f3a:	82 17       	cp	r24, r18
    2f3c:	93 07       	cpc	r25, r19
    2f3e:	44 f3       	brlt	.-48     	; 0x2f10 <uECC_sign_with_k+0x29c>
    2f40:	f1 01       	movw	r30, r2
    2f42:	82 81       	ldd	r24, Z+2	; 0x02
    2f44:	93 81       	ldd	r25, Z+3	; 0x03
    2f46:	9c 01       	movw	r18, r24
    2f48:	29 5f       	subi	r18, 0xF9	; 249
    2f4a:	3f 4f       	sbci	r19, 0xFF	; 255
    2f4c:	37 fd       	sbrc	r19, 7
    2f4e:	e0 c0       	rjmp	.+448    	; 0x3110 <uECC_sign_with_k+0x49c>
    2f50:	35 95       	asr	r19
    2f52:	27 95       	ror	r18
    2f54:	35 95       	asr	r19
    2f56:	27 95       	ror	r18
    2f58:	35 95       	asr	r19
    2f5a:	27 95       	ror	r18
    2f5c:	12 16       	cp	r1, r18
    2f5e:	13 06       	cpc	r1, r19
    2f60:	14 f5       	brge	.+68     	; 0x2fa6 <uECC_sign_with_k+0x332>
    2f62:	a9 01       	movw	r20, r18
    2f64:	41 50       	subi	r20, 0x01	; 1
    2f66:	51 09       	sbc	r21, r1
    2f68:	e0 e0       	ldi	r30, 0x00	; 0
    2f6a:	f0 e0       	ldi	r31, 0x00	; 0
    2f6c:	60 e0       	ldi	r22, 0x00	; 0
    2f6e:	80 e0       	ldi	r24, 0x00	; 0
    2f70:	90 e0       	ldi	r25, 0x00	; 0
    2f72:	c3 53       	subi	r28, 0x33	; 51
    2f74:	df 4f       	sbci	r29, 0xFF	; 255
    2f76:	a8 81       	ld	r26, Y
    2f78:	b9 81       	ldd	r27, Y+1	; 0x01
    2f7a:	cd 5c       	subi	r28, 0xCD	; 205
    2f7c:	d0 40       	sbci	r29, 0x00	; 0
    2f7e:	8a 0d       	add	r24, r10
    2f80:	9b 1d       	adc	r25, r11
    2f82:	8a 01       	movw	r16, r20
    2f84:	0e 1b       	sub	r16, r30
    2f86:	1f 0b       	sbc	r17, r31
    2f88:	f8 01       	movw	r30, r16
    2f8a:	ea 0f       	add	r30, r26
    2f8c:	fb 1f       	adc	r31, r27
    2f8e:	70 81       	ld	r23, Z
    2f90:	fc 01       	movw	r30, r24
    2f92:	70 83       	st	Z, r23
    2f94:	6f 5f       	subi	r22, 0xFF	; 255
    2f96:	86 2f       	mov	r24, r22
    2f98:	06 2e       	mov	r0, r22
    2f9a:	00 0c       	add	r0, r0
    2f9c:	99 0b       	sbc	r25, r25
    2f9e:	fc 01       	movw	r30, r24
    2fa0:	82 17       	cp	r24, r18
    2fa2:	93 07       	cpc	r25, r19
    2fa4:	64 f3       	brlt	.-40     	; 0x2f7e <uECC_sign_with_k+0x30a>
    2fa6:	f3 01       	movw	r30, r6
    2fa8:	cb 53       	subi	r28, 0x3B	; 59
    2faa:	df 4f       	sbci	r29, 0xFF	; 255
    2fac:	08 81       	ld	r16, Y
    2fae:	c5 5c       	subi	r28, 0xC5	; 197
    2fb0:	d0 40       	sbci	r29, 0x00	; 0
    2fb2:	e0 0f       	add	r30, r16
    2fb4:	f1 1d       	adc	r31, r1
    2fb6:	07 fd       	sbrc	r16, 7
    2fb8:	fa 95       	dec	r31
    2fba:	31 97       	sbiw	r30, 0x01	; 1
    2fbc:	10 82       	st	Z, r1
    2fbe:	4d 2d       	mov	r20, r13
    2fc0:	be 01       	movw	r22, r28
    2fc2:	6f 5b       	subi	r22, 0xBF	; 191
    2fc4:	7f 4f       	sbci	r23, 0xFF	; 255
    2fc6:	c3 01       	movw	r24, r6
    2fc8:	0e 94 af 04 	call	0x95e	; 0x95e <uECC_vli_set>
    2fcc:	cb 53       	subi	r28, 0x3B	; 59
    2fce:	df 4f       	sbci	r29, 0xFF	; 255
    2fd0:	28 81       	ld	r18, Y
    2fd2:	c5 5c       	subi	r28, 0xC5	; 197
    2fd4:	d0 40       	sbci	r29, 0x00	; 0
    2fd6:	a3 01       	movw	r20, r6
    2fd8:	b5 01       	movw	r22, r10
    2fda:	ce 01       	movw	r24, r28
    2fdc:	01 96       	adiw	r24, 0x01	; 1
    2fde:	0e 94 0d 07 	call	0xe1a	; 0xe1a <uECC_vli_mult>
    2fe2:	cb 53       	subi	r28, 0x3B	; 59
    2fe4:	df 4f       	sbci	r29, 0xFF	; 255
    2fe6:	28 81       	ld	r18, Y
    2fe8:	c5 5c       	subi	r28, 0xC5	; 197
    2fea:	d0 40       	sbci	r29, 0x00	; 0
    2fec:	c7 53       	subi	r28, 0x37	; 55
    2fee:	df 4f       	sbci	r29, 0xFF	; 255
    2ff0:	48 81       	ld	r20, Y
    2ff2:	59 81       	ldd	r21, Y+1	; 0x01
    2ff4:	c9 5c       	subi	r28, 0xC9	; 201
    2ff6:	d0 40       	sbci	r29, 0x00	; 0
    2ff8:	be 01       	movw	r22, r28
    2ffa:	6f 5f       	subi	r22, 0xFF	; 255
    2ffc:	7f 4f       	sbci	r23, 0xFF	; 255
    2ffe:	c3 01       	movw	r24, r6
    3000:	0e 94 09 08 	call	0x1012	; 0x1012 <uECC_vli_mmod>
    3004:	91 01       	movw	r18, r2
    3006:	cf 52       	subi	r28, 0x2F	; 47
    3008:	df 4f       	sbci	r29, 0xFF	; 255
    300a:	48 81       	ld	r20, Y
    300c:	59 81       	ldd	r21, Y+1	; 0x01
    300e:	c1 5d       	subi	r28, 0xD1	; 209
    3010:	d0 40       	sbci	r29, 0x00	; 0
    3012:	c1 53       	subi	r28, 0x31	; 49
    3014:	df 4f       	sbci	r29, 0xFF	; 255
    3016:	68 81       	ld	r22, Y
    3018:	79 81       	ldd	r23, Y+1	; 0x01
    301a:	cf 5c       	subi	r28, 0xCF	; 207
    301c:	d0 40       	sbci	r29, 0x00	; 0
    301e:	c5 01       	movw	r24, r10
    3020:	59 d9       	rcall	.-3406   	; 0x22d4 <bits2int>
    3022:	cb 53       	subi	r28, 0x3B	; 59
    3024:	df 4f       	sbci	r29, 0xFF	; 255
    3026:	08 81       	ld	r16, Y
    3028:	c5 5c       	subi	r28, 0xC5	; 197
    302a:	d0 40       	sbci	r29, 0x00	; 0
    302c:	c7 53       	subi	r28, 0x37	; 55
    302e:	df 4f       	sbci	r29, 0xFF	; 255
    3030:	28 81       	ld	r18, Y
    3032:	39 81       	ldd	r19, Y+1	; 0x01
    3034:	c9 5c       	subi	r28, 0xC9	; 201
    3036:	d0 40       	sbci	r29, 0x00	; 0
    3038:	a3 01       	movw	r20, r6
    303a:	b5 01       	movw	r22, r10
    303c:	c3 01       	movw	r24, r6
    303e:	0e 94 bc 07 	call	0xf78	; 0xf78 <uECC_vli_modAdd>
    3042:	cb 53       	subi	r28, 0x3B	; 59
    3044:	df 4f       	sbci	r29, 0xFF	; 255
    3046:	28 81       	ld	r18, Y
    3048:	c5 5c       	subi	r28, 0xC5	; 197
    304a:	d0 40       	sbci	r29, 0x00	; 0
    304c:	a4 01       	movw	r20, r8
    304e:	b3 01       	movw	r22, r6
    3050:	ce 01       	movw	r24, r28
    3052:	01 96       	adiw	r24, 0x01	; 1
    3054:	0e 94 0d 07 	call	0xe1a	; 0xe1a <uECC_vli_mult>
    3058:	cb 53       	subi	r28, 0x3B	; 59
    305a:	df 4f       	sbci	r29, 0xFF	; 255
    305c:	28 81       	ld	r18, Y
    305e:	c5 5c       	subi	r28, 0xC5	; 197
    3060:	d0 40       	sbci	r29, 0x00	; 0
    3062:	c7 53       	subi	r28, 0x37	; 55
    3064:	df 4f       	sbci	r29, 0xFF	; 255
    3066:	48 81       	ld	r20, Y
    3068:	59 81       	ldd	r21, Y+1	; 0x01
    306a:	c9 5c       	subi	r28, 0xC9	; 201
    306c:	d0 40       	sbci	r29, 0x00	; 0
    306e:	be 01       	movw	r22, r28
    3070:	6f 5f       	subi	r22, 0xFF	; 255
    3072:	7f 4f       	sbci	r23, 0xFF	; 255
    3074:	c3 01       	movw	r24, r6
    3076:	0e 94 09 08 	call	0x1012	; 0x1012 <uECC_vli_mmod>
    307a:	cb 53       	subi	r28, 0x3B	; 59
    307c:	df 4f       	sbci	r29, 0xFF	; 255
    307e:	68 81       	ld	r22, Y
    3080:	c5 5c       	subi	r28, 0xC5	; 197
    3082:	d0 40       	sbci	r29, 0x00	; 0
    3084:	c3 01       	movw	r24, r6
    3086:	0e 94 49 07 	call	0xe92	; 0xe92 <uECC_vli_numBits>
    308a:	f1 01       	movw	r30, r2
    308c:	61 81       	ldd	r22, Z+1	; 0x01
    308e:	06 2e       	mov	r0, r22
    3090:	00 0c       	add	r0, r0
    3092:	77 0b       	sbc	r23, r23
    3094:	9b 01       	movw	r18, r22
    3096:	22 0f       	add	r18, r18
    3098:	33 1f       	adc	r19, r19
    309a:	22 0f       	add	r18, r18
    309c:	33 1f       	adc	r19, r19
    309e:	22 0f       	add	r18, r18
    30a0:	33 1f       	adc	r19, r19
    30a2:	28 17       	cp	r18, r24
    30a4:	39 07       	cpc	r19, r25
    30a6:	0c f4       	brge	.+2      	; 0x30aa <uECC_sign_with_k+0x436>
    30a8:	2a ce       	rjmp	.-940    	; 0x2cfe <uECC_sign_with_k+0x8a>
    30aa:	16 16       	cp	r1, r22
    30ac:	17 06       	cpc	r1, r23
    30ae:	14 f5       	brge	.+68     	; 0x30f4 <uECC_sign_with_k+0x480>
    30b0:	db 01       	movw	r26, r22
    30b2:	11 97       	sbiw	r26, 0x01	; 1
    30b4:	40 e0       	ldi	r20, 0x00	; 0
    30b6:	50 e0       	ldi	r21, 0x00	; 0
    30b8:	20 e0       	ldi	r18, 0x00	; 0
    30ba:	80 e0       	ldi	r24, 0x00	; 0
    30bc:	90 e0       	ldi	r25, 0x00	; 0
    30be:	c5 53       	subi	r28, 0x35	; 53
    30c0:	df 4f       	sbci	r29, 0xFF	; 255
    30c2:	08 81       	ld	r16, Y
    30c4:	19 81       	ldd	r17, Y+1	; 0x01
    30c6:	cb 5c       	subi	r28, 0xCB	; 203
    30c8:	d0 40       	sbci	r29, 0x00	; 0
    30ca:	06 0f       	add	r16, r22
    30cc:	17 1f       	adc	r17, r23
    30ce:	80 0f       	add	r24, r16
    30d0:	91 1f       	adc	r25, r17
    30d2:	fd 01       	movw	r30, r26
    30d4:	e4 1b       	sub	r30, r20
    30d6:	f5 0b       	sbc	r31, r21
    30d8:	e6 0d       	add	r30, r6
    30da:	f7 1d       	adc	r31, r7
    30dc:	30 81       	ld	r19, Z
    30de:	fc 01       	movw	r30, r24
    30e0:	30 83       	st	Z, r19
    30e2:	2f 5f       	subi	r18, 0xFF	; 255
    30e4:	82 2f       	mov	r24, r18
    30e6:	02 2e       	mov	r0, r18
    30e8:	00 0c       	add	r0, r0
    30ea:	99 0b       	sbc	r25, r25
    30ec:	ac 01       	movw	r20, r24
    30ee:	86 17       	cp	r24, r22
    30f0:	97 07       	cpc	r25, r23
    30f2:	6c f3       	brlt	.-38     	; 0x30ce <uECC_sign_with_k+0x45a>
    30f4:	81 e0       	ldi	r24, 0x01	; 1
    30f6:	90 e0       	ldi	r25, 0x00	; 0
    30f8:	04 ce       	rjmp	.-1016   	; 0x2d02 <uECC_sign_with_k+0x8e>
    30fa:	c9 53       	subi	r28, 0x39	; 57
    30fc:	df 4f       	sbci	r29, 0xFF	; 255
    30fe:	e8 81       	ld	r30, Y
    3100:	f9 81       	ldd	r31, Y+1	; 0x01
    3102:	c7 5c       	subi	r28, 0xC7	; 199
    3104:	d0 40       	sbci	r29, 0x00	; 0
    3106:	3e 96       	adiw	r30, 0x0e	; 14
    3108:	22 ce       	rjmp	.-956    	; 0x2d4e <uECC_sign_with_k+0xda>
    310a:	20 e0       	ldi	r18, 0x00	; 0
    310c:	30 e0       	ldi	r19, 0x00	; 0
    310e:	6a ce       	rjmp	.-812    	; 0x2de4 <uECC_sign_with_k+0x170>
    3110:	29 5f       	subi	r18, 0xF9	; 249
    3112:	3f 4f       	sbci	r19, 0xFF	; 255
    3114:	1d cf       	rjmp	.-454    	; 0x2f50 <uECC_sign_with_k+0x2dc>
    3116:	cb 53       	subi	r28, 0x3B	; 59
    3118:	df 4f       	sbci	r29, 0xFF	; 255
    311a:	68 81       	ld	r22, Y
    311c:	c5 5c       	subi	r28, 0xC5	; 197
    311e:	d0 40       	sbci	r29, 0x00	; 0
    3120:	c5 01       	movw	r24, r10
    3122:	0e 94 88 04 	call	0x910	; 0x910 <uECC_vli_clear>
    3126:	81 e0       	ldi	r24, 0x01	; 1
    3128:	f5 01       	movw	r30, r10
    312a:	80 83       	st	Z, r24
    312c:	95 ce       	rjmp	.-726    	; 0x2e58 <uECC_sign_with_k+0x1e4>

0000312e <uECC_set_rng>:
    312e:	90 93 29 05 	sts	0x0529, r25	; 0x800529 <g_rng_function+0x1>
    3132:	80 93 28 05 	sts	0x0528, r24	; 0x800528 <g_rng_function>
    3136:	08 95       	ret

00003138 <uECC_secp256r1>:
    3138:	8a e0       	ldi	r24, 0x0A	; 10
    313a:	91 e0       	ldi	r25, 0x01	; 1
    313c:	08 95       	ret

0000313e <uECC_shared_secret>:
    313e:	2f 92       	push	r2
    3140:	3f 92       	push	r3
    3142:	4f 92       	push	r4
    3144:	5f 92       	push	r5
    3146:	6f 92       	push	r6
    3148:	7f 92       	push	r7
    314a:	8f 92       	push	r8
    314c:	9f 92       	push	r9
    314e:	af 92       	push	r10
    3150:	bf 92       	push	r11
    3152:	cf 92       	push	r12
    3154:	df 92       	push	r13
    3156:	ef 92       	push	r14
    3158:	ff 92       	push	r15
    315a:	0f 93       	push	r16
    315c:	1f 93       	push	r17
    315e:	cf 93       	push	r28
    3160:	df 93       	push	r29
    3162:	cd b7       	in	r28, 0x3d	; 61
    3164:	de b7       	in	r29, 0x3e	; 62
    3166:	c4 58       	subi	r28, 0x84	; 132
    3168:	d1 09       	sbc	r29, r1
    316a:	0f b6       	in	r0, 0x3f	; 63
    316c:	f8 94       	cli
    316e:	de bf       	out	0x3e, r29	; 62
    3170:	0f be       	out	0x3f, r0	; 63
    3172:	cd bf       	out	0x3d, r28	; 61
    3174:	3a 01       	movw	r6, r20
    3176:	49 01       	movw	r8, r18
    3178:	fe 01       	movw	r30, r28
    317a:	ef 59       	subi	r30, 0x9F	; 159
    317c:	ff 4f       	sbci	r31, 0xFF	; 255
    317e:	cf 57       	subi	r28, 0x7F	; 127
    3180:	df 4f       	sbci	r29, 0xFF	; 255
    3182:	f9 83       	std	Y+1, r31	; 0x01
    3184:	e8 83       	st	Y, r30
    3186:	c1 58       	subi	r28, 0x81	; 129
    3188:	d0 40       	sbci	r29, 0x00	; 0
    318a:	7e 01       	movw	r14, r28
    318c:	21 e4       	ldi	r18, 0x41	; 65
    318e:	e2 0e       	add	r14, r18
    3190:	f1 1c       	adc	r15, r1
    3192:	cd 57       	subi	r28, 0x7D	; 125
    3194:	df 4f       	sbci	r29, 0xFF	; 255
    3196:	f9 82       	std	Y+1, r15	; 0x01
    3198:	e8 82       	st	Y, r14
    319a:	c3 58       	subi	r28, 0x83	; 131
    319c:	d0 40       	sbci	r29, 0x00	; 0
    319e:	d4 01       	movw	r26, r8
    31a0:	0c 91       	ld	r16, X
    31a2:	11 96       	adiw	r26, 0x01	; 1
    31a4:	ac 90       	ld	r10, X
    31a6:	11 97       	sbiw	r26, 0x01	; 1
    31a8:	12 96       	adiw	r26, 0x02	; 2
    31aa:	2d 91       	ld	r18, X+
    31ac:	3c 91       	ld	r19, X
    31ae:	13 97       	sbiw	r26, 0x03	; 3
    31b0:	d9 01       	movw	r26, r18
    31b2:	17 96       	adiw	r26, 0x07	; 7
    31b4:	b7 fd       	sbrc	r27, 7
    31b6:	02 c1       	rjmp	.+516    	; 0x33bc <uECC_shared_secret+0x27e>
    31b8:	1d 01       	movw	r2, r26
    31ba:	35 94       	asr	r3
    31bc:	27 94       	ror	r2
    31be:	35 94       	asr	r3
    31c0:	27 94       	ror	r2
    31c2:	35 94       	asr	r3
    31c4:	27 94       	ror	r2
    31c6:	12 14       	cp	r1, r2
    31c8:	13 04       	cpc	r1, r3
    31ca:	f4 f4       	brge	.+60     	; 0x3208 <uECC_shared_secret+0xca>
    31cc:	61 01       	movw	r12, r2
    31ce:	b1 e0       	ldi	r27, 0x01	; 1
    31d0:	cb 1a       	sub	r12, r27
    31d2:	d1 08       	sbc	r13, r1
    31d4:	40 e0       	ldi	r20, 0x00	; 0
    31d6:	50 e0       	ldi	r21, 0x00	; 0
    31d8:	10 e0       	ldi	r17, 0x00	; 0
    31da:	20 e0       	ldi	r18, 0x00	; 0
    31dc:	30 e0       	ldi	r19, 0x00	; 0
    31de:	2e 0f       	add	r18, r30
    31e0:	3f 1f       	adc	r19, r31
    31e2:	26 01       	movw	r4, r12
    31e4:	44 1a       	sub	r4, r20
    31e6:	55 0a       	sbc	r5, r21
    31e8:	a2 01       	movw	r20, r4
    31ea:	46 0f       	add	r20, r22
    31ec:	57 1f       	adc	r21, r23
    31ee:	da 01       	movw	r26, r20
    31f0:	4c 91       	ld	r20, X
    31f2:	d9 01       	movw	r26, r18
    31f4:	4c 93       	st	X, r20
    31f6:	1f 5f       	subi	r17, 0xFF	; 255
    31f8:	21 2f       	mov	r18, r17
    31fa:	01 2e       	mov	r0, r17
    31fc:	00 0c       	add	r0, r0
    31fe:	33 0b       	sbc	r19, r19
    3200:	a9 01       	movw	r20, r18
    3202:	22 15       	cp	r18, r2
    3204:	33 05       	cpc	r19, r3
    3206:	5c f3       	brlt	.-42     	; 0x31de <uECC_shared_secret+0xa0>
    3208:	0a 2c       	mov	r0, r10
    320a:	00 0c       	add	r0, r0
    320c:	bb 08       	sbc	r11, r11
    320e:	1a 14       	cp	r1, r10
    3210:	1b 04       	cpc	r1, r11
    3212:	e4 f5       	brge	.+120    	; 0x328c <uECC_shared_secret+0x14e>
    3214:	a5 01       	movw	r20, r10
    3216:	41 50       	subi	r20, 0x01	; 1
    3218:	51 09       	sbc	r21, r1
    321a:	60 e0       	ldi	r22, 0x00	; 0
    321c:	70 e0       	ldi	r23, 0x00	; 0
    321e:	10 e0       	ldi	r17, 0x00	; 0
    3220:	20 e0       	ldi	r18, 0x00	; 0
    3222:	30 e0       	ldi	r19, 0x00	; 0
    3224:	de 01       	movw	r26, r28
    3226:	11 96       	adiw	r26, 0x01	; 1
    3228:	6d 01       	movw	r12, r26
    322a:	2c 0d       	add	r18, r12
    322c:	3d 1d       	adc	r19, r13
    322e:	da 01       	movw	r26, r20
    3230:	a6 1b       	sub	r26, r22
    3232:	b7 0b       	sbc	r27, r23
    3234:	a8 0f       	add	r26, r24
    3236:	b9 1f       	adc	r27, r25
    3238:	6c 91       	ld	r22, X
    323a:	d9 01       	movw	r26, r18
    323c:	6c 93       	st	X, r22
    323e:	1f 5f       	subi	r17, 0xFF	; 255
    3240:	21 2f       	mov	r18, r17
    3242:	01 2e       	mov	r0, r17
    3244:	00 0c       	add	r0, r0
    3246:	33 0b       	sbc	r19, r19
    3248:	b9 01       	movw	r22, r18
    324a:	2a 15       	cp	r18, r10
    324c:	3b 05       	cpc	r19, r11
    324e:	6c f3       	brlt	.-38     	; 0x322a <uECC_shared_secret+0xec>
    3250:	60 e0       	ldi	r22, 0x00	; 0
    3252:	70 e0       	ldi	r23, 0x00	; 0
    3254:	10 e0       	ldi	r17, 0x00	; 0
    3256:	20 e0       	ldi	r18, 0x00	; 0
    3258:	30 e0       	ldi	r19, 0x00	; 0
    325a:	8a 0d       	add	r24, r10
    325c:	9b 1d       	adc	r25, r11
    325e:	c0 0e       	add	r12, r16
    3260:	d1 1c       	adc	r13, r1
    3262:	07 fd       	sbrc	r16, 7
    3264:	da 94       	dec	r13
    3266:	2c 0d       	add	r18, r12
    3268:	3d 1d       	adc	r19, r13
    326a:	da 01       	movw	r26, r20
    326c:	a6 1b       	sub	r26, r22
    326e:	b7 0b       	sbc	r27, r23
    3270:	a8 0f       	add	r26, r24
    3272:	b9 1f       	adc	r27, r25
    3274:	6c 91       	ld	r22, X
    3276:	d9 01       	movw	r26, r18
    3278:	6c 93       	st	X, r22
    327a:	1f 5f       	subi	r17, 0xFF	; 255
    327c:	21 2f       	mov	r18, r17
    327e:	01 2e       	mov	r0, r17
    3280:	00 0c       	add	r0, r0
    3282:	33 0b       	sbc	r19, r19
    3284:	b9 01       	movw	r22, r18
    3286:	2a 15       	cp	r18, r10
    3288:	3b 05       	cpc	r19, r11
    328a:	6c f3       	brlt	.-38     	; 0x3266 <uECC_shared_secret+0x128>
    328c:	94 01       	movw	r18, r8
    328e:	a7 01       	movw	r20, r14
    3290:	bf 01       	movw	r22, r30
    3292:	cf 01       	movw	r24, r30
    3294:	0e 94 93 10 	call	0x2126	; 0x2126 <regularize_k>
    3298:	18 2f       	mov	r17, r24
    329a:	80 91 28 05 	lds	r24, 0x0528	; 0x800528 <g_rng_function>
    329e:	90 91 29 05 	lds	r25, 0x0529	; 0x800529 <g_rng_function+0x1>
    32a2:	89 2b       	or	r24, r25
    32a4:	09 f4       	brne	.+2      	; 0x32a8 <uECC_shared_secret+0x16a>
    32a6:	8c c0       	rjmp	.+280    	; 0x33c0 <uECC_shared_secret+0x282>
    32a8:	e1 2f       	mov	r30, r17
    32aa:	f0 e0       	ldi	r31, 0x00	; 0
    32ac:	ee 0f       	add	r30, r30
    32ae:	ff 1f       	adc	r31, r31
    32b0:	61 e8       	ldi	r22, 0x81	; 129
    32b2:	46 2e       	mov	r4, r22
    32b4:	51 2c       	mov	r5, r1
    32b6:	4c 0e       	add	r4, r28
    32b8:	5d 1e       	adc	r5, r29
    32ba:	e4 0d       	add	r30, r4
    32bc:	f5 1d       	adc	r31, r5
    32be:	c0 80       	ld	r12, Z
    32c0:	d1 80       	ldd	r13, Z+1	; 0x01
    32c2:	40 2f       	mov	r20, r16
    32c4:	b4 01       	movw	r22, r8
    32c6:	6c 5f       	subi	r22, 0xFC	; 252
    32c8:	7f 4f       	sbci	r23, 0xFF	; 255
    32ca:	c6 01       	movw	r24, r12
    32cc:	0e 94 f2 10 	call	0x21e4	; 0x21e4 <uECC_generate_random_int>
    32d0:	00 97       	sbiw	r24, 0x00	; 0
    32d2:	09 f4       	brne	.+2      	; 0x32d6 <uECC_shared_secret+0x198>
    32d4:	54 c0       	rjmp	.+168    	; 0x337e <uECC_shared_secret+0x240>
    32d6:	d4 01       	movw	r26, r8
    32d8:	12 96       	adiw	r26, 0x02	; 2
    32da:	2d 91       	ld	r18, X+
    32dc:	3c 91       	ld	r19, X
    32de:	13 97       	sbiw	r26, 0x03	; 3
    32e0:	2f 5f       	subi	r18, 0xFF	; 255
    32e2:	3f 4f       	sbci	r19, 0xFF	; 255
    32e4:	81 e0       	ldi	r24, 0x01	; 1
    32e6:	90 e0       	ldi	r25, 0x00	; 0
    32e8:	11 11       	cpse	r17, r1
    32ea:	63 c0       	rjmp	.+198    	; 0x33b2 <uECC_shared_secret+0x274>
    32ec:	88 0f       	add	r24, r24
    32ee:	99 1f       	adc	r25, r25
    32f0:	e1 e8       	ldi	r30, 0x81	; 129
    32f2:	f0 e0       	ldi	r31, 0x00	; 0
    32f4:	ec 0f       	add	r30, r28
    32f6:	fd 1f       	adc	r31, r29
    32f8:	e8 0f       	add	r30, r24
    32fa:	f9 1f       	adc	r31, r25
    32fc:	40 81       	ld	r20, Z
    32fe:	51 81       	ldd	r21, Z+1	; 0x01
    3300:	74 01       	movw	r14, r8
    3302:	89 01       	movw	r16, r18
    3304:	96 01       	movw	r18, r12
    3306:	fe 01       	movw	r30, r28
    3308:	31 96       	adiw	r30, 0x01	; 1
    330a:	6f 01       	movw	r12, r30
    330c:	bf 01       	movw	r22, r30
    330e:	cf 01       	movw	r24, r30
    3310:	38 da       	rcall	.-2960   	; 0x2782 <EccPoint_mult>
    3312:	1a 14       	cp	r1, r10
    3314:	1b 04       	cpc	r1, r11
    3316:	dc f4       	brge	.+54     	; 0x334e <uECC_shared_secret+0x210>
    3318:	a5 01       	movw	r20, r10
    331a:	41 50       	subi	r20, 0x01	; 1
    331c:	51 09       	sbc	r21, r1
    331e:	60 e0       	ldi	r22, 0x00	; 0
    3320:	70 e0       	ldi	r23, 0x00	; 0
    3322:	20 e0       	ldi	r18, 0x00	; 0
    3324:	80 e0       	ldi	r24, 0x00	; 0
    3326:	90 e0       	ldi	r25, 0x00	; 0
    3328:	d3 01       	movw	r26, r6
    332a:	a8 0f       	add	r26, r24
    332c:	b9 1f       	adc	r27, r25
    332e:	fa 01       	movw	r30, r20
    3330:	e6 1b       	sub	r30, r22
    3332:	f7 0b       	sbc	r31, r23
    3334:	ec 0d       	add	r30, r12
    3336:	fd 1d       	adc	r31, r13
    3338:	30 81       	ld	r19, Z
    333a:	3c 93       	st	X, r19
    333c:	2f 5f       	subi	r18, 0xFF	; 255
    333e:	82 2f       	mov	r24, r18
    3340:	02 2e       	mov	r0, r18
    3342:	00 0c       	add	r0, r0
    3344:	99 0b       	sbc	r25, r25
    3346:	bc 01       	movw	r22, r24
    3348:	8a 15       	cp	r24, r10
    334a:	9b 05       	cpc	r25, r11
    334c:	6c f3       	brlt	.-38     	; 0x3328 <uECC_shared_secret+0x1ea>
    334e:	d4 01       	movw	r26, r8
    3350:	2c 91       	ld	r18, X
    3352:	22 0f       	add	r18, r18
    3354:	12 16       	cp	r1, r18
    3356:	bc f5       	brge	.+110    	; 0x33c6 <uECC_shared_secret+0x288>
    3358:	f6 01       	movw	r30, r12
    335a:	21 50       	subi	r18, 0x01	; 1
    335c:	30 e0       	ldi	r19, 0x00	; 0
    335e:	2f 5f       	subi	r18, 0xFF	; 255
    3360:	3f 4f       	sbci	r19, 0xFF	; 255
    3362:	2c 0d       	add	r18, r12
    3364:	3d 1d       	adc	r19, r13
    3366:	80 e0       	ldi	r24, 0x00	; 0
    3368:	91 91       	ld	r25, Z+
    336a:	89 2b       	or	r24, r25
    336c:	e2 17       	cp	r30, r18
    336e:	f3 07       	cpc	r31, r19
    3370:	d9 f7       	brne	.-10     	; 0x3368 <uECC_shared_secret+0x22a>
    3372:	31 e0       	ldi	r19, 0x01	; 1
    3374:	20 e0       	ldi	r18, 0x00	; 0
    3376:	88 23       	and	r24, r24
    3378:	f9 f0       	breq	.+62     	; 0x33b8 <uECC_shared_secret+0x27a>
    337a:	83 2f       	mov	r24, r19
    337c:	92 2f       	mov	r25, r18
    337e:	cc 57       	subi	r28, 0x7C	; 124
    3380:	df 4f       	sbci	r29, 0xFF	; 255
    3382:	0f b6       	in	r0, 0x3f	; 63
    3384:	f8 94       	cli
    3386:	de bf       	out	0x3e, r29	; 62
    3388:	0f be       	out	0x3f, r0	; 63
    338a:	cd bf       	out	0x3d, r28	; 61
    338c:	df 91       	pop	r29
    338e:	cf 91       	pop	r28
    3390:	1f 91       	pop	r17
    3392:	0f 91       	pop	r16
    3394:	ff 90       	pop	r15
    3396:	ef 90       	pop	r14
    3398:	df 90       	pop	r13
    339a:	cf 90       	pop	r12
    339c:	bf 90       	pop	r11
    339e:	af 90       	pop	r10
    33a0:	9f 90       	pop	r9
    33a2:	8f 90       	pop	r8
    33a4:	7f 90       	pop	r7
    33a6:	6f 90       	pop	r6
    33a8:	5f 90       	pop	r5
    33aa:	4f 90       	pop	r4
    33ac:	3f 90       	pop	r3
    33ae:	2f 90       	pop	r2
    33b0:	08 95       	ret
    33b2:	80 e0       	ldi	r24, 0x00	; 0
    33b4:	90 e0       	ldi	r25, 0x00	; 0
    33b6:	9a cf       	rjmp	.-204    	; 0x32ec <uECC_shared_secret+0x1ae>
    33b8:	30 e0       	ldi	r19, 0x00	; 0
    33ba:	df cf       	rjmp	.-66     	; 0x337a <uECC_shared_secret+0x23c>
    33bc:	17 96       	adiw	r26, 0x07	; 7
    33be:	fc ce       	rjmp	.-520    	; 0x31b8 <uECC_shared_secret+0x7a>
    33c0:	c1 2c       	mov	r12, r1
    33c2:	d1 2c       	mov	r13, r1
    33c4:	88 cf       	rjmp	.-240    	; 0x32d6 <uECC_shared_secret+0x198>
    33c6:	80 e0       	ldi	r24, 0x00	; 0
    33c8:	90 e0       	ldi	r25, 0x00	; 0
    33ca:	d9 cf       	rjmp	.-78     	; 0x337e <uECC_shared_secret+0x240>

000033cc <uECC_sign>:

int uECC_sign(const uint8_t *private_key,
              const uint8_t *message_hash,
              unsigned hash_size,
              uint8_t *signature,
              uECC_Curve curve) {
    33cc:	3f 92       	push	r3
    33ce:	4f 92       	push	r4
    33d0:	5f 92       	push	r5
    33d2:	6f 92       	push	r6
    33d4:	7f 92       	push	r7
    33d6:	8f 92       	push	r8
    33d8:	9f 92       	push	r9
    33da:	af 92       	push	r10
    33dc:	bf 92       	push	r11
    33de:	cf 92       	push	r12
    33e0:	df 92       	push	r13
    33e2:	ef 92       	push	r14
    33e4:	ff 92       	push	r15
    33e6:	0f 93       	push	r16
    33e8:	1f 93       	push	r17
    33ea:	cf 93       	push	r28
    33ec:	df 93       	push	r29
    33ee:	cd b7       	in	r28, 0x3d	; 61
    33f0:	de b7       	in	r29, 0x3e	; 62
    33f2:	a2 97       	sbiw	r28, 0x22	; 34
    33f4:	0f b6       	in	r0, 0x3f	; 63
    33f6:	f8 94       	cli
    33f8:	de bf       	out	0x3e, r29	; 62
    33fa:	0f be       	out	0x3f, r0	; 63
    33fc:	cd bf       	out	0x3d, r28	; 61
    33fe:	3c 01       	movw	r6, r24
    3400:	4b 01       	movw	r8, r22
    3402:	5a a3       	std	Y+34, r21	; 0x22
    3404:	49 a3       	std	Y+33, r20	; 0x21
    3406:	29 01       	movw	r4, r18
    3408:	68 01       	movw	r12, r16
    340a:	58 01       	movw	r10, r16
    340c:	84 e2       	ldi	r24, 0x24	; 36
    340e:	a8 0e       	add	r10, r24
    3410:	b1 1c       	adc	r11, r1
    3412:	90 e4       	ldi	r25, 0x40	; 64
    3414:	39 2e       	mov	r3, r25
    3416:	1c c0       	rjmp	.+56     	; 0x3450 <uECC_sign+0x84>
    uECC_word_t k[uECC_MAX_WORDS];
    uECC_word_t tries;

    for (tries = 0; tries < uECC_RNG_MAX_TRIES; ++tries) {
        if (!uECC_generate_random_int(k, curve->n, BITS_TO_WORDS(curve->num_n_bits))) {
    3418:	55 95       	asr	r21
    341a:	47 95       	ror	r20
    341c:	55 95       	asr	r21
    341e:	47 95       	ror	r20
    3420:	55 95       	asr	r21
    3422:	47 95       	ror	r20
    3424:	b5 01       	movw	r22, r10
    3426:	ce 01       	movw	r24, r28
    3428:	01 96       	adiw	r24, 0x01	; 1
    342a:	0e 94 f2 10 	call	0x21e4	; 0x21e4 <uECC_generate_random_int>
    342e:	89 2b       	or	r24, r25
    3430:	d1 f0       	breq	.+52     	; 0x3466 <uECC_sign+0x9a>
            return 0;
        }

        if (uECC_sign_with_k(private_key, message_hash, hash_size, k, signature, curve)) {
    3432:	76 01       	movw	r14, r12
    3434:	82 01       	movw	r16, r4
    3436:	9e 01       	movw	r18, r28
    3438:	2f 5f       	subi	r18, 0xFF	; 255
    343a:	3f 4f       	sbci	r19, 0xFF	; 255
    343c:	49 a1       	ldd	r20, Y+33	; 0x21
    343e:	5a a1       	ldd	r21, Y+34	; 0x22
    3440:	b4 01       	movw	r22, r8
    3442:	c3 01       	movw	r24, r6
    3444:	17 dc       	rcall	.-2002   	; 0x2c74 <uECC_sign_with_k>
    3446:	89 2b       	or	r24, r25
    3448:	41 f5       	brne	.+80     	; 0x349a <uECC_sign+0xce>
    344a:	3a 94       	dec	r3
              uint8_t *signature,
              uECC_Curve curve) {
    uECC_word_t k[uECC_MAX_WORDS];
    uECC_word_t tries;

    for (tries = 0; tries < uECC_RNG_MAX_TRIES; ++tries) {
    344c:	33 20       	and	r3, r3
    344e:	59 f0       	breq	.+22     	; 0x3466 <uECC_sign+0x9a>
        if (!uECC_generate_random_int(k, curve->n, BITS_TO_WORDS(curve->num_n_bits))) {
    3450:	f6 01       	movw	r30, r12
    3452:	82 81       	ldd	r24, Z+2	; 0x02
    3454:	93 81       	ldd	r25, Z+3	; 0x03
    3456:	ac 01       	movw	r20, r24
    3458:	49 5f       	subi	r20, 0xF9	; 249
    345a:	5f 4f       	sbci	r21, 0xFF	; 255
    345c:	57 ff       	sbrs	r21, 7
    345e:	dc cf       	rjmp	.-72     	; 0x3418 <uECC_sign+0x4c>
    3460:	49 5f       	subi	r20, 0xF9	; 249
    3462:	5f 4f       	sbci	r21, 0xFF	; 255
    3464:	d9 cf       	rjmp	.-78     	; 0x3418 <uECC_sign+0x4c>
            return 0;
    3466:	80 e0       	ldi	r24, 0x00	; 0
    3468:	90 e0       	ldi	r25, 0x00	; 0
        if (uECC_sign_with_k(private_key, message_hash, hash_size, k, signature, curve)) {
            return 1;
        }
    }
    return 0;
}
    346a:	a2 96       	adiw	r28, 0x22	; 34
    346c:	0f b6       	in	r0, 0x3f	; 63
    346e:	f8 94       	cli
    3470:	de bf       	out	0x3e, r29	; 62
    3472:	0f be       	out	0x3f, r0	; 63
    3474:	cd bf       	out	0x3d, r28	; 61
    3476:	df 91       	pop	r29
    3478:	cf 91       	pop	r28
    347a:	1f 91       	pop	r17
    347c:	0f 91       	pop	r16
    347e:	ff 90       	pop	r15
    3480:	ef 90       	pop	r14
    3482:	df 90       	pop	r13
    3484:	cf 90       	pop	r12
    3486:	bf 90       	pop	r11
    3488:	af 90       	pop	r10
    348a:	9f 90       	pop	r9
    348c:	8f 90       	pop	r8
    348e:	7f 90       	pop	r7
    3490:	6f 90       	pop	r6
    3492:	5f 90       	pop	r5
    3494:	4f 90       	pop	r4
    3496:	3f 90       	pop	r3
    3498:	08 95       	ret
        if (!uECC_generate_random_int(k, curve->n, BITS_TO_WORDS(curve->num_n_bits))) {
            return 0;
        }

        if (uECC_sign_with_k(private_key, message_hash, hash_size, k, signature, curve)) {
            return 1;
    349a:	81 e0       	ldi	r24, 0x01	; 1
    349c:	90 e0       	ldi	r25, 0x00	; 0
    349e:	e5 cf       	rjmp	.-54     	; 0x346a <uECC_sign+0x9e>

000034a0 <hex_to_bytes>:
		*dest++ = table[c >> 4];
		*dest++ = table[c & 0x0f];
	}
}

void hex_to_bytes(char *src, uint8_t strlen, uint8_t dest[strlen/2]) {
    34a0:	ff 92       	push	r15
    34a2:	0f 93       	push	r16
    34a4:	1f 93       	push	r17
    34a6:	cf 93       	push	r28
    34a8:	df 93       	push	r29
    34aa:	f8 2e       	mov	r15, r24
    34ac:	09 2f       	mov	r16, r25
    34ae:	16 2f       	mov	r17, r22
    34b0:	ea 01       	movw	r28, r20
	memset(dest, 0, strlen/2);
    34b2:	46 2f       	mov	r20, r22
    34b4:	46 95       	lsr	r20
    34b6:	50 e0       	ldi	r21, 0x00	; 0
    34b8:	60 e0       	ldi	r22, 0x00	; 0
    34ba:	70 e0       	ldi	r23, 0x00	; 0
    34bc:	ce 01       	movw	r24, r28
    34be:	0e 94 37 35 	call	0x6a6e	; 0x6a6e <memset>
	uint8_t index = 0;
	while (index < strlen) {
    34c2:	11 23       	and	r17, r17
    34c4:	09 f4       	brne	.+2      	; 0x34c8 <hex_to_bytes+0x28>
    34c6:	4b c0       	rjmp	.+150    	; 0x355e <hex_to_bytes+0xbe>
    34c8:	ef 2d       	mov	r30, r15
    34ca:	f0 2f       	mov	r31, r16
    34cc:	20 e0       	ldi	r18, 0x00	; 0
    34ce:	30 e0       	ldi	r19, 0x00	; 0
    34d0:	17 c0       	rjmp	.+46     	; 0x3500 <hex_to_bytes+0x60>
    34d2:	90 e0       	ldi	r25, 0x00	; 0
    34d4:	c0 97       	sbiw	r24, 0x30	; 48
    34d6:	b9 01       	movw	r22, r18
    34d8:	61 70       	andi	r22, 0x01	; 1
    34da:	77 27       	eor	r23, r23
    34dc:	66 0f       	add	r22, r22
    34de:	77 1f       	adc	r23, r23
    34e0:	66 0f       	add	r22, r22
    34e2:	77 1f       	adc	r23, r23
    34e4:	01 c0       	rjmp	.+2      	; 0x34e8 <hex_to_bytes+0x48>
    34e6:	88 0f       	add	r24, r24
    34e8:	6a 95       	dec	r22
    34ea:	ea f7       	brpl	.-6      	; 0x34e6 <hex_to_bytes+0x46>
		else if (c >= 'A' && c <= 'F')
		value = (10 + (c - 'A'));
		else if (c >= 'a' && c <= 'f')
		value = (10 + (c - 'a'));

		dest[(index/2)] += value << (((index + 1) % 2) * 4);
    34ec:	94 2f       	mov	r25, r20
    34ee:	96 95       	lsr	r25
    34f0:	de 01       	movw	r26, r28
    34f2:	a9 0f       	add	r26, r25
    34f4:	b1 1d       	adc	r27, r1
    34f6:	9c 91       	ld	r25, X
    34f8:	89 0f       	add	r24, r25
    34fa:	8c 93       	st	X, r24
}

void hex_to_bytes(char *src, uint8_t strlen, uint8_t dest[strlen/2]) {
	memset(dest, 0, strlen/2);
	uint8_t index = 0;
	while (index < strlen) {
    34fc:	21 17       	cp	r18, r17
    34fe:	78 f5       	brcc	.+94     	; 0x355e <hex_to_bytes+0xbe>
    3500:	42 2f       	mov	r20, r18
		char c = src[index];
    3502:	81 91       	ld	r24, Z+
    3504:	2f 5f       	subi	r18, 0xFF	; 255
    3506:	3f 4f       	sbci	r19, 0xFF	; 255
		int value = 0;
		if(c >= '0' && c <= '9')
    3508:	90 ed       	ldi	r25, 0xD0	; 208
    350a:	98 0f       	add	r25, r24
    350c:	9a 30       	cpi	r25, 0x0A	; 10
    350e:	08 f3       	brcs	.-62     	; 0x34d2 <hex_to_bytes+0x32>
		value = (c - '0');
		else if (c >= 'A' && c <= 'F')
    3510:	9f eb       	ldi	r25, 0xBF	; 191
    3512:	98 0f       	add	r25, r24
    3514:	96 30       	cpi	r25, 0x06	; 6
    3516:	70 f4       	brcc	.+28     	; 0x3534 <hex_to_bytes+0x94>
    3518:	90 e0       	ldi	r25, 0x00	; 0
    351a:	c7 97       	sbiw	r24, 0x37	; 55
    351c:	b9 01       	movw	r22, r18
    351e:	61 70       	andi	r22, 0x01	; 1
    3520:	77 27       	eor	r23, r23
    3522:	66 0f       	add	r22, r22
    3524:	77 1f       	adc	r23, r23
    3526:	66 0f       	add	r22, r22
    3528:	77 1f       	adc	r23, r23
    352a:	01 c0       	rjmp	.+2      	; 0x352e <hex_to_bytes+0x8e>
    352c:	88 0f       	add	r24, r24
    352e:	6a 95       	dec	r22
    3530:	ea f7       	brpl	.-6      	; 0x352c <hex_to_bytes+0x8c>
    3532:	dc cf       	rjmp	.-72     	; 0x34ec <hex_to_bytes+0x4c>
		value = (10 + (c - 'A'));
		else if (c >= 'a' && c <= 'f')
    3534:	9f e9       	ldi	r25, 0x9F	; 159
    3536:	98 0f       	add	r25, r24
    3538:	96 30       	cpi	r25, 0x06	; 6
    353a:	78 f4       	brcc	.+30     	; 0x355a <hex_to_bytes+0xba>
    353c:	90 e0       	ldi	r25, 0x00	; 0
    353e:	87 55       	subi	r24, 0x57	; 87
    3540:	91 09       	sbc	r25, r1
    3542:	b9 01       	movw	r22, r18
    3544:	61 70       	andi	r22, 0x01	; 1
    3546:	77 27       	eor	r23, r23
    3548:	66 0f       	add	r22, r22
    354a:	77 1f       	adc	r23, r23
    354c:	66 0f       	add	r22, r22
    354e:	77 1f       	adc	r23, r23
    3550:	01 c0       	rjmp	.+2      	; 0x3554 <hex_to_bytes+0xb4>
    3552:	88 0f       	add	r24, r24
    3554:	6a 95       	dec	r22
    3556:	ea f7       	brpl	.-6      	; 0x3552 <hex_to_bytes+0xb2>
    3558:	c9 cf       	rjmp	.-110    	; 0x34ec <hex_to_bytes+0x4c>
    355a:	80 e0       	ldi	r24, 0x00	; 0
    355c:	c7 cf       	rjmp	.-114    	; 0x34ec <hex_to_bytes+0x4c>

		dest[(index/2)] += value << (((index + 1) % 2) * 4);

		index++;
	}
}
    355e:	df 91       	pop	r29
    3560:	cf 91       	pop	r28
    3562:	1f 91       	pop	r17
    3564:	0f 91       	pop	r16
    3566:	ff 90       	pop	r15
    3568:	08 95       	ret

0000356a <isotp_user_debug>:
#include "../uart_f.h"
#include "../can.h"

/* user implemented, print debug message */
void isotp_user_debug(const char* message){
	uart_puts(message);
    356a:	0c 94 01 34 	jmp	0x6802	; 0x6802 <uart_puts>

0000356e <isotp_user_send_can>:
}

/* user implemented, send can message */
int  isotp_user_send_can(const uint32_t arbitration_id, const uint8_t* data, const uint8_t size){
    356e:	cf 93       	push	r28
    3570:	df 93       	push	r29
    3572:	00 d0       	rcall	.+0      	; 0x3574 <isotp_user_send_can+0x6>
    3574:	00 d0       	rcall	.+0      	; 0x3576 <isotp_user_send_can+0x8>
    3576:	00 d0       	rcall	.+0      	; 0x3578 <isotp_user_send_can+0xa>
    3578:	cd b7       	in	r28, 0x3d	; 61
    357a:	de b7       	in	r29, 0x3e	; 62
    357c:	6b 83       	std	Y+3, r22	; 0x03
    357e:	7c 83       	std	Y+4, r23	; 0x04
    3580:	8d 83       	std	Y+5, r24	; 0x05
    3582:	9e 83       	std	Y+6, r25	; 0x06
	can_msg_t message;
	can_id_t id;
	memcpy(id,&arbitration_id,2);
    3584:	7a 83       	std	Y+2, r23	; 0x02
    3586:	69 83       	std	Y+1, r22	; 0x01
	can_send_message(0, id, data, size);
    3588:	be 01       	movw	r22, r28
    358a:	6f 5f       	subi	r22, 0xFF	; 255
    358c:	7f 4f       	sbci	r23, 0xFF	; 255
    358e:	80 e0       	ldi	r24, 0x00	; 0
    3590:	0e 94 a9 02 	call	0x552	; 0x552 <can_send_message>
	uart_puts("message sent");
    3594:	86 eb       	ldi	r24, 0xB6	; 182
    3596:	91 e0       	ldi	r25, 0x01	; 1
    3598:	0e 94 01 34 	call	0x6802	; 0x6802 <uart_puts>
	return 0;
}
    359c:	80 e0       	ldi	r24, 0x00	; 0
    359e:	90 e0       	ldi	r25, 0x00	; 0
    35a0:	26 96       	adiw	r28, 0x06	; 6
    35a2:	0f b6       	in	r0, 0x3f	; 63
    35a4:	f8 94       	cli
    35a6:	de bf       	out	0x3e, r29	; 62
    35a8:	0f be       	out	0x3f, r0	; 63
    35aa:	cd bf       	out	0x3d, r28	; 61
    35ac:	df 91       	pop	r29
    35ae:	cf 91       	pop	r28
    35b0:	08 95       	ret

000035b2 <isotp_user_get_ms>:

/* user implemented, get millisecond */
uint32_t isotp_user_get_ms(void){
	return millis();
    35b2:	0c 94 77 04 	jmp	0x8ee	; 0x8ee <millis>

000035b6 <isotp_send_flow_control.isra.3.constprop.5>:
    }

    return ms;
}

static int isotp_send_flow_control(IsoTpLink* link, uint8_t flow_status, uint8_t block_size, uint8_t st_min_ms) 
    35b6:	cf 93       	push	r28
    35b8:	df 93       	push	r29
    35ba:	cd b7       	in	r28, 0x3d	; 61
    35bc:	de b7       	in	r29, 0x3e	; 62
    35be:	28 97       	sbiw	r28, 0x08	; 8
    35c0:	0f b6       	in	r0, 0x3f	; 63
    35c2:	f8 94       	cli
    35c4:	de bf       	out	0x3e, r29	; 62
    35c6:	0f be       	out	0x3f, r0	; 63
    35c8:	cd bf       	out	0x3d, r28	; 61
    IsoTpCanMessage message;
    int ret;

    /* setup message  */
    message.as.flow_control.type = ISOTP_PCI_TYPE_FLOW_CONTROL_FRAME;
    message.as.flow_control.FS = flow_status;
    35ca:	62 95       	swap	r22
    35cc:	60 7f       	andi	r22, 0xF0	; 240
    35ce:	63 60       	ori	r22, 0x03	; 3
    35d0:	69 83       	std	Y+1, r22	; 0x01
    message.as.flow_control.BS = block_size;
    35d2:	4a 83       	std	Y+2, r20	; 0x02
    message.as.flow_control.STmin = isotp_ms_to_st_min(st_min_ms);
    35d4:	1b 82       	std	Y+3, r1	; 0x03

    /* send message */
#ifdef ISO_TP_FRAME_PADDING
    (void)memset(message.as.flow_control.reserve, 0, sizeof(message.as.flow_control.reserve));
    35d6:	fe 01       	movw	r30, r28
    35d8:	34 96       	adiw	r30, 0x04	; 4
    35da:	25 e0       	ldi	r18, 0x05	; 5
    35dc:	df 01       	movw	r26, r30
    35de:	1d 92       	st	X+, r1
    35e0:	2a 95       	dec	r18
    35e2:	e9 f7       	brne	.-6      	; 0x35de <isotp_send_flow_control.isra.3.constprop.5+0x28>
    ret = isotp_user_send_can(link->send_arbitration_id,
    35e4:	fc 01       	movw	r30, r24
    35e6:	60 81       	ld	r22, Z
    35e8:	71 81       	ldd	r23, Z+1	; 0x01
    35ea:	82 81       	ldd	r24, Z+2	; 0x02
    35ec:	93 81       	ldd	r25, Z+3	; 0x03
    35ee:	28 e0       	ldi	r18, 0x08	; 8
    35f0:	ae 01       	movw	r20, r28
    35f2:	4f 5f       	subi	r20, 0xFF	; 255
    35f4:	5f 4f       	sbci	r21, 0xFF	; 255
    35f6:	bb df       	rcall	.-138    	; 0x356e <isotp_user_send_can>
                           message.as.data_array.ptr, 
                           3);
#endif

    return ret;
}
    35f8:	28 96       	adiw	r28, 0x08	; 8
    35fa:	0f b6       	in	r0, 0x3f	; 63
    35fc:	f8 94       	cli
    35fe:	de bf       	out	0x3e, r29	; 62
    3600:	0f be       	out	0x3f, r0	; 63
    3602:	cd bf       	out	0x3d, r28	; 61
    3604:	df 91       	pop	r29
    3606:	cf 91       	pop	r28
    3608:	08 95       	ret

0000360a <isotp_send_with_id>:
{
    return isotp_send_with_id(link, link->send_arbitration_id, payload, size);
}

int isotp_send_with_id(IsoTpLink *link, uint32_t id, const uint8_t payload[], uint16_t size)
{
    360a:	8f 92       	push	r8
    360c:	9f 92       	push	r9
    360e:	af 92       	push	r10
    3610:	bf 92       	push	r11
    3612:	ef 92       	push	r14
    3614:	ff 92       	push	r15
    3616:	0f 93       	push	r16
    3618:	1f 93       	push	r17
    361a:	cf 93       	push	r28
    361c:	df 93       	push	r29
    361e:	cd b7       	in	r28, 0x3d	; 61
    3620:	de b7       	in	r29, 0x3e	; 62
    3622:	28 97       	sbiw	r28, 0x08	; 8
    3624:	0f b6       	in	r0, 0x3f	; 63
    3626:	f8 94       	cli
    3628:	de bf       	out	0x3e, r29	; 62
    362a:	0f be       	out	0x3f, r0	; 63
    362c:	cd bf       	out	0x3d, r28	; 61
    362e:	7c 01       	movw	r14, r24
    3630:	4a 01       	movw	r8, r20
    3632:	5b 01       	movw	r10, r22
    int ret;
    
    if (size > link->send_buf_size){
    3634:	dc 01       	movw	r26, r24
    3636:	16 96       	adiw	r26, 0x06	; 6
    3638:	8d 91       	ld	r24, X+
    363a:	9c 91       	ld	r25, X
    363c:	17 97       	sbiw	r26, 0x07	; 7
    363e:	80 17       	cp	r24, r16
    3640:	91 07       	cpc	r25, r17
    3642:	08 f4       	brcc	.+2      	; 0x3646 <isotp_send_with_id+0x3c>
    3644:	88 c0       	rjmp	.+272    	; 0x3756 <isotp_send_with_id+0x14c>
        isotp_user_debug("Message to big, increase ISO_TP_MAX_MESSAGE_SIZE to set a bigger buffer\n");
        return ISOTP_RET_OVERFLOW;
    }

    if (ISOTP_SEND_STATUS_INPROGRESS == link->send_status){
    3646:	f7 01       	movw	r30, r14
    3648:	83 8d       	ldd	r24, Z+27	; 0x1b
    364a:	81 30       	cpi	r24, 0x01	; 1
    364c:	09 f4       	brne	.+2      	; 0x3650 <isotp_send_with_id+0x46>
    364e:	8d c0       	rjmp	.+282    	; 0x376a <isotp_send_with_id+0x160>
        isotp_user_debug("Abord previous message, which is sending in pregress\n");
        return ISOTP_RET_INPROGRESS;
    }

    /* copy into local buffer */
    link->send_size = size;
    3650:	11 87       	std	Z+9, r17	; 0x09
    3652:	00 87       	std	Z+8, r16	; 0x08
    link->send_offset = 0;
    3654:	13 86       	std	Z+11, r1	; 0x0b
    3656:	12 86       	std	Z+10, r1	; 0x0a
    (void)memcpy(link->send_buffer, payload, size);
    3658:	a8 01       	movw	r20, r16
    365a:	b9 01       	movw	r22, r18
    365c:	84 81       	ldd	r24, Z+4	; 0x04
    365e:	95 81       	ldd	r25, Z+5	; 0x05
    3660:	0e 94 1d 35 	call	0x6a3a	; 0x6a3a <memcpy>

    if(link->send_size < 8){
    3664:	f7 01       	movw	r30, r14
    3666:	00 85       	ldd	r16, Z+8	; 0x08
    3668:	11 85       	ldd	r17, Z+9	; 0x09
    366a:	08 30       	cpi	r16, 0x08	; 8
    366c:	11 05       	cpc	r17, r1
    366e:	08 f4       	brcc	.+2      	; 0x3672 <isotp_send_with_id+0x68>
    3670:	51 c0       	rjmp	.+162    	; 0x3714 <isotp_send_with_id+0x10a>
    /* multi frame message length must greater than 7  */
    assert(link->send_size > 7);

    /* setup message  */
    message.as.first_frame.type = ISOTP_PCI_TYPE_FIRST_FRAME;
    message.as.first_frame.FF_DL_low  = (uint8_t)link->send_size;
    3672:	0a 83       	std	Y+2, r16	; 0x02
    message.as.first_frame.FF_DL_high = (uint8_t)(0x0F & (link->send_size >> 8));
    3674:	81 2f       	mov	r24, r17
    3676:	82 95       	swap	r24
    3678:	80 7f       	andi	r24, 0xF0	; 240
    367a:	81 60       	ori	r24, 0x01	; 1
    367c:	89 83       	std	Y+1, r24	; 0x01
    (void)memcpy(message.as.first_frame.data, 
    367e:	04 80       	ldd	r0, Z+4	; 0x04
    3680:	f5 81       	ldd	r31, Z+5	; 0x05
    3682:	e0 2d       	mov	r30, r0
    3684:	86 e0       	ldi	r24, 0x06	; 6
    3686:	de 01       	movw	r26, r28
    3688:	13 96       	adiw	r26, 0x03	; 3
    368a:	01 90       	ld	r0, Z+
    368c:	0d 92       	st	X+, r0
    368e:	8a 95       	dec	r24
    3690:	e1 f7       	brne	.-8      	; 0x368a <isotp_send_with_id+0x80>
           link->send_buffer, 
           sizeof(message.as.first_frame.data));

    /* send message */
    ret = isotp_user_send_can(id,
    3692:	28 e0       	ldi	r18, 0x08	; 8
    3694:	ae 01       	movw	r20, r28
    3696:	4f 5f       	subi	r20, 0xFF	; 255
    3698:	5f 4f       	sbci	r21, 0xFF	; 255
    369a:	c5 01       	movw	r24, r10
    369c:	b4 01       	movw	r22, r8
    369e:	67 df       	rcall	.-306    	; 0x356e <isotp_user_send_can>
                           message.as.data_array.ptr, 
                           sizeof(message));
    if (ISOTP_RET_OK == ret){
    36a0:	00 97       	sbiw	r24, 0x00	; 0
    36a2:	39 f5       	brne	.+78     	; 0x36f2 <isotp_send_with_id+0xe8>
        link->send_offset += sizeof(message.as.first_frame.data);
    36a4:	f7 01       	movw	r30, r14
    36a6:	82 85       	ldd	r24, Z+10	; 0x0a
    36a8:	93 85       	ldd	r25, Z+11	; 0x0b
    36aa:	06 96       	adiw	r24, 0x06	; 6
    36ac:	93 87       	std	Z+11, r25	; 0x0b
    36ae:	82 87       	std	Z+10, r24	; 0x0a
        link->send_sn = 1;
    36b0:	11 e0       	ldi	r17, 0x01	; 1
    36b2:	14 87       	std	Z+12, r17	; 0x0c
        /* send multi-frame */
        ret = isotp_send_first_frame(link, id); 
        
        /* init multi-frame control flags */
        if (ISOTP_RET_OK == ret){
            link->send_bs_remain = 5;
    36b4:	85 e0       	ldi	r24, 0x05	; 5
    36b6:	90 e0       	ldi	r25, 0x00	; 0
    36b8:	96 87       	std	Z+14, r25	; 0x0e
    36ba:	85 87       	std	Z+13, r24	; 0x0d
            link->send_st_min = 0;
    36bc:	17 86       	std	Z+15, r1	; 0x0f
            link->send_wtf_count = 0;
            link->send_timer_st = isotp_user_get_ms();
    36be:	10 8a       	std	Z+16, r1	; 0x10
    36c0:	78 df       	rcall	.-272    	; 0x35b2 <isotp_user_get_ms>
    36c2:	d7 01       	movw	r26, r14
    36c4:	51 96       	adiw	r26, 0x11	; 17
    36c6:	6d 93       	st	X+, r22
    36c8:	7d 93       	st	X+, r23
    36ca:	8d 93       	st	X+, r24
    36cc:	9c 93       	st	X, r25
            link->send_timer_bs = isotp_user_get_ms() + ISO_TP_DEFAULT_RESPONSE_TIMEOUT;
    36ce:	54 97       	sbiw	r26, 0x14	; 20
    36d0:	70 df       	rcall	.-288    	; 0x35b2 <isotp_user_get_ms>
    36d2:	dc 01       	movw	r26, r24
    36d4:	cb 01       	movw	r24, r22
    36d6:	8c 59       	subi	r24, 0x9C	; 156
    36d8:	9f 4f       	sbci	r25, 0xFF	; 255
    36da:	af 4f       	sbci	r26, 0xFF	; 255
    36dc:	bf 4f       	sbci	r27, 0xFF	; 255
    36de:	f7 01       	movw	r30, r14
    36e0:	85 8b       	std	Z+21, r24	; 0x15
    36e2:	96 8b       	std	Z+22, r25	; 0x16
    36e4:	a7 8b       	std	Z+23, r26	; 0x17
    36e6:	b0 8f       	std	Z+24, r27	; 0x18
            link->send_protocol_resault = ISOTP_PROTOCOL_RESAULT_OK;
    36e8:	12 8e       	std	Z+26, r1	; 0x1a
    36ea:	11 8e       	std	Z+25, r1	; 0x19
            link->send_status = ISOTP_SEND_STATUS_INPROGRESS;
    36ec:	13 8f       	std	Z+27, r17	; 0x1b
    36ee:	80 e0       	ldi	r24, 0x00	; 0
    36f0:	90 e0       	ldi	r25, 0x00	; 0
        }
    }
    return ret;
}
    36f2:	28 96       	adiw	r28, 0x08	; 8
    36f4:	0f b6       	in	r0, 0x3f	; 63
    36f6:	f8 94       	cli
    36f8:	de bf       	out	0x3e, r29	; 62
    36fa:	0f be       	out	0x3f, r0	; 63
    36fc:	cd bf       	out	0x3d, r28	; 61
    36fe:	df 91       	pop	r29
    3700:	cf 91       	pop	r28
    3702:	1f 91       	pop	r17
    3704:	0f 91       	pop	r16
    3706:	ff 90       	pop	r15
    3708:	ef 90       	pop	r14
    370a:	bf 90       	pop	r11
    370c:	af 90       	pop	r10
    370e:	9f 90       	pop	r9
    3710:	8f 90       	pop	r8
    3712:	08 95       	ret
    3714:	64 81       	ldd	r22, Z+4	; 0x04
    3716:	75 81       	ldd	r23, Z+5	; 0x05
    /* multi frame message length must greater than 7  */
    assert(link->send_size <= 7);

    /* setup message  */
    message.as.single_frame.type = ISOTP_PCI_TYPE_SINGLE;
    message.as.single_frame.SF_DL = (uint8_t)link->send_size;
    3718:	80 2f       	mov	r24, r16
    371a:	82 95       	swap	r24
    371c:	80 7f       	andi	r24, 0xF0	; 240
    371e:	89 83       	std	Y+1, r24	; 0x01
    (void)memcpy(message.as.single_frame.data, link->send_buffer, link->send_size);
    3720:	a8 01       	movw	r20, r16
    3722:	ce 01       	movw	r24, r28
    3724:	02 96       	adiw	r24, 0x02	; 2
    3726:	0e 94 1d 35 	call	0x6a3a	; 0x6a3a <memcpy>

    /* send message */
#ifdef ISO_TP_FRAME_PADDING
    (void)memset(message.as.single_frame.data + link->send_size,
    372a:	47 e0       	ldi	r20, 0x07	; 7
    372c:	50 e0       	ldi	r21, 0x00	; 0
    372e:	40 1b       	sub	r20, r16
    3730:	51 0b       	sbc	r21, r17
    3732:	60 e0       	ldi	r22, 0x00	; 0
    3734:	70 e0       	ldi	r23, 0x00	; 0
    3736:	82 e0       	ldi	r24, 0x02	; 2
    3738:	90 e0       	ldi	r25, 0x00	; 0
    373a:	8c 0f       	add	r24, r28
    373c:	9d 1f       	adc	r25, r29
    373e:	80 0f       	add	r24, r16
    3740:	91 1f       	adc	r25, r17
    3742:	0e 94 37 35 	call	0x6a6e	; 0x6a6e <memset>
           0,
           sizeof(message.as.single_frame.data) - link->send_size);
    ret = isotp_user_send_can(id,
    3746:	28 e0       	ldi	r18, 0x08	; 8
    3748:	ae 01       	movw	r20, r28
    374a:	4f 5f       	subi	r20, 0xFF	; 255
    374c:	5f 4f       	sbci	r21, 0xFF	; 255
    374e:	c5 01       	movw	r24, r10
    3750:	b4 01       	movw	r22, r8
    3752:	0d df       	rcall	.-486    	; 0x356e <isotp_user_send_can>
    3754:	ce cf       	rjmp	.-100    	; 0x36f2 <isotp_send_with_id+0xe8>
int isotp_send_with_id(IsoTpLink *link, uint32_t id, const uint8_t payload[], uint16_t size)
{
    int ret;
    
    if (size > link->send_buf_size){
        isotp_user_debug("Message to big, increase ISO_TP_MAX_MESSAGE_SIZE to set a bigger buffer\n");
    3756:	83 ec       	ldi	r24, 0xC3	; 195
    3758:	91 e0       	ldi	r25, 0x01	; 1
    375a:	9f 93       	push	r25
    375c:	8f 93       	push	r24
    375e:	05 df       	rcall	.-502    	; 0x356a <isotp_user_debug>
        return ISOTP_RET_OVERFLOW;
    3760:	0f 90       	pop	r0
    3762:	0f 90       	pop	r0
    3764:	8d ef       	ldi	r24, 0xFD	; 253
    3766:	9f ef       	ldi	r25, 0xFF	; 255
    }

    if (ISOTP_SEND_STATUS_INPROGRESS == link->send_status){
        isotp_user_debug("Abord previous message, which is sending in pregress\n");
    3768:	c4 cf       	rjmp	.-120    	; 0x36f2 <isotp_send_with_id+0xe8>
    376a:	8c e0       	ldi	r24, 0x0C	; 12
    376c:	92 e0       	ldi	r25, 0x02	; 2
    376e:	9f 93       	push	r25
    3770:	8f 93       	push	r24
    3772:	fb de       	rcall	.-522    	; 0x356a <isotp_user_debug>
        return ISOTP_RET_INPROGRESS;
    3774:	0f 90       	pop	r0
    3776:	0f 90       	pop	r0
    3778:	8e ef       	ldi	r24, 0xFE	; 254
    377a:	9f ef       	ldi	r25, 0xFF	; 255
    377c:	ba cf       	rjmp	.-140    	; 0x36f2 <isotp_send_with_id+0xe8>

0000377e <isotp_send>:
    
    return ret;
}

int isotp_send(IsoTpLink *link, const uint8_t payload[], uint16_t size)
{
    377e:	0f 93       	push	r16
    3780:	1f 93       	push	r17
    3782:	9b 01       	movw	r18, r22
    3784:	8a 01       	movw	r16, r20
    return isotp_send_with_id(link, link->send_arbitration_id, payload, size);
    3786:	fc 01       	movw	r30, r24
    3788:	40 81       	ld	r20, Z
    378a:	51 81       	ldd	r21, Z+1	; 0x01
    378c:	62 81       	ldd	r22, Z+2	; 0x02
    378e:	73 81       	ldd	r23, Z+3	; 0x03
    3790:	3c df       	rcall	.-392    	; 0x360a <isotp_send_with_id>
}
    3792:	1f 91       	pop	r17
    3794:	0f 91       	pop	r16
    3796:	08 95       	ret

00003798 <isotp_on_can_message>:

    return ISOTP_RET_OK;
}

void isotp_on_can_message(IsoTpLink *link, uint8_t *data, uint8_t len)
{
    3798:	cf 92       	push	r12
    379a:	df 92       	push	r13
    379c:	ef 92       	push	r14
    379e:	ff 92       	push	r15
    37a0:	0f 93       	push	r16
    37a2:	1f 93       	push	r17
    37a4:	cf 93       	push	r28
    37a6:	df 93       	push	r29
    37a8:	cd b7       	in	r28, 0x3d	; 61
    37aa:	de b7       	in	r29, 0x3e	; 62
    37ac:	28 97       	sbiw	r28, 0x08	; 8
    37ae:	0f b6       	in	r0, 0x3f	; 63
    37b0:	f8 94       	cli
    37b2:	de bf       	out	0x3e, r29	; 62
    37b4:	0f be       	out	0x3f, r0	; 63
    37b6:	cd bf       	out	0x3d, r28	; 61
    37b8:	8c 01       	movw	r16, r24
    IsoTpCanMessage message;
    int ret;
    
    if (len < 2 || len > 8){
    37ba:	9e ef       	ldi	r25, 0xFE	; 254
    37bc:	94 0f       	add	r25, r20
    37be:	97 30       	cpi	r25, 0x07	; 7
    37c0:	78 f0       	brcs	.+30     	; 0x37e0 <isotp_on_can_message+0x48>
        default:
            break;
    };
    
    return;
}
    37c2:	28 96       	adiw	r28, 0x08	; 8
    37c4:	0f b6       	in	r0, 0x3f	; 63
    37c6:	f8 94       	cli
    37c8:	de bf       	out	0x3e, r29	; 62
    37ca:	0f be       	out	0x3f, r0	; 63
    37cc:	cd bf       	out	0x3d, r28	; 61
    37ce:	df 91       	pop	r29
    37d0:	cf 91       	pop	r28
    37d2:	1f 91       	pop	r17
    37d4:	0f 91       	pop	r16
    37d6:	ff 90       	pop	r15
    37d8:	ef 90       	pop	r14
    37da:	df 90       	pop	r13
    37dc:	cf 90       	pop	r12
    37de:	08 95       	ret
    37e0:	f4 2e       	mov	r15, r20
    
    if (len < 2 || len > 8){
        return;
    }

    (void)memcpy(message.as.data_array.ptr, data, len);
    37e2:	c4 2e       	mov	r12, r20
    37e4:	d1 2c       	mov	r13, r1
    37e6:	a6 01       	movw	r20, r12
    37e8:	ce 01       	movw	r24, r28
    37ea:	01 96       	adiw	r24, 0x01	; 1
    37ec:	0e 94 1d 35 	call	0x6a3a	; 0x6a3a <memcpy>
    (void)memset(message.as.data_array.ptr + len, 0, sizeof(message.as.data_array.ptr) - len);
    37f0:	48 e0       	ldi	r20, 0x08	; 8
    37f2:	50 e0       	ldi	r21, 0x00	; 0
    37f4:	4c 19       	sub	r20, r12
    37f6:	5d 09       	sbc	r21, r13
    37f8:	60 e0       	ldi	r22, 0x00	; 0
    37fa:	70 e0       	ldi	r23, 0x00	; 0
    37fc:	81 e0       	ldi	r24, 0x01	; 1
    37fe:	90 e0       	ldi	r25, 0x00	; 0
    3800:	8c 0f       	add	r24, r28
    3802:	9d 1f       	adc	r25, r29
    3804:	8c 0d       	add	r24, r12
    3806:	9d 1d       	adc	r25, r13
    3808:	0e 94 37 35 	call	0x6a6e	; 0x6a6e <memset>

    switch(message.as.common.type) {
    380c:	89 81       	ldd	r24, Y+1	; 0x01
    380e:	98 2f       	mov	r25, r24
    3810:	9f 70       	andi	r25, 0x0F	; 15
    3812:	91 30       	cpi	r25, 0x01	; 1
    3814:	09 f4       	brne	.+2      	; 0x3818 <isotp_on_can_message+0x80>
    3816:	68 c0       	rjmp	.+208    	; 0x38e8 <isotp_on_can_message+0x150>
    3818:	08 f4       	brcc	.+2      	; 0x381c <isotp_on_can_message+0x84>
    381a:	40 c0       	rjmp	.+128    	; 0x389c <isotp_on_can_message+0x104>
    381c:	92 30       	cpi	r25, 0x02	; 2
    381e:	a1 f1       	breq	.+104    	; 0x3888 <isotp_on_can_message+0xf0>
    3820:	93 30       	cpi	r25, 0x03	; 3
    3822:	79 f6       	brne	.-98     	; 0x37c2 <isotp_on_can_message+0x2a>
            
            break;
        }
        case ISOTP_PCI_TYPE_FLOW_CONTROL_FRAME:
            /* handle fc frame only when sending in progress  */
            if (ISOTP_SEND_STATUS_INPROGRESS != link->send_status){
    3824:	f8 01       	movw	r30, r16
    3826:	83 8d       	ldd	r24, Z+27	; 0x1b
    3828:	81 30       	cpi	r24, 0x01	; 1
    382a:	59 f6       	brne	.-106    	; 0x37c2 <isotp_on_can_message+0x2a>
}

static int isotp_receive_flow_conrtrol_frame(IsoTpLink *link, IsoTpCanMessage *message, uint8_t len)
{
    /* check message length */
    if (len < 3){
    382c:	f2 e0       	ldi	r31, 0x02	; 2
    382e:	ff 16       	cp	r15, r31
    3830:	09 f4       	brne	.+2      	; 0x3834 <isotp_on_can_message+0x9c>
    3832:	e9 c0       	rjmp	.+466    	; 0x3a06 <isotp_on_can_message+0x26e>
            /* handle message */
            ret = isotp_receive_flow_conrtrol_frame(link, &message, len);
            
            if (ISOTP_RET_OK == ret){
                /* refresh bs timer */
                link->send_timer_bs = isotp_user_get_ms() + ISO_TP_DEFAULT_RESPONSE_TIMEOUT;
    3834:	be de       	rcall	.-644    	; 0x35b2 <isotp_user_get_ms>
    3836:	dc 01       	movw	r26, r24
    3838:	cb 01       	movw	r24, r22
    383a:	8c 59       	subi	r24, 0x9C	; 156
    383c:	9f 4f       	sbci	r25, 0xFF	; 255
    383e:	af 4f       	sbci	r26, 0xFF	; 255
    3840:	bf 4f       	sbci	r27, 0xFF	; 255
    3842:	f8 01       	movw	r30, r16
    3844:	85 8b       	std	Z+21, r24	; 0x15
    3846:	96 8b       	std	Z+22, r25	; 0x16
    3848:	a7 8b       	std	Z+23, r26	; 0x17
    384a:	b0 8f       	std	Z+24, r27	; 0x18

                /* overflow */
                if (PCI_FLOW_STATUS_OVERFLOW == message.as.flow_control.FS) {
    384c:	89 81       	ldd	r24, Y+1	; 0x01
    384e:	80 7f       	andi	r24, 0xF0	; 240
    3850:	80 32       	cpi	r24, 0x20	; 32
    3852:	09 f4       	brne	.+2      	; 0x3856 <isotp_on_can_message+0xbe>
    3854:	08 c1       	rjmp	.+528    	; 0x3a66 <isotp_on_can_message+0x2ce>
                    link->send_protocol_resault = ISOTP_PROTOCOL_RESAULT_BUFFER_OVFLW;
                    link->send_status = ISOTP_SEND_STATUS_ERROR;
                } 
                /* wait */
                else if (PCI_FLOW_STATUS_WAIT == message.as.flow_control.FS) {
    3856:	80 31       	cpi	r24, 0x10	; 16
    3858:	09 f4       	brne	.+2      	; 0x385c <isotp_on_can_message+0xc4>
    385a:	f7 c0       	rjmp	.+494    	; 0x3a4a <isotp_on_can_message+0x2b2>
                        link->send_protocol_resault = ISOTP_PROTOCOL_RESAULT_WFT_OVRN;
                        link->send_status = ISOTP_SEND_STATUS_ERROR;
                    }
                } 
                /* permit send */
                else if (PCI_FLOW_STATUS_CONTINUE == message.as.flow_control.FS){
    385c:	81 11       	cpse	r24, r1
    385e:	b1 cf       	rjmp	.-158    	; 0x37c2 <isotp_on_can_message+0x2a>
                    if (0 == message.as.flow_control.BS){
    3860:	8a 81       	ldd	r24, Y+2	; 0x02
    3862:	81 11       	cpse	r24, r1
    3864:	08 c1       	rjmp	.+528    	; 0x3a76 <isotp_on_can_message+0x2de>
                        link->send_bs_remain = ISOTP_INVALID_BS;
    3866:	8f ef       	ldi	r24, 0xFF	; 255
    3868:	9f ef       	ldi	r25, 0xFF	; 255
    386a:	f8 01       	movw	r30, r16
    386c:	96 87       	std	Z+14, r25	; 0x0e
    386e:	85 87       	std	Z+13, r24	; 0x0d
                    } else {
                        link->send_bs_remain = message.as.flow_control.BS;
                    }
                    link->send_st_min = isotp_st_min_to_ms(message.as.flow_control.STmin);
    3870:	8b 81       	ldd	r24, Y+3	; 0x03
/* st_min to msec  */
static uint8_t isotp_st_min_to_ms(uint8_t st_min) 
{
    uint8_t ms;
    
    if (st_min >= 0xF1 && st_min <= 0xF9){
    3872:	9f e0       	ldi	r25, 0x0F	; 15
    3874:	98 0f       	add	r25, r24
    3876:	99 30       	cpi	r25, 0x09	; 9
    3878:	08 f4       	brcc	.+2      	; 0x387c <isotp_on_can_message+0xe4>
    387a:	02 c1       	rjmp	.+516    	; 0x3a80 <isotp_on_can_message+0x2e8>
        ms = 1;
    } else if (st_min <= 0x7F) {
    387c:	87 fd       	sbrc	r24, 7
    387e:	16 c1       	rjmp	.+556    	; 0x3aac <isotp_on_can_message+0x314>
                    if (0 == message.as.flow_control.BS){
                        link->send_bs_remain = ISOTP_INVALID_BS;
                    } else {
                        link->send_bs_remain = message.as.flow_control.BS;
                    }
                    link->send_st_min = isotp_st_min_to_ms(message.as.flow_control.STmin);
    3880:	f8 01       	movw	r30, r16
    3882:	87 87       	std	Z+15, r24	; 0x0f
                    link->send_wtf_count = 0;
    3884:	10 8a       	std	Z+16, r1	; 0x10
    3886:	9d cf       	rjmp	.-198    	; 0x37c2 <isotp_on_can_message+0x2a>
            
            break;
        }
        case TSOTP_PCI_TYPE_CONSECUTIVE_FRAME: {
            /* check if in receiving status */
            if (ISOTP_RECEIVE_STATUS_INPROGRESS != link->receive_status){
    3888:	f8 01       	movw	r30, r16
    388a:	90 a9       	ldd	r25, Z+48	; 0x30
    388c:	91 30       	cpi	r25, 0x01	; 1
    388e:	09 f4       	brne	.+2      	; 0x3892 <isotp_on_can_message+0xfa>
    3890:	6e c0       	rjmp	.+220    	; 0x396e <isotp_on_can_message+0x1d6>
                link->receive_protocol_resault = ISOTP_PROTOCOL_RESAULT_UNEXP_PDU;
    3892:	8a ef       	ldi	r24, 0xFA	; 250
    3894:	9f ef       	ldi	r25, 0xFF	; 255
    3896:	97 a7       	std	Z+47, r25	; 0x2f
    3898:	86 a7       	std	Z+46, r24	; 0x2e
                break;
    389a:	93 cf       	rjmp	.-218    	; 0x37c2 <isotp_on_can_message+0x2a>
    (void)memset(message.as.data_array.ptr + len, 0, sizeof(message.as.data_array.ptr) - len);

    switch(message.as.common.type) {
        case ISOTP_PCI_TYPE_SINGLE: {
            /* update protocol resault */
            if (ISOTP_RECEIVE_STATUS_INPROGRESS == link->receive_status){
    389c:	f8 01       	movw	r30, r16
    389e:	90 a9       	ldd	r25, Z+48	; 0x30
    38a0:	91 30       	cpi	r25, 0x01	; 1
    38a2:	09 f4       	brne	.+2      	; 0x38a6 <isotp_on_can_message+0x10e>
    38a4:	5f c0       	rjmp	.+190    	; 0x3964 <isotp_on_can_message+0x1cc>
                link->receive_protocol_resault = ISOTP_PROTOCOL_RESAULT_UNEXP_PDU;
            } else {
                link->receive_protocol_resault = ISOTP_PROTOCOL_RESAULT_OK;
    38a6:	f8 01       	movw	r30, r16
    38a8:	17 a6       	std	Z+47, r1	; 0x2f
    38aa:	16 a6       	std	Z+46, r1	; 0x2e
}

static int isotp_receive_single_frame(IsoTpLink *link, IsoTpCanMessage *message, uint8_t len)
{   
    /* check data length */
    if ((0 == message->as.single_frame.SF_DL) ||
    38ac:	98 2f       	mov	r25, r24
    38ae:	90 7f       	andi	r25, 0xF0	; 240
    38b0:	09 f4       	brne	.+2      	; 0x38b4 <isotp_on_can_message+0x11c>
    38b2:	b1 c0       	rjmp	.+354    	; 0x3a16 <isotp_on_can_message+0x27e>
        (message->as.single_frame.SF_DL > (len - 1))){
    38b4:	82 95       	swap	r24
    38b6:	8f 70       	andi	r24, 0x0F	; 15
}

static int isotp_receive_single_frame(IsoTpLink *link, IsoTpCanMessage *message, uint8_t len)
{   
    /* check data length */
    if ((0 == message->as.single_frame.SF_DL) ||
    38b8:	48 2f       	mov	r20, r24
    38ba:	50 e0       	ldi	r21, 0x00	; 0
    38bc:	4c 15       	cp	r20, r12
    38be:	5d 05       	cpc	r21, r13
    38c0:	0c f0       	brlt	.+2      	; 0x38c4 <isotp_on_can_message+0x12c>
    38c2:	a9 c0       	rjmp	.+338    	; 0x3a16 <isotp_on_can_message+0x27e>
        isotp_user_debug("Single-frame length too small.");
        return ISOTP_RET_LENGTH;
    }

    /* copying data */
    (void)memcpy(link->receive_buffer, 
    38c4:	be 01       	movw	r22, r28
    38c6:	6e 5f       	subi	r22, 0xFE	; 254
    38c8:	7f 4f       	sbci	r23, 0xFF	; 255
    38ca:	f8 01       	movw	r30, r16
    38cc:	80 a1       	ldd	r24, Z+32	; 0x20
    38ce:	91 a1       	ldd	r25, Z+33	; 0x21
    38d0:	0e 94 1d 35 	call	0x6a3a	; 0x6a3a <memcpy>
           message->as.single_frame.data, 
           message->as.single_frame.SF_DL);
    link->receive_size = message->as.single_frame.SF_DL;
    38d4:	89 81       	ldd	r24, Y+1	; 0x01
    38d6:	82 95       	swap	r24
    38d8:	8f 70       	andi	r24, 0x0F	; 15
    38da:	90 e0       	ldi	r25, 0x00	; 0
    38dc:	f8 01       	movw	r30, r16
    38de:	95 a3       	std	Z+37, r25	; 0x25
    38e0:	84 a3       	std	Z+36, r24	; 0x24
            /* handle message */
            ret = isotp_receive_single_frame(link, &message, len);
            
            if (ISOTP_RET_OK == ret){
                /* change status */
                link->receive_status = ISOTP_RECEIVE_STATUS_FULL;
    38e2:	82 e0       	ldi	r24, 0x02	; 2
    38e4:	80 ab       	std	Z+48, r24	; 0x30
    38e6:	6d cf       	rjmp	.-294    	; 0x37c2 <isotp_on_can_message+0x2a>
            }
            break;
        }
        case ISOTP_PCI_TYPE_FIRST_FRAME: {
            /* update protocol resault */
            if (ISOTP_RECEIVE_STATUS_INPROGRESS == link->receive_status){
    38e8:	f8 01       	movw	r30, r16
    38ea:	90 a9       	ldd	r25, Z+48	; 0x30
    38ec:	91 30       	cpi	r25, 0x01	; 1
    38ee:	a9 f1       	breq	.+106    	; 0x395a <isotp_on_can_message+0x1c2>
                link->receive_protocol_resault = ISOTP_PROTOCOL_RESAULT_UNEXP_PDU;
            } else {
                link->receive_protocol_resault = ISOTP_PROTOCOL_RESAULT_OK;
    38f0:	f8 01       	movw	r30, r16
    38f2:	17 a6       	std	Z+47, r1	; 0x2f
    38f4:	16 a6       	std	Z+46, r1	; 0x2e

static int isotp_receive_first_frame(IsoTpLink *link, IsoTpCanMessage *message, uint8_t len)
{
    uint16_t payload_length;

    if (8 != len){
    38f6:	f8 e0       	ldi	r31, 0x08	; 8
    38f8:	ff 12       	cpse	r15, r31
    38fa:	95 c0       	rjmp	.+298    	; 0x3a26 <isotp_on_can_message+0x28e>
        isotp_user_debug("First frame should be 8 byte lenght.");
        return ISOTP_RET_LENGTH;
    }

    /* check data length */
    payload_length = message->as.first_frame.FF_DL_high;
    38fc:	82 95       	swap	r24
    38fe:	8f 70       	andi	r24, 0x0F	; 15
    payload_length = (payload_length << 8) + message->as.first_frame.FF_DL_low;
    3900:	90 e0       	ldi	r25, 0x00	; 0
    3902:	98 2f       	mov	r25, r24
    3904:	88 27       	eor	r24, r24
    3906:	2a 81       	ldd	r18, Y+2	; 0x02
    3908:	82 0f       	add	r24, r18
    390a:	91 1d       	adc	r25, r1
        return ISOTP_RET_OVERFLOW;
    }
	*/
    
    /* copying data */
    (void)memcpy(link->receive_buffer, message->as.first_frame.data, sizeof(message->as.first_frame.data));
    390c:	f8 01       	movw	r30, r16
    390e:	a0 a1       	ldd	r26, Z+32	; 0x20
    3910:	b1 a1       	ldd	r27, Z+33	; 0x21
    3912:	26 e0       	ldi	r18, 0x06	; 6
    3914:	fe 01       	movw	r30, r28
    3916:	33 96       	adiw	r30, 0x03	; 3
    3918:	01 90       	ld	r0, Z+
    391a:	0d 92       	st	X+, r0
    391c:	2a 95       	dec	r18
    391e:	e1 f7       	brne	.-8      	; 0x3918 <isotp_on_can_message+0x180>
    link->receive_size = payload_length;
    3920:	f8 01       	movw	r30, r16
    3922:	95 a3       	std	Z+37, r25	; 0x25
    3924:	84 a3       	std	Z+36, r24	; 0x24
    link->receive_offset = sizeof(message->as.first_frame.data);
    3926:	86 e0       	ldi	r24, 0x06	; 6
    3928:	90 e0       	ldi	r25, 0x00	; 0
    392a:	97 a3       	std	Z+39, r25	; 0x27
    392c:	86 a3       	std	Z+38, r24	; 0x26
    link->receive_sn = 1;
    392e:	81 e0       	ldi	r24, 0x01	; 1
    3930:	80 a7       	std	Z+40, r24	; 0x28
            }

            /* if receive successful */
            if (ISOTP_RET_OK == ret){
                /* change status */
                link->receive_status = ISOTP_RECEIVE_STATUS_INPROGRESS;
    3932:	80 ab       	std	Z+48, r24	; 0x30
                /* send fc frame */
                link->receive_bs_count = ISO_TP_DEFAULT_BLOCK_SIZE;					
    3934:	8f e0       	ldi	r24, 0x0F	; 15
    3936:	81 a7       	std	Z+41, r24	; 0x29
                isotp_send_flow_control(link, PCI_FLOW_STATUS_CONTINUE, link->receive_bs_count, ISO_TP_DEFAULT_ST_MIN);
    3938:	4f e0       	ldi	r20, 0x0F	; 15
    393a:	60 e0       	ldi	r22, 0x00	; 0
    393c:	c8 01       	movw	r24, r16
                /* refresh timer cs */
                link->receive_timer_cr = isotp_user_get_ms() + ISO_TP_DEFAULT_RESPONSE_TIMEOUT;
    393e:	3b de       	rcall	.-906    	; 0x35b6 <isotp_send_flow_control.isra.3.constprop.5>
    3940:	38 de       	rcall	.-912    	; 0x35b2 <isotp_user_get_ms>
    3942:	dc 01       	movw	r26, r24
    3944:	cb 01       	movw	r24, r22
    3946:	8c 59       	subi	r24, 0x9C	; 156
    3948:	9f 4f       	sbci	r25, 0xFF	; 255
    394a:	af 4f       	sbci	r26, 0xFF	; 255
    394c:	bf 4f       	sbci	r27, 0xFF	; 255
    394e:	f8 01       	movw	r30, r16
    3950:	82 a7       	std	Z+42, r24	; 0x2a
    3952:	93 a7       	std	Z+43, r25	; 0x2b
    3954:	a4 a7       	std	Z+44, r26	; 0x2c
    3956:	b5 a7       	std	Z+45, r27	; 0x2d
    3958:	34 cf       	rjmp	.-408    	; 0x37c2 <isotp_on_can_message+0x2a>
            break;
        }
        case ISOTP_PCI_TYPE_FIRST_FRAME: {
            /* update protocol resault */
            if (ISOTP_RECEIVE_STATUS_INPROGRESS == link->receive_status){
                link->receive_protocol_resault = ISOTP_PROTOCOL_RESAULT_UNEXP_PDU;
    395a:	2a ef       	ldi	r18, 0xFA	; 250
    395c:	3f ef       	ldi	r19, 0xFF	; 255
    395e:	37 a7       	std	Z+47, r19	; 0x2f
    3960:	26 a7       	std	Z+46, r18	; 0x2e
    3962:	c9 cf       	rjmp	.-110    	; 0x38f6 <isotp_on_can_message+0x15e>

    switch(message.as.common.type) {
        case ISOTP_PCI_TYPE_SINGLE: {
            /* update protocol resault */
            if (ISOTP_RECEIVE_STATUS_INPROGRESS == link->receive_status){
                link->receive_protocol_resault = ISOTP_PROTOCOL_RESAULT_UNEXP_PDU;
    3964:	2a ef       	ldi	r18, 0xFA	; 250
    3966:	3f ef       	ldi	r19, 0xFF	; 255
    3968:	37 a7       	std	Z+47, r19	; 0x2f
    396a:	26 a7       	std	Z+46, r18	; 0x2e
    396c:	9f cf       	rjmp	.-194    	; 0x38ac <isotp_on_can_message+0x114>
static int isotp_receive_consecutive_frame(IsoTpLink *link, IsoTpCanMessage *message, uint8_t len)
{
    uint16_t remaining_bytes;
    
    /* check sn */
    if (link->receive_sn != message->as.consecutive_frame.SN){
    396e:	82 95       	swap	r24
    3970:	8f 70       	andi	r24, 0x0F	; 15
    3972:	f8 01       	movw	r30, r16
    3974:	90 a5       	ldd	r25, Z+40	; 0x28
    3976:	98 13       	cpse	r25, r24
    3978:	61 c0       	rjmp	.+194    	; 0x3a3c <isotp_on_can_message+0x2a4>
        return ISOTP_RET_WRONG_SN;
    }

    /* check data length */
    remaining_bytes = link->receive_size - link->receive_offset;
    397a:	86 a1       	ldd	r24, Z+38	; 0x26
    397c:	97 a1       	ldd	r25, Z+39	; 0x27
    397e:	e4 a0       	ldd	r14, Z+36	; 0x24
    3980:	f5 a0       	ldd	r15, Z+37	; 0x25
    3982:	e8 1a       	sub	r14, r24
    3984:	f9 0a       	sbc	r15, r25
    3986:	f8 e0       	ldi	r31, 0x08	; 8
    3988:	ef 16       	cp	r14, r31
    398a:	f1 04       	cpc	r15, r1
    398c:	18 f0       	brcs	.+6      	; 0x3994 <isotp_on_can_message+0x1fc>
    398e:	27 e0       	ldi	r18, 0x07	; 7
    3990:	e2 2e       	mov	r14, r18
    3992:	f1 2c       	mov	r15, r1
    if (remaining_bytes > sizeof(message->as.consecutive_frame.data)){
        remaining_bytes = sizeof(message->as.consecutive_frame.data);
    }
    if (remaining_bytes > len - 1){
    3994:	21 e0       	ldi	r18, 0x01	; 1
    3996:	c2 1a       	sub	r12, r18
    3998:	d1 08       	sbc	r13, r1
    399a:	ce 14       	cp	r12, r14
    399c:	df 04       	cpc	r13, r15
    399e:	08 f4       	brcc	.+2      	; 0x39a2 <isotp_on_can_message+0x20a>
    39a0:	7d c0       	rjmp	.+250    	; 0x3a9c <isotp_on_can_message+0x304>
        isotp_user_debug("Consecutive frame too short.");
        return ISOTP_RET_LENGTH;
    }

    /* copying data */
    (void)memcpy(link->receive_buffer + link->receive_offset, 
    39a2:	f8 01       	movw	r30, r16
    39a4:	20 a1       	ldd	r18, Z+32	; 0x20
    39a6:	31 a1       	ldd	r19, Z+33	; 0x21
    39a8:	a7 01       	movw	r20, r14
    39aa:	be 01       	movw	r22, r28
    39ac:	6e 5f       	subi	r22, 0xFE	; 254
    39ae:	7f 4f       	sbci	r23, 0xFF	; 255
    39b0:	82 0f       	add	r24, r18
    39b2:	93 1f       	adc	r25, r19
    39b4:	0e 94 1d 35 	call	0x6a3a	; 0x6a3a <memcpy>
           message->as.consecutive_frame.data,
           remaining_bytes);

    link->receive_offset += remaining_bytes;
    39b8:	f8 01       	movw	r30, r16
    39ba:	86 a1       	ldd	r24, Z+38	; 0x26
    39bc:	97 a1       	ldd	r25, Z+39	; 0x27
    39be:	e8 0e       	add	r14, r24
    39c0:	f9 1e       	adc	r15, r25
    39c2:	f7 a2       	std	Z+39, r15	; 0x27
    39c4:	e6 a2       	std	Z+38, r14	; 0x26
    if (++(link->receive_sn) > 0x0F){
    39c6:	80 a5       	ldd	r24, Z+40	; 0x28
    39c8:	8f 5f       	subi	r24, 0xFF	; 255
    39ca:	80 31       	cpi	r24, 0x10	; 16
        link->receive_sn = 0;
    39cc:	a0 f1       	brcs	.+104    	; 0x3a36 <isotp_on_can_message+0x29e>
            }

            /* if success */
            if (ISOTP_RET_OK == ret){
                /* refresh timer cs */
                link->receive_timer_cr = isotp_user_get_ms() + ISO_TP_DEFAULT_RESPONSE_TIMEOUT;
    39ce:	10 a6       	std	Z+40, r1	; 0x28
    39d0:	f0 dd       	rcall	.-1056   	; 0x35b2 <isotp_user_get_ms>
    39d2:	dc 01       	movw	r26, r24
    39d4:	cb 01       	movw	r24, r22
    39d6:	8c 59       	subi	r24, 0x9C	; 156
    39d8:	9f 4f       	sbci	r25, 0xFF	; 255
    39da:	af 4f       	sbci	r26, 0xFF	; 255
    39dc:	bf 4f       	sbci	r27, 0xFF	; 255
    39de:	f8 01       	movw	r30, r16
    39e0:	82 a7       	std	Z+42, r24	; 0x2a
    39e2:	93 a7       	std	Z+43, r25	; 0x2b
    39e4:	a4 a7       	std	Z+44, r26	; 0x2c
    39e6:	b5 a7       	std	Z+45, r27	; 0x2d
                
                /* receive finished */
                if (link->receive_offset >= link->receive_size){
    39e8:	26 a1       	ldd	r18, Z+38	; 0x26
    39ea:	37 a1       	ldd	r19, Z+39	; 0x27
    39ec:	84 a1       	ldd	r24, Z+36	; 0x24
    39ee:	95 a1       	ldd	r25, Z+37	; 0x25
    39f0:	28 17       	cp	r18, r24
    39f2:	39 07       	cpc	r19, r25
    39f4:	08 f0       	brcs	.+2      	; 0x39f8 <isotp_on_can_message+0x260>
    39f6:	46 c0       	rjmp	.+140    	; 0x3a84 <isotp_on_can_message+0x2ec>
                    link->receive_status = ISOTP_RECEIVE_STATUS_FULL;
                } else {
                    /* send fc when bs reaches limit */
                    if (0 == --link->receive_bs_count){
    39f8:	f8 01       	movw	r30, r16
    39fa:	81 a5       	ldd	r24, Z+41	; 0x29
    39fc:	81 50       	subi	r24, 0x01	; 1
    39fe:	09 f4       	brne	.+2      	; 0x3a02 <isotp_on_can_message+0x26a>
    3a00:	45 c0       	rjmp	.+138    	; 0x3a8c <isotp_on_can_message+0x2f4>
    3a02:	81 a7       	std	Z+41, r24	; 0x29
    3a04:	de ce       	rjmp	.-580    	; 0x37c2 <isotp_on_can_message+0x2a>

static int isotp_receive_flow_conrtrol_frame(IsoTpLink *link, IsoTpCanMessage *message, uint8_t len)
{
    /* check message length */
    if (len < 3){
        isotp_user_debug("Flow control frame too short.");
    3a06:	83 ea       	ldi	r24, 0xA3	; 163
    3a08:	92 e0       	ldi	r25, 0x02	; 2
    3a0a:	9f 93       	push	r25
    3a0c:	8f 93       	push	r24
    3a0e:	ad dd       	rcall	.-1190   	; 0x356a <isotp_user_debug>
    3a10:	0f 90       	pop	r0
    3a12:	0f 90       	pop	r0
    3a14:	d6 ce       	rjmp	.-596    	; 0x37c2 <isotp_on_can_message+0x2a>
static int isotp_receive_single_frame(IsoTpLink *link, IsoTpCanMessage *message, uint8_t len)
{   
    /* check data length */
    if ((0 == message->as.single_frame.SF_DL) ||
        (message->as.single_frame.SF_DL > (len - 1))){
        isotp_user_debug("Single-frame length too small.");
    3a16:	82 e4       	ldi	r24, 0x42	; 66
    3a18:	92 e0       	ldi	r25, 0x02	; 2
    3a1a:	9f 93       	push	r25
    3a1c:	8f 93       	push	r24
    3a1e:	a5 dd       	rcall	.-1206   	; 0x356a <isotp_user_debug>
    3a20:	0f 90       	pop	r0
    3a22:	0f 90       	pop	r0
    3a24:	ce ce       	rjmp	.-612    	; 0x37c2 <isotp_on_can_message+0x2a>
static int isotp_receive_first_frame(IsoTpLink *link, IsoTpCanMessage *message, uint8_t len)
{
    uint16_t payload_length;

    if (8 != len){
        isotp_user_debug("First frame should be 8 byte lenght.");
    3a26:	81 e6       	ldi	r24, 0x61	; 97
    3a28:	92 e0       	ldi	r25, 0x02	; 2
    3a2a:	9f 93       	push	r25
    3a2c:	8f 93       	push	r24
    3a2e:	9d dd       	rcall	.-1222   	; 0x356a <isotp_user_debug>
    3a30:	0f 90       	pop	r0
    3a32:	0f 90       	pop	r0
    3a34:	c6 ce       	rjmp	.-628    	; 0x37c2 <isotp_on_can_message+0x2a>
    3a36:	f8 01       	movw	r30, r16
    (void)memcpy(link->receive_buffer + link->receive_offset, 
           message->as.consecutive_frame.data,
           remaining_bytes);

    link->receive_offset += remaining_bytes;
    if (++(link->receive_sn) > 0x0F){
    3a38:	80 a7       	std	Z+40, r24	; 0x28
    3a3a:	ca cf       	rjmp	.-108    	; 0x39d0 <isotp_on_can_message+0x238>
    3a3c:	8c ef       	ldi	r24, 0xFC	; 252
            /* handle message */
            ret = isotp_receive_consecutive_frame(link, &message, len);

            /* if wrong sn */
            if (ISOTP_RET_WRONG_SN == ret){
                link->receive_protocol_resault = ISOTP_PROTOCOL_RESAULT_WRONG_SN;
    3a3e:	9f ef       	ldi	r25, 0xFF	; 255
    3a40:	f8 01       	movw	r30, r16
    3a42:	97 a7       	std	Z+47, r25	; 0x2f
    3a44:	86 a7       	std	Z+46, r24	; 0x2e
    3a46:	10 aa       	std	Z+48, r1	; 0x30
                link->receive_status = ISOTP_RECEIVE_STATUS_IDLE;
    3a48:	bc ce       	rjmp	.-648    	; 0x37c2 <isotp_on_can_message+0x2a>
                break;
    3a4a:	f8 01       	movw	r30, r16
                    link->send_protocol_resault = ISOTP_PROTOCOL_RESAULT_BUFFER_OVFLW;
                    link->send_status = ISOTP_SEND_STATUS_ERROR;
                } 
                /* wait */
                else if (PCI_FLOW_STATUS_WAIT == message.as.flow_control.FS) {
                    link->send_wtf_count += 1;
    3a4c:	80 89       	ldd	r24, Z+16	; 0x10
    3a4e:	8f 5f       	subi	r24, 0xFF	; 255
    3a50:	80 8b       	std	Z+16, r24	; 0x10
    3a52:	82 30       	cpi	r24, 0x02	; 2
                    /* wati exceed allowed count */
                    if (link->send_wtf_count > ISO_TP_MAX_WFT_NUMBER){
    3a54:	08 f4       	brcc	.+2      	; 0x3a58 <isotp_on_can_message+0x2c0>
    3a56:	b5 ce       	rjmp	.-662    	; 0x37c2 <isotp_on_can_message+0x2a>
    3a58:	89 ef       	ldi	r24, 0xF9	; 249
                        link->send_protocol_resault = ISOTP_PROTOCOL_RESAULT_WFT_OVRN;
    3a5a:	9f ef       	ldi	r25, 0xFF	; 255
    3a5c:	92 8f       	std	Z+26, r25	; 0x1a
    3a5e:	81 8f       	std	Z+25, r24	; 0x19
    3a60:	82 e0       	ldi	r24, 0x02	; 2
                        link->send_status = ISOTP_SEND_STATUS_ERROR;
    3a62:	83 8f       	std	Z+27, r24	; 0x1b
    3a64:	ae ce       	rjmp	.-676    	; 0x37c2 <isotp_on_can_message+0x2a>
    3a66:	88 ef       	ldi	r24, 0xF8	; 248
                /* refresh bs timer */
                link->send_timer_bs = isotp_user_get_ms() + ISO_TP_DEFAULT_RESPONSE_TIMEOUT;

                /* overflow */
                if (PCI_FLOW_STATUS_OVERFLOW == message.as.flow_control.FS) {
                    link->send_protocol_resault = ISOTP_PROTOCOL_RESAULT_BUFFER_OVFLW;
    3a68:	9f ef       	ldi	r25, 0xFF	; 255
    3a6a:	f8 01       	movw	r30, r16
    3a6c:	92 8f       	std	Z+26, r25	; 0x1a
    3a6e:	81 8f       	std	Z+25, r24	; 0x19
    3a70:	82 e0       	ldi	r24, 0x02	; 2
                    link->send_status = ISOTP_SEND_STATUS_ERROR;
    3a72:	83 8f       	std	Z+27, r24	; 0x1b
    3a74:	a6 ce       	rjmp	.-692    	; 0x37c2 <isotp_on_can_message+0x2a>
    3a76:	90 e0       	ldi	r25, 0x00	; 0
                /* permit send */
                else if (PCI_FLOW_STATUS_CONTINUE == message.as.flow_control.FS){
                    if (0 == message.as.flow_control.BS){
                        link->send_bs_remain = ISOTP_INVALID_BS;
                    } else {
                        link->send_bs_remain = message.as.flow_control.BS;
    3a78:	f8 01       	movw	r30, r16
    3a7a:	96 87       	std	Z+14, r25	; 0x0e
    3a7c:	85 87       	std	Z+13, r24	; 0x0d
    3a7e:	f8 ce       	rjmp	.-528    	; 0x3870 <isotp_on_can_message+0xd8>
    3a80:	81 e0       	ldi	r24, 0x01	; 1
static uint8_t isotp_st_min_to_ms(uint8_t st_min) 
{
    uint8_t ms;
    
    if (st_min >= 0xF1 && st_min <= 0xF9){
        ms = 1;
    3a82:	fe ce       	rjmp	.-516    	; 0x3880 <isotp_on_can_message+0xe8>
    3a84:	82 e0       	ldi	r24, 0x02	; 2
                /* refresh timer cs */
                link->receive_timer_cr = isotp_user_get_ms() + ISO_TP_DEFAULT_RESPONSE_TIMEOUT;
                
                /* receive finished */
                if (link->receive_offset >= link->receive_size){
                    link->receive_status = ISOTP_RECEIVE_STATUS_FULL;
    3a86:	f8 01       	movw	r30, r16
    3a88:	80 ab       	std	Z+48, r24	; 0x30
    3a8a:	9b ce       	rjmp	.-714    	; 0x37c2 <isotp_on_can_message+0x2a>
                } else {
                    /* send fc when bs reaches limit */
                    if (0 == --link->receive_bs_count){
                        link->receive_bs_count = ISO_TP_DEFAULT_BLOCK_SIZE;											
    3a8c:	8f e0       	ldi	r24, 0x0F	; 15
    3a8e:	f8 01       	movw	r30, r16
    3a90:	81 a7       	std	Z+41, r24	; 0x29
                        isotp_send_flow_control(link, PCI_FLOW_STATUS_CONTINUE, link->receive_bs_count, ISO_TP_DEFAULT_ST_MIN);
    3a92:	4f e0       	ldi	r20, 0x0F	; 15
    3a94:	60 e0       	ldi	r22, 0x00	; 0
    3a96:	c8 01       	movw	r24, r16
    3a98:	8e dd       	rcall	.-1252   	; 0x35b6 <isotp_send_flow_control.isra.3.constprop.5>
    3a9a:	93 ce       	rjmp	.-730    	; 0x37c2 <isotp_on_can_message+0x2a>
    remaining_bytes = link->receive_size - link->receive_offset;
    if (remaining_bytes > sizeof(message->as.consecutive_frame.data)){
        remaining_bytes = sizeof(message->as.consecutive_frame.data);
    }
    if (remaining_bytes > len - 1){
        isotp_user_debug("Consecutive frame too short.");
    3a9c:	86 e8       	ldi	r24, 0x86	; 134
    3a9e:	92 e0       	ldi	r25, 0x02	; 2
    3aa0:	9f 93       	push	r25
    3aa2:	8f 93       	push	r24
    3aa4:	62 dd       	rcall	.-1340   	; 0x356a <isotp_user_debug>
    3aa6:	0f 90       	pop	r0
    3aa8:	0f 90       	pop	r0
    3aaa:	8b ce       	rjmp	.-746    	; 0x37c2 <isotp_on_can_message+0x2a>
    3aac:	80 e0       	ldi	r24, 0x00	; 0
    if (st_min >= 0xF1 && st_min <= 0xF9){
        ms = 1;
    } else if (st_min <= 0x7F) {
        ms = st_min;
    } else {
        ms = 0;
    3aae:	e8 ce       	rjmp	.-560    	; 0x3880 <isotp_on_can_message+0xe8>

00003ab0 <isotp_receive>:
    3ab0:	ef 92       	push	r14
    
    return;
}

int isotp_receive(IsoTpLink *link, uint8_t *payload, const uint16_t payload_size, uint16_t *out_size)
{
    3ab2:	ff 92       	push	r15
    3ab4:	0f 93       	push	r16
    3ab6:	1f 93       	push	r17
    3ab8:	cf 93       	push	r28
    3aba:	df 93       	push	r29
    3abc:	fc 01       	movw	r30, r24
    uint16_t copylen;
    
    if (ISOTP_RECEIVE_STATUS_FULL != link->receive_status){
    3abe:	80 a9       	ldd	r24, Z+48	; 0x30
    3ac0:	82 30       	cpi	r24, 0x02	; 2
    3ac2:	e1 f4       	brne	.+56     	; 0x3afc <isotp_receive+0x4c>
        return ISOTP_RET_NO_DATA;
    }

    copylen = link->receive_size;
    3ac4:	04 a1       	ldd	r16, Z+36	; 0x24
    3ac6:	15 a1       	ldd	r17, Z+37	; 0x25
    3ac8:	40 17       	cp	r20, r16
    3aca:	51 07       	cpc	r21, r17
    3acc:	a8 f0       	brcs	.+42     	; 0x3af8 <isotp_receive+0x48>
    3ace:	79 01       	movw	r14, r18
    3ad0:	cb 01       	movw	r24, r22
    3ad2:	ef 01       	movw	r28, r30
    if (copylen > payload_size){
        copylen = payload_size;
    }

    memcpy(payload, link->receive_buffer, copylen);
    3ad4:	60 a1       	ldd	r22, Z+32	; 0x20
    3ad6:	71 a1       	ldd	r23, Z+33	; 0x21
    3ad8:	a8 01       	movw	r20, r16
    3ada:	0e 94 1d 35 	call	0x6a3a	; 0x6a3a <memcpy>
    *out_size = copylen;
    3ade:	f7 01       	movw	r30, r14
    3ae0:	11 83       	std	Z+1, r17	; 0x01
    3ae2:	00 83       	st	Z, r16

    link->receive_status = ISOTP_RECEIVE_STATUS_IDLE;
    3ae4:	18 aa       	std	Y+48, r1	; 0x30

    return ISOTP_RET_OK;
    3ae6:	80 e0       	ldi	r24, 0x00	; 0
    3ae8:	90 e0       	ldi	r25, 0x00	; 0
}
    3aea:	df 91       	pop	r29
    3aec:	cf 91       	pop	r28
    3aee:	1f 91       	pop	r17
    3af0:	0f 91       	pop	r16
    3af2:	ff 90       	pop	r15
    3af4:	ef 90       	pop	r14
    3af6:	08 95       	ret
    3af8:	8a 01       	movw	r16, r20
    3afa:	e9 cf       	rjmp	.-46     	; 0x3ace <isotp_receive+0x1e>
int isotp_receive(IsoTpLink *link, uint8_t *payload, const uint16_t payload_size, uint16_t *out_size)
{
    uint16_t copylen;
    
    if (ISOTP_RECEIVE_STATUS_FULL != link->receive_status){
        return ISOTP_RET_NO_DATA;
    3afc:	8b ef       	ldi	r24, 0xFB	; 251
    3afe:	9f ef       	ldi	r25, 0xFF	; 255
    3b00:	f4 cf       	rjmp	.-24     	; 0x3aea <isotp_receive+0x3a>

00003b02 <isotp_init_link>:
}

void isotp_init_link(IsoTpLink *link, uint32_t sendid, 
                     uint8_t *sendbuf, uint16_t sendbufsize,
                     uint8_t *recvbuf, uint16_t recvbufsize)
{
    3b02:	cf 92       	push	r12
    3b04:	df 92       	push	r13
    3b06:	ef 92       	push	r14
    3b08:	ff 92       	push	r15
    3b0a:	0f 93       	push	r16
    3b0c:	1f 93       	push	r17
    3b0e:	fc 01       	movw	r30, r24
    memset(link, 0, sizeof(*link));
    3b10:	81 e3       	ldi	r24, 0x31	; 49
    3b12:	df 01       	movw	r26, r30
    3b14:	1d 92       	st	X+, r1
    3b16:	8a 95       	dec	r24
    3b18:	e9 f7       	brne	.-6      	; 0x3b14 <isotp_init_link+0x12>
    link->receive_status = ISOTP_RECEIVE_STATUS_IDLE;
    3b1a:	10 aa       	std	Z+48, r1	; 0x30
    link->send_status = ISOTP_SEND_STATUS_IDLE;
    3b1c:	13 8e       	std	Z+27, r1	; 0x1b
    link->send_arbitration_id = sendid;
    3b1e:	40 83       	st	Z, r20
    3b20:	51 83       	std	Z+1, r21	; 0x01
    3b22:	62 83       	std	Z+2, r22	; 0x02
    3b24:	73 83       	std	Z+3, r23	; 0x03
    link->send_buffer = sendbuf;
    3b26:	35 83       	std	Z+5, r19	; 0x05
    3b28:	24 83       	std	Z+4, r18	; 0x04
    link->send_buf_size = sendbufsize;
    3b2a:	17 83       	std	Z+7, r17	; 0x07
    3b2c:	06 83       	std	Z+6, r16	; 0x06
    link->receive_buffer = recvbuf;
    3b2e:	f1 a2       	std	Z+33, r15	; 0x21
    3b30:	e0 a2       	std	Z+32, r14	; 0x20
    link->recevie_buf_size = recvbufsize;
    3b32:	d3 a2       	std	Z+35, r13	; 0x23
    3b34:	c2 a2       	std	Z+34, r12	; 0x22
    
    return;
}
    3b36:	1f 91       	pop	r17
    3b38:	0f 91       	pop	r16
    3b3a:	ff 90       	pop	r15
    3b3c:	ef 90       	pop	r14
    3b3e:	df 90       	pop	r13
    3b40:	cf 90       	pop	r12
    3b42:	08 95       	ret

00003b44 <isotp_poll>:

void isotp_poll(IsoTpLink *link)
{
    3b44:	cf 92       	push	r12
    3b46:	df 92       	push	r13
    3b48:	ef 92       	push	r14
    3b4a:	ff 92       	push	r15
    3b4c:	0f 93       	push	r16
    3b4e:	1f 93       	push	r17
    3b50:	cf 93       	push	r28
    3b52:	df 93       	push	r29
    3b54:	cd b7       	in	r28, 0x3d	; 61
    3b56:	de b7       	in	r29, 0x3e	; 62
    3b58:	28 97       	sbiw	r28, 0x08	; 8
    3b5a:	0f b6       	in	r0, 0x3f	; 63
    3b5c:	f8 94       	cli
    3b5e:	de bf       	out	0x3e, r29	; 62
    3b60:	0f be       	out	0x3f, r0	; 63
    3b62:	cd bf       	out	0x3d, r28	; 61
    3b64:	8c 01       	movw	r16, r24
    int ret;

    /* only polling when operation in progress */
    if (ISOTP_SEND_STATUS_INPROGRESS == link->send_status){
    3b66:	fc 01       	movw	r30, r24
    3b68:	83 8d       	ldd	r24, Z+27	; 0x1b
    3b6a:	81 30       	cpi	r24, 0x01	; 1
    3b6c:	99 f0       	breq	.+38     	; 0x3b94 <isotp_poll+0x50>
            link->send_status = ISOTP_SEND_STATUS_ERROR;
        }
    }

    /* only polling when operation in progress */
    if (ISOTP_RECEIVE_STATUS_INPROGRESS == link->receive_status){
    3b6e:	f8 01       	movw	r30, r16
    3b70:	80 a9       	ldd	r24, Z+48	; 0x30
    3b72:	81 30       	cpi	r24, 0x01	; 1
    3b74:	b1 f1       	breq	.+108    	; 0x3be2 <isotp_poll+0x9e>
            link->receive_status = ISOTP_RECEIVE_STATUS_IDLE;
        }
    }

    return;
}
    3b76:	28 96       	adiw	r28, 0x08	; 8
    3b78:	0f b6       	in	r0, 0x3f	; 63
    3b7a:	f8 94       	cli
    3b7c:	de bf       	out	0x3e, r29	; 62
    3b7e:	0f be       	out	0x3f, r0	; 63
    3b80:	cd bf       	out	0x3d, r28	; 61
    3b82:	df 91       	pop	r29
    3b84:	cf 91       	pop	r28
    3b86:	1f 91       	pop	r17
    3b88:	0f 91       	pop	r16
    3b8a:	ff 90       	pop	r15
    3b8c:	ef 90       	pop	r14
    3b8e:	df 90       	pop	r13
    3b90:	cf 90       	pop	r12
    3b92:	08 95       	ret

    /* only polling when operation in progress */
    if (ISOTP_SEND_STATUS_INPROGRESS == link->send_status){

        /* continue send data */
        if (/* send data if bs_remain is invalid or bs_remain large than zero */
    3b94:	85 85       	ldd	r24, Z+13	; 0x0d
    3b96:	96 85       	ldd	r25, Z+14	; 0x0e
    3b98:	89 2b       	or	r24, r25
    3b9a:	79 f0       	breq	.+30     	; 0x3bba <isotp_poll+0x76>
            (ISOTP_INVALID_BS == link->send_bs_remain || link->send_bs_remain > 0) &&
    3b9c:	87 85       	ldd	r24, Z+15	; 0x0f
    3b9e:	88 23       	and	r24, r24
    3ba0:	91 f1       	breq	.+100    	; 0x3c06 <isotp_poll+0xc2>
            /* and if st_min is zero or go beyond interval time */
            (0 == link->send_st_min || (0 != link->send_st_min && IsoTpTimeAfter(isotp_user_get_ms(), link->send_timer_st)))){
    3ba2:	f8 01       	movw	r30, r16
    3ba4:	c1 88       	ldd	r12, Z+17	; 0x11
    3ba6:	d2 88       	ldd	r13, Z+18	; 0x12
    3ba8:	e3 88       	ldd	r14, Z+19	; 0x13
    3baa:	f4 88       	ldd	r15, Z+20	; 0x14
    3bac:	02 dd       	rcall	.-1532   	; 0x35b2 <isotp_user_get_ms>
    3bae:	c6 1a       	sub	r12, r22
    3bb0:	d7 0a       	sbc	r13, r23
    3bb2:	e8 0a       	sbc	r14, r24
    3bb4:	f9 0a       	sbc	r15, r25
    3bb6:	f7 fc       	sbrc	r15, 7
    3bb8:	26 c0       	rjmp	.+76     	; 0x3c06 <isotp_poll+0xc2>
                link->send_status = ISOTP_SEND_STATUS_ERROR;
            }
        }

        /* check timeout */
        if (IsoTpTimeAfter(isotp_user_get_ms(), link->send_timer_bs)){
    3bba:	f8 01       	movw	r30, r16
    3bbc:	c5 88       	ldd	r12, Z+21	; 0x15
    3bbe:	d6 88       	ldd	r13, Z+22	; 0x16
    3bc0:	e7 88       	ldd	r14, Z+23	; 0x17
    3bc2:	f0 8c       	ldd	r15, Z+24	; 0x18
    3bc4:	f6 dc       	rcall	.-1556   	; 0x35b2 <isotp_user_get_ms>
    3bc6:	c6 1a       	sub	r12, r22
    3bc8:	d7 0a       	sbc	r13, r23
    3bca:	e8 0a       	sbc	r14, r24
    3bcc:	f9 0a       	sbc	r15, r25
    3bce:	f7 fe       	sbrs	r15, 7
    3bd0:	ce cf       	rjmp	.-100    	; 0x3b6e <isotp_poll+0x2a>
            link->send_protocol_resault = ISOTP_PROTOCOL_RESAULT_TIMEOUT_BS;
    3bd2:	8e ef       	ldi	r24, 0xFE	; 254
    3bd4:	9f ef       	ldi	r25, 0xFF	; 255
    3bd6:	f8 01       	movw	r30, r16
    3bd8:	92 8f       	std	Z+26, r25	; 0x1a
    3bda:	81 8f       	std	Z+25, r24	; 0x19
            link->send_status = ISOTP_SEND_STATUS_ERROR;
    3bdc:	82 e0       	ldi	r24, 0x02	; 2
    3bde:	83 8f       	std	Z+27, r24	; 0x1b
    3be0:	c6 cf       	rjmp	.-116    	; 0x3b6e <isotp_poll+0x2a>

    /* only polling when operation in progress */
    if (ISOTP_RECEIVE_STATUS_INPROGRESS == link->receive_status){
        
        /* check timeout */
        if (IsoTpTimeAfter(isotp_user_get_ms(), link->receive_timer_cr)){
    3be2:	c2 a4       	ldd	r12, Z+42	; 0x2a
    3be4:	d3 a4       	ldd	r13, Z+43	; 0x2b
    3be6:	e4 a4       	ldd	r14, Z+44	; 0x2c
    3be8:	f5 a4       	ldd	r15, Z+45	; 0x2d
    3bea:	e3 dc       	rcall	.-1594   	; 0x35b2 <isotp_user_get_ms>
    3bec:	c6 1a       	sub	r12, r22
    3bee:	d7 0a       	sbc	r13, r23
    3bf0:	e8 0a       	sbc	r14, r24
    3bf2:	f9 0a       	sbc	r15, r25
    3bf4:	f7 fe       	sbrs	r15, 7
    3bf6:	bf cf       	rjmp	.-130    	; 0x3b76 <isotp_poll+0x32>
            link->receive_protocol_resault = ISOTP_PROTOCOL_RESAULT_TIMEOUT_CR;
    3bf8:	8d ef       	ldi	r24, 0xFD	; 253
    3bfa:	9f ef       	ldi	r25, 0xFF	; 255
    3bfc:	f8 01       	movw	r30, r16
    3bfe:	97 a7       	std	Z+47, r25	; 0x2f
    3c00:	86 a7       	std	Z+46, r24	; 0x2e
            link->receive_status = ISOTP_RECEIVE_STATUS_IDLE;
    3c02:	10 aa       	std	Z+48, r1	; 0x30
        }
    }

    return;
    3c04:	b8 cf       	rjmp	.-144    	; 0x3b76 <isotp_poll+0x32>
	IsoTpCanMessage message;
    uint8_t data_length;
    int ret;

    /* multi frame message length must greater than 7  */
    assert(link->send_size > 7);
    3c06:	f8 01       	movw	r30, r16
    3c08:	e0 84       	ldd	r14, Z+8	; 0x08
    3c0a:	f1 84       	ldd	r15, Z+9	; 0x09
    3c0c:	f8 e0       	ldi	r31, 0x08	; 8
    3c0e:	ef 16       	cp	r14, r31
    3c10:	f1 04       	cpc	r15, r1
    3c12:	08 f4       	brcc	.+2      	; 0x3c16 <isotp_poll+0xd2>
    3c14:	74 c0       	rjmp	.+232    	; 0x3cfe <isotp_poll+0x1ba>

    /* setup message  */
    message.as.consecutive_frame.type = TSOTP_PCI_TYPE_CONSECUTIVE_FRAME;
    message.as.consecutive_frame.SN = link->send_sn;
    3c16:	f8 01       	movw	r30, r16
    3c18:	84 85       	ldd	r24, Z+12	; 0x0c
    3c1a:	82 95       	swap	r24
    3c1c:	80 7f       	andi	r24, 0xF0	; 240
    3c1e:	82 60       	ori	r24, 0x02	; 2
    3c20:	89 83       	std	Y+1, r24	; 0x01
    data_length = link->send_size - link->send_offset;
    3c22:	22 85       	ldd	r18, Z+10	; 0x0a
    3c24:	33 85       	ldd	r19, Z+11	; 0x0b
    3c26:	8e 2d       	mov	r24, r14
    3c28:	82 1b       	sub	r24, r18
    if (data_length > sizeof(message.as.consecutive_frame.data)){
        data_length = sizeof(message.as.consecutive_frame.data);
    }
    (void)memcpy(message.as.consecutive_frame.data, link->send_buffer + link->send_offset, data_length);
    3c2a:	88 30       	cpi	r24, 0x08	; 8
    3c2c:	08 f0       	brcs	.+2      	; 0x3c30 <isotp_poll+0xec>
    3c2e:	87 e0       	ldi	r24, 0x07	; 7
    3c30:	e8 2e       	mov	r14, r24
    3c32:	f1 2c       	mov	r15, r1
    3c34:	f8 01       	movw	r30, r16
    3c36:	64 81       	ldd	r22, Z+4	; 0x04
    3c38:	75 81       	ldd	r23, Z+5	; 0x05
    3c3a:	62 0f       	add	r22, r18
    3c3c:	73 1f       	adc	r23, r19
    3c3e:	a7 01       	movw	r20, r14
    3c40:	ce 01       	movw	r24, r28
    3c42:	02 96       	adiw	r24, 0x02	; 2
    3c44:	0e 94 1d 35 	call	0x6a3a	; 0x6a3a <memcpy>

    /* send message */
#ifdef ISO_TP_FRAME_PADDING
    (void)memset(message.as.consecutive_frame.data + data_length,
    3c48:	47 e0       	ldi	r20, 0x07	; 7
    3c4a:	50 e0       	ldi	r21, 0x00	; 0
    3c4c:	4e 19       	sub	r20, r14
    3c4e:	5f 09       	sbc	r21, r15
    3c50:	60 e0       	ldi	r22, 0x00	; 0
    3c52:	70 e0       	ldi	r23, 0x00	; 0
    3c54:	82 e0       	ldi	r24, 0x02	; 2
    3c56:	90 e0       	ldi	r25, 0x00	; 0
    3c58:	8c 0f       	add	r24, r28
    3c5a:	9d 1f       	adc	r25, r29
    3c5c:	8e 0d       	add	r24, r14
    3c5e:	9f 1d       	adc	r25, r15
    3c60:	0e 94 37 35 	call	0x6a6e	; 0x6a6e <memset>
           0,
           sizeof(message.as.consecutive_frame.data) - data_length);
    ret = isotp_user_send_can(link->send_arbitration_id,
    3c64:	f8 01       	movw	r30, r16
    3c66:	60 81       	ld	r22, Z
    3c68:	71 81       	ldd	r23, Z+1	; 0x01
    3c6a:	82 81       	ldd	r24, Z+2	; 0x02
    3c6c:	93 81       	ldd	r25, Z+3	; 0x03
    3c6e:	28 e0       	ldi	r18, 0x08	; 8
    3c70:	ae 01       	movw	r20, r28
    3c72:	4f 5f       	subi	r20, 0xFF	; 255
    3c74:	5f 4f       	sbci	r21, 0xFF	; 255
    3c76:	7b dc       	rcall	.-1802   	; 0x356e <isotp_user_send_can>
#else
    ret = isotp_user_send_can(link->send_arbitration_id,
                           message.as.data_array.ptr,
                           data_length + 1);
#endif
    if (ISOTP_RET_OK == ret){
    3c78:	89 2b       	or	r24, r25
    3c7a:	d1 f5       	brne	.+116    	; 0x3cf0 <isotp_poll+0x1ac>
        link->send_offset += data_length;
    3c7c:	f8 01       	movw	r30, r16
    3c7e:	82 85       	ldd	r24, Z+10	; 0x0a
    3c80:	93 85       	ldd	r25, Z+11	; 0x0b
    3c82:	e8 0e       	add	r14, r24
    3c84:	f9 1e       	adc	r15, r25
    3c86:	f3 86       	std	Z+11, r15	; 0x0b
    3c88:	e2 86       	std	Z+10, r14	; 0x0a
        if (++(link->send_sn) > 0x0F){
    3c8a:	84 85       	ldd	r24, Z+12	; 0x0c
    3c8c:	8f 5f       	subi	r24, 0xFF	; 255
    3c8e:	80 31       	cpi	r24, 0x10	; 16
    3c90:	98 f1       	brcs	.+102    	; 0x3cf8 <isotp_poll+0x1b4>
            link->send_sn = 0;
    3c92:	14 86       	std	Z+12, r1	; 0x0c
            /* and if st_min is zero or go beyond interval time */
            (0 == link->send_st_min || (0 != link->send_st_min && IsoTpTimeAfter(isotp_user_get_ms(), link->send_timer_st)))){
            
            ret = isotp_send_consecutive_frame(link);
            if (ISOTP_RET_OK == ret){
                if (ISOTP_INVALID_BS != link->send_bs_remain){
    3c94:	f8 01       	movw	r30, r16
    3c96:	85 85       	ldd	r24, Z+13	; 0x0d
    3c98:	96 85       	ldd	r25, Z+14	; 0x0e
    3c9a:	8f 3f       	cpi	r24, 0xFF	; 255
    3c9c:	ff ef       	ldi	r31, 0xFF	; 255
    3c9e:	9f 07       	cpc	r25, r31
    3ca0:	21 f0       	breq	.+8      	; 0x3caa <isotp_poll+0x166>
                    link->send_bs_remain -= 1;
    3ca2:	01 97       	sbiw	r24, 0x01	; 1
    3ca4:	f8 01       	movw	r30, r16
    3ca6:	96 87       	std	Z+14, r25	; 0x0e
                }
                link->send_timer_bs = isotp_user_get_ms() + ISO_TP_DEFAULT_RESPONSE_TIMEOUT;
    3ca8:	85 87       	std	Z+13, r24	; 0x0d
    3caa:	83 dc       	rcall	.-1786   	; 0x35b2 <isotp_user_get_ms>
    3cac:	dc 01       	movw	r26, r24
    3cae:	cb 01       	movw	r24, r22
    3cb0:	8c 59       	subi	r24, 0x9C	; 156
    3cb2:	9f 4f       	sbci	r25, 0xFF	; 255
    3cb4:	af 4f       	sbci	r26, 0xFF	; 255
    3cb6:	bf 4f       	sbci	r27, 0xFF	; 255
    3cb8:	f8 01       	movw	r30, r16
    3cba:	85 8b       	std	Z+21, r24	; 0x15
    3cbc:	96 8b       	std	Z+22, r25	; 0x16
    3cbe:	a7 8b       	std	Z+23, r26	; 0x17
                link->send_timer_st = isotp_user_get_ms() + link->send_st_min;
    3cc0:	b0 8f       	std	Z+24, r27	; 0x18
    3cc2:	77 dc       	rcall	.-1810   	; 0x35b2 <isotp_user_get_ms>
    3cc4:	f8 01       	movw	r30, r16
    3cc6:	27 85       	ldd	r18, Z+15	; 0x0f
    3cc8:	dc 01       	movw	r26, r24
    3cca:	cb 01       	movw	r24, r22
    3ccc:	82 0f       	add	r24, r18
    3cce:	91 1d       	adc	r25, r1
    3cd0:	a1 1d       	adc	r26, r1
    3cd2:	b1 1d       	adc	r27, r1
    3cd4:	81 8b       	std	Z+17, r24	; 0x11
    3cd6:	92 8b       	std	Z+18, r25	; 0x12
    3cd8:	a3 8b       	std	Z+19, r26	; 0x13
    3cda:	b4 8b       	std	Z+20, r27	; 0x14

                /* check if send finish */
                if (link->send_offset >= link->send_size){
    3cdc:	22 85       	ldd	r18, Z+10	; 0x0a
    3cde:	33 85       	ldd	r19, Z+11	; 0x0b
    3ce0:	80 85       	ldd	r24, Z+8	; 0x08
    3ce2:	91 85       	ldd	r25, Z+9	; 0x09
    3ce4:	28 17       	cp	r18, r24
    3ce6:	39 07       	cpc	r19, r25
    3ce8:	08 f4       	brcc	.+2      	; 0x3cec <isotp_poll+0x1a8>
    3cea:	67 cf       	rjmp	.-306    	; 0x3bba <isotp_poll+0x76>
                    link->send_status = ISOTP_SEND_STATUS_IDLE;
    3cec:	13 8e       	std	Z+27, r1	; 0x1b
    3cee:	65 cf       	rjmp	.-310    	; 0x3bba <isotp_poll+0x76>
                }
            } else {
                link->send_status = ISOTP_SEND_STATUS_ERROR;
    3cf0:	82 e0       	ldi	r24, 0x02	; 2
    3cf2:	f8 01       	movw	r30, r16
    3cf4:	83 8f       	std	Z+27, r24	; 0x1b
    3cf6:	61 cf       	rjmp	.-318    	; 0x3bba <isotp_poll+0x76>
                           message.as.data_array.ptr,
                           data_length + 1);
#endif
    if (ISOTP_RET_OK == ret){
        link->send_offset += data_length;
        if (++(link->send_sn) > 0x0F){
    3cf8:	f8 01       	movw	r30, r16
    3cfa:	84 87       	std	Z+12, r24	; 0x0c
    3cfc:	cb cf       	rjmp	.-106    	; 0x3c94 <isotp_poll+0x150>
	IsoTpCanMessage message;
    uint8_t data_length;
    int ret;

    /* multi frame message length must greater than 7  */
    assert(link->send_size > 7);
    3cfe:	0e 94 10 35 	call	0x6a20	; 0x6a20 <abort>

00003d02 <isotpi_send>:
static uint8_t g_isotpRecvBuf[128];
static uint8_t g_isotpSendBuf[128];



int isotpi_send(can_id_t id, uint8_t payload_size , uint8_t payload[payload_size]){
    3d02:	8f 92       	push	r8
    3d04:	9f 92       	push	r9
    3d06:	bf 92       	push	r11
    3d08:	cf 92       	push	r12
    3d0a:	df 92       	push	r13
    3d0c:	ef 92       	push	r14
    3d0e:	ff 92       	push	r15
    3d10:	0f 93       	push	r16
    3d12:	1f 93       	push	r17
    3d14:	cf 93       	push	r28
    3d16:	df 93       	push	r29
    3d18:	00 d0       	rcall	.+0      	; 0x3d1a <isotpi_send+0x18>
    3d1a:	00 d0       	rcall	.+0      	; 0x3d1c <isotpi_send+0x1a>
    3d1c:	cd b7       	in	r28, 0x3d	; 61
    3d1e:	de b7       	in	r29, 0x3e	; 62
    3d20:	b6 2e       	mov	r11, r22
    3d22:	4a 01       	movw	r8, r20
	uint32_t arbitration_id = 0;
    3d24:	19 82       	std	Y+1, r1	; 0x01
    3d26:	1a 82       	std	Y+2, r1	; 0x02
    3d28:	1b 82       	std	Y+3, r1	; 0x03
    3d2a:	1c 82       	std	Y+4, r1	; 0x04
	memcpy(&arbitration_id,id,2);
    3d2c:	fc 01       	movw	r30, r24
    3d2e:	80 81       	ld	r24, Z
    3d30:	91 81       	ldd	r25, Z+1	; 0x01
    3d32:	9a 83       	std	Y+2, r25	; 0x02
    3d34:	89 83       	std	Y+1, r24	; 0x01
	isotp_init_link(&g_link,arbitration_id, g_isotpSendBuf, sizeof(g_isotpSendBuf),g_isotpRecvBuf, sizeof(g_isotpRecvBuf));
    3d36:	49 81       	ldd	r20, Y+1	; 0x01
    3d38:	5a 81       	ldd	r21, Y+2	; 0x02
    3d3a:	6b 81       	ldd	r22, Y+3	; 0x03
    3d3c:	7c 81       	ldd	r23, Y+4	; 0x04
    3d3e:	80 e8       	ldi	r24, 0x80	; 128
    3d40:	c8 2e       	mov	r12, r24
    3d42:	d1 2c       	mov	r13, r1
    3d44:	9a ea       	ldi	r25, 0xAA	; 170
    3d46:	e9 2e       	mov	r14, r25
    3d48:	95 e0       	ldi	r25, 0x05	; 5
    3d4a:	f9 2e       	mov	r15, r25
    3d4c:	00 e8       	ldi	r16, 0x80	; 128
    3d4e:	10 e0       	ldi	r17, 0x00	; 0
    3d50:	2a e2       	ldi	r18, 0x2A	; 42
    3d52:	35 e0       	ldi	r19, 0x05	; 5
    3d54:	8a e2       	ldi	r24, 0x2A	; 42
    3d56:	96 e0       	ldi	r25, 0x06	; 6
    3d58:	d4 de       	rcall	.-600    	; 0x3b02 <isotp_init_link>
	return isotp_send(&g_link, payload, payload_size);
    3d5a:	4b 2d       	mov	r20, r11
    3d5c:	50 e0       	ldi	r21, 0x00	; 0
    3d5e:	b4 01       	movw	r22, r8
    3d60:	8a e2       	ldi	r24, 0x2A	; 42
    3d62:	96 e0       	ldi	r25, 0x06	; 6
}
    3d64:	0f 90       	pop	r0
    3d66:	0f 90       	pop	r0
    3d68:	0f 90       	pop	r0
    3d6a:	0f 90       	pop	r0
    3d6c:	df 91       	pop	r29
    3d6e:	cf 91       	pop	r28
    3d70:	1f 91       	pop	r17
    3d72:	0f 91       	pop	r16
    3d74:	ff 90       	pop	r15
    3d76:	ef 90       	pop	r14
    3d78:	df 90       	pop	r13
    3d7a:	cf 90       	pop	r12
    3d7c:	bf 90       	pop	r11
    3d7e:	9f 90       	pop	r9

int isotpi_send(can_id_t id, uint8_t payload_size , uint8_t payload[payload_size]){
	uint32_t arbitration_id = 0;
	memcpy(&arbitration_id,id,2);
	isotp_init_link(&g_link,arbitration_id, g_isotpSendBuf, sizeof(g_isotpSendBuf),g_isotpRecvBuf, sizeof(g_isotpRecvBuf));
	return isotp_send(&g_link, payload, payload_size);
    3d80:	8f 90       	pop	r8
    3d82:	fd cc       	rjmp	.-1542   	; 0x377e <isotp_send>

00003d84 <isotpi_receive>:
}

int isotpi_receive(can_id_t id, uint8_t payload_size , uint8_t payload[payload_size]){
    3d84:	6f 92       	push	r6
    3d86:	7f 92       	push	r7
    3d88:	8f 92       	push	r8
    3d8a:	9f 92       	push	r9
    3d8c:	bf 92       	push	r11
    3d8e:	cf 92       	push	r12
    3d90:	df 92       	push	r13
    3d92:	ef 92       	push	r14
    3d94:	ff 92       	push	r15
    3d96:	0f 93       	push	r16
    3d98:	1f 93       	push	r17
    3d9a:	cf 93       	push	r28
    3d9c:	df 93       	push	r29
    3d9e:	cd b7       	in	r28, 0x3d	; 61
    3da0:	de b7       	in	r29, 0x3e	; 62
    3da2:	2e 97       	sbiw	r28, 0x0e	; 14
    3da4:	0f b6       	in	r0, 0x3f	; 63
    3da6:	f8 94       	cli
    3da8:	de bf       	out	0x3e, r29	; 62
    3daa:	0f be       	out	0x3f, r0	; 63
    3dac:	cd bf       	out	0x3d, r28	; 61
    3dae:	4c 01       	movw	r8, r24
    3db0:	b6 2e       	mov	r11, r22
    3db2:	3a 01       	movw	r6, r20
	uint32_t arbitration_id = 0;
    3db4:	19 86       	std	Y+9, r1	; 0x09
    3db6:	1a 86       	std	Y+10, r1	; 0x0a
    3db8:	1b 86       	std	Y+11, r1	; 0x0b
    3dba:	1c 86       	std	Y+12, r1	; 0x0c
	memcpy(&arbitration_id,id,2);
    3dbc:	fc 01       	movw	r30, r24
    3dbe:	80 81       	ld	r24, Z
    3dc0:	91 81       	ldd	r25, Z+1	; 0x01
    3dc2:	9a 87       	std	Y+10, r25	; 0x0a
    3dc4:	89 87       	std	Y+9, r24	; 0x09
	isotp_init_link(&g_link,arbitration_id, g_isotpSendBuf, sizeof(g_isotpSendBuf),g_isotpRecvBuf, sizeof(g_isotpRecvBuf));
    3dc6:	49 85       	ldd	r20, Y+9	; 0x09
    3dc8:	5a 85       	ldd	r21, Y+10	; 0x0a
    3dca:	6b 85       	ldd	r22, Y+11	; 0x0b
    3dcc:	7c 85       	ldd	r23, Y+12	; 0x0c
    3dce:	80 e8       	ldi	r24, 0x80	; 128
    3dd0:	c8 2e       	mov	r12, r24
    3dd2:	d1 2c       	mov	r13, r1
    3dd4:	9a ea       	ldi	r25, 0xAA	; 170
    3dd6:	e9 2e       	mov	r14, r25
    3dd8:	95 e0       	ldi	r25, 0x05	; 5
    3dda:	f9 2e       	mov	r15, r25
    3ddc:	00 e8       	ldi	r16, 0x80	; 128
    3dde:	10 e0       	ldi	r17, 0x00	; 0
    3de0:	2a e2       	ldi	r18, 0x2A	; 42
    3de2:	35 e0       	ldi	r19, 0x05	; 5
    3de4:	8a e2       	ldi	r24, 0x2A	; 42
    3de6:	96 e0       	ldi	r25, 0x06	; 6
    3de8:	8c de       	rcall	.-744    	; 0x3b02 <isotp_init_link>
	can_msg_t message;
	can_receive_message(0,id,zero_mask,message,8);
    3dea:	08 e0       	ldi	r16, 0x08	; 8
    3dec:	10 e0       	ldi	r17, 0x00	; 0
    3dee:	9e 01       	movw	r18, r28
    3df0:	2f 5f       	subi	r18, 0xFF	; 255
    3df2:	3f 4f       	sbci	r19, 0xFF	; 255
    3df4:	46 ec       	ldi	r20, 0xC6	; 198
    3df6:	52 e0       	ldi	r21, 0x02	; 2
    3df8:	b4 01       	movw	r22, r8
    3dfa:	80 e0       	ldi	r24, 0x00	; 0
    3dfc:	0e 94 af 03 	call	0x75e	; 0x75e <can_receive_message>
	isotp_on_can_message(&g_link, message, 8);
    3e00:	48 e0       	ldi	r20, 0x08	; 8
    3e02:	be 01       	movw	r22, r28
    3e04:	6f 5f       	subi	r22, 0xFF	; 255
    3e06:	7f 4f       	sbci	r23, 0xFF	; 255
    3e08:	8a e2       	ldi	r24, 0x2A	; 42
    3e0a:	96 e0       	ldi	r25, 0x06	; 6
    3e0c:	c5 dc       	rcall	.-1654   	; 0x3798 <isotp_on_can_message>
	uint16_t out_size;
	return isotp_receive(&g_link, payload, payload_size, &out_size);
    3e0e:	4b 2d       	mov	r20, r11
    3e10:	50 e0       	ldi	r21, 0x00	; 0
    3e12:	9e 01       	movw	r18, r28
    3e14:	23 5f       	subi	r18, 0xF3	; 243
    3e16:	3f 4f       	sbci	r19, 0xFF	; 255
    3e18:	b3 01       	movw	r22, r6
    3e1a:	8a e2       	ldi	r24, 0x2A	; 42
    3e1c:	96 e0       	ldi	r25, 0x06	; 6
    3e1e:	48 de       	rcall	.-880    	; 0x3ab0 <isotp_receive>
}
    3e20:	2e 96       	adiw	r28, 0x0e	; 14
    3e22:	0f b6       	in	r0, 0x3f	; 63
    3e24:	f8 94       	cli
    3e26:	de bf       	out	0x3e, r29	; 62
    3e28:	0f be       	out	0x3f, r0	; 63
    3e2a:	cd bf       	out	0x3d, r28	; 61
    3e2c:	df 91       	pop	r29
    3e2e:	cf 91       	pop	r28
    3e30:	1f 91       	pop	r17
    3e32:	0f 91       	pop	r16
    3e34:	ff 90       	pop	r15
    3e36:	ef 90       	pop	r14
    3e38:	df 90       	pop	r13
    3e3a:	cf 90       	pop	r12
    3e3c:	bf 90       	pop	r11
    3e3e:	9f 90       	pop	r9
    3e40:	8f 90       	pop	r8
    3e42:	7f 90       	pop	r7
    3e44:	6f 90       	pop	r6
    3e46:	08 95       	ret

00003e48 <isotpi_send_multi>:

int isotpi_send_multi(can_id_t id, uint8_t payload_size ,uint8_t payload[payload_size]){
    3e48:	8f 92       	push	r8
    3e4a:	9f 92       	push	r9
    3e4c:	bf 92       	push	r11
    3e4e:	cf 92       	push	r12
    3e50:	df 92       	push	r13
    3e52:	ef 92       	push	r14
    3e54:	ff 92       	push	r15
    3e56:	0f 93       	push	r16
    3e58:	1f 93       	push	r17
    3e5a:	cf 93       	push	r28
    3e5c:	df 93       	push	r29
    3e5e:	cd b7       	in	r28, 0x3d	; 61
    3e60:	de b7       	in	r29, 0x3e	; 62
    3e62:	2f 97       	sbiw	r28, 0x0f	; 15
    3e64:	0f b6       	in	r0, 0x3f	; 63
    3e66:	f8 94       	cli
    3e68:	de bf       	out	0x3e, r29	; 62
    3e6a:	0f be       	out	0x3f, r0	; 63
    3e6c:	cd bf       	out	0x3d, r28	; 61
    3e6e:	b6 2e       	mov	r11, r22
    3e70:	4a 01       	movw	r8, r20
	uint32_t arbitration_id = 0;
    3e72:	19 86       	std	Y+9, r1	; 0x09
    3e74:	1a 86       	std	Y+10, r1	; 0x0a
    3e76:	1b 86       	std	Y+11, r1	; 0x0b
    3e78:	1c 86       	std	Y+12, r1	; 0x0c
	memcpy(&arbitration_id,id,2);
    3e7a:	fc 01       	movw	r30, r24
    3e7c:	80 81       	ld	r24, Z
    3e7e:	91 81       	ldd	r25, Z+1	; 0x01
    3e80:	9a 87       	std	Y+10, r25	; 0x0a
    3e82:	89 87       	std	Y+9, r24	; 0x09
	isotp_init_link(&g_link,arbitration_id, g_isotpSendBuf, sizeof(g_isotpSendBuf),g_isotpRecvBuf, sizeof(g_isotpRecvBuf));
    3e84:	49 85       	ldd	r20, Y+9	; 0x09
    3e86:	5a 85       	ldd	r21, Y+10	; 0x0a
    3e88:	6b 85       	ldd	r22, Y+11	; 0x0b
    3e8a:	7c 85       	ldd	r23, Y+12	; 0x0c
    3e8c:	80 e8       	ldi	r24, 0x80	; 128
    3e8e:	c8 2e       	mov	r12, r24
    3e90:	d1 2c       	mov	r13, r1
    3e92:	9a ea       	ldi	r25, 0xAA	; 170
    3e94:	e9 2e       	mov	r14, r25
    3e96:	95 e0       	ldi	r25, 0x05	; 5
    3e98:	f9 2e       	mov	r15, r25
    3e9a:	00 e8       	ldi	r16, 0x80	; 128
    3e9c:	10 e0       	ldi	r17, 0x00	; 0
    3e9e:	2a e2       	ldi	r18, 0x2A	; 42
    3ea0:	35 e0       	ldi	r19, 0x05	; 5
    3ea2:	8a e2       	ldi	r24, 0x2A	; 42
    3ea4:	96 e0       	ldi	r25, 0x06	; 6
    3ea6:	2d de       	rcall	.-934    	; 0x3b02 <isotp_init_link>

	can_enable_receive(1,zero_mask);
    3ea8:	66 ec       	ldi	r22, 0xC6	; 198
    3eaa:	72 e0       	ldi	r23, 0x02	; 2
    3eac:	81 e0       	ldi	r24, 0x01	; 1
    3eae:	0e 94 da 02 	call	0x5b4	; 0x5b4 <can_enable_receive>
	/* And send message with isotp_send */
	isotp_send(&g_link, payload, payload_size);
    3eb2:	4b 2d       	mov	r20, r11
    3eb4:	50 e0       	ldi	r21, 0x00	; 0
    3eb6:	b4 01       	movw	r22, r8
    3eb8:	8a e2       	ldi	r24, 0x2A	; 42
    3eba:	96 e0       	ldi	r25, 0x06	; 6
    3ebc:	60 dc       	rcall	.-1856   	; 0x377e <isotp_send>
	can_msg_t message;
	can_id_t message_id;
	uint8_t len;
	uint8_t mobnr;
	
	mobnr = can_wait_for_receive();
    3ebe:	0e 94 57 03 	call	0x6ae	; 0x6ae <can_wait_for_receive>
	
	can_receive_message2(mobnr, message_id, message, &len);
    3ec2:	9e 01       	movw	r18, r28
    3ec4:	21 5f       	subi	r18, 0xF1	; 241
    3ec6:	3f 4f       	sbci	r19, 0xFF	; 255
    3ec8:	ae 01       	movw	r20, r28
    3eca:	4f 5f       	subi	r20, 0xFF	; 255
    3ecc:	5f 4f       	sbci	r21, 0xFF	; 255
    3ece:	be 01       	movw	r22, r28
    3ed0:	63 5f       	subi	r22, 0xF3	; 243
    3ed2:	7f 4f       	sbci	r23, 0xFF	; 255
    3ed4:	90 e0       	ldi	r25, 0x00	; 0
    3ed6:	0e 94 61 03 	call	0x6c2	; 0x6c2 <can_receive_message2>
	isotp_on_can_message(&g_link,message,len);
    3eda:	4f 85       	ldd	r20, Y+15	; 0x0f
    3edc:	be 01       	movw	r22, r28
    3ede:	6f 5f       	subi	r22, 0xFF	; 255
    3ee0:	7f 4f       	sbci	r23, 0xFF	; 255
    3ee2:	8a e2       	ldi	r24, 0x2A	; 42
    3ee4:	96 e0       	ldi	r25, 0x06	; 6
    3ee6:	58 dc       	rcall	.-1872   	; 0x3798 <isotp_on_can_message>
    3ee8:	02 c0       	rjmp	.+4      	; 0x3eee <isotpi_send_multi+0xa6>
		if(g_link.send_status == ISOTP_SEND_STATUS_IDLE){
			can_free_mob(1);
			return 0;
		}
		
		if(g_link.send_status == ISOTP_SEND_STATUS_ERROR){
    3eea:	82 30       	cpi	r24, 0x02	; 2
	can_receive_message2(mobnr, message_id, message, &len);
	isotp_on_can_message(&g_link,message,len);
	
	while(1){
		
		isotp_poll(&g_link);
    3eec:	f1 f0       	breq	.+60     	; 0x3f2a <isotpi_send_multi+0xe2>
    3eee:	8a e2       	ldi	r24, 0x2A	; 42
    3ef0:	96 e0       	ldi	r25, 0x06	; 6
    3ef2:	28 de       	rcall	.-944    	; 0x3b44 <isotp_poll>
		
		if(g_link.send_status == ISOTP_SEND_STATUS_IDLE){
    3ef4:	80 91 45 06 	lds	r24, 0x0645	; 0x800645 <g_link+0x1b>
    3ef8:	81 11       	cpse	r24, r1
    3efa:	f7 cf       	rjmp	.-18     	; 0x3eea <isotpi_send_multi+0xa2>
			can_free_mob(1);
    3efc:	81 e0       	ldi	r24, 0x01	; 1
    3efe:	0e 94 22 03 	call	0x644	; 0x644 <can_free_mob>
			return 0;
    3f02:	80 e0       	ldi	r24, 0x00	; 0
    3f04:	90 e0       	ldi	r25, 0x00	; 0
			return 1;
		}
		
	}
	
}
    3f06:	2f 96       	adiw	r28, 0x0f	; 15
    3f08:	0f b6       	in	r0, 0x3f	; 63
    3f0a:	f8 94       	cli
    3f0c:	de bf       	out	0x3e, r29	; 62
    3f0e:	0f be       	out	0x3f, r0	; 63
    3f10:	cd bf       	out	0x3d, r28	; 61
    3f12:	df 91       	pop	r29
    3f14:	cf 91       	pop	r28
    3f16:	1f 91       	pop	r17
    3f18:	0f 91       	pop	r16
    3f1a:	ff 90       	pop	r15
    3f1c:	ef 90       	pop	r14
    3f1e:	df 90       	pop	r13
    3f20:	cf 90       	pop	r12
    3f22:	bf 90       	pop	r11
    3f24:	9f 90       	pop	r9
    3f26:	8f 90       	pop	r8
    3f28:	08 95       	ret
			can_free_mob(1);
			return 0;
		}
		
		if(g_link.send_status == ISOTP_SEND_STATUS_ERROR){
			can_free_mob(1);
    3f2a:	81 e0       	ldi	r24, 0x01	; 1
    3f2c:	0e 94 22 03 	call	0x644	; 0x644 <can_free_mob>
			return 1;
    3f30:	81 e0       	ldi	r24, 0x01	; 1
    3f32:	90 e0       	ldi	r25, 0x00	; 0
    3f34:	e8 cf       	rjmp	.-48     	; 0x3f06 <isotpi_send_multi+0xbe>

00003f36 <isotpi_receive_multi>:
		
	}
	
}

int isotpi_receive_multi(can_id_t id_send, can_id_t id_rec, uint8_t payload_size, uint8_t payload[payload_size]){
    3f36:	7f 92       	push	r7
    3f38:	8f 92       	push	r8
    3f3a:	9f 92       	push	r9
    3f3c:	af 92       	push	r10
    3f3e:	bf 92       	push	r11
    3f40:	cf 92       	push	r12
    3f42:	df 92       	push	r13
    3f44:	ef 92       	push	r14
    3f46:	ff 92       	push	r15
    3f48:	0f 93       	push	r16
    3f4a:	1f 93       	push	r17
    3f4c:	cf 93       	push	r28
    3f4e:	df 93       	push	r29
    3f50:	cd b7       	in	r28, 0x3d	; 61
    3f52:	de b7       	in	r29, 0x3e	; 62
    3f54:	2f 97       	sbiw	r28, 0x0f	; 15
    3f56:	0f b6       	in	r0, 0x3f	; 63
    3f58:	f8 94       	cli
    3f5a:	de bf       	out	0x3e, r29	; 62
    3f5c:	0f be       	out	0x3f, r0	; 63
    3f5e:	cd bf       	out	0x3d, r28	; 61
    3f60:	4b 01       	movw	r8, r22
    3f62:	74 2e       	mov	r7, r20
    3f64:	59 01       	movw	r10, r18
	uint32_t arbitration_id = 0;
    3f66:	19 86       	std	Y+9, r1	; 0x09
    3f68:	1a 86       	std	Y+10, r1	; 0x0a
    3f6a:	1b 86       	std	Y+11, r1	; 0x0b
    3f6c:	1c 86       	std	Y+12, r1	; 0x0c
	memcpy(&arbitration_id,id_send,2);
    3f6e:	fc 01       	movw	r30, r24
    3f70:	80 81       	ld	r24, Z
    3f72:	91 81       	ldd	r25, Z+1	; 0x01
    3f74:	9a 87       	std	Y+10, r25	; 0x0a
    3f76:	89 87       	std	Y+9, r24	; 0x09
	isotp_init_link(&g_link, arbitration_id, g_isotpSendBuf, sizeof(g_isotpSendBuf), g_isotpRecvBuf, sizeof(g_isotpRecvBuf));
    3f78:	49 85       	ldd	r20, Y+9	; 0x09
    3f7a:	5a 85       	ldd	r21, Y+10	; 0x0a
    3f7c:	6b 85       	ldd	r22, Y+11	; 0x0b
    3f7e:	7c 85       	ldd	r23, Y+12	; 0x0c
    3f80:	80 e8       	ldi	r24, 0x80	; 128
    3f82:	c8 2e       	mov	r12, r24
    3f84:	d1 2c       	mov	r13, r1
    3f86:	9a ea       	ldi	r25, 0xAA	; 170
    3f88:	e9 2e       	mov	r14, r25
    3f8a:	95 e0       	ldi	r25, 0x05	; 5
    3f8c:	f9 2e       	mov	r15, r25
    3f8e:	00 e8       	ldi	r16, 0x80	; 128
    3f90:	10 e0       	ldi	r17, 0x00	; 0
    3f92:	2a e2       	ldi	r18, 0x2A	; 42
    3f94:	35 e0       	ldi	r19, 0x05	; 5
    3f96:	8a e2       	ldi	r24, 0x2A	; 42
    3f98:	96 e0       	ldi	r25, 0x06	; 6
    3f9a:	b3 dd       	rcall	.-1178   	; 0x3b02 <isotp_init_link>
  
    while(1){
		uint8_t j;
		for(j=0; j<14; j++){
    3f9c:	10 e0       	ldi	r17, 0x00	; 0
			can_enable_receive(j,zero_mask);
    3f9e:	66 ec       	ldi	r22, 0xC6	; 198
    3fa0:	72 e0       	ldi	r23, 0x02	; 2
    3fa2:	81 2f       	mov	r24, r17
    3fa4:	0e 94 da 02 	call	0x5b4	; 0x5b4 <can_enable_receive>
	memcpy(&arbitration_id,id_send,2);
	isotp_init_link(&g_link, arbitration_id, g_isotpSendBuf, sizeof(g_isotpSendBuf), g_isotpRecvBuf, sizeof(g_isotpRecvBuf));
  
    while(1){
		uint8_t j;
		for(j=0; j<14; j++){
    3fa8:	1f 5f       	subi	r17, 0xFF	; 255
    3faa:	1e 30       	cpi	r17, 0x0E	; 14
    3fac:	c1 f7       	brne	.-16     	; 0x3f9e <isotpi_receive_multi+0x68>
		can_msg_t message;
		uint8_t size;
		
		while(1){
			
			uart_puts("test");
    3fae:	81 ec       	ldi	r24, 0xC1	; 193
    3fb0:	92 e0       	ldi	r25, 0x02	; 2
    3fb2:	0e 94 01 34 	call	0x6802	; 0x6802 <uart_puts>
			mobnr = can_wait_for_receive();
    3fb6:	0e 94 57 03 	call	0x6ae	; 0x6ae <can_wait_for_receive>
			can_receive_message2(mobnr, id_rec, message, &size);
    3fba:	9e 01       	movw	r18, r28
    3fbc:	21 5f       	subi	r18, 0xF1	; 241
    3fbe:	3f 4f       	sbci	r19, 0xFF	; 255
    3fc0:	ae 01       	movw	r20, r28
    3fc2:	4f 5f       	subi	r20, 0xFF	; 255
    3fc4:	5f 4f       	sbci	r21, 0xFF	; 255
    3fc6:	b4 01       	movw	r22, r8
    3fc8:	90 e0       	ldi	r25, 0x00	; 0
    3fca:	0e 94 61 03 	call	0x6c2	; 0x6c2 <can_receive_message2>
			isotp_on_can_message(&g_link, message, size);
    3fce:	4f 85       	ldd	r20, Y+15	; 0x0f
    3fd0:	be 01       	movw	r22, r28
    3fd2:	6f 5f       	subi	r22, 0xFF	; 255
    3fd4:	7f 4f       	sbci	r23, 0xFF	; 255
    3fd6:	8a e2       	ldi	r24, 0x2A	; 42
    3fd8:	96 e0       	ldi	r25, 0x06	; 6
    3fda:	de db       	rcall	.-2116   	; 0x3798 <isotp_on_can_message>
        
			switch(g_link.receive_status){
    3fdc:	80 91 5a 06 	lds	r24, 0x065A	; 0x80065a <g_link+0x30>
    3fe0:	81 30       	cpi	r24, 0x01	; 1
    3fe2:	29 f3       	breq	.-54     	; 0x3fae <isotpi_receive_multi+0x78>
    3fe4:	82 30       	cpi	r24, 0x02	; 2
    3fe6:	19 f7       	brne	.-58     	; 0x3fae <isotpi_receive_multi+0x78>
    3fe8:	10 e0       	ldi	r17, 0x00	; 0
				case ISOTP_RECEIVE_STATUS_INPROGRESS :
				break;
				case ISOTP_RECEIVE_STATUS_FULL :
				for(j=0; j<14; j++){
					can_free_mob(j);
    3fea:	81 2f       	mov	r24, r17
    3fec:	0e 94 22 03 	call	0x644	; 0x644 <can_free_mob>
        
			switch(g_link.receive_status){
				case ISOTP_RECEIVE_STATUS_INPROGRESS :
				break;
				case ISOTP_RECEIVE_STATUS_FULL :
				for(j=0; j<14; j++){
    3ff0:	1f 5f       	subi	r17, 0xFF	; 255
    3ff2:	1e 30       	cpi	r17, 0x0E	; 14
    3ff4:	d1 f7       	brne	.-12     	; 0x3fea <isotpi_receive_multi+0xb4>
					can_free_mob(j);
				}
				uint16_t out_size;
				uint8_t ret;
				return isotp_receive(&g_link, payload, payload_size, &out_size);
    3ff6:	47 2d       	mov	r20, r7
    3ff8:	50 e0       	ldi	r21, 0x00	; 0
    3ffa:	9e 01       	movw	r18, r28
    3ffc:	23 5f       	subi	r18, 0xF3	; 243
    3ffe:	3f 4f       	sbci	r19, 0xFF	; 255
    4000:	b5 01       	movw	r22, r10
    4002:	8a e2       	ldi	r24, 0x2A	; 42
    4004:	96 e0       	ldi	r25, 0x06	; 6
    4006:	54 dd       	rcall	.-1368   	; 0x3ab0 <isotp_receive>
			}
		} 
	}
	
}
    4008:	2f 96       	adiw	r28, 0x0f	; 15
    400a:	0f b6       	in	r0, 0x3f	; 63
    400c:	f8 94       	cli
    400e:	de bf       	out	0x3e, r29	; 62
    4010:	0f be       	out	0x3f, r0	; 63
    4012:	cd bf       	out	0x3d, r28	; 61
    4014:	df 91       	pop	r29
    4016:	cf 91       	pop	r28
    4018:	1f 91       	pop	r17
    401a:	0f 91       	pop	r16
    401c:	ff 90       	pop	r15
    401e:	ef 90       	pop	r14
    4020:	df 90       	pop	r13
    4022:	cf 90       	pop	r12
    4024:	bf 90       	pop	r11
    4026:	af 90       	pop	r10
    4028:	9f 90       	pop	r9
    402a:	8f 90       	pop	r8
    402c:	7f 90       	pop	r7
    402e:	08 95       	ret

00004030 <RNG>:

const char private_key5_hex[64] = "b08039a19079d5218465f6d97552bd70b8867423d67365b8431b6f213a197471";
const char public_key5_hex[128] = "5d19b55cc3528aaf8664bb20c9a199567a2444b549ebfa11c721fd7fdce2d2b31571b5033932b1d14373f6860d5a97f6efe65470e547aa1c663bdbb57977378c";


int RNG(uint8_t *dest, unsigned size){
    4030:	0f 93       	push	r16
    4032:	1f 93       	push	r17
    4034:	cf 93       	push	r28
    4036:	df 93       	push	r29
    4038:	8c 01       	movw	r16, r24
    403a:	eb 01       	movw	r28, r22
	while(size){
    403c:	20 97       	sbiw	r28, 0x00	; 0
    403e:	39 f0       	breq	.+14     	; 0x404e <RNG+0x1e>
		uint8_t val = (uint8_t) rand();
    4040:	0e 94 02 35 	call	0x6a04	; 0x6a04 <rand>
		*dest = val;
    4044:	f8 01       	movw	r30, r16
    4046:	81 93       	st	Z+, r24
    4048:	8f 01       	movw	r16, r30
		++dest;
		--size;
    404a:	21 97       	sbiw	r28, 0x01	; 1
const char private_key5_hex[64] = "b08039a19079d5218465f6d97552bd70b8867423d67365b8431b6f213a197471";
const char public_key5_hex[128] = "5d19b55cc3528aaf8664bb20c9a199567a2444b549ebfa11c721fd7fdce2d2b31571b5033932b1d14373f6860d5a97f6efe65470e547aa1c663bdbb57977378c";


int RNG(uint8_t *dest, unsigned size){
	while(size){
    404c:	c9 f7       	brne	.-14     	; 0x4040 <RNG+0x10>
		*dest = val;
		++dest;
		--size;
	}
	return 1;
}
    404e:	81 e0       	ldi	r24, 0x01	; 1
    4050:	90 e0       	ldi	r25, 0x00	; 0
    4052:	df 91       	pop	r29
    4054:	cf 91       	pop	r28
    4056:	1f 91       	pop	r17
    4058:	0f 91       	pop	r16
    405a:	08 95       	ret

0000405c <get_private_key>:

static void get_private_key(uint8_t role, uint8_t private[32]){
	switch (role)
    405c:	82 30       	cpi	r24, 0x02	; 2
    405e:	f9 f0       	breq	.+62     	; 0x409e <get_private_key+0x42>
    4060:	48 f4       	brcc	.+18     	; 0x4074 <get_private_key+0x18>
    4062:	88 23       	and	r24, r24
    4064:	b9 f0       	breq	.+46     	; 0x4094 <get_private_key+0x38>
    4066:	81 30       	cpi	r24, 0x01	; 1
    4068:	79 f4       	brne	.+30     	; 0x4088 <get_private_key+0x2c>
	{
		case ADMIN_ROLE :
			hex_to_bytes(private_key1_hex, 64, private);
			break;
		case OEM_ROLE :
			hex_to_bytes(private_key2_hex, 64, private);
    406a:	ab 01       	movw	r20, r22
    406c:	60 e4       	ldi	r22, 0x40	; 64
    406e:	82 eb       	ldi	r24, 0xB2	; 178
    4070:	93 e0       	ldi	r25, 0x03	; 3
    4072:	16 ca       	rjmp	.-3028   	; 0x34a0 <hex_to_bytes>
	}
	return 1;
}

static void get_private_key(uint8_t role, uint8_t private[32]){
	switch (role)
    4074:	83 30       	cpi	r24, 0x03	; 3
    4076:	49 f0       	breq	.+18     	; 0x408a <get_private_key+0x2e>
    4078:	84 30       	cpi	r24, 0x04	; 4
    407a:	29 f4       	brne	.+10     	; 0x4086 <get_private_key+0x2a>
			break;
		case REPAIRMAN_ROLE :
			hex_to_bytes(private_key4_hex, 64, private);
			break;
		case OWNER_ROLE :
			hex_to_bytes(private_key5_hex, 64, private);
    407c:	ab 01       	movw	r20, r22
    407e:	60 e4       	ldi	r22, 0x40	; 64
    4080:	82 ef       	ldi	r24, 0xF2	; 242
    4082:	92 e0       	ldi	r25, 0x02	; 2
    4084:	0d ca       	rjmp	.-3046   	; 0x34a0 <hex_to_bytes>
    4086:	08 95       	ret
    4088:	08 95       	ret
			break;
		case POLICEMAN_ROLE :
			hex_to_bytes(private_key3_hex, 64, private);
			break;
		case REPAIRMAN_ROLE :
			hex_to_bytes(private_key4_hex, 64, private);
    408a:	ab 01       	movw	r20, r22
    408c:	60 e4       	ldi	r22, 0x40	; 64
    408e:	82 e3       	ldi	r24, 0x32	; 50
    4090:	93 e0       	ldi	r25, 0x03	; 3
    4092:	06 ca       	rjmp	.-3060   	; 0x34a0 <hex_to_bytes>

static void get_private_key(uint8_t role, uint8_t private[32]){
	switch (role)
	{
		case ADMIN_ROLE :
			hex_to_bytes(private_key1_hex, 64, private);
    4094:	ab 01       	movw	r20, r22
    4096:	60 e4       	ldi	r22, 0x40	; 64
    4098:	82 ef       	ldi	r24, 0xF2	; 242
    409a:	93 e0       	ldi	r25, 0x03	; 3
    409c:	01 ca       	rjmp	.-3070   	; 0x34a0 <hex_to_bytes>
			break;
		case OEM_ROLE :
			hex_to_bytes(private_key2_hex, 64, private);
			break;
		case POLICEMAN_ROLE :
			hex_to_bytes(private_key3_hex, 64, private);
    409e:	ab 01       	movw	r20, r22
    40a0:	60 e4       	ldi	r22, 0x40	; 64
    40a2:	82 e7       	ldi	r24, 0x72	; 114
    40a4:	93 e0       	ldi	r25, 0x03	; 3
    40a6:	fc c9       	rjmp	.-3080   	; 0x34a0 <hex_to_bytes>

000040a8 <sign_challenge>:
			hex_to_bytes(private_key5_hex, 64, private);
			break;
	}
} 

int sign_challenge(uint8_t challenge[64], uint8_t signature[64], uint8_t role){
    40a8:	af 92       	push	r10
    40aa:	bf 92       	push	r11
    40ac:	df 92       	push	r13
    40ae:	ef 92       	push	r14
    40b0:	ff 92       	push	r15
    40b2:	0f 93       	push	r16
    40b4:	1f 93       	push	r17
    40b6:	cf 93       	push	r28
    40b8:	df 93       	push	r29
    40ba:	cd b7       	in	r28, 0x3d	; 61
    40bc:	de b7       	in	r29, 0x3e	; 62
    40be:	c0 56       	subi	r28, 0x60	; 96
    40c0:	d1 09       	sbc	r29, r1
    40c2:	0f b6       	in	r0, 0x3f	; 63
    40c4:	f8 94       	cli
    40c6:	de bf       	out	0x3e, r29	; 62
    40c8:	0f be       	out	0x3f, r0	; 63
    40ca:	cd bf       	out	0x3d, r28	; 61
    40cc:	5c 01       	movw	r10, r24
    40ce:	7b 01       	movw	r14, r22
    40d0:	d4 2e       	mov	r13, r20
	uECC_set_rng(&RNG);
    40d2:	88 e1       	ldi	r24, 0x18	; 24
    40d4:	90 e2       	ldi	r25, 0x20	; 32
    40d6:	2b d8       	rcall	.-4010   	; 0x312e <uECC_set_rng>
	const struct uECC_Curve_t *curve = uECC_secp256r1();
    40d8:	2f d8       	rcall	.-4002   	; 0x3138 <uECC_secp256r1>
    40da:	8c 01       	movw	r16, r24
    40dc:	20 e0       	ldi	r18, 0x00	; 0
	uint8_t hash[64];
	sha512(hash, challenge, 512);
    40de:	32 e0       	ldi	r19, 0x02	; 2
    40e0:	40 e0       	ldi	r20, 0x00	; 0
    40e2:	50 e0       	ldi	r21, 0x00	; 0
    40e4:	b5 01       	movw	r22, r10
    40e6:	ce 01       	movw	r24, r28
    40e8:	01 96       	adiw	r24, 0x01	; 1
    40ea:	0e 94 61 33 	call	0x66c2	; 0x66c2 <sha512>
    40ee:	be 01       	movw	r22, r28
	uint8_t private[32];
	get_private_key(role, private);
    40f0:	6f 5b       	subi	r22, 0xBF	; 191
    40f2:	7f 4f       	sbci	r23, 0xFF	; 255
    40f4:	8d 2d       	mov	r24, r13
    40f6:	b2 df       	rcall	.-156    	; 0x405c <get_private_key>
    40f8:	97 01       	movw	r18, r14

	if (!uECC_sign(private, hash, 64, signature, curve)) {
    40fa:	40 e4       	ldi	r20, 0x40	; 64
    40fc:	50 e0       	ldi	r21, 0x00	; 0
    40fe:	be 01       	movw	r22, r28
    4100:	6f 5f       	subi	r22, 0xFF	; 255
    4102:	7f 4f       	sbci	r23, 0xFF	; 255
    4104:	ce 01       	movw	r24, r28
    4106:	8f 5b       	subi	r24, 0xBF	; 191
    4108:	9f 4f       	sbci	r25, 0xFF	; 255
    410a:	60 d9       	rcall	.-3392   	; 0x33cc <uECC_sign>
    410c:	89 2b       	or	r24, r25
    410e:	99 f0       	breq	.+38     	; 0x4136 <sign_challenge+0x8e>
    4110:	80 e0       	ldi	r24, 0x00	; 0
		uart_puts("sign failed");
		return 1;
	}
	
	return 0;
    4112:	90 e0       	ldi	r25, 0x00	; 0
    4114:	c0 5a       	subi	r28, 0xA0	; 160
}
    4116:	df 4f       	sbci	r29, 0xFF	; 255
    4118:	0f b6       	in	r0, 0x3f	; 63
    411a:	f8 94       	cli
    411c:	de bf       	out	0x3e, r29	; 62
    411e:	0f be       	out	0x3f, r0	; 63
    4120:	cd bf       	out	0x3d, r28	; 61
    4122:	df 91       	pop	r29
    4124:	cf 91       	pop	r28
    4126:	1f 91       	pop	r17
    4128:	0f 91       	pop	r16
    412a:	ff 90       	pop	r15
    412c:	ef 90       	pop	r14
    412e:	df 90       	pop	r13
    4130:	bf 90       	pop	r11
    4132:	af 90       	pop	r10
    4134:	08 95       	ret
    4136:	88 ec       	ldi	r24, 0xC8	; 200
	sha512(hash, challenge, 512);
	uint8_t private[32];
	get_private_key(role, private);

	if (!uECC_sign(private, hash, 64, signature, curve)) {
		uart_puts("sign failed");
    4138:	92 e0       	ldi	r25, 0x02	; 2
    413a:	0e 94 01 34 	call	0x6802	; 0x6802 <uart_puts>
    413e:	81 e0       	ldi	r24, 0x01	; 1
		return 1;
    4140:	90 e0       	ldi	r25, 0x00	; 0
    4142:	e8 cf       	rjmp	.-48     	; 0x4114 <sign_challenge+0x6c>

00004144 <sign_challenge_dummy>:
    4144:	fc 01       	movw	r30, r24
	return 0;
}


int sign_challenge_dummy(uint8_t challenge[64], uint8_t signature[64], uint8_t role){
	memcpy(signature,challenge,64);
    4146:	90 e4       	ldi	r25, 0x40	; 64
    4148:	db 01       	movw	r26, r22
    414a:	01 90       	ld	r0, Z+
    414c:	0d 92       	st	X+, r0
    414e:	9a 95       	dec	r25
    4150:	e1 f7       	brne	.-8      	; 0x414a <sign_challenge_dummy+0x6>
	return 0;
}
    4152:	80 e0       	ldi	r24, 0x00	; 0
    4154:	90 e0       	ldi	r25, 0x00	; 0
    4156:	08 95       	ret

00004158 <calculate_shared_secret>:

int calculate_shared_secret(uint8_t public[64], uint8_t role, uint8_t secret[32]){
    4158:	af 92       	push	r10
    415a:	bf 92       	push	r11
    415c:	df 92       	push	r13
    415e:	ef 92       	push	r14
    4160:	ff 92       	push	r15
    4162:	0f 93       	push	r16
    4164:	1f 93       	push	r17
    4166:	cf 93       	push	r28
    4168:	df 93       	push	r29
    416a:	cd b7       	in	r28, 0x3d	; 61
    416c:	de b7       	in	r29, 0x3e	; 62
    416e:	c0 54       	subi	r28, 0x40	; 64
    4170:	d1 09       	sbc	r29, r1
    4172:	0f b6       	in	r0, 0x3f	; 63
    4174:	f8 94       	cli
    4176:	de bf       	out	0x3e, r29	; 62
    4178:	0f be       	out	0x3f, r0	; 63
    417a:	cd bf       	out	0x3d, r28	; 61
    417c:	8c 01       	movw	r16, r24
    417e:	d6 2e       	mov	r13, r22
    4180:	5a 01       	movw	r10, r20
	const struct uECC_Curve_t * curve = uECC_secp256r1();
    4182:	0e 94 9c 18 	call	0x3138	; 0x3138 <uECC_secp256r1>
    4186:	7c 01       	movw	r14, r24
	uint8_t secret_unhashed[32];
	//Generate Shared Secret.
	uint8_t private[32];
	get_private_key(role, private);
    4188:	be 01       	movw	r22, r28
    418a:	6f 5f       	subi	r22, 0xFF	; 255
    418c:	7f 4f       	sbci	r23, 0xFF	; 255
    418e:	8d 2d       	mov	r24, r13
    4190:	65 df       	rcall	.-310    	; 0x405c <get_private_key>
	if(!uECC_shared_secret(public, private, secret_unhashed, curve)){
    4192:	97 01       	movw	r18, r14
    4194:	ae 01       	movw	r20, r28
    4196:	4f 5d       	subi	r20, 0xDF	; 223
    4198:	5f 4f       	sbci	r21, 0xFF	; 255
    419a:	be 01       	movw	r22, r28
    419c:	6f 5f       	subi	r22, 0xFF	; 255
    419e:	7f 4f       	sbci	r23, 0xFF	; 255
    41a0:	c8 01       	movw	r24, r16
    41a2:	0e 94 9f 18 	call	0x313e	; 0x313e <uECC_shared_secret>
    41a6:	89 2b       	or	r24, r25
    41a8:	e1 f0       	breq	.+56     	; 0x41e2 <calculate_shared_secret+0x8a>
		uart_puts("shared secret creation failed");
		return 1;
	}
	uint32_t len = 256;
	sha256(secret, secret_unhashed, len);
    41aa:	20 e0       	ldi	r18, 0x00	; 0
    41ac:	31 e0       	ldi	r19, 0x01	; 1
    41ae:	40 e0       	ldi	r20, 0x00	; 0
    41b0:	50 e0       	ldi	r21, 0x00	; 0
    41b2:	be 01       	movw	r22, r28
    41b4:	6f 5d       	subi	r22, 0xDF	; 223
    41b6:	7f 4f       	sbci	r23, 0xFF	; 255
    41b8:	c5 01       	movw	r24, r10
    41ba:	4f d3       	rcall	.+1694   	; 0x485a <sha256>
	return 0;
    41bc:	80 e0       	ldi	r24, 0x00	; 0
    41be:	90 e0       	ldi	r25, 0x00	; 0
}
    41c0:	c0 5c       	subi	r28, 0xC0	; 192
    41c2:	df 4f       	sbci	r29, 0xFF	; 255
    41c4:	0f b6       	in	r0, 0x3f	; 63
    41c6:	f8 94       	cli
    41c8:	de bf       	out	0x3e, r29	; 62
    41ca:	0f be       	out	0x3f, r0	; 63
    41cc:	cd bf       	out	0x3d, r28	; 61
    41ce:	df 91       	pop	r29
    41d0:	cf 91       	pop	r28
    41d2:	1f 91       	pop	r17
    41d4:	0f 91       	pop	r16
    41d6:	ff 90       	pop	r15
    41d8:	ef 90       	pop	r14
    41da:	df 90       	pop	r13
    41dc:	bf 90       	pop	r11
    41de:	af 90       	pop	r10
    41e0:	08 95       	ret
	uint8_t secret_unhashed[32];
	//Generate Shared Secret.
	uint8_t private[32];
	get_private_key(role, private);
	if(!uECC_shared_secret(public, private, secret_unhashed, curve)){
		uart_puts("shared secret creation failed");
    41e2:	84 ed       	ldi	r24, 0xD4	; 212
    41e4:	92 e0       	ldi	r25, 0x02	; 2
    41e6:	0e 94 01 34 	call	0x6802	; 0x6802 <uart_puts>
		return 1;
    41ea:	81 e0       	ldi	r24, 0x01	; 1
    41ec:	90 e0       	ldi	r25, 0x00	; 0
    41ee:	e8 cf       	rjmp	.-48     	; 0x41c0 <calculate_shared_secret+0x68>

000041f0 <calculate_shared_secret_dummy>:
	uint32_t len = 256;
	sha256(secret, secret_unhashed, len);
	return 0;
}

int calculate_shared_secret_dummy(uint8_t public[64], uint8_t role, uint8_t secret[32]){
    41f0:	fc 01       	movw	r30, r24
	memcpy(secret, public, 32);
    41f2:	90 e2       	ldi	r25, 0x20	; 32
    41f4:	da 01       	movw	r26, r20
    41f6:	01 90       	ld	r0, Z+
    41f8:	0d 92       	st	X+, r0
    41fa:	9a 95       	dec	r25
    41fc:	e1 f7       	brne	.-8      	; 0x41f6 <calculate_shared_secret_dummy+0x6>
	return 0;
}
    41fe:	80 e0       	ldi	r24, 0x00	; 0
    4200:	90 e0       	ldi	r25, 0x00	; 0
    4202:	08 95       	ret

00004204 <__vector_5>:
	//EICRB = 1 << ISC40 | 1 << ISC41 | 1 << ISC50 | 1 << ISC51 | 1 << ISC60 | 1 << ISC61 | 1 << ISC70 | 1 << ISC71; // set interrupt on falling edge.
	EIMSK = 1 << INT4 | 1 << INT5 | 1 << INT6 | 1 << INT7;
	
}
	
ISR(INT4_vect){
    4204:	1f 92       	push	r1
    4206:	0f 92       	push	r0
    4208:	0f b6       	in	r0, 0x3f	; 63
    420a:	0f 92       	push	r0
    420c:	11 24       	eor	r1, r1
    420e:	0b b6       	in	r0, 0x3b	; 59
    4210:	0f 92       	push	r0
    4212:	2f 93       	push	r18
    4214:	3f 93       	push	r19
    4216:	4f 93       	push	r20
    4218:	5f 93       	push	r21
    421a:	6f 93       	push	r22
    421c:	7f 93       	push	r23
    421e:	8f 93       	push	r24
    4220:	9f 93       	push	r25
    4222:	af 93       	push	r26
    4224:	bf 93       	push	r27
    4226:	ef 93       	push	r30
    4228:	ff 93       	push	r31
	EIMSK &= ~(1 << INT4);
    422a:	ec 98       	cbi	0x1d, 4	; 29
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    422c:	2f ef       	ldi	r18, 0xFF	; 255
    422e:	84 e3       	ldi	r24, 0x34	; 52
    4230:	9c e0       	ldi	r25, 0x0C	; 12
    4232:	21 50       	subi	r18, 0x01	; 1
    4234:	80 40       	sbci	r24, 0x00	; 0
    4236:	90 40       	sbci	r25, 0x00	; 0
    4238:	e1 f7       	brne	.-8      	; 0x4232 <__vector_5+0x2e>
    423a:	00 c0       	rjmp	.+0      	; 0x423c <__vector_5+0x38>
    423c:	00 00       	nop
	_delay_ms(500);
	uart_puts("running scenario 1");
    423e:	82 e3       	ldi	r24, 0x32	; 50
    4240:	94 e0       	ldi	r25, 0x04	; 4
    4242:	0e 94 01 34 	call	0x6802	; 0x6802 <uart_puts>
	run_scenario = SCENARIO1;
    4246:	81 e0       	ldi	r24, 0x01	; 1
    4248:	80 93 5b 06 	sts	0x065B, r24	; 0x80065b <run_scenario>
	EIMSK |= 1 << INT4;
    424c:	ec 9a       	sbi	0x1d, 4	; 29
}
    424e:	ff 91       	pop	r31
    4250:	ef 91       	pop	r30
    4252:	bf 91       	pop	r27
    4254:	af 91       	pop	r26
    4256:	9f 91       	pop	r25
    4258:	8f 91       	pop	r24
    425a:	7f 91       	pop	r23
    425c:	6f 91       	pop	r22
    425e:	5f 91       	pop	r21
    4260:	4f 91       	pop	r20
    4262:	3f 91       	pop	r19
    4264:	2f 91       	pop	r18
    4266:	0f 90       	pop	r0
    4268:	0b be       	out	0x3b, r0	; 59
    426a:	0f 90       	pop	r0
    426c:	0f be       	out	0x3f, r0	; 63
    426e:	0f 90       	pop	r0
    4270:	1f 90       	pop	r1
    4272:	18 95       	reti

00004274 <__vector_6>:

ISR(INT5_vect){
    4274:	1f 92       	push	r1
    4276:	0f 92       	push	r0
    4278:	0f b6       	in	r0, 0x3f	; 63
    427a:	0f 92       	push	r0
    427c:	11 24       	eor	r1, r1
    427e:	0b b6       	in	r0, 0x3b	; 59
    4280:	0f 92       	push	r0
    4282:	2f 93       	push	r18
    4284:	3f 93       	push	r19
    4286:	4f 93       	push	r20
    4288:	5f 93       	push	r21
    428a:	6f 93       	push	r22
    428c:	7f 93       	push	r23
    428e:	8f 93       	push	r24
    4290:	9f 93       	push	r25
    4292:	af 93       	push	r26
    4294:	bf 93       	push	r27
    4296:	ef 93       	push	r30
    4298:	ff 93       	push	r31
	EIMSK &= ~(1 << INT5);
    429a:	ed 98       	cbi	0x1d, 5	; 29
    429c:	2f ef       	ldi	r18, 0xFF	; 255
    429e:	84 e3       	ldi	r24, 0x34	; 52
    42a0:	9c e0       	ldi	r25, 0x0C	; 12
    42a2:	21 50       	subi	r18, 0x01	; 1
    42a4:	80 40       	sbci	r24, 0x00	; 0
    42a6:	90 40       	sbci	r25, 0x00	; 0
    42a8:	e1 f7       	brne	.-8      	; 0x42a2 <__vector_6+0x2e>
    42aa:	00 c0       	rjmp	.+0      	; 0x42ac <__vector_6+0x38>
    42ac:	00 00       	nop
	_delay_ms(500);
	uart_puts("running scenario 2");
    42ae:	85 e4       	ldi	r24, 0x45	; 69
    42b0:	94 e0       	ldi	r25, 0x04	; 4
    42b2:	0e 94 01 34 	call	0x6802	; 0x6802 <uart_puts>
	run_scenario = SCENARIO2;
    42b6:	82 e0       	ldi	r24, 0x02	; 2
    42b8:	80 93 5b 06 	sts	0x065B, r24	; 0x80065b <run_scenario>
	EIMSK |= 1 << INT5;
    42bc:	ed 9a       	sbi	0x1d, 5	; 29
}
    42be:	ff 91       	pop	r31
    42c0:	ef 91       	pop	r30
    42c2:	bf 91       	pop	r27
    42c4:	af 91       	pop	r26
    42c6:	9f 91       	pop	r25
    42c8:	8f 91       	pop	r24
    42ca:	7f 91       	pop	r23
    42cc:	6f 91       	pop	r22
    42ce:	5f 91       	pop	r21
    42d0:	4f 91       	pop	r20
    42d2:	3f 91       	pop	r19
    42d4:	2f 91       	pop	r18
    42d6:	0f 90       	pop	r0
    42d8:	0b be       	out	0x3b, r0	; 59
    42da:	0f 90       	pop	r0
    42dc:	0f be       	out	0x3f, r0	; 63
    42de:	0f 90       	pop	r0
    42e0:	1f 90       	pop	r1
    42e2:	18 95       	reti

000042e4 <__vector_7>:

ISR(INT6_vect){
    42e4:	1f 92       	push	r1
    42e6:	0f 92       	push	r0
    42e8:	0f b6       	in	r0, 0x3f	; 63
    42ea:	0f 92       	push	r0
    42ec:	11 24       	eor	r1, r1
    42ee:	0b b6       	in	r0, 0x3b	; 59
    42f0:	0f 92       	push	r0
    42f2:	2f 93       	push	r18
    42f4:	3f 93       	push	r19
    42f6:	4f 93       	push	r20
    42f8:	5f 93       	push	r21
    42fa:	6f 93       	push	r22
    42fc:	7f 93       	push	r23
    42fe:	8f 93       	push	r24
    4300:	9f 93       	push	r25
    4302:	af 93       	push	r26
    4304:	bf 93       	push	r27
    4306:	ef 93       	push	r30
    4308:	ff 93       	push	r31
	EIMSK &= ~(1 << INT6);
    430a:	ee 98       	cbi	0x1d, 6	; 29
    430c:	2f ef       	ldi	r18, 0xFF	; 255
    430e:	84 e3       	ldi	r24, 0x34	; 52
    4310:	9c e0       	ldi	r25, 0x0C	; 12
    4312:	21 50       	subi	r18, 0x01	; 1
    4314:	80 40       	sbci	r24, 0x00	; 0
    4316:	90 40       	sbci	r25, 0x00	; 0
    4318:	e1 f7       	brne	.-8      	; 0x4312 <__vector_7+0x2e>
    431a:	00 c0       	rjmp	.+0      	; 0x431c <__vector_7+0x38>
    431c:	00 00       	nop
	_delay_ms(500);
	uart_puts("running scenario 3");
    431e:	88 e5       	ldi	r24, 0x58	; 88
    4320:	94 e0       	ldi	r25, 0x04	; 4
    4322:	0e 94 01 34 	call	0x6802	; 0x6802 <uart_puts>
	run_scenario = SCENARIO3;
    4326:	83 e0       	ldi	r24, 0x03	; 3
    4328:	80 93 5b 06 	sts	0x065B, r24	; 0x80065b <run_scenario>
	EIMSK |= 1 << INT6;
    432c:	ee 9a       	sbi	0x1d, 6	; 29
}
    432e:	ff 91       	pop	r31
    4330:	ef 91       	pop	r30
    4332:	bf 91       	pop	r27
    4334:	af 91       	pop	r26
    4336:	9f 91       	pop	r25
    4338:	8f 91       	pop	r24
    433a:	7f 91       	pop	r23
    433c:	6f 91       	pop	r22
    433e:	5f 91       	pop	r21
    4340:	4f 91       	pop	r20
    4342:	3f 91       	pop	r19
    4344:	2f 91       	pop	r18
    4346:	0f 90       	pop	r0
    4348:	0b be       	out	0x3b, r0	; 59
    434a:	0f 90       	pop	r0
    434c:	0f be       	out	0x3f, r0	; 63
    434e:	0f 90       	pop	r0
    4350:	1f 90       	pop	r1
    4352:	18 95       	reti

00004354 <__vector_8>:

ISR(INT7_vect){
    4354:	1f 92       	push	r1
    4356:	0f 92       	push	r0
    4358:	0f b6       	in	r0, 0x3f	; 63
    435a:	0f 92       	push	r0
    435c:	11 24       	eor	r1, r1
    435e:	2f 93       	push	r18
    4360:	8f 93       	push	r24
    4362:	9f 93       	push	r25
	EIMSK &= ~(1 << INT7);
    4364:	ef 98       	cbi	0x1d, 7	; 29
    4366:	2f ef       	ldi	r18, 0xFF	; 255
    4368:	84 e3       	ldi	r24, 0x34	; 52
    436a:	9c e0       	ldi	r25, 0x0C	; 12
    436c:	21 50       	subi	r18, 0x01	; 1
    436e:	80 40       	sbci	r24, 0x00	; 0
    4370:	90 40       	sbci	r25, 0x00	; 0
    4372:	e1 f7       	brne	.-8      	; 0x436c <__vector_8+0x18>
    4374:	00 c0       	rjmp	.+0      	; 0x4376 <__vector_8+0x22>
    4376:	00 00       	nop
	_delay_ms(500);
	EIMSK |= 1 << INT7;
    4378:	ef 9a       	sbi	0x1d, 7	; 29
}
    437a:	9f 91       	pop	r25
    437c:	8f 91       	pop	r24
    437e:	2f 91       	pop	r18
    4380:	0f 90       	pop	r0
    4382:	0f be       	out	0x3f, r0	; 63
    4384:	0f 90       	pop	r0
    4386:	1f 90       	pop	r1
    4388:	18 95       	reti

0000438a <authenticate>:

int authenticate(can_msg_t *message, can_id_t *id, uint8_t role, uint8_t rounds){
    438a:	6f 92       	push	r6
    438c:	7f 92       	push	r7
    438e:	8f 92       	push	r8
    4390:	9f 92       	push	r9
    4392:	af 92       	push	r10
    4394:	bf 92       	push	r11
    4396:	df 92       	push	r13
    4398:	ef 92       	push	r14
    439a:	ff 92       	push	r15
    439c:	0f 93       	push	r16
    439e:	1f 93       	push	r17
    43a0:	cf 93       	push	r28
    43a2:	df 93       	push	r29
    43a4:	cd b7       	in	r28, 0x3d	; 61
    43a6:	de b7       	in	r29, 0x3e	; 62
    43a8:	cb 5e       	subi	r28, 0xEB	; 235
    43aa:	d1 09       	sbc	r29, r1
    43ac:	0f b6       	in	r0, 0x3f	; 63
    43ae:	f8 94       	cli
    43b0:	de bf       	out	0x3e, r29	; 62
    43b2:	0f be       	out	0x3f, r0	; 63
    43b4:	cd bf       	out	0x3d, r28	; 61
    43b6:	5c 01       	movw	r10, r24
    43b8:	4b 01       	movw	r8, r22
    43ba:	14 2f       	mov	r17, r20
    43bc:	d2 2e       	mov	r13, r18
	uart_puts("starting authentication");
    43be:	8b e6       	ldi	r24, 0x6B	; 107
    43c0:	94 e0       	ldi	r25, 0x04	; 4
    43c2:	0e 94 01 34 	call	0x6802	; 0x6802 <uart_puts>
	
	//init authentication.

	can_msg_t init = {0,0,0,0,0,0,0,0}; 
    43c6:	ae 01       	movw	r20, r28
    43c8:	4f 51       	subi	r20, 0x1F	; 31
    43ca:	5f 4f       	sbci	r21, 0xFF	; 255
    43cc:	88 e0       	ldi	r24, 0x08	; 8
    43ce:	fa 01       	movw	r30, r20
    43d0:	11 92       	st	Z+, r1
    43d2:	8a 95       	dec	r24
    43d4:	e9 f7       	brne	.-6      	; 0x43d0 <authenticate+0x46>
	init[0]= role;
    43d6:	fa 01       	movw	r30, r20
    43d8:	10 83       	st	Z, r17
	isotpi_send(default_id, 7, init);
    43da:	67 e0       	ldi	r22, 0x07	; 7
    43dc:	70 e0       	ldi	r23, 0x00	; 0
    43de:	82 e2       	ldi	r24, 0x22	; 34
    43e0:	95 e0       	ldi	r25, 0x05	; 5
    43e2:	8f dc       	rcall	.-1762   	; 0x3d02 <isotpi_send>
	uint8_t public[64];
	
	can_id_t id_tmp;
	//Receive generated public key.
	isotpi_receive_multi(default_id, id_tmp ,64, public);
    43e4:	9e 01       	movw	r18, r28
    43e6:	2f 5b       	subi	r18, 0xBF	; 191
    43e8:	3f 4f       	sbci	r19, 0xFF	; 255
    43ea:	40 e4       	ldi	r20, 0x40	; 64
    43ec:	50 e0       	ldi	r21, 0x00	; 0
    43ee:	be 01       	movw	r22, r28
    43f0:	67 51       	subi	r22, 0x17	; 23
    43f2:	7f 4f       	sbci	r23, 0xFF	; 255
    43f4:	82 e2       	ldi	r24, 0x22	; 34
    43f6:	95 e0       	ldi	r25, 0x05	; 5
    43f8:	9e dd       	rcall	.-1220   	; 0x3f36 <isotpi_receive_multi>
	uart_puts("public key received");
    43fa:	83 e8       	ldi	r24, 0x83	; 131
    43fc:	94 e0       	ldi	r25, 0x04	; 4
    43fe:	0e 94 01 34 	call	0x6802	; 0x6802 <uart_puts>
	
	//Calculate shared secret.
	uint8_t secret[32];
	if(run_scenario == SCENARIO1){
    4402:	80 91 5b 06 	lds	r24, 0x065B	; 0x80065b <run_scenario>
		calculate_shared_secret_dummy(public, role, secret);
    4406:	3e 01       	movw	r6, r28
	isotpi_receive_multi(default_id, id_tmp ,64, public);
	uart_puts("public key received");
	
	//Calculate shared secret.
	uint8_t secret[32];
	if(run_scenario == SCENARIO1){
    4408:	81 30       	cpi	r24, 0x01	; 1
    440a:	09 f4       	brne	.+2      	; 0x440e <authenticate+0x84>
    440c:	d9 c0       	rjmp	.+434    	; 0x45c0 <authenticate+0x236>
		calculate_shared_secret_dummy(public, role, secret);
		_delay_ms(1000);
		}else{
		calculate_shared_secret(public, role, secret);
    440e:	e1 ea       	ldi	r30, 0xA1	; 161
    4410:	6e 0e       	add	r6, r30
    4412:	71 1c       	adc	r7, r1
    4414:	a3 01       	movw	r20, r6
    4416:	61 2f       	mov	r22, r17
    4418:	ce 01       	movw	r24, r28
    441a:	8f 5b       	subi	r24, 0xBF	; 191
    441c:	9f 4f       	sbci	r25, 0xFF	; 255
    441e:	9c de       	rcall	.-712    	; 0x4158 <calculate_shared_secret>
	}
	
	//Sign the public key.
	uint8_t signature[64];
	if(run_scenario == SCENARIO1){
    4420:	80 91 5b 06 	lds	r24, 0x065B	; 0x80065b <run_scenario>
		sign_challenge_dummy(public, signature, role);
    4424:	41 2f       	mov	r20, r17
    4426:	8e 01       	movw	r16, r28
    4428:	0f 5f       	subi	r16, 0xFF	; 255
    442a:	1f 4f       	sbci	r17, 0xFF	; 255
    442c:	b8 01       	movw	r22, r16
		calculate_shared_secret(public, role, secret);
	}
	
	//Sign the public key.
	uint8_t signature[64];
	if(run_scenario == SCENARIO1){
    442e:	81 30       	cpi	r24, 0x01	; 1
    4430:	09 f4       	brne	.+2      	; 0x4434 <authenticate+0xaa>
    4432:	b8 c0       	rjmp	.+368    	; 0x45a4 <authenticate+0x21a>
		sign_challenge_dummy(public, signature, role);
		_delay_ms(1000);
		}else{
		sign_challenge(public, signature, role);
    4434:	ce 01       	movw	r24, r28
    4436:	8f 5b       	subi	r24, 0xBF	; 191
    4438:	9f 4f       	sbci	r25, 0xFF	; 255
    443a:	36 de       	rcall	.-916    	; 0x40a8 <sign_challenge>
	}
	
	//Send signature.
	isotpi_send_multi(default_id,64,signature);
    443c:	a8 01       	movw	r20, r16
    443e:	60 e4       	ldi	r22, 0x40	; 64
    4440:	70 e0       	ldi	r23, 0x00	; 0
    4442:	82 e2       	ldi	r24, 0x22	; 34
    4444:	95 e0       	ldi	r25, 0x05	; 5
    4446:	00 dd       	rcall	.-1536   	; 0x3e48 <isotpi_send_multi>
	uart_puts("signature sent");
    4448:	87 e9       	ldi	r24, 0x97	; 151
    444a:	94 e0       	ldi	r25, 0x04	; 4
    444c:	0e 94 01 34 	call	0x6802	; 0x6802 <uart_puts>
	uint8_t ack[8];
	
	//wait for acknowledgment.
	uint8_t len;
	isotpi_receive(default_id,7,ack);
    4450:	ae 01       	movw	r20, r28
    4452:	47 52       	subi	r20, 0x27	; 39
    4454:	5f 4f       	sbci	r21, 0xFF	; 255
    4456:	67 e0       	ldi	r22, 0x07	; 7
    4458:	70 e0       	ldi	r23, 0x00	; 0
    445a:	82 e2       	ldi	r24, 0x22	; 34
    445c:	95 e0       	ldi	r25, 0x05	; 5
    445e:	92 dc       	rcall	.-1756   	; 0x3d84 <isotpi_receive>
	uart_putd(ack,8);
    4460:	68 e0       	ldi	r22, 0x08	; 8
    4462:	ce 01       	movw	r24, r28
    4464:	87 52       	subi	r24, 0x27	; 39
    4466:	9f 4f       	sbci	r25, 0xFF	; 255
    4468:	0e 94 3a 34 	call	0x6874	; 0x6874 <uart_putd>
	if(ack[0] == ACK_POS){
    446c:	c7 52       	subi	r28, 0x27	; 39
    446e:	df 4f       	sbci	r29, 0xFF	; 255
    4470:	88 81       	ld	r24, Y
    4472:	c9 5d       	subi	r28, 0xD9	; 217
    4474:	d0 40       	sbci	r29, 0x00	; 0
    4476:	81 11       	cpse	r24, r1
    4478:	90 c0       	rjmp	.+288    	; 0x459a <authenticate+0x210>
		uart_puts("Successfully authenticated!");
    447a:	86 ea       	ldi	r24, 0xA6	; 166
    447c:	94 e0       	ldi	r25, 0x04	; 4
    447e:	0e 94 01 34 	call	0x6802	; 0x6802 <uart_puts>
		}else{
		uart_puts("Authentication failed!");
		return 0;
	}
	
	while(rounds > 0){
    4482:	d1 10       	cpse	r13, r1
    4484:	4c c0       	rjmp	.+152    	; 0x451e <authenticate+0x194>
    4486:	6d c0       	rjmp	.+218    	; 0x4562 <authenticate+0x1d8>
		
		//Wait for acknowledgment.
		can_msg_t ack;
		can_receive_message(0, default_id, 0x00, ack, &len);
		if(ack[0] == ACK_POS){
			uart_puts("permission granted!");
    4488:	89 ed       	ldi	r24, 0xD9	; 217
    448a:	94 e0       	ldi	r25, 0x04	; 4
    448c:	0e 94 01 34 	call	0x6802	; 0x6802 <uart_puts>
		
		//Calculate and send Hmac of message.
		uint8_t mac[32];
		uint16_t klen = 256;
		uint32_t msglen = 64;
		hmac_sha256(mac, secret, klen ,message , msglen);
    4490:	10 e4       	ldi	r17, 0x40	; 64
    4492:	e1 2e       	mov	r14, r17
    4494:	f1 2c       	mov	r15, r1
    4496:	00 e0       	ldi	r16, 0x00	; 0
    4498:	10 e0       	ldi	r17, 0x00	; 0
    449a:	95 01       	movw	r18, r10
    449c:	40 e0       	ldi	r20, 0x00	; 0
    449e:	51 e0       	ldi	r21, 0x01	; 1
    44a0:	b3 01       	movw	r22, r6
    44a2:	ce 01       	movw	r24, r28
    44a4:	8f 57       	subi	r24, 0x7F	; 127
    44a6:	9f 4f       	sbci	r25, 0xFF	; 255
    44a8:	f0 d0       	rcall	.+480    	; 0x468a <hmac_sha256>
		uint8_t mac2[16];
		memcpy(mac2, mac ,16);
    44aa:	80 e1       	ldi	r24, 0x10	; 16
    44ac:	fe 01       	movw	r30, r28
    44ae:	ef 57       	subi	r30, 0x7F	; 127
    44b0:	ff 4f       	sbci	r31, 0xFF	; 255
    44b2:	de 01       	movw	r26, r28
    44b4:	af 53       	subi	r26, 0x3F	; 63
    44b6:	bf 4f       	sbci	r27, 0xFF	; 255
    44b8:	01 90       	ld	r0, Z+
    44ba:	0d 92       	st	X+, r0
    44bc:	8a 95       	dec	r24
    44be:	e1 f7       	brne	.-8      	; 0x44b8 <authenticate+0x12e>
		can_send_frame_buffer(mac2, 2);
    44c0:	62 e0       	ldi	r22, 0x02	; 2
    44c2:	ce 01       	movw	r24, r28
    44c4:	8f 53       	subi	r24, 0x3F	; 63
    44c6:	9f 4f       	sbci	r25, 0xFF	; 255
    44c8:	0e 94 2a 04 	call	0x854	; 0x854 <can_send_frame_buffer>
		
		//wait for acknowledgment.
		can_receive_message(0, default_id, 0x00, ack, &len);
    44cc:	8e 01       	movw	r16, r28
    44ce:	05 51       	subi	r16, 0x15	; 21
    44d0:	1f 4f       	sbci	r17, 0xFF	; 255
    44d2:	9e 01       	movw	r18, r28
    44d4:	2f 52       	subi	r18, 0x2F	; 47
    44d6:	3f 4f       	sbci	r19, 0xFF	; 255
    44d8:	40 e0       	ldi	r20, 0x00	; 0
    44da:	50 e0       	ldi	r21, 0x00	; 0
    44dc:	62 e2       	ldi	r22, 0x22	; 34
    44de:	75 e0       	ldi	r23, 0x05	; 5
    44e0:	80 e0       	ldi	r24, 0x00	; 0
    44e2:	0e 94 af 03 	call	0x75e	; 0x75e <can_receive_message>
		if(ack[0] == ACK_POS){
    44e6:	cf 52       	subi	r28, 0x2F	; 47
    44e8:	df 4f       	sbci	r29, 0xFF	; 255
    44ea:	88 81       	ld	r24, Y
    44ec:	c1 5d       	subi	r28, 0xD1	; 209
    44ee:	d0 40       	sbci	r29, 0x00	; 0
    44f0:	81 11       	cpse	r24, r1
    44f2:	4e c0       	rjmp	.+156    	; 0x4590 <authenticate+0x206>
			uart_puts("message accepted!");
    44f4:	80 e0       	ldi	r24, 0x00	; 0
    44f6:	95 e0       	ldi	r25, 0x05	; 5
    44f8:	0e 94 01 34 	call	0x6802	; 0x6802 <uart_puts>
    44fc:	9f ef       	ldi	r25, 0xFF	; 255
    44fe:	e4 e3       	ldi	r30, 0x34	; 52
    4500:	fc e0       	ldi	r31, 0x0C	; 12
    4502:	91 50       	subi	r25, 0x01	; 1
    4504:	e0 40       	sbci	r30, 0x00	; 0
    4506:	f0 40       	sbci	r31, 0x00	; 0
    4508:	e1 f7       	brne	.-8      	; 0x4502 <authenticate+0x178>
    450a:	00 c0       	rjmp	.+0      	; 0x450c <authenticate+0x182>
    450c:	00 00       	nop
		}else{
			uart_puts("message denied!");
			continue;
		}
		_delay_ms(500);
		id++;
    450e:	22 e0       	ldi	r18, 0x02	; 2
    4510:	82 0e       	add	r8, r18
    4512:	91 1c       	adc	r9, r1
		message++;
    4514:	88 e0       	ldi	r24, 0x08	; 8
    4516:	a8 0e       	add	r10, r24
    4518:	b1 1c       	adc	r11, r1
		}else{
		uart_puts("Authentication failed!");
		return 0;
	}
	
	while(rounds > 0){
    451a:	dd 20       	and	r13, r13
    451c:	11 f1       	breq	.+68     	; 0x4562 <authenticate+0x1d8>
		rounds--;
    451e:	da 94       	dec	r13
		
		//Send message you want to send to the vehicle network.
		can_send_message(0, *id, *message, 8);
    4520:	28 e0       	ldi	r18, 0x08	; 8
    4522:	a5 01       	movw	r20, r10
    4524:	b4 01       	movw	r22, r8
    4526:	80 e0       	ldi	r24, 0x00	; 0
    4528:	0e 94 a9 02 	call	0x552	; 0x552 <can_send_message>
		
		//Wait for acknowledgment.
		can_msg_t ack;
		can_receive_message(0, default_id, 0x00, ack, &len);
    452c:	8e 01       	movw	r16, r28
    452e:	05 51       	subi	r16, 0x15	; 21
    4530:	1f 4f       	sbci	r17, 0xFF	; 255
    4532:	9e 01       	movw	r18, r28
    4534:	2f 52       	subi	r18, 0x2F	; 47
    4536:	3f 4f       	sbci	r19, 0xFF	; 255
    4538:	40 e0       	ldi	r20, 0x00	; 0
    453a:	50 e0       	ldi	r21, 0x00	; 0
    453c:	62 e2       	ldi	r22, 0x22	; 34
    453e:	75 e0       	ldi	r23, 0x05	; 5
    4540:	80 e0       	ldi	r24, 0x00	; 0
    4542:	0e 94 af 03 	call	0x75e	; 0x75e <can_receive_message>
		if(ack[0] == ACK_POS){
    4546:	cf 52       	subi	r28, 0x2F	; 47
    4548:	df 4f       	sbci	r29, 0xFF	; 255
    454a:	88 81       	ld	r24, Y
    454c:	c1 5d       	subi	r28, 0xD1	; 209
    454e:	d0 40       	sbci	r29, 0x00	; 0
    4550:	88 23       	and	r24, r24
    4552:	09 f4       	brne	.+2      	; 0x4556 <authenticate+0x1cc>
    4554:	99 cf       	rjmp	.-206    	; 0x4488 <authenticate+0xfe>
			uart_puts("permission granted!");
			}else{
			uart_puts("permission denied!");
    4556:	8d ee       	ldi	r24, 0xED	; 237
    4558:	94 e0       	ldi	r25, 0x04	; 4
    455a:	0e 94 01 34 	call	0x6802	; 0x6802 <uart_puts>
		}else{
		uart_puts("Authentication failed!");
		return 0;
	}
	
	while(rounds > 0){
    455e:	d1 10       	cpse	r13, r1
    4560:	de cf       	rjmp	.-68     	; 0x451e <authenticate+0x194>
		_delay_ms(500);
		id++;
		message++;
	}
	return 0;
}
    4562:	80 e0       	ldi	r24, 0x00	; 0
    4564:	90 e0       	ldi	r25, 0x00	; 0
    4566:	c5 51       	subi	r28, 0x15	; 21
    4568:	df 4f       	sbci	r29, 0xFF	; 255
    456a:	0f b6       	in	r0, 0x3f	; 63
    456c:	f8 94       	cli
    456e:	de bf       	out	0x3e, r29	; 62
    4570:	0f be       	out	0x3f, r0	; 63
    4572:	cd bf       	out	0x3d, r28	; 61
    4574:	df 91       	pop	r29
    4576:	cf 91       	pop	r28
    4578:	1f 91       	pop	r17
    457a:	0f 91       	pop	r16
    457c:	ff 90       	pop	r15
    457e:	ef 90       	pop	r14
    4580:	df 90       	pop	r13
    4582:	bf 90       	pop	r11
    4584:	af 90       	pop	r10
    4586:	9f 90       	pop	r9
    4588:	8f 90       	pop	r8
    458a:	7f 90       	pop	r7
    458c:	6f 90       	pop	r6
    458e:	08 95       	ret
		//wait for acknowledgment.
		can_receive_message(0, default_id, 0x00, ack, &len);
		if(ack[0] == ACK_POS){
			uart_puts("message accepted!");
		}else{
			uart_puts("message denied!");
    4590:	82 e1       	ldi	r24, 0x12	; 18
    4592:	95 e0       	ldi	r25, 0x05	; 5
    4594:	0e 94 01 34 	call	0x6802	; 0x6802 <uart_puts>
			continue;
    4598:	c0 cf       	rjmp	.-128    	; 0x451a <authenticate+0x190>
	isotpi_receive(default_id,7,ack);
	uart_putd(ack,8);
	if(ack[0] == ACK_POS){
		uart_puts("Successfully authenticated!");
		}else{
		uart_puts("Authentication failed!");
    459a:	82 ec       	ldi	r24, 0xC2	; 194
    459c:	94 e0       	ldi	r25, 0x04	; 4
    459e:	0e 94 01 34 	call	0x6802	; 0x6802 <uart_puts>
	}
	
	//Sign the public key.
	uint8_t signature[64];
	if(run_scenario == SCENARIO1){
		sign_challenge_dummy(public, signature, role);
    45a2:	df cf       	rjmp	.-66     	; 0x4562 <authenticate+0x1d8>
    45a4:	ce 01       	movw	r24, r28
    45a6:	8f 5b       	subi	r24, 0xBF	; 191
    45a8:	9f 4f       	sbci	r25, 0xFF	; 255
    45aa:	cc dd       	rcall	.-1128   	; 0x4144 <sign_challenge_dummy>
    45ac:	ff ef       	ldi	r31, 0xFF	; 255
    45ae:	29 e6       	ldi	r18, 0x69	; 105
    45b0:	88 e1       	ldi	r24, 0x18	; 24
    45b2:	f1 50       	subi	r31, 0x01	; 1
    45b4:	20 40       	sbci	r18, 0x00	; 0
    45b6:	80 40       	sbci	r24, 0x00	; 0
    45b8:	e1 f7       	brne	.-8      	; 0x45b2 <authenticate+0x228>
    45ba:	00 c0       	rjmp	.+0      	; 0x45bc <authenticate+0x232>
    45bc:	00 00       	nop
    45be:	3e cf       	rjmp	.-388    	; 0x443c <authenticate+0xb2>
	uart_puts("public key received");
	
	//Calculate shared secret.
	uint8_t secret[32];
	if(run_scenario == SCENARIO1){
		calculate_shared_secret_dummy(public, role, secret);
    45c0:	f1 ea       	ldi	r31, 0xA1	; 161
    45c2:	6f 0e       	add	r6, r31
    45c4:	71 1c       	adc	r7, r1
    45c6:	a3 01       	movw	r20, r6
    45c8:	61 2f       	mov	r22, r17
    45ca:	ce 01       	movw	r24, r28
    45cc:	8f 5b       	subi	r24, 0xBF	; 191
    45ce:	9f 4f       	sbci	r25, 0xFF	; 255
    45d0:	0f de       	rcall	.-994    	; 0x41f0 <calculate_shared_secret_dummy>
    45d2:	2f ef       	ldi	r18, 0xFF	; 255
    45d4:	89 e6       	ldi	r24, 0x69	; 105
    45d6:	98 e1       	ldi	r25, 0x18	; 24
    45d8:	21 50       	subi	r18, 0x01	; 1
    45da:	80 40       	sbci	r24, 0x00	; 0
    45dc:	90 40       	sbci	r25, 0x00	; 0
    45de:	e1 f7       	brne	.-8      	; 0x45d8 <authenticate+0x24e>
    45e0:	00 c0       	rjmp	.+0      	; 0x45e2 <authenticate+0x258>
    45e2:	00 00       	nop
    45e4:	1d cf       	rjmp	.-454    	; 0x4420 <authenticate+0x96>

000045e6 <main>:
static uint8_t g_isotpSendBuf[64];



 int main()
 {	
    45e6:	0f 93       	push	r16
    45e8:	1f 93       	push	r17
    45ea:	cf 93       	push	r28
    45ec:	df 93       	push	r29
    45ee:	cd b7       	in	r28, 0x3d	; 61
    45f0:	de b7       	in	r29, 0x3e	; 62
    45f2:	6e 97       	sbiw	r28, 0x1e	; 30
    45f4:	0f b6       	in	r0, 0x3f	; 63
    45f6:	f8 94       	cli
    45f8:	de bf       	out	0x3e, r29	; 62
    45fa:	0f be       	out	0x3f, r0	; 63
    45fc:	cd bf       	out	0x3d, r28	; 61
	 uart_init();
    45fe:	0e 94 f5 33 	call	0x67ea	; 0x67ea <uart_init>
} run_t;

volatile run_t run_scenario = NOTHING;
		
void buttons_init(){
	DDRE = 0x00;
    4602:	1d b8       	out	0x0d, r1	; 13
	PORTE = 1 << PE4 | 1 << PE5 | 1 << PE6 | 1 << PE7;
    4604:	80 ef       	ldi	r24, 0xF0	; 240
    4606:	8e b9       	out	0x0e, r24	; 14
	EICRB = 0x00;
    4608:	10 92 6a 00 	sts	0x006A, r1	; 0x80006a <__TEXT_REGION_LENGTH__+0x7e006a>
	//EICRB = 1 << ISC40 | 1 << ISC41 | 1 << ISC50 | 1 << ISC51 | 1 << ISC60 | 1 << ISC61 | 1 << ISC70 | 1 << ISC71; // set interrupt on falling edge.
	EIMSK = 1 << INT4 | 1 << INT5 | 1 << INT6 | 1 << INT7;
    460c:	8d bb       	out	0x1d, r24	; 29

 int main()
 {	
	 uart_init();
	 buttons_init();
	 can_init();
    460e:	0e 94 5a 02 	call	0x4b4	; 0x4b4 <can_init>
	 uart_puts("test");
    4612:	81 ec       	ldi	r24, 0xC1	; 193
    4614:	92 e0       	ldi	r25, 0x02	; 2
    4616:	0e 94 01 34 	call	0x6802	; 0x6802 <uart_puts>
	 clock_Init();
    461a:	0e 94 80 04 	call	0x900	; 0x900 <clock_Init>
    461e:	8e 01       	movw	r16, r28
    4620:	0f 5f       	subi	r16, 0xFF	; 255
    4622:	1f 4f       	sbci	r17, 0xFF	; 255
	 */
	
	
	 while(1){
		run_t runlcl = run_scenario;
		uint8_t msgs[3][8] = { {0,0,0,0,0,0,0,0} , {0,0,0,0,0,0,0,0} , {0,0,0,0,0,0,0,0} };
    4624:	88 e1       	ldi	r24, 0x18	; 24
	 uart_puts(payload);
	 */
	
	
	 while(1){
		run_t runlcl = run_scenario;
    4626:	90 91 5b 06 	lds	r25, 0x065B	; 0x80065b <run_scenario>
		uint8_t msgs[3][8] = { {0,0,0,0,0,0,0,0} , {0,0,0,0,0,0,0,0} , {0,0,0,0,0,0,0,0} };
    462a:	f8 01       	movw	r30, r16
    462c:	28 2f       	mov	r18, r24
    462e:	11 92       	st	Z+, r1
    4630:	2a 95       	dec	r18
    4632:	e9 f7       	brne	.-6      	; 0x462e <main+0x48>
		uint8_t ids[3][2] = {{2,1},{4,2},{0,0}};
    4634:	26 e0       	ldi	r18, 0x06	; 6
    4636:	e4 e0       	ldi	r30, 0x04	; 4
    4638:	f1 e0       	ldi	r31, 0x01	; 1
    463a:	de 01       	movw	r26, r28
    463c:	59 96       	adiw	r26, 0x19	; 25
    463e:	01 90       	ld	r0, Z+
    4640:	0d 92       	st	X+, r0
    4642:	2a 95       	dec	r18
    4644:	e1 f7       	brne	.-8      	; 0x463e <main+0x58>
		switch(runlcl){
    4646:	92 30       	cpi	r25, 0x02	; 2
    4648:	21 f0       	breq	.+8      	; 0x4652 <main+0x6c>
    464a:	93 30       	cpi	r25, 0x03	; 3
    464c:	b1 f0       	breq	.+44     	; 0x467a <main+0x94>
    464e:	91 30       	cpi	r25, 0x01	; 1
    4650:	51 f7       	brne	.-44     	; 0x4626 <main+0x40>
				return 0;
				break;
				
			//SCENARIO2: Use owner private key (Some messages will be denied).
			case SCENARIO2 :
				authenticate(msgs, ids, OWNER_ROLE,3);
    4652:	23 e0       	ldi	r18, 0x03	; 3
    4654:	44 e0       	ldi	r20, 0x04	; 4
    4656:	be 01       	movw	r22, r28
    4658:	67 5e       	subi	r22, 0xE7	; 231
    465a:	7f 4f       	sbci	r23, 0xFF	; 255
    465c:	c8 01       	movw	r24, r16
    465e:	95 de       	rcall	.-726    	; 0x438a <authenticate>
				return 0;
				break;
		}
	 }
	 return 0;
 }
    4660:	80 e0       	ldi	r24, 0x00	; 0
    4662:	90 e0       	ldi	r25, 0x00	; 0
    4664:	6e 96       	adiw	r28, 0x1e	; 30
    4666:	0f b6       	in	r0, 0x3f	; 63
    4668:	f8 94       	cli
    466a:	de bf       	out	0x3e, r29	; 62
    466c:	0f be       	out	0x3f, r0	; 63
    466e:	cd bf       	out	0x3d, r28	; 61
    4670:	df 91       	pop	r29
    4672:	cf 91       	pop	r28
    4674:	1f 91       	pop	r17
    4676:	0f 91       	pop	r16
    4678:	08 95       	ret
				return 0;
				break;
				
			//SCENARIO3: Use tester private key (all messages accepted).
			case SCENARIO3 :
				authenticate(msgs, ids, ADMIN_ROLE,3);
    467a:	23 e0       	ldi	r18, 0x03	; 3
    467c:	40 e0       	ldi	r20, 0x00	; 0
    467e:	be 01       	movw	r22, r28
    4680:	67 5e       	subi	r22, 0xE7	; 231
    4682:	7f 4f       	sbci	r23, 0xFF	; 255
    4684:	c8 01       	movw	r24, r16
    4686:	81 de       	rcall	.-766    	; 0x438a <authenticate>
				return 0;
    4688:	eb cf       	rjmp	.-42     	; 0x4660 <main+0x7a>

0000468a <hmac_sha256>:

/*
 * keylength in bits!
 * message length in bits!
 */
void hmac_sha256(void *dest, const void *key, uint16_t keylength_b, const void *msg, uint32_t msglength_b){ /* a one-shot*/
    468a:	2f 92       	push	r2
    468c:	3f 92       	push	r3
    468e:	4f 92       	push	r4
    4690:	5f 92       	push	r5
    4692:	6f 92       	push	r6
    4694:	7f 92       	push	r7
    4696:	8f 92       	push	r8
    4698:	9f 92       	push	r9
    469a:	af 92       	push	r10
    469c:	bf 92       	push	r11
    469e:	cf 92       	push	r12
    46a0:	df 92       	push	r13
    46a2:	ef 92       	push	r14
    46a4:	ff 92       	push	r15
    46a6:	0f 93       	push	r16
    46a8:	1f 93       	push	r17
    46aa:	cf 93       	push	r28
    46ac:	df 93       	push	r29
    46ae:	cd b7       	in	r28, 0x3d	; 61
    46b0:	de b7       	in	r29, 0x3e	; 62
    46b2:	c8 56       	subi	r28, 0x68	; 104
    46b4:	d1 09       	sbc	r29, r1
    46b6:	0f b6       	in	r0, 0x3f	; 63
    46b8:	f8 94       	cli
    46ba:	de bf       	out	0x3e, r29	; 62
    46bc:	0f be       	out	0x3f, r0	; 63
    46be:	cd bf       	out	0x3d, r28	; 61
    46c0:	4c 01       	movw	r8, r24
    46c2:	19 01       	movw	r2, r18
    46c4:	a9 96       	adiw	r28, 0x29	; 41
    46c6:	ec ae       	std	Y+60, r14	; 0x3c
    46c8:	fd ae       	std	Y+61, r15	; 0x3d
    46ca:	0e af       	std	Y+62, r16	; 0x3e
    46cc:	1f af       	std	Y+63, r17	; 0x3f
    46ce:	a9 97       	sbiw	r28, 0x29	; 41
	sha256_ctx_t s;
	uint8_t i;
	uint8_t buffer[HMAC_SHA256_BLOCK_BYTES];
	
	memset(buffer, 0, HMAC_SHA256_BLOCK_BYTES);
    46d0:	ce 01       	movw	r24, r28
    46d2:	01 96       	adiw	r24, 0x01	; 1
    46d4:	7c 01       	movw	r14, r24
    46d6:	80 e4       	ldi	r24, 0x40	; 64
    46d8:	d7 01       	movw	r26, r14
    46da:	1d 92       	st	X+, r1
    46dc:	8a 95       	dec	r24
    46de:	e9 f7       	brne	.-6      	; 0x46da <hmac_sha256+0x50>
	
	/* if key is larger than a block we have to hash it*/
	if (keylength_b > SHA256_BLOCK_BITS){
    46e0:	41 30       	cpi	r20, 0x01	; 1
    46e2:	b2 e0       	ldi	r27, 0x02	; 2
    46e4:	5b 07       	cpc	r21, r27
    46e6:	08 f4       	brcc	.+2      	; 0x46ea <hmac_sha256+0x60>
    46e8:	9d c0       	rjmp	.+314    	; 0x4824 <hmac_sha256+0x19a>
		sha256((void*)buffer, key, keylength_b);
    46ea:	9a 01       	movw	r18, r20
    46ec:	40 e0       	ldi	r20, 0x00	; 0
    46ee:	50 e0       	ldi	r21, 0x00	; 0
    46f0:	c7 01       	movw	r24, r14
    46f2:	b3 d0       	rcall	.+358    	; 0x485a <sha256>
    46f4:	87 01       	movw	r16, r14
    46f6:	6e 01       	movw	r12, r28
    46f8:	e1 e4       	ldi	r30, 0x41	; 65
    46fa:	ce 0e       	add	r12, r30
    46fc:	d1 1c       	adc	r13, r1

/*
 * keylength in bits!
 * message length in bits!
 */
void hmac_sha256(void *dest, const void *key, uint16_t keylength_b, const void *msg, uint32_t msglength_b){ /* a one-shot*/
    46fe:	f7 01       	movw	r30, r14
	} else {
		memcpy(buffer, key, (keylength_b+7)/8);
	}
	
	for (i=0; i<SHA256_BLOCK_BYTES; ++i){
		buffer[i] ^= IPAD;
    4700:	96 e3       	ldi	r25, 0x36	; 54
    4702:	80 81       	ld	r24, Z
    4704:	89 27       	eor	r24, r25
    4706:	81 93       	st	Z+, r24
		sha256((void*)buffer, key, keylength_b);
	} else {
		memcpy(buffer, key, (keylength_b+7)/8);
	}
	
	for (i=0; i<SHA256_BLOCK_BYTES; ++i){
    4708:	ec 15       	cp	r30, r12
    470a:	fd 05       	cpc	r31, r13
    470c:	d1 f7       	brne	.-12     	; 0x4702 <hmac_sha256+0x78>
		buffer[i] ^= IPAD;
	}
	sha256_init(&s);
    470e:	c6 01       	movw	r24, r12
    4710:	95 d0       	rcall	.+298    	; 0x483c <sha256_init>
	sha256_nextBlock(&s, buffer);
    4712:	b7 01       	movw	r22, r14
    4714:	c6 01       	movw	r24, r12
    4716:	9d d0       	rcall	.+314    	; 0x4852 <sha256_nextBlock>
	while (msglength_b >= HMAC_SHA256_BLOCK_BITS){
    4718:	a9 96       	adiw	r28, 0x29	; 41
    471a:	8c ad       	ldd	r24, Y+60	; 0x3c
    471c:	9d ad       	ldd	r25, Y+61	; 0x3d
    471e:	ae ad       	ldd	r26, Y+62	; 0x3e
    4720:	bf ad       	ldd	r27, Y+63	; 0x3f
    4722:	a9 97       	sbiw	r28, 0x29	; 41
    4724:	81 15       	cp	r24, r1
    4726:	e2 e0       	ldi	r30, 0x02	; 2
    4728:	9e 07       	cpc	r25, r30
    472a:	a1 05       	cpc	r26, r1
    472c:	b1 05       	cpc	r27, r1
    472e:	08 f4       	brcc	.+2      	; 0x4732 <hmac_sha256+0xa8>
    4730:	3e c0       	rjmp	.+124    	; 0x47ae <hmac_sha256+0x124>
    4732:	2c 01       	movw	r4, r24
    4734:	3d 01       	movw	r6, r26
		sha256_nextBlock(&s, msg);
    4736:	51 01       	movw	r10, r2
    4738:	b5 01       	movw	r22, r10
    473a:	c6 01       	movw	r24, r12
    473c:	8a d0       	rcall	.+276    	; 0x4852 <sha256_nextBlock>
		msg = (uint8_t*)msg + HMAC_SHA256_BLOCK_BYTES;
    473e:	f0 e4       	ldi	r31, 0x40	; 64
    4740:	af 0e       	add	r10, r31
    4742:	b1 1c       	adc	r11, r1
		msglength_b -=  HMAC_SHA256_BLOCK_BITS;
    4744:	22 e0       	ldi	r18, 0x02	; 2
    4746:	52 1a       	sub	r5, r18
    4748:	61 08       	sbc	r6, r1
    474a:	71 08       	sbc	r7, r1
	for (i=0; i<SHA256_BLOCK_BYTES; ++i){
		buffer[i] ^= IPAD;
	}
	sha256_init(&s);
	sha256_nextBlock(&s, buffer);
	while (msglength_b >= HMAC_SHA256_BLOCK_BITS){
    474c:	41 14       	cp	r4, r1
    474e:	82 e0       	ldi	r24, 0x02	; 2
    4750:	58 06       	cpc	r5, r24
    4752:	61 04       	cpc	r6, r1
    4754:	71 04       	cpc	r7, r1
    4756:	80 f7       	brcc	.-32     	; 0x4738 <hmac_sha256+0xae>
    4758:	a9 96       	adiw	r28, 0x29	; 41
    475a:	8c ad       	ldd	r24, Y+60	; 0x3c
    475c:	9d ad       	ldd	r25, Y+61	; 0x3d
    475e:	ae ad       	ldd	r26, Y+62	; 0x3e
    4760:	bf ad       	ldd	r27, Y+63	; 0x3f
    4762:	a9 97       	sbiw	r28, 0x29	; 41
    4764:	92 50       	subi	r25, 0x02	; 2
    4766:	a1 09       	sbc	r26, r1
    4768:	b1 09       	sbc	r27, r1
    476a:	29 e0       	ldi	r18, 0x09	; 9
    476c:	b6 95       	lsr	r27
    476e:	a7 95       	ror	r26
    4770:	97 95       	ror	r25
    4772:	87 95       	ror	r24
    4774:	2a 95       	dec	r18
    4776:	d1 f7       	brne	.-12     	; 0x476c <hmac_sha256+0xe2>
    4778:	01 96       	adiw	r24, 0x01	; 1
    477a:	00 24       	eor	r0, r0
    477c:	96 95       	lsr	r25
    477e:	87 95       	ror	r24
    4780:	07 94       	ror	r0
    4782:	96 95       	lsr	r25
    4784:	87 95       	ror	r24
    4786:	07 94       	ror	r0
    4788:	98 2f       	mov	r25, r24
    478a:	80 2d       	mov	r24, r0
    478c:	28 0e       	add	r2, r24
    478e:	39 1e       	adc	r3, r25
    4790:	a9 96       	adiw	r28, 0x29	; 41
    4792:	8c ad       	ldd	r24, Y+60	; 0x3c
    4794:	9d ad       	ldd	r25, Y+61	; 0x3d
    4796:	ae ad       	ldd	r26, Y+62	; 0x3e
    4798:	bf ad       	ldd	r27, Y+63	; 0x3f
    479a:	a9 97       	sbiw	r28, 0x29	; 41
    479c:	91 70       	andi	r25, 0x01	; 1
    479e:	aa 27       	eor	r26, r26
    47a0:	bb 27       	eor	r27, r27
    47a2:	a9 96       	adiw	r28, 0x29	; 41
    47a4:	8c af       	std	Y+60, r24	; 0x3c
    47a6:	9d af       	std	Y+61, r25	; 0x3d
    47a8:	ae af       	std	Y+62, r26	; 0x3e
    47aa:	bf af       	std	Y+63, r27	; 0x3f
    47ac:	a9 97       	sbiw	r28, 0x29	; 41
		sha256_nextBlock(&s, msg);
		msg = (uint8_t*)msg + HMAC_SHA256_BLOCK_BYTES;
		msglength_b -=  HMAC_SHA256_BLOCK_BITS;
	}
	sha256_lastBlock(&s, msg, msglength_b);
    47ae:	a7 96       	adiw	r28, 0x27	; 39
    47b0:	4e ad       	ldd	r20, Y+62	; 0x3e
    47b2:	5f ad       	ldd	r21, Y+63	; 0x3f
    47b4:	a7 97       	sbiw	r28, 0x27	; 39
    47b6:	b1 01       	movw	r22, r2
    47b8:	c6 01       	movw	r24, r12
    47ba:	4d d0       	rcall	.+154    	; 0x4856 <sha256_lastBlock>
	/* since buffer still contains key xor ipad we can do ... */
	for (i=0; i<HMAC_SHA256_BLOCK_BYTES; ++i){
		buffer[i] ^= IPAD ^ OPAD;
    47bc:	9a e6       	ldi	r25, 0x6A	; 106
    47be:	d8 01       	movw	r26, r16
    47c0:	8c 91       	ld	r24, X
    47c2:	89 27       	eor	r24, r25
    47c4:	f8 01       	movw	r30, r16
    47c6:	81 93       	st	Z+, r24
    47c8:	8f 01       	movw	r16, r30
		msg = (uint8_t*)msg + HMAC_SHA256_BLOCK_BYTES;
		msglength_b -=  HMAC_SHA256_BLOCK_BITS;
	}
	sha256_lastBlock(&s, msg, msglength_b);
	/* since buffer still contains key xor ipad we can do ... */
	for (i=0; i<HMAC_SHA256_BLOCK_BYTES; ++i){
    47ca:	ec 15       	cp	r30, r12
    47cc:	fd 05       	cpc	r31, r13
		buffer[i] ^= IPAD ^ OPAD;
	}
	sha256_ctx2hash(dest, &s); /* save inner hash temporary to dest */
    47ce:	b9 f7       	brne	.-18     	; 0x47be <hmac_sha256+0x134>
    47d0:	bf 01       	movw	r22, r30
    47d2:	c4 01       	movw	r24, r8
	sha256_init(&s);
    47d4:	d4 d0       	rcall	.+424    	; 0x497e <sha256_ctx2hash>
    47d6:	c8 01       	movw	r24, r16
    47d8:	31 d0       	rcall	.+98     	; 0x483c <sha256_init>
	sha256_nextBlock(&s, buffer);
    47da:	b7 01       	movw	r22, r14
    47dc:	c8 01       	movw	r24, r16
    47de:	39 d0       	rcall	.+114    	; 0x4852 <sha256_nextBlock>
	sha256_lastBlock(&s, dest, SHA256_HASH_BITS);
    47e0:	40 e0       	ldi	r20, 0x00	; 0
    47e2:	51 e0       	ldi	r21, 0x01	; 1
    47e4:	b4 01       	movw	r22, r8
    47e6:	c8 01       	movw	r24, r16
    47e8:	36 d0       	rcall	.+108    	; 0x4856 <sha256_lastBlock>
    47ea:	b8 01       	movw	r22, r16
	sha256_ctx2hash(dest, &s);
    47ec:	c4 01       	movw	r24, r8
    47ee:	c7 d0       	rcall	.+398    	; 0x497e <sha256_ctx2hash>
    47f0:	c8 59       	subi	r28, 0x98	; 152
    47f2:	df 4f       	sbci	r29, 0xFF	; 255
}
    47f4:	0f b6       	in	r0, 0x3f	; 63
    47f6:	f8 94       	cli
    47f8:	de bf       	out	0x3e, r29	; 62
    47fa:	0f be       	out	0x3f, r0	; 63
    47fc:	cd bf       	out	0x3d, r28	; 61
    47fe:	df 91       	pop	r29
    4800:	cf 91       	pop	r28
    4802:	1f 91       	pop	r17
    4804:	0f 91       	pop	r16
    4806:	ff 90       	pop	r15
    4808:	ef 90       	pop	r14
    480a:	df 90       	pop	r13
    480c:	cf 90       	pop	r12
    480e:	bf 90       	pop	r11
    4810:	af 90       	pop	r10
    4812:	9f 90       	pop	r9
    4814:	8f 90       	pop	r8
    4816:	7f 90       	pop	r7
    4818:	6f 90       	pop	r6
    481a:	5f 90       	pop	r5
    481c:	4f 90       	pop	r4
    481e:	3f 90       	pop	r3
    4820:	2f 90       	pop	r2
    4822:	08 95       	ret
    4824:	49 5f       	subi	r20, 0xF9	; 249
    4826:	5f 4f       	sbci	r21, 0xFF	; 255
	
	/* if key is larger than a block we have to hash it*/
	if (keylength_b > SHA256_BLOCK_BITS){
		sha256((void*)buffer, key, keylength_b);
	} else {
		memcpy(buffer, key, (keylength_b+7)/8);
    4828:	56 95       	lsr	r21
    482a:	47 95       	ror	r20
    482c:	56 95       	lsr	r21
    482e:	47 95       	ror	r20
    4830:	56 95       	lsr	r21
    4832:	47 95       	ror	r20
    4834:	c7 01       	movw	r24, r14
    4836:	0e 94 1d 35 	call	0x6a3a	; 0x6a3a <memcpy>
    483a:	5c cf       	rjmp	.-328    	; 0x46f4 <hmac_sha256+0x6a>

0000483c <sha256_init>:
 * \c sh256_init c initialises the given sha256 context for hashing
 * @param state pointer to a sha256 context
 * @return none
 */
void sha256_init(sha256_ctx_t *state){
	state->length=0;
    483c:	fc 01       	movw	r30, r24
    483e:	10 a2       	std	Z+32, r1	; 0x20
    4840:	11 a2       	std	Z+33, r1	; 0x21
    4842:	12 a2       	std	Z+34, r1	; 0x22
    4844:	13 a2       	std	Z+35, r1	; 0x23
	memcpy_P(state->h, sha256_init_vector, 8*4);
    4846:	40 e2       	ldi	r20, 0x20	; 32
    4848:	50 e0       	ldi	r21, 0x00	; 0
    484a:	64 e9       	ldi	r22, 0x94	; 148
    484c:	70 e0       	ldi	r23, 0x00	; 0
    484e:	0c 94 14 35 	jmp	0x6a28	; 0x6a28 <memcpy_P>

00004852 <sha256_nextBlock>:
}

/*************************************************************************/
void sha256_nextBlock (sha256_ctx_t *state, const void *block){
	sha2_small_common_nextBlock(state, block);
    4852:	0c 94 7d 2f 	jmp	0x5efa	; 0x5efa <sha2_small_common_nextBlock>

00004856 <sha256_lastBlock>:
}

/*************************************************************************/
void sha256_lastBlock (sha256_ctx_t *state, const void *block, uint16_t length_b){
	sha2_small_common_lastBlock(state, block, length_b);
    4856:	0c 94 94 32 	jmp	0x6528	; 0x6528 <sha2_small_common_lastBlock>

0000485a <sha256>:
/*************************************************************************/

/*
 * length in bits!
 */
void sha256(void *dest, const void *msg, uint32_t length_b){ /* length could be choosen longer but this is for µC */
    485a:	4f 92       	push	r4
    485c:	5f 92       	push	r5
    485e:	6f 92       	push	r6
    4860:	7f 92       	push	r7
    4862:	8f 92       	push	r8
    4864:	9f 92       	push	r9
    4866:	af 92       	push	r10
    4868:	bf 92       	push	r11
    486a:	cf 92       	push	r12
    486c:	df 92       	push	r13
    486e:	ef 92       	push	r14
    4870:	ff 92       	push	r15
    4872:	0f 93       	push	r16
    4874:	1f 93       	push	r17
    4876:	cf 93       	push	r28
    4878:	df 93       	push	r29
    487a:	cd b7       	in	r28, 0x3d	; 61
    487c:	de b7       	in	r29, 0x3e	; 62
    487e:	a4 97       	sbiw	r28, 0x24	; 36
    4880:	0f b6       	in	r0, 0x3f	; 63
    4882:	f8 94       	cli
    4884:	de bf       	out	0x3e, r29	; 62
    4886:	0f be       	out	0x3f, r0	; 63
    4888:	cd bf       	out	0x3d, r28	; 61
    488a:	8c 01       	movw	r16, r24
    488c:	6b 01       	movw	r12, r22
    488e:	29 01       	movw	r4, r18
    4890:	3a 01       	movw	r6, r20
 * \c sh256_init c initialises the given sha256 context for hashing
 * @param state pointer to a sha256 context
 * @return none
 */
void sha256_init(sha256_ctx_t *state){
	state->length=0;
    4892:	19 a2       	std	Y+33, r1	; 0x21
    4894:	1a a2       	std	Y+34, r1	; 0x22
    4896:	1b a2       	std	Y+35, r1	; 0x23
    4898:	1c a2       	std	Y+36, r1	; 0x24
	memcpy_P(state->h, sha256_init_vector, 8*4);
    489a:	40 e2       	ldi	r20, 0x20	; 32
    489c:	50 e0       	ldi	r21, 0x00	; 0
    489e:	64 e9       	ldi	r22, 0x94	; 148
    48a0:	70 e0       	ldi	r23, 0x00	; 0
    48a2:	ce 01       	movw	r24, r28
    48a4:	01 96       	adiw	r24, 0x01	; 1
    48a6:	0e 94 14 35 	call	0x6a28	; 0x6a28 <memcpy_P>
 * length in bits!
 */
void sha256(void *dest, const void *msg, uint32_t length_b){ /* length could be choosen longer but this is for µC */
	sha256_ctx_t s;
	sha256_init(&s);
	while(length_b >= SHA256_BLOCK_BITS){
    48aa:	41 14       	cp	r4, r1
    48ac:	82 e0       	ldi	r24, 0x02	; 2
    48ae:	58 06       	cpc	r5, r24
    48b0:	61 04       	cpc	r6, r1
    48b2:	71 04       	cpc	r7, r1
    48b4:	88 f1       	brcs	.+98     	; 0x4918 <sha256+0xbe>
    48b6:	53 01       	movw	r10, r6
    48b8:	42 01       	movw	r8, r4
    48ba:	76 01       	movw	r14, r12
	memcpy_P(state->h, sha256_init_vector, 8*4);
}

/*************************************************************************/
void sha256_nextBlock (sha256_ctx_t *state, const void *block){
	sha2_small_common_nextBlock(state, block);
    48bc:	b7 01       	movw	r22, r14
    48be:	ce 01       	movw	r24, r28
    48c0:	01 96       	adiw	r24, 0x01	; 1
    48c2:	0e 94 7d 2f 	call	0x5efa	; 0x5efa <sha2_small_common_nextBlock>
void sha256(void *dest, const void *msg, uint32_t length_b){ /* length could be choosen longer but this is for µC */
	sha256_ctx_t s;
	sha256_init(&s);
	while(length_b >= SHA256_BLOCK_BITS){
		sha256_nextBlock(&s, msg);
		msg = (uint8_t*)msg + SHA256_BLOCK_BITS/8;
    48c6:	80 e4       	ldi	r24, 0x40	; 64
    48c8:	e8 0e       	add	r14, r24
    48ca:	f1 1c       	adc	r15, r1
		length_b -= SHA256_BLOCK_BITS;
    48cc:	82 e0       	ldi	r24, 0x02	; 2
    48ce:	98 1a       	sub	r9, r24
    48d0:	a1 08       	sbc	r10, r1
    48d2:	b1 08       	sbc	r11, r1
 * length in bits!
 */
void sha256(void *dest, const void *msg, uint32_t length_b){ /* length could be choosen longer but this is for µC */
	sha256_ctx_t s;
	sha256_init(&s);
	while(length_b >= SHA256_BLOCK_BITS){
    48d4:	81 14       	cp	r8, r1
    48d6:	82 e0       	ldi	r24, 0x02	; 2
    48d8:	98 06       	cpc	r9, r24
    48da:	a1 04       	cpc	r10, r1
    48dc:	b1 04       	cpc	r11, r1
    48de:	70 f7       	brcc	.-36     	; 0x48bc <sha256+0x62>
    48e0:	d3 01       	movw	r26, r6
    48e2:	c2 01       	movw	r24, r4
    48e4:	92 50       	subi	r25, 0x02	; 2
    48e6:	a1 09       	sbc	r26, r1
    48e8:	b1 09       	sbc	r27, r1
    48ea:	29 e0       	ldi	r18, 0x09	; 9
    48ec:	b6 95       	lsr	r27
    48ee:	a7 95       	ror	r26
    48f0:	97 95       	ror	r25
    48f2:	87 95       	ror	r24
    48f4:	2a 95       	dec	r18
    48f6:	d1 f7       	brne	.-12     	; 0x48ec <sha256+0x92>
    48f8:	01 96       	adiw	r24, 0x01	; 1
    48fa:	00 24       	eor	r0, r0
    48fc:	96 95       	lsr	r25
    48fe:	87 95       	ror	r24
    4900:	07 94       	ror	r0
    4902:	96 95       	lsr	r25
    4904:	87 95       	ror	r24
    4906:	07 94       	ror	r0
    4908:	98 2f       	mov	r25, r24
    490a:	80 2d       	mov	r24, r0
    490c:	c8 0e       	add	r12, r24
    490e:	d9 1e       	adc	r13, r25
    4910:	81 e0       	ldi	r24, 0x01	; 1
    4912:	58 22       	and	r5, r24
    4914:	66 24       	eor	r6, r6
    4916:	77 24       	eor	r7, r7
	sha2_small_common_nextBlock(state, block);
}

/*************************************************************************/
void sha256_lastBlock (sha256_ctx_t *state, const void *block, uint16_t length_b){
	sha2_small_common_lastBlock(state, block, length_b);
    4918:	a2 01       	movw	r20, r4
    491a:	b6 01       	movw	r22, r12
    491c:	ce 01       	movw	r24, r28
    491e:	01 96       	adiw	r24, 0x01	; 1
    4920:	0e 94 94 32 	call	0x6528	; 0x6528 <sha2_small_common_lastBlock>

/*************************************************************************/

void sha256_ctx2hash(void *dest, const sha256_ctx_t *state){
#if defined LITTLE_ENDIAN
	uint8_t i, j, *s=(uint8_t*)(state->h);
    4924:	9e 01       	movw	r18, r28
    4926:	2f 5f       	subi	r18, 0xFF	; 255
    4928:	3f 4f       	sbci	r19, 0xFF	; 255
    492a:	ae 01       	movw	r20, r28
    492c:	4f 5d       	subi	r20, 0xDF	; 223
    492e:	5f 4f       	sbci	r21, 0xFF	; 255
    4930:	f8 01       	movw	r30, r16
	i=8;
	do{
		j=3;
    4932:	83 e0       	ldi	r24, 0x03	; 3
		do{
			*((uint8_t*)dest) = s[j];
    4934:	d9 01       	movw	r26, r18
    4936:	a8 0f       	add	r26, r24
    4938:	b1 1d       	adc	r27, r1
    493a:	9c 91       	ld	r25, X
    493c:	91 93       	st	Z+, r25
			dest = (uint8_t*)dest + 1;
		}while(j--);
    493e:	81 50       	subi	r24, 0x01	; 1
    4940:	c8 f7       	brcc	.-14     	; 0x4934 <sha256+0xda>
    4942:	0c 5f       	subi	r16, 0xFC	; 252
    4944:	1f 4f       	sbci	r17, 0xFF	; 255
		s += 4;
    4946:	2c 5f       	subi	r18, 0xFC	; 252
    4948:	3f 4f       	sbci	r19, 0xFF	; 255
	}while(--i);
    494a:	24 17       	cp	r18, r20
    494c:	35 07       	cpc	r19, r21
    494e:	81 f7       	brne	.-32     	; 0x4930 <sha256+0xd6>
		msg = (uint8_t*)msg + SHA256_BLOCK_BITS/8;
		length_b -= SHA256_BLOCK_BITS;
	}
	sha256_lastBlock(&s, msg, length_b);
	sha256_ctx2hash(dest,&s);
}
    4950:	a4 96       	adiw	r28, 0x24	; 36
    4952:	0f b6       	in	r0, 0x3f	; 63
    4954:	f8 94       	cli
    4956:	de bf       	out	0x3e, r29	; 62
    4958:	0f be       	out	0x3f, r0	; 63
    495a:	cd bf       	out	0x3d, r28	; 61
    495c:	df 91       	pop	r29
    495e:	cf 91       	pop	r28
    4960:	1f 91       	pop	r17
    4962:	0f 91       	pop	r16
    4964:	ff 90       	pop	r15
    4966:	ef 90       	pop	r14
    4968:	df 90       	pop	r13
    496a:	cf 90       	pop	r12
    496c:	bf 90       	pop	r11
    496e:	af 90       	pop	r10
    4970:	9f 90       	pop	r9
    4972:	8f 90       	pop	r8
    4974:	7f 90       	pop	r7
    4976:	6f 90       	pop	r6
    4978:	5f 90       	pop	r5
    497a:	4f 90       	pop	r4
    497c:	08 95       	ret

0000497e <sha256_ctx2hash>:



/*************************************************************************/

void sha256_ctx2hash(void *dest, const sha256_ctx_t *state){
    497e:	cf 93       	push	r28
    4980:	df 93       	push	r29
    4982:	ac 01       	movw	r20, r24
    4984:	ec 01       	movw	r28, r24
    4986:	a0 96       	adiw	r28, 0x20	; 32
    4988:	fa 01       	movw	r30, r20
#if defined LITTLE_ENDIAN
	uint8_t i, j, *s=(uint8_t*)(state->h);
	i=8;
	do{
		j=3;
    498a:	93 e0       	ldi	r25, 0x03	; 3
		do{
			*((uint8_t*)dest) = s[j];
    498c:	db 01       	movw	r26, r22
    498e:	a9 0f       	add	r26, r25
    4990:	b1 1d       	adc	r27, r1
    4992:	2c 91       	ld	r18, X
    4994:	21 93       	st	Z+, r18
			dest = (uint8_t*)dest + 1;
		}while(j--);
    4996:	91 50       	subi	r25, 0x01	; 1
    4998:	c8 f7       	brcc	.-14     	; 0x498c <sha256_ctx2hash+0xe>
    499a:	4c 5f       	subi	r20, 0xFC	; 252
    499c:	5f 4f       	sbci	r21, 0xFF	; 255
		s += 4;
    499e:	6c 5f       	subi	r22, 0xFC	; 252
    49a0:	7f 4f       	sbci	r23, 0xFF	; 255
	}while(--i);
    49a2:	c4 17       	cp	r28, r20
    49a4:	d5 07       	cpc	r29, r21
    49a6:	81 f7       	brne	.-32     	; 0x4988 <sha256_ctx2hash+0xa>
#elif BIG_ENDIAN
	memcpy(dest, state->h, 32);
#else
# error unsupported endian type!
#endif
}
    49a8:	df 91       	pop	r29
    49aa:	cf 91       	pop	r28
    49ac:	08 95       	ret

000049ae <sha2_large_common_nextBlock>:
#define SIGMA_0(x) (rotr64((x), 28) ^ rotl64((x), 30) ^ rotl64((x), 25))
#define SIGMA_1(x) (rotr64((x), 14) ^ rotr64((x), 18) ^ rotl64((x), 23))
#define SIGMA_a(x) (rotr64((x),  1) ^ rotr64((x),  8) ^ ((x)>>7))
#define SIGMA_b(x) (rotr64((x), 19) ^ rotl64((x),  3) ^ ((x)>>6))

void sha2_large_common_nextBlock(sha2_large_common_ctx_t *ctx, const void *block){
    49ae:	2f 92       	push	r2
    49b0:	3f 92       	push	r3
    49b2:	4f 92       	push	r4
    49b4:	5f 92       	push	r5
    49b6:	6f 92       	push	r6
    49b8:	7f 92       	push	r7
    49ba:	8f 92       	push	r8
    49bc:	9f 92       	push	r9
    49be:	af 92       	push	r10
    49c0:	bf 92       	push	r11
    49c2:	cf 92       	push	r12
    49c4:	df 92       	push	r13
    49c6:	ef 92       	push	r14
    49c8:	ff 92       	push	r15
    49ca:	0f 93       	push	r16
    49cc:	1f 93       	push	r17
    49ce:	cf 93       	push	r28
    49d0:	df 93       	push	r29
    49d2:	cd b7       	in	r28, 0x3d	; 61
    49d4:	de b7       	in	r29, 0x3e	; 62
    49d6:	c2 5f       	subi	r28, 0xF2	; 242
    49d8:	d1 09       	sbc	r29, r1
    49da:	0f b6       	in	r0, 0x3f	; 63
    49dc:	f8 94       	cli
    49de:	de bf       	out	0x3e, r29	; 62
    49e0:	0f be       	out	0x3f, r0	; 63
    49e2:	cd bf       	out	0x3d, r28	; 61
    49e4:	cf 50       	subi	r28, 0x0F	; 15
    49e6:	df 4f       	sbci	r29, 0xFF	; 255
    49e8:	99 83       	std	Y+1, r25	; 0x01
    49ea:	88 83       	st	Y, r24
    49ec:	c1 5f       	subi	r28, 0xF1	; 241
    49ee:	d0 40       	sbci	r29, 0x00	; 0
    49f0:	c5 53       	subi	r28, 0x35	; 53
    49f2:	df 4f       	sbci	r29, 0xFF	; 255
    49f4:	79 83       	std	Y+1, r23	; 0x01
    49f6:	68 83       	st	Y, r22
    49f8:	cb 5c       	subi	r28, 0xCB	; 203
    49fa:	d0 40       	sbci	r29, 0x00	; 0
    49fc:	ce 01       	movw	r24, r28
    49fe:	01 96       	adiw	r24, 0x01	; 1
    4a00:	cb 51       	subi	r28, 0x1B	; 27
    4a02:	df 4f       	sbci	r29, 0xFF	; 255
    4a04:	99 83       	std	Y+1, r25	; 0x01
    4a06:	88 83       	st	Y, r24
    4a08:	c5 5e       	subi	r28, 0xE5	; 229
    4a0a:	d0 40       	sbci	r29, 0x00	; 0
    4a0c:	2e 01       	movw	r4, r28
    4a0e:	91 e8       	ldi	r25, 0x81	; 129
    4a10:	49 0e       	add	r4, r25
    4a12:	51 1c       	adc	r5, r1
    4a14:	de 01       	movw	r26, r28
    4a16:	11 96       	adiw	r26, 0x01	; 1
    4a18:	c7 53       	subi	r28, 0x37	; 55
    4a1a:	df 4f       	sbci	r29, 0xFF	; 255
    4a1c:	b9 83       	std	Y+1, r27	; 0x01
    4a1e:	a8 83       	st	Y, r26
    4a20:	c9 5c       	subi	r28, 0xC9	; 201
    4a22:	d0 40       	sbci	r29, 0x00	; 0
	uint64_t t1, t2;
	const uint64_t *k=sha2_large_common_const;
	uint8_t i;
	i=16;
	do{
		w[16-i] = change_endian64(*((const uint64_t*)block));
    4a24:	c5 53       	subi	r28, 0x35	; 53
    4a26:	df 4f       	sbci	r29, 0xFF	; 255
    4a28:	a8 81       	ld	r26, Y
    4a2a:	b9 81       	ldd	r27, Y+1	; 0x01
    4a2c:	cb 5c       	subi	r28, 0xCB	; 203
    4a2e:	d0 40       	sbci	r29, 0x00	; 0
    4a30:	ec 91       	ld	r30, X
    4a32:	11 96       	adiw	r26, 0x01	; 1
    4a34:	9c 90       	ld	r9, X
    4a36:	11 97       	sbiw	r26, 0x01	; 1
    4a38:	12 96       	adiw	r26, 0x02	; 2
    4a3a:	ac 90       	ld	r10, X
    4a3c:	12 97       	sbiw	r26, 0x02	; 2
    4a3e:	13 96       	adiw	r26, 0x03	; 3
    4a40:	bc 90       	ld	r11, X
    4a42:	13 97       	sbiw	r26, 0x03	; 3
    4a44:	14 96       	adiw	r26, 0x04	; 4
    4a46:	cc 90       	ld	r12, X
    4a48:	14 97       	sbiw	r26, 0x04	; 4
    4a4a:	15 96       	adiw	r26, 0x05	; 5
    4a4c:	dc 90       	ld	r13, X
    4a4e:	15 97       	sbiw	r26, 0x05	; 5
    4a50:	16 96       	adiw	r26, 0x06	; 6
    4a52:	2c 90       	ld	r2, X
    4a54:	16 97       	sbiw	r26, 0x06	; 6
    4a56:	17 96       	adiw	r26, 0x07	; 7
    4a58:	3c 90       	ld	r3, X
    4a5a:	17 97       	sbiw	r26, 0x07	; 7
    4a5c:	18 96       	adiw	r26, 0x08	; 8
    4a5e:	c5 53       	subi	r28, 0x35	; 53
    4a60:	df 4f       	sbci	r29, 0xFF	; 255
    4a62:	b9 83       	std	Y+1, r27	; 0x01
    4a64:	a8 83       	st	Y, r26
    4a66:	cb 5c       	subi	r28, 0xCB	; 203
    4a68:	d0 40       	sbci	r29, 0x00	; 0
    4a6a:	28 e0       	ldi	r18, 0x08	; 8
    4a6c:	82 2e       	mov	r8, r18
};


static const
uint64_t change_endian64(uint64_t x){
	uint64_t r=0;
    4a6e:	e1 2c       	mov	r14, r1
    4a70:	f1 2c       	mov	r15, r1
    4a72:	10 e0       	ldi	r17, 0x00	; 0
    4a74:	b0 e0       	ldi	r27, 0x00	; 0
    4a76:	a0 e0       	ldi	r26, 0x00	; 0
    4a78:	c3 53       	subi	r28, 0x33	; 51
    4a7a:	df 4f       	sbci	r29, 0xFF	; 255
    4a7c:	18 82       	st	Y, r1
    4a7e:	cd 5c       	subi	r28, 0xCD	; 205
    4a80:	d0 40       	sbci	r29, 0x00	; 0
    4a82:	61 2c       	mov	r6, r1
    4a84:	71 2c       	mov	r7, r1
	uint8_t i=8;
	do{
		r <<= 8;
    4a86:	97 01       	movw	r18, r14
    4a88:	41 2f       	mov	r20, r17
    4a8a:	5b 2f       	mov	r21, r27
    4a8c:	6a 2f       	mov	r22, r26
    4a8e:	c3 53       	subi	r28, 0x33	; 51
    4a90:	df 4f       	sbci	r29, 0xFF	; 255
    4a92:	78 81       	ld	r23, Y
    4a94:	cd 5c       	subi	r28, 0xCD	; 205
    4a96:	d0 40       	sbci	r29, 0x00	; 0
    4a98:	c3 01       	movw	r24, r6
    4a9a:	08 e0       	ldi	r16, 0x08	; 8
    4a9c:	0e 94 60 34 	call	0x68c0	; 0x68c0 <__ashldi3>
		r |= 0xff&x;
    4aa0:	ee 2e       	mov	r14, r30
    4aa2:	e2 2a       	or	r14, r18
    4aa4:	f3 2e       	mov	r15, r19
    4aa6:	14 2f       	mov	r17, r20
    4aa8:	b5 2f       	mov	r27, r21
    4aaa:	a6 2f       	mov	r26, r22
    4aac:	c3 53       	subi	r28, 0x33	; 51
    4aae:	df 4f       	sbci	r29, 0xFF	; 255
    4ab0:	78 83       	st	Y, r23
    4ab2:	cd 5c       	subi	r28, 0xCD	; 205
    4ab4:	d0 40       	sbci	r29, 0x00	; 0
    4ab6:	3c 01       	movw	r6, r24
		x >>=8;
    4ab8:	2e 2f       	mov	r18, r30
    4aba:	39 2d       	mov	r19, r9
    4abc:	a5 01       	movw	r20, r10
    4abe:	b6 01       	movw	r22, r12
    4ac0:	c1 01       	movw	r24, r2
    4ac2:	0e 94 7b 34 	call	0x68f6	; 0x68f6 <__lshrdi3>
    4ac6:	e2 2f       	mov	r30, r18
    4ac8:	93 2e       	mov	r9, r19
    4aca:	5a 01       	movw	r10, r20
    4acc:	6b 01       	movw	r12, r22
    4ace:	1c 01       	movw	r2, r24
    4ad0:	8a 94       	dec	r8
	}while(--i);
    4ad2:	81 10       	cpse	r8, r1
    4ad4:	d8 cf       	rjmp	.-80     	; 0x4a86 <sha2_large_common_nextBlock+0xd8>
	uint64_t t1, t2;
	const uint64_t *k=sha2_large_common_const;
	uint8_t i;
	i=16;
	do{
		w[16-i] = change_endian64(*((const uint64_t*)block));
    4ad6:	c7 53       	subi	r28, 0x37	; 55
    4ad8:	df 4f       	sbci	r29, 0xFF	; 255
    4ada:	e8 81       	ld	r30, Y
    4adc:	f9 81       	ldd	r31, Y+1	; 0x01
    4ade:	c9 5c       	subi	r28, 0xC9	; 201
    4ae0:	d0 40       	sbci	r29, 0x00	; 0
    4ae2:	e0 82       	st	Z, r14
    4ae4:	f1 82       	std	Z+1, r15	; 0x01
    4ae6:	12 83       	std	Z+2, r17	; 0x02
    4ae8:	b3 83       	std	Z+3, r27	; 0x03
    4aea:	a4 83       	std	Z+4, r26	; 0x04
    4aec:	c3 53       	subi	r28, 0x33	; 51
    4aee:	df 4f       	sbci	r29, 0xFF	; 255
    4af0:	18 81       	ld	r17, Y
    4af2:	cd 5c       	subi	r28, 0xCD	; 205
    4af4:	d0 40       	sbci	r29, 0x00	; 0
    4af6:	15 83       	std	Z+5, r17	; 0x05
    4af8:	66 82       	std	Z+6, r6	; 0x06
    4afa:	77 82       	std	Z+7, r7	; 0x07
    4afc:	38 96       	adiw	r30, 0x08	; 8
    4afe:	c7 53       	subi	r28, 0x37	; 55
    4b00:	df 4f       	sbci	r29, 0xFF	; 255
    4b02:	f9 83       	std	Y+1, r31	; 0x01
    4b04:	e8 83       	st	Y, r30
    4b06:	c9 5c       	subi	r28, 0xC9	; 201
    4b08:	d0 40       	sbci	r29, 0x00	; 0
		block = (uint8_t*)block + 8;
	}while(--i);
    4b0a:	e4 15       	cp	r30, r4
    4b0c:	f5 05       	cpc	r31, r5
    4b0e:	09 f0       	breq	.+2      	; 0x4b12 <sha2_large_common_nextBlock+0x164>
    4b10:	89 cf       	rjmp	.-238    	; 0x4a24 <sha2_large_common_nextBlock+0x76>
	memcpy(a, ctx->h, 8*8);
    4b12:	80 e4       	ldi	r24, 0x40	; 64
    4b14:	cf 50       	subi	r28, 0x0F	; 15
    4b16:	df 4f       	sbci	r29, 0xFF	; 255
    4b18:	e8 81       	ld	r30, Y
    4b1a:	f9 81       	ldd	r31, Y+1	; 0x01
    4b1c:	c1 5f       	subi	r28, 0xF1	; 241
    4b1e:	d0 40       	sbci	r29, 0x00	; 0
    4b20:	d2 01       	movw	r26, r4
    4b22:	01 90       	ld	r0, Z+
    4b24:	0d 92       	st	X+, r0
    4b26:	8a 95       	dec	r24
    4b28:	e1 f7       	brne	.-8      	; 0x4b22 <sha2_large_common_nextBlock+0x174>
    4b2a:	d2 01       	movw	r26, r4
    4b2c:	90 96       	adiw	r26, 0x20	; 32
    4b2e:	bc 91       	ld	r27, X
    4b30:	c7 53       	subi	r28, 0x37	; 55
    4b32:	df 4f       	sbci	r29, 0xFF	; 255
    4b34:	b8 83       	st	Y, r27
    4b36:	c9 5c       	subi	r28, 0xC9	; 201
    4b38:	d0 40       	sbci	r29, 0x00	; 0
    4b3a:	f2 01       	movw	r30, r4
    4b3c:	f1 a1       	ldd	r31, Z+33	; 0x21
    4b3e:	c5 53       	subi	r28, 0x35	; 53
    4b40:	df 4f       	sbci	r29, 0xFF	; 255
    4b42:	f8 83       	st	Y, r31
    4b44:	cb 5c       	subi	r28, 0xCB	; 203
    4b46:	d0 40       	sbci	r29, 0x00	; 0
    4b48:	d2 01       	movw	r26, r4
    4b4a:	92 96       	adiw	r26, 0x22	; 34
    4b4c:	bc 91       	ld	r27, X
    4b4e:	c3 53       	subi	r28, 0x33	; 51
    4b50:	df 4f       	sbci	r29, 0xFF	; 255
    4b52:	b8 83       	st	Y, r27
    4b54:	cd 5c       	subi	r28, 0xCD	; 205
    4b56:	d0 40       	sbci	r29, 0x00	; 0
    4b58:	f2 01       	movw	r30, r4
    4b5a:	f3 a1       	ldd	r31, Z+35	; 0x23
    4b5c:	c2 53       	subi	r28, 0x32	; 50
    4b5e:	df 4f       	sbci	r29, 0xFF	; 255
    4b60:	f8 83       	st	Y, r31
    4b62:	ce 5c       	subi	r28, 0xCE	; 206
    4b64:	d0 40       	sbci	r29, 0x00	; 0
    4b66:	d2 01       	movw	r26, r4
    4b68:	94 96       	adiw	r26, 0x24	; 36
    4b6a:	bc 91       	ld	r27, X
    4b6c:	c1 53       	subi	r28, 0x31	; 49
    4b6e:	df 4f       	sbci	r29, 0xFF	; 255
    4b70:	b8 83       	st	Y, r27
    4b72:	cf 5c       	subi	r28, 0xCF	; 207
    4b74:	d0 40       	sbci	r29, 0x00	; 0
    4b76:	f2 01       	movw	r30, r4
    4b78:	25 a0       	ldd	r2, Z+37	; 0x25
    4b7a:	36 a0       	ldd	r3, Z+38	; 0x26
    4b7c:	67 a0       	ldd	r6, Z+39	; 0x27
    4b7e:	f0 81       	ld	r31, Z
    4b80:	c3 52       	subi	r28, 0x23	; 35
    4b82:	df 4f       	sbci	r29, 0xFF	; 255
    4b84:	f8 83       	st	Y, r31
    4b86:	cd 5d       	subi	r28, 0xDD	; 221
    4b88:	d0 40       	sbci	r29, 0x00	; 0
    4b8a:	d2 01       	movw	r26, r4
    4b8c:	11 96       	adiw	r26, 0x01	; 1
    4b8e:	bc 91       	ld	r27, X
    4b90:	c2 52       	subi	r28, 0x22	; 34
    4b92:	df 4f       	sbci	r29, 0xFF	; 255
    4b94:	b8 83       	st	Y, r27
    4b96:	ce 5d       	subi	r28, 0xDE	; 222
    4b98:	d0 40       	sbci	r29, 0x00	; 0
    4b9a:	f2 01       	movw	r30, r4
    4b9c:	f2 81       	ldd	r31, Z+2	; 0x02
    4b9e:	c1 52       	subi	r28, 0x21	; 33
    4ba0:	df 4f       	sbci	r29, 0xFF	; 255
    4ba2:	f8 83       	st	Y, r31
    4ba4:	cf 5d       	subi	r28, 0xDF	; 223
    4ba6:	d0 40       	sbci	r29, 0x00	; 0
    4ba8:	d2 01       	movw	r26, r4
    4baa:	13 96       	adiw	r26, 0x03	; 3
    4bac:	bc 91       	ld	r27, X
    4bae:	c0 52       	subi	r28, 0x20	; 32
    4bb0:	df 4f       	sbci	r29, 0xFF	; 255
    4bb2:	b8 83       	st	Y, r27
    4bb4:	c0 5e       	subi	r28, 0xE0	; 224
    4bb6:	d0 40       	sbci	r29, 0x00	; 0
    4bb8:	f2 01       	movw	r30, r4
    4bba:	f4 81       	ldd	r31, Z+4	; 0x04
    4bbc:	cf 51       	subi	r28, 0x1F	; 31
    4bbe:	df 4f       	sbci	r29, 0xFF	; 255
    4bc0:	f8 83       	st	Y, r31
    4bc2:	c1 5e       	subi	r28, 0xE1	; 225
    4bc4:	d0 40       	sbci	r29, 0x00	; 0
    4bc6:	d2 01       	movw	r26, r4
    4bc8:	15 96       	adiw	r26, 0x05	; 5
    4bca:	bc 91       	ld	r27, X
    4bcc:	ce 51       	subi	r28, 0x1E	; 30
    4bce:	df 4f       	sbci	r29, 0xFF	; 255
    4bd0:	b8 83       	st	Y, r27
    4bd2:	c2 5e       	subi	r28, 0xE2	; 226
    4bd4:	d0 40       	sbci	r29, 0x00	; 0
    4bd6:	f2 01       	movw	r30, r4
    4bd8:	f6 81       	ldd	r31, Z+6	; 0x06
    4bda:	cd 51       	subi	r28, 0x1D	; 29
    4bdc:	df 4f       	sbci	r29, 0xFF	; 255
    4bde:	f8 83       	st	Y, r31
    4be0:	c3 5e       	subi	r28, 0xE3	; 227
    4be2:	d0 40       	sbci	r29, 0x00	; 0
    4be4:	d2 01       	movw	r26, r4
    4be6:	17 96       	adiw	r26, 0x07	; 7
    4be8:	bc 91       	ld	r27, X
    4bea:	cc 51       	subi	r28, 0x1C	; 28
    4bec:	df 4f       	sbci	r29, 0xFF	; 255
    4bee:	b8 83       	st	Y, r27
    4bf0:	c4 5e       	subi	r28, 0xE4	; 228
    4bf2:	d0 40       	sbci	r29, 0x00	; 0
    4bf4:	e4 eb       	ldi	r30, 0xB4	; 180
    4bf6:	f0 e0       	ldi	r31, 0x00	; 0
    4bf8:	c8 51       	subi	r28, 0x18	; 24
    4bfa:	df 4f       	sbci	r29, 0xFF	; 255
    4bfc:	f9 83       	std	Y+1, r31	; 0x01
    4bfe:	e8 83       	st	Y, r30
    4c00:	c8 5e       	subi	r28, 0xE8	; 232
    4c02:	d0 40       	sbci	r29, 0x00	; 0
	for(i=0; i<80; ++i){
    4c04:	c9 51       	subi	r28, 0x19	; 25
    4c06:	df 4f       	sbci	r29, 0xFF	; 255
    4c08:	18 82       	st	Y, r1
    4c0a:	c7 5e       	subi	r28, 0xE7	; 231
    4c0c:	d0 40       	sbci	r29, 0x00	; 0
			memmove(&(w[0]), &(w[1]), 15*8);
			w[15] = wx;
		}
		t1 = a[7] + SIGMA_1(a[4]) + CH(a[4], a[5], a[6]) + pgm_read_uint64_t_P(k++) + wx;
		t2 = SIGMA_0(a[0]) + MAJ(a[0], a[1], a[2]);
		memmove(&(a[1]), &(a[0]), 7*8);
    4c0e:	c2 01       	movw	r24, r4
    4c10:	08 96       	adiw	r24, 0x08	; 8
    4c12:	c1 51       	subi	r28, 0x11	; 17
    4c14:	df 4f       	sbci	r29, 0xFF	; 255
    4c16:	99 83       	std	Y+1, r25	; 0x01
    4c18:	88 83       	st	Y, r24
    4c1a:	cf 5e       	subi	r28, 0xEF	; 239
    4c1c:	d0 40       	sbci	r29, 0x00	; 0
    4c1e:	c0 53       	subi	r28, 0x30	; 48
    4c20:	df 4f       	sbci	r29, 0xFF	; 255
    4c22:	38 82       	st	Y, r3
    4c24:	c0 5d       	subi	r28, 0xD0	; 208
    4c26:	d0 40       	sbci	r29, 0x00	; 0
    4c28:	cf 52       	subi	r28, 0x2F	; 47
    4c2a:	df 4f       	sbci	r29, 0xFF	; 255
    4c2c:	68 82       	st	Y, r6
    4c2e:	c1 5d       	subi	r28, 0xD1	; 209
    4c30:	d0 40       	sbci	r29, 0x00	; 0
    4c32:	fb c6       	rjmp	.+3574   	; 0x5a2a <sha2_large_common_nextBlock+0x107c>
	memcpy(a, ctx->h, 8*8);
	for(i=0; i<80; ++i){
		if(i<16){
			wx=w[i];
		}else{
			wx = SIGMA_b(w[14]) + w[9] + SIGMA_a(w[1]) + w[0];
    4c34:	e2 96       	adiw	r28, 0x32	; 50
    4c36:	3f ac       	ldd	r3, Y+63	; 0x3f
    4c38:	e2 97       	sbiw	r28, 0x32	; 50
    4c3a:	e3 96       	adiw	r28, 0x33	; 51
    4c3c:	6f ac       	ldd	r6, Y+63	; 0x3f
    4c3e:	e3 97       	sbiw	r28, 0x33	; 51
    4c40:	e4 96       	adiw	r28, 0x34	; 52
    4c42:	7f ac       	ldd	r7, Y+63	; 0x3f
    4c44:	e4 97       	sbiw	r28, 0x34	; 52
    4c46:	e5 96       	adiw	r28, 0x35	; 53
    4c48:	8f ac       	ldd	r8, Y+63	; 0x3f
    4c4a:	e5 97       	sbiw	r28, 0x35	; 53
    4c4c:	e6 96       	adiw	r28, 0x36	; 54
    4c4e:	9f ac       	ldd	r9, Y+63	; 0x3f
    4c50:	e6 97       	sbiw	r28, 0x36	; 54
    4c52:	e7 96       	adiw	r28, 0x37	; 55
    4c54:	bf ad       	ldd	r27, Y+63	; 0x3f
    4c56:	e7 97       	sbiw	r28, 0x37	; 55
    4c58:	e8 96       	adiw	r28, 0x38	; 56
    4c5a:	af ad       	ldd	r26, Y+63	; 0x3f
    4c5c:	e8 97       	sbiw	r28, 0x38	; 56
    4c5e:	e9 96       	adiw	r28, 0x39	; 57
    4c60:	ff ad       	ldd	r31, Y+63	; 0x3f
    4c62:	e9 97       	sbiw	r28, 0x39	; 57
    4c64:	e9 85       	ldd	r30, Y+9	; 0x09
    4c66:	ce 52       	subi	r28, 0x2E	; 46
    4c68:	df 4f       	sbci	r29, 0xFF	; 255
    4c6a:	e8 83       	st	Y, r30
    4c6c:	c2 5d       	subi	r28, 0xD2	; 210
    4c6e:	d0 40       	sbci	r29, 0x00	; 0
    4c70:	ea 85       	ldd	r30, Y+10	; 0x0a
    4c72:	cd 52       	subi	r28, 0x2D	; 45
    4c74:	df 4f       	sbci	r29, 0xFF	; 255
    4c76:	e8 83       	st	Y, r30
    4c78:	c3 5d       	subi	r28, 0xD3	; 211
    4c7a:	d0 40       	sbci	r29, 0x00	; 0
    4c7c:	eb 85       	ldd	r30, Y+11	; 0x0b
    4c7e:	cc 52       	subi	r28, 0x2C	; 44
    4c80:	df 4f       	sbci	r29, 0xFF	; 255
    4c82:	e8 83       	st	Y, r30
    4c84:	c4 5d       	subi	r28, 0xD4	; 212
    4c86:	d0 40       	sbci	r29, 0x00	; 0
    4c88:	ec 85       	ldd	r30, Y+12	; 0x0c
    4c8a:	cb 52       	subi	r28, 0x2B	; 43
    4c8c:	df 4f       	sbci	r29, 0xFF	; 255
    4c8e:	e8 83       	st	Y, r30
    4c90:	c5 5d       	subi	r28, 0xD5	; 213
    4c92:	d0 40       	sbci	r29, 0x00	; 0
    4c94:	ed 85       	ldd	r30, Y+13	; 0x0d
    4c96:	ca 52       	subi	r28, 0x2A	; 42
    4c98:	df 4f       	sbci	r29, 0xFF	; 255
    4c9a:	e8 83       	st	Y, r30
    4c9c:	c6 5d       	subi	r28, 0xD6	; 214
    4c9e:	d0 40       	sbci	r29, 0x00	; 0
    4ca0:	ee 85       	ldd	r30, Y+14	; 0x0e
    4ca2:	c9 52       	subi	r28, 0x29	; 41
    4ca4:	df 4f       	sbci	r29, 0xFF	; 255
    4ca6:	e8 83       	st	Y, r30
    4ca8:	c7 5d       	subi	r28, 0xD7	; 215
    4caa:	d0 40       	sbci	r29, 0x00	; 0
    4cac:	ef 85       	ldd	r30, Y+15	; 0x0f
    4cae:	c8 52       	subi	r28, 0x28	; 40
    4cb0:	df 4f       	sbci	r29, 0xFF	; 255
    4cb2:	e8 83       	st	Y, r30
    4cb4:	c8 5d       	subi	r28, 0xD8	; 216
    4cb6:	d0 40       	sbci	r29, 0x00	; 0
    4cb8:	e8 89       	ldd	r30, Y+16	; 0x10
    4cba:	c7 52       	subi	r28, 0x27	; 39
    4cbc:	df 4f       	sbci	r29, 0xFF	; 255
    4cbe:	e8 83       	st	Y, r30
    4cc0:	c9 5d       	subi	r28, 0xD9	; 217
    4cc2:	d0 40       	sbci	r29, 0x00	; 0
    4cc4:	2a 96       	adiw	r28, 0x0a	; 10
    4cc6:	2f ad       	ldd	r18, Y+63	; 0x3f
    4cc8:	2a 97       	sbiw	r28, 0x0a	; 10
    4cca:	2b 96       	adiw	r28, 0x0b	; 11
    4ccc:	3f ad       	ldd	r19, Y+63	; 0x3f
    4cce:	2b 97       	sbiw	r28, 0x0b	; 11
    4cd0:	2c 96       	adiw	r28, 0x0c	; 12
    4cd2:	4f ad       	ldd	r20, Y+63	; 0x3f
    4cd4:	2c 97       	sbiw	r28, 0x0c	; 12
    4cd6:	2d 96       	adiw	r28, 0x0d	; 13
    4cd8:	5f ad       	ldd	r21, Y+63	; 0x3f
    4cda:	2d 97       	sbiw	r28, 0x0d	; 13
    4cdc:	2e 96       	adiw	r28, 0x0e	; 14
    4cde:	6f ad       	ldd	r22, Y+63	; 0x3f
    4ce0:	2e 97       	sbiw	r28, 0x0e	; 14
    4ce2:	2f 96       	adiw	r28, 0x0f	; 15
    4ce4:	7f ad       	ldd	r23, Y+63	; 0x3f
    4ce6:	2f 97       	sbiw	r28, 0x0f	; 15
    4ce8:	60 96       	adiw	r28, 0x10	; 16
    4cea:	8f ad       	ldd	r24, Y+63	; 0x3f
    4cec:	60 97       	sbiw	r28, 0x10	; 16
    4cee:	61 96       	adiw	r28, 0x11	; 17
    4cf0:	9f ad       	ldd	r25, Y+63	; 0x3f
    4cf2:	61 97       	sbiw	r28, 0x11	; 17
    4cf4:	a9 80       	ldd	r10, Y+1	; 0x01
    4cf6:	ba 80       	ldd	r11, Y+2	; 0x02
    4cf8:	cb 80       	ldd	r12, Y+3	; 0x03
    4cfa:	dc 80       	ldd	r13, Y+4	; 0x04
    4cfc:	ed 80       	ldd	r14, Y+5	; 0x05
    4cfe:	fe 80       	ldd	r15, Y+6	; 0x06
    4d00:	0f 81       	ldd	r16, Y+7	; 0x07
    4d02:	18 85       	ldd	r17, Y+8	; 0x08
    4d04:	0e 94 b2 34 	call	0x6964	; 0x6964 <__adddi3>
    4d08:	c6 52       	subi	r28, 0x26	; 38
    4d0a:	df 4f       	sbci	r29, 0xFF	; 255
    4d0c:	28 83       	st	Y, r18
    4d0e:	ca 5d       	subi	r28, 0xDA	; 218
    4d10:	d0 40       	sbci	r29, 0x00	; 0
    4d12:	c5 52       	subi	r28, 0x25	; 37
    4d14:	df 4f       	sbci	r29, 0xFF	; 255
    4d16:	38 83       	st	Y, r19
    4d18:	cb 5d       	subi	r28, 0xDB	; 219
    4d1a:	d0 40       	sbci	r29, 0x00	; 0
    4d1c:	c4 52       	subi	r28, 0x24	; 36
    4d1e:	df 4f       	sbci	r29, 0xFF	; 255
    4d20:	48 83       	st	Y, r20
    4d22:	cc 5d       	subi	r28, 0xDC	; 220
    4d24:	d0 40       	sbci	r29, 0x00	; 0
    4d26:	c6 51       	subi	r28, 0x16	; 22
    4d28:	df 4f       	sbci	r29, 0xFF	; 255
    4d2a:	58 83       	st	Y, r21
    4d2c:	ca 5e       	subi	r28, 0xEA	; 234
    4d2e:	d0 40       	sbci	r29, 0x00	; 0
    4d30:	c5 51       	subi	r28, 0x15	; 21
    4d32:	df 4f       	sbci	r29, 0xFF	; 255
    4d34:	68 83       	st	Y, r22
    4d36:	cb 5e       	subi	r28, 0xEB	; 235
    4d38:	d0 40       	sbci	r29, 0x00	; 0
    4d3a:	c4 51       	subi	r28, 0x14	; 20
    4d3c:	df 4f       	sbci	r29, 0xFF	; 255
    4d3e:	78 83       	st	Y, r23
    4d40:	cc 5e       	subi	r28, 0xEC	; 236
    4d42:	d0 40       	sbci	r29, 0x00	; 0
    4d44:	c3 51       	subi	r28, 0x13	; 19
    4d46:	df 4f       	sbci	r29, 0xFF	; 255
    4d48:	88 83       	st	Y, r24
    4d4a:	cd 5e       	subi	r28, 0xED	; 237
    4d4c:	d0 40       	sbci	r29, 0x00	; 0
    4d4e:	c2 51       	subi	r28, 0x12	; 18
    4d50:	df 4f       	sbci	r29, 0xFF	; 255
    4d52:	98 83       	st	Y, r25
    4d54:	ce 5e       	subi	r28, 0xEE	; 238
    4d56:	d0 40       	sbci	r29, 0x00	; 0
    4d58:	23 2d       	mov	r18, r3
    4d5a:	36 2d       	mov	r19, r6
    4d5c:	47 2d       	mov	r20, r7
    4d5e:	58 2d       	mov	r21, r8
    4d60:	69 2d       	mov	r22, r9
    4d62:	7b 2f       	mov	r23, r27
    4d64:	8a 2f       	mov	r24, r26
    4d66:	9f 2f       	mov	r25, r31
    4d68:	03 e0       	ldi	r16, 0x03	; 3
    4d6a:	0e 94 97 34 	call	0x692e	; 0x692e <__rotldi3>
    4d6e:	59 01       	movw	r10, r18
    4d70:	6a 01       	movw	r12, r20
    4d72:	7b 01       	movw	r14, r22
    4d74:	e8 2f       	mov	r30, r24
    4d76:	19 2f       	mov	r17, r25
    4d78:	23 2d       	mov	r18, r3
    4d7a:	36 2d       	mov	r19, r6
    4d7c:	47 2d       	mov	r20, r7
    4d7e:	58 2d       	mov	r21, r8
    4d80:	69 2d       	mov	r22, r9
    4d82:	7b 2f       	mov	r23, r27
    4d84:	8a 2f       	mov	r24, r26
    4d86:	9f 2f       	mov	r25, r31
    4d88:	0d e2       	ldi	r16, 0x2D	; 45
    4d8a:	0e 94 97 34 	call	0x692e	; 0x692e <__rotldi3>
    4d8e:	a2 26       	eor	r10, r18
    4d90:	b3 26       	eor	r11, r19
    4d92:	c4 26       	eor	r12, r20
    4d94:	d5 26       	eor	r13, r21
    4d96:	e6 26       	eor	r14, r22
    4d98:	f7 26       	eor	r15, r23
    4d9a:	e8 27       	eor	r30, r24
    4d9c:	19 27       	eor	r17, r25
    4d9e:	23 2d       	mov	r18, r3
    4da0:	36 2d       	mov	r19, r6
    4da2:	47 2d       	mov	r20, r7
    4da4:	58 2d       	mov	r21, r8
    4da6:	69 2d       	mov	r22, r9
    4da8:	7b 2f       	mov	r23, r27
    4daa:	8a 2f       	mov	r24, r26
    4dac:	9f 2f       	mov	r25, r31
    4dae:	06 e0       	ldi	r16, 0x06	; 6
    4db0:	0e 94 7b 34 	call	0x68f6	; 0x68f6 <__lshrdi3>
    4db4:	a2 26       	eor	r10, r18
    4db6:	b3 26       	eor	r11, r19
    4db8:	c4 26       	eor	r12, r20
    4dba:	d5 26       	eor	r13, r21
    4dbc:	e6 26       	eor	r14, r22
    4dbe:	f7 26       	eor	r15, r23
    4dc0:	0e 2f       	mov	r16, r30
    4dc2:	08 27       	eor	r16, r24
    4dc4:	19 27       	eor	r17, r25
    4dc6:	c6 52       	subi	r28, 0x26	; 38
    4dc8:	df 4f       	sbci	r29, 0xFF	; 255
    4dca:	28 81       	ld	r18, Y
    4dcc:	ca 5d       	subi	r28, 0xDA	; 218
    4dce:	d0 40       	sbci	r29, 0x00	; 0
    4dd0:	c5 52       	subi	r28, 0x25	; 37
    4dd2:	df 4f       	sbci	r29, 0xFF	; 255
    4dd4:	38 81       	ld	r19, Y
    4dd6:	cb 5d       	subi	r28, 0xDB	; 219
    4dd8:	d0 40       	sbci	r29, 0x00	; 0
    4dda:	c4 52       	subi	r28, 0x24	; 36
    4ddc:	df 4f       	sbci	r29, 0xFF	; 255
    4dde:	48 81       	ld	r20, Y
    4de0:	cc 5d       	subi	r28, 0xDC	; 220
    4de2:	d0 40       	sbci	r29, 0x00	; 0
    4de4:	c6 51       	subi	r28, 0x16	; 22
    4de6:	df 4f       	sbci	r29, 0xFF	; 255
    4de8:	58 81       	ld	r21, Y
    4dea:	ca 5e       	subi	r28, 0xEA	; 234
    4dec:	d0 40       	sbci	r29, 0x00	; 0
    4dee:	c5 51       	subi	r28, 0x15	; 21
    4df0:	df 4f       	sbci	r29, 0xFF	; 255
    4df2:	68 81       	ld	r22, Y
    4df4:	cb 5e       	subi	r28, 0xEB	; 235
    4df6:	d0 40       	sbci	r29, 0x00	; 0
    4df8:	c4 51       	subi	r28, 0x14	; 20
    4dfa:	df 4f       	sbci	r29, 0xFF	; 255
    4dfc:	78 81       	ld	r23, Y
    4dfe:	cc 5e       	subi	r28, 0xEC	; 236
    4e00:	d0 40       	sbci	r29, 0x00	; 0
    4e02:	c3 51       	subi	r28, 0x13	; 19
    4e04:	df 4f       	sbci	r29, 0xFF	; 255
    4e06:	88 81       	ld	r24, Y
    4e08:	cd 5e       	subi	r28, 0xED	; 237
    4e0a:	d0 40       	sbci	r29, 0x00	; 0
    4e0c:	c2 51       	subi	r28, 0x12	; 18
    4e0e:	df 4f       	sbci	r29, 0xFF	; 255
    4e10:	98 81       	ld	r25, Y
    4e12:	ce 5e       	subi	r28, 0xEE	; 238
    4e14:	d0 40       	sbci	r29, 0x00	; 0
    4e16:	0e 94 b2 34 	call	0x6964	; 0x6964 <__adddi3>
    4e1a:	39 01       	movw	r6, r18
    4e1c:	4a 01       	movw	r8, r20
    4e1e:	b6 2f       	mov	r27, r22
    4e20:	a7 2f       	mov	r26, r23
    4e22:	f8 2f       	mov	r31, r24
    4e24:	e9 2f       	mov	r30, r25
    4e26:	ce 52       	subi	r28, 0x2E	; 46
    4e28:	df 4f       	sbci	r29, 0xFF	; 255
    4e2a:	28 81       	ld	r18, Y
    4e2c:	c2 5d       	subi	r28, 0xD2	; 210
    4e2e:	d0 40       	sbci	r29, 0x00	; 0
    4e30:	cd 52       	subi	r28, 0x2D	; 45
    4e32:	df 4f       	sbci	r29, 0xFF	; 255
    4e34:	38 81       	ld	r19, Y
    4e36:	c3 5d       	subi	r28, 0xD3	; 211
    4e38:	d0 40       	sbci	r29, 0x00	; 0
    4e3a:	cc 52       	subi	r28, 0x2C	; 44
    4e3c:	df 4f       	sbci	r29, 0xFF	; 255
    4e3e:	48 81       	ld	r20, Y
    4e40:	c4 5d       	subi	r28, 0xD4	; 212
    4e42:	d0 40       	sbci	r29, 0x00	; 0
    4e44:	cb 52       	subi	r28, 0x2B	; 43
    4e46:	df 4f       	sbci	r29, 0xFF	; 255
    4e48:	58 81       	ld	r21, Y
    4e4a:	c5 5d       	subi	r28, 0xD5	; 213
    4e4c:	d0 40       	sbci	r29, 0x00	; 0
    4e4e:	ca 52       	subi	r28, 0x2A	; 42
    4e50:	df 4f       	sbci	r29, 0xFF	; 255
    4e52:	68 81       	ld	r22, Y
    4e54:	c6 5d       	subi	r28, 0xD6	; 214
    4e56:	d0 40       	sbci	r29, 0x00	; 0
    4e58:	c9 52       	subi	r28, 0x29	; 41
    4e5a:	df 4f       	sbci	r29, 0xFF	; 255
    4e5c:	78 81       	ld	r23, Y
    4e5e:	c7 5d       	subi	r28, 0xD7	; 215
    4e60:	d0 40       	sbci	r29, 0x00	; 0
    4e62:	c8 52       	subi	r28, 0x28	; 40
    4e64:	df 4f       	sbci	r29, 0xFF	; 255
    4e66:	88 81       	ld	r24, Y
    4e68:	c8 5d       	subi	r28, 0xD8	; 216
    4e6a:	d0 40       	sbci	r29, 0x00	; 0
    4e6c:	c7 52       	subi	r28, 0x27	; 39
    4e6e:	df 4f       	sbci	r29, 0xFF	; 255
    4e70:	98 81       	ld	r25, Y
    4e72:	c9 5d       	subi	r28, 0xD9	; 217
    4e74:	d0 40       	sbci	r29, 0x00	; 0
    4e76:	08 e3       	ldi	r16, 0x38	; 56
    4e78:	0e 94 97 34 	call	0x692e	; 0x692e <__rotldi3>
    4e7c:	59 01       	movw	r10, r18
    4e7e:	6a 01       	movw	r12, r20
    4e80:	7b 01       	movw	r14, r22
    4e82:	38 2e       	mov	r3, r24
    4e84:	19 2f       	mov	r17, r25
    4e86:	ce 52       	subi	r28, 0x2E	; 46
    4e88:	df 4f       	sbci	r29, 0xFF	; 255
    4e8a:	28 81       	ld	r18, Y
    4e8c:	c2 5d       	subi	r28, 0xD2	; 210
    4e8e:	d0 40       	sbci	r29, 0x00	; 0
    4e90:	cd 52       	subi	r28, 0x2D	; 45
    4e92:	df 4f       	sbci	r29, 0xFF	; 255
    4e94:	38 81       	ld	r19, Y
    4e96:	c3 5d       	subi	r28, 0xD3	; 211
    4e98:	d0 40       	sbci	r29, 0x00	; 0
    4e9a:	cc 52       	subi	r28, 0x2C	; 44
    4e9c:	df 4f       	sbci	r29, 0xFF	; 255
    4e9e:	48 81       	ld	r20, Y
    4ea0:	c4 5d       	subi	r28, 0xD4	; 212
    4ea2:	d0 40       	sbci	r29, 0x00	; 0
    4ea4:	cb 52       	subi	r28, 0x2B	; 43
    4ea6:	df 4f       	sbci	r29, 0xFF	; 255
    4ea8:	58 81       	ld	r21, Y
    4eaa:	c5 5d       	subi	r28, 0xD5	; 213
    4eac:	d0 40       	sbci	r29, 0x00	; 0
    4eae:	ca 52       	subi	r28, 0x2A	; 42
    4eb0:	df 4f       	sbci	r29, 0xFF	; 255
    4eb2:	68 81       	ld	r22, Y
    4eb4:	c6 5d       	subi	r28, 0xD6	; 214
    4eb6:	d0 40       	sbci	r29, 0x00	; 0
    4eb8:	c9 52       	subi	r28, 0x29	; 41
    4eba:	df 4f       	sbci	r29, 0xFF	; 255
    4ebc:	78 81       	ld	r23, Y
    4ebe:	c7 5d       	subi	r28, 0xD7	; 215
    4ec0:	d0 40       	sbci	r29, 0x00	; 0
    4ec2:	c8 52       	subi	r28, 0x28	; 40
    4ec4:	df 4f       	sbci	r29, 0xFF	; 255
    4ec6:	88 81       	ld	r24, Y
    4ec8:	c8 5d       	subi	r28, 0xD8	; 216
    4eca:	d0 40       	sbci	r29, 0x00	; 0
    4ecc:	c7 52       	subi	r28, 0x27	; 39
    4ece:	df 4f       	sbci	r29, 0xFF	; 255
    4ed0:	98 81       	ld	r25, Y
    4ed2:	c9 5d       	subi	r28, 0xD9	; 217
    4ed4:	d0 40       	sbci	r29, 0x00	; 0
    4ed6:	0f e3       	ldi	r16, 0x3F	; 63
    4ed8:	0e 94 97 34 	call	0x692e	; 0x692e <__rotldi3>
    4edc:	a2 26       	eor	r10, r18
    4ede:	b3 26       	eor	r11, r19
    4ee0:	c4 26       	eor	r12, r20
    4ee2:	d5 26       	eor	r13, r21
    4ee4:	e6 26       	eor	r14, r22
    4ee6:	f7 26       	eor	r15, r23
    4ee8:	38 26       	eor	r3, r24
    4eea:	19 27       	eor	r17, r25
    4eec:	ce 52       	subi	r28, 0x2E	; 46
    4eee:	df 4f       	sbci	r29, 0xFF	; 255
    4ef0:	28 81       	ld	r18, Y
    4ef2:	c2 5d       	subi	r28, 0xD2	; 210
    4ef4:	d0 40       	sbci	r29, 0x00	; 0
    4ef6:	cd 52       	subi	r28, 0x2D	; 45
    4ef8:	df 4f       	sbci	r29, 0xFF	; 255
    4efa:	38 81       	ld	r19, Y
    4efc:	c3 5d       	subi	r28, 0xD3	; 211
    4efe:	d0 40       	sbci	r29, 0x00	; 0
    4f00:	cc 52       	subi	r28, 0x2C	; 44
    4f02:	df 4f       	sbci	r29, 0xFF	; 255
    4f04:	48 81       	ld	r20, Y
    4f06:	c4 5d       	subi	r28, 0xD4	; 212
    4f08:	d0 40       	sbci	r29, 0x00	; 0
    4f0a:	cb 52       	subi	r28, 0x2B	; 43
    4f0c:	df 4f       	sbci	r29, 0xFF	; 255
    4f0e:	58 81       	ld	r21, Y
    4f10:	c5 5d       	subi	r28, 0xD5	; 213
    4f12:	d0 40       	sbci	r29, 0x00	; 0
    4f14:	ca 52       	subi	r28, 0x2A	; 42
    4f16:	df 4f       	sbci	r29, 0xFF	; 255
    4f18:	68 81       	ld	r22, Y
    4f1a:	c6 5d       	subi	r28, 0xD6	; 214
    4f1c:	d0 40       	sbci	r29, 0x00	; 0
    4f1e:	c9 52       	subi	r28, 0x29	; 41
    4f20:	df 4f       	sbci	r29, 0xFF	; 255
    4f22:	78 81       	ld	r23, Y
    4f24:	c7 5d       	subi	r28, 0xD7	; 215
    4f26:	d0 40       	sbci	r29, 0x00	; 0
    4f28:	c8 52       	subi	r28, 0x28	; 40
    4f2a:	df 4f       	sbci	r29, 0xFF	; 255
    4f2c:	88 81       	ld	r24, Y
    4f2e:	c8 5d       	subi	r28, 0xD8	; 216
    4f30:	d0 40       	sbci	r29, 0x00	; 0
    4f32:	c7 52       	subi	r28, 0x27	; 39
    4f34:	df 4f       	sbci	r29, 0xFF	; 255
    4f36:	98 81       	ld	r25, Y
    4f38:	c9 5d       	subi	r28, 0xD9	; 217
    4f3a:	d0 40       	sbci	r29, 0x00	; 0
    4f3c:	07 e0       	ldi	r16, 0x07	; 7
    4f3e:	0e 94 7b 34 	call	0x68f6	; 0x68f6 <__lshrdi3>
    4f42:	a2 26       	eor	r10, r18
    4f44:	b3 26       	eor	r11, r19
    4f46:	c4 26       	eor	r12, r20
    4f48:	d5 26       	eor	r13, r21
    4f4a:	e6 26       	eor	r14, r22
    4f4c:	f7 26       	eor	r15, r23
    4f4e:	03 2d       	mov	r16, r3
    4f50:	08 27       	eor	r16, r24
    4f52:	19 27       	eor	r17, r25
    4f54:	93 01       	movw	r18, r6
    4f56:	a4 01       	movw	r20, r8
    4f58:	6b 2f       	mov	r22, r27
    4f5a:	7a 2f       	mov	r23, r26
    4f5c:	8f 2f       	mov	r24, r31
    4f5e:	9e 2f       	mov	r25, r30
    4f60:	0e 94 b2 34 	call	0x6964	; 0x6964 <__adddi3>
    4f64:	ce 52       	subi	r28, 0x2E	; 46
    4f66:	df 4f       	sbci	r29, 0xFF	; 255
    4f68:	28 83       	st	Y, r18
    4f6a:	c2 5d       	subi	r28, 0xD2	; 210
    4f6c:	d0 40       	sbci	r29, 0x00	; 0
    4f6e:	cd 52       	subi	r28, 0x2D	; 45
    4f70:	df 4f       	sbci	r29, 0xFF	; 255
    4f72:	38 83       	st	Y, r19
    4f74:	c3 5d       	subi	r28, 0xD3	; 211
    4f76:	d0 40       	sbci	r29, 0x00	; 0
    4f78:	cc 52       	subi	r28, 0x2C	; 44
    4f7a:	df 4f       	sbci	r29, 0xFF	; 255
    4f7c:	48 83       	st	Y, r20
    4f7e:	c4 5d       	subi	r28, 0xD4	; 212
    4f80:	d0 40       	sbci	r29, 0x00	; 0
    4f82:	cb 52       	subi	r28, 0x2B	; 43
    4f84:	df 4f       	sbci	r29, 0xFF	; 255
    4f86:	58 83       	st	Y, r21
    4f88:	c5 5d       	subi	r28, 0xD5	; 213
    4f8a:	d0 40       	sbci	r29, 0x00	; 0
    4f8c:	ca 52       	subi	r28, 0x2A	; 42
    4f8e:	df 4f       	sbci	r29, 0xFF	; 255
    4f90:	68 83       	st	Y, r22
    4f92:	c6 5d       	subi	r28, 0xD6	; 214
    4f94:	d0 40       	sbci	r29, 0x00	; 0
    4f96:	c9 52       	subi	r28, 0x29	; 41
    4f98:	df 4f       	sbci	r29, 0xFF	; 255
    4f9a:	78 83       	st	Y, r23
    4f9c:	c7 5d       	subi	r28, 0xD7	; 215
    4f9e:	d0 40       	sbci	r29, 0x00	; 0
    4fa0:	c8 52       	subi	r28, 0x28	; 40
    4fa2:	df 4f       	sbci	r29, 0xFF	; 255
    4fa4:	88 83       	st	Y, r24
    4fa6:	c8 5d       	subi	r28, 0xD8	; 216
    4fa8:	d0 40       	sbci	r29, 0x00	; 0
    4faa:	c7 52       	subi	r28, 0x27	; 39
    4fac:	df 4f       	sbci	r29, 0xFF	; 255
    4fae:	98 83       	st	Y, r25
    4fb0:	c9 5d       	subi	r28, 0xD9	; 217
    4fb2:	d0 40       	sbci	r29, 0x00	; 0
			memmove(&(w[0]), &(w[1]), 15*8);
    4fb4:	48 e7       	ldi	r20, 0x78	; 120
    4fb6:	50 e0       	ldi	r21, 0x00	; 0
    4fb8:	be 01       	movw	r22, r28
    4fba:	67 5f       	subi	r22, 0xF7	; 247
    4fbc:	7f 4f       	sbci	r23, 0xFF	; 255
    4fbe:	ce 01       	movw	r24, r28
    4fc0:	01 96       	adiw	r24, 0x01	; 1
    4fc2:	0e 94 26 35 	call	0x6a4c	; 0x6a4c <memmove>
			w[15] = wx;
    4fc6:	ce 52       	subi	r28, 0x2E	; 46
    4fc8:	df 4f       	sbci	r29, 0xFF	; 255
    4fca:	f8 81       	ld	r31, Y
    4fcc:	c2 5d       	subi	r28, 0xD2	; 210
    4fce:	d0 40       	sbci	r29, 0x00	; 0
    4fd0:	ea 96       	adiw	r28, 0x3a	; 58
    4fd2:	ff af       	std	Y+63, r31	; 0x3f
    4fd4:	ea 97       	sbiw	r28, 0x3a	; 58
    4fd6:	cd 52       	subi	r28, 0x2D	; 45
    4fd8:	df 4f       	sbci	r29, 0xFF	; 255
    4fda:	18 81       	ld	r17, Y
    4fdc:	c3 5d       	subi	r28, 0xD3	; 211
    4fde:	d0 40       	sbci	r29, 0x00	; 0
    4fe0:	eb 96       	adiw	r28, 0x3b	; 59
    4fe2:	1f af       	std	Y+63, r17	; 0x3f
    4fe4:	eb 97       	sbiw	r28, 0x3b	; 59
    4fe6:	cc 52       	subi	r28, 0x2C	; 44
    4fe8:	df 4f       	sbci	r29, 0xFF	; 255
    4fea:	88 81       	ld	r24, Y
    4fec:	c4 5d       	subi	r28, 0xD4	; 212
    4fee:	d0 40       	sbci	r29, 0x00	; 0
    4ff0:	ec 96       	adiw	r28, 0x3c	; 60
    4ff2:	8f af       	std	Y+63, r24	; 0x3f
    4ff4:	ec 97       	sbiw	r28, 0x3c	; 60
    4ff6:	cb 52       	subi	r28, 0x2B	; 43
    4ff8:	df 4f       	sbci	r29, 0xFF	; 255
    4ffa:	98 81       	ld	r25, Y
    4ffc:	c5 5d       	subi	r28, 0xD5	; 213
    4ffe:	d0 40       	sbci	r29, 0x00	; 0
    5000:	ed 96       	adiw	r28, 0x3d	; 61
    5002:	9f af       	std	Y+63, r25	; 0x3f
    5004:	ed 97       	sbiw	r28, 0x3d	; 61
    5006:	ca 52       	subi	r28, 0x2A	; 42
    5008:	df 4f       	sbci	r29, 0xFF	; 255
    500a:	a8 81       	ld	r26, Y
    500c:	c6 5d       	subi	r28, 0xD6	; 214
    500e:	d0 40       	sbci	r29, 0x00	; 0
    5010:	ee 96       	adiw	r28, 0x3e	; 62
    5012:	af af       	std	Y+63, r26	; 0x3f
    5014:	ee 97       	sbiw	r28, 0x3e	; 62
    5016:	c9 52       	subi	r28, 0x29	; 41
    5018:	df 4f       	sbci	r29, 0xFF	; 255
    501a:	b8 81       	ld	r27, Y
    501c:	c7 5d       	subi	r28, 0xD7	; 215
    501e:	d0 40       	sbci	r29, 0x00	; 0
    5020:	ef 96       	adiw	r28, 0x3f	; 63
    5022:	bf af       	std	Y+63, r27	; 0x3f
    5024:	ef 97       	sbiw	r28, 0x3f	; 63
    5026:	c8 52       	subi	r28, 0x28	; 40
    5028:	df 4f       	sbci	r29, 0xFF	; 255
    502a:	e8 81       	ld	r30, Y
    502c:	c8 5d       	subi	r28, 0xD8	; 216
    502e:	d0 40       	sbci	r29, 0x00	; 0
    5030:	c1 58       	subi	r28, 0x81	; 129
    5032:	df 4f       	sbci	r29, 0xFF	; 255
    5034:	e8 83       	st	Y, r30
    5036:	cf 57       	subi	r28, 0x7F	; 127
    5038:	d0 40       	sbci	r29, 0x00	; 0
    503a:	c7 52       	subi	r28, 0x27	; 39
    503c:	df 4f       	sbci	r29, 0xFF	; 255
    503e:	f8 81       	ld	r31, Y
    5040:	c9 5d       	subi	r28, 0xD9	; 217
    5042:	d0 40       	sbci	r29, 0x00	; 0
    5044:	c0 58       	subi	r28, 0x80	; 128
    5046:	df 4f       	sbci	r29, 0xFF	; 255
    5048:	f8 83       	st	Y, r31
    504a:	c0 58       	subi	r28, 0x80	; 128
    504c:	d0 40       	sbci	r29, 0x00	; 0
		}
		t1 = a[7] + SIGMA_1(a[4]) + CH(a[4], a[5], a[6]) + pgm_read_uint64_t_P(k++) + wx;
    504e:	d2 01       	movw	r26, r4
    5050:	d8 96       	adiw	r26, 0x38	; 56
    5052:	2c 91       	ld	r18, X
    5054:	d8 97       	sbiw	r26, 0x38	; 56
    5056:	d9 96       	adiw	r26, 0x39	; 57
    5058:	3c 91       	ld	r19, X
    505a:	d9 97       	sbiw	r26, 0x39	; 57
    505c:	da 96       	adiw	r26, 0x3a	; 58
    505e:	4c 91       	ld	r20, X
    5060:	da 97       	sbiw	r26, 0x3a	; 58
    5062:	db 96       	adiw	r26, 0x3b	; 59
    5064:	5c 91       	ld	r21, X
    5066:	db 97       	sbiw	r26, 0x3b	; 59
    5068:	dc 96       	adiw	r26, 0x3c	; 60
    506a:	6c 91       	ld	r22, X
    506c:	dc 97       	sbiw	r26, 0x3c	; 60
    506e:	dd 96       	adiw	r26, 0x3d	; 61
    5070:	7c 91       	ld	r23, X
    5072:	dd 97       	sbiw	r26, 0x3d	; 61
    5074:	de 96       	adiw	r26, 0x3e	; 62
    5076:	8c 91       	ld	r24, X
    5078:	de 97       	sbiw	r26, 0x3e	; 62
    507a:	df 96       	adiw	r26, 0x3f	; 63
    507c:	9c 91       	ld	r25, X
    507e:	c7 53       	subi	r28, 0x37	; 55
    5080:	df 4f       	sbci	r29, 0xFF	; 255
    5082:	e8 80       	ld	r14, Y
    5084:	c9 5c       	subi	r28, 0xC9	; 201
    5086:	d0 40       	sbci	r29, 0x00	; 0
    5088:	e0 94       	com	r14
    508a:	c5 53       	subi	r28, 0x35	; 53
    508c:	df 4f       	sbci	r29, 0xFF	; 255
    508e:	f8 80       	ld	r15, Y
    5090:	cb 5c       	subi	r28, 0xCB	; 203
    5092:	d0 40       	sbci	r29, 0x00	; 0
    5094:	f0 94       	com	r15
    5096:	c3 53       	subi	r28, 0x33	; 51
    5098:	df 4f       	sbci	r29, 0xFF	; 255
    509a:	08 81       	ld	r16, Y
    509c:	cd 5c       	subi	r28, 0xCD	; 205
    509e:	d0 40       	sbci	r29, 0x00	; 0
    50a0:	00 95       	com	r16
    50a2:	c2 53       	subi	r28, 0x32	; 50
    50a4:	df 4f       	sbci	r29, 0xFF	; 255
    50a6:	18 81       	ld	r17, Y
    50a8:	ce 5c       	subi	r28, 0xCE	; 206
    50aa:	d0 40       	sbci	r29, 0x00	; 0
    50ac:	10 95       	com	r17
    50ae:	c1 53       	subi	r28, 0x31	; 49
    50b0:	df 4f       	sbci	r29, 0xFF	; 255
    50b2:	b8 81       	ld	r27, Y
    50b4:	cf 5c       	subi	r28, 0xCF	; 207
    50b6:	d0 40       	sbci	r29, 0x00	; 0
    50b8:	b0 95       	com	r27
    50ba:	a2 2d       	mov	r26, r2
    50bc:	a0 95       	com	r26
    50be:	c0 53       	subi	r28, 0x30	; 48
    50c0:	df 4f       	sbci	r29, 0xFF	; 255
    50c2:	d8 80       	ld	r13, Y
    50c4:	c0 5d       	subi	r28, 0xD0	; 208
    50c6:	d0 40       	sbci	r29, 0x00	; 0
    50c8:	d0 94       	com	r13
    50ca:	cf 52       	subi	r28, 0x2F	; 47
    50cc:	df 4f       	sbci	r29, 0xFF	; 255
    50ce:	b8 80       	ld	r11, Y
    50d0:	c1 5d       	subi	r28, 0xD1	; 209
    50d2:	d0 40       	sbci	r29, 0x00	; 0
    50d4:	b0 94       	com	r11
    50d6:	f2 01       	movw	r30, r4
    50d8:	60 a8       	ldd	r6, Z+48	; 0x30
    50da:	6e 20       	and	r6, r14
    50dc:	81 a8       	ldd	r8, Z+49	; 0x31
    50de:	8f 20       	and	r8, r15
    50e0:	a2 a8       	ldd	r10, Z+50	; 0x32
    50e2:	a0 22       	and	r10, r16
    50e4:	c3 a8       	ldd	r12, Z+51	; 0x33
    50e6:	c1 22       	and	r12, r17
    50e8:	e4 a8       	ldd	r14, Z+52	; 0x34
    50ea:	eb 22       	and	r14, r27
    50ec:	05 a9       	ldd	r16, Z+53	; 0x35
    50ee:	0a 23       	and	r16, r26
    50f0:	b6 a9       	ldd	r27, Z+54	; 0x36
    50f2:	3b 2e       	mov	r3, r27
    50f4:	3d 20       	and	r3, r13
    50f6:	f7 a9       	ldd	r31, Z+55	; 0x37
    50f8:	fb 21       	and	r31, r11
    50fa:	c2 51       	subi	r28, 0x12	; 18
    50fc:	df 4f       	sbci	r29, 0xFF	; 255
    50fe:	f8 83       	st	Y, r31
    5100:	ce 5e       	subi	r28, 0xEE	; 238
    5102:	d0 40       	sbci	r29, 0x00	; 0
    5104:	d2 01       	movw	r26, r4
    5106:	98 96       	adiw	r26, 0x28	; 40
    5108:	7c 90       	ld	r7, X
    510a:	c7 53       	subi	r28, 0x37	; 55
    510c:	df 4f       	sbci	r29, 0xFF	; 255
    510e:	b8 81       	ld	r27, Y
    5110:	c9 5c       	subi	r28, 0xC9	; 201
    5112:	d0 40       	sbci	r29, 0x00	; 0
    5114:	7b 22       	and	r7, r27
    5116:	f2 01       	movw	r30, r4
    5118:	91 a4       	ldd	r9, Z+41	; 0x29
    511a:	c5 53       	subi	r28, 0x35	; 53
    511c:	df 4f       	sbci	r29, 0xFF	; 255
    511e:	f8 81       	ld	r31, Y
    5120:	cb 5c       	subi	r28, 0xCB	; 203
    5122:	d0 40       	sbci	r29, 0x00	; 0
    5124:	9f 22       	and	r9, r31
    5126:	d2 01       	movw	r26, r4
    5128:	9a 96       	adiw	r26, 0x2a	; 42
    512a:	bc 90       	ld	r11, X
    512c:	c3 53       	subi	r28, 0x33	; 51
    512e:	df 4f       	sbci	r29, 0xFF	; 255
    5130:	b8 81       	ld	r27, Y
    5132:	cd 5c       	subi	r28, 0xCD	; 205
    5134:	d0 40       	sbci	r29, 0x00	; 0
    5136:	bb 22       	and	r11, r27
    5138:	f2 01       	movw	r30, r4
    513a:	d3 a4       	ldd	r13, Z+43	; 0x2b
    513c:	c2 53       	subi	r28, 0x32	; 50
    513e:	df 4f       	sbci	r29, 0xFF	; 255
    5140:	f8 81       	ld	r31, Y
    5142:	ce 5c       	subi	r28, 0xCE	; 206
    5144:	d0 40       	sbci	r29, 0x00	; 0
    5146:	df 22       	and	r13, r31
    5148:	d2 01       	movw	r26, r4
    514a:	9c 96       	adiw	r26, 0x2c	; 44
    514c:	fc 90       	ld	r15, X
    514e:	c1 53       	subi	r28, 0x31	; 49
    5150:	df 4f       	sbci	r29, 0xFF	; 255
    5152:	b8 81       	ld	r27, Y
    5154:	cf 5c       	subi	r28, 0xCF	; 207
    5156:	d0 40       	sbci	r29, 0x00	; 0
    5158:	fb 22       	and	r15, r27
    515a:	f2 01       	movw	r30, r4
    515c:	15 a5       	ldd	r17, Z+45	; 0x2d
    515e:	12 21       	and	r17, r2
    5160:	a6 a5       	ldd	r26, Z+46	; 0x2e
    5162:	c0 53       	subi	r28, 0x30	; 48
    5164:	df 4f       	sbci	r29, 0xFF	; 255
    5166:	f8 81       	ld	r31, Y
    5168:	c0 5d       	subi	r28, 0xD0	; 208
    516a:	d0 40       	sbci	r29, 0x00	; 0
    516c:	fa 23       	and	r31, r26
    516e:	d2 01       	movw	r26, r4
    5170:	9f 96       	adiw	r26, 0x2f	; 47
    5172:	ec 91       	ld	r30, X
    5174:	cf 52       	subi	r28, 0x2F	; 47
    5176:	df 4f       	sbci	r29, 0xFF	; 255
    5178:	b8 81       	ld	r27, Y
    517a:	c1 5d       	subi	r28, 0xD1	; 209
    517c:	d0 40       	sbci	r29, 0x00	; 0
    517e:	eb 23       	and	r30, r27
    5180:	67 24       	eor	r6, r7
    5182:	c6 52       	subi	r28, 0x26	; 38
    5184:	df 4f       	sbci	r29, 0xFF	; 255
    5186:	68 82       	st	Y, r6
    5188:	ca 5d       	subi	r28, 0xDA	; 218
    518a:	d0 40       	sbci	r29, 0x00	; 0
    518c:	89 24       	eor	r8, r9
    518e:	c5 52       	subi	r28, 0x25	; 37
    5190:	df 4f       	sbci	r29, 0xFF	; 255
    5192:	88 82       	st	Y, r8
    5194:	cb 5d       	subi	r28, 0xDB	; 219
    5196:	d0 40       	sbci	r29, 0x00	; 0
    5198:	ab 24       	eor	r10, r11
    519a:	c4 52       	subi	r28, 0x24	; 36
    519c:	df 4f       	sbci	r29, 0xFF	; 255
    519e:	a8 82       	st	Y, r10
    51a0:	cc 5d       	subi	r28, 0xDC	; 220
    51a2:	d0 40       	sbci	r29, 0x00	; 0
    51a4:	cd 24       	eor	r12, r13
    51a6:	c6 51       	subi	r28, 0x16	; 22
    51a8:	df 4f       	sbci	r29, 0xFF	; 255
    51aa:	c8 82       	st	Y, r12
    51ac:	ca 5e       	subi	r28, 0xEA	; 234
    51ae:	d0 40       	sbci	r29, 0x00	; 0
    51b0:	ef 24       	eor	r14, r15
    51b2:	c5 51       	subi	r28, 0x15	; 21
    51b4:	df 4f       	sbci	r29, 0xFF	; 255
    51b6:	e8 82       	st	Y, r14
    51b8:	cb 5e       	subi	r28, 0xEB	; 235
    51ba:	d0 40       	sbci	r29, 0x00	; 0
    51bc:	01 27       	eor	r16, r17
    51be:	c4 51       	subi	r28, 0x14	; 20
    51c0:	df 4f       	sbci	r29, 0xFF	; 255
    51c2:	08 83       	st	Y, r16
    51c4:	cc 5e       	subi	r28, 0xEC	; 236
    51c6:	d0 40       	sbci	r29, 0x00	; 0
    51c8:	f3 25       	eor	r31, r3
    51ca:	c3 51       	subi	r28, 0x13	; 19
    51cc:	df 4f       	sbci	r29, 0xFF	; 255
    51ce:	f8 83       	st	Y, r31
    51d0:	cd 5e       	subi	r28, 0xED	; 237
    51d2:	d0 40       	sbci	r29, 0x00	; 0
    51d4:	c2 51       	subi	r28, 0x12	; 18
    51d6:	df 4f       	sbci	r29, 0xFF	; 255
    51d8:	a8 81       	ld	r26, Y
    51da:	ce 5e       	subi	r28, 0xEE	; 238
    51dc:	d0 40       	sbci	r29, 0x00	; 0
    51de:	ae 27       	eor	r26, r30
    51e0:	c2 51       	subi	r28, 0x12	; 18
    51e2:	df 4f       	sbci	r29, 0xFF	; 255
    51e4:	a8 83       	st	Y, r26
    51e6:	ce 5e       	subi	r28, 0xEE	; 238
    51e8:	d0 40       	sbci	r29, 0x00	; 0
uint64_t pgm_read_uint64_t_P(const uint64_t * p){
	union {
		uint64_t v64;
		uint32_t v32[2];
	} ret;
	ret.v32[0] = pgm_read_dword(p);
    51ea:	c8 51       	subi	r28, 0x18	; 24
    51ec:	df 4f       	sbci	r29, 0xFF	; 255
    51ee:	e8 81       	ld	r30, Y
    51f0:	f9 81       	ldd	r31, Y+1	; 0x01
    51f2:	c8 5e       	subi	r28, 0xE8	; 232
    51f4:	d0 40       	sbci	r29, 0x00	; 0
    51f6:	c5 90       	lpm	r12, Z+
    51f8:	d5 90       	lpm	r13, Z+
    51fa:	e5 90       	lpm	r14, Z+
    51fc:	f4 90       	lpm	r15, Z
    51fe:	ac 2c       	mov	r10, r12
    5200:	cf 53       	subi	r28, 0x3F	; 63
    5202:	df 4f       	sbci	r29, 0xFF	; 255
    5204:	c8 82       	st	Y, r12
    5206:	d9 82       	std	Y+1, r13	; 0x01
    5208:	ea 82       	std	Y+2, r14	; 0x02
    520a:	fb 82       	std	Y+3, r15	; 0x03
    520c:	c1 5c       	subi	r28, 0xC1	; 193
    520e:	d0 40       	sbci	r29, 0x00	; 0
	ret.v32[1] = pgm_read_dword((uint8_t*)p + 4);
    5210:	c8 51       	subi	r28, 0x18	; 24
    5212:	df 4f       	sbci	r29, 0xFF	; 255
    5214:	e8 81       	ld	r30, Y
    5216:	f9 81       	ldd	r31, Y+1	; 0x01
    5218:	c8 5e       	subi	r28, 0xE8	; 232
    521a:	d0 40       	sbci	r29, 0x00	; 0
    521c:	34 96       	adiw	r30, 0x04	; 4
    521e:	65 90       	lpm	r6, Z+
    5220:	75 90       	lpm	r7, Z+
    5222:	85 90       	lpm	r8, Z+
    5224:	94 90       	lpm	r9, Z
    5226:	e6 2c       	mov	r14, r6
    5228:	cb 53       	subi	r28, 0x3B	; 59
    522a:	df 4f       	sbci	r29, 0xFF	; 255
    522c:	68 82       	st	Y, r6
    522e:	79 82       	std	Y+1, r7	; 0x01
    5230:	8a 82       	std	Y+2, r8	; 0x02
    5232:	9b 82       	std	Y+3, r9	; 0x03
    5234:	c5 5c       	subi	r28, 0xC5	; 197
    5236:	d0 40       	sbci	r29, 0x00	; 0
    5238:	ce 53       	subi	r28, 0x3E	; 62
    523a:	df 4f       	sbci	r29, 0xFF	; 255
    523c:	b8 80       	ld	r11, Y
    523e:	c2 5c       	subi	r28, 0xC2	; 194
    5240:	d0 40       	sbci	r29, 0x00	; 0
    5242:	cd 53       	subi	r28, 0x3D	; 61
    5244:	df 4f       	sbci	r29, 0xFF	; 255
    5246:	c8 80       	ld	r12, Y
    5248:	c3 5c       	subi	r28, 0xC3	; 195
    524a:	d0 40       	sbci	r29, 0x00	; 0
    524c:	cc 53       	subi	r28, 0x3C	; 60
    524e:	df 4f       	sbci	r29, 0xFF	; 255
    5250:	d8 80       	ld	r13, Y
    5252:	c4 5c       	subi	r28, 0xC4	; 196
    5254:	d0 40       	sbci	r29, 0x00	; 0
    5256:	ca 53       	subi	r28, 0x3A	; 58
    5258:	df 4f       	sbci	r29, 0xFF	; 255
    525a:	f8 80       	ld	r15, Y
    525c:	c6 5c       	subi	r28, 0xC6	; 198
    525e:	d0 40       	sbci	r29, 0x00	; 0
    5260:	c9 53       	subi	r28, 0x39	; 57
    5262:	df 4f       	sbci	r29, 0xFF	; 255
    5264:	08 81       	ld	r16, Y
    5266:	c7 5c       	subi	r28, 0xC7	; 199
    5268:	d0 40       	sbci	r29, 0x00	; 0
    526a:	c8 53       	subi	r28, 0x38	; 56
    526c:	df 4f       	sbci	r29, 0xFF	; 255
    526e:	18 81       	ld	r17, Y
    5270:	c8 5c       	subi	r28, 0xC8	; 200
    5272:	d0 40       	sbci	r29, 0x00	; 0
    5274:	0e 94 b2 34 	call	0x6964	; 0x6964 <__adddi3>
    5278:	39 01       	movw	r6, r18
    527a:	4a 01       	movw	r8, r20
    527c:	b6 2f       	mov	r27, r22
    527e:	a7 2f       	mov	r26, r23
    5280:	f8 2f       	mov	r31, r24
    5282:	e9 2f       	mov	r30, r25
    5284:	c7 53       	subi	r28, 0x37	; 55
    5286:	df 4f       	sbci	r29, 0xFF	; 255
    5288:	28 81       	ld	r18, Y
    528a:	c9 5c       	subi	r28, 0xC9	; 201
    528c:	d0 40       	sbci	r29, 0x00	; 0
    528e:	c5 53       	subi	r28, 0x35	; 53
    5290:	df 4f       	sbci	r29, 0xFF	; 255
    5292:	38 81       	ld	r19, Y
    5294:	cb 5c       	subi	r28, 0xCB	; 203
    5296:	d0 40       	sbci	r29, 0x00	; 0
    5298:	c3 53       	subi	r28, 0x33	; 51
    529a:	df 4f       	sbci	r29, 0xFF	; 255
    529c:	48 81       	ld	r20, Y
    529e:	cd 5c       	subi	r28, 0xCD	; 205
    52a0:	d0 40       	sbci	r29, 0x00	; 0
    52a2:	c2 53       	subi	r28, 0x32	; 50
    52a4:	df 4f       	sbci	r29, 0xFF	; 255
    52a6:	58 81       	ld	r21, Y
    52a8:	ce 5c       	subi	r28, 0xCE	; 206
    52aa:	d0 40       	sbci	r29, 0x00	; 0
    52ac:	c1 53       	subi	r28, 0x31	; 49
    52ae:	df 4f       	sbci	r29, 0xFF	; 255
    52b0:	68 81       	ld	r22, Y
    52b2:	cf 5c       	subi	r28, 0xCF	; 207
    52b4:	d0 40       	sbci	r29, 0x00	; 0
    52b6:	72 2d       	mov	r23, r2
    52b8:	c0 53       	subi	r28, 0x30	; 48
    52ba:	df 4f       	sbci	r29, 0xFF	; 255
    52bc:	88 81       	ld	r24, Y
    52be:	c0 5d       	subi	r28, 0xD0	; 208
    52c0:	d0 40       	sbci	r29, 0x00	; 0
    52c2:	cf 52       	subi	r28, 0x2F	; 47
    52c4:	df 4f       	sbci	r29, 0xFF	; 255
    52c6:	98 81       	ld	r25, Y
    52c8:	c1 5d       	subi	r28, 0xD1	; 209
    52ca:	d0 40       	sbci	r29, 0x00	; 0
    52cc:	0e e2       	ldi	r16, 0x2E	; 46
    52ce:	0e 94 97 34 	call	0x692e	; 0x692e <__rotldi3>
    52d2:	59 01       	movw	r10, r18
    52d4:	6a 01       	movw	r12, r20
    52d6:	7b 01       	movw	r14, r22
    52d8:	38 2e       	mov	r3, r24
    52da:	19 2f       	mov	r17, r25
    52dc:	c7 53       	subi	r28, 0x37	; 55
    52de:	df 4f       	sbci	r29, 0xFF	; 255
    52e0:	28 81       	ld	r18, Y
    52e2:	c9 5c       	subi	r28, 0xC9	; 201
    52e4:	d0 40       	sbci	r29, 0x00	; 0
    52e6:	c5 53       	subi	r28, 0x35	; 53
    52e8:	df 4f       	sbci	r29, 0xFF	; 255
    52ea:	38 81       	ld	r19, Y
    52ec:	cb 5c       	subi	r28, 0xCB	; 203
    52ee:	d0 40       	sbci	r29, 0x00	; 0
    52f0:	c3 53       	subi	r28, 0x33	; 51
    52f2:	df 4f       	sbci	r29, 0xFF	; 255
    52f4:	48 81       	ld	r20, Y
    52f6:	cd 5c       	subi	r28, 0xCD	; 205
    52f8:	d0 40       	sbci	r29, 0x00	; 0
    52fa:	c2 53       	subi	r28, 0x32	; 50
    52fc:	df 4f       	sbci	r29, 0xFF	; 255
    52fe:	58 81       	ld	r21, Y
    5300:	ce 5c       	subi	r28, 0xCE	; 206
    5302:	d0 40       	sbci	r29, 0x00	; 0
    5304:	c1 53       	subi	r28, 0x31	; 49
    5306:	df 4f       	sbci	r29, 0xFF	; 255
    5308:	68 81       	ld	r22, Y
    530a:	cf 5c       	subi	r28, 0xCF	; 207
    530c:	d0 40       	sbci	r29, 0x00	; 0
    530e:	72 2d       	mov	r23, r2
    5310:	c0 53       	subi	r28, 0x30	; 48
    5312:	df 4f       	sbci	r29, 0xFF	; 255
    5314:	88 81       	ld	r24, Y
    5316:	c0 5d       	subi	r28, 0xD0	; 208
    5318:	d0 40       	sbci	r29, 0x00	; 0
    531a:	cf 52       	subi	r28, 0x2F	; 47
    531c:	df 4f       	sbci	r29, 0xFF	; 255
    531e:	98 81       	ld	r25, Y
    5320:	c1 5d       	subi	r28, 0xD1	; 209
    5322:	d0 40       	sbci	r29, 0x00	; 0
    5324:	02 e3       	ldi	r16, 0x32	; 50
    5326:	0e 94 97 34 	call	0x692e	; 0x692e <__rotldi3>
    532a:	a2 26       	eor	r10, r18
    532c:	b3 26       	eor	r11, r19
    532e:	c4 26       	eor	r12, r20
    5330:	d5 26       	eor	r13, r21
    5332:	e6 26       	eor	r14, r22
    5334:	f7 26       	eor	r15, r23
    5336:	38 26       	eor	r3, r24
    5338:	19 27       	eor	r17, r25
    533a:	c7 53       	subi	r28, 0x37	; 55
    533c:	df 4f       	sbci	r29, 0xFF	; 255
    533e:	28 81       	ld	r18, Y
    5340:	c9 5c       	subi	r28, 0xC9	; 201
    5342:	d0 40       	sbci	r29, 0x00	; 0
    5344:	c5 53       	subi	r28, 0x35	; 53
    5346:	df 4f       	sbci	r29, 0xFF	; 255
    5348:	38 81       	ld	r19, Y
    534a:	cb 5c       	subi	r28, 0xCB	; 203
    534c:	d0 40       	sbci	r29, 0x00	; 0
    534e:	c3 53       	subi	r28, 0x33	; 51
    5350:	df 4f       	sbci	r29, 0xFF	; 255
    5352:	48 81       	ld	r20, Y
    5354:	cd 5c       	subi	r28, 0xCD	; 205
    5356:	d0 40       	sbci	r29, 0x00	; 0
    5358:	c2 53       	subi	r28, 0x32	; 50
    535a:	df 4f       	sbci	r29, 0xFF	; 255
    535c:	58 81       	ld	r21, Y
    535e:	ce 5c       	subi	r28, 0xCE	; 206
    5360:	d0 40       	sbci	r29, 0x00	; 0
    5362:	c1 53       	subi	r28, 0x31	; 49
    5364:	df 4f       	sbci	r29, 0xFF	; 255
    5366:	68 81       	ld	r22, Y
    5368:	cf 5c       	subi	r28, 0xCF	; 207
    536a:	d0 40       	sbci	r29, 0x00	; 0
    536c:	72 2d       	mov	r23, r2
    536e:	c0 53       	subi	r28, 0x30	; 48
    5370:	df 4f       	sbci	r29, 0xFF	; 255
    5372:	88 81       	ld	r24, Y
    5374:	c0 5d       	subi	r28, 0xD0	; 208
    5376:	d0 40       	sbci	r29, 0x00	; 0
    5378:	cf 52       	subi	r28, 0x2F	; 47
    537a:	df 4f       	sbci	r29, 0xFF	; 255
    537c:	98 81       	ld	r25, Y
    537e:	c1 5d       	subi	r28, 0xD1	; 209
    5380:	d0 40       	sbci	r29, 0x00	; 0
    5382:	07 e1       	ldi	r16, 0x17	; 23
    5384:	0e 94 97 34 	call	0x692e	; 0x692e <__rotldi3>
    5388:	a2 26       	eor	r10, r18
    538a:	b3 26       	eor	r11, r19
    538c:	c4 26       	eor	r12, r20
    538e:	d5 26       	eor	r13, r21
    5390:	e6 26       	eor	r14, r22
    5392:	f7 26       	eor	r15, r23
    5394:	03 2d       	mov	r16, r3
    5396:	08 27       	eor	r16, r24
    5398:	19 27       	eor	r17, r25
    539a:	93 01       	movw	r18, r6
    539c:	a4 01       	movw	r20, r8
    539e:	6b 2f       	mov	r22, r27
    53a0:	7a 2f       	mov	r23, r26
    53a2:	8f 2f       	mov	r24, r31
    53a4:	9e 2f       	mov	r25, r30
    53a6:	0e 94 b2 34 	call	0x6964	; 0x6964 <__adddi3>
    53aa:	59 01       	movw	r10, r18
    53ac:	6a 01       	movw	r12, r20
    53ae:	7b 01       	movw	r14, r22
    53b0:	8c 01       	movw	r16, r24
		}else{
			wx = SIGMA_b(w[14]) + w[9] + SIGMA_a(w[1]) + w[0];
			memmove(&(w[0]), &(w[1]), 15*8);
			w[15] = wx;
		}
		t1 = a[7] + SIGMA_1(a[4]) + CH(a[4], a[5], a[6]) + pgm_read_uint64_t_P(k++) + wx;
    53b2:	c6 52       	subi	r28, 0x26	; 38
    53b4:	df 4f       	sbci	r29, 0xFF	; 255
    53b6:	28 81       	ld	r18, Y
    53b8:	ca 5d       	subi	r28, 0xDA	; 218
    53ba:	d0 40       	sbci	r29, 0x00	; 0
    53bc:	c5 52       	subi	r28, 0x25	; 37
    53be:	df 4f       	sbci	r29, 0xFF	; 255
    53c0:	38 81       	ld	r19, Y
    53c2:	cb 5d       	subi	r28, 0xDB	; 219
    53c4:	d0 40       	sbci	r29, 0x00	; 0
    53c6:	c4 52       	subi	r28, 0x24	; 36
    53c8:	df 4f       	sbci	r29, 0xFF	; 255
    53ca:	48 81       	ld	r20, Y
    53cc:	cc 5d       	subi	r28, 0xDC	; 220
    53ce:	d0 40       	sbci	r29, 0x00	; 0
    53d0:	c6 51       	subi	r28, 0x16	; 22
    53d2:	df 4f       	sbci	r29, 0xFF	; 255
    53d4:	58 81       	ld	r21, Y
    53d6:	ca 5e       	subi	r28, 0xEA	; 234
    53d8:	d0 40       	sbci	r29, 0x00	; 0
    53da:	c5 51       	subi	r28, 0x15	; 21
    53dc:	df 4f       	sbci	r29, 0xFF	; 255
    53de:	68 81       	ld	r22, Y
    53e0:	cb 5e       	subi	r28, 0xEB	; 235
    53e2:	d0 40       	sbci	r29, 0x00	; 0
    53e4:	c4 51       	subi	r28, 0x14	; 20
    53e6:	df 4f       	sbci	r29, 0xFF	; 255
    53e8:	78 81       	ld	r23, Y
    53ea:	cc 5e       	subi	r28, 0xEC	; 236
    53ec:	d0 40       	sbci	r29, 0x00	; 0
    53ee:	c3 51       	subi	r28, 0x13	; 19
    53f0:	df 4f       	sbci	r29, 0xFF	; 255
    53f2:	88 81       	ld	r24, Y
    53f4:	cd 5e       	subi	r28, 0xED	; 237
    53f6:	d0 40       	sbci	r29, 0x00	; 0
    53f8:	c2 51       	subi	r28, 0x12	; 18
    53fa:	df 4f       	sbci	r29, 0xFF	; 255
    53fc:	98 81       	ld	r25, Y
    53fe:	ce 5e       	subi	r28, 0xEE	; 238
    5400:	d0 40       	sbci	r29, 0x00	; 0
    5402:	0e 94 b2 34 	call	0x6964	; 0x6964 <__adddi3>
    5406:	ce 52       	subi	r28, 0x2E	; 46
    5408:	df 4f       	sbci	r29, 0xFF	; 255
    540a:	a8 80       	ld	r10, Y
    540c:	c2 5d       	subi	r28, 0xD2	; 210
    540e:	d0 40       	sbci	r29, 0x00	; 0
    5410:	cd 52       	subi	r28, 0x2D	; 45
    5412:	df 4f       	sbci	r29, 0xFF	; 255
    5414:	b8 80       	ld	r11, Y
    5416:	c3 5d       	subi	r28, 0xD3	; 211
    5418:	d0 40       	sbci	r29, 0x00	; 0
    541a:	cc 52       	subi	r28, 0x2C	; 44
    541c:	df 4f       	sbci	r29, 0xFF	; 255
    541e:	c8 80       	ld	r12, Y
    5420:	c4 5d       	subi	r28, 0xD4	; 212
    5422:	d0 40       	sbci	r29, 0x00	; 0
    5424:	cb 52       	subi	r28, 0x2B	; 43
    5426:	df 4f       	sbci	r29, 0xFF	; 255
    5428:	d8 80       	ld	r13, Y
    542a:	c5 5d       	subi	r28, 0xD5	; 213
    542c:	d0 40       	sbci	r29, 0x00	; 0
    542e:	ca 52       	subi	r28, 0x2A	; 42
    5430:	df 4f       	sbci	r29, 0xFF	; 255
    5432:	e8 80       	ld	r14, Y
    5434:	c6 5d       	subi	r28, 0xD6	; 214
    5436:	d0 40       	sbci	r29, 0x00	; 0
    5438:	c9 52       	subi	r28, 0x29	; 41
    543a:	df 4f       	sbci	r29, 0xFF	; 255
    543c:	f8 80       	ld	r15, Y
    543e:	c7 5d       	subi	r28, 0xD7	; 215
    5440:	d0 40       	sbci	r29, 0x00	; 0
    5442:	c8 52       	subi	r28, 0x28	; 40
    5444:	df 4f       	sbci	r29, 0xFF	; 255
    5446:	08 81       	ld	r16, Y
    5448:	c8 5d       	subi	r28, 0xD8	; 216
    544a:	d0 40       	sbci	r29, 0x00	; 0
    544c:	c7 52       	subi	r28, 0x27	; 39
    544e:	df 4f       	sbci	r29, 0xFF	; 255
    5450:	18 81       	ld	r17, Y
    5452:	c9 5d       	subi	r28, 0xD9	; 217
    5454:	d0 40       	sbci	r29, 0x00	; 0
    5456:	0e 94 b2 34 	call	0x6964	; 0x6964 <__adddi3>
    545a:	92 2e       	mov	r9, r18
    545c:	c5 53       	subi	r28, 0x35	; 53
    545e:	df 4f       	sbci	r29, 0xFF	; 255
    5460:	38 83       	st	Y, r19
    5462:	cb 5c       	subi	r28, 0xCB	; 203
    5464:	d0 40       	sbci	r29, 0x00	; 0
    5466:	c3 53       	subi	r28, 0x33	; 51
    5468:	df 4f       	sbci	r29, 0xFF	; 255
    546a:	48 83       	st	Y, r20
    546c:	cd 5c       	subi	r28, 0xCD	; 205
    546e:	d0 40       	sbci	r29, 0x00	; 0
    5470:	c2 53       	subi	r28, 0x32	; 50
    5472:	df 4f       	sbci	r29, 0xFF	; 255
    5474:	58 83       	st	Y, r21
    5476:	ce 5c       	subi	r28, 0xCE	; 206
    5478:	d0 40       	sbci	r29, 0x00	; 0
    547a:	c1 53       	subi	r28, 0x31	; 49
    547c:	df 4f       	sbci	r29, 0xFF	; 255
    547e:	68 83       	st	Y, r22
    5480:	cf 5c       	subi	r28, 0xCF	; 207
    5482:	d0 40       	sbci	r29, 0x00	; 0
    5484:	c0 53       	subi	r28, 0x30	; 48
    5486:	df 4f       	sbci	r29, 0xFF	; 255
    5488:	78 83       	st	Y, r23
    548a:	c0 5d       	subi	r28, 0xD0	; 208
    548c:	d0 40       	sbci	r29, 0x00	; 0
    548e:	cf 52       	subi	r28, 0x2F	; 47
    5490:	df 4f       	sbci	r29, 0xFF	; 255
    5492:	88 83       	st	Y, r24
    5494:	c1 5d       	subi	r28, 0xD1	; 209
    5496:	d0 40       	sbci	r29, 0x00	; 0
    5498:	ce 52       	subi	r28, 0x2E	; 46
    549a:	df 4f       	sbci	r29, 0xFF	; 255
    549c:	98 83       	st	Y, r25
    549e:	c2 5d       	subi	r28, 0xD2	; 210
    54a0:	d0 40       	sbci	r29, 0x00	; 0
		t2 = SIGMA_0(a[0]) + MAJ(a[0], a[1], a[2]);
    54a2:	f2 01       	movw	r30, r4
    54a4:	f0 85       	ldd	r31, Z+8	; 0x08
    54a6:	cd 52       	subi	r28, 0x2D	; 45
    54a8:	df 4f       	sbci	r29, 0xFF	; 255
    54aa:	f8 83       	st	Y, r31
    54ac:	c3 5d       	subi	r28, 0xD3	; 211
    54ae:	d0 40       	sbci	r29, 0x00	; 0
    54b0:	d2 01       	movw	r26, r4
    54b2:	19 96       	adiw	r26, 0x09	; 9
    54b4:	bc 91       	ld	r27, X
    54b6:	c7 53       	subi	r28, 0x37	; 55
    54b8:	df 4f       	sbci	r29, 0xFF	; 255
    54ba:	b8 83       	st	Y, r27
    54bc:	c9 5c       	subi	r28, 0xC9	; 201
    54be:	d0 40       	sbci	r29, 0x00	; 0
    54c0:	f2 01       	movw	r30, r4
    54c2:	f2 85       	ldd	r31, Z+10	; 0x0a
    54c4:	cc 52       	subi	r28, 0x2C	; 44
    54c6:	df 4f       	sbci	r29, 0xFF	; 255
    54c8:	f8 83       	st	Y, r31
    54ca:	c4 5d       	subi	r28, 0xD4	; 212
    54cc:	d0 40       	sbci	r29, 0x00	; 0
    54ce:	d2 01       	movw	r26, r4
    54d0:	1b 96       	adiw	r26, 0x0b	; 11
    54d2:	bc 91       	ld	r27, X
    54d4:	cb 52       	subi	r28, 0x2B	; 43
    54d6:	df 4f       	sbci	r29, 0xFF	; 255
    54d8:	b8 83       	st	Y, r27
    54da:	c5 5d       	subi	r28, 0xD5	; 213
    54dc:	d0 40       	sbci	r29, 0x00	; 0
    54de:	f2 01       	movw	r30, r4
    54e0:	f4 85       	ldd	r31, Z+12	; 0x0c
    54e2:	ca 52       	subi	r28, 0x2A	; 42
    54e4:	df 4f       	sbci	r29, 0xFF	; 255
    54e6:	f8 83       	st	Y, r31
    54e8:	c6 5d       	subi	r28, 0xD6	; 214
    54ea:	d0 40       	sbci	r29, 0x00	; 0
    54ec:	d2 01       	movw	r26, r4
    54ee:	1d 96       	adiw	r26, 0x0d	; 13
    54f0:	bc 91       	ld	r27, X
    54f2:	c9 52       	subi	r28, 0x29	; 41
    54f4:	df 4f       	sbci	r29, 0xFF	; 255
    54f6:	b8 83       	st	Y, r27
    54f8:	c7 5d       	subi	r28, 0xD7	; 215
    54fa:	d0 40       	sbci	r29, 0x00	; 0
    54fc:	f2 01       	movw	r30, r4
    54fe:	f6 85       	ldd	r31, Z+14	; 0x0e
    5500:	c8 52       	subi	r28, 0x28	; 40
    5502:	df 4f       	sbci	r29, 0xFF	; 255
    5504:	f8 83       	st	Y, r31
    5506:	c8 5d       	subi	r28, 0xD8	; 216
    5508:	d0 40       	sbci	r29, 0x00	; 0
    550a:	d2 01       	movw	r26, r4
    550c:	1f 96       	adiw	r26, 0x0f	; 15
    550e:	bc 91       	ld	r27, X
    5510:	c7 52       	subi	r28, 0x27	; 39
    5512:	df 4f       	sbci	r29, 0xFF	; 255
    5514:	b8 83       	st	Y, r27
    5516:	c9 5d       	subi	r28, 0xD9	; 217
    5518:	d0 40       	sbci	r29, 0x00	; 0
    551a:	f2 01       	movw	r30, r4
    551c:	80 88       	ldd	r8, Z+16	; 0x10
    551e:	71 88       	ldd	r7, Z+17	; 0x11
    5520:	22 88       	ldd	r2, Z+18	; 0x12
    5522:	33 88       	ldd	r3, Z+19	; 0x13
    5524:	64 88       	ldd	r6, Z+20	; 0x14
    5526:	15 89       	ldd	r17, Z+21	; 0x15
    5528:	c6 52       	subi	r28, 0x26	; 38
    552a:	df 4f       	sbci	r29, 0xFF	; 255
    552c:	18 83       	st	Y, r17
    552e:	ca 5d       	subi	r28, 0xDA	; 218
    5530:	d0 40       	sbci	r29, 0x00	; 0
    5532:	16 89       	ldd	r17, Z+22	; 0x16
    5534:	c5 52       	subi	r28, 0x25	; 37
    5536:	df 4f       	sbci	r29, 0xFF	; 255
    5538:	18 83       	st	Y, r17
    553a:	cb 5d       	subi	r28, 0xDB	; 219
    553c:	d0 40       	sbci	r29, 0x00	; 0
    553e:	17 89       	ldd	r17, Z+23	; 0x17
    5540:	c4 52       	subi	r28, 0x24	; 36
    5542:	df 4f       	sbci	r29, 0xFF	; 255
    5544:	18 83       	st	Y, r17
    5546:	cc 5d       	subi	r28, 0xDC	; 220
    5548:	d0 40       	sbci	r29, 0x00	; 0
		memmove(&(a[1]), &(a[0]), 7*8);
    554a:	48 e3       	ldi	r20, 0x38	; 56
    554c:	50 e0       	ldi	r21, 0x00	; 0
    554e:	b2 01       	movw	r22, r4
    5550:	c1 51       	subi	r28, 0x11	; 17
    5552:	df 4f       	sbci	r29, 0xFF	; 255
    5554:	88 81       	ld	r24, Y
    5556:	99 81       	ldd	r25, Y+1	; 0x01
    5558:	cf 5e       	subi	r28, 0xEF	; 239
    555a:	d0 40       	sbci	r29, 0x00	; 0
    555c:	0e 94 26 35 	call	0x6a4c	; 0x6a4c <memmove>
		a[0] = t1 + t2;
    5560:	c3 52       	subi	r28, 0x23	; 35
    5562:	df 4f       	sbci	r29, 0xFF	; 255
    5564:	28 81       	ld	r18, Y
    5566:	cd 5d       	subi	r28, 0xDD	; 221
    5568:	d0 40       	sbci	r29, 0x00	; 0
    556a:	c2 52       	subi	r28, 0x22	; 34
    556c:	df 4f       	sbci	r29, 0xFF	; 255
    556e:	38 81       	ld	r19, Y
    5570:	ce 5d       	subi	r28, 0xDE	; 222
    5572:	d0 40       	sbci	r29, 0x00	; 0
    5574:	c1 52       	subi	r28, 0x21	; 33
    5576:	df 4f       	sbci	r29, 0xFF	; 255
    5578:	48 81       	ld	r20, Y
    557a:	cf 5d       	subi	r28, 0xDF	; 223
    557c:	d0 40       	sbci	r29, 0x00	; 0
    557e:	c0 52       	subi	r28, 0x20	; 32
    5580:	df 4f       	sbci	r29, 0xFF	; 255
    5582:	58 81       	ld	r21, Y
    5584:	c0 5e       	subi	r28, 0xE0	; 224
    5586:	d0 40       	sbci	r29, 0x00	; 0
    5588:	cf 51       	subi	r28, 0x1F	; 31
    558a:	df 4f       	sbci	r29, 0xFF	; 255
    558c:	68 81       	ld	r22, Y
    558e:	c1 5e       	subi	r28, 0xE1	; 225
    5590:	d0 40       	sbci	r29, 0x00	; 0
    5592:	ce 51       	subi	r28, 0x1E	; 30
    5594:	df 4f       	sbci	r29, 0xFF	; 255
    5596:	78 81       	ld	r23, Y
    5598:	c2 5e       	subi	r28, 0xE2	; 226
    559a:	d0 40       	sbci	r29, 0x00	; 0
    559c:	cd 51       	subi	r28, 0x1D	; 29
    559e:	df 4f       	sbci	r29, 0xFF	; 255
    55a0:	88 81       	ld	r24, Y
    55a2:	c3 5e       	subi	r28, 0xE3	; 227
    55a4:	d0 40       	sbci	r29, 0x00	; 0
    55a6:	cc 51       	subi	r28, 0x1C	; 28
    55a8:	df 4f       	sbci	r29, 0xFF	; 255
    55aa:	98 81       	ld	r25, Y
    55ac:	c4 5e       	subi	r28, 0xE4	; 228
    55ae:	d0 40       	sbci	r29, 0x00	; 0
    55b0:	0e e1       	ldi	r16, 0x1E	; 30
    55b2:	0e 94 97 34 	call	0x692e	; 0x692e <__rotldi3>
    55b6:	d2 2e       	mov	r13, r18
    55b8:	e3 2e       	mov	r14, r19
    55ba:	f4 2e       	mov	r15, r20
    55bc:	15 2f       	mov	r17, r21
    55be:	b6 2f       	mov	r27, r22
    55c0:	e7 2f       	mov	r30, r23
    55c2:	a8 2f       	mov	r26, r24
    55c4:	f9 2f       	mov	r31, r25
    55c6:	c3 52       	subi	r28, 0x23	; 35
    55c8:	df 4f       	sbci	r29, 0xFF	; 255
    55ca:	28 81       	ld	r18, Y
    55cc:	cd 5d       	subi	r28, 0xDD	; 221
    55ce:	d0 40       	sbci	r29, 0x00	; 0
    55d0:	c2 52       	subi	r28, 0x22	; 34
    55d2:	df 4f       	sbci	r29, 0xFF	; 255
    55d4:	38 81       	ld	r19, Y
    55d6:	ce 5d       	subi	r28, 0xDE	; 222
    55d8:	d0 40       	sbci	r29, 0x00	; 0
    55da:	c1 52       	subi	r28, 0x21	; 33
    55dc:	df 4f       	sbci	r29, 0xFF	; 255
    55de:	48 81       	ld	r20, Y
    55e0:	cf 5d       	subi	r28, 0xDF	; 223
    55e2:	d0 40       	sbci	r29, 0x00	; 0
    55e4:	c0 52       	subi	r28, 0x20	; 32
    55e6:	df 4f       	sbci	r29, 0xFF	; 255
    55e8:	58 81       	ld	r21, Y
    55ea:	c0 5e       	subi	r28, 0xE0	; 224
    55ec:	d0 40       	sbci	r29, 0x00	; 0
    55ee:	cf 51       	subi	r28, 0x1F	; 31
    55f0:	df 4f       	sbci	r29, 0xFF	; 255
    55f2:	68 81       	ld	r22, Y
    55f4:	c1 5e       	subi	r28, 0xE1	; 225
    55f6:	d0 40       	sbci	r29, 0x00	; 0
    55f8:	ce 51       	subi	r28, 0x1E	; 30
    55fa:	df 4f       	sbci	r29, 0xFF	; 255
    55fc:	78 81       	ld	r23, Y
    55fe:	c2 5e       	subi	r28, 0xE2	; 226
    5600:	d0 40       	sbci	r29, 0x00	; 0
    5602:	cd 51       	subi	r28, 0x1D	; 29
    5604:	df 4f       	sbci	r29, 0xFF	; 255
    5606:	88 81       	ld	r24, Y
    5608:	c3 5e       	subi	r28, 0xE3	; 227
    560a:	d0 40       	sbci	r29, 0x00	; 0
    560c:	cc 51       	subi	r28, 0x1C	; 28
    560e:	df 4f       	sbci	r29, 0xFF	; 255
    5610:	98 81       	ld	r25, Y
    5612:	c4 5e       	subi	r28, 0xE4	; 228
    5614:	d0 40       	sbci	r29, 0x00	; 0
    5616:	04 e2       	ldi	r16, 0x24	; 36
    5618:	0e 94 97 34 	call	0x692e	; 0x692e <__rotldi3>
    561c:	d2 26       	eor	r13, r18
    561e:	e3 26       	eor	r14, r19
    5620:	f4 26       	eor	r15, r20
    5622:	15 27       	eor	r17, r21
    5624:	b6 27       	eor	r27, r22
    5626:	e7 27       	eor	r30, r23
    5628:	a8 27       	eor	r26, r24
    562a:	f9 27       	eor	r31, r25
    562c:	c3 52       	subi	r28, 0x23	; 35
    562e:	df 4f       	sbci	r29, 0xFF	; 255
    5630:	28 81       	ld	r18, Y
    5632:	cd 5d       	subi	r28, 0xDD	; 221
    5634:	d0 40       	sbci	r29, 0x00	; 0
    5636:	c2 52       	subi	r28, 0x22	; 34
    5638:	df 4f       	sbci	r29, 0xFF	; 255
    563a:	38 81       	ld	r19, Y
    563c:	ce 5d       	subi	r28, 0xDE	; 222
    563e:	d0 40       	sbci	r29, 0x00	; 0
    5640:	c1 52       	subi	r28, 0x21	; 33
    5642:	df 4f       	sbci	r29, 0xFF	; 255
    5644:	48 81       	ld	r20, Y
    5646:	cf 5d       	subi	r28, 0xDF	; 223
    5648:	d0 40       	sbci	r29, 0x00	; 0
    564a:	c0 52       	subi	r28, 0x20	; 32
    564c:	df 4f       	sbci	r29, 0xFF	; 255
    564e:	58 81       	ld	r21, Y
    5650:	c0 5e       	subi	r28, 0xE0	; 224
    5652:	d0 40       	sbci	r29, 0x00	; 0
    5654:	cf 51       	subi	r28, 0x1F	; 31
    5656:	df 4f       	sbci	r29, 0xFF	; 255
    5658:	68 81       	ld	r22, Y
    565a:	c1 5e       	subi	r28, 0xE1	; 225
    565c:	d0 40       	sbci	r29, 0x00	; 0
    565e:	ce 51       	subi	r28, 0x1E	; 30
    5660:	df 4f       	sbci	r29, 0xFF	; 255
    5662:	78 81       	ld	r23, Y
    5664:	c2 5e       	subi	r28, 0xE2	; 226
    5666:	d0 40       	sbci	r29, 0x00	; 0
    5668:	cd 51       	subi	r28, 0x1D	; 29
    566a:	df 4f       	sbci	r29, 0xFF	; 255
    566c:	88 81       	ld	r24, Y
    566e:	c3 5e       	subi	r28, 0xE3	; 227
    5670:	d0 40       	sbci	r29, 0x00	; 0
    5672:	cc 51       	subi	r28, 0x1C	; 28
    5674:	df 4f       	sbci	r29, 0xFF	; 255
    5676:	98 81       	ld	r25, Y
    5678:	c4 5e       	subi	r28, 0xE4	; 228
    567a:	d0 40       	sbci	r29, 0x00	; 0
    567c:	09 e1       	ldi	r16, 0x19	; 25
    567e:	0e 94 97 34 	call	0x692e	; 0x692e <__rotldi3>
    5682:	2d 25       	eor	r18, r13
    5684:	3e 25       	eor	r19, r14
    5686:	4f 25       	eor	r20, r15
    5688:	51 27       	eor	r21, r17
    568a:	6b 27       	eor	r22, r27
    568c:	7e 27       	eor	r23, r30
    568e:	cd 52       	subi	r28, 0x2D	; 45
    5690:	df 4f       	sbci	r29, 0xFF	; 255
    5692:	a8 80       	ld	r10, Y
    5694:	c3 5d       	subi	r28, 0xD3	; 211
    5696:	d0 40       	sbci	r29, 0x00	; 0
    5698:	a8 24       	eor	r10, r8
    569a:	c7 53       	subi	r28, 0x37	; 55
    569c:	df 4f       	sbci	r29, 0xFF	; 255
    569e:	b8 80       	ld	r11, Y
    56a0:	c9 5c       	subi	r28, 0xC9	; 201
    56a2:	d0 40       	sbci	r29, 0x00	; 0
    56a4:	b7 24       	eor	r11, r7
    56a6:	cc 52       	subi	r28, 0x2C	; 44
    56a8:	df 4f       	sbci	r29, 0xFF	; 255
    56aa:	c8 80       	ld	r12, Y
    56ac:	c4 5d       	subi	r28, 0xD4	; 212
    56ae:	d0 40       	sbci	r29, 0x00	; 0
    56b0:	c2 24       	eor	r12, r2
    56b2:	cb 52       	subi	r28, 0x2B	; 43
    56b4:	df 4f       	sbci	r29, 0xFF	; 255
    56b6:	d8 80       	ld	r13, Y
    56b8:	c5 5d       	subi	r28, 0xD5	; 213
    56ba:	d0 40       	sbci	r29, 0x00	; 0
    56bc:	d3 24       	eor	r13, r3
    56be:	ca 52       	subi	r28, 0x2A	; 42
    56c0:	df 4f       	sbci	r29, 0xFF	; 255
    56c2:	e8 80       	ld	r14, Y
    56c4:	c6 5d       	subi	r28, 0xD6	; 214
    56c6:	d0 40       	sbci	r29, 0x00	; 0
    56c8:	e6 24       	eor	r14, r6
    56ca:	c9 52       	subi	r28, 0x29	; 41
    56cc:	df 4f       	sbci	r29, 0xFF	; 255
    56ce:	f8 80       	ld	r15, Y
    56d0:	c7 5d       	subi	r28, 0xD7	; 215
    56d2:	d0 40       	sbci	r29, 0x00	; 0
    56d4:	c6 52       	subi	r28, 0x26	; 38
    56d6:	df 4f       	sbci	r29, 0xFF	; 255
    56d8:	18 81       	ld	r17, Y
    56da:	ca 5d       	subi	r28, 0xDA	; 218
    56dc:	d0 40       	sbci	r29, 0x00	; 0
    56de:	f1 26       	eor	r15, r17
    56e0:	c8 52       	subi	r28, 0x28	; 40
    56e2:	df 4f       	sbci	r29, 0xFF	; 255
    56e4:	08 81       	ld	r16, Y
    56e6:	c8 5d       	subi	r28, 0xD8	; 216
    56e8:	d0 40       	sbci	r29, 0x00	; 0
    56ea:	c5 52       	subi	r28, 0x25	; 37
    56ec:	df 4f       	sbci	r29, 0xFF	; 255
    56ee:	18 81       	ld	r17, Y
    56f0:	cb 5d       	subi	r28, 0xDB	; 219
    56f2:	d0 40       	sbci	r29, 0x00	; 0
    56f4:	01 27       	eor	r16, r17
    56f6:	c7 52       	subi	r28, 0x27	; 39
    56f8:	df 4f       	sbci	r29, 0xFF	; 255
    56fa:	18 81       	ld	r17, Y
    56fc:	c9 5d       	subi	r28, 0xD9	; 217
    56fe:	d0 40       	sbci	r29, 0x00	; 0
    5700:	c4 52       	subi	r28, 0x24	; 36
    5702:	df 4f       	sbci	r29, 0xFF	; 255
    5704:	b8 81       	ld	r27, Y
    5706:	cc 5d       	subi	r28, 0xDC	; 220
    5708:	d0 40       	sbci	r29, 0x00	; 0
    570a:	1b 27       	eor	r17, r27
    570c:	c3 52       	subi	r28, 0x23	; 35
    570e:	df 4f       	sbci	r29, 0xFF	; 255
    5710:	e8 81       	ld	r30, Y
    5712:	cd 5d       	subi	r28, 0xDD	; 221
    5714:	d0 40       	sbci	r29, 0x00	; 0
    5716:	ae 22       	and	r10, r30
    5718:	c2 52       	subi	r28, 0x22	; 34
    571a:	df 4f       	sbci	r29, 0xFF	; 255
    571c:	b8 81       	ld	r27, Y
    571e:	ce 5d       	subi	r28, 0xDE	; 222
    5720:	d0 40       	sbci	r29, 0x00	; 0
    5722:	bb 22       	and	r11, r27
    5724:	c1 52       	subi	r28, 0x21	; 33
    5726:	df 4f       	sbci	r29, 0xFF	; 255
    5728:	e8 81       	ld	r30, Y
    572a:	cf 5d       	subi	r28, 0xDF	; 223
    572c:	d0 40       	sbci	r29, 0x00	; 0
    572e:	ce 22       	and	r12, r30
    5730:	c0 52       	subi	r28, 0x20	; 32
    5732:	df 4f       	sbci	r29, 0xFF	; 255
    5734:	b8 81       	ld	r27, Y
    5736:	c0 5e       	subi	r28, 0xE0	; 224
    5738:	d0 40       	sbci	r29, 0x00	; 0
    573a:	db 22       	and	r13, r27
    573c:	cf 51       	subi	r28, 0x1F	; 31
    573e:	df 4f       	sbci	r29, 0xFF	; 255
    5740:	e8 81       	ld	r30, Y
    5742:	c1 5e       	subi	r28, 0xE1	; 225
    5744:	d0 40       	sbci	r29, 0x00	; 0
    5746:	ee 22       	and	r14, r30
    5748:	ce 51       	subi	r28, 0x1E	; 30
    574a:	df 4f       	sbci	r29, 0xFF	; 255
    574c:	b8 81       	ld	r27, Y
    574e:	c2 5e       	subi	r28, 0xE2	; 226
    5750:	d0 40       	sbci	r29, 0x00	; 0
    5752:	fb 22       	and	r15, r27
    5754:	cd 51       	subi	r28, 0x1D	; 29
    5756:	df 4f       	sbci	r29, 0xFF	; 255
    5758:	e8 81       	ld	r30, Y
    575a:	c3 5e       	subi	r28, 0xE3	; 227
    575c:	d0 40       	sbci	r29, 0x00	; 0
    575e:	0e 23       	and	r16, r30
    5760:	cc 51       	subi	r28, 0x1C	; 28
    5762:	df 4f       	sbci	r29, 0xFF	; 255
    5764:	b8 81       	ld	r27, Y
    5766:	c4 5e       	subi	r28, 0xE4	; 228
    5768:	d0 40       	sbci	r29, 0x00	; 0
    576a:	b1 23       	and	r27, r17
    576c:	c3 52       	subi	r28, 0x23	; 35
    576e:	df 4f       	sbci	r29, 0xFF	; 255
    5770:	b8 83       	st	Y, r27
    5772:	cd 5d       	subi	r28, 0xDD	; 221
    5774:	d0 40       	sbci	r29, 0x00	; 0
    5776:	cd 52       	subi	r28, 0x2D	; 45
    5778:	df 4f       	sbci	r29, 0xFF	; 255
    577a:	e8 81       	ld	r30, Y
    577c:	c3 5d       	subi	r28, 0xD3	; 211
    577e:	d0 40       	sbci	r29, 0x00	; 0
    5780:	e8 21       	and	r30, r8
    5782:	c7 53       	subi	r28, 0x37	; 55
    5784:	df 4f       	sbci	r29, 0xFF	; 255
    5786:	18 81       	ld	r17, Y
    5788:	c9 5c       	subi	r28, 0xC9	; 201
    578a:	d0 40       	sbci	r29, 0x00	; 0
    578c:	17 21       	and	r17, r7
    578e:	c7 53       	subi	r28, 0x37	; 55
    5790:	df 4f       	sbci	r29, 0xFF	; 255
    5792:	18 83       	st	Y, r17
    5794:	c9 5c       	subi	r28, 0xC9	; 201
    5796:	d0 40       	sbci	r29, 0x00	; 0
    5798:	cc 52       	subi	r28, 0x2C	; 44
    579a:	df 4f       	sbci	r29, 0xFF	; 255
    579c:	18 81       	ld	r17, Y
    579e:	c4 5d       	subi	r28, 0xD4	; 212
    57a0:	d0 40       	sbci	r29, 0x00	; 0
    57a2:	21 22       	and	r2, r17
    57a4:	cb 52       	subi	r28, 0x2B	; 43
    57a6:	df 4f       	sbci	r29, 0xFF	; 255
    57a8:	18 81       	ld	r17, Y
    57aa:	c5 5d       	subi	r28, 0xD5	; 213
    57ac:	d0 40       	sbci	r29, 0x00	; 0
    57ae:	31 22       	and	r3, r17
    57b0:	ca 52       	subi	r28, 0x2A	; 42
    57b2:	df 4f       	sbci	r29, 0xFF	; 255
    57b4:	18 81       	ld	r17, Y
    57b6:	c6 5d       	subi	r28, 0xD6	; 214
    57b8:	d0 40       	sbci	r29, 0x00	; 0
    57ba:	61 22       	and	r6, r17
    57bc:	c9 52       	subi	r28, 0x29	; 41
    57be:	df 4f       	sbci	r29, 0xFF	; 255
    57c0:	78 80       	ld	r7, Y
    57c2:	c7 5d       	subi	r28, 0xD7	; 215
    57c4:	d0 40       	sbci	r29, 0x00	; 0
    57c6:	c6 52       	subi	r28, 0x26	; 38
    57c8:	df 4f       	sbci	r29, 0xFF	; 255
    57ca:	18 81       	ld	r17, Y
    57cc:	ca 5d       	subi	r28, 0xDA	; 218
    57ce:	d0 40       	sbci	r29, 0x00	; 0
    57d0:	71 22       	and	r7, r17
    57d2:	c8 52       	subi	r28, 0x28	; 40
    57d4:	df 4f       	sbci	r29, 0xFF	; 255
    57d6:	88 80       	ld	r8, Y
    57d8:	c8 5d       	subi	r28, 0xD8	; 216
    57da:	d0 40       	sbci	r29, 0x00	; 0
    57dc:	c5 52       	subi	r28, 0x25	; 37
    57de:	df 4f       	sbci	r29, 0xFF	; 255
    57e0:	18 81       	ld	r17, Y
    57e2:	cb 5d       	subi	r28, 0xDB	; 219
    57e4:	d0 40       	sbci	r29, 0x00	; 0
    57e6:	81 22       	and	r8, r17
    57e8:	c7 52       	subi	r28, 0x27	; 39
    57ea:	df 4f       	sbci	r29, 0xFF	; 255
    57ec:	b8 81       	ld	r27, Y
    57ee:	c9 5d       	subi	r28, 0xD9	; 217
    57f0:	d0 40       	sbci	r29, 0x00	; 0
    57f2:	c4 52       	subi	r28, 0x24	; 36
    57f4:	df 4f       	sbci	r29, 0xFF	; 255
    57f6:	18 81       	ld	r17, Y
    57f8:	cc 5d       	subi	r28, 0xDC	; 220
    57fa:	d0 40       	sbci	r29, 0x00	; 0
    57fc:	b1 23       	and	r27, r17
    57fe:	ae 26       	eor	r10, r30
    5800:	c7 53       	subi	r28, 0x37	; 55
    5802:	df 4f       	sbci	r29, 0xFF	; 255
    5804:	e8 81       	ld	r30, Y
    5806:	c9 5c       	subi	r28, 0xC9	; 201
    5808:	d0 40       	sbci	r29, 0x00	; 0
    580a:	be 26       	eor	r11, r30
    580c:	c2 24       	eor	r12, r2
    580e:	d3 24       	eor	r13, r3
    5810:	e6 24       	eor	r14, r6
    5812:	f7 24       	eor	r15, r7
    5814:	08 25       	eor	r16, r8
    5816:	c3 52       	subi	r28, 0x23	; 35
    5818:	df 4f       	sbci	r29, 0xFF	; 255
    581a:	18 81       	ld	r17, Y
    581c:	cd 5d       	subi	r28, 0xDD	; 221
    581e:	d0 40       	sbci	r29, 0x00	; 0
    5820:	1b 27       	eor	r17, r27
    5822:	8a 27       	eor	r24, r26
    5824:	9f 27       	eor	r25, r31
    5826:	0e 94 b2 34 	call	0x6964	; 0x6964 <__adddi3>
    582a:	a9 2c       	mov	r10, r9
    582c:	c5 53       	subi	r28, 0x35	; 53
    582e:	df 4f       	sbci	r29, 0xFF	; 255
    5830:	b8 80       	ld	r11, Y
    5832:	cb 5c       	subi	r28, 0xCB	; 203
    5834:	d0 40       	sbci	r29, 0x00	; 0
    5836:	c3 53       	subi	r28, 0x33	; 51
    5838:	df 4f       	sbci	r29, 0xFF	; 255
    583a:	c8 80       	ld	r12, Y
    583c:	cd 5c       	subi	r28, 0xCD	; 205
    583e:	d0 40       	sbci	r29, 0x00	; 0
    5840:	c2 53       	subi	r28, 0x32	; 50
    5842:	df 4f       	sbci	r29, 0xFF	; 255
    5844:	d8 80       	ld	r13, Y
    5846:	ce 5c       	subi	r28, 0xCE	; 206
    5848:	d0 40       	sbci	r29, 0x00	; 0
    584a:	c1 53       	subi	r28, 0x31	; 49
    584c:	df 4f       	sbci	r29, 0xFF	; 255
    584e:	e8 80       	ld	r14, Y
    5850:	cf 5c       	subi	r28, 0xCF	; 207
    5852:	d0 40       	sbci	r29, 0x00	; 0
    5854:	c0 53       	subi	r28, 0x30	; 48
    5856:	df 4f       	sbci	r29, 0xFF	; 255
    5858:	f8 80       	ld	r15, Y
    585a:	c0 5d       	subi	r28, 0xD0	; 208
    585c:	d0 40       	sbci	r29, 0x00	; 0
    585e:	cf 52       	subi	r28, 0x2F	; 47
    5860:	df 4f       	sbci	r29, 0xFF	; 255
    5862:	08 81       	ld	r16, Y
    5864:	c1 5d       	subi	r28, 0xD1	; 209
    5866:	d0 40       	sbci	r29, 0x00	; 0
    5868:	ce 52       	subi	r28, 0x2E	; 46
    586a:	df 4f       	sbci	r29, 0xFF	; 255
    586c:	18 81       	ld	r17, Y
    586e:	c2 5d       	subi	r28, 0xD2	; 210
    5870:	d0 40       	sbci	r29, 0x00	; 0
    5872:	0e 94 b2 34 	call	0x6964	; 0x6964 <__adddi3>
    5876:	c3 52       	subi	r28, 0x23	; 35
    5878:	df 4f       	sbci	r29, 0xFF	; 255
    587a:	28 83       	st	Y, r18
    587c:	cd 5d       	subi	r28, 0xDD	; 221
    587e:	d0 40       	sbci	r29, 0x00	; 0
    5880:	c2 52       	subi	r28, 0x22	; 34
    5882:	df 4f       	sbci	r29, 0xFF	; 255
    5884:	38 83       	st	Y, r19
    5886:	ce 5d       	subi	r28, 0xDE	; 222
    5888:	d0 40       	sbci	r29, 0x00	; 0
    588a:	c1 52       	subi	r28, 0x21	; 33
    588c:	df 4f       	sbci	r29, 0xFF	; 255
    588e:	48 83       	st	Y, r20
    5890:	cf 5d       	subi	r28, 0xDF	; 223
    5892:	d0 40       	sbci	r29, 0x00	; 0
    5894:	c0 52       	subi	r28, 0x20	; 32
    5896:	df 4f       	sbci	r29, 0xFF	; 255
    5898:	58 83       	st	Y, r21
    589a:	c0 5e       	subi	r28, 0xE0	; 224
    589c:	d0 40       	sbci	r29, 0x00	; 0
    589e:	cf 51       	subi	r28, 0x1F	; 31
    58a0:	df 4f       	sbci	r29, 0xFF	; 255
    58a2:	68 83       	st	Y, r22
    58a4:	c1 5e       	subi	r28, 0xE1	; 225
    58a6:	d0 40       	sbci	r29, 0x00	; 0
    58a8:	ce 51       	subi	r28, 0x1E	; 30
    58aa:	df 4f       	sbci	r29, 0xFF	; 255
    58ac:	78 83       	st	Y, r23
    58ae:	c2 5e       	subi	r28, 0xE2	; 226
    58b0:	d0 40       	sbci	r29, 0x00	; 0
    58b2:	cd 51       	subi	r28, 0x1D	; 29
    58b4:	df 4f       	sbci	r29, 0xFF	; 255
    58b6:	88 83       	st	Y, r24
    58b8:	c3 5e       	subi	r28, 0xE3	; 227
    58ba:	d0 40       	sbci	r29, 0x00	; 0
    58bc:	cc 51       	subi	r28, 0x1C	; 28
    58be:	df 4f       	sbci	r29, 0xFF	; 255
    58c0:	98 83       	st	Y, r25
    58c2:	c4 5e       	subi	r28, 0xE4	; 228
    58c4:	d0 40       	sbci	r29, 0x00	; 0
    58c6:	d2 01       	movw	r26, r4
    58c8:	2c 93       	st	X, r18
    58ca:	11 96       	adiw	r26, 0x01	; 1
    58cc:	3c 93       	st	X, r19
    58ce:	11 97       	sbiw	r26, 0x01	; 1
    58d0:	12 96       	adiw	r26, 0x02	; 2
    58d2:	4c 93       	st	X, r20
    58d4:	12 97       	sbiw	r26, 0x02	; 2
    58d6:	13 96       	adiw	r26, 0x03	; 3
    58d8:	5c 93       	st	X, r21
    58da:	13 97       	sbiw	r26, 0x03	; 3
    58dc:	14 96       	adiw	r26, 0x04	; 4
    58de:	6c 93       	st	X, r22
    58e0:	14 97       	sbiw	r26, 0x04	; 4
    58e2:	15 96       	adiw	r26, 0x05	; 5
    58e4:	7c 93       	st	X, r23
    58e6:	15 97       	sbiw	r26, 0x05	; 5
    58e8:	cd 51       	subi	r28, 0x1D	; 29
    58ea:	df 4f       	sbci	r29, 0xFF	; 255
    58ec:	f8 81       	ld	r31, Y
    58ee:	c3 5e       	subi	r28, 0xE3	; 227
    58f0:	d0 40       	sbci	r29, 0x00	; 0
    58f2:	16 96       	adiw	r26, 0x06	; 6
    58f4:	fc 93       	st	X, r31
    58f6:	16 97       	sbiw	r26, 0x06	; 6
    58f8:	cc 51       	subi	r28, 0x1C	; 28
    58fa:	df 4f       	sbci	r29, 0xFF	; 255
    58fc:	18 81       	ld	r17, Y
    58fe:	c4 5e       	subi	r28, 0xE4	; 228
    5900:	d0 40       	sbci	r29, 0x00	; 0
    5902:	17 96       	adiw	r26, 0x07	; 7
    5904:	1c 93       	st	X, r17
    5906:	17 97       	sbiw	r26, 0x07	; 7
		a[4] += t1;
    5908:	29 2d       	mov	r18, r9
    590a:	3b 2d       	mov	r19, r11
    590c:	a6 01       	movw	r20, r12
    590e:	b7 01       	movw	r22, r14
    5910:	80 2f       	mov	r24, r16
    5912:	ce 52       	subi	r28, 0x2E	; 46
    5914:	df 4f       	sbci	r29, 0xFF	; 255
    5916:	98 81       	ld	r25, Y
    5918:	c2 5d       	subi	r28, 0xD2	; 210
    591a:	d0 40       	sbci	r29, 0x00	; 0
    591c:	90 96       	adiw	r26, 0x20	; 32
    591e:	ac 90       	ld	r10, X
    5920:	90 97       	sbiw	r26, 0x20	; 32
    5922:	91 96       	adiw	r26, 0x21	; 33
    5924:	bc 90       	ld	r11, X
    5926:	91 97       	sbiw	r26, 0x21	; 33
    5928:	92 96       	adiw	r26, 0x22	; 34
    592a:	cc 90       	ld	r12, X
    592c:	92 97       	sbiw	r26, 0x22	; 34
    592e:	93 96       	adiw	r26, 0x23	; 35
    5930:	dc 90       	ld	r13, X
    5932:	93 97       	sbiw	r26, 0x23	; 35
    5934:	94 96       	adiw	r26, 0x24	; 36
    5936:	ec 90       	ld	r14, X
    5938:	94 97       	sbiw	r26, 0x24	; 36
    593a:	95 96       	adiw	r26, 0x25	; 37
    593c:	fc 90       	ld	r15, X
    593e:	95 97       	sbiw	r26, 0x25	; 37
    5940:	96 96       	adiw	r26, 0x26	; 38
    5942:	0c 91       	ld	r16, X
    5944:	96 97       	sbiw	r26, 0x26	; 38
    5946:	97 96       	adiw	r26, 0x27	; 39
    5948:	1c 91       	ld	r17, X
    594a:	97 97       	sbiw	r26, 0x27	; 39
    594c:	0e 94 b2 34 	call	0x6964	; 0x6964 <__adddi3>
    5950:	c7 53       	subi	r28, 0x37	; 55
    5952:	df 4f       	sbci	r29, 0xFF	; 255
    5954:	28 83       	st	Y, r18
    5956:	c9 5c       	subi	r28, 0xC9	; 201
    5958:	d0 40       	sbci	r29, 0x00	; 0
    595a:	c5 53       	subi	r28, 0x35	; 53
    595c:	df 4f       	sbci	r29, 0xFF	; 255
    595e:	38 83       	st	Y, r19
    5960:	cb 5c       	subi	r28, 0xCB	; 203
    5962:	d0 40       	sbci	r29, 0x00	; 0
    5964:	c3 53       	subi	r28, 0x33	; 51
    5966:	df 4f       	sbci	r29, 0xFF	; 255
    5968:	48 83       	st	Y, r20
    596a:	cd 5c       	subi	r28, 0xCD	; 205
    596c:	d0 40       	sbci	r29, 0x00	; 0
    596e:	c2 53       	subi	r28, 0x32	; 50
    5970:	df 4f       	sbci	r29, 0xFF	; 255
    5972:	58 83       	st	Y, r21
    5974:	ce 5c       	subi	r28, 0xCE	; 206
    5976:	d0 40       	sbci	r29, 0x00	; 0
    5978:	c1 53       	subi	r28, 0x31	; 49
    597a:	df 4f       	sbci	r29, 0xFF	; 255
    597c:	68 83       	st	Y, r22
    597e:	cf 5c       	subi	r28, 0xCF	; 207
    5980:	d0 40       	sbci	r29, 0x00	; 0
    5982:	27 2e       	mov	r2, r23
    5984:	c0 53       	subi	r28, 0x30	; 48
    5986:	df 4f       	sbci	r29, 0xFF	; 255
    5988:	88 83       	st	Y, r24
    598a:	c0 5d       	subi	r28, 0xD0	; 208
    598c:	d0 40       	sbci	r29, 0x00	; 0
    598e:	cf 52       	subi	r28, 0x2F	; 47
    5990:	df 4f       	sbci	r29, 0xFF	; 255
    5992:	98 83       	st	Y, r25
    5994:	c1 5d       	subi	r28, 0xD1	; 209
    5996:	d0 40       	sbci	r29, 0x00	; 0
    5998:	90 96       	adiw	r26, 0x20	; 32
    599a:	2c 93       	st	X, r18
    599c:	90 97       	sbiw	r26, 0x20	; 32
    599e:	91 96       	adiw	r26, 0x21	; 33
    59a0:	3c 93       	st	X, r19
    59a2:	91 97       	sbiw	r26, 0x21	; 33
    59a4:	92 96       	adiw	r26, 0x22	; 34
    59a6:	4c 93       	st	X, r20
    59a8:	92 97       	sbiw	r26, 0x22	; 34
    59aa:	93 96       	adiw	r26, 0x23	; 35
    59ac:	5c 93       	st	X, r21
    59ae:	93 97       	sbiw	r26, 0x23	; 35
    59b0:	94 96       	adiw	r26, 0x24	; 36
    59b2:	6c 93       	st	X, r22
    59b4:	94 97       	sbiw	r26, 0x24	; 36
    59b6:	95 96       	adiw	r26, 0x25	; 37
    59b8:	2c 92       	st	X, r2
    59ba:	95 97       	sbiw	r26, 0x25	; 37
    59bc:	c0 53       	subi	r28, 0x30	; 48
    59be:	df 4f       	sbci	r29, 0xFF	; 255
    59c0:	88 81       	ld	r24, Y
    59c2:	c0 5d       	subi	r28, 0xD0	; 208
    59c4:	d0 40       	sbci	r29, 0x00	; 0
    59c6:	96 96       	adiw	r26, 0x26	; 38
    59c8:	8c 93       	st	X, r24
    59ca:	96 97       	sbiw	r26, 0x26	; 38
    59cc:	cf 52       	subi	r28, 0x2F	; 47
    59ce:	df 4f       	sbci	r29, 0xFF	; 255
    59d0:	98 81       	ld	r25, Y
    59d2:	c1 5d       	subi	r28, 0xD1	; 209
    59d4:	d0 40       	sbci	r29, 0x00	; 0
    59d6:	97 96       	adiw	r26, 0x27	; 39
    59d8:	9c 93       	st	X, r25
	do{
		w[16-i] = change_endian64(*((const uint64_t*)block));
		block = (uint8_t*)block + 8;
	}while(--i);
	memcpy(a, ctx->h, 8*8);
	for(i=0; i<80; ++i){
    59da:	c9 51       	subi	r28, 0x19	; 25
    59dc:	df 4f       	sbci	r29, 0xFF	; 255
    59de:	a8 81       	ld	r26, Y
    59e0:	c7 5e       	subi	r28, 0xE7	; 231
    59e2:	d0 40       	sbci	r29, 0x00	; 0
    59e4:	af 5f       	subi	r26, 0xFF	; 255
    59e6:	c9 51       	subi	r28, 0x19	; 25
    59e8:	df 4f       	sbci	r29, 0xFF	; 255
    59ea:	a8 83       	st	Y, r26
    59ec:	c7 5e       	subi	r28, 0xE7	; 231
    59ee:	d0 40       	sbci	r29, 0x00	; 0
    59f0:	cb 51       	subi	r28, 0x1B	; 27
    59f2:	df 4f       	sbci	r29, 0xFF	; 255
    59f4:	e8 81       	ld	r30, Y
    59f6:	f9 81       	ldd	r31, Y+1	; 0x01
    59f8:	c5 5e       	subi	r28, 0xE5	; 229
    59fa:	d0 40       	sbci	r29, 0x00	; 0
    59fc:	38 96       	adiw	r30, 0x08	; 8
    59fe:	cb 51       	subi	r28, 0x1B	; 27
    5a00:	df 4f       	sbci	r29, 0xFF	; 255
    5a02:	f9 83       	std	Y+1, r31	; 0x01
    5a04:	e8 83       	st	Y, r30
    5a06:	c5 5e       	subi	r28, 0xE5	; 229
    5a08:	d0 40       	sbci	r29, 0x00	; 0
    5a0a:	c8 51       	subi	r28, 0x18	; 24
    5a0c:	df 4f       	sbci	r29, 0xFF	; 255
    5a0e:	88 81       	ld	r24, Y
    5a10:	99 81       	ldd	r25, Y+1	; 0x01
    5a12:	c8 5e       	subi	r28, 0xE8	; 232
    5a14:	d0 40       	sbci	r29, 0x00	; 0
    5a16:	08 96       	adiw	r24, 0x08	; 8
    5a18:	c8 51       	subi	r28, 0x18	; 24
    5a1a:	df 4f       	sbci	r29, 0xFF	; 255
    5a1c:	99 83       	std	Y+1, r25	; 0x01
    5a1e:	88 83       	st	Y, r24
    5a20:	c8 5e       	subi	r28, 0xE8	; 232
    5a22:	d0 40       	sbci	r29, 0x00	; 0
    5a24:	a0 35       	cpi	r26, 0x50	; 80
    5a26:	09 f4       	brne	.+2      	; 0x5a2a <sha2_large_common_nextBlock+0x107c>
    5a28:	6c c0       	rjmp	.+216    	; 0x5b02 <sha2_large_common_nextBlock+0x1154>
		if(i<16){
    5a2a:	c9 51       	subi	r28, 0x19	; 25
    5a2c:	df 4f       	sbci	r29, 0xFF	; 255
    5a2e:	98 81       	ld	r25, Y
    5a30:	c7 5e       	subi	r28, 0xE7	; 231
    5a32:	d0 40       	sbci	r29, 0x00	; 0
    5a34:	90 31       	cpi	r25, 0x10	; 16
    5a36:	08 f0       	brcs	.+2      	; 0x5a3a <sha2_large_common_nextBlock+0x108c>
    5a38:	fd c8       	rjmp	.-3590   	; 0x4c34 <sha2_large_common_nextBlock+0x286>
			wx=w[i];
    5a3a:	cb 51       	subi	r28, 0x1B	; 27
    5a3c:	df 4f       	sbci	r29, 0xFF	; 255
    5a3e:	a8 81       	ld	r26, Y
    5a40:	b9 81       	ldd	r27, Y+1	; 0x01
    5a42:	c5 5e       	subi	r28, 0xE5	; 229
    5a44:	d0 40       	sbci	r29, 0x00	; 0
    5a46:	bc 91       	ld	r27, X
    5a48:	ce 52       	subi	r28, 0x2E	; 46
    5a4a:	df 4f       	sbci	r29, 0xFF	; 255
    5a4c:	b8 83       	st	Y, r27
    5a4e:	c2 5d       	subi	r28, 0xD2	; 210
    5a50:	d0 40       	sbci	r29, 0x00	; 0
    5a52:	cb 51       	subi	r28, 0x1B	; 27
    5a54:	df 4f       	sbci	r29, 0xFF	; 255
    5a56:	e8 81       	ld	r30, Y
    5a58:	f9 81       	ldd	r31, Y+1	; 0x01
    5a5a:	c5 5e       	subi	r28, 0xE5	; 229
    5a5c:	d0 40       	sbci	r29, 0x00	; 0
    5a5e:	f1 81       	ldd	r31, Z+1	; 0x01
    5a60:	cd 52       	subi	r28, 0x2D	; 45
    5a62:	df 4f       	sbci	r29, 0xFF	; 255
    5a64:	f8 83       	st	Y, r31
    5a66:	c3 5d       	subi	r28, 0xD3	; 211
    5a68:	d0 40       	sbci	r29, 0x00	; 0
    5a6a:	cb 51       	subi	r28, 0x1B	; 27
    5a6c:	df 4f       	sbci	r29, 0xFF	; 255
    5a6e:	a8 81       	ld	r26, Y
    5a70:	b9 81       	ldd	r27, Y+1	; 0x01
    5a72:	c5 5e       	subi	r28, 0xE5	; 229
    5a74:	d0 40       	sbci	r29, 0x00	; 0
    5a76:	12 96       	adiw	r26, 0x02	; 2
    5a78:	bc 91       	ld	r27, X
    5a7a:	cc 52       	subi	r28, 0x2C	; 44
    5a7c:	df 4f       	sbci	r29, 0xFF	; 255
    5a7e:	b8 83       	st	Y, r27
    5a80:	c4 5d       	subi	r28, 0xD4	; 212
    5a82:	d0 40       	sbci	r29, 0x00	; 0
    5a84:	cb 51       	subi	r28, 0x1B	; 27
    5a86:	df 4f       	sbci	r29, 0xFF	; 255
    5a88:	e8 81       	ld	r30, Y
    5a8a:	f9 81       	ldd	r31, Y+1	; 0x01
    5a8c:	c5 5e       	subi	r28, 0xE5	; 229
    5a8e:	d0 40       	sbci	r29, 0x00	; 0
    5a90:	f3 81       	ldd	r31, Z+3	; 0x03
    5a92:	cb 52       	subi	r28, 0x2B	; 43
    5a94:	df 4f       	sbci	r29, 0xFF	; 255
    5a96:	f8 83       	st	Y, r31
    5a98:	c5 5d       	subi	r28, 0xD5	; 213
    5a9a:	d0 40       	sbci	r29, 0x00	; 0
    5a9c:	cb 51       	subi	r28, 0x1B	; 27
    5a9e:	df 4f       	sbci	r29, 0xFF	; 255
    5aa0:	a8 81       	ld	r26, Y
    5aa2:	b9 81       	ldd	r27, Y+1	; 0x01
    5aa4:	c5 5e       	subi	r28, 0xE5	; 229
    5aa6:	d0 40       	sbci	r29, 0x00	; 0
    5aa8:	14 96       	adiw	r26, 0x04	; 4
    5aaa:	bc 91       	ld	r27, X
    5aac:	ca 52       	subi	r28, 0x2A	; 42
    5aae:	df 4f       	sbci	r29, 0xFF	; 255
    5ab0:	b8 83       	st	Y, r27
    5ab2:	c6 5d       	subi	r28, 0xD6	; 214
    5ab4:	d0 40       	sbci	r29, 0x00	; 0
    5ab6:	cb 51       	subi	r28, 0x1B	; 27
    5ab8:	df 4f       	sbci	r29, 0xFF	; 255
    5aba:	e8 81       	ld	r30, Y
    5abc:	f9 81       	ldd	r31, Y+1	; 0x01
    5abe:	c5 5e       	subi	r28, 0xE5	; 229
    5ac0:	d0 40       	sbci	r29, 0x00	; 0
    5ac2:	f5 81       	ldd	r31, Z+5	; 0x05
    5ac4:	c9 52       	subi	r28, 0x29	; 41
    5ac6:	df 4f       	sbci	r29, 0xFF	; 255
    5ac8:	f8 83       	st	Y, r31
    5aca:	c7 5d       	subi	r28, 0xD7	; 215
    5acc:	d0 40       	sbci	r29, 0x00	; 0
    5ace:	cb 51       	subi	r28, 0x1B	; 27
    5ad0:	df 4f       	sbci	r29, 0xFF	; 255
    5ad2:	a8 81       	ld	r26, Y
    5ad4:	b9 81       	ldd	r27, Y+1	; 0x01
    5ad6:	c5 5e       	subi	r28, 0xE5	; 229
    5ad8:	d0 40       	sbci	r29, 0x00	; 0
    5ada:	16 96       	adiw	r26, 0x06	; 6
    5adc:	bc 91       	ld	r27, X
    5ade:	c8 52       	subi	r28, 0x28	; 40
    5ae0:	df 4f       	sbci	r29, 0xFF	; 255
    5ae2:	b8 83       	st	Y, r27
    5ae4:	c8 5d       	subi	r28, 0xD8	; 216
    5ae6:	d0 40       	sbci	r29, 0x00	; 0
    5ae8:	cb 51       	subi	r28, 0x1B	; 27
    5aea:	df 4f       	sbci	r29, 0xFF	; 255
    5aec:	e8 81       	ld	r30, Y
    5aee:	f9 81       	ldd	r31, Y+1	; 0x01
    5af0:	c5 5e       	subi	r28, 0xE5	; 229
    5af2:	d0 40       	sbci	r29, 0x00	; 0
    5af4:	f7 81       	ldd	r31, Z+7	; 0x07
    5af6:	c7 52       	subi	r28, 0x27	; 39
    5af8:	df 4f       	sbci	r29, 0xFF	; 255
    5afa:	f8 83       	st	Y, r31
    5afc:	c9 5d       	subi	r28, 0xD9	; 217
    5afe:	d0 40       	sbci	r29, 0x00	; 0
    5b00:	a6 ca       	rjmp	.-2740   	; 0x504e <sha2_large_common_nextBlock+0x6a0>
    5b02:	97 e0       	ldi	r25, 0x07	; 7
    5b04:	99 2e       	mov	r9, r25
    5b06:	79 2c       	mov	r7, r9
    5b08:	cf 50       	subi	r28, 0x0F	; 15
    5b0a:	df 4f       	sbci	r29, 0xFF	; 255
    5b0c:	88 80       	ld	r8, Y
    5b0e:	99 80       	ldd	r9, Y+1	; 0x01
    5b10:	c1 5f       	subi	r28, 0xF1	; 241
    5b12:	d0 40       	sbci	r29, 0x00	; 0
    5b14:	a7 2d       	mov	r26, r7
    5b16:	b0 e0       	ldi	r27, 0x00	; 0
    5b18:	aa 0f       	add	r26, r26
    5b1a:	bb 1f       	adc	r27, r27
    5b1c:	aa 0f       	add	r26, r26
    5b1e:	bb 1f       	adc	r27, r27
    5b20:	aa 0f       	add	r26, r26
    5b22:	bb 1f       	adc	r27, r27
    5b24:	f4 01       	movw	r30, r8
    5b26:	ea 0f       	add	r30, r26
    5b28:	fb 1f       	adc	r31, r27
		a[0] = t1 + t2;
		a[4] += t1;
	}
	i=7;
	do{
		ctx->h[i] += a[i];
    5b2a:	a4 0d       	add	r26, r4
    5b2c:	b5 1d       	adc	r27, r5
    5b2e:	20 81       	ld	r18, Z
    5b30:	31 81       	ldd	r19, Z+1	; 0x01
    5b32:	42 81       	ldd	r20, Z+2	; 0x02
    5b34:	53 81       	ldd	r21, Z+3	; 0x03
    5b36:	64 81       	ldd	r22, Z+4	; 0x04
    5b38:	75 81       	ldd	r23, Z+5	; 0x05
    5b3a:	86 81       	ldd	r24, Z+6	; 0x06
    5b3c:	97 81       	ldd	r25, Z+7	; 0x07
    5b3e:	ac 90       	ld	r10, X
    5b40:	11 96       	adiw	r26, 0x01	; 1
    5b42:	bc 90       	ld	r11, X
    5b44:	11 97       	sbiw	r26, 0x01	; 1
    5b46:	12 96       	adiw	r26, 0x02	; 2
    5b48:	cc 90       	ld	r12, X
    5b4a:	12 97       	sbiw	r26, 0x02	; 2
    5b4c:	13 96       	adiw	r26, 0x03	; 3
    5b4e:	dc 90       	ld	r13, X
    5b50:	13 97       	sbiw	r26, 0x03	; 3
    5b52:	14 96       	adiw	r26, 0x04	; 4
    5b54:	ec 90       	ld	r14, X
    5b56:	14 97       	sbiw	r26, 0x04	; 4
    5b58:	15 96       	adiw	r26, 0x05	; 5
    5b5a:	fc 90       	ld	r15, X
    5b5c:	15 97       	sbiw	r26, 0x05	; 5
    5b5e:	16 96       	adiw	r26, 0x06	; 6
    5b60:	0c 91       	ld	r16, X
    5b62:	16 97       	sbiw	r26, 0x06	; 6
    5b64:	17 96       	adiw	r26, 0x07	; 7
    5b66:	1c 91       	ld	r17, X
    5b68:	fd d6       	rcall	.+3578   	; 0x6964 <__adddi3>
    5b6a:	20 83       	st	Z, r18
    5b6c:	31 83       	std	Z+1, r19	; 0x01
    5b6e:	42 83       	std	Z+2, r20	; 0x02
    5b70:	53 83       	std	Z+3, r21	; 0x03
    5b72:	64 83       	std	Z+4, r22	; 0x04
    5b74:	75 83       	std	Z+5, r23	; 0x05
    5b76:	86 83       	std	Z+6, r24	; 0x06
    5b78:	97 83       	std	Z+7, r25	; 0x07
	}while(i--);
    5b7a:	7a 94       	dec	r7
    5b7c:	9f ef       	ldi	r25, 0xFF	; 255
    5b7e:	79 12       	cpse	r7, r25
    5b80:	c9 cf       	rjmp	.-110    	; 0x5b14 <sha2_large_common_nextBlock+0x1166>
	ctx->length += 1;
    5b82:	cf 50       	subi	r28, 0x0F	; 15
    5b84:	df 4f       	sbci	r29, 0xFF	; 255
    5b86:	e8 81       	ld	r30, Y
    5b88:	f9 81       	ldd	r31, Y+1	; 0x01
    5b8a:	c1 5f       	subi	r28, 0xF1	; 241
    5b8c:	d0 40       	sbci	r29, 0x00	; 0
    5b8e:	e0 5c       	subi	r30, 0xC0	; 192
    5b90:	ff 4f       	sbci	r31, 0xFF	; 255
    5b92:	80 81       	ld	r24, Z
    5b94:	91 81       	ldd	r25, Z+1	; 0x01
    5b96:	a2 81       	ldd	r26, Z+2	; 0x02
    5b98:	b3 81       	ldd	r27, Z+3	; 0x03
    5b9a:	01 96       	adiw	r24, 0x01	; 1
    5b9c:	a1 1d       	adc	r26, r1
    5b9e:	b1 1d       	adc	r27, r1
    5ba0:	80 83       	st	Z, r24
    5ba2:	91 83       	std	Z+1, r25	; 0x01
    5ba4:	a2 83       	std	Z+2, r26	; 0x02
    5ba6:	b3 83       	std	Z+3, r27	; 0x03
}
    5ba8:	ce 50       	subi	r28, 0x0E	; 14
    5baa:	df 4f       	sbci	r29, 0xFF	; 255
    5bac:	0f b6       	in	r0, 0x3f	; 63
    5bae:	f8 94       	cli
    5bb0:	de bf       	out	0x3e, r29	; 62
    5bb2:	0f be       	out	0x3f, r0	; 63
    5bb4:	cd bf       	out	0x3d, r28	; 61
    5bb6:	df 91       	pop	r29
    5bb8:	cf 91       	pop	r28
    5bba:	1f 91       	pop	r17
    5bbc:	0f 91       	pop	r16
    5bbe:	ff 90       	pop	r15
    5bc0:	ef 90       	pop	r14
    5bc2:	df 90       	pop	r13
    5bc4:	cf 90       	pop	r12
    5bc6:	bf 90       	pop	r11
    5bc8:	af 90       	pop	r10
    5bca:	9f 90       	pop	r9
    5bcc:	8f 90       	pop	r8
    5bce:	7f 90       	pop	r7
    5bd0:	6f 90       	pop	r6
    5bd2:	5f 90       	pop	r5
    5bd4:	4f 90       	pop	r4
    5bd6:	3f 90       	pop	r3
    5bd8:	2f 90       	pop	r2
    5bda:	08 95       	ret

00005bdc <sha2_large_common_lastBlock>:

void sha2_large_common_lastBlock(sha2_large_common_ctx_t *ctx, const void *block, uint16_t length_b){
    5bdc:	2f 92       	push	r2
    5bde:	3f 92       	push	r3
    5be0:	4f 92       	push	r4
    5be2:	5f 92       	push	r5
    5be4:	6f 92       	push	r6
    5be6:	7f 92       	push	r7
    5be8:	8f 92       	push	r8
    5bea:	9f 92       	push	r9
    5bec:	af 92       	push	r10
    5bee:	bf 92       	push	r11
    5bf0:	cf 92       	push	r12
    5bf2:	df 92       	push	r13
    5bf4:	ef 92       	push	r14
    5bf6:	ff 92       	push	r15
    5bf8:	0f 93       	push	r16
    5bfa:	1f 93       	push	r17
    5bfc:	cf 93       	push	r28
    5bfe:	df 93       	push	r29
    5c00:	cd b7       	in	r28, 0x3d	; 61
    5c02:	de b7       	in	r29, 0x3e	; 62
    5c04:	cb 58       	subi	r28, 0x8B	; 139
    5c06:	d1 09       	sbc	r29, r1
    5c08:	0f b6       	in	r0, 0x3f	; 63
    5c0a:	f8 94       	cli
    5c0c:	de bf       	out	0x3e, r29	; 62
    5c0e:	0f be       	out	0x3f, r0	; 63
    5c10:	cd bf       	out	0x3d, r28	; 61
    5c12:	c6 57       	subi	r28, 0x76	; 118
    5c14:	df 4f       	sbci	r29, 0xFF	; 255
    5c16:	99 83       	std	Y+1, r25	; 0x01
    5c18:	88 83       	st	Y, r24
    5c1a:	ca 58       	subi	r28, 0x8A	; 138
    5c1c:	d0 40       	sbci	r29, 0x00	; 0
    5c1e:	c8 57       	subi	r28, 0x78	; 120
    5c20:	df 4f       	sbci	r29, 0xFF	; 255
    5c22:	79 83       	std	Y+1, r23	; 0x01
    5c24:	68 83       	st	Y, r22
    5c26:	c8 58       	subi	r28, 0x88	; 136
    5c28:	d0 40       	sbci	r29, 0x00	; 0
    5c2a:	ca 57       	subi	r28, 0x7A	; 122
    5c2c:	df 4f       	sbci	r29, 0xFF	; 255
    5c2e:	59 83       	std	Y+1, r21	; 0x01
    5c30:	48 83       	st	Y, r20
    5c32:	c6 58       	subi	r28, 0x86	; 134
    5c34:	d0 40       	sbci	r29, 0x00	; 0
	while(length_b >= 1024){
    5c36:	41 15       	cp	r20, r1
    5c38:	24 e0       	ldi	r18, 0x04	; 4
    5c3a:	52 07       	cpc	r21, r18
    5c3c:	d8 f1       	brcs	.+118    	; 0x5cb4 <sha2_large_common_lastBlock+0xd8>
    5c3e:	7a 01       	movw	r14, r20
    5c40:	8b 01       	movw	r16, r22
    5c42:	6c 01       	movw	r12, r24
		sha2_large_common_nextBlock(ctx, block);
    5c44:	b8 01       	movw	r22, r16
    5c46:	c6 01       	movw	r24, r12
    5c48:	0e 94 d7 24 	call	0x49ae	; 0x49ae <sha2_large_common_nextBlock>
		block = (uint8_t*)block + 1024/8;
    5c4c:	00 58       	subi	r16, 0x80	; 128
    5c4e:	1f 4f       	sbci	r17, 0xFF	; 255
		length_b -= 1024;
    5c50:	34 e0       	ldi	r19, 0x04	; 4
    5c52:	f3 1a       	sub	r15, r19
	}while(i--);
	ctx->length += 1;
}

void sha2_large_common_lastBlock(sha2_large_common_ctx_t *ctx, const void *block, uint16_t length_b){
	while(length_b >= 1024){
    5c54:	e1 14       	cp	r14, r1
    5c56:	84 e0       	ldi	r24, 0x04	; 4
    5c58:	f8 06       	cpc	r15, r24
    5c5a:	a0 f7       	brcc	.-24     	; 0x5c44 <sha2_large_common_lastBlock+0x68>
    5c5c:	ca 57       	subi	r28, 0x7A	; 122
    5c5e:	df 4f       	sbci	r29, 0xFF	; 255
    5c60:	88 81       	ld	r24, Y
    5c62:	99 81       	ldd	r25, Y+1	; 0x01
    5c64:	c6 58       	subi	r28, 0x86	; 134
    5c66:	d0 40       	sbci	r29, 0x00	; 0
    5c68:	94 50       	subi	r25, 0x04	; 4
    5c6a:	89 2f       	mov	r24, r25
    5c6c:	99 27       	eor	r25, r25
    5c6e:	86 95       	lsr	r24
    5c70:	86 95       	lsr	r24
    5c72:	01 96       	adiw	r24, 0x01	; 1
    5c74:	96 95       	lsr	r25
    5c76:	98 2f       	mov	r25, r24
    5c78:	88 27       	eor	r24, r24
    5c7a:	97 95       	ror	r25
    5c7c:	87 95       	ror	r24
    5c7e:	c8 57       	subi	r28, 0x78	; 120
    5c80:	df 4f       	sbci	r29, 0xFF	; 255
    5c82:	e8 81       	ld	r30, Y
    5c84:	f9 81       	ldd	r31, Y+1	; 0x01
    5c86:	c8 58       	subi	r28, 0x88	; 136
    5c88:	d0 40       	sbci	r29, 0x00	; 0
    5c8a:	e8 0f       	add	r30, r24
    5c8c:	f9 1f       	adc	r31, r25
    5c8e:	c8 57       	subi	r28, 0x78	; 120
    5c90:	df 4f       	sbci	r29, 0xFF	; 255
    5c92:	f9 83       	std	Y+1, r31	; 0x01
    5c94:	e8 83       	st	Y, r30
    5c96:	c8 58       	subi	r28, 0x88	; 136
    5c98:	d0 40       	sbci	r29, 0x00	; 0
    5c9a:	ca 57       	subi	r28, 0x7A	; 122
    5c9c:	df 4f       	sbci	r29, 0xFF	; 255
    5c9e:	28 81       	ld	r18, Y
    5ca0:	39 81       	ldd	r19, Y+1	; 0x01
    5ca2:	c6 58       	subi	r28, 0x86	; 134
    5ca4:	d0 40       	sbci	r29, 0x00	; 0
    5ca6:	33 70       	andi	r19, 0x03	; 3
    5ca8:	ca 57       	subi	r28, 0x7A	; 122
    5caa:	df 4f       	sbci	r29, 0xFF	; 255
    5cac:	39 83       	std	Y+1, r19	; 0x01
    5cae:	28 83       	st	Y, r18
    5cb0:	c6 58       	subi	r28, 0x86	; 134
    5cb2:	d0 40       	sbci	r29, 0x00	; 0
		block = (uint8_t*)block + 1024/8;
		length_b -= 1024;
	}
	uint8_t buffer[1024/8];
	uint64_t len;
	len = ((uint64_t)ctx->length)*1024LL + length_b;
    5cb4:	c6 57       	subi	r28, 0x76	; 118
    5cb6:	df 4f       	sbci	r29, 0xFF	; 255
    5cb8:	e8 81       	ld	r30, Y
    5cba:	f9 81       	ldd	r31, Y+1	; 0x01
    5cbc:	ca 58       	subi	r28, 0x8A	; 138
    5cbe:	d0 40       	sbci	r29, 0x00	; 0
    5cc0:	e0 5c       	subi	r30, 0xC0	; 192
    5cc2:	ff 4f       	sbci	r31, 0xFF	; 255
    5cc4:	80 80       	ld	r8, Z
    5cc6:	91 80       	ldd	r9, Z+1	; 0x01
    5cc8:	a2 80       	ldd	r10, Z+2	; 0x02
    5cca:	b3 80       	ldd	r11, Z+3	; 0x03
    5ccc:	94 01       	movw	r18, r8
    5cce:	a5 01       	movw	r20, r10
    5cd0:	60 e0       	ldi	r22, 0x00	; 0
    5cd2:	70 e0       	ldi	r23, 0x00	; 0
    5cd4:	80 e0       	ldi	r24, 0x00	; 0
    5cd6:	90 e0       	ldi	r25, 0x00	; 0
    5cd8:	0a e0       	ldi	r16, 0x0A	; 10
    5cda:	f2 d5       	rcall	.+3044   	; 0x68c0 <__ashldi3>
    5cdc:	ca 57       	subi	r28, 0x7A	; 122
    5cde:	df 4f       	sbci	r29, 0xFF	; 255
    5ce0:	e8 81       	ld	r30, Y
    5ce2:	f9 81       	ldd	r31, Y+1	; 0x01
    5ce4:	c6 58       	subi	r28, 0x86	; 134
    5ce6:	d0 40       	sbci	r29, 0x00	; 0
    5ce8:	5f 01       	movw	r10, r30
    5cea:	c1 2c       	mov	r12, r1
    5cec:	d1 2c       	mov	r13, r1
    5cee:	e1 2c       	mov	r14, r1
    5cf0:	f1 2c       	mov	r15, r1
    5cf2:	00 e0       	ldi	r16, 0x00	; 0
    5cf4:	10 e0       	ldi	r17, 0x00	; 0
    5cf6:	36 d6       	rcall	.+3180   	; 0x6964 <__adddi3>
    5cf8:	e2 2f       	mov	r30, r18
    5cfa:	cc 57       	subi	r28, 0x7C	; 124
    5cfc:	df 4f       	sbci	r29, 0xFF	; 255
    5cfe:	38 83       	st	Y, r19
    5d00:	c4 58       	subi	r28, 0x84	; 132
    5d02:	d0 40       	sbci	r29, 0x00	; 0
    5d04:	14 2f       	mov	r17, r20
    5d06:	b5 2f       	mov	r27, r21
    5d08:	a6 2f       	mov	r26, r22
    5d0a:	cb 57       	subi	r28, 0x7B	; 123
    5d0c:	df 4f       	sbci	r29, 0xFF	; 255
    5d0e:	78 83       	st	Y, r23
    5d10:	c5 58       	subi	r28, 0x85	; 133
    5d12:	d0 40       	sbci	r29, 0x00	; 0
    5d14:	1c 01       	movw	r2, r24
    5d16:	f8 e0       	ldi	r31, 0x08	; 8
};


static const
uint64_t change_endian64(uint64_t x){
	uint64_t r=0;
    5d18:	41 2c       	mov	r4, r1
    5d1a:	51 2c       	mov	r5, r1
    5d1c:	61 2c       	mov	r6, r1
    5d1e:	71 2c       	mov	r7, r1
    5d20:	81 2c       	mov	r8, r1
    5d22:	91 2c       	mov	r9, r1
    5d24:	a1 2c       	mov	r10, r1
	uint8_t i=8;
	do{
		r <<= 8;
    5d26:	2f 2d       	mov	r18, r15
    5d28:	34 2d       	mov	r19, r4
    5d2a:	45 2d       	mov	r20, r5
    5d2c:	56 2d       	mov	r21, r6
    5d2e:	67 2d       	mov	r22, r7
    5d30:	78 2d       	mov	r23, r8
    5d32:	89 2d       	mov	r24, r9
    5d34:	9a 2d       	mov	r25, r10
    5d36:	08 e0       	ldi	r16, 0x08	; 8
    5d38:	c3 d5       	rcall	.+2950   	; 0x68c0 <__ashldi3>
    5d3a:	cf 57       	subi	r28, 0x7F	; 127
    5d3c:	df 4f       	sbci	r29, 0xFF	; 255
    5d3e:	38 83       	st	Y, r19
    5d40:	c1 58       	subi	r28, 0x81	; 129
    5d42:	d0 40       	sbci	r29, 0x00	; 0
    5d44:	b4 2e       	mov	r11, r20
    5d46:	c5 2e       	mov	r12, r21
    5d48:	d6 2e       	mov	r13, r22
    5d4a:	e7 2e       	mov	r14, r23
    5d4c:	ce 57       	subi	r28, 0x7E	; 126
    5d4e:	df 4f       	sbci	r29, 0xFF	; 255
    5d50:	88 83       	st	Y, r24
    5d52:	c2 58       	subi	r28, 0x82	; 130
    5d54:	d0 40       	sbci	r29, 0x00	; 0
    5d56:	cd 57       	subi	r28, 0x7D	; 125
    5d58:	df 4f       	sbci	r29, 0xFF	; 255
    5d5a:	98 83       	st	Y, r25
    5d5c:	c3 58       	subi	r28, 0x83	; 131
    5d5e:	d0 40       	sbci	r29, 0x00	; 0
		r |= 0xff&x;
    5d60:	f2 2e       	mov	r15, r18
    5d62:	fe 2a       	or	r15, r30
    5d64:	43 2e       	mov	r4, r19
    5d66:	54 2e       	mov	r5, r20
    5d68:	36 01       	movw	r6, r12
    5d6a:	87 2e       	mov	r8, r23
    5d6c:	98 2e       	mov	r9, r24
    5d6e:	a9 2e       	mov	r10, r25
		x >>=8;
    5d70:	2e 2f       	mov	r18, r30
    5d72:	cc 57       	subi	r28, 0x7C	; 124
    5d74:	df 4f       	sbci	r29, 0xFF	; 255
    5d76:	38 81       	ld	r19, Y
    5d78:	c4 58       	subi	r28, 0x84	; 132
    5d7a:	d0 40       	sbci	r29, 0x00	; 0
    5d7c:	41 2f       	mov	r20, r17
    5d7e:	5b 2f       	mov	r21, r27
    5d80:	6a 2f       	mov	r22, r26
    5d82:	cb 57       	subi	r28, 0x7B	; 123
    5d84:	df 4f       	sbci	r29, 0xFF	; 255
    5d86:	78 81       	ld	r23, Y
    5d88:	c5 58       	subi	r28, 0x85	; 133
    5d8a:	d0 40       	sbci	r29, 0x00	; 0
    5d8c:	c1 01       	movw	r24, r2
    5d8e:	b3 d5       	rcall	.+2918   	; 0x68f6 <__lshrdi3>
    5d90:	e2 2f       	mov	r30, r18
    5d92:	cc 57       	subi	r28, 0x7C	; 124
    5d94:	df 4f       	sbci	r29, 0xFF	; 255
    5d96:	38 83       	st	Y, r19
    5d98:	c4 58       	subi	r28, 0x84	; 132
    5d9a:	d0 40       	sbci	r29, 0x00	; 0
    5d9c:	14 2f       	mov	r17, r20
    5d9e:	b5 2f       	mov	r27, r21
    5da0:	a6 2f       	mov	r26, r22
    5da2:	cb 57       	subi	r28, 0x7B	; 123
    5da4:	df 4f       	sbci	r29, 0xFF	; 255
    5da6:	78 83       	st	Y, r23
    5da8:	c5 58       	subi	r28, 0x85	; 133
    5daa:	d0 40       	sbci	r29, 0x00	; 0
    5dac:	1c 01       	movw	r2, r24
    5dae:	f1 50       	subi	r31, 0x01	; 1
	}while(--i);
    5db0:	09 f0       	breq	.+2      	; 0x5db4 <sha2_large_common_lastBlock+0x1d8>
    5db2:	b9 cf       	rjmp	.-142    	; 0x5d26 <sha2_large_common_lastBlock+0x14a>
	}
	uint8_t buffer[1024/8];
	uint64_t len;
	len = ((uint64_t)ctx->length)*1024LL + length_b;
	len = change_endian64(len);
	memset(buffer, 0, 1024/8);
    5db4:	8e 01       	movw	r16, r28
    5db6:	0f 5f       	subi	r16, 0xFF	; 255
    5db8:	1f 4f       	sbci	r17, 0xFF	; 255
    5dba:	80 e8       	ldi	r24, 0x80	; 128
    5dbc:	f8 01       	movw	r30, r16
    5dbe:	11 92       	st	Z+, r1
    5dc0:	8a 95       	dec	r24
    5dc2:	e9 f7       	brne	.-6      	; 0x5dbe <sha2_large_common_lastBlock+0x1e2>
	memcpy(buffer, block, (length_b+7)/8);
    5dc4:	ca 57       	subi	r28, 0x7A	; 122
    5dc6:	df 4f       	sbci	r29, 0xFF	; 255
    5dc8:	48 81       	ld	r20, Y
    5dca:	59 81       	ldd	r21, Y+1	; 0x01
    5dcc:	c6 58       	subi	r28, 0x86	; 134
    5dce:	d0 40       	sbci	r29, 0x00	; 0
    5dd0:	49 5f       	subi	r20, 0xF9	; 249
    5dd2:	5f 4f       	sbci	r21, 0xFF	; 255
    5dd4:	56 95       	lsr	r21
    5dd6:	47 95       	ror	r20
    5dd8:	56 95       	lsr	r21
    5dda:	47 95       	ror	r20
    5ddc:	56 95       	lsr	r21
    5dde:	47 95       	ror	r20
    5de0:	c8 57       	subi	r28, 0x78	; 120
    5de2:	df 4f       	sbci	r29, 0xFF	; 255
    5de4:	68 81       	ld	r22, Y
    5de6:	79 81       	ldd	r23, Y+1	; 0x01
    5de8:	c8 58       	subi	r28, 0x88	; 136
    5dea:	d0 40       	sbci	r29, 0x00	; 0
    5dec:	c8 01       	movw	r24, r16
    5dee:	25 d6       	rcall	.+3146   	; 0x6a3a <memcpy>
	buffer[length_b/8] |= 0x80>>(length_b%8);
    5df0:	ca 57       	subi	r28, 0x7A	; 122
    5df2:	df 4f       	sbci	r29, 0xFF	; 255
    5df4:	e8 81       	ld	r30, Y
    5df6:	f9 81       	ldd	r31, Y+1	; 0x01
    5df8:	c6 58       	subi	r28, 0x86	; 134
    5dfa:	d0 40       	sbci	r29, 0x00	; 0
    5dfc:	f6 95       	lsr	r31
    5dfe:	e7 95       	ror	r30
    5e00:	f6 95       	lsr	r31
    5e02:	e7 95       	ror	r30
    5e04:	f6 95       	lsr	r31
    5e06:	e7 95       	ror	r30
    5e08:	e0 0f       	add	r30, r16
    5e0a:	f1 1f       	adc	r31, r17
    5e0c:	ca 57       	subi	r28, 0x7A	; 122
    5e0e:	df 4f       	sbci	r29, 0xFF	; 255
    5e10:	28 81       	ld	r18, Y
    5e12:	39 81       	ldd	r19, Y+1	; 0x01
    5e14:	c6 58       	subi	r28, 0x86	; 134
    5e16:	d0 40       	sbci	r29, 0x00	; 0
    5e18:	27 70       	andi	r18, 0x07	; 7
    5e1a:	33 27       	eor	r19, r19
    5e1c:	80 e8       	ldi	r24, 0x80	; 128
    5e1e:	90 e0       	ldi	r25, 0x00	; 0
    5e20:	02 c0       	rjmp	.+4      	; 0x5e26 <sha2_large_common_lastBlock+0x24a>
    5e22:	95 95       	asr	r25
    5e24:	87 95       	ror	r24
    5e26:	2a 95       	dec	r18
    5e28:	e2 f7       	brpl	.-8      	; 0x5e22 <sha2_large_common_lastBlock+0x246>
    5e2a:	90 81       	ld	r25, Z
    5e2c:	89 2b       	or	r24, r25
    5e2e:	80 83       	st	Z, r24
	if(length_b>1024-128-1){
    5e30:	ca 57       	subi	r28, 0x7A	; 122
    5e32:	df 4f       	sbci	r29, 0xFF	; 255
    5e34:	28 81       	ld	r18, Y
    5e36:	39 81       	ldd	r19, Y+1	; 0x01
    5e38:	c6 58       	subi	r28, 0x86	; 134
    5e3a:	d0 40       	sbci	r29, 0x00	; 0
    5e3c:	20 38       	cpi	r18, 0x80	; 128
    5e3e:	33 40       	sbci	r19, 0x03	; 3
    5e40:	70 f0       	brcs	.+28     	; 0x5e5e <sha2_large_common_lastBlock+0x282>
		/* length goes into the next block */
		sha2_large_common_nextBlock(ctx, buffer);
    5e42:	b8 01       	movw	r22, r16
    5e44:	c6 57       	subi	r28, 0x76	; 118
    5e46:	df 4f       	sbci	r29, 0xFF	; 255
    5e48:	88 81       	ld	r24, Y
    5e4a:	99 81       	ldd	r25, Y+1	; 0x01
    5e4c:	ca 58       	subi	r28, 0x8A	; 138
    5e4e:	d0 40       	sbci	r29, 0x00	; 0
    5e50:	0e 94 d7 24 	call	0x49ae	; 0x49ae <sha2_large_common_nextBlock>
		memset(buffer, 0, 120);
    5e54:	88 e7       	ldi	r24, 0x78	; 120
    5e56:	f8 01       	movw	r30, r16
    5e58:	11 92       	st	Z+, r1
    5e5a:	8a 95       	dec	r24
    5e5c:	e9 f7       	brne	.-6      	; 0x5e58 <sha2_large_common_lastBlock+0x27c>
	}
	memcpy(&(buffer[128-8]), &len, 8);
    5e5e:	ea 96       	adiw	r28, 0x3a	; 58
    5e60:	ff ae       	std	Y+63, r15	; 0x3f
    5e62:	ea 97       	sbiw	r28, 0x3a	; 58
    5e64:	cf 57       	subi	r28, 0x7F	; 127
    5e66:	df 4f       	sbci	r29, 0xFF	; 255
    5e68:	f8 81       	ld	r31, Y
    5e6a:	c1 58       	subi	r28, 0x81	; 129
    5e6c:	d0 40       	sbci	r29, 0x00	; 0
    5e6e:	eb 96       	adiw	r28, 0x3b	; 59
    5e70:	ff af       	std	Y+63, r31	; 0x3f
    5e72:	eb 97       	sbiw	r28, 0x3b	; 59
    5e74:	ec 96       	adiw	r28, 0x3c	; 60
    5e76:	bf ae       	std	Y+63, r11	; 0x3f
    5e78:	ec 97       	sbiw	r28, 0x3c	; 60
    5e7a:	ed 96       	adiw	r28, 0x3d	; 61
    5e7c:	cf ae       	std	Y+63, r12	; 0x3f
    5e7e:	ed 97       	sbiw	r28, 0x3d	; 61
    5e80:	ee 96       	adiw	r28, 0x3e	; 62
    5e82:	df ae       	std	Y+63, r13	; 0x3f
    5e84:	ee 97       	sbiw	r28, 0x3e	; 62
    5e86:	ef 96       	adiw	r28, 0x3f	; 63
    5e88:	ef ae       	std	Y+63, r14	; 0x3f
    5e8a:	ef 97       	sbiw	r28, 0x3f	; 63
    5e8c:	ce 57       	subi	r28, 0x7E	; 126
    5e8e:	df 4f       	sbci	r29, 0xFF	; 255
    5e90:	28 81       	ld	r18, Y
    5e92:	c2 58       	subi	r28, 0x82	; 130
    5e94:	d0 40       	sbci	r29, 0x00	; 0
    5e96:	c1 58       	subi	r28, 0x81	; 129
    5e98:	df 4f       	sbci	r29, 0xFF	; 255
    5e9a:	28 83       	st	Y, r18
    5e9c:	cf 57       	subi	r28, 0x7F	; 127
    5e9e:	d0 40       	sbci	r29, 0x00	; 0
    5ea0:	cd 57       	subi	r28, 0x7D	; 125
    5ea2:	df 4f       	sbci	r29, 0xFF	; 255
    5ea4:	38 81       	ld	r19, Y
    5ea6:	c3 58       	subi	r28, 0x83	; 131
    5ea8:	d0 40       	sbci	r29, 0x00	; 0
    5eaa:	c0 58       	subi	r28, 0x80	; 128
    5eac:	df 4f       	sbci	r29, 0xFF	; 255
    5eae:	38 83       	st	Y, r19
    5eb0:	c0 58       	subi	r28, 0x80	; 128
    5eb2:	d0 40       	sbci	r29, 0x00	; 0
	sha2_large_common_nextBlock(ctx, buffer);
    5eb4:	b8 01       	movw	r22, r16
    5eb6:	c6 57       	subi	r28, 0x76	; 118
    5eb8:	df 4f       	sbci	r29, 0xFF	; 255
    5eba:	88 81       	ld	r24, Y
    5ebc:	99 81       	ldd	r25, Y+1	; 0x01
    5ebe:	ca 58       	subi	r28, 0x8A	; 138
    5ec0:	d0 40       	sbci	r29, 0x00	; 0
    5ec2:	0e 94 d7 24 	call	0x49ae	; 0x49ae <sha2_large_common_nextBlock>
}
    5ec6:	c5 57       	subi	r28, 0x75	; 117
    5ec8:	df 4f       	sbci	r29, 0xFF	; 255
    5eca:	0f b6       	in	r0, 0x3f	; 63
    5ecc:	f8 94       	cli
    5ece:	de bf       	out	0x3e, r29	; 62
    5ed0:	0f be       	out	0x3f, r0	; 63
    5ed2:	cd bf       	out	0x3d, r28	; 61
    5ed4:	df 91       	pop	r29
    5ed6:	cf 91       	pop	r28
    5ed8:	1f 91       	pop	r17
    5eda:	0f 91       	pop	r16
    5edc:	ff 90       	pop	r15
    5ede:	ef 90       	pop	r14
    5ee0:	df 90       	pop	r13
    5ee2:	cf 90       	pop	r12
    5ee4:	bf 90       	pop	r11
    5ee6:	af 90       	pop	r10
    5ee8:	9f 90       	pop	r9
    5eea:	8f 90       	pop	r8
    5eec:	7f 90       	pop	r7
    5eee:	6f 90       	pop	r6
    5ef0:	5f 90       	pop	r5
    5ef2:	4f 90       	pop	r4
    5ef4:	3f 90       	pop	r3
    5ef6:	2f 90       	pop	r2
    5ef8:	08 95       	ret

00005efa <sha2_small_common_nextBlock>:


/**
 * block must be, 512, Bit = 64, Byte, long !!!
 */
void sha2_small_common_nextBlock (sha2_small_common_ctx_t *state, const void *block){
    5efa:	2f 92       	push	r2
    5efc:	3f 92       	push	r3
    5efe:	4f 92       	push	r4
    5f00:	5f 92       	push	r5
    5f02:	6f 92       	push	r6
    5f04:	7f 92       	push	r7
    5f06:	8f 92       	push	r8
    5f08:	9f 92       	push	r9
    5f0a:	af 92       	push	r10
    5f0c:	bf 92       	push	r11
    5f0e:	cf 92       	push	r12
    5f10:	df 92       	push	r13
    5f12:	ef 92       	push	r14
    5f14:	ff 92       	push	r15
    5f16:	0f 93       	push	r16
    5f18:	1f 93       	push	r17
    5f1a:	cf 93       	push	r28
    5f1c:	df 93       	push	r29
    5f1e:	cd b7       	in	r28, 0x3d	; 61
    5f20:	de b7       	in	r29, 0x3e	; 62
    5f22:	c2 57       	subi	r28, 0x72	; 114
    5f24:	d1 09       	sbc	r29, r1
    5f26:	0f b6       	in	r0, 0x3f	; 63
    5f28:	f8 94       	cli
    5f2a:	de bf       	out	0x3e, r29	; 62
    5f2c:	0f be       	out	0x3f, r0	; 63
    5f2e:	cd bf       	out	0x3d, r28	; 61
    5f30:	e3 96       	adiw	r28, 0x33	; 51
    5f32:	9f af       	std	Y+63, r25	; 0x3f
    5f34:	8e af       	std	Y+62, r24	; 0x3e
    5f36:	e3 97       	sbiw	r28, 0x33	; 51
    5f38:	db 01       	movw	r26, r22
    5f3a:	8e 01       	movw	r16, r28
    5f3c:	0f 5f       	subi	r16, 0xFF	; 255
    5f3e:	1f 4f       	sbci	r17, 0xFF	; 255
    5f40:	af 96       	adiw	r28, 0x2f	; 47
    5f42:	1f af       	std	Y+63, r17	; 0x3f
    5f44:	0e af       	std	Y+62, r16	; 0x3e
    5f46:	af 97       	sbiw	r28, 0x2f	; 47
    5f48:	1e 01       	movw	r2, r28
    5f4a:	11 e4       	ldi	r17, 0x41	; 65
    5f4c:	21 0e       	add	r2, r17
    5f4e:	31 1c       	adc	r3, r1
    5f50:	fe 01       	movw	r30, r28
    5f52:	31 96       	adiw	r30, 0x01	; 1
    5f54:	6d 91       	ld	r22, X+
    5f56:	7d 91       	ld	r23, X+
    5f58:	8d 91       	ld	r24, X+
    5f5a:	9d 91       	ld	r25, X+
    5f5c:	aa d4       	rcall	.+2388   	; 0x68b2 <__bswapsi2>
	uint32_t a[8],t1,t2;

	/* init w */
#if defined LITTLE_ENDIAN
	for (i=0; i<16; ++i){
		w[i]= change_endian32(((uint32_t*)block)[i]);
    5f5e:	61 93       	st	Z+, r22
    5f60:	71 93       	st	Z+, r23
    5f62:	81 93       	st	Z+, r24
    5f64:	91 93       	st	Z+, r25
	uint8_t  i;
	uint32_t a[8],t1,t2;

	/* init w */
#if defined LITTLE_ENDIAN
	for (i=0; i<16; ++i){
    5f66:	e2 15       	cp	r30, r2
    5f68:	f3 05       	cpc	r31, r3
    5f6a:	a1 f7       	brne	.-24     	; 0x5f54 <sha2_small_common_nextBlock+0x5a>
	for (i=16; i<64; ++i){
		w[i] = SIGMA_b(w[i-2]) + w[i-7] + SIGMA_a(w[i-15]) + w[i-16];
	}
*/
/* init working variables */
	memcpy((void*)a,(void*)(state->h), 8*4);
    5f6c:	80 e2       	ldi	r24, 0x20	; 32
    5f6e:	e3 96       	adiw	r28, 0x33	; 51
    5f70:	ee ad       	ldd	r30, Y+62	; 0x3e
    5f72:	ff ad       	ldd	r31, Y+63	; 0x3f
    5f74:	e3 97       	sbiw	r28, 0x33	; 51
    5f76:	de 01       	movw	r26, r28
    5f78:	af 5b       	subi	r26, 0xBF	; 191
    5f7a:	bf 4f       	sbci	r27, 0xFF	; 255
    5f7c:	01 90       	ld	r0, Z+
    5f7e:	0d 92       	st	X+, r0
    5f80:	8a 95       	dec	r24
    5f82:	e1 f7       	brne	.-8      	; 0x5f7c <sha2_small_common_nextBlock+0x82>
    5f84:	d1 01       	movw	r26, r2
    5f86:	50 96       	adiw	r26, 0x10	; 16
    5f88:	4d 90       	ld	r4, X+
    5f8a:	5d 90       	ld	r5, X+
    5f8c:	6d 90       	ld	r6, X+
    5f8e:	7c 90       	ld	r7, X
    5f90:	53 97       	sbiw	r26, 0x13	; 19
    5f92:	f1 01       	movw	r30, r2
    5f94:	81 90       	ld	r8, Z+
    5f96:	91 90       	ld	r9, Z+
    5f98:	a1 90       	ld	r10, Z+
    5f9a:	b1 90       	ld	r11, Z+
    5f9c:	e1 96       	adiw	r28, 0x31	; 49
    5f9e:	ff af       	std	Y+63, r31	; 0x3f
    5fa0:	ee af       	std	Y+62, r30	; 0x3e
    5fa2:	e1 97       	sbiw	r28, 0x31	; 49
    5fa4:	04 e3       	ldi	r16, 0x34	; 52
    5fa6:	13 e0       	ldi	r17, 0x03	; 3
    5fa8:	ad 96       	adiw	r28, 0x2d	; 45
    5faa:	1f af       	std	Y+63, r17	; 0x3f
    5fac:	0e af       	std	Y+62, r16	; 0x3e
    5fae:	ad 97       	sbiw	r28, 0x2d	; 45
    5fb0:	ab 96       	adiw	r28, 0x2b	; 43
    5fb2:	1f ae       	std	Y+63, r1	; 0x3f
    5fb4:	1e ae       	std	Y+62, r1	; 0x3e
    5fb6:	ab 97       	sbiw	r28, 0x2b	; 43
    5fb8:	53 c2       	rjmp	.+1190   	; 0x6460 <sha2_small_common_nextBlock+0x566>
/* do the, fun stuff, */
	for (i=0; i<64; ++i){
		if(i<16){
			wx = w[i];
		}else{
			wx = SIGMA_b(w[14]) + w[9] + SIGMA_a(w[1]) + w[0];
    5fba:	49 ad       	ldd	r20, Y+57	; 0x39
    5fbc:	5a ad       	ldd	r21, Y+58	; 0x3a
    5fbe:	6b ad       	ldd	r22, Y+59	; 0x3b
    5fc0:	7c ad       	ldd	r23, Y+60	; 0x3c
    5fc2:	8d 81       	ldd	r24, Y+5	; 0x05
    5fc4:	9e 81       	ldd	r25, Y+6	; 0x06
    5fc6:	af 81       	ldd	r26, Y+7	; 0x07
    5fc8:	b8 85       	ldd	r27, Y+8	; 0x08
    5fca:	6a 01       	movw	r12, r20
    5fcc:	7b 01       	movw	r14, r22
    5fce:	fd e0       	ldi	r31, 0x0D	; 13
    5fd0:	cc 0c       	add	r12, r12
    5fd2:	dd 1c       	adc	r13, r13
    5fd4:	ee 1c       	adc	r14, r14
    5fd6:	ff 1c       	adc	r15, r15
    5fd8:	fa 95       	dec	r31
    5fda:	d1 f7       	brne	.-12     	; 0x5fd0 <sha2_small_common_nextBlock+0xd6>
    5fdc:	8a 01       	movw	r16, r20
    5fde:	9b 01       	movw	r18, r22
    5fe0:	e3 e1       	ldi	r30, 0x13	; 19
    5fe2:	36 95       	lsr	r19
    5fe4:	27 95       	ror	r18
    5fe6:	17 95       	ror	r17
    5fe8:	07 95       	ror	r16
    5fea:	ea 95       	dec	r30
    5fec:	d1 f7       	brne	.-12     	; 0x5fe2 <sha2_small_common_nextBlock+0xe8>
    5fee:	c0 2a       	or	r12, r16
    5ff0:	d1 2a       	or	r13, r17
    5ff2:	e2 2a       	or	r14, r18
    5ff4:	f3 2a       	or	r15, r19
    5ff6:	a9 96       	adiw	r28, 0x29	; 41
    5ff8:	cc ae       	std	Y+60, r12	; 0x3c
    5ffa:	dd ae       	std	Y+61, r13	; 0x3d
    5ffc:	ee ae       	std	Y+62, r14	; 0x3e
    5ffe:	ff ae       	std	Y+63, r15	; 0x3f
    6000:	a9 97       	sbiw	r28, 0x29	; 41
    6002:	7a 01       	movw	r14, r20
    6004:	8b 01       	movw	r16, r22
    6006:	ff e0       	ldi	r31, 0x0F	; 15
    6008:	ee 0c       	add	r14, r14
    600a:	ff 1c       	adc	r15, r15
    600c:	00 1f       	adc	r16, r16
    600e:	11 1f       	adc	r17, r17
    6010:	fa 95       	dec	r31
    6012:	d1 f7       	brne	.-12     	; 0x6008 <sha2_small_common_nextBlock+0x10e>
    6014:	a5 96       	adiw	r28, 0x25	; 37
    6016:	ec ae       	std	Y+60, r14	; 0x3c
    6018:	fd ae       	std	Y+61, r15	; 0x3d
    601a:	0e af       	std	Y+62, r16	; 0x3e
    601c:	1f af       	std	Y+63, r17	; 0x3f
    601e:	a5 97       	sbiw	r28, 0x25	; 37
    6020:	8a 01       	movw	r16, r20
    6022:	9b 01       	movw	r18, r22
    6024:	e1 e1       	ldi	r30, 0x11	; 17
    6026:	36 95       	lsr	r19
    6028:	27 95       	ror	r18
    602a:	17 95       	ror	r17
    602c:	07 95       	ror	r16
    602e:	ea 95       	dec	r30
    6030:	d1 f7       	brne	.-12     	; 0x6026 <sha2_small_common_nextBlock+0x12c>
    6032:	a5 96       	adiw	r28, 0x25	; 37
    6034:	cc ac       	ldd	r12, Y+60	; 0x3c
    6036:	dd ac       	ldd	r13, Y+61	; 0x3d
    6038:	ee ac       	ldd	r14, Y+62	; 0x3e
    603a:	ff ac       	ldd	r15, Y+63	; 0x3f
    603c:	a5 97       	sbiw	r28, 0x25	; 37
    603e:	0c 29       	or	r16, r12
    6040:	1d 29       	or	r17, r13
    6042:	2e 29       	or	r18, r14
    6044:	3f 29       	or	r19, r15
    6046:	a9 96       	adiw	r28, 0x29	; 41
    6048:	cc ac       	ldd	r12, Y+60	; 0x3c
    604a:	dd ac       	ldd	r13, Y+61	; 0x3d
    604c:	ee ac       	ldd	r14, Y+62	; 0x3e
    604e:	ff ac       	ldd	r15, Y+63	; 0x3f
    6050:	a9 97       	sbiw	r28, 0x29	; 41
    6052:	0c 25       	eor	r16, r12
    6054:	1d 25       	eor	r17, r13
    6056:	2e 25       	eor	r18, r14
    6058:	3f 25       	eor	r19, r15
    605a:	fa e0       	ldi	r31, 0x0A	; 10
    605c:	76 95       	lsr	r23
    605e:	67 95       	ror	r22
    6060:	57 95       	ror	r21
    6062:	47 95       	ror	r20
    6064:	fa 95       	dec	r31
    6066:	d1 f7       	brne	.-12     	; 0x605c <sha2_small_common_nextBlock+0x162>
    6068:	40 27       	eor	r20, r16
    606a:	51 27       	eor	r21, r17
    606c:	62 27       	eor	r22, r18
    606e:	73 27       	eor	r23, r19
    6070:	cd a0       	ldd	r12, Y+37	; 0x25
    6072:	de a0       	ldd	r13, Y+38	; 0x26
    6074:	ef a0       	ldd	r14, Y+39	; 0x27
    6076:	f8 a4       	ldd	r15, Y+40	; 0x28
    6078:	09 81       	ldd	r16, Y+1	; 0x01
    607a:	1a 81       	ldd	r17, Y+2	; 0x02
    607c:	2b 81       	ldd	r18, Y+3	; 0x03
    607e:	3c 81       	ldd	r19, Y+4	; 0x04
    6080:	c0 0e       	add	r12, r16
    6082:	d1 1e       	adc	r13, r17
    6084:	e2 1e       	adc	r14, r18
    6086:	f3 1e       	adc	r15, r19
    6088:	c4 0e       	add	r12, r20
    608a:	d5 1e       	adc	r13, r21
    608c:	e6 1e       	adc	r14, r22
    608e:	f7 1e       	adc	r15, r23
    6090:	8c 01       	movw	r16, r24
    6092:	9d 01       	movw	r18, r26
    6094:	4e e0       	ldi	r20, 0x0E	; 14
    6096:	00 0f       	add	r16, r16
    6098:	11 1f       	adc	r17, r17
    609a:	22 1f       	adc	r18, r18
    609c:	33 1f       	adc	r19, r19
    609e:	4a 95       	dec	r20
    60a0:	d1 f7       	brne	.-12     	; 0x6096 <sha2_small_common_nextBlock+0x19c>
    60a2:	ac 01       	movw	r20, r24
    60a4:	bd 01       	movw	r22, r26
    60a6:	e2 e1       	ldi	r30, 0x12	; 18
    60a8:	76 95       	lsr	r23
    60aa:	67 95       	ror	r22
    60ac:	57 95       	ror	r21
    60ae:	47 95       	ror	r20
    60b0:	ea 95       	dec	r30
    60b2:	d1 f7       	brne	.-12     	; 0x60a8 <sha2_small_common_nextBlock+0x1ae>
    60b4:	04 2b       	or	r16, r20
    60b6:	15 2b       	or	r17, r21
    60b8:	26 2b       	or	r18, r22
    60ba:	37 2b       	or	r19, r23
    60bc:	a5 96       	adiw	r28, 0x25	; 37
    60be:	0c af       	std	Y+60, r16	; 0x3c
    60c0:	1d af       	std	Y+61, r17	; 0x3d
    60c2:	2e af       	std	Y+62, r18	; 0x3e
    60c4:	3f af       	std	Y+63, r19	; 0x3f
    60c6:	a5 97       	sbiw	r28, 0x25	; 37
    60c8:	ac 01       	movw	r20, r24
    60ca:	bd 01       	movw	r22, r26
    60cc:	f7 e0       	ldi	r31, 0x07	; 7
    60ce:	76 95       	lsr	r23
    60d0:	67 95       	ror	r22
    60d2:	57 95       	ror	r21
    60d4:	47 95       	ror	r20
    60d6:	fa 95       	dec	r31
    60d8:	d1 f7       	brne	.-12     	; 0x60ce <sha2_small_common_nextBlock+0x1d4>
    60da:	8c 01       	movw	r16, r24
    60dc:	9d 01       	movw	r18, r26
    60de:	e9 e1       	ldi	r30, 0x19	; 25
    60e0:	00 0f       	add	r16, r16
    60e2:	11 1f       	adc	r17, r17
    60e4:	22 1f       	adc	r18, r18
    60e6:	33 1f       	adc	r19, r19
    60e8:	ea 95       	dec	r30
    60ea:	d1 f7       	brne	.-12     	; 0x60e0 <sha2_small_common_nextBlock+0x1e6>
    60ec:	04 2b       	or	r16, r20
    60ee:	15 2b       	or	r17, r21
    60f0:	26 2b       	or	r18, r22
    60f2:	37 2b       	or	r19, r23
    60f4:	a5 96       	adiw	r28, 0x25	; 37
    60f6:	4c ad       	ldd	r20, Y+60	; 0x3c
    60f8:	5d ad       	ldd	r21, Y+61	; 0x3d
    60fa:	6e ad       	ldd	r22, Y+62	; 0x3e
    60fc:	7f ad       	ldd	r23, Y+63	; 0x3f
    60fe:	a5 97       	sbiw	r28, 0x25	; 37
    6100:	04 27       	eor	r16, r20
    6102:	15 27       	eor	r17, r21
    6104:	26 27       	eor	r18, r22
    6106:	37 27       	eor	r19, r23
    6108:	f3 e0       	ldi	r31, 0x03	; 3
    610a:	b6 95       	lsr	r27
    610c:	a7 95       	ror	r26
    610e:	97 95       	ror	r25
    6110:	87 95       	ror	r24
    6112:	fa 95       	dec	r31
    6114:	d1 f7       	brne	.-12     	; 0x610a <sha2_small_common_nextBlock+0x210>
    6116:	08 27       	eor	r16, r24
    6118:	19 27       	eor	r17, r25
    611a:	2a 27       	eor	r18, r26
    611c:	3b 27       	eor	r19, r27
    611e:	c7 01       	movw	r24, r14
    6120:	b6 01       	movw	r22, r12
    6122:	60 0f       	add	r22, r16
    6124:	71 1f       	adc	r23, r17
    6126:	82 1f       	adc	r24, r18
    6128:	93 1f       	adc	r25, r19
    612a:	a9 96       	adiw	r28, 0x29	; 41
    612c:	6c af       	std	Y+60, r22	; 0x3c
    612e:	7d af       	std	Y+61, r23	; 0x3d
    6130:	8e af       	std	Y+62, r24	; 0x3e
    6132:	9f af       	std	Y+63, r25	; 0x3f
    6134:	a9 97       	sbiw	r28, 0x29	; 41
			memmove(&(w[0]), &(w[1]), 15*4);
    6136:	4c e3       	ldi	r20, 0x3C	; 60
    6138:	50 e0       	ldi	r21, 0x00	; 0
    613a:	be 01       	movw	r22, r28
    613c:	6b 5f       	subi	r22, 0xFB	; 251
    613e:	7f 4f       	sbci	r23, 0xFF	; 255
    6140:	ce 01       	movw	r24, r28
    6142:	01 96       	adiw	r24, 0x01	; 1
    6144:	83 d4       	rcall	.+2310   	; 0x6a4c <memmove>
			w[15] = wx;
    6146:	a9 96       	adiw	r28, 0x29	; 41
    6148:	cc ac       	ldd	r12, Y+60	; 0x3c
    614a:	dd ac       	ldd	r13, Y+61	; 0x3d
    614c:	ee ac       	ldd	r14, Y+62	; 0x3e
    614e:	ff ac       	ldd	r15, Y+63	; 0x3f
    6150:	a9 97       	sbiw	r28, 0x29	; 41
    6152:	21 96       	adiw	r28, 0x01	; 1
    6154:	cc ae       	std	Y+60, r12	; 0x3c
    6156:	dd ae       	std	Y+61, r13	; 0x3d
    6158:	ee ae       	std	Y+62, r14	; 0x3e
    615a:	ff ae       	std	Y+63, r15	; 0x3f
    615c:	21 97       	sbiw	r28, 0x01	; 1
		}
		t1 = a[7] + SIGMA_1(a[4]) + CH(a[4],a[5],a[6]) + pgm_read_dword(&k[i]) + wx;
    615e:	ad 96       	adiw	r28, 0x2d	; 45
    6160:	ee ad       	ldd	r30, Y+62	; 0x3e
    6162:	ff ad       	ldd	r31, Y+63	; 0x3f
    6164:	ad 97       	sbiw	r28, 0x2d	; 45
    6166:	e5 90       	lpm	r14, Z+
    6168:	f5 90       	lpm	r15, Z+
    616a:	05 91       	lpm	r16, Z+
    616c:	14 91       	lpm	r17, Z
    616e:	a5 96       	adiw	r28, 0x25	; 37
    6170:	ec ae       	std	Y+60, r14	; 0x3c
    6172:	fd ae       	std	Y+61, r15	; 0x3d
    6174:	0e af       	std	Y+62, r16	; 0x3e
    6176:	1f af       	std	Y+63, r17	; 0x3f
    6178:	a5 97       	sbiw	r28, 0x25	; 37
    617a:	b3 01       	movw	r22, r6
    617c:	a2 01       	movw	r20, r4
    617e:	40 95       	com	r20
    6180:	50 95       	com	r21
    6182:	60 95       	com	r22
    6184:	70 95       	com	r23
    6186:	f1 01       	movw	r30, r2
    6188:	80 8d       	ldd	r24, Z+24	; 0x18
    618a:	91 8d       	ldd	r25, Z+25	; 0x19
    618c:	a2 8d       	ldd	r26, Z+26	; 0x1a
    618e:	b3 8d       	ldd	r27, Z+27	; 0x1b
    6190:	6a 01       	movw	r12, r20
    6192:	7b 01       	movw	r14, r22
    6194:	c8 22       	and	r12, r24
    6196:	d9 22       	and	r13, r25
    6198:	ea 22       	and	r14, r26
    619a:	fb 22       	and	r15, r27
    619c:	44 89       	ldd	r20, Z+20	; 0x14
    619e:	55 89       	ldd	r21, Z+21	; 0x15
    61a0:	66 89       	ldd	r22, Z+22	; 0x16
    61a2:	77 89       	ldd	r23, Z+23	; 0x17
    61a4:	d3 01       	movw	r26, r6
    61a6:	c2 01       	movw	r24, r4
    61a8:	84 23       	and	r24, r20
    61aa:	95 23       	and	r25, r21
    61ac:	a6 23       	and	r26, r22
    61ae:	b7 23       	and	r27, r23
    61b0:	b7 01       	movw	r22, r14
    61b2:	a6 01       	movw	r20, r12
    61b4:	48 27       	eor	r20, r24
    61b6:	59 27       	eor	r21, r25
    61b8:	6a 27       	eor	r22, r26
    61ba:	7b 27       	eor	r23, r27
    61bc:	93 01       	movw	r18, r6
    61be:	82 01       	movw	r16, r4
    61c0:	8b e0       	ldi	r24, 0x0B	; 11
    61c2:	36 95       	lsr	r19
    61c4:	27 95       	ror	r18
    61c6:	17 95       	ror	r17
    61c8:	07 95       	ror	r16
    61ca:	8a 95       	dec	r24
    61cc:	d1 f7       	brne	.-12     	; 0x61c2 <sha2_small_common_nextBlock+0x2c8>
    61ce:	d3 01       	movw	r26, r6
    61d0:	c2 01       	movw	r24, r4
    61d2:	07 2e       	mov	r0, r23
    61d4:	75 e1       	ldi	r23, 0x15	; 21
    61d6:	88 0f       	add	r24, r24
    61d8:	99 1f       	adc	r25, r25
    61da:	aa 1f       	adc	r26, r26
    61dc:	bb 1f       	adc	r27, r27
    61de:	7a 95       	dec	r23
    61e0:	d1 f7       	brne	.-12     	; 0x61d6 <sha2_small_common_nextBlock+0x2dc>
    61e2:	70 2d       	mov	r23, r0
    61e4:	08 2b       	or	r16, r24
    61e6:	19 2b       	or	r17, r25
    61e8:	2a 2b       	or	r18, r26
    61ea:	3b 2b       	or	r19, r27
    61ec:	73 01       	movw	r14, r6
    61ee:	62 01       	movw	r12, r4
    61f0:	86 e0       	ldi	r24, 0x06	; 6
    61f2:	f6 94       	lsr	r15
    61f4:	e7 94       	ror	r14
    61f6:	d7 94       	ror	r13
    61f8:	c7 94       	ror	r12
    61fa:	8a 95       	dec	r24
    61fc:	d1 f7       	brne	.-12     	; 0x61f2 <sha2_small_common_nextBlock+0x2f8>
    61fe:	d3 01       	movw	r26, r6
    6200:	c2 01       	movw	r24, r4
    6202:	07 2e       	mov	r0, r23
    6204:	7a e1       	ldi	r23, 0x1A	; 26
    6206:	88 0f       	add	r24, r24
    6208:	99 1f       	adc	r25, r25
    620a:	aa 1f       	adc	r26, r26
    620c:	bb 1f       	adc	r27, r27
    620e:	7a 95       	dec	r23
    6210:	d1 f7       	brne	.-12     	; 0x6206 <sha2_small_common_nextBlock+0x30c>
    6212:	70 2d       	mov	r23, r0
    6214:	8c 29       	or	r24, r12
    6216:	9d 29       	or	r25, r13
    6218:	ae 29       	or	r26, r14
    621a:	bf 29       	or	r27, r15
    621c:	80 27       	eor	r24, r16
    621e:	91 27       	eor	r25, r17
    6220:	a2 27       	eor	r26, r18
    6222:	b3 27       	eor	r27, r19
    6224:	93 01       	movw	r18, r6
    6226:	82 01       	movw	r16, r4
    6228:	00 0f       	add	r16, r16
    622a:	11 1f       	adc	r17, r17
    622c:	22 1f       	adc	r18, r18
    622e:	33 1f       	adc	r19, r19
    6230:	00 0f       	add	r16, r16
    6232:	11 1f       	adc	r17, r17
    6234:	22 1f       	adc	r18, r18
    6236:	33 1f       	adc	r19, r19
    6238:	00 0f       	add	r16, r16
    623a:	11 1f       	adc	r17, r17
    623c:	22 1f       	adc	r18, r18
    623e:	33 1f       	adc	r19, r19
    6240:	00 0f       	add	r16, r16
    6242:	11 1f       	adc	r17, r17
    6244:	22 1f       	adc	r18, r18
    6246:	33 1f       	adc	r19, r19
    6248:	00 0f       	add	r16, r16
    624a:	11 1f       	adc	r17, r17
    624c:	22 1f       	adc	r18, r18
    624e:	33 1f       	adc	r19, r19
    6250:	00 0f       	add	r16, r16
    6252:	11 1f       	adc	r17, r17
    6254:	22 1f       	adc	r18, r18
    6256:	33 1f       	adc	r19, r19
    6258:	00 0f       	add	r16, r16
    625a:	11 1f       	adc	r17, r17
    625c:	22 1f       	adc	r18, r18
    625e:	33 1f       	adc	r19, r19
    6260:	03 2e       	mov	r0, r19
    6262:	39 e1       	ldi	r19, 0x19	; 25
    6264:	76 94       	lsr	r7
    6266:	67 94       	ror	r6
    6268:	57 94       	ror	r5
    626a:	47 94       	ror	r4
    626c:	3a 95       	dec	r19
    626e:	d1 f7       	brne	.-12     	; 0x6264 <sha2_small_common_nextBlock+0x36a>
    6270:	30 2d       	mov	r19, r0
    6272:	04 29       	or	r16, r4
    6274:	15 29       	or	r17, r5
    6276:	26 29       	or	r18, r6
    6278:	37 29       	or	r19, r7
    627a:	80 27       	eor	r24, r16
    627c:	91 27       	eor	r25, r17
    627e:	a2 27       	eor	r26, r18
    6280:	b3 27       	eor	r27, r19
    6282:	48 0f       	add	r20, r24
    6284:	59 1f       	adc	r21, r25
    6286:	6a 1f       	adc	r22, r26
    6288:	7b 1f       	adc	r23, r27
    628a:	84 8d       	ldd	r24, Z+28	; 0x1c
    628c:	95 8d       	ldd	r25, Z+29	; 0x1d
    628e:	a6 8d       	ldd	r26, Z+30	; 0x1e
    6290:	b7 8d       	ldd	r27, Z+31	; 0x1f
    6292:	48 0f       	add	r20, r24
    6294:	59 1f       	adc	r21, r25
    6296:	6a 1f       	adc	r22, r26
    6298:	7b 1f       	adc	r23, r27
    629a:	a9 96       	adiw	r28, 0x29	; 41
    629c:	cc ac       	ldd	r12, Y+60	; 0x3c
    629e:	dd ac       	ldd	r13, Y+61	; 0x3d
    62a0:	ee ac       	ldd	r14, Y+62	; 0x3e
    62a2:	ff ac       	ldd	r15, Y+63	; 0x3f
    62a4:	a9 97       	sbiw	r28, 0x29	; 41
    62a6:	c4 0e       	add	r12, r20
    62a8:	d5 1e       	adc	r13, r21
    62aa:	e6 1e       	adc	r14, r22
    62ac:	f7 1e       	adc	r15, r23
    62ae:	a5 96       	adiw	r28, 0x25	; 37
    62b0:	0c ad       	ldd	r16, Y+60	; 0x3c
    62b2:	1d ad       	ldd	r17, Y+61	; 0x3d
    62b4:	2e ad       	ldd	r18, Y+62	; 0x3e
    62b6:	3f ad       	ldd	r19, Y+63	; 0x3f
    62b8:	a5 97       	sbiw	r28, 0x25	; 37
    62ba:	0c 0d       	add	r16, r12
    62bc:	1d 1d       	adc	r17, r13
    62be:	2e 1d       	adc	r18, r14
    62c0:	3f 1d       	adc	r19, r15
    62c2:	a5 96       	adiw	r28, 0x25	; 37
    62c4:	0c af       	std	Y+60, r16	; 0x3c
    62c6:	1d af       	std	Y+61, r17	; 0x3d
    62c8:	2e af       	std	Y+62, r18	; 0x3e
    62ca:	3f af       	std	Y+63, r19	; 0x3f
    62cc:	a5 97       	sbiw	r28, 0x25	; 37
		t2 = SIGMA_0(a[0]) + MAJ(a[0],a[1],a[2]);
    62ce:	c4 80       	ldd	r12, Z+4	; 0x04
    62d0:	d5 80       	ldd	r13, Z+5	; 0x05
    62d2:	e6 80       	ldd	r14, Z+6	; 0x06
    62d4:	f7 80       	ldd	r15, Z+7	; 0x07
    62d6:	a9 96       	adiw	r28, 0x29	; 41
    62d8:	cc ae       	std	Y+60, r12	; 0x3c
    62da:	dd ae       	std	Y+61, r13	; 0x3d
    62dc:	ee ae       	std	Y+62, r14	; 0x3e
    62de:	ff ae       	std	Y+63, r15	; 0x3f
    62e0:	a9 97       	sbiw	r28, 0x29	; 41
    62e2:	c0 84       	ldd	r12, Z+8	; 0x08
    62e4:	d1 84       	ldd	r13, Z+9	; 0x09
    62e6:	e2 84       	ldd	r14, Z+10	; 0x0a
    62e8:	f3 84       	ldd	r15, Z+11	; 0x0b
		memmove(&(a[1]), &(a[0]), 7*4); 	/* a[7]=a[6]; a[6]=a[5]; a[5]=a[4]; a[4]=a[3]; a[3]=a[2]; a[2]=a[1]; a[1]=a[0]; */
    62ea:	4c e1       	ldi	r20, 0x1C	; 28
    62ec:	50 e0       	ldi	r21, 0x00	; 0
    62ee:	b1 01       	movw	r22, r2
    62f0:	e1 96       	adiw	r28, 0x31	; 49
    62f2:	8e ad       	ldd	r24, Y+62	; 0x3e
    62f4:	9f ad       	ldd	r25, Y+63	; 0x3f
    62f6:	e1 97       	sbiw	r28, 0x31	; 49
    62f8:	a9 d3       	rcall	.+1874   	; 0x6a4c <memmove>
		a[4] += t1;
    62fa:	f1 01       	movw	r30, r2
    62fc:	40 88       	ldd	r4, Z+16	; 0x10
    62fe:	51 88       	ldd	r5, Z+17	; 0x11
    6300:	62 88       	ldd	r6, Z+18	; 0x12
    6302:	73 88       	ldd	r7, Z+19	; 0x13
    6304:	a5 96       	adiw	r28, 0x25	; 37
    6306:	0c ad       	ldd	r16, Y+60	; 0x3c
    6308:	1d ad       	ldd	r17, Y+61	; 0x3d
    630a:	2e ad       	ldd	r18, Y+62	; 0x3e
    630c:	3f ad       	ldd	r19, Y+63	; 0x3f
    630e:	a5 97       	sbiw	r28, 0x25	; 37
    6310:	40 0e       	add	r4, r16
    6312:	51 1e       	adc	r5, r17
    6314:	62 1e       	adc	r6, r18
    6316:	73 1e       	adc	r7, r19
    6318:	40 8a       	std	Z+16, r4	; 0x10
    631a:	51 8a       	std	Z+17, r5	; 0x11
    631c:	62 8a       	std	Z+18, r6	; 0x12
    631e:	73 8a       	std	Z+19, r7	; 0x13
		a[0] = t1 + t2;
    6320:	b5 01       	movw	r22, r10
    6322:	a4 01       	movw	r20, r8
    6324:	8d e0       	ldi	r24, 0x0D	; 13
    6326:	76 95       	lsr	r23
    6328:	67 95       	ror	r22
    632a:	57 95       	ror	r21
    632c:	47 95       	ror	r20
    632e:	8a 95       	dec	r24
    6330:	d1 f7       	brne	.-12     	; 0x6326 <sha2_small_common_nextBlock+0x42c>
    6332:	d5 01       	movw	r26, r10
    6334:	c4 01       	movw	r24, r8
    6336:	23 e1       	ldi	r18, 0x13	; 19
    6338:	88 0f       	add	r24, r24
    633a:	99 1f       	adc	r25, r25
    633c:	aa 1f       	adc	r26, r26
    633e:	bb 1f       	adc	r27, r27
    6340:	2a 95       	dec	r18
    6342:	d1 f7       	brne	.-12     	; 0x6338 <sha2_small_common_nextBlock+0x43e>
    6344:	84 2b       	or	r24, r20
    6346:	95 2b       	or	r25, r21
    6348:	a6 2b       	or	r26, r22
    634a:	b7 2b       	or	r27, r23
    634c:	b5 01       	movw	r22, r10
    634e:	a4 01       	movw	r20, r8
    6350:	76 95       	lsr	r23
    6352:	67 95       	ror	r22
    6354:	57 95       	ror	r21
    6356:	47 95       	ror	r20
    6358:	76 95       	lsr	r23
    635a:	67 95       	ror	r22
    635c:	57 95       	ror	r21
    635e:	47 95       	ror	r20
    6360:	95 01       	movw	r18, r10
    6362:	84 01       	movw	r16, r8
    6364:	ee e1       	ldi	r30, 0x1E	; 30
    6366:	00 0f       	add	r16, r16
    6368:	11 1f       	adc	r17, r17
    636a:	22 1f       	adc	r18, r18
    636c:	33 1f       	adc	r19, r19
    636e:	ea 95       	dec	r30
    6370:	d1 f7       	brne	.-12     	; 0x6366 <sha2_small_common_nextBlock+0x46c>
    6372:	40 2b       	or	r20, r16
    6374:	51 2b       	or	r21, r17
    6376:	62 2b       	or	r22, r18
    6378:	73 2b       	or	r23, r19
    637a:	48 27       	eor	r20, r24
    637c:	59 27       	eor	r21, r25
    637e:	6a 27       	eor	r22, r26
    6380:	7b 27       	eor	r23, r27
    6382:	95 01       	movw	r18, r10
    6384:	84 01       	movw	r16, r8
    6386:	fa e0       	ldi	r31, 0x0A	; 10
    6388:	00 0f       	add	r16, r16
    638a:	11 1f       	adc	r17, r17
    638c:	22 1f       	adc	r18, r18
    638e:	33 1f       	adc	r19, r19
    6390:	fa 95       	dec	r31
    6392:	d1 f7       	brne	.-12     	; 0x6388 <sha2_small_common_nextBlock+0x48e>
    6394:	d5 01       	movw	r26, r10
    6396:	c4 01       	movw	r24, r8
    6398:	e6 e1       	ldi	r30, 0x16	; 22
    639a:	b6 95       	lsr	r27
    639c:	a7 95       	ror	r26
    639e:	97 95       	ror	r25
    63a0:	87 95       	ror	r24
    63a2:	ea 95       	dec	r30
    63a4:	d1 f7       	brne	.-12     	; 0x639a <sha2_small_common_nextBlock+0x4a0>
    63a6:	80 2b       	or	r24, r16
    63a8:	91 2b       	or	r25, r17
    63aa:	a2 2b       	or	r26, r18
    63ac:	b3 2b       	or	r27, r19
    63ae:	48 27       	eor	r20, r24
    63b0:	59 27       	eor	r21, r25
    63b2:	6a 27       	eor	r22, r26
    63b4:	7b 27       	eor	r23, r27
    63b6:	a9 96       	adiw	r28, 0x29	; 41
    63b8:	8c ad       	ldd	r24, Y+60	; 0x3c
    63ba:	9d ad       	ldd	r25, Y+61	; 0x3d
    63bc:	ae ad       	ldd	r26, Y+62	; 0x3e
    63be:	bf ad       	ldd	r27, Y+63	; 0x3f
    63c0:	a9 97       	sbiw	r28, 0x29	; 41
    63c2:	8c 25       	eor	r24, r12
    63c4:	9d 25       	eor	r25, r13
    63c6:	ae 25       	eor	r26, r14
    63c8:	bf 25       	eor	r27, r15
    63ca:	88 21       	and	r24, r8
    63cc:	99 21       	and	r25, r9
    63ce:	aa 21       	and	r26, r10
    63d0:	bb 21       	and	r27, r11
    63d2:	a9 96       	adiw	r28, 0x29	; 41
    63d4:	0c ad       	ldd	r16, Y+60	; 0x3c
    63d6:	1d ad       	ldd	r17, Y+61	; 0x3d
    63d8:	2e ad       	ldd	r18, Y+62	; 0x3e
    63da:	3f ad       	ldd	r19, Y+63	; 0x3f
    63dc:	a9 97       	sbiw	r28, 0x29	; 41
    63de:	c0 22       	and	r12, r16
    63e0:	d1 22       	and	r13, r17
    63e2:	e2 22       	and	r14, r18
    63e4:	f3 22       	and	r15, r19
    63e6:	c8 26       	eor	r12, r24
    63e8:	d9 26       	eor	r13, r25
    63ea:	ea 26       	eor	r14, r26
    63ec:	fb 26       	eor	r15, r27
    63ee:	4c 0d       	add	r20, r12
    63f0:	5d 1d       	adc	r21, r13
    63f2:	6e 1d       	adc	r22, r14
    63f4:	7f 1d       	adc	r23, r15
    63f6:	a5 96       	adiw	r28, 0x25	; 37
    63f8:	8c ac       	ldd	r8, Y+60	; 0x3c
    63fa:	9d ac       	ldd	r9, Y+61	; 0x3d
    63fc:	ae ac       	ldd	r10, Y+62	; 0x3e
    63fe:	bf ac       	ldd	r11, Y+63	; 0x3f
    6400:	a5 97       	sbiw	r28, 0x25	; 37
    6402:	84 0e       	add	r8, r20
    6404:	95 1e       	adc	r9, r21
    6406:	a6 1e       	adc	r10, r22
    6408:	b7 1e       	adc	r11, r23
    640a:	d1 01       	movw	r26, r2
    640c:	8d 92       	st	X+, r8
    640e:	9d 92       	st	X+, r9
    6410:	ad 92       	st	X+, r10
    6412:	bc 92       	st	X, r11
    6414:	13 97       	sbiw	r26, 0x03	; 3
    6416:	ab 96       	adiw	r28, 0x2b	; 43
    6418:	0e ad       	ldd	r16, Y+62	; 0x3e
    641a:	1f ad       	ldd	r17, Y+63	; 0x3f
    641c:	ab 97       	sbiw	r28, 0x2b	; 43
    641e:	0f 5f       	subi	r16, 0xFF	; 255
    6420:	1f 4f       	sbci	r17, 0xFF	; 255
    6422:	ab 96       	adiw	r28, 0x2b	; 43
    6424:	1f af       	std	Y+63, r17	; 0x3f
    6426:	0e af       	std	Y+62, r16	; 0x3e
    6428:	ab 97       	sbiw	r28, 0x2b	; 43
    642a:	ad 96       	adiw	r28, 0x2d	; 45
    642c:	0e ad       	ldd	r16, Y+62	; 0x3e
    642e:	1f ad       	ldd	r17, Y+63	; 0x3f
    6430:	ad 97       	sbiw	r28, 0x2d	; 45
    6432:	0c 5f       	subi	r16, 0xFC	; 252
    6434:	1f 4f       	sbci	r17, 0xFF	; 255
    6436:	ad 96       	adiw	r28, 0x2d	; 45
    6438:	1f af       	std	Y+63, r17	; 0x3f
    643a:	0e af       	std	Y+62, r16	; 0x3e
    643c:	ad 97       	sbiw	r28, 0x2d	; 45
    643e:	af 96       	adiw	r28, 0x2f	; 47
    6440:	0e ad       	ldd	r16, Y+62	; 0x3e
    6442:	1f ad       	ldd	r17, Y+63	; 0x3f
    6444:	af 97       	sbiw	r28, 0x2f	; 47
    6446:	0c 5f       	subi	r16, 0xFC	; 252
    6448:	1f 4f       	sbci	r17, 0xFF	; 255
    644a:	af 96       	adiw	r28, 0x2f	; 47
    644c:	1f af       	std	Y+63, r17	; 0x3f
    644e:	0e af       	std	Y+62, r16	; 0x3e
    6450:	af 97       	sbiw	r28, 0x2f	; 47
*/
/* init working variables */
	memcpy((void*)a,(void*)(state->h), 8*4);

/* do the, fun stuff, */
	for (i=0; i<64; ++i){
    6452:	ab 96       	adiw	r28, 0x2b	; 43
    6454:	0e ad       	ldd	r16, Y+62	; 0x3e
    6456:	1f ad       	ldd	r17, Y+63	; 0x3f
    6458:	ab 97       	sbiw	r28, 0x2b	; 43
    645a:	00 34       	cpi	r16, 0x40	; 64
    645c:	11 05       	cpc	r17, r1
    645e:	a9 f0       	breq	.+42     	; 0x648a <sha2_small_common_nextBlock+0x590>
		if(i<16){
    6460:	aa 96       	adiw	r28, 0x2a	; 42
    6462:	1f ad       	ldd	r17, Y+63	; 0x3f
    6464:	aa 97       	sbiw	r28, 0x2a	; 42
    6466:	10 31       	cpi	r17, 0x10	; 16
    6468:	08 f0       	brcs	.+2      	; 0x646c <sha2_small_common_nextBlock+0x572>
    646a:	a7 cd       	rjmp	.-1202   	; 0x5fba <sha2_small_common_nextBlock+0xc0>
			wx = w[i];
    646c:	af 96       	adiw	r28, 0x2f	; 47
    646e:	ae ad       	ldd	r26, Y+62	; 0x3e
    6470:	bf ad       	ldd	r27, Y+63	; 0x3f
    6472:	af 97       	sbiw	r28, 0x2f	; 47
    6474:	cd 90       	ld	r12, X+
    6476:	dd 90       	ld	r13, X+
    6478:	ed 90       	ld	r14, X+
    647a:	fc 90       	ld	r15, X
    647c:	a9 96       	adiw	r28, 0x29	; 41
    647e:	cc ae       	std	Y+60, r12	; 0x3c
    6480:	dd ae       	std	Y+61, r13	; 0x3d
    6482:	ee ae       	std	Y+62, r14	; 0x3e
    6484:	ff ae       	std	Y+63, r15	; 0x3f
    6486:	a9 97       	sbiw	r28, 0x29	; 41
    6488:	6a ce       	rjmp	.-812    	; 0x615e <sha2_small_common_nextBlock+0x264>
    648a:	e3 96       	adiw	r28, 0x33	; 51
    648c:	ee ad       	ldd	r30, Y+62	; 0x3e
    648e:	ff ad       	ldd	r31, Y+63	; 0x3f
    6490:	e3 97       	sbiw	r28, 0x33	; 51
    6492:	e1 96       	adiw	r28, 0x31	; 49
    6494:	2e ad       	ldd	r18, Y+62	; 0x3e
    6496:	3f ad       	ldd	r19, Y+63	; 0x3f
    6498:	e1 97       	sbiw	r28, 0x31	; 49
    649a:	10 e2       	ldi	r17, 0x20	; 32
    649c:	21 0e       	add	r2, r17
    649e:	31 1c       	adc	r3, r1
    64a0:	8f 01       	movw	r16, r30
    64a2:	d5 01       	movw	r26, r10
    64a4:	c4 01       	movw	r24, r8
    64a6:	06 c0       	rjmp	.+12     	; 0x64b4 <sha2_small_common_nextBlock+0x5ba>
    64a8:	f9 01       	movw	r30, r18
    64aa:	81 91       	ld	r24, Z+
    64ac:	91 91       	ld	r25, Z+
    64ae:	a1 91       	ld	r26, Z+
    64b0:	b1 91       	ld	r27, Z+
    64b2:	9f 01       	movw	r18, r30
		a[0] = t1 + t2;
	}

/* update, the, state, */
	for (i=0; i<8; ++i){
		state->h[i] += a[i];
    64b4:	f8 01       	movw	r30, r16
    64b6:	40 81       	ld	r20, Z
    64b8:	51 81       	ldd	r21, Z+1	; 0x01
    64ba:	62 81       	ldd	r22, Z+2	; 0x02
    64bc:	73 81       	ldd	r23, Z+3	; 0x03
    64be:	84 0f       	add	r24, r20
    64c0:	95 1f       	adc	r25, r21
    64c2:	a6 1f       	adc	r26, r22
    64c4:	b7 1f       	adc	r27, r23
    64c6:	81 93       	st	Z+, r24
    64c8:	91 93       	st	Z+, r25
    64ca:	a1 93       	st	Z+, r26
    64cc:	b1 93       	st	Z+, r27
    64ce:	8f 01       	movw	r16, r30
		a[4] += t1;
		a[0] = t1 + t2;
	}

/* update, the, state, */
	for (i=0; i<8; ++i){
    64d0:	22 16       	cp	r2, r18
    64d2:	33 06       	cpc	r3, r19
    64d4:	49 f7       	brne	.-46     	; 0x64a8 <sha2_small_common_nextBlock+0x5ae>
		state->h[i] += a[i];
	}
	state->length += 1;
    64d6:	e3 96       	adiw	r28, 0x33	; 51
    64d8:	ee ad       	ldd	r30, Y+62	; 0x3e
    64da:	ff ad       	ldd	r31, Y+63	; 0x3f
    64dc:	e3 97       	sbiw	r28, 0x33	; 51
    64de:	80 a1       	ldd	r24, Z+32	; 0x20
    64e0:	91 a1       	ldd	r25, Z+33	; 0x21
    64e2:	a2 a1       	ldd	r26, Z+34	; 0x22
    64e4:	b3 a1       	ldd	r27, Z+35	; 0x23
    64e6:	01 96       	adiw	r24, 0x01	; 1
    64e8:	a1 1d       	adc	r26, r1
    64ea:	b1 1d       	adc	r27, r1
    64ec:	80 a3       	std	Z+32, r24	; 0x20
    64ee:	91 a3       	std	Z+33, r25	; 0x21
    64f0:	a2 a3       	std	Z+34, r26	; 0x22
    64f2:	b3 a3       	std	Z+35, r27	; 0x23
}
    64f4:	ce 58       	subi	r28, 0x8E	; 142
    64f6:	df 4f       	sbci	r29, 0xFF	; 255
    64f8:	0f b6       	in	r0, 0x3f	; 63
    64fa:	f8 94       	cli
    64fc:	de bf       	out	0x3e, r29	; 62
    64fe:	0f be       	out	0x3f, r0	; 63
    6500:	cd bf       	out	0x3d, r28	; 61
    6502:	df 91       	pop	r29
    6504:	cf 91       	pop	r28
    6506:	1f 91       	pop	r17
    6508:	0f 91       	pop	r16
    650a:	ff 90       	pop	r15
    650c:	ef 90       	pop	r14
    650e:	df 90       	pop	r13
    6510:	cf 90       	pop	r12
    6512:	bf 90       	pop	r11
    6514:	af 90       	pop	r10
    6516:	9f 90       	pop	r9
    6518:	8f 90       	pop	r8
    651a:	7f 90       	pop	r7
    651c:	6f 90       	pop	r6
    651e:	5f 90       	pop	r5
    6520:	4f 90       	pop	r4
    6522:	3f 90       	pop	r3
    6524:	2f 90       	pop	r2
    6526:	08 95       	ret

00006528 <sha2_small_common_lastBlock>:


void sha2_small_common_lastBlock(sha2_small_common_ctx_t *state, const void *block, uint16_t length_b){
    6528:	8f 92       	push	r8
    652a:	9f 92       	push	r9
    652c:	af 92       	push	r10
    652e:	bf 92       	push	r11
    6530:	cf 92       	push	r12
    6532:	df 92       	push	r13
    6534:	ef 92       	push	r14
    6536:	ff 92       	push	r15
    6538:	0f 93       	push	r16
    653a:	1f 93       	push	r17
    653c:	cf 93       	push	r28
    653e:	df 93       	push	r29
    6540:	cd b7       	in	r28, 0x3d	; 61
    6542:	de b7       	in	r29, 0x3e	; 62
    6544:	c8 54       	subi	r28, 0x48	; 72
    6546:	d1 09       	sbc	r29, r1
    6548:	0f b6       	in	r0, 0x3f	; 63
    654a:	f8 94       	cli
    654c:	de bf       	out	0x3e, r29	; 62
    654e:	0f be       	out	0x3f, r0	; 63
    6550:	cd bf       	out	0x3d, r28	; 61
    6552:	8c 01       	movw	r16, r24
    6554:	5b 01       	movw	r10, r22
    6556:	4a 01       	movw	r8, r20
	uint8_t lb[512/8]; /* local block */
	uint64_t len;
	while(length_b>=512){
    6558:	6a 01       	movw	r12, r20
    655a:	41 15       	cp	r20, r1
    655c:	52 40       	sbci	r21, 0x02	; 2
    655e:	18 f1       	brcs	.+70     	; 0x65a6 <sha2_small_common_lastBlock+0x7e>
    6560:	7b 01       	movw	r14, r22
		sha2_small_common_nextBlock(state, block);
    6562:	b7 01       	movw	r22, r14
    6564:	c8 01       	movw	r24, r16
    6566:	c9 dc       	rcall	.-1646   	; 0x5efa <sha2_small_common_nextBlock>
		length_b -= 512;
    6568:	92 e0       	ldi	r25, 0x02	; 2
    656a:	d9 1a       	sub	r13, r25
		block = (uint8_t*)block+64;
    656c:	e0 e4       	ldi	r30, 0x40	; 64
    656e:	ee 0e       	add	r14, r30
    6570:	f1 1c       	adc	r15, r1


void sha2_small_common_lastBlock(sha2_small_common_ctx_t *state, const void *block, uint16_t length_b){
	uint8_t lb[512/8]; /* local block */
	uint64_t len;
	while(length_b>=512){
    6572:	c1 14       	cp	r12, r1
    6574:	f2 e0       	ldi	r31, 0x02	; 2
    6576:	df 06       	cpc	r13, r31
    6578:	a0 f7       	brcc	.-24     	; 0x6562 <sha2_small_common_lastBlock+0x3a>
    657a:	64 01       	movw	r12, r8
    657c:	81 e0       	ldi	r24, 0x01	; 1
    657e:	d8 22       	and	r13, r24
    6580:	92 e0       	ldi	r25, 0x02	; 2
    6582:	99 1a       	sub	r9, r25
    6584:	89 2c       	mov	r8, r9
    6586:	99 24       	eor	r9, r9
    6588:	86 94       	lsr	r8
    658a:	ef ef       	ldi	r30, 0xFF	; 255
    658c:	8e 1a       	sub	r8, r30
    658e:	9e 0a       	sbc	r9, r30
    6590:	00 24       	eor	r0, r0
    6592:	96 94       	lsr	r9
    6594:	87 94       	ror	r8
    6596:	07 94       	ror	r0
    6598:	96 94       	lsr	r9
    659a:	87 94       	ror	r8
    659c:	07 94       	ror	r0
    659e:	98 2c       	mov	r9, r8
    65a0:	80 2c       	mov	r8, r0
    65a2:	a8 0c       	add	r10, r8
    65a4:	b9 1c       	adc	r11, r9
		sha2_small_common_nextBlock(state, block);
		length_b -= 512;
		block = (uint8_t*)block+64;
	}
	len = state->length*512 + length_b;
    65a6:	f8 01       	movw	r30, r16
    65a8:	80 a1       	ldd	r24, Z+32	; 0x20
    65aa:	91 a1       	ldd	r25, Z+33	; 0x21
    65ac:	a2 a1       	ldd	r26, Z+34	; 0x22
    65ae:	b3 a1       	ldd	r27, Z+35	; 0x23
    65b0:	29 e0       	ldi	r18, 0x09	; 9
    65b2:	88 0f       	add	r24, r24
    65b4:	99 1f       	adc	r25, r25
    65b6:	aa 1f       	adc	r26, r26
    65b8:	bb 1f       	adc	r27, r27
    65ba:	2a 95       	dec	r18
    65bc:	d1 f7       	brne	.-12     	; 0x65b2 <sha2_small_common_lastBlock+0x8a>
    65be:	8c 0d       	add	r24, r12
    65c0:	9d 1d       	adc	r25, r13
    65c2:	a1 1d       	adc	r26, r1
    65c4:	b1 1d       	adc	r27, r1
    65c6:	9c 01       	movw	r18, r24
    65c8:	ad 01       	movw	r20, r26
    65ca:	22 96       	adiw	r28, 0x02	; 2
    65cc:	8f af       	std	Y+63, r24	; 0x3f
    65ce:	22 97       	sbiw	r28, 0x02	; 2
    65d0:	23 96       	adiw	r28, 0x03	; 3
    65d2:	3f af       	std	Y+63, r19	; 0x3f
    65d4:	23 97       	sbiw	r28, 0x03	; 3
    65d6:	24 96       	adiw	r28, 0x04	; 4
    65d8:	4f af       	std	Y+63, r20	; 0x3f
    65da:	24 97       	sbiw	r28, 0x04	; 4
    65dc:	25 96       	adiw	r28, 0x05	; 5
    65de:	5f af       	std	Y+63, r21	; 0x3f
    65e0:	25 97       	sbiw	r28, 0x05	; 5
    65e2:	26 96       	adiw	r28, 0x06	; 6
    65e4:	1f ae       	std	Y+63, r1	; 0x3f
    65e6:	26 97       	sbiw	r28, 0x06	; 6
    65e8:	27 96       	adiw	r28, 0x07	; 7
    65ea:	1f ae       	std	Y+63, r1	; 0x3f
    65ec:	27 97       	sbiw	r28, 0x07	; 7
    65ee:	28 96       	adiw	r28, 0x08	; 8
    65f0:	1f ae       	std	Y+63, r1	; 0x3f
    65f2:	28 97       	sbiw	r28, 0x08	; 8
    65f4:	29 96       	adiw	r28, 0x09	; 9
    65f6:	1f ae       	std	Y+63, r1	; 0x3f
    65f8:	29 97       	sbiw	r28, 0x09	; 9
	memset(lb, 0, 64);
    65fa:	30 e4       	ldi	r19, 0x40	; 64
    65fc:	93 2e       	mov	r9, r19
    65fe:	ce 01       	movw	r24, r28
    6600:	01 96       	adiw	r24, 0x01	; 1
    6602:	7c 01       	movw	r14, r24
    6604:	fc 01       	movw	r30, r24
    6606:	89 2d       	mov	r24, r9
    6608:	11 92       	st	Z+, r1
    660a:	8a 95       	dec	r24
    660c:	e9 f7       	brne	.-6      	; 0x6608 <sha2_small_common_lastBlock+0xe0>
	memcpy(lb, block, (length_b+7)/8);
    660e:	a6 01       	movw	r20, r12
    6610:	49 5f       	subi	r20, 0xF9	; 249
    6612:	5f 4f       	sbci	r21, 0xFF	; 255
    6614:	56 95       	lsr	r21
    6616:	47 95       	ror	r20
    6618:	56 95       	lsr	r21
    661a:	47 95       	ror	r20
    661c:	56 95       	lsr	r21
    661e:	47 95       	ror	r20
    6620:	b5 01       	movw	r22, r10
    6622:	c7 01       	movw	r24, r14
    6624:	0a d2       	rcall	.+1044   	; 0x6a3a <memcpy>

	/* set the final one bit */
	lb[length_b/8] |= 0x80>>(length_b & 0x7);
    6626:	f6 01       	movw	r30, r12
    6628:	f6 95       	lsr	r31
    662a:	e7 95       	ror	r30
    662c:	f6 95       	lsr	r31
    662e:	e7 95       	ror	r30
    6630:	f6 95       	lsr	r31
    6632:	e7 95       	ror	r30
    6634:	ee 0d       	add	r30, r14
    6636:	ff 1d       	adc	r31, r15
    6638:	96 01       	movw	r18, r12
    663a:	27 70       	andi	r18, 0x07	; 7
    663c:	33 27       	eor	r19, r19
    663e:	80 e8       	ldi	r24, 0x80	; 128
    6640:	90 e0       	ldi	r25, 0x00	; 0
    6642:	02 c0       	rjmp	.+4      	; 0x6648 <sha2_small_common_lastBlock+0x120>
    6644:	95 95       	asr	r25
    6646:	87 95       	ror	r24
    6648:	2a 95       	dec	r18
    664a:	e2 f7       	brpl	.-8      	; 0x6644 <sha2_small_common_lastBlock+0x11c>
    664c:	90 81       	ld	r25, Z
    664e:	89 2b       	or	r24, r25
    6650:	80 83       	st	Z, r24
	/* pad with zeros */
	if (length_b>=512-64){ /* not enouth space for 64bit length value */
    6652:	90 ec       	ldi	r25, 0xC0	; 192
    6654:	c9 16       	cp	r12, r25
    6656:	91 e0       	ldi	r25, 0x01	; 1
    6658:	d9 06       	cpc	r13, r25
    665a:	58 f5       	brcc	.+86     	; 0x66b2 <sha2_small_common_lastBlock+0x18a>


void sha2_small_common_lastBlock(sha2_small_common_ctx_t *state, const void *block, uint16_t length_b){
	uint8_t lb[512/8]; /* local block */
	uint64_t len;
	while(length_b>=512){
    665c:	27 e0       	ldi	r18, 0x07	; 7
#if defined LITTLE_ENDIAN
	 	/* this is now rolled up */
	uint8_t i;
	i=7;
	do{
		lb[63-i] = ((uint8_t*)&len)[i];
    665e:	4f e3       	ldi	r20, 0x3F	; 63
    6660:	50 e0       	ldi	r21, 0x00	; 0
    6662:	82 2f       	mov	r24, r18
    6664:	90 e0       	ldi	r25, 0x00	; 0
    6666:	fa 01       	movw	r30, r20
    6668:	e8 1b       	sub	r30, r24
    666a:	f9 0b       	sbc	r31, r25
    666c:	ee 0d       	add	r30, r14
    666e:	ff 1d       	adc	r31, r15
    6670:	a1 e4       	ldi	r26, 0x41	; 65
    6672:	b0 e0       	ldi	r27, 0x00	; 0
    6674:	ac 0f       	add	r26, r28
    6676:	bd 1f       	adc	r27, r29
    6678:	a8 0f       	add	r26, r24
    667a:	b9 1f       	adc	r27, r25
    667c:	8c 91       	ld	r24, X
    667e:	80 83       	st	Z, r24
	}while(i--);
    6680:	21 50       	subi	r18, 0x01	; 1
    6682:	78 f7       	brcc	.-34     	; 0x6662 <sha2_small_common_lastBlock+0x13a>
#elif defined BIG_ENDIAN
	*((uint64_t)&(lb[56])) = len;
#endif
	sha2_small_common_nextBlock(state, lb);
    6684:	b7 01       	movw	r22, r14
    6686:	c8 01       	movw	r24, r16
    6688:	38 dc       	rcall	.-1936   	; 0x5efa <sha2_small_common_nextBlock>
}
    668a:	c8 5b       	subi	r28, 0xB8	; 184
    668c:	df 4f       	sbci	r29, 0xFF	; 255
    668e:	0f b6       	in	r0, 0x3f	; 63
    6690:	f8 94       	cli
    6692:	de bf       	out	0x3e, r29	; 62
    6694:	0f be       	out	0x3f, r0	; 63
    6696:	cd bf       	out	0x3d, r28	; 61
    6698:	df 91       	pop	r29
    669a:	cf 91       	pop	r28
    669c:	1f 91       	pop	r17
    669e:	0f 91       	pop	r16
    66a0:	ff 90       	pop	r15
    66a2:	ef 90       	pop	r14
    66a4:	df 90       	pop	r13
    66a6:	cf 90       	pop	r12
    66a8:	bf 90       	pop	r11
    66aa:	af 90       	pop	r10
    66ac:	9f 90       	pop	r9
    66ae:	8f 90       	pop	r8

	/* set the final one bit */
	lb[length_b/8] |= 0x80>>(length_b & 0x7);
	/* pad with zeros */
	if (length_b>=512-64){ /* not enouth space for 64bit length value */
		sha2_small_common_nextBlock(state, lb);
    66b0:	08 95       	ret
    66b2:	b7 01       	movw	r22, r14
    66b4:	c8 01       	movw	r24, r16
    66b6:	21 dc       	rcall	.-1982   	; 0x5efa <sha2_small_common_nextBlock>
		memset(lb, 0, 64);
    66b8:	f7 01       	movw	r30, r14
    66ba:	11 92       	st	Z+, r1
    66bc:	9a 94       	dec	r9
    66be:	e9 f7       	brne	.-6      	; 0x66ba <sha2_small_common_lastBlock+0x192>
    66c0:	cd cf       	rjmp	.-102    	; 0x665c <sha2_small_common_lastBlock+0x134>

000066c2 <sha512>:
		s += 8;
	}while(--i);
}


void sha512(void *dest, const void *msg, uint32_t length_b){
    66c2:	2f 92       	push	r2
    66c4:	3f 92       	push	r3
    66c6:	4f 92       	push	r4
    66c8:	5f 92       	push	r5
    66ca:	6f 92       	push	r6
    66cc:	7f 92       	push	r7
    66ce:	8f 92       	push	r8
    66d0:	9f 92       	push	r9
    66d2:	af 92       	push	r10
    66d4:	bf 92       	push	r11
    66d6:	cf 92       	push	r12
    66d8:	df 92       	push	r13
    66da:	ef 92       	push	r14
    66dc:	ff 92       	push	r15
    66de:	0f 93       	push	r16
    66e0:	1f 93       	push	r17
    66e2:	cf 93       	push	r28
    66e4:	df 93       	push	r29
    66e6:	cd b7       	in	r28, 0x3d	; 61
    66e8:	de b7       	in	r29, 0x3e	; 62
    66ea:	c4 54       	subi	r28, 0x44	; 68
    66ec:	d1 09       	sbc	r29, r1
    66ee:	0f b6       	in	r0, 0x3f	; 63
    66f0:	f8 94       	cli
    66f2:	de bf       	out	0x3e, r29	; 62
    66f4:	0f be       	out	0x3f, r0	; 63
    66f6:	cd bf       	out	0x3d, r28	; 61
    66f8:	4c 01       	movw	r8, r24
    66fa:	1b 01       	movw	r2, r22
    66fc:	29 01       	movw	r4, r18
    66fe:	3a 01       	movw	r6, r20
0x510e527fade682d1LL, 0x9b05688c2b3e6c1fLL, 0x1f83d9abfb41bd6bLL, 0x5be0cd19137e2179LL
};


void sha512_init(sha512_ctx_t *ctx){
	ctx->length = 0;
    6700:	5e 01       	movw	r10, r28
    6702:	81 e4       	ldi	r24, 0x41	; 65
    6704:	a8 0e       	add	r10, r24
    6706:	b1 1c       	adc	r11, r1
    6708:	f5 01       	movw	r30, r10
    670a:	10 82       	st	Z, r1
    670c:	11 82       	std	Z+1, r1	; 0x01
    670e:	12 82       	std	Z+2, r1	; 0x02
    6710:	13 82       	std	Z+3, r1	; 0x03
	memcpy_P(ctx->h, sha512_init_values, 8*8);
    6712:	40 e4       	ldi	r20, 0x40	; 64
    6714:	50 e0       	ldi	r21, 0x00	; 0
    6716:	64 e3       	ldi	r22, 0x34	; 52
    6718:	74 e0       	ldi	r23, 0x04	; 4
    671a:	ce 01       	movw	r24, r28
    671c:	01 96       	adiw	r24, 0x01	; 1
    671e:	84 d1       	rcall	.+776    	; 0x6a28 <memcpy_P>


void sha512(void *dest, const void *msg, uint32_t length_b){
	sha512_ctx_t ctx;
	sha512_init(&ctx);
	while(length_b >= 1024){
    6720:	41 14       	cp	r4, r1
    6722:	f4 e0       	ldi	r31, 0x04	; 4
    6724:	5f 06       	cpc	r5, r31
    6726:	61 04       	cpc	r6, r1
    6728:	71 04       	cpc	r7, r1
    672a:	60 f1       	brcs	.+88     	; 0x6784 <sha512+0xc2>
    672c:	73 01       	movw	r14, r6
    672e:	62 01       	movw	r12, r4
    6730:	81 01       	movw	r16, r2
#include "sha2_large_common.h"
#include "sha512.h"


void sha512_nextBlock (sha512_ctx_t *ctx, const void *block){
	sha2_large_common_nextBlock(ctx, block);
    6732:	b8 01       	movw	r22, r16
    6734:	ce 01       	movw	r24, r28
    6736:	01 96       	adiw	r24, 0x01	; 1
    6738:	0e 94 d7 24 	call	0x49ae	; 0x49ae <sha2_large_common_nextBlock>
void sha512(void *dest, const void *msg, uint32_t length_b){
	sha512_ctx_t ctx;
	sha512_init(&ctx);
	while(length_b >= 1024){
		sha512_nextBlock(&ctx, msg);
		msg = (uint8_t*)msg + 1024/8;
    673c:	00 58       	subi	r16, 0x80	; 128
    673e:	1f 4f       	sbci	r17, 0xFF	; 255
		length_b -= 1024;
    6740:	84 e0       	ldi	r24, 0x04	; 4
    6742:	d8 1a       	sub	r13, r24
    6744:	e1 08       	sbc	r14, r1
    6746:	f1 08       	sbc	r15, r1


void sha512(void *dest, const void *msg, uint32_t length_b){
	sha512_ctx_t ctx;
	sha512_init(&ctx);
	while(length_b >= 1024){
    6748:	c1 14       	cp	r12, r1
    674a:	e4 e0       	ldi	r30, 0x04	; 4
    674c:	de 06       	cpc	r13, r30
    674e:	e1 04       	cpc	r14, r1
    6750:	f1 04       	cpc	r15, r1
    6752:	78 f7       	brcc	.-34     	; 0x6732 <sha512+0x70>
    6754:	d3 01       	movw	r26, r6
    6756:	c2 01       	movw	r24, r4
    6758:	94 50       	subi	r25, 0x04	; 4
    675a:	a1 09       	sbc	r26, r1
    675c:	b1 09       	sbc	r27, r1
    675e:	2a e0       	ldi	r18, 0x0A	; 10
    6760:	b6 95       	lsr	r27
    6762:	a7 95       	ror	r26
    6764:	97 95       	ror	r25
    6766:	87 95       	ror	r24
    6768:	2a 95       	dec	r18
    676a:	d1 f7       	brne	.-12     	; 0x6760 <sha512+0x9e>
    676c:	01 96       	adiw	r24, 0x01	; 1
    676e:	96 95       	lsr	r25
    6770:	98 2f       	mov	r25, r24
    6772:	88 27       	eor	r24, r24
    6774:	97 95       	ror	r25
    6776:	87 95       	ror	r24
    6778:	28 0e       	add	r2, r24
    677a:	39 1e       	adc	r3, r25
    677c:	f3 e0       	ldi	r31, 0x03	; 3
    677e:	5f 22       	and	r5, r31
    6780:	66 24       	eor	r6, r6
    6782:	77 24       	eor	r7, r7
void sha512_nextBlock (sha512_ctx_t *ctx, const void *block){
	sha2_large_common_nextBlock(ctx, block);
}

void sha512_lastBlock(sha512_ctx_t *ctx, const void *block, uint16_t length_b){
	sha2_large_common_lastBlock(ctx, block, length_b);
    6784:	a2 01       	movw	r20, r4
    6786:	b1 01       	movw	r22, r2
    6788:	ce 01       	movw	r24, r28
    678a:	01 96       	adiw	r24, 0x01	; 1
    678c:	27 da       	rcall	.-2994   	; 0x5bdc <sha2_large_common_lastBlock>
	ctx->length = 0;
	memcpy_P(ctx->h, sha512_init_values, 8*8);
}

void sha512_ctx2hash(void *dest, const sha512_ctx_t *ctx){
	uint8_t i=8, j, *s = (uint8_t*)(ctx->h);
    678e:	9e 01       	movw	r18, r28
    6790:	2f 5f       	subi	r18, 0xFF	; 255
    6792:	3f 4f       	sbci	r19, 0xFF	; 255
    6794:	f4 01       	movw	r30, r8
	do{
		j=7;
    6796:	87 e0       	ldi	r24, 0x07	; 7
		do{
			*((uint8_t*)dest) = s[j];
    6798:	d9 01       	movw	r26, r18
    679a:	a8 0f       	add	r26, r24
    679c:	b1 1d       	adc	r27, r1
    679e:	9c 91       	ld	r25, X
    67a0:	91 93       	st	Z+, r25
			dest = (uint8_t*)dest + 1;
		}while(j--);
    67a2:	81 50       	subi	r24, 0x01	; 1
    67a4:	c8 f7       	brcc	.-14     	; 0x6798 <sha512+0xd6>
    67a6:	88 e0       	ldi	r24, 0x08	; 8
    67a8:	88 0e       	add	r8, r24
    67aa:	91 1c       	adc	r9, r1
		s += 8;
    67ac:	28 5f       	subi	r18, 0xF8	; 248
    67ae:	3f 4f       	sbci	r19, 0xFF	; 255
	}while(--i);
    67b0:	2a 15       	cp	r18, r10
    67b2:	3b 05       	cpc	r19, r11
    67b4:	79 f7       	brne	.-34     	; 0x6794 <sha512+0xd2>
		msg = (uint8_t*)msg + 1024/8;
		length_b -= 1024;
	}
	sha512_lastBlock(&ctx, msg, length_b);
	sha512_ctx2hash(dest, &ctx);
}
    67b6:	cc 5b       	subi	r28, 0xBC	; 188
    67b8:	df 4f       	sbci	r29, 0xFF	; 255
    67ba:	0f b6       	in	r0, 0x3f	; 63
    67bc:	f8 94       	cli
    67be:	de bf       	out	0x3e, r29	; 62
    67c0:	0f be       	out	0x3f, r0	; 63
    67c2:	cd bf       	out	0x3d, r28	; 61
    67c4:	df 91       	pop	r29
    67c6:	cf 91       	pop	r28
    67c8:	1f 91       	pop	r17
    67ca:	0f 91       	pop	r16
    67cc:	ff 90       	pop	r15
    67ce:	ef 90       	pop	r14
    67d0:	df 90       	pop	r13
    67d2:	cf 90       	pop	r12
    67d4:	bf 90       	pop	r11
    67d6:	af 90       	pop	r10
    67d8:	9f 90       	pop	r9
    67da:	8f 90       	pop	r8
    67dc:	7f 90       	pop	r7
    67de:	6f 90       	pop	r6
    67e0:	5f 90       	pop	r5
    67e2:	4f 90       	pop	r4
    67e4:	3f 90       	pop	r3
    67e6:	2f 90       	pop	r2
    67e8:	08 95       	ret

000067ea <uart_init>:
#include "uart_f.h"
#include "types.h"


void uart_init(){
	UBRR0H = (BAUD_PRESCALE >> 8); // Load upper 8-bits of the baud rate value into the high byte of the UBRR register
    67ea:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
	UBRR0L = BAUD_PRESCALE; // Load lower 8-bits of the baud rate value into the low byte of the UBRR register
    67ee:	83 e3       	ldi	r24, 0x33	; 51
    67f0:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
	UCSR0C = (0<<UMSEL0) | (0<<UPM0) | (1<<USBS0) | (3<<UCSZ0);
    67f4:	8e e0       	ldi	r24, 0x0E	; 14
    67f6:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>
	UCSR0B = (1<<RXEN0) | (1<<TXEN0);
    67fa:	88 e1       	ldi	r24, 0x18	; 24
    67fc:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
    6800:	08 95       	ret

00006802 <uart_puts>:
}

void uart_puts(char* s){
    6802:	cf 93       	push	r28
    6804:	df 93       	push	r29
    6806:	1f 92       	push	r1
    6808:	cd b7       	in	r28, 0x3d	; 61
    680a:	de b7       	in	r29, 0x3e	; 62
    680c:	dc 01       	movw	r26, r24
	volatile uint8_t i;
	int len = strlen(s);
    680e:	fc 01       	movw	r30, r24
    6810:	01 90       	ld	r0, Z+
    6812:	00 20       	and	r0, r0
    6814:	e9 f7       	brne	.-6      	; 0x6810 <uart_puts+0xe>
    6816:	31 97       	sbiw	r30, 0x01	; 1
    6818:	af 01       	movw	r20, r30
    681a:	48 1b       	sub	r20, r24
    681c:	59 0b       	sbc	r21, r25
	for (i = 0; i < len; i++){
    681e:	19 82       	std	Y+1, r1	; 0x01
    6820:	89 81       	ldd	r24, Y+1	; 0x01
    6822:	90 e0       	ldi	r25, 0x00	; 0
    6824:	84 17       	cp	r24, r20
    6826:	95 07       	cpc	r25, r21
    6828:	9c f4       	brge	.+38     	; 0x6850 <uart_puts+0x4e>
		while(!( UCSR0A & 0X20));
    682a:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
    682e:	95 ff       	sbrs	r25, 5
    6830:	fc cf       	rjmp	.-8      	; 0x682a <uart_puts+0x28>
		UDR0=s[i];
    6832:	99 81       	ldd	r25, Y+1	; 0x01
    6834:	fd 01       	movw	r30, r26
    6836:	e9 0f       	add	r30, r25
    6838:	f1 1d       	adc	r31, r1
    683a:	90 81       	ld	r25, Z
    683c:	90 93 c6 00 	sts	0x00C6, r25	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
}

void uart_puts(char* s){
	volatile uint8_t i;
	int len = strlen(s);
	for (i = 0; i < len; i++){
    6840:	99 81       	ldd	r25, Y+1	; 0x01
    6842:	9f 5f       	subi	r25, 0xFF	; 255
    6844:	99 83       	std	Y+1, r25	; 0x01
    6846:	29 81       	ldd	r18, Y+1	; 0x01
    6848:	30 e0       	ldi	r19, 0x00	; 0
    684a:	24 17       	cp	r18, r20
    684c:	35 07       	cpc	r19, r21
    684e:	6c f3       	brlt	.-38     	; 0x682a <uart_puts+0x28>
		while(!( UCSR0A & 0X20));
		UDR0=s[i];
	}
	while(!( UCSR0A & 0X20));
    6850:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
    6854:	85 ff       	sbrs	r24, 5
    6856:	fc cf       	rjmp	.-8      	; 0x6850 <uart_puts+0x4e>
	UDR0 = 13;
    6858:	8d e0       	ldi	r24, 0x0D	; 13
    685a:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
	while(!( UCSR0A & 0X20));
    685e:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
    6862:	85 ff       	sbrs	r24, 5
    6864:	fc cf       	rjmp	.-8      	; 0x685e <uart_puts+0x5c>
	UDR0 = 10;
    6866:	8a e0       	ldi	r24, 0x0A	; 10
    6868:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
}
    686c:	0f 90       	pop	r0
    686e:	df 91       	pop	r29
    6870:	cf 91       	pop	r28
    6872:	08 95       	ret

00006874 <uart_putd>:

void uart_putd(char* s, uint8_t len){
	int i;
	for (i = 0; i < len; i++){
    6874:	66 23       	and	r22, r22
    6876:	71 f0       	breq	.+28     	; 0x6894 <uart_putd+0x20>
    6878:	fc 01       	movw	r30, r24
    687a:	9c 01       	movw	r18, r24
    687c:	26 0f       	add	r18, r22
    687e:	31 1d       	adc	r19, r1
		while(!( UCSR0A & 0X20));
    6880:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
    6884:	85 ff       	sbrs	r24, 5
    6886:	fc cf       	rjmp	.-8      	; 0x6880 <uart_putd+0xc>
		UDR0=s[i];
    6888:	81 91       	ld	r24, Z+
    688a:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
	UDR0 = 10;
}

void uart_putd(char* s, uint8_t len){
	int i;
	for (i = 0; i < len; i++){
    688e:	e2 17       	cp	r30, r18
    6890:	f3 07       	cpc	r31, r19
    6892:	b1 f7       	brne	.-20     	; 0x6880 <uart_putd+0xc>
		while(!( UCSR0A & 0X20));
		UDR0=s[i];
	}
	while(!( UCSR0A & 0X20));
    6894:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
    6898:	85 ff       	sbrs	r24, 5
    689a:	fc cf       	rjmp	.-8      	; 0x6894 <uart_putd+0x20>
	UDR0 = 13;
    689c:	8d e0       	ldi	r24, 0x0D	; 13
    689e:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
	while(!( UCSR0A & 0X20));
    68a2:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
    68a6:	85 ff       	sbrs	r24, 5
    68a8:	fc cf       	rjmp	.-8      	; 0x68a2 <uart_putd+0x2e>
	UDR0 = 10;
    68aa:	8a e0       	ldi	r24, 0x0A	; 10
    68ac:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
    68b0:	08 95       	ret

000068b2 <__bswapsi2>:
    68b2:	69 27       	eor	r22, r25
    68b4:	96 27       	eor	r25, r22
    68b6:	69 27       	eor	r22, r25
    68b8:	78 27       	eor	r23, r24
    68ba:	87 27       	eor	r24, r23
    68bc:	78 27       	eor	r23, r24
    68be:	08 95       	ret

000068c0 <__ashldi3>:
    68c0:	0f 93       	push	r16
    68c2:	08 30       	cpi	r16, 0x08	; 8
    68c4:	90 f0       	brcs	.+36     	; 0x68ea <__ashldi3+0x2a>
    68c6:	98 2f       	mov	r25, r24
    68c8:	87 2f       	mov	r24, r23
    68ca:	76 2f       	mov	r23, r22
    68cc:	65 2f       	mov	r22, r21
    68ce:	54 2f       	mov	r21, r20
    68d0:	43 2f       	mov	r20, r19
    68d2:	32 2f       	mov	r19, r18
    68d4:	22 27       	eor	r18, r18
    68d6:	08 50       	subi	r16, 0x08	; 8
    68d8:	f4 cf       	rjmp	.-24     	; 0x68c2 <__ashldi3+0x2>
    68da:	22 0f       	add	r18, r18
    68dc:	33 1f       	adc	r19, r19
    68de:	44 1f       	adc	r20, r20
    68e0:	55 1f       	adc	r21, r21
    68e2:	66 1f       	adc	r22, r22
    68e4:	77 1f       	adc	r23, r23
    68e6:	88 1f       	adc	r24, r24
    68e8:	99 1f       	adc	r25, r25
    68ea:	0a 95       	dec	r16
    68ec:	b2 f7       	brpl	.-20     	; 0x68da <__ashldi3+0x1a>
    68ee:	0f 91       	pop	r16
    68f0:	08 95       	ret

000068f2 <__ashrdi3>:
    68f2:	97 fb       	bst	r25, 7
    68f4:	10 f8       	bld	r1, 0

000068f6 <__lshrdi3>:
    68f6:	16 94       	lsr	r1
    68f8:	00 08       	sbc	r0, r0
    68fa:	0f 93       	push	r16
    68fc:	08 30       	cpi	r16, 0x08	; 8
    68fe:	98 f0       	brcs	.+38     	; 0x6926 <__lshrdi3+0x30>
    6900:	08 50       	subi	r16, 0x08	; 8
    6902:	23 2f       	mov	r18, r19
    6904:	34 2f       	mov	r19, r20
    6906:	45 2f       	mov	r20, r21
    6908:	56 2f       	mov	r21, r22
    690a:	67 2f       	mov	r22, r23
    690c:	78 2f       	mov	r23, r24
    690e:	89 2f       	mov	r24, r25
    6910:	90 2d       	mov	r25, r0
    6912:	f4 cf       	rjmp	.-24     	; 0x68fc <__lshrdi3+0x6>
    6914:	05 94       	asr	r0
    6916:	97 95       	ror	r25
    6918:	87 95       	ror	r24
    691a:	77 95       	ror	r23
    691c:	67 95       	ror	r22
    691e:	57 95       	ror	r21
    6920:	47 95       	ror	r20
    6922:	37 95       	ror	r19
    6924:	27 95       	ror	r18
    6926:	0a 95       	dec	r16
    6928:	aa f7       	brpl	.-22     	; 0x6914 <__lshrdi3+0x1e>
    692a:	0f 91       	pop	r16
    692c:	08 95       	ret

0000692e <__rotldi3>:
    692e:	0f 93       	push	r16
    6930:	08 30       	cpi	r16, 0x08	; 8
    6932:	a0 f0       	brcs	.+40     	; 0x695c <__rotldi3+0x2e>
    6934:	08 50       	subi	r16, 0x08	; 8
    6936:	09 2e       	mov	r0, r25
    6938:	98 2f       	mov	r25, r24
    693a:	87 2f       	mov	r24, r23
    693c:	76 2f       	mov	r23, r22
    693e:	65 2f       	mov	r22, r21
    6940:	54 2f       	mov	r21, r20
    6942:	43 2f       	mov	r20, r19
    6944:	32 2f       	mov	r19, r18
    6946:	20 2d       	mov	r18, r0
    6948:	f3 cf       	rjmp	.-26     	; 0x6930 <__rotldi3+0x2>
    694a:	22 0f       	add	r18, r18
    694c:	33 1f       	adc	r19, r19
    694e:	44 1f       	adc	r20, r20
    6950:	55 1f       	adc	r21, r21
    6952:	66 1f       	adc	r22, r22
    6954:	77 1f       	adc	r23, r23
    6956:	88 1f       	adc	r24, r24
    6958:	99 1f       	adc	r25, r25
    695a:	21 1d       	adc	r18, r1
    695c:	0a 95       	dec	r16
    695e:	aa f7       	brpl	.-22     	; 0x694a <__rotldi3+0x1c>
    6960:	0f 91       	pop	r16
    6962:	08 95       	ret

00006964 <__adddi3>:
    6964:	2a 0d       	add	r18, r10
    6966:	3b 1d       	adc	r19, r11
    6968:	4c 1d       	adc	r20, r12
    696a:	5d 1d       	adc	r21, r13
    696c:	6e 1d       	adc	r22, r14
    696e:	7f 1d       	adc	r23, r15
    6970:	80 1f       	adc	r24, r16
    6972:	91 1f       	adc	r25, r17
    6974:	08 95       	ret

00006976 <do_rand>:
    6976:	8f 92       	push	r8
    6978:	9f 92       	push	r9
    697a:	af 92       	push	r10
    697c:	bf 92       	push	r11
    697e:	cf 92       	push	r12
    6980:	df 92       	push	r13
    6982:	ef 92       	push	r14
    6984:	ff 92       	push	r15
    6986:	cf 93       	push	r28
    6988:	df 93       	push	r29
    698a:	ec 01       	movw	r28, r24
    698c:	68 81       	ld	r22, Y
    698e:	79 81       	ldd	r23, Y+1	; 0x01
    6990:	8a 81       	ldd	r24, Y+2	; 0x02
    6992:	9b 81       	ldd	r25, Y+3	; 0x03
    6994:	61 15       	cp	r22, r1
    6996:	71 05       	cpc	r23, r1
    6998:	81 05       	cpc	r24, r1
    699a:	91 05       	cpc	r25, r1
    699c:	21 f4       	brne	.+8      	; 0x69a6 <do_rand+0x30>
    699e:	64 e2       	ldi	r22, 0x24	; 36
    69a0:	79 ed       	ldi	r23, 0xD9	; 217
    69a2:	8b e5       	ldi	r24, 0x5B	; 91
    69a4:	97 e0       	ldi	r25, 0x07	; 7
    69a6:	2d e1       	ldi	r18, 0x1D	; 29
    69a8:	33 ef       	ldi	r19, 0xF3	; 243
    69aa:	41 e0       	ldi	r20, 0x01	; 1
    69ac:	50 e0       	ldi	r21, 0x00	; 0
    69ae:	66 d0       	rcall	.+204    	; 0x6a7c <__divmodsi4>
    69b0:	49 01       	movw	r8, r18
    69b2:	5a 01       	movw	r10, r20
    69b4:	9b 01       	movw	r18, r22
    69b6:	ac 01       	movw	r20, r24
    69b8:	a7 ea       	ldi	r26, 0xA7	; 167
    69ba:	b1 e4       	ldi	r27, 0x41	; 65
    69bc:	7b d0       	rcall	.+246    	; 0x6ab4 <__muluhisi3>
    69be:	6b 01       	movw	r12, r22
    69c0:	7c 01       	movw	r14, r24
    69c2:	ac ee       	ldi	r26, 0xEC	; 236
    69c4:	b4 ef       	ldi	r27, 0xF4	; 244
    69c6:	a5 01       	movw	r20, r10
    69c8:	94 01       	movw	r18, r8
    69ca:	80 d0       	rcall	.+256    	; 0x6acc <__mulohisi3>
    69cc:	dc 01       	movw	r26, r24
    69ce:	cb 01       	movw	r24, r22
    69d0:	8c 0d       	add	r24, r12
    69d2:	9d 1d       	adc	r25, r13
    69d4:	ae 1d       	adc	r26, r14
    69d6:	bf 1d       	adc	r27, r15
    69d8:	b7 ff       	sbrs	r27, 7
    69da:	03 c0       	rjmp	.+6      	; 0x69e2 <do_rand+0x6c>
    69dc:	01 97       	sbiw	r24, 0x01	; 1
    69de:	a1 09       	sbc	r26, r1
    69e0:	b0 48       	sbci	r27, 0x80	; 128
    69e2:	88 83       	st	Y, r24
    69e4:	99 83       	std	Y+1, r25	; 0x01
    69e6:	aa 83       	std	Y+2, r26	; 0x02
    69e8:	bb 83       	std	Y+3, r27	; 0x03
    69ea:	9f 77       	andi	r25, 0x7F	; 127
    69ec:	df 91       	pop	r29
    69ee:	cf 91       	pop	r28
    69f0:	ff 90       	pop	r15
    69f2:	ef 90       	pop	r14
    69f4:	df 90       	pop	r13
    69f6:	cf 90       	pop	r12
    69f8:	bf 90       	pop	r11
    69fa:	af 90       	pop	r10
    69fc:	9f 90       	pop	r9
    69fe:	8f 90       	pop	r8
    6a00:	08 95       	ret

00006a02 <rand_r>:
    6a02:	b9 cf       	rjmp	.-142    	; 0x6976 <do_rand>

00006a04 <rand>:
    6a04:	80 e0       	ldi	r24, 0x00	; 0
    6a06:	91 e0       	ldi	r25, 0x01	; 1
    6a08:	b6 cf       	rjmp	.-148    	; 0x6976 <do_rand>

00006a0a <srand>:
    6a0a:	a0 e0       	ldi	r26, 0x00	; 0
    6a0c:	b0 e0       	ldi	r27, 0x00	; 0
    6a0e:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
    6a12:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
    6a16:	a0 93 02 01 	sts	0x0102, r26	; 0x800102 <__data_start+0x2>
    6a1a:	b0 93 03 01 	sts	0x0103, r27	; 0x800103 <__data_start+0x3>
    6a1e:	08 95       	ret

00006a20 <abort>:
    6a20:	81 e0       	ldi	r24, 0x01	; 1
    6a22:	90 e0       	ldi	r25, 0x00	; 0
    6a24:	f8 94       	cli
    6a26:	87 c0       	rjmp	.+270    	; 0x6b36 <_exit>

00006a28 <memcpy_P>:
    6a28:	fb 01       	movw	r30, r22
    6a2a:	dc 01       	movw	r26, r24
    6a2c:	02 c0       	rjmp	.+4      	; 0x6a32 <memcpy_P+0xa>
    6a2e:	05 90       	lpm	r0, Z+
    6a30:	0d 92       	st	X+, r0
    6a32:	41 50       	subi	r20, 0x01	; 1
    6a34:	50 40       	sbci	r21, 0x00	; 0
    6a36:	d8 f7       	brcc	.-10     	; 0x6a2e <memcpy_P+0x6>
    6a38:	08 95       	ret

00006a3a <memcpy>:
    6a3a:	fb 01       	movw	r30, r22
    6a3c:	dc 01       	movw	r26, r24
    6a3e:	02 c0       	rjmp	.+4      	; 0x6a44 <memcpy+0xa>
    6a40:	01 90       	ld	r0, Z+
    6a42:	0d 92       	st	X+, r0
    6a44:	41 50       	subi	r20, 0x01	; 1
    6a46:	50 40       	sbci	r21, 0x00	; 0
    6a48:	d8 f7       	brcc	.-10     	; 0x6a40 <memcpy+0x6>
    6a4a:	08 95       	ret

00006a4c <memmove>:
    6a4c:	68 17       	cp	r22, r24
    6a4e:	79 07       	cpc	r23, r25
    6a50:	68 f4       	brcc	.+26     	; 0x6a6c <memmove+0x20>
    6a52:	fb 01       	movw	r30, r22
    6a54:	dc 01       	movw	r26, r24
    6a56:	e4 0f       	add	r30, r20
    6a58:	f5 1f       	adc	r31, r21
    6a5a:	a4 0f       	add	r26, r20
    6a5c:	b5 1f       	adc	r27, r21
    6a5e:	02 c0       	rjmp	.+4      	; 0x6a64 <memmove+0x18>
    6a60:	02 90       	ld	r0, -Z
    6a62:	0e 92       	st	-X, r0
    6a64:	41 50       	subi	r20, 0x01	; 1
    6a66:	50 40       	sbci	r21, 0x00	; 0
    6a68:	d8 f7       	brcc	.-10     	; 0x6a60 <memmove+0x14>
    6a6a:	08 95       	ret
    6a6c:	e6 cf       	rjmp	.-52     	; 0x6a3a <memcpy>

00006a6e <memset>:
    6a6e:	dc 01       	movw	r26, r24
    6a70:	01 c0       	rjmp	.+2      	; 0x6a74 <memset+0x6>
    6a72:	6d 93       	st	X+, r22
    6a74:	41 50       	subi	r20, 0x01	; 1
    6a76:	50 40       	sbci	r21, 0x00	; 0
    6a78:	e0 f7       	brcc	.-8      	; 0x6a72 <memset+0x4>
    6a7a:	08 95       	ret

00006a7c <__divmodsi4>:
    6a7c:	05 2e       	mov	r0, r21
    6a7e:	97 fb       	bst	r25, 7
    6a80:	16 f4       	brtc	.+4      	; 0x6a86 <__divmodsi4+0xa>
    6a82:	00 94       	com	r0
    6a84:	0f d0       	rcall	.+30     	; 0x6aa4 <__negsi2>
    6a86:	57 fd       	sbrc	r21, 7
    6a88:	05 d0       	rcall	.+10     	; 0x6a94 <__divmodsi4_neg2>
    6a8a:	24 d0       	rcall	.+72     	; 0x6ad4 <__udivmodsi4>
    6a8c:	07 fc       	sbrc	r0, 7
    6a8e:	02 d0       	rcall	.+4      	; 0x6a94 <__divmodsi4_neg2>
    6a90:	46 f4       	brtc	.+16     	; 0x6aa2 <__divmodsi4_exit>
    6a92:	08 c0       	rjmp	.+16     	; 0x6aa4 <__negsi2>

00006a94 <__divmodsi4_neg2>:
    6a94:	50 95       	com	r21
    6a96:	40 95       	com	r20
    6a98:	30 95       	com	r19
    6a9a:	21 95       	neg	r18
    6a9c:	3f 4f       	sbci	r19, 0xFF	; 255
    6a9e:	4f 4f       	sbci	r20, 0xFF	; 255
    6aa0:	5f 4f       	sbci	r21, 0xFF	; 255

00006aa2 <__divmodsi4_exit>:
    6aa2:	08 95       	ret

00006aa4 <__negsi2>:
    6aa4:	90 95       	com	r25
    6aa6:	80 95       	com	r24
    6aa8:	70 95       	com	r23
    6aaa:	61 95       	neg	r22
    6aac:	7f 4f       	sbci	r23, 0xFF	; 255
    6aae:	8f 4f       	sbci	r24, 0xFF	; 255
    6ab0:	9f 4f       	sbci	r25, 0xFF	; 255
    6ab2:	08 95       	ret

00006ab4 <__muluhisi3>:
    6ab4:	31 d0       	rcall	.+98     	; 0x6b18 <__umulhisi3>
    6ab6:	a5 9f       	mul	r26, r21
    6ab8:	90 0d       	add	r25, r0
    6aba:	b4 9f       	mul	r27, r20
    6abc:	90 0d       	add	r25, r0
    6abe:	a4 9f       	mul	r26, r20
    6ac0:	80 0d       	add	r24, r0
    6ac2:	91 1d       	adc	r25, r1
    6ac4:	11 24       	eor	r1, r1
    6ac6:	08 95       	ret

00006ac8 <__mulshisi3>:
    6ac8:	b7 ff       	sbrs	r27, 7
    6aca:	f4 cf       	rjmp	.-24     	; 0x6ab4 <__muluhisi3>

00006acc <__mulohisi3>:
    6acc:	f3 df       	rcall	.-26     	; 0x6ab4 <__muluhisi3>
    6ace:	82 1b       	sub	r24, r18
    6ad0:	93 0b       	sbc	r25, r19
    6ad2:	08 95       	ret

00006ad4 <__udivmodsi4>:
    6ad4:	a1 e2       	ldi	r26, 0x21	; 33
    6ad6:	1a 2e       	mov	r1, r26
    6ad8:	aa 1b       	sub	r26, r26
    6ada:	bb 1b       	sub	r27, r27
    6adc:	fd 01       	movw	r30, r26
    6ade:	0d c0       	rjmp	.+26     	; 0x6afa <__udivmodsi4_ep>

00006ae0 <__udivmodsi4_loop>:
    6ae0:	aa 1f       	adc	r26, r26
    6ae2:	bb 1f       	adc	r27, r27
    6ae4:	ee 1f       	adc	r30, r30
    6ae6:	ff 1f       	adc	r31, r31
    6ae8:	a2 17       	cp	r26, r18
    6aea:	b3 07       	cpc	r27, r19
    6aec:	e4 07       	cpc	r30, r20
    6aee:	f5 07       	cpc	r31, r21
    6af0:	20 f0       	brcs	.+8      	; 0x6afa <__udivmodsi4_ep>
    6af2:	a2 1b       	sub	r26, r18
    6af4:	b3 0b       	sbc	r27, r19
    6af6:	e4 0b       	sbc	r30, r20
    6af8:	f5 0b       	sbc	r31, r21

00006afa <__udivmodsi4_ep>:
    6afa:	66 1f       	adc	r22, r22
    6afc:	77 1f       	adc	r23, r23
    6afe:	88 1f       	adc	r24, r24
    6b00:	99 1f       	adc	r25, r25
    6b02:	1a 94       	dec	r1
    6b04:	69 f7       	brne	.-38     	; 0x6ae0 <__udivmodsi4_loop>
    6b06:	60 95       	com	r22
    6b08:	70 95       	com	r23
    6b0a:	80 95       	com	r24
    6b0c:	90 95       	com	r25
    6b0e:	9b 01       	movw	r18, r22
    6b10:	ac 01       	movw	r20, r24
    6b12:	bd 01       	movw	r22, r26
    6b14:	cf 01       	movw	r24, r30
    6b16:	08 95       	ret

00006b18 <__umulhisi3>:
    6b18:	a2 9f       	mul	r26, r18
    6b1a:	b0 01       	movw	r22, r0
    6b1c:	b3 9f       	mul	r27, r19
    6b1e:	c0 01       	movw	r24, r0
    6b20:	a3 9f       	mul	r26, r19
    6b22:	70 0d       	add	r23, r0
    6b24:	81 1d       	adc	r24, r1
    6b26:	11 24       	eor	r1, r1
    6b28:	91 1d       	adc	r25, r1
    6b2a:	b2 9f       	mul	r27, r18
    6b2c:	70 0d       	add	r23, r0
    6b2e:	81 1d       	adc	r24, r1
    6b30:	11 24       	eor	r1, r1
    6b32:	91 1d       	adc	r25, r1
    6b34:	08 95       	ret

00006b36 <_exit>:
    6b36:	f8 94       	cli

00006b38 <__stop_program>:
    6b38:	ff cf       	rjmp	.-2      	; 0x6b38 <__stop_program>
